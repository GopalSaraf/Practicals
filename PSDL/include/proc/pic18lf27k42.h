// Generated 09/02/2023 GMT

/*
 * Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
 * All rights reserved.
 * 
 * This software is developed by Microchip Technology Inc. and its subsidiaries ("Microchip").
 * 
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 * 
 *     1. Redistributions of source code must retain the above copyright notice, this list of
 *        conditions and the following disclaimer.
 * 
 *     2. Redistributions in binary form must reproduce the above copyright notice, this list
 *        of conditions and the following disclaimer in the documentation and/or other
 *        materials provided with the distribution. Publication is not required when
 *        this file is used in an embedded application.
 * 
 *     3. Microchip's name may not be used to endorse or promote products derived from this
 *        software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _PIC18LF27K42_H_
#define _PIC18LF27K42_H_

/*
 * C Header file for the Microchip PIC Microcontroller
 * PIC18LF27K42
 */
#ifndef _XC_H_
#warning Header file pic18lf27k42.h included directly. Use #include <xc.h> instead.
#endif

#include <__at.h>

/*
 * Interrupt Source IRQ numbers
 */

// Software Interrupt
#define                                 IRQ_SWINT           0
// HLVD Interrupt
#define                                 IRQ_HLVD            1
// Oscillator Failure Interrupt
#define                                 IRQ_OSF             2
// Clock Switch Interrupt
#define                                 IRQ_CSW             3
// NVM Interrupt
#define                                 IRQ_NVM             4
// Scanner Interrupt
#define                                 IRQ_SCAN            5
// CRC Interrupt
#define                                 IRQ_CRC             6
// Interrupt on change
#define                                 IRQ_IOC             7
// External Interrupt 0
#define                                 IRQ_INT0            8
// ZCD Interrupt
#define                                 IRQ_ZCD             9
// ADC Interrupt
#define                                 IRQ_AD              10
// ADC Treshold Interrupt
#define                                 IRQ_ADT             11
// Comparator 1 Interrupt
#define                                 IRQ_CMP1            12
// SMT1 Interrupt
#define                                 IRQ_SMT1            13
// SMT1 Period acqusition Interrupt
#define                                 IRQ_SMT1PRA         14
// SMT1 Pulse width acqusition Interrupt
#define                                 IRQ_SMT1PRW         15
// DMA1 Source count Interrupt
#define                                 IRQ_DMA1SCNT        16
// DMA1 Destination count Interrupt
#define                                 IRQ_DMA1DCNT        17
// DMA1 Overflow Interrupt
#define                                 IRQ_DMA1OR          18
// DMA1 Abort Interrupt
#define                                 IRQ_DMA1A           19
// SPI1 Receive Interrupt
#define                                 IRQ_SPI1RX          20
// SPI1 Transmit Interrupt
#define                                 IRQ_SPI1TX          21
// SPI1 Interrupt
#define                                 IRQ_SPI1            22
// I2C1 Receive Interrupt
#define                                 IRQ_I2C1RX          23
// I2C1 Transmit Interrupt
#define                                 IRQ_I2C1TX          24
// I2C1 Interrupt
#define                                 IRQ_I2C1            25
// I2C1 Error Interrupt
#define                                 IRQ_I2C1E           26
// UART1 Receive Interrupt
#define                                 IRQ_U1RX            27
// UART1 Transmit Interrupt
#define                                 IRQ_U1TX            28
// UART1 Error Interrupt
#define                                 IRQ_U1E             29
// UART1 Interrupt
#define                                 IRQ_U1              30
// Timer0 Interrupt
#define                                 IRQ_TMR0            31
// Timer1 Interrupt
#define                                 IRQ_TMR1            32
// Timer1 Gate Interrupt
#define                                 IRQ_TMR1G           33
// Timer2 Interrupt
#define                                 IRQ_TMR2            34
// CCP1 Interrupt
#define                                 IRQ_CCP1            35
// NCO1 Interrupt
#define                                 IRQ_NCO1            37
// CWG1 Interrupt
#define                                 IRQ_CWG1            38
// CLC1 Interrupt
#define                                 IRQ_CLC1            39
// External Interrupt 1
#define                                 IRQ_INT1            40
// Comparator 2 Interrupt
#define                                 IRQ_CMP2            41
// DMA2 Source count Interrupt
#define                                 IRQ_DMA2SCNT        42
// DMA2 Destination count Interrupt
#define                                 IRQ_DMA2DCNT        43
// DMA2 Overflow Interrupt
#define                                 IRQ_DMA2OR          44
// DMA2 Abort Interrupt
#define                                 IRQ_DMA2A           45
// I2C2 Receive Interrupt
#define                                 IRQ_I2C2RX          46
// I2C2 Transmit Interrupt
#define                                 IRQ_I2C2TX          47
// I2C2 Interrupt
#define                                 IRQ_I2C2            48
// I2C2 Error Interrupt
#define                                 IRQ_I2C2E           49
// UART2 Receive Interrupt
#define                                 IRQ_U2RX            50
// UART2 Transmit Interrupt
#define                                 IRQ_U2TX            51
// UART2 Error Interrupt
#define                                 IRQ_U2E             52
// UART2 Interrupt
#define                                 IRQ_U2              53
// Timer3 Interrupt
#define                                 IRQ_TMR3            54
// Timer3 Gate Interrupt
#define                                 IRQ_TMR3G           55
// Timer4 Interrupt
#define                                 IRQ_TMR4            56
// CCP2 Interrupt
#define                                 IRQ_CCP2            57
// CWG2 Interrupt
#define                                 IRQ_CWG2            59
// CLC2 Interrupt
#define                                 IRQ_CLC2            60
// External Interrupt 2
#define                                 IRQ_INT2            61
// Timer5 Interrupt
#define                                 IRQ_TMR5            70
// Timer5 Gate Interrupt
#define                                 IRQ_TMR5G           71
// Timer6 Interrupt
#define                                 IRQ_TMR6            72
// CCP3 Interrupt
#define                                 IRQ_CCP3            73
// CWG3 Interrupt
#define                                 IRQ_CWG3            74
// CLC3 Interrupt
#define                                 IRQ_CLC3            75
// CCP4 Interrupt
#define                                 IRQ_CCP4            80
// CLC4 Interrupt
#define                                 IRQ_CLC4            81
/*
 * Device Information Area (DIA) Table
 */

#define DIA_MUI                                             0x3F0000
#define DIA_MUI0                                            0x3F0000
#define DIA_MUI1                                            0x3F0002
#define DIA_MUI2                                            0x3F0004
#define DIA_MUI3                                            0x3F0006
#define DIA_MUI4                                            0x3F0008
#define DIA_MUI5                                            0x3F000A
#define DIA_MUI6                                            0x3F000C
#define DIA_MUI7                                            0x3F000E

#define DIA_EUI                                             0x3F0010
#define DIA_EUI0                                            0x3F0010
#define DIA_EUI1                                            0x3F0012
#define DIA_EUI2                                            0x3F0014
#define DIA_EUI3                                            0x3F0016
#define DIA_EUI4                                            0x3F0018
#define DIA_EUI5                                            0x3F001A
#define DIA_EUI6                                            0x3F001C
#define DIA_EUI7                                            0x3F001E
#define DIA_EUI8                                            0x3F0020
#define DIA_EUI9                                            0x3F0022

#define DIA_TSLR                                            0x3F0024
#define DIA_TSLR1                                           0x3F0024
#define DIA_TSLR2                                           0x3F0026
#define DIA_TSLR3                                           0x3F0028

#define DIA_TSHR                                            0x3F002A
#define DIA_TSHR1                                           0x3F002A
#define DIA_TSHR2                                           0x3F002C
#define DIA_TSHR3                                           0x3F002E

#define DIA_FVRA                                            0x3F0030
#define DIA_FVRA1X                                          0x3F0030
#define DIA_FVRA2X                                          0x3F0032
#define DIA_FVRA4X                                          0x3F0034

#define DIA_FVRC                                            0x3F0036
#define DIA_FVRC1X                                          0x3F0036
#define DIA_FVRC2X                                          0x3F0038
#define DIA_FVRC4X                                          0x3F003A

/*
 * Device Configuration Information (DCI) Table
 */

#define DCI_ERSIZ                                           0x3FFF00
#define DCI_WLSIZ                                           0x3FFF02
#define DCI_URSIZ                                           0x3FFF04
#define DCI_EESIZ                                           0x3FFF06
#define DCI_PCNT                                            0x3FFF08

/*
 * Register Definitions
 */

// Register: STATUS_CSHAD
#define STATUS_CSHAD STATUS_CSHAD
extern volatile unsigned char           STATUS_CSHAD        __at(0x3880);
#ifndef _LIB_BUILD
asm("STATUS_CSHAD equ 03880h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :5;
        unsigned NOT_PD                 :1;
    };
    struct {
        unsigned                        :6;
        unsigned NOT_TO                 :1;
    };
    struct {
        unsigned C                      :1;
        unsigned DC                     :1;
        unsigned Z                      :1;
        unsigned OV                     :1;
        unsigned N                      :1;
        unsigned nPD                    :1;
        unsigned nTO                    :1;
    };
    struct {
        unsigned                        :5;
        unsigned PD                     :1;
        unsigned TO                     :1;
    };
} STATUS_CSHADbits_t;
extern volatile STATUS_CSHADbits_t STATUS_CSHADbits __at(0x3880);
// bitfield macros
#define _STATUS_CSHAD_NOT_PD_POSN                           0x5
#define _STATUS_CSHAD_NOT_PD_POSITION                       0x5
#define _STATUS_CSHAD_NOT_PD_SIZE                           0x1
#define _STATUS_CSHAD_NOT_PD_LENGTH                         0x1
#define _STATUS_CSHAD_NOT_PD_MASK                           0x20
#define _STATUS_CSHAD_NOT_TO_POSN                           0x6
#define _STATUS_CSHAD_NOT_TO_POSITION                       0x6
#define _STATUS_CSHAD_NOT_TO_SIZE                           0x1
#define _STATUS_CSHAD_NOT_TO_LENGTH                         0x1
#define _STATUS_CSHAD_NOT_TO_MASK                           0x40
#define _STATUS_CSHAD_C_POSN                                0x0
#define _STATUS_CSHAD_C_POSITION                            0x0
#define _STATUS_CSHAD_C_SIZE                                0x1
#define _STATUS_CSHAD_C_LENGTH                              0x1
#define _STATUS_CSHAD_C_MASK                                0x1
#define _STATUS_CSHAD_DC_POSN                               0x1
#define _STATUS_CSHAD_DC_POSITION                           0x1
#define _STATUS_CSHAD_DC_SIZE                               0x1
#define _STATUS_CSHAD_DC_LENGTH                             0x1
#define _STATUS_CSHAD_DC_MASK                               0x2
#define _STATUS_CSHAD_Z_POSN                                0x2
#define _STATUS_CSHAD_Z_POSITION                            0x2
#define _STATUS_CSHAD_Z_SIZE                                0x1
#define _STATUS_CSHAD_Z_LENGTH                              0x1
#define _STATUS_CSHAD_Z_MASK                                0x4
#define _STATUS_CSHAD_OV_POSN                               0x3
#define _STATUS_CSHAD_OV_POSITION                           0x3
#define _STATUS_CSHAD_OV_SIZE                               0x1
#define _STATUS_CSHAD_OV_LENGTH                             0x1
#define _STATUS_CSHAD_OV_MASK                               0x8
#define _STATUS_CSHAD_N_POSN                                0x4
#define _STATUS_CSHAD_N_POSITION                            0x4
#define _STATUS_CSHAD_N_SIZE                                0x1
#define _STATUS_CSHAD_N_LENGTH                              0x1
#define _STATUS_CSHAD_N_MASK                                0x10
#define _STATUS_CSHAD_nPD_POSN                              0x5
#define _STATUS_CSHAD_nPD_POSITION                          0x5
#define _STATUS_CSHAD_nPD_SIZE                              0x1
#define _STATUS_CSHAD_nPD_LENGTH                            0x1
#define _STATUS_CSHAD_nPD_MASK                              0x20
#define _STATUS_CSHAD_nTO_POSN                              0x6
#define _STATUS_CSHAD_nTO_POSITION                          0x6
#define _STATUS_CSHAD_nTO_SIZE                              0x1
#define _STATUS_CSHAD_nTO_LENGTH                            0x1
#define _STATUS_CSHAD_nTO_MASK                              0x40
#define _STATUS_CSHAD_PD_POSN                               0x5
#define _STATUS_CSHAD_PD_POSITION                           0x5
#define _STATUS_CSHAD_PD_SIZE                               0x1
#define _STATUS_CSHAD_PD_LENGTH                             0x1
#define _STATUS_CSHAD_PD_MASK                               0x20
#define _STATUS_CSHAD_TO_POSN                               0x6
#define _STATUS_CSHAD_TO_POSITION                           0x6
#define _STATUS_CSHAD_TO_SIZE                               0x1
#define _STATUS_CSHAD_TO_LENGTH                             0x1
#define _STATUS_CSHAD_TO_MASK                               0x40

// Register: WREG_CSHAD
#define WREG_CSHAD WREG_CSHAD
extern volatile unsigned char           WREG_CSHAD          __at(0x3881);
#ifndef _LIB_BUILD
asm("WREG_CSHAD equ 03881h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WREG                   :8;
    };
} WREG_CSHADbits_t;
extern volatile WREG_CSHADbits_t WREG_CSHADbits __at(0x3881);
// bitfield macros
#define _WREG_CSHAD_WREG_POSN                               0x0
#define _WREG_CSHAD_WREG_POSITION                           0x0
#define _WREG_CSHAD_WREG_SIZE                               0x8
#define _WREG_CSHAD_WREG_LENGTH                             0x8
#define _WREG_CSHAD_WREG_MASK                               0xFF

// Register: BSR_CSHAD
#define BSR_CSHAD BSR_CSHAD
extern volatile unsigned char           BSR_CSHAD           __at(0x3882);
#ifndef _LIB_BUILD
asm("BSR_CSHAD equ 03882h");
#endif

// Register: SHADCON
#define SHADCON SHADCON
extern volatile unsigned char           SHADCON             __at(0x3883);
#ifndef _LIB_BUILD
asm("SHADCON equ 03883h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SHADLO                 :1;
    };
} SHADCONbits_t;
extern volatile SHADCONbits_t SHADCONbits __at(0x3883);
// bitfield macros
#define _SHADCON_SHADLO_POSN                                0x0
#define _SHADCON_SHADLO_POSITION                            0x0
#define _SHADCON_SHADLO_SIZE                                0x1
#define _SHADCON_SHADLO_LENGTH                              0x1
#define _SHADCON_SHADLO_MASK                                0x1

// Register: STATUS_SHAD
#define STATUS_SHAD STATUS_SHAD
extern volatile unsigned char           STATUS_SHAD         __at(0x3884);
#ifndef _LIB_BUILD
asm("STATUS_SHAD equ 03884h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :5;
        unsigned NOT_PD                 :1;
    };
    struct {
        unsigned                        :6;
        unsigned NOT_TO                 :1;
    };
    struct {
        unsigned C                      :1;
        unsigned DC                     :1;
        unsigned Z                      :1;
        unsigned OV                     :1;
        unsigned N                      :1;
        unsigned nPD                    :1;
        unsigned nTO                    :1;
    };
    struct {
        unsigned                        :5;
        unsigned PD                     :1;
        unsigned TO                     :1;
    };
} STATUS_SHADbits_t;
extern volatile STATUS_SHADbits_t STATUS_SHADbits __at(0x3884);
// bitfield macros
#define _STATUS_SHAD_NOT_PD_POSN                            0x5
#define _STATUS_SHAD_NOT_PD_POSITION                        0x5
#define _STATUS_SHAD_NOT_PD_SIZE                            0x1
#define _STATUS_SHAD_NOT_PD_LENGTH                          0x1
#define _STATUS_SHAD_NOT_PD_MASK                            0x20
#define _STATUS_SHAD_NOT_TO_POSN                            0x6
#define _STATUS_SHAD_NOT_TO_POSITION                        0x6
#define _STATUS_SHAD_NOT_TO_SIZE                            0x1
#define _STATUS_SHAD_NOT_TO_LENGTH                          0x1
#define _STATUS_SHAD_NOT_TO_MASK                            0x40
#define _STATUS_SHAD_C_POSN                                 0x0
#define _STATUS_SHAD_C_POSITION                             0x0
#define _STATUS_SHAD_C_SIZE                                 0x1
#define _STATUS_SHAD_C_LENGTH                               0x1
#define _STATUS_SHAD_C_MASK                                 0x1
#define _STATUS_SHAD_DC_POSN                                0x1
#define _STATUS_SHAD_DC_POSITION                            0x1
#define _STATUS_SHAD_DC_SIZE                                0x1
#define _STATUS_SHAD_DC_LENGTH                              0x1
#define _STATUS_SHAD_DC_MASK                                0x2
#define _STATUS_SHAD_Z_POSN                                 0x2
#define _STATUS_SHAD_Z_POSITION                             0x2
#define _STATUS_SHAD_Z_SIZE                                 0x1
#define _STATUS_SHAD_Z_LENGTH                               0x1
#define _STATUS_SHAD_Z_MASK                                 0x4
#define _STATUS_SHAD_OV_POSN                                0x3
#define _STATUS_SHAD_OV_POSITION                            0x3
#define _STATUS_SHAD_OV_SIZE                                0x1
#define _STATUS_SHAD_OV_LENGTH                              0x1
#define _STATUS_SHAD_OV_MASK                                0x8
#define _STATUS_SHAD_N_POSN                                 0x4
#define _STATUS_SHAD_N_POSITION                             0x4
#define _STATUS_SHAD_N_SIZE                                 0x1
#define _STATUS_SHAD_N_LENGTH                               0x1
#define _STATUS_SHAD_N_MASK                                 0x10
#define _STATUS_SHAD_nPD_POSN                               0x5
#define _STATUS_SHAD_nPD_POSITION                           0x5
#define _STATUS_SHAD_nPD_SIZE                               0x1
#define _STATUS_SHAD_nPD_LENGTH                             0x1
#define _STATUS_SHAD_nPD_MASK                               0x20
#define _STATUS_SHAD_nTO_POSN                               0x6
#define _STATUS_SHAD_nTO_POSITION                           0x6
#define _STATUS_SHAD_nTO_SIZE                               0x1
#define _STATUS_SHAD_nTO_LENGTH                             0x1
#define _STATUS_SHAD_nTO_MASK                               0x40
#define _STATUS_SHAD_PD_POSN                                0x5
#define _STATUS_SHAD_PD_POSITION                            0x5
#define _STATUS_SHAD_PD_SIZE                                0x1
#define _STATUS_SHAD_PD_LENGTH                              0x1
#define _STATUS_SHAD_PD_MASK                                0x20
#define _STATUS_SHAD_TO_POSN                                0x6
#define _STATUS_SHAD_TO_POSITION                            0x6
#define _STATUS_SHAD_TO_SIZE                                0x1
#define _STATUS_SHAD_TO_LENGTH                              0x1
#define _STATUS_SHAD_TO_MASK                                0x40

// Register: WREG_SHAD
#define WREG_SHAD WREG_SHAD
extern volatile unsigned char           WREG_SHAD           __at(0x3885);
#ifndef _LIB_BUILD
asm("WREG_SHAD equ 03885h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WREG                   :8;
    };
} WREG_SHADbits_t;
extern volatile WREG_SHADbits_t WREG_SHADbits __at(0x3885);
// bitfield macros
#define _WREG_SHAD_WREG_POSN                                0x0
#define _WREG_SHAD_WREG_POSITION                            0x0
#define _WREG_SHAD_WREG_SIZE                                0x8
#define _WREG_SHAD_WREG_LENGTH                              0x8
#define _WREG_SHAD_WREG_MASK                                0xFF

// Register: BSR_SHAD
#define BSR_SHAD BSR_SHAD
extern volatile unsigned char           BSR_SHAD            __at(0x3886);
#ifndef _LIB_BUILD
asm("BSR_SHAD equ 03886h");
#endif

// Register: PCLATH_SHAD
#define PCLATH_SHAD PCLATH_SHAD
extern volatile unsigned char           PCLATH_SHAD         __at(0x3887);
#ifndef _LIB_BUILD
asm("PCLATH_SHAD equ 03887h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PCH                    :8;
    };
} PCLATH_SHADbits_t;
extern volatile PCLATH_SHADbits_t PCLATH_SHADbits __at(0x3887);
// bitfield macros
#define _PCLATH_SHAD_PCH_POSN                               0x0
#define _PCLATH_SHAD_PCH_POSITION                           0x0
#define _PCLATH_SHAD_PCH_SIZE                               0x8
#define _PCLATH_SHAD_PCH_LENGTH                             0x8
#define _PCLATH_SHAD_PCH_MASK                               0xFF

// Register: PCLATU_SHAD
#define PCLATU_SHAD PCLATU_SHAD
extern volatile unsigned char           PCLATU_SHAD         __at(0x3888);
#ifndef _LIB_BUILD
asm("PCLATU_SHAD equ 03888h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PCU                    :5;
    };
} PCLATU_SHADbits_t;
extern volatile PCLATU_SHADbits_t PCLATU_SHADbits __at(0x3888);
// bitfield macros
#define _PCLATU_SHAD_PCU_POSN                               0x0
#define _PCLATU_SHAD_PCU_POSITION                           0x0
#define _PCLATU_SHAD_PCU_SIZE                               0x5
#define _PCLATU_SHAD_PCU_LENGTH                             0x5
#define _PCLATU_SHAD_PCU_MASK                               0x1F

// Register: FSR0SH
#define FSR0SH FSR0SH
extern volatile unsigned short          FSR0SH              __at(0x3889);
#ifndef _LIB_BUILD
asm("FSR0SH equ 03889h");
#endif

// Register: FSR0L_SHAD
#define FSR0L_SHAD FSR0L_SHAD
extern volatile unsigned char           FSR0L_SHAD          __at(0x3889);
#ifndef _LIB_BUILD
asm("FSR0L_SHAD equ 03889h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR0L                  :8;
    };
} FSR0L_SHADbits_t;
extern volatile FSR0L_SHADbits_t FSR0L_SHADbits __at(0x3889);
// bitfield macros
#define _FSR0L_SHAD_FSR0L_POSN                              0x0
#define _FSR0L_SHAD_FSR0L_POSITION                          0x0
#define _FSR0L_SHAD_FSR0L_SIZE                              0x8
#define _FSR0L_SHAD_FSR0L_LENGTH                            0x8
#define _FSR0L_SHAD_FSR0L_MASK                              0xFF

// Register: FSR0H_SHAD
#define FSR0H_SHAD FSR0H_SHAD
extern volatile unsigned char           FSR0H_SHAD          __at(0x388A);
#ifndef _LIB_BUILD
asm("FSR0H_SHAD equ 0388Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR0H                  :6;
    };
} FSR0H_SHADbits_t;
extern volatile FSR0H_SHADbits_t FSR0H_SHADbits __at(0x388A);
// bitfield macros
#define _FSR0H_SHAD_FSR0H_POSN                              0x0
#define _FSR0H_SHAD_FSR0H_POSITION                          0x0
#define _FSR0H_SHAD_FSR0H_SIZE                              0x6
#define _FSR0H_SHAD_FSR0H_LENGTH                            0x6
#define _FSR0H_SHAD_FSR0H_MASK                              0x3F

// Register: FSR1SH
#define FSR1SH FSR1SH
extern volatile unsigned short          FSR1SH              __at(0x388B);
#ifndef _LIB_BUILD
asm("FSR1SH equ 0388Bh");
#endif

// Register: FSR1L_SHAD
#define FSR1L_SHAD FSR1L_SHAD
extern volatile unsigned char           FSR1L_SHAD          __at(0x388B);
#ifndef _LIB_BUILD
asm("FSR1L_SHAD equ 0388Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR1L                  :8;
    };
} FSR1L_SHADbits_t;
extern volatile FSR1L_SHADbits_t FSR1L_SHADbits __at(0x388B);
// bitfield macros
#define _FSR1L_SHAD_FSR1L_POSN                              0x0
#define _FSR1L_SHAD_FSR1L_POSITION                          0x0
#define _FSR1L_SHAD_FSR1L_SIZE                              0x8
#define _FSR1L_SHAD_FSR1L_LENGTH                            0x8
#define _FSR1L_SHAD_FSR1L_MASK                              0xFF

// Register: FSR1H_SHAD
#define FSR1H_SHAD FSR1H_SHAD
extern volatile unsigned char           FSR1H_SHAD          __at(0x388C);
#ifndef _LIB_BUILD
asm("FSR1H_SHAD equ 0388Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR1H                  :6;
    };
} FSR1H_SHADbits_t;
extern volatile FSR1H_SHADbits_t FSR1H_SHADbits __at(0x388C);
// bitfield macros
#define _FSR1H_SHAD_FSR1H_POSN                              0x0
#define _FSR1H_SHAD_FSR1H_POSITION                          0x0
#define _FSR1H_SHAD_FSR1H_SIZE                              0x6
#define _FSR1H_SHAD_FSR1H_LENGTH                            0x6
#define _FSR1H_SHAD_FSR1H_MASK                              0x3F

// Register: FSR2SH
#define FSR2SH FSR2SH
extern volatile unsigned short          FSR2SH              __at(0x388D);
#ifndef _LIB_BUILD
asm("FSR2SH equ 0388Dh");
#endif

// Register: FSR2L_SHAD
#define FSR2L_SHAD FSR2L_SHAD
extern volatile unsigned char           FSR2L_SHAD          __at(0x388D);
#ifndef _LIB_BUILD
asm("FSR2L_SHAD equ 0388Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR2L                  :8;
    };
} FSR2L_SHADbits_t;
extern volatile FSR2L_SHADbits_t FSR2L_SHADbits __at(0x388D);
// bitfield macros
#define _FSR2L_SHAD_FSR2L_POSN                              0x0
#define _FSR2L_SHAD_FSR2L_POSITION                          0x0
#define _FSR2L_SHAD_FSR2L_SIZE                              0x8
#define _FSR2L_SHAD_FSR2L_LENGTH                            0x8
#define _FSR2L_SHAD_FSR2L_MASK                              0xFF

// Register: FSR2H_SHAD
#define FSR2H_SHAD FSR2H_SHAD
extern volatile unsigned char           FSR2H_SHAD          __at(0x388E);
#ifndef _LIB_BUILD
asm("FSR2H_SHAD equ 0388Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR2H                  :6;
    };
} FSR2H_SHADbits_t;
extern volatile FSR2H_SHADbits_t FSR2H_SHADbits __at(0x388E);
// bitfield macros
#define _FSR2H_SHAD_FSR2H_POSN                              0x0
#define _FSR2H_SHAD_FSR2H_POSITION                          0x0
#define _FSR2H_SHAD_FSR2H_SIZE                              0x6
#define _FSR2H_SHAD_FSR2H_LENGTH                            0x6
#define _FSR2H_SHAD_FSR2H_MASK                              0x3F

// Register: PRODSH
#define PRODSH PRODSH
extern volatile unsigned short          PRODSH              __at(0x388F);
#ifndef _LIB_BUILD
asm("PRODSH equ 0388Fh");
#endif

// Register: PRODL_SHAD
#define PRODL_SHAD PRODL_SHAD
extern volatile unsigned char           PRODL_SHAD          __at(0x388F);
#ifndef _LIB_BUILD
asm("PRODL_SHAD equ 0388Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PRODL                  :8;
    };
} PRODL_SHADbits_t;
extern volatile PRODL_SHADbits_t PRODL_SHADbits __at(0x388F);
// bitfield macros
#define _PRODL_SHAD_PRODL_POSN                              0x0
#define _PRODL_SHAD_PRODL_POSITION                          0x0
#define _PRODL_SHAD_PRODL_SIZE                              0x8
#define _PRODL_SHAD_PRODL_LENGTH                            0x8
#define _PRODL_SHAD_PRODL_MASK                              0xFF

// Register: PRODH_SHAD
#define PRODH_SHAD PRODH_SHAD
extern volatile unsigned char           PRODH_SHAD          __at(0x3890);
#ifndef _LIB_BUILD
asm("PRODH_SHAD equ 03890h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PRODH                  :8;
    };
} PRODH_SHADbits_t;
extern volatile PRODH_SHADbits_t PRODH_SHADbits __at(0x3890);
// bitfield macros
#define _PRODH_SHAD_PRODH_POSN                              0x0
#define _PRODH_SHAD_PRODH_POSITION                          0x0
#define _PRODH_SHAD_PRODH_SIZE                              0x8
#define _PRODH_SHAD_PRODH_LENGTH                            0x8
#define _PRODH_SHAD_PRODH_MASK                              0xFF

// Register: IVTADL
#define IVTADL IVTADL
extern volatile unsigned char           IVTADL              __at(0x389D);
#ifndef _LIB_BUILD
asm("IVTADL equ 0389Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned AD                     :8;
    };
} IVTADLbits_t;
extern volatile IVTADLbits_t IVTADLbits __at(0x389D);
// bitfield macros
#define _IVTADL_AD_POSN                                     0x0
#define _IVTADL_AD_POSITION                                 0x0
#define _IVTADL_AD_SIZE                                     0x8
#define _IVTADL_AD_LENGTH                                   0x8
#define _IVTADL_AD_MASK                                     0xFF

// Register: IVTADH
#define IVTADH IVTADH
extern volatile unsigned char           IVTADH              __at(0x389E);
#ifndef _LIB_BUILD
asm("IVTADH equ 0389Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned AD                     :8;
    };
} IVTADHbits_t;
extern volatile IVTADHbits_t IVTADHbits __at(0x389E);
// bitfield macros
#define _IVTADH_AD_POSN                                     0x0
#define _IVTADH_AD_POSITION                                 0x0
#define _IVTADH_AD_SIZE                                     0x8
#define _IVTADH_AD_LENGTH                                   0x8
#define _IVTADH_AD_MASK                                     0xFF

// Register: IVTADU
#define IVTADU IVTADU
extern volatile unsigned char           IVTADU              __at(0x389F);
#ifndef _LIB_BUILD
asm("IVTADU equ 0389Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned AD                     :8;
    };
} IVTADUbits_t;
extern volatile IVTADUbits_t IVTADUbits __at(0x389F);
// bitfield macros
#define _IVTADU_AD_POSN                                     0x0
#define _IVTADU_AD_POSITION                                 0x0
#define _IVTADU_AD_SIZE                                     0x8
#define _IVTADU_AD_LENGTH                                   0x8
#define _IVTADU_AD_MASK                                     0xFF

// Register: WDTCON0
#define WDTCON0 WDTCON0
extern volatile unsigned char           WDTCON0             __at(0x395B);
#ifndef _LIB_BUILD
asm("WDTCON0 equ 0395Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SEN                    :1;
        unsigned WDTPS                  :5;
    };
    struct {
        unsigned SWDTEN                 :1;
    };
    struct {
        unsigned WDTSEN                 :1;
    };
    struct {
        unsigned                        :1;
        unsigned WDTPS0                 :1;
        unsigned WDTPS1                 :1;
        unsigned WDTPS2                 :1;
        unsigned WDTPS3                 :1;
        unsigned WDTPS4                 :1;
    };
} WDTCON0bits_t;
extern volatile WDTCON0bits_t WDTCON0bits __at(0x395B);
// bitfield macros
#define _WDTCON0_SEN_POSN                                   0x0
#define _WDTCON0_SEN_POSITION                               0x0
#define _WDTCON0_SEN_SIZE                                   0x1
#define _WDTCON0_SEN_LENGTH                                 0x1
#define _WDTCON0_SEN_MASK                                   0x1
#define _WDTCON0_WDTPS_POSN                                 0x1
#define _WDTCON0_WDTPS_POSITION                             0x1
#define _WDTCON0_WDTPS_SIZE                                 0x5
#define _WDTCON0_WDTPS_LENGTH                               0x5
#define _WDTCON0_WDTPS_MASK                                 0x3E
#define _WDTCON0_SWDTEN_POSN                                0x0
#define _WDTCON0_SWDTEN_POSITION                            0x0
#define _WDTCON0_SWDTEN_SIZE                                0x1
#define _WDTCON0_SWDTEN_LENGTH                              0x1
#define _WDTCON0_SWDTEN_MASK                                0x1
#define _WDTCON0_WDTSEN_POSN                                0x0
#define _WDTCON0_WDTSEN_POSITION                            0x0
#define _WDTCON0_WDTSEN_SIZE                                0x1
#define _WDTCON0_WDTSEN_LENGTH                              0x1
#define _WDTCON0_WDTSEN_MASK                                0x1
#define _WDTCON0_WDTPS0_POSN                                0x1
#define _WDTCON0_WDTPS0_POSITION                            0x1
#define _WDTCON0_WDTPS0_SIZE                                0x1
#define _WDTCON0_WDTPS0_LENGTH                              0x1
#define _WDTCON0_WDTPS0_MASK                                0x2
#define _WDTCON0_WDTPS1_POSN                                0x2
#define _WDTCON0_WDTPS1_POSITION                            0x2
#define _WDTCON0_WDTPS1_SIZE                                0x1
#define _WDTCON0_WDTPS1_LENGTH                              0x1
#define _WDTCON0_WDTPS1_MASK                                0x4
#define _WDTCON0_WDTPS2_POSN                                0x3
#define _WDTCON0_WDTPS2_POSITION                            0x3
#define _WDTCON0_WDTPS2_SIZE                                0x1
#define _WDTCON0_WDTPS2_LENGTH                              0x1
#define _WDTCON0_WDTPS2_MASK                                0x8
#define _WDTCON0_WDTPS3_POSN                                0x4
#define _WDTCON0_WDTPS3_POSITION                            0x4
#define _WDTCON0_WDTPS3_SIZE                                0x1
#define _WDTCON0_WDTPS3_LENGTH                              0x1
#define _WDTCON0_WDTPS3_MASK                                0x10
#define _WDTCON0_WDTPS4_POSN                                0x5
#define _WDTCON0_WDTPS4_POSITION                            0x5
#define _WDTCON0_WDTPS4_SIZE                                0x1
#define _WDTCON0_WDTPS4_LENGTH                              0x1
#define _WDTCON0_WDTPS4_MASK                                0x20

// Register: WDTCON1
#define WDTCON1 WDTCON1
extern volatile unsigned char           WDTCON1             __at(0x395C);
#ifndef _LIB_BUILD
asm("WDTCON1 equ 0395Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WINDOW                 :3;
        unsigned                        :1;
        unsigned WDTCS                  :3;
    };
    struct {
        unsigned WINDOW0                :1;
        unsigned WINDOW1                :1;
        unsigned WINDOW2                :1;
    };
    struct {
        unsigned WDTWINDOW              :3;
    };
    struct {
        unsigned WDTWINDOW0             :1;
        unsigned WDTWINDOW1             :1;
        unsigned WDTWINDOW2             :1;
        unsigned                        :1;
        unsigned WDTCS0                 :1;
        unsigned WDTCS1                 :1;
        unsigned WDTCS2                 :1;
    };
} WDTCON1bits_t;
extern volatile WDTCON1bits_t WDTCON1bits __at(0x395C);
// bitfield macros
#define _WDTCON1_WINDOW_POSN                                0x0
#define _WDTCON1_WINDOW_POSITION                            0x0
#define _WDTCON1_WINDOW_SIZE                                0x3
#define _WDTCON1_WINDOW_LENGTH                              0x3
#define _WDTCON1_WINDOW_MASK                                0x7
#define _WDTCON1_WDTCS_POSN                                 0x4
#define _WDTCON1_WDTCS_POSITION                             0x4
#define _WDTCON1_WDTCS_SIZE                                 0x3
#define _WDTCON1_WDTCS_LENGTH                               0x3
#define _WDTCON1_WDTCS_MASK                                 0x70
#define _WDTCON1_WINDOW0_POSN                               0x0
#define _WDTCON1_WINDOW0_POSITION                           0x0
#define _WDTCON1_WINDOW0_SIZE                               0x1
#define _WDTCON1_WINDOW0_LENGTH                             0x1
#define _WDTCON1_WINDOW0_MASK                               0x1
#define _WDTCON1_WINDOW1_POSN                               0x1
#define _WDTCON1_WINDOW1_POSITION                           0x1
#define _WDTCON1_WINDOW1_SIZE                               0x1
#define _WDTCON1_WINDOW1_LENGTH                             0x1
#define _WDTCON1_WINDOW1_MASK                               0x2
#define _WDTCON1_WINDOW2_POSN                               0x2
#define _WDTCON1_WINDOW2_POSITION                           0x2
#define _WDTCON1_WINDOW2_SIZE                               0x1
#define _WDTCON1_WINDOW2_LENGTH                             0x1
#define _WDTCON1_WINDOW2_MASK                               0x4
#define _WDTCON1_WDTWINDOW_POSN                             0x0
#define _WDTCON1_WDTWINDOW_POSITION                         0x0
#define _WDTCON1_WDTWINDOW_SIZE                             0x3
#define _WDTCON1_WDTWINDOW_LENGTH                           0x3
#define _WDTCON1_WDTWINDOW_MASK                             0x7
#define _WDTCON1_WDTWINDOW0_POSN                            0x0
#define _WDTCON1_WDTWINDOW0_POSITION                        0x0
#define _WDTCON1_WDTWINDOW0_SIZE                            0x1
#define _WDTCON1_WDTWINDOW0_LENGTH                          0x1
#define _WDTCON1_WDTWINDOW0_MASK                            0x1
#define _WDTCON1_WDTWINDOW1_POSN                            0x1
#define _WDTCON1_WDTWINDOW1_POSITION                        0x1
#define _WDTCON1_WDTWINDOW1_SIZE                            0x1
#define _WDTCON1_WDTWINDOW1_LENGTH                          0x1
#define _WDTCON1_WDTWINDOW1_MASK                            0x2
#define _WDTCON1_WDTWINDOW2_POSN                            0x2
#define _WDTCON1_WDTWINDOW2_POSITION                        0x2
#define _WDTCON1_WDTWINDOW2_SIZE                            0x1
#define _WDTCON1_WDTWINDOW2_LENGTH                          0x1
#define _WDTCON1_WDTWINDOW2_MASK                            0x4
#define _WDTCON1_WDTCS0_POSN                                0x4
#define _WDTCON1_WDTCS0_POSITION                            0x4
#define _WDTCON1_WDTCS0_SIZE                                0x1
#define _WDTCON1_WDTCS0_LENGTH                              0x1
#define _WDTCON1_WDTCS0_MASK                                0x10
#define _WDTCON1_WDTCS1_POSN                                0x5
#define _WDTCON1_WDTCS1_POSITION                            0x5
#define _WDTCON1_WDTCS1_SIZE                                0x1
#define _WDTCON1_WDTCS1_LENGTH                              0x1
#define _WDTCON1_WDTCS1_MASK                                0x20
#define _WDTCON1_WDTCS2_POSN                                0x6
#define _WDTCON1_WDTCS2_POSITION                            0x6
#define _WDTCON1_WDTCS2_SIZE                                0x1
#define _WDTCON1_WDTCS2_LENGTH                              0x1
#define _WDTCON1_WDTCS2_MASK                                0x40

// Register: WDTPSL
#define WDTPSL WDTPSL
extern volatile unsigned char           WDTPSL              __at(0x395D);
#ifndef _LIB_BUILD
asm("WDTPSL equ 0395Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PSCNT                  :8;
    };
    struct {
        unsigned PSCNT0                 :1;
        unsigned PSCNT1                 :1;
        unsigned PSCNT2                 :1;
        unsigned PSCNT3                 :1;
        unsigned PSCNT4                 :1;
        unsigned PSCNT5                 :1;
        unsigned PSCNT6                 :1;
        unsigned PSCNT7                 :1;
    };
    struct {
        unsigned WDTPSCNT               :8;
    };
    struct {
        unsigned WDTPSCNT0              :1;
        unsigned WDTPSCNT1              :1;
        unsigned WDTPSCNT2              :1;
        unsigned WDTPSCNT3              :1;
        unsigned WDTPSCNT4              :1;
        unsigned WDTPSCNT5              :1;
        unsigned WDTPSCNT6              :1;
        unsigned WDTPSCNT7              :1;
    };
} WDTPSLbits_t;
extern volatile WDTPSLbits_t WDTPSLbits __at(0x395D);
// bitfield macros
#define _WDTPSL_PSCNT_POSN                                  0x0
#define _WDTPSL_PSCNT_POSITION                              0x0
#define _WDTPSL_PSCNT_SIZE                                  0x8
#define _WDTPSL_PSCNT_LENGTH                                0x8
#define _WDTPSL_PSCNT_MASK                                  0xFF
#define _WDTPSL_PSCNT0_POSN                                 0x0
#define _WDTPSL_PSCNT0_POSITION                             0x0
#define _WDTPSL_PSCNT0_SIZE                                 0x1
#define _WDTPSL_PSCNT0_LENGTH                               0x1
#define _WDTPSL_PSCNT0_MASK                                 0x1
#define _WDTPSL_PSCNT1_POSN                                 0x1
#define _WDTPSL_PSCNT1_POSITION                             0x1
#define _WDTPSL_PSCNT1_SIZE                                 0x1
#define _WDTPSL_PSCNT1_LENGTH                               0x1
#define _WDTPSL_PSCNT1_MASK                                 0x2
#define _WDTPSL_PSCNT2_POSN                                 0x2
#define _WDTPSL_PSCNT2_POSITION                             0x2
#define _WDTPSL_PSCNT2_SIZE                                 0x1
#define _WDTPSL_PSCNT2_LENGTH                               0x1
#define _WDTPSL_PSCNT2_MASK                                 0x4
#define _WDTPSL_PSCNT3_POSN                                 0x3
#define _WDTPSL_PSCNT3_POSITION                             0x3
#define _WDTPSL_PSCNT3_SIZE                                 0x1
#define _WDTPSL_PSCNT3_LENGTH                               0x1
#define _WDTPSL_PSCNT3_MASK                                 0x8
#define _WDTPSL_PSCNT4_POSN                                 0x4
#define _WDTPSL_PSCNT4_POSITION                             0x4
#define _WDTPSL_PSCNT4_SIZE                                 0x1
#define _WDTPSL_PSCNT4_LENGTH                               0x1
#define _WDTPSL_PSCNT4_MASK                                 0x10
#define _WDTPSL_PSCNT5_POSN                                 0x5
#define _WDTPSL_PSCNT5_POSITION                             0x5
#define _WDTPSL_PSCNT5_SIZE                                 0x1
#define _WDTPSL_PSCNT5_LENGTH                               0x1
#define _WDTPSL_PSCNT5_MASK                                 0x20
#define _WDTPSL_PSCNT6_POSN                                 0x6
#define _WDTPSL_PSCNT6_POSITION                             0x6
#define _WDTPSL_PSCNT6_SIZE                                 0x1
#define _WDTPSL_PSCNT6_LENGTH                               0x1
#define _WDTPSL_PSCNT6_MASK                                 0x40
#define _WDTPSL_PSCNT7_POSN                                 0x7
#define _WDTPSL_PSCNT7_POSITION                             0x7
#define _WDTPSL_PSCNT7_SIZE                                 0x1
#define _WDTPSL_PSCNT7_LENGTH                               0x1
#define _WDTPSL_PSCNT7_MASK                                 0x80
#define _WDTPSL_WDTPSCNT_POSN                               0x0
#define _WDTPSL_WDTPSCNT_POSITION                           0x0
#define _WDTPSL_WDTPSCNT_SIZE                               0x8
#define _WDTPSL_WDTPSCNT_LENGTH                             0x8
#define _WDTPSL_WDTPSCNT_MASK                               0xFF
#define _WDTPSL_WDTPSCNT0_POSN                              0x0
#define _WDTPSL_WDTPSCNT0_POSITION                          0x0
#define _WDTPSL_WDTPSCNT0_SIZE                              0x1
#define _WDTPSL_WDTPSCNT0_LENGTH                            0x1
#define _WDTPSL_WDTPSCNT0_MASK                              0x1
#define _WDTPSL_WDTPSCNT1_POSN                              0x1
#define _WDTPSL_WDTPSCNT1_POSITION                          0x1
#define _WDTPSL_WDTPSCNT1_SIZE                              0x1
#define _WDTPSL_WDTPSCNT1_LENGTH                            0x1
#define _WDTPSL_WDTPSCNT1_MASK                              0x2
#define _WDTPSL_WDTPSCNT2_POSN                              0x2
#define _WDTPSL_WDTPSCNT2_POSITION                          0x2
#define _WDTPSL_WDTPSCNT2_SIZE                              0x1
#define _WDTPSL_WDTPSCNT2_LENGTH                            0x1
#define _WDTPSL_WDTPSCNT2_MASK                              0x4
#define _WDTPSL_WDTPSCNT3_POSN                              0x3
#define _WDTPSL_WDTPSCNT3_POSITION                          0x3
#define _WDTPSL_WDTPSCNT3_SIZE                              0x1
#define _WDTPSL_WDTPSCNT3_LENGTH                            0x1
#define _WDTPSL_WDTPSCNT3_MASK                              0x8
#define _WDTPSL_WDTPSCNT4_POSN                              0x4
#define _WDTPSL_WDTPSCNT4_POSITION                          0x4
#define _WDTPSL_WDTPSCNT4_SIZE                              0x1
#define _WDTPSL_WDTPSCNT4_LENGTH                            0x1
#define _WDTPSL_WDTPSCNT4_MASK                              0x10
#define _WDTPSL_WDTPSCNT5_POSN                              0x5
#define _WDTPSL_WDTPSCNT5_POSITION                          0x5
#define _WDTPSL_WDTPSCNT5_SIZE                              0x1
#define _WDTPSL_WDTPSCNT5_LENGTH                            0x1
#define _WDTPSL_WDTPSCNT5_MASK                              0x20
#define _WDTPSL_WDTPSCNT6_POSN                              0x6
#define _WDTPSL_WDTPSCNT6_POSITION                          0x6
#define _WDTPSL_WDTPSCNT6_SIZE                              0x1
#define _WDTPSL_WDTPSCNT6_LENGTH                            0x1
#define _WDTPSL_WDTPSCNT6_MASK                              0x40
#define _WDTPSL_WDTPSCNT7_POSN                              0x7
#define _WDTPSL_WDTPSCNT7_POSITION                          0x7
#define _WDTPSL_WDTPSCNT7_SIZE                              0x1
#define _WDTPSL_WDTPSCNT7_LENGTH                            0x1
#define _WDTPSL_WDTPSCNT7_MASK                              0x80

// Register: WDTPSH
#define WDTPSH WDTPSH
extern volatile unsigned char           WDTPSH              __at(0x395E);
#ifndef _LIB_BUILD
asm("WDTPSH equ 0395Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PSCNT                  :8;
    };
    struct {
        unsigned PSCNT8                 :1;
        unsigned PSCNT9                 :1;
        unsigned PSCNT10                :1;
        unsigned PSCNT11                :1;
        unsigned PSCNT12                :1;
        unsigned PSCNT13                :1;
        unsigned PSCNT14                :1;
        unsigned PSCNT15                :1;
    };
    struct {
        unsigned WDTPSCNT               :8;
    };
    struct {
        unsigned WDTPSCNT8              :1;
        unsigned WDTPSCNT9              :1;
        unsigned WDTPSCNT10             :1;
        unsigned WDTPSCNT11             :1;
        unsigned WDTPSCNT12             :1;
        unsigned WDTPSCNT13             :1;
        unsigned WDTPSCNT14             :1;
        unsigned WDTPSCNT15             :1;
    };
} WDTPSHbits_t;
extern volatile WDTPSHbits_t WDTPSHbits __at(0x395E);
// bitfield macros
#define _WDTPSH_PSCNT_POSN                                  0x0
#define _WDTPSH_PSCNT_POSITION                              0x0
#define _WDTPSH_PSCNT_SIZE                                  0x8
#define _WDTPSH_PSCNT_LENGTH                                0x8
#define _WDTPSH_PSCNT_MASK                                  0xFF
#define _WDTPSH_PSCNT8_POSN                                 0x0
#define _WDTPSH_PSCNT8_POSITION                             0x0
#define _WDTPSH_PSCNT8_SIZE                                 0x1
#define _WDTPSH_PSCNT8_LENGTH                               0x1
#define _WDTPSH_PSCNT8_MASK                                 0x1
#define _WDTPSH_PSCNT9_POSN                                 0x1
#define _WDTPSH_PSCNT9_POSITION                             0x1
#define _WDTPSH_PSCNT9_SIZE                                 0x1
#define _WDTPSH_PSCNT9_LENGTH                               0x1
#define _WDTPSH_PSCNT9_MASK                                 0x2
#define _WDTPSH_PSCNT10_POSN                                0x2
#define _WDTPSH_PSCNT10_POSITION                            0x2
#define _WDTPSH_PSCNT10_SIZE                                0x1
#define _WDTPSH_PSCNT10_LENGTH                              0x1
#define _WDTPSH_PSCNT10_MASK                                0x4
#define _WDTPSH_PSCNT11_POSN                                0x3
#define _WDTPSH_PSCNT11_POSITION                            0x3
#define _WDTPSH_PSCNT11_SIZE                                0x1
#define _WDTPSH_PSCNT11_LENGTH                              0x1
#define _WDTPSH_PSCNT11_MASK                                0x8
#define _WDTPSH_PSCNT12_POSN                                0x4
#define _WDTPSH_PSCNT12_POSITION                            0x4
#define _WDTPSH_PSCNT12_SIZE                                0x1
#define _WDTPSH_PSCNT12_LENGTH                              0x1
#define _WDTPSH_PSCNT12_MASK                                0x10
#define _WDTPSH_PSCNT13_POSN                                0x5
#define _WDTPSH_PSCNT13_POSITION                            0x5
#define _WDTPSH_PSCNT13_SIZE                                0x1
#define _WDTPSH_PSCNT13_LENGTH                              0x1
#define _WDTPSH_PSCNT13_MASK                                0x20
#define _WDTPSH_PSCNT14_POSN                                0x6
#define _WDTPSH_PSCNT14_POSITION                            0x6
#define _WDTPSH_PSCNT14_SIZE                                0x1
#define _WDTPSH_PSCNT14_LENGTH                              0x1
#define _WDTPSH_PSCNT14_MASK                                0x40
#define _WDTPSH_PSCNT15_POSN                                0x7
#define _WDTPSH_PSCNT15_POSITION                            0x7
#define _WDTPSH_PSCNT15_SIZE                                0x1
#define _WDTPSH_PSCNT15_LENGTH                              0x1
#define _WDTPSH_PSCNT15_MASK                                0x80
#define _WDTPSH_WDTPSCNT_POSN                               0x0
#define _WDTPSH_WDTPSCNT_POSITION                           0x0
#define _WDTPSH_WDTPSCNT_SIZE                               0x8
#define _WDTPSH_WDTPSCNT_LENGTH                             0x8
#define _WDTPSH_WDTPSCNT_MASK                               0xFF
#define _WDTPSH_WDTPSCNT8_POSN                              0x0
#define _WDTPSH_WDTPSCNT8_POSITION                          0x0
#define _WDTPSH_WDTPSCNT8_SIZE                              0x1
#define _WDTPSH_WDTPSCNT8_LENGTH                            0x1
#define _WDTPSH_WDTPSCNT8_MASK                              0x1
#define _WDTPSH_WDTPSCNT9_POSN                              0x1
#define _WDTPSH_WDTPSCNT9_POSITION                          0x1
#define _WDTPSH_WDTPSCNT9_SIZE                              0x1
#define _WDTPSH_WDTPSCNT9_LENGTH                            0x1
#define _WDTPSH_WDTPSCNT9_MASK                              0x2
#define _WDTPSH_WDTPSCNT10_POSN                             0x2
#define _WDTPSH_WDTPSCNT10_POSITION                         0x2
#define _WDTPSH_WDTPSCNT10_SIZE                             0x1
#define _WDTPSH_WDTPSCNT10_LENGTH                           0x1
#define _WDTPSH_WDTPSCNT10_MASK                             0x4
#define _WDTPSH_WDTPSCNT11_POSN                             0x3
#define _WDTPSH_WDTPSCNT11_POSITION                         0x3
#define _WDTPSH_WDTPSCNT11_SIZE                             0x1
#define _WDTPSH_WDTPSCNT11_LENGTH                           0x1
#define _WDTPSH_WDTPSCNT11_MASK                             0x8
#define _WDTPSH_WDTPSCNT12_POSN                             0x4
#define _WDTPSH_WDTPSCNT12_POSITION                         0x4
#define _WDTPSH_WDTPSCNT12_SIZE                             0x1
#define _WDTPSH_WDTPSCNT12_LENGTH                           0x1
#define _WDTPSH_WDTPSCNT12_MASK                             0x10
#define _WDTPSH_WDTPSCNT13_POSN                             0x5
#define _WDTPSH_WDTPSCNT13_POSITION                         0x5
#define _WDTPSH_WDTPSCNT13_SIZE                             0x1
#define _WDTPSH_WDTPSCNT13_LENGTH                           0x1
#define _WDTPSH_WDTPSCNT13_MASK                             0x20
#define _WDTPSH_WDTPSCNT14_POSN                             0x6
#define _WDTPSH_WDTPSCNT14_POSITION                         0x6
#define _WDTPSH_WDTPSCNT14_SIZE                             0x1
#define _WDTPSH_WDTPSCNT14_LENGTH                           0x1
#define _WDTPSH_WDTPSCNT14_MASK                             0x40
#define _WDTPSH_WDTPSCNT15_POSN                             0x7
#define _WDTPSH_WDTPSCNT15_POSITION                         0x7
#define _WDTPSH_WDTPSCNT15_SIZE                             0x1
#define _WDTPSH_WDTPSCNT15_LENGTH                           0x1
#define _WDTPSH_WDTPSCNT15_MASK                             0x80

// Register: WDTTMR
#define WDTTMR WDTTMR
extern volatile unsigned char           WDTTMR              __at(0x395F);
#ifndef _LIB_BUILD
asm("WDTTMR equ 0395Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PSCNT16                :1;
        unsigned PSCNT17                :1;
        unsigned STATE                  :1;
        unsigned WDTTMR                 :5;
    };
    struct {
        unsigned WDTPSCNT16             :1;
        unsigned WDTPSCNT17             :1;
        unsigned WDTSTATE               :1;
        unsigned WDTTMR0                :1;
        unsigned WDTTMR1                :1;
        unsigned WDTTMR2                :1;
        unsigned WDTTMR3                :1;
        unsigned WDTTMR4                :1;
    };
} WDTTMRbits_t;
extern volatile WDTTMRbits_t WDTTMRbits __at(0x395F);
// bitfield macros
#define _WDTTMR_PSCNT16_POSN                                0x0
#define _WDTTMR_PSCNT16_POSITION                            0x0
#define _WDTTMR_PSCNT16_SIZE                                0x1
#define _WDTTMR_PSCNT16_LENGTH                              0x1
#define _WDTTMR_PSCNT16_MASK                                0x1
#define _WDTTMR_PSCNT17_POSN                                0x1
#define _WDTTMR_PSCNT17_POSITION                            0x1
#define _WDTTMR_PSCNT17_SIZE                                0x1
#define _WDTTMR_PSCNT17_LENGTH                              0x1
#define _WDTTMR_PSCNT17_MASK                                0x2
#define _WDTTMR_STATE_POSN                                  0x2
#define _WDTTMR_STATE_POSITION                              0x2
#define _WDTTMR_STATE_SIZE                                  0x1
#define _WDTTMR_STATE_LENGTH                                0x1
#define _WDTTMR_STATE_MASK                                  0x4
#define _WDTTMR_WDTTMR_POSN                                 0x3
#define _WDTTMR_WDTTMR_POSITION                             0x3
#define _WDTTMR_WDTTMR_SIZE                                 0x5
#define _WDTTMR_WDTTMR_LENGTH                               0x5
#define _WDTTMR_WDTTMR_MASK                                 0xF8
#define _WDTTMR_WDTPSCNT16_POSN                             0x0
#define _WDTTMR_WDTPSCNT16_POSITION                         0x0
#define _WDTTMR_WDTPSCNT16_SIZE                             0x1
#define _WDTTMR_WDTPSCNT16_LENGTH                           0x1
#define _WDTTMR_WDTPSCNT16_MASK                             0x1
#define _WDTTMR_WDTPSCNT17_POSN                             0x1
#define _WDTTMR_WDTPSCNT17_POSITION                         0x1
#define _WDTTMR_WDTPSCNT17_SIZE                             0x1
#define _WDTTMR_WDTPSCNT17_LENGTH                           0x1
#define _WDTTMR_WDTPSCNT17_MASK                             0x2
#define _WDTTMR_WDTSTATE_POSN                               0x2
#define _WDTTMR_WDTSTATE_POSITION                           0x2
#define _WDTTMR_WDTSTATE_SIZE                               0x1
#define _WDTTMR_WDTSTATE_LENGTH                             0x1
#define _WDTTMR_WDTSTATE_MASK                               0x4
#define _WDTTMR_WDTTMR0_POSN                                0x3
#define _WDTTMR_WDTTMR0_POSITION                            0x3
#define _WDTTMR_WDTTMR0_SIZE                                0x1
#define _WDTTMR_WDTTMR0_LENGTH                              0x1
#define _WDTTMR_WDTTMR0_MASK                                0x8
#define _WDTTMR_WDTTMR1_POSN                                0x4
#define _WDTTMR_WDTTMR1_POSITION                            0x4
#define _WDTTMR_WDTTMR1_SIZE                                0x1
#define _WDTTMR_WDTTMR1_LENGTH                              0x1
#define _WDTTMR_WDTTMR1_MASK                                0x10
#define _WDTTMR_WDTTMR2_POSN                                0x5
#define _WDTTMR_WDTTMR2_POSITION                            0x5
#define _WDTTMR_WDTTMR2_SIZE                                0x1
#define _WDTTMR_WDTTMR2_LENGTH                              0x1
#define _WDTTMR_WDTTMR2_MASK                                0x20
#define _WDTTMR_WDTTMR3_POSN                                0x6
#define _WDTTMR_WDTTMR3_POSITION                            0x6
#define _WDTTMR_WDTTMR3_SIZE                                0x1
#define _WDTTMR_WDTTMR3_LENGTH                              0x1
#define _WDTTMR_WDTTMR3_MASK                                0x40
#define _WDTTMR_WDTTMR4_POSN                                0x7
#define _WDTTMR_WDTTMR4_POSITION                            0x7
#define _WDTTMR_WDTTMR4_SIZE                                0x1
#define _WDTTMR_WDTTMR4_LENGTH                              0x1
#define _WDTTMR_WDTTMR4_MASK                                0x80

// Register: CRCDATA
#define CRCDATA CRCDATA
extern volatile unsigned short          CRCDATA             __at(0x3960);
#ifndef _LIB_BUILD
asm("CRCDATA equ 03960h");
#endif

// Register: CRCDATL
#define CRCDATL CRCDATL
extern volatile unsigned char           CRCDATL             __at(0x3960);
#ifndef _LIB_BUILD
asm("CRCDATL equ 03960h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DATA0                  :1;
        unsigned DATA1                  :1;
        unsigned DATA2                  :1;
        unsigned DATA3                  :1;
        unsigned DATA4                  :1;
        unsigned DATA5                  :1;
        unsigned DATA6                  :1;
        unsigned DATA7                  :1;
    };
} CRCDATLbits_t;
extern volatile CRCDATLbits_t CRCDATLbits __at(0x3960);
// bitfield macros
#define _CRCDATL_DATA0_POSN                                 0x0
#define _CRCDATL_DATA0_POSITION                             0x0
#define _CRCDATL_DATA0_SIZE                                 0x1
#define _CRCDATL_DATA0_LENGTH                               0x1
#define _CRCDATL_DATA0_MASK                                 0x1
#define _CRCDATL_DATA1_POSN                                 0x1
#define _CRCDATL_DATA1_POSITION                             0x1
#define _CRCDATL_DATA1_SIZE                                 0x1
#define _CRCDATL_DATA1_LENGTH                               0x1
#define _CRCDATL_DATA1_MASK                                 0x2
#define _CRCDATL_DATA2_POSN                                 0x2
#define _CRCDATL_DATA2_POSITION                             0x2
#define _CRCDATL_DATA2_SIZE                                 0x1
#define _CRCDATL_DATA2_LENGTH                               0x1
#define _CRCDATL_DATA2_MASK                                 0x4
#define _CRCDATL_DATA3_POSN                                 0x3
#define _CRCDATL_DATA3_POSITION                             0x3
#define _CRCDATL_DATA3_SIZE                                 0x1
#define _CRCDATL_DATA3_LENGTH                               0x1
#define _CRCDATL_DATA3_MASK                                 0x8
#define _CRCDATL_DATA4_POSN                                 0x4
#define _CRCDATL_DATA4_POSITION                             0x4
#define _CRCDATL_DATA4_SIZE                                 0x1
#define _CRCDATL_DATA4_LENGTH                               0x1
#define _CRCDATL_DATA4_MASK                                 0x10
#define _CRCDATL_DATA5_POSN                                 0x5
#define _CRCDATL_DATA5_POSITION                             0x5
#define _CRCDATL_DATA5_SIZE                                 0x1
#define _CRCDATL_DATA5_LENGTH                               0x1
#define _CRCDATL_DATA5_MASK                                 0x20
#define _CRCDATL_DATA6_POSN                                 0x6
#define _CRCDATL_DATA6_POSITION                             0x6
#define _CRCDATL_DATA6_SIZE                                 0x1
#define _CRCDATL_DATA6_LENGTH                               0x1
#define _CRCDATL_DATA6_MASK                                 0x40
#define _CRCDATL_DATA7_POSN                                 0x7
#define _CRCDATL_DATA7_POSITION                             0x7
#define _CRCDATL_DATA7_SIZE                                 0x1
#define _CRCDATL_DATA7_LENGTH                               0x1
#define _CRCDATL_DATA7_MASK                                 0x80

// Register: CRCDATH
#define CRCDATH CRCDATH
extern volatile unsigned char           CRCDATH             __at(0x3961);
#ifndef _LIB_BUILD
asm("CRCDATH equ 03961h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DATA8                  :1;
        unsigned DATA9                  :1;
        unsigned DATA10                 :1;
        unsigned DATA11                 :1;
        unsigned DATA12                 :1;
        unsigned DATA13                 :1;
        unsigned DATA14                 :1;
        unsigned DATA15                 :1;
    };
} CRCDATHbits_t;
extern volatile CRCDATHbits_t CRCDATHbits __at(0x3961);
// bitfield macros
#define _CRCDATH_DATA8_POSN                                 0x0
#define _CRCDATH_DATA8_POSITION                             0x0
#define _CRCDATH_DATA8_SIZE                                 0x1
#define _CRCDATH_DATA8_LENGTH                               0x1
#define _CRCDATH_DATA8_MASK                                 0x1
#define _CRCDATH_DATA9_POSN                                 0x1
#define _CRCDATH_DATA9_POSITION                             0x1
#define _CRCDATH_DATA9_SIZE                                 0x1
#define _CRCDATH_DATA9_LENGTH                               0x1
#define _CRCDATH_DATA9_MASK                                 0x2
#define _CRCDATH_DATA10_POSN                                0x2
#define _CRCDATH_DATA10_POSITION                            0x2
#define _CRCDATH_DATA10_SIZE                                0x1
#define _CRCDATH_DATA10_LENGTH                              0x1
#define _CRCDATH_DATA10_MASK                                0x4
#define _CRCDATH_DATA11_POSN                                0x3
#define _CRCDATH_DATA11_POSITION                            0x3
#define _CRCDATH_DATA11_SIZE                                0x1
#define _CRCDATH_DATA11_LENGTH                              0x1
#define _CRCDATH_DATA11_MASK                                0x8
#define _CRCDATH_DATA12_POSN                                0x4
#define _CRCDATH_DATA12_POSITION                            0x4
#define _CRCDATH_DATA12_SIZE                                0x1
#define _CRCDATH_DATA12_LENGTH                              0x1
#define _CRCDATH_DATA12_MASK                                0x10
#define _CRCDATH_DATA13_POSN                                0x5
#define _CRCDATH_DATA13_POSITION                            0x5
#define _CRCDATH_DATA13_SIZE                                0x1
#define _CRCDATH_DATA13_LENGTH                              0x1
#define _CRCDATH_DATA13_MASK                                0x20
#define _CRCDATH_DATA14_POSN                                0x6
#define _CRCDATH_DATA14_POSITION                            0x6
#define _CRCDATH_DATA14_SIZE                                0x1
#define _CRCDATH_DATA14_LENGTH                              0x1
#define _CRCDATH_DATA14_MASK                                0x40
#define _CRCDATH_DATA15_POSN                                0x7
#define _CRCDATH_DATA15_POSITION                            0x7
#define _CRCDATH_DATA15_SIZE                                0x1
#define _CRCDATH_DATA15_LENGTH                              0x1
#define _CRCDATH_DATA15_MASK                                0x80

// Register: CRCACC
#define CRCACC CRCACC
extern volatile unsigned short          CRCACC              __at(0x3962);
#ifndef _LIB_BUILD
asm("CRCACC equ 03962h");
#endif

// Register: CRCACCL
#define CRCACCL CRCACCL
extern volatile unsigned char           CRCACCL             __at(0x3962);
#ifndef _LIB_BUILD
asm("CRCACCL equ 03962h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ACC0                   :1;
        unsigned ACC1                   :1;
        unsigned ACC2                   :1;
        unsigned ACC3                   :1;
        unsigned ACC4                   :1;
        unsigned ACC5                   :1;
        unsigned ACC6                   :1;
        unsigned ACC7                   :1;
    };
} CRCACCLbits_t;
extern volatile CRCACCLbits_t CRCACCLbits __at(0x3962);
// bitfield macros
#define _CRCACCL_ACC0_POSN                                  0x0
#define _CRCACCL_ACC0_POSITION                              0x0
#define _CRCACCL_ACC0_SIZE                                  0x1
#define _CRCACCL_ACC0_LENGTH                                0x1
#define _CRCACCL_ACC0_MASK                                  0x1
#define _CRCACCL_ACC1_POSN                                  0x1
#define _CRCACCL_ACC1_POSITION                              0x1
#define _CRCACCL_ACC1_SIZE                                  0x1
#define _CRCACCL_ACC1_LENGTH                                0x1
#define _CRCACCL_ACC1_MASK                                  0x2
#define _CRCACCL_ACC2_POSN                                  0x2
#define _CRCACCL_ACC2_POSITION                              0x2
#define _CRCACCL_ACC2_SIZE                                  0x1
#define _CRCACCL_ACC2_LENGTH                                0x1
#define _CRCACCL_ACC2_MASK                                  0x4
#define _CRCACCL_ACC3_POSN                                  0x3
#define _CRCACCL_ACC3_POSITION                              0x3
#define _CRCACCL_ACC3_SIZE                                  0x1
#define _CRCACCL_ACC3_LENGTH                                0x1
#define _CRCACCL_ACC3_MASK                                  0x8
#define _CRCACCL_ACC4_POSN                                  0x4
#define _CRCACCL_ACC4_POSITION                              0x4
#define _CRCACCL_ACC4_SIZE                                  0x1
#define _CRCACCL_ACC4_LENGTH                                0x1
#define _CRCACCL_ACC4_MASK                                  0x10
#define _CRCACCL_ACC5_POSN                                  0x5
#define _CRCACCL_ACC5_POSITION                              0x5
#define _CRCACCL_ACC5_SIZE                                  0x1
#define _CRCACCL_ACC5_LENGTH                                0x1
#define _CRCACCL_ACC5_MASK                                  0x20
#define _CRCACCL_ACC6_POSN                                  0x6
#define _CRCACCL_ACC6_POSITION                              0x6
#define _CRCACCL_ACC6_SIZE                                  0x1
#define _CRCACCL_ACC6_LENGTH                                0x1
#define _CRCACCL_ACC6_MASK                                  0x40
#define _CRCACCL_ACC7_POSN                                  0x7
#define _CRCACCL_ACC7_POSITION                              0x7
#define _CRCACCL_ACC7_SIZE                                  0x1
#define _CRCACCL_ACC7_LENGTH                                0x1
#define _CRCACCL_ACC7_MASK                                  0x80

// Register: CRCACCH
#define CRCACCH CRCACCH
extern volatile unsigned char           CRCACCH             __at(0x3963);
#ifndef _LIB_BUILD
asm("CRCACCH equ 03963h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ACC8                   :1;
        unsigned ACC9                   :1;
        unsigned ACC10                  :1;
        unsigned ACC11                  :1;
        unsigned ACC12                  :1;
        unsigned ACC13                  :1;
        unsigned ACC14                  :1;
        unsigned ACC15                  :1;
    };
} CRCACCHbits_t;
extern volatile CRCACCHbits_t CRCACCHbits __at(0x3963);
// bitfield macros
#define _CRCACCH_ACC8_POSN                                  0x0
#define _CRCACCH_ACC8_POSITION                              0x0
#define _CRCACCH_ACC8_SIZE                                  0x1
#define _CRCACCH_ACC8_LENGTH                                0x1
#define _CRCACCH_ACC8_MASK                                  0x1
#define _CRCACCH_ACC9_POSN                                  0x1
#define _CRCACCH_ACC9_POSITION                              0x1
#define _CRCACCH_ACC9_SIZE                                  0x1
#define _CRCACCH_ACC9_LENGTH                                0x1
#define _CRCACCH_ACC9_MASK                                  0x2
#define _CRCACCH_ACC10_POSN                                 0x2
#define _CRCACCH_ACC10_POSITION                             0x2
#define _CRCACCH_ACC10_SIZE                                 0x1
#define _CRCACCH_ACC10_LENGTH                               0x1
#define _CRCACCH_ACC10_MASK                                 0x4
#define _CRCACCH_ACC11_POSN                                 0x3
#define _CRCACCH_ACC11_POSITION                             0x3
#define _CRCACCH_ACC11_SIZE                                 0x1
#define _CRCACCH_ACC11_LENGTH                               0x1
#define _CRCACCH_ACC11_MASK                                 0x8
#define _CRCACCH_ACC12_POSN                                 0x4
#define _CRCACCH_ACC12_POSITION                             0x4
#define _CRCACCH_ACC12_SIZE                                 0x1
#define _CRCACCH_ACC12_LENGTH                               0x1
#define _CRCACCH_ACC12_MASK                                 0x10
#define _CRCACCH_ACC13_POSN                                 0x5
#define _CRCACCH_ACC13_POSITION                             0x5
#define _CRCACCH_ACC13_SIZE                                 0x1
#define _CRCACCH_ACC13_LENGTH                               0x1
#define _CRCACCH_ACC13_MASK                                 0x20
#define _CRCACCH_ACC14_POSN                                 0x6
#define _CRCACCH_ACC14_POSITION                             0x6
#define _CRCACCH_ACC14_SIZE                                 0x1
#define _CRCACCH_ACC14_LENGTH                               0x1
#define _CRCACCH_ACC14_MASK                                 0x40
#define _CRCACCH_ACC15_POSN                                 0x7
#define _CRCACCH_ACC15_POSITION                             0x7
#define _CRCACCH_ACC15_SIZE                                 0x1
#define _CRCACCH_ACC15_LENGTH                               0x1
#define _CRCACCH_ACC15_MASK                                 0x80

// Register: CRCSHFT
#define CRCSHFT CRCSHFT
extern volatile unsigned short          CRCSHFT             __at(0x3964);
#ifndef _LIB_BUILD
asm("CRCSHFT equ 03964h");
#endif

// Register: CRCSHIFTL
#define CRCSHIFTL CRCSHIFTL
extern volatile unsigned char           CRCSHIFTL           __at(0x3964);
#ifndef _LIB_BUILD
asm("CRCSHIFTL equ 03964h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SHFT0                  :1;
        unsigned SHFT1                  :1;
        unsigned SHFT2                  :1;
        unsigned SHFT3                  :1;
        unsigned SHFT4                  :1;
        unsigned SHFT5                  :1;
        unsigned SHFT6                  :1;
        unsigned SHFT7                  :1;
    };
} CRCSHIFTLbits_t;
extern volatile CRCSHIFTLbits_t CRCSHIFTLbits __at(0x3964);
// bitfield macros
#define _CRCSHIFTL_SHFT0_POSN                               0x0
#define _CRCSHIFTL_SHFT0_POSITION                           0x0
#define _CRCSHIFTL_SHFT0_SIZE                               0x1
#define _CRCSHIFTL_SHFT0_LENGTH                             0x1
#define _CRCSHIFTL_SHFT0_MASK                               0x1
#define _CRCSHIFTL_SHFT1_POSN                               0x1
#define _CRCSHIFTL_SHFT1_POSITION                           0x1
#define _CRCSHIFTL_SHFT1_SIZE                               0x1
#define _CRCSHIFTL_SHFT1_LENGTH                             0x1
#define _CRCSHIFTL_SHFT1_MASK                               0x2
#define _CRCSHIFTL_SHFT2_POSN                               0x2
#define _CRCSHIFTL_SHFT2_POSITION                           0x2
#define _CRCSHIFTL_SHFT2_SIZE                               0x1
#define _CRCSHIFTL_SHFT2_LENGTH                             0x1
#define _CRCSHIFTL_SHFT2_MASK                               0x4
#define _CRCSHIFTL_SHFT3_POSN                               0x3
#define _CRCSHIFTL_SHFT3_POSITION                           0x3
#define _CRCSHIFTL_SHFT3_SIZE                               0x1
#define _CRCSHIFTL_SHFT3_LENGTH                             0x1
#define _CRCSHIFTL_SHFT3_MASK                               0x8
#define _CRCSHIFTL_SHFT4_POSN                               0x4
#define _CRCSHIFTL_SHFT4_POSITION                           0x4
#define _CRCSHIFTL_SHFT4_SIZE                               0x1
#define _CRCSHIFTL_SHFT4_LENGTH                             0x1
#define _CRCSHIFTL_SHFT4_MASK                               0x10
#define _CRCSHIFTL_SHFT5_POSN                               0x5
#define _CRCSHIFTL_SHFT5_POSITION                           0x5
#define _CRCSHIFTL_SHFT5_SIZE                               0x1
#define _CRCSHIFTL_SHFT5_LENGTH                             0x1
#define _CRCSHIFTL_SHFT5_MASK                               0x20
#define _CRCSHIFTL_SHFT6_POSN                               0x6
#define _CRCSHIFTL_SHFT6_POSITION                           0x6
#define _CRCSHIFTL_SHFT6_SIZE                               0x1
#define _CRCSHIFTL_SHFT6_LENGTH                             0x1
#define _CRCSHIFTL_SHFT6_MASK                               0x40
#define _CRCSHIFTL_SHFT7_POSN                               0x7
#define _CRCSHIFTL_SHFT7_POSITION                           0x7
#define _CRCSHIFTL_SHFT7_SIZE                               0x1
#define _CRCSHIFTL_SHFT7_LENGTH                             0x1
#define _CRCSHIFTL_SHFT7_MASK                               0x80

// Register: CRCSHIFTH
#define CRCSHIFTH CRCSHIFTH
extern volatile unsigned char           CRCSHIFTH           __at(0x3965);
#ifndef _LIB_BUILD
asm("CRCSHIFTH equ 03965h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SHFT8                  :1;
        unsigned SHFT9                  :1;
        unsigned SHFT10                 :1;
        unsigned SHFT11                 :1;
        unsigned SHFT12                 :1;
        unsigned SHFT13                 :1;
        unsigned SHFT14                 :1;
        unsigned SHFT15                 :1;
    };
} CRCSHIFTHbits_t;
extern volatile CRCSHIFTHbits_t CRCSHIFTHbits __at(0x3965);
// bitfield macros
#define _CRCSHIFTH_SHFT8_POSN                               0x0
#define _CRCSHIFTH_SHFT8_POSITION                           0x0
#define _CRCSHIFTH_SHFT8_SIZE                               0x1
#define _CRCSHIFTH_SHFT8_LENGTH                             0x1
#define _CRCSHIFTH_SHFT8_MASK                               0x1
#define _CRCSHIFTH_SHFT9_POSN                               0x1
#define _CRCSHIFTH_SHFT9_POSITION                           0x1
#define _CRCSHIFTH_SHFT9_SIZE                               0x1
#define _CRCSHIFTH_SHFT9_LENGTH                             0x1
#define _CRCSHIFTH_SHFT9_MASK                               0x2
#define _CRCSHIFTH_SHFT10_POSN                              0x2
#define _CRCSHIFTH_SHFT10_POSITION                          0x2
#define _CRCSHIFTH_SHFT10_SIZE                              0x1
#define _CRCSHIFTH_SHFT10_LENGTH                            0x1
#define _CRCSHIFTH_SHFT10_MASK                              0x4
#define _CRCSHIFTH_SHFT11_POSN                              0x3
#define _CRCSHIFTH_SHFT11_POSITION                          0x3
#define _CRCSHIFTH_SHFT11_SIZE                              0x1
#define _CRCSHIFTH_SHFT11_LENGTH                            0x1
#define _CRCSHIFTH_SHFT11_MASK                              0x8
#define _CRCSHIFTH_SHFT12_POSN                              0x4
#define _CRCSHIFTH_SHFT12_POSITION                          0x4
#define _CRCSHIFTH_SHFT12_SIZE                              0x1
#define _CRCSHIFTH_SHFT12_LENGTH                            0x1
#define _CRCSHIFTH_SHFT12_MASK                              0x10
#define _CRCSHIFTH_SHFT13_POSN                              0x5
#define _CRCSHIFTH_SHFT13_POSITION                          0x5
#define _CRCSHIFTH_SHFT13_SIZE                              0x1
#define _CRCSHIFTH_SHFT13_LENGTH                            0x1
#define _CRCSHIFTH_SHFT13_MASK                              0x20
#define _CRCSHIFTH_SHFT14_POSN                              0x6
#define _CRCSHIFTH_SHFT14_POSITION                          0x6
#define _CRCSHIFTH_SHFT14_SIZE                              0x1
#define _CRCSHIFTH_SHFT14_LENGTH                            0x1
#define _CRCSHIFTH_SHFT14_MASK                              0x40
#define _CRCSHIFTH_SHFT15_POSN                              0x7
#define _CRCSHIFTH_SHFT15_POSITION                          0x7
#define _CRCSHIFTH_SHFT15_SIZE                              0x1
#define _CRCSHIFTH_SHFT15_LENGTH                            0x1
#define _CRCSHIFTH_SHFT15_MASK                              0x80

// Register: CRCXOR
#define CRCXOR CRCXOR
extern volatile unsigned short          CRCXOR              __at(0x3966);
#ifndef _LIB_BUILD
asm("CRCXOR equ 03966h");
#endif

// Register: CRCXORL
#define CRCXORL CRCXORL
extern volatile unsigned char           CRCXORL             __at(0x3966);
#ifndef _LIB_BUILD
asm("CRCXORL equ 03966h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :1;
        unsigned X1                     :1;
        unsigned X2                     :1;
        unsigned X3                     :1;
        unsigned X4                     :1;
        unsigned X5                     :1;
        unsigned X6                     :1;
        unsigned X7                     :1;
    };
} CRCXORLbits_t;
extern volatile CRCXORLbits_t CRCXORLbits __at(0x3966);
// bitfield macros
#define _CRCXORL_X1_POSN                                    0x1
#define _CRCXORL_X1_POSITION                                0x1
#define _CRCXORL_X1_SIZE                                    0x1
#define _CRCXORL_X1_LENGTH                                  0x1
#define _CRCXORL_X1_MASK                                    0x2
#define _CRCXORL_X2_POSN                                    0x2
#define _CRCXORL_X2_POSITION                                0x2
#define _CRCXORL_X2_SIZE                                    0x1
#define _CRCXORL_X2_LENGTH                                  0x1
#define _CRCXORL_X2_MASK                                    0x4
#define _CRCXORL_X3_POSN                                    0x3
#define _CRCXORL_X3_POSITION                                0x3
#define _CRCXORL_X3_SIZE                                    0x1
#define _CRCXORL_X3_LENGTH                                  0x1
#define _CRCXORL_X3_MASK                                    0x8
#define _CRCXORL_X4_POSN                                    0x4
#define _CRCXORL_X4_POSITION                                0x4
#define _CRCXORL_X4_SIZE                                    0x1
#define _CRCXORL_X4_LENGTH                                  0x1
#define _CRCXORL_X4_MASK                                    0x10
#define _CRCXORL_X5_POSN                                    0x5
#define _CRCXORL_X5_POSITION                                0x5
#define _CRCXORL_X5_SIZE                                    0x1
#define _CRCXORL_X5_LENGTH                                  0x1
#define _CRCXORL_X5_MASK                                    0x20
#define _CRCXORL_X6_POSN                                    0x6
#define _CRCXORL_X6_POSITION                                0x6
#define _CRCXORL_X6_SIZE                                    0x1
#define _CRCXORL_X6_LENGTH                                  0x1
#define _CRCXORL_X6_MASK                                    0x40
#define _CRCXORL_X7_POSN                                    0x7
#define _CRCXORL_X7_POSITION                                0x7
#define _CRCXORL_X7_SIZE                                    0x1
#define _CRCXORL_X7_LENGTH                                  0x1
#define _CRCXORL_X7_MASK                                    0x80

// Register: CRCXORH
#define CRCXORH CRCXORH
extern volatile unsigned char           CRCXORH             __at(0x3967);
#ifndef _LIB_BUILD
asm("CRCXORH equ 03967h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned X8                     :1;
        unsigned X9                     :1;
        unsigned X10                    :1;
        unsigned X11                    :1;
        unsigned X12                    :1;
        unsigned X13                    :1;
        unsigned X14                    :1;
        unsigned X15                    :1;
    };
} CRCXORHbits_t;
extern volatile CRCXORHbits_t CRCXORHbits __at(0x3967);
// bitfield macros
#define _CRCXORH_X8_POSN                                    0x0
#define _CRCXORH_X8_POSITION                                0x0
#define _CRCXORH_X8_SIZE                                    0x1
#define _CRCXORH_X8_LENGTH                                  0x1
#define _CRCXORH_X8_MASK                                    0x1
#define _CRCXORH_X9_POSN                                    0x1
#define _CRCXORH_X9_POSITION                                0x1
#define _CRCXORH_X9_SIZE                                    0x1
#define _CRCXORH_X9_LENGTH                                  0x1
#define _CRCXORH_X9_MASK                                    0x2
#define _CRCXORH_X10_POSN                                   0x2
#define _CRCXORH_X10_POSITION                               0x2
#define _CRCXORH_X10_SIZE                                   0x1
#define _CRCXORH_X10_LENGTH                                 0x1
#define _CRCXORH_X10_MASK                                   0x4
#define _CRCXORH_X11_POSN                                   0x3
#define _CRCXORH_X11_POSITION                               0x3
#define _CRCXORH_X11_SIZE                                   0x1
#define _CRCXORH_X11_LENGTH                                 0x1
#define _CRCXORH_X11_MASK                                   0x8
#define _CRCXORH_X12_POSN                                   0x4
#define _CRCXORH_X12_POSITION                               0x4
#define _CRCXORH_X12_SIZE                                   0x1
#define _CRCXORH_X12_LENGTH                                 0x1
#define _CRCXORH_X12_MASK                                   0x10
#define _CRCXORH_X13_POSN                                   0x5
#define _CRCXORH_X13_POSITION                               0x5
#define _CRCXORH_X13_SIZE                                   0x1
#define _CRCXORH_X13_LENGTH                                 0x1
#define _CRCXORH_X13_MASK                                   0x20
#define _CRCXORH_X14_POSN                                   0x6
#define _CRCXORH_X14_POSITION                               0x6
#define _CRCXORH_X14_SIZE                                   0x1
#define _CRCXORH_X14_LENGTH                                 0x1
#define _CRCXORH_X14_MASK                                   0x40
#define _CRCXORH_X15_POSN                                   0x7
#define _CRCXORH_X15_POSITION                               0x7
#define _CRCXORH_X15_SIZE                                   0x1
#define _CRCXORH_X15_LENGTH                                 0x1
#define _CRCXORH_X15_MASK                                   0x80

// Register: CRCCON0
#define CRCCON0 CRCCON0
extern volatile unsigned char           CRCCON0             __at(0x3968);
#ifndef _LIB_BUILD
asm("CRCCON0 equ 03968h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FULL                   :1;
        unsigned SHIFTM                 :1;
        unsigned                        :2;
        unsigned ACCM                   :1;
        unsigned BUSY                   :1;
        unsigned CRCGO                  :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned                        :7;
        unsigned CRCEN                  :1;
    };
} CRCCON0bits_t;
extern volatile CRCCON0bits_t CRCCON0bits __at(0x3968);
// bitfield macros
#define _CRCCON0_FULL_POSN                                  0x0
#define _CRCCON0_FULL_POSITION                              0x0
#define _CRCCON0_FULL_SIZE                                  0x1
#define _CRCCON0_FULL_LENGTH                                0x1
#define _CRCCON0_FULL_MASK                                  0x1
#define _CRCCON0_SHIFTM_POSN                                0x1
#define _CRCCON0_SHIFTM_POSITION                            0x1
#define _CRCCON0_SHIFTM_SIZE                                0x1
#define _CRCCON0_SHIFTM_LENGTH                              0x1
#define _CRCCON0_SHIFTM_MASK                                0x2
#define _CRCCON0_ACCM_POSN                                  0x4
#define _CRCCON0_ACCM_POSITION                              0x4
#define _CRCCON0_ACCM_SIZE                                  0x1
#define _CRCCON0_ACCM_LENGTH                                0x1
#define _CRCCON0_ACCM_MASK                                  0x10
#define _CRCCON0_BUSY_POSN                                  0x5
#define _CRCCON0_BUSY_POSITION                              0x5
#define _CRCCON0_BUSY_SIZE                                  0x1
#define _CRCCON0_BUSY_LENGTH                                0x1
#define _CRCCON0_BUSY_MASK                                  0x20
#define _CRCCON0_CRCGO_POSN                                 0x6
#define _CRCCON0_CRCGO_POSITION                             0x6
#define _CRCCON0_CRCGO_SIZE                                 0x1
#define _CRCCON0_CRCGO_LENGTH                               0x1
#define _CRCCON0_CRCGO_MASK                                 0x40
#define _CRCCON0_EN_POSN                                    0x7
#define _CRCCON0_EN_POSITION                                0x7
#define _CRCCON0_EN_SIZE                                    0x1
#define _CRCCON0_EN_LENGTH                                  0x1
#define _CRCCON0_EN_MASK                                    0x80
#define _CRCCON0_CRCEN_POSN                                 0x7
#define _CRCCON0_CRCEN_POSITION                             0x7
#define _CRCCON0_CRCEN_SIZE                                 0x1
#define _CRCCON0_CRCEN_LENGTH                               0x1
#define _CRCCON0_CRCEN_MASK                                 0x80

// Register: CRCCON1
#define CRCCON1 CRCCON1
extern volatile unsigned char           CRCCON1             __at(0x3969);
#ifndef _LIB_BUILD
asm("CRCCON1 equ 03969h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PLEN                   :4;
        unsigned DLEN                   :4;
    };
    struct {
        unsigned PLEN0                  :1;
        unsigned PLEN1                  :1;
        unsigned PLEN2                  :1;
        unsigned PLEN3                  :1;
        unsigned DLEN0                  :1;
        unsigned DLEN1                  :1;
        unsigned DLEN2                  :1;
        unsigned DLEN3                  :1;
    };
} CRCCON1bits_t;
extern volatile CRCCON1bits_t CRCCON1bits __at(0x3969);
// bitfield macros
#define _CRCCON1_PLEN_POSN                                  0x0
#define _CRCCON1_PLEN_POSITION                              0x0
#define _CRCCON1_PLEN_SIZE                                  0x4
#define _CRCCON1_PLEN_LENGTH                                0x4
#define _CRCCON1_PLEN_MASK                                  0xF
#define _CRCCON1_DLEN_POSN                                  0x4
#define _CRCCON1_DLEN_POSITION                              0x4
#define _CRCCON1_DLEN_SIZE                                  0x4
#define _CRCCON1_DLEN_LENGTH                                0x4
#define _CRCCON1_DLEN_MASK                                  0xF0
#define _CRCCON1_PLEN0_POSN                                 0x0
#define _CRCCON1_PLEN0_POSITION                             0x0
#define _CRCCON1_PLEN0_SIZE                                 0x1
#define _CRCCON1_PLEN0_LENGTH                               0x1
#define _CRCCON1_PLEN0_MASK                                 0x1
#define _CRCCON1_PLEN1_POSN                                 0x1
#define _CRCCON1_PLEN1_POSITION                             0x1
#define _CRCCON1_PLEN1_SIZE                                 0x1
#define _CRCCON1_PLEN1_LENGTH                               0x1
#define _CRCCON1_PLEN1_MASK                                 0x2
#define _CRCCON1_PLEN2_POSN                                 0x2
#define _CRCCON1_PLEN2_POSITION                             0x2
#define _CRCCON1_PLEN2_SIZE                                 0x1
#define _CRCCON1_PLEN2_LENGTH                               0x1
#define _CRCCON1_PLEN2_MASK                                 0x4
#define _CRCCON1_PLEN3_POSN                                 0x3
#define _CRCCON1_PLEN3_POSITION                             0x3
#define _CRCCON1_PLEN3_SIZE                                 0x1
#define _CRCCON1_PLEN3_LENGTH                               0x1
#define _CRCCON1_PLEN3_MASK                                 0x8
#define _CRCCON1_DLEN0_POSN                                 0x4
#define _CRCCON1_DLEN0_POSITION                             0x4
#define _CRCCON1_DLEN0_SIZE                                 0x1
#define _CRCCON1_DLEN0_LENGTH                               0x1
#define _CRCCON1_DLEN0_MASK                                 0x10
#define _CRCCON1_DLEN1_POSN                                 0x5
#define _CRCCON1_DLEN1_POSITION                             0x5
#define _CRCCON1_DLEN1_SIZE                                 0x1
#define _CRCCON1_DLEN1_LENGTH                               0x1
#define _CRCCON1_DLEN1_MASK                                 0x20
#define _CRCCON1_DLEN2_POSN                                 0x6
#define _CRCCON1_DLEN2_POSITION                             0x6
#define _CRCCON1_DLEN2_SIZE                                 0x1
#define _CRCCON1_DLEN2_LENGTH                               0x1
#define _CRCCON1_DLEN2_MASK                                 0x40
#define _CRCCON1_DLEN3_POSN                                 0x7
#define _CRCCON1_DLEN3_POSITION                             0x7
#define _CRCCON1_DLEN3_SIZE                                 0x1
#define _CRCCON1_DLEN3_LENGTH                               0x1
#define _CRCCON1_DLEN3_MASK                                 0x80

// Register: SCANLADR
#define SCANLADR SCANLADR
#ifndef __CCI__
extern volatile __uint24                SCANLADR            __at(0x3976);
#endif
#ifndef _LIB_BUILD
asm("SCANLADR equ 03976h");
#endif

// Register: SCANLADRL
#define SCANLADRL SCANLADRL
extern volatile unsigned char           SCANLADRL           __at(0x3976);
#ifndef _LIB_BUILD
asm("SCANLADRL equ 03976h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LADR                   :8;
    };
    struct {
        unsigned LADR0                  :1;
        unsigned LADR1                  :1;
        unsigned LADR2                  :1;
        unsigned LADR3                  :1;
        unsigned LADR4                  :1;
        unsigned LADR5                  :1;
        unsigned LADR6                  :1;
        unsigned LADR7                  :1;
    };
    struct {
        unsigned SCANLADR               :8;
    };
    struct {
        unsigned SCANLADR0              :1;
        unsigned SCANLADR1              :1;
        unsigned SCANLADR2              :1;
        unsigned SCANLADR3              :1;
        unsigned SCANLADR4              :1;
        unsigned SCANLADR5              :1;
        unsigned SCANLADR6              :1;
        unsigned SCANLADR7              :1;
    };
} SCANLADRLbits_t;
extern volatile SCANLADRLbits_t SCANLADRLbits __at(0x3976);
// bitfield macros
#define _SCANLADRL_LADR_POSN                                0x0
#define _SCANLADRL_LADR_POSITION                            0x0
#define _SCANLADRL_LADR_SIZE                                0x8
#define _SCANLADRL_LADR_LENGTH                              0x8
#define _SCANLADRL_LADR_MASK                                0xFF
#define _SCANLADRL_LADR0_POSN                               0x0
#define _SCANLADRL_LADR0_POSITION                           0x0
#define _SCANLADRL_LADR0_SIZE                               0x1
#define _SCANLADRL_LADR0_LENGTH                             0x1
#define _SCANLADRL_LADR0_MASK                               0x1
#define _SCANLADRL_LADR1_POSN                               0x1
#define _SCANLADRL_LADR1_POSITION                           0x1
#define _SCANLADRL_LADR1_SIZE                               0x1
#define _SCANLADRL_LADR1_LENGTH                             0x1
#define _SCANLADRL_LADR1_MASK                               0x2
#define _SCANLADRL_LADR2_POSN                               0x2
#define _SCANLADRL_LADR2_POSITION                           0x2
#define _SCANLADRL_LADR2_SIZE                               0x1
#define _SCANLADRL_LADR2_LENGTH                             0x1
#define _SCANLADRL_LADR2_MASK                               0x4
#define _SCANLADRL_LADR3_POSN                               0x3
#define _SCANLADRL_LADR3_POSITION                           0x3
#define _SCANLADRL_LADR3_SIZE                               0x1
#define _SCANLADRL_LADR3_LENGTH                             0x1
#define _SCANLADRL_LADR3_MASK                               0x8
#define _SCANLADRL_LADR4_POSN                               0x4
#define _SCANLADRL_LADR4_POSITION                           0x4
#define _SCANLADRL_LADR4_SIZE                               0x1
#define _SCANLADRL_LADR4_LENGTH                             0x1
#define _SCANLADRL_LADR4_MASK                               0x10
#define _SCANLADRL_LADR5_POSN                               0x5
#define _SCANLADRL_LADR5_POSITION                           0x5
#define _SCANLADRL_LADR5_SIZE                               0x1
#define _SCANLADRL_LADR5_LENGTH                             0x1
#define _SCANLADRL_LADR5_MASK                               0x20
#define _SCANLADRL_LADR6_POSN                               0x6
#define _SCANLADRL_LADR6_POSITION                           0x6
#define _SCANLADRL_LADR6_SIZE                               0x1
#define _SCANLADRL_LADR6_LENGTH                             0x1
#define _SCANLADRL_LADR6_MASK                               0x40
#define _SCANLADRL_LADR7_POSN                               0x7
#define _SCANLADRL_LADR7_POSITION                           0x7
#define _SCANLADRL_LADR7_SIZE                               0x1
#define _SCANLADRL_LADR7_LENGTH                             0x1
#define _SCANLADRL_LADR7_MASK                               0x80
#define _SCANLADRL_SCANLADR_POSN                            0x0
#define _SCANLADRL_SCANLADR_POSITION                        0x0
#define _SCANLADRL_SCANLADR_SIZE                            0x8
#define _SCANLADRL_SCANLADR_LENGTH                          0x8
#define _SCANLADRL_SCANLADR_MASK                            0xFF
#define _SCANLADRL_SCANLADR0_POSN                           0x0
#define _SCANLADRL_SCANLADR0_POSITION                       0x0
#define _SCANLADRL_SCANLADR0_SIZE                           0x1
#define _SCANLADRL_SCANLADR0_LENGTH                         0x1
#define _SCANLADRL_SCANLADR0_MASK                           0x1
#define _SCANLADRL_SCANLADR1_POSN                           0x1
#define _SCANLADRL_SCANLADR1_POSITION                       0x1
#define _SCANLADRL_SCANLADR1_SIZE                           0x1
#define _SCANLADRL_SCANLADR1_LENGTH                         0x1
#define _SCANLADRL_SCANLADR1_MASK                           0x2
#define _SCANLADRL_SCANLADR2_POSN                           0x2
#define _SCANLADRL_SCANLADR2_POSITION                       0x2
#define _SCANLADRL_SCANLADR2_SIZE                           0x1
#define _SCANLADRL_SCANLADR2_LENGTH                         0x1
#define _SCANLADRL_SCANLADR2_MASK                           0x4
#define _SCANLADRL_SCANLADR3_POSN                           0x3
#define _SCANLADRL_SCANLADR3_POSITION                       0x3
#define _SCANLADRL_SCANLADR3_SIZE                           0x1
#define _SCANLADRL_SCANLADR3_LENGTH                         0x1
#define _SCANLADRL_SCANLADR3_MASK                           0x8
#define _SCANLADRL_SCANLADR4_POSN                           0x4
#define _SCANLADRL_SCANLADR4_POSITION                       0x4
#define _SCANLADRL_SCANLADR4_SIZE                           0x1
#define _SCANLADRL_SCANLADR4_LENGTH                         0x1
#define _SCANLADRL_SCANLADR4_MASK                           0x10
#define _SCANLADRL_SCANLADR5_POSN                           0x5
#define _SCANLADRL_SCANLADR5_POSITION                       0x5
#define _SCANLADRL_SCANLADR5_SIZE                           0x1
#define _SCANLADRL_SCANLADR5_LENGTH                         0x1
#define _SCANLADRL_SCANLADR5_MASK                           0x20
#define _SCANLADRL_SCANLADR6_POSN                           0x6
#define _SCANLADRL_SCANLADR6_POSITION                       0x6
#define _SCANLADRL_SCANLADR6_SIZE                           0x1
#define _SCANLADRL_SCANLADR6_LENGTH                         0x1
#define _SCANLADRL_SCANLADR6_MASK                           0x40
#define _SCANLADRL_SCANLADR7_POSN                           0x7
#define _SCANLADRL_SCANLADR7_POSITION                       0x7
#define _SCANLADRL_SCANLADR7_SIZE                           0x1
#define _SCANLADRL_SCANLADR7_LENGTH                         0x1
#define _SCANLADRL_SCANLADR7_MASK                           0x80

// Register: SCANLADRH
#define SCANLADRH SCANLADRH
extern volatile unsigned char           SCANLADRH           __at(0x3977);
#ifndef _LIB_BUILD
asm("SCANLADRH equ 03977h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LADR                   :8;
    };
    struct {
        unsigned LADR8                  :1;
        unsigned LADR9                  :1;
        unsigned LADR10                 :1;
        unsigned LADR11                 :1;
        unsigned LADR12                 :1;
        unsigned LADR13                 :1;
        unsigned LADR14                 :1;
        unsigned LADR15                 :1;
    };
    struct {
        unsigned SCANLADR               :8;
    };
    struct {
        unsigned SCANLADR8              :1;
        unsigned SCANLADR9              :1;
        unsigned SCANLADR10             :1;
        unsigned SCANLADR11             :1;
        unsigned SCANLADR12             :1;
        unsigned SCANLADR13             :1;
        unsigned SCANLADR14             :1;
        unsigned SCANLADR15             :1;
    };
} SCANLADRHbits_t;
extern volatile SCANLADRHbits_t SCANLADRHbits __at(0x3977);
// bitfield macros
#define _SCANLADRH_LADR_POSN                                0x0
#define _SCANLADRH_LADR_POSITION                            0x0
#define _SCANLADRH_LADR_SIZE                                0x8
#define _SCANLADRH_LADR_LENGTH                              0x8
#define _SCANLADRH_LADR_MASK                                0xFF
#define _SCANLADRH_LADR8_POSN                               0x0
#define _SCANLADRH_LADR8_POSITION                           0x0
#define _SCANLADRH_LADR8_SIZE                               0x1
#define _SCANLADRH_LADR8_LENGTH                             0x1
#define _SCANLADRH_LADR8_MASK                               0x1
#define _SCANLADRH_LADR9_POSN                               0x1
#define _SCANLADRH_LADR9_POSITION                           0x1
#define _SCANLADRH_LADR9_SIZE                               0x1
#define _SCANLADRH_LADR9_LENGTH                             0x1
#define _SCANLADRH_LADR9_MASK                               0x2
#define _SCANLADRH_LADR10_POSN                              0x2
#define _SCANLADRH_LADR10_POSITION                          0x2
#define _SCANLADRH_LADR10_SIZE                              0x1
#define _SCANLADRH_LADR10_LENGTH                            0x1
#define _SCANLADRH_LADR10_MASK                              0x4
#define _SCANLADRH_LADR11_POSN                              0x3
#define _SCANLADRH_LADR11_POSITION                          0x3
#define _SCANLADRH_LADR11_SIZE                              0x1
#define _SCANLADRH_LADR11_LENGTH                            0x1
#define _SCANLADRH_LADR11_MASK                              0x8
#define _SCANLADRH_LADR12_POSN                              0x4
#define _SCANLADRH_LADR12_POSITION                          0x4
#define _SCANLADRH_LADR12_SIZE                              0x1
#define _SCANLADRH_LADR12_LENGTH                            0x1
#define _SCANLADRH_LADR12_MASK                              0x10
#define _SCANLADRH_LADR13_POSN                              0x5
#define _SCANLADRH_LADR13_POSITION                          0x5
#define _SCANLADRH_LADR13_SIZE                              0x1
#define _SCANLADRH_LADR13_LENGTH                            0x1
#define _SCANLADRH_LADR13_MASK                              0x20
#define _SCANLADRH_LADR14_POSN                              0x6
#define _SCANLADRH_LADR14_POSITION                          0x6
#define _SCANLADRH_LADR14_SIZE                              0x1
#define _SCANLADRH_LADR14_LENGTH                            0x1
#define _SCANLADRH_LADR14_MASK                              0x40
#define _SCANLADRH_LADR15_POSN                              0x7
#define _SCANLADRH_LADR15_POSITION                          0x7
#define _SCANLADRH_LADR15_SIZE                              0x1
#define _SCANLADRH_LADR15_LENGTH                            0x1
#define _SCANLADRH_LADR15_MASK                              0x80
#define _SCANLADRH_SCANLADR_POSN                            0x0
#define _SCANLADRH_SCANLADR_POSITION                        0x0
#define _SCANLADRH_SCANLADR_SIZE                            0x8
#define _SCANLADRH_SCANLADR_LENGTH                          0x8
#define _SCANLADRH_SCANLADR_MASK                            0xFF
#define _SCANLADRH_SCANLADR8_POSN                           0x0
#define _SCANLADRH_SCANLADR8_POSITION                       0x0
#define _SCANLADRH_SCANLADR8_SIZE                           0x1
#define _SCANLADRH_SCANLADR8_LENGTH                         0x1
#define _SCANLADRH_SCANLADR8_MASK                           0x1
#define _SCANLADRH_SCANLADR9_POSN                           0x1
#define _SCANLADRH_SCANLADR9_POSITION                       0x1
#define _SCANLADRH_SCANLADR9_SIZE                           0x1
#define _SCANLADRH_SCANLADR9_LENGTH                         0x1
#define _SCANLADRH_SCANLADR9_MASK                           0x2
#define _SCANLADRH_SCANLADR10_POSN                          0x2
#define _SCANLADRH_SCANLADR10_POSITION                      0x2
#define _SCANLADRH_SCANLADR10_SIZE                          0x1
#define _SCANLADRH_SCANLADR10_LENGTH                        0x1
#define _SCANLADRH_SCANLADR10_MASK                          0x4
#define _SCANLADRH_SCANLADR11_POSN                          0x3
#define _SCANLADRH_SCANLADR11_POSITION                      0x3
#define _SCANLADRH_SCANLADR11_SIZE                          0x1
#define _SCANLADRH_SCANLADR11_LENGTH                        0x1
#define _SCANLADRH_SCANLADR11_MASK                          0x8
#define _SCANLADRH_SCANLADR12_POSN                          0x4
#define _SCANLADRH_SCANLADR12_POSITION                      0x4
#define _SCANLADRH_SCANLADR12_SIZE                          0x1
#define _SCANLADRH_SCANLADR12_LENGTH                        0x1
#define _SCANLADRH_SCANLADR12_MASK                          0x10
#define _SCANLADRH_SCANLADR13_POSN                          0x5
#define _SCANLADRH_SCANLADR13_POSITION                      0x5
#define _SCANLADRH_SCANLADR13_SIZE                          0x1
#define _SCANLADRH_SCANLADR13_LENGTH                        0x1
#define _SCANLADRH_SCANLADR13_MASK                          0x20
#define _SCANLADRH_SCANLADR14_POSN                          0x6
#define _SCANLADRH_SCANLADR14_POSITION                      0x6
#define _SCANLADRH_SCANLADR14_SIZE                          0x1
#define _SCANLADRH_SCANLADR14_LENGTH                        0x1
#define _SCANLADRH_SCANLADR14_MASK                          0x40
#define _SCANLADRH_SCANLADR15_POSN                          0x7
#define _SCANLADRH_SCANLADR15_POSITION                      0x7
#define _SCANLADRH_SCANLADR15_SIZE                          0x1
#define _SCANLADRH_SCANLADR15_LENGTH                        0x1
#define _SCANLADRH_SCANLADR15_MASK                          0x80

// Register: SCANLADRU
#define SCANLADRU SCANLADRU
extern volatile unsigned char           SCANLADRU           __at(0x3978);
#ifndef _LIB_BUILD
asm("SCANLADRU equ 03978h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LADR                   :6;
    };
    struct {
        unsigned LADR16                 :1;
        unsigned LADR17                 :1;
        unsigned LADR18                 :1;
        unsigned LADR19                 :1;
        unsigned LADR20                 :1;
        unsigned LADR21                 :1;
    };
    struct {
        unsigned SCANLADR               :6;
    };
    struct {
        unsigned SCANLADR16             :1;
        unsigned SCANLADR17             :1;
        unsigned SCANLADR18             :1;
        unsigned SCANLADR19             :1;
        unsigned SCANLADR20             :1;
        unsigned SCANLADR21             :1;
    };
} SCANLADRUbits_t;
extern volatile SCANLADRUbits_t SCANLADRUbits __at(0x3978);
// bitfield macros
#define _SCANLADRU_LADR_POSN                                0x0
#define _SCANLADRU_LADR_POSITION                            0x0
#define _SCANLADRU_LADR_SIZE                                0x6
#define _SCANLADRU_LADR_LENGTH                              0x6
#define _SCANLADRU_LADR_MASK                                0x3F
#define _SCANLADRU_LADR16_POSN                              0x0
#define _SCANLADRU_LADR16_POSITION                          0x0
#define _SCANLADRU_LADR16_SIZE                              0x1
#define _SCANLADRU_LADR16_LENGTH                            0x1
#define _SCANLADRU_LADR16_MASK                              0x1
#define _SCANLADRU_LADR17_POSN                              0x1
#define _SCANLADRU_LADR17_POSITION                          0x1
#define _SCANLADRU_LADR17_SIZE                              0x1
#define _SCANLADRU_LADR17_LENGTH                            0x1
#define _SCANLADRU_LADR17_MASK                              0x2
#define _SCANLADRU_LADR18_POSN                              0x2
#define _SCANLADRU_LADR18_POSITION                          0x2
#define _SCANLADRU_LADR18_SIZE                              0x1
#define _SCANLADRU_LADR18_LENGTH                            0x1
#define _SCANLADRU_LADR18_MASK                              0x4
#define _SCANLADRU_LADR19_POSN                              0x3
#define _SCANLADRU_LADR19_POSITION                          0x3
#define _SCANLADRU_LADR19_SIZE                              0x1
#define _SCANLADRU_LADR19_LENGTH                            0x1
#define _SCANLADRU_LADR19_MASK                              0x8
#define _SCANLADRU_LADR20_POSN                              0x4
#define _SCANLADRU_LADR20_POSITION                          0x4
#define _SCANLADRU_LADR20_SIZE                              0x1
#define _SCANLADRU_LADR20_LENGTH                            0x1
#define _SCANLADRU_LADR20_MASK                              0x10
#define _SCANLADRU_LADR21_POSN                              0x5
#define _SCANLADRU_LADR21_POSITION                          0x5
#define _SCANLADRU_LADR21_SIZE                              0x1
#define _SCANLADRU_LADR21_LENGTH                            0x1
#define _SCANLADRU_LADR21_MASK                              0x20
#define _SCANLADRU_SCANLADR_POSN                            0x0
#define _SCANLADRU_SCANLADR_POSITION                        0x0
#define _SCANLADRU_SCANLADR_SIZE                            0x6
#define _SCANLADRU_SCANLADR_LENGTH                          0x6
#define _SCANLADRU_SCANLADR_MASK                            0x3F
#define _SCANLADRU_SCANLADR16_POSN                          0x0
#define _SCANLADRU_SCANLADR16_POSITION                      0x0
#define _SCANLADRU_SCANLADR16_SIZE                          0x1
#define _SCANLADRU_SCANLADR16_LENGTH                        0x1
#define _SCANLADRU_SCANLADR16_MASK                          0x1
#define _SCANLADRU_SCANLADR17_POSN                          0x1
#define _SCANLADRU_SCANLADR17_POSITION                      0x1
#define _SCANLADRU_SCANLADR17_SIZE                          0x1
#define _SCANLADRU_SCANLADR17_LENGTH                        0x1
#define _SCANLADRU_SCANLADR17_MASK                          0x2
#define _SCANLADRU_SCANLADR18_POSN                          0x2
#define _SCANLADRU_SCANLADR18_POSITION                      0x2
#define _SCANLADRU_SCANLADR18_SIZE                          0x1
#define _SCANLADRU_SCANLADR18_LENGTH                        0x1
#define _SCANLADRU_SCANLADR18_MASK                          0x4
#define _SCANLADRU_SCANLADR19_POSN                          0x3
#define _SCANLADRU_SCANLADR19_POSITION                      0x3
#define _SCANLADRU_SCANLADR19_SIZE                          0x1
#define _SCANLADRU_SCANLADR19_LENGTH                        0x1
#define _SCANLADRU_SCANLADR19_MASK                          0x8
#define _SCANLADRU_SCANLADR20_POSN                          0x4
#define _SCANLADRU_SCANLADR20_POSITION                      0x4
#define _SCANLADRU_SCANLADR20_SIZE                          0x1
#define _SCANLADRU_SCANLADR20_LENGTH                        0x1
#define _SCANLADRU_SCANLADR20_MASK                          0x10
#define _SCANLADRU_SCANLADR21_POSN                          0x5
#define _SCANLADRU_SCANLADR21_POSITION                      0x5
#define _SCANLADRU_SCANLADR21_SIZE                          0x1
#define _SCANLADRU_SCANLADR21_LENGTH                        0x1
#define _SCANLADRU_SCANLADR21_MASK                          0x20

// Register: SCANHADR
#define SCANHADR SCANHADR
#ifndef __CCI__
extern volatile __uint24                SCANHADR            __at(0x3979);
#endif
#ifndef _LIB_BUILD
asm("SCANHADR equ 03979h");
#endif

// Register: SCANHADRL
#define SCANHADRL SCANHADRL
extern volatile unsigned char           SCANHADRL           __at(0x3979);
#ifndef _LIB_BUILD
asm("SCANHADRL equ 03979h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned HADR                   :8;
    };
    struct {
        unsigned HADR0                  :1;
        unsigned HADR1                  :1;
        unsigned HADR2                  :1;
        unsigned HADR3                  :1;
        unsigned HADR4                  :1;
        unsigned HADR5                  :1;
        unsigned HADR6                  :1;
        unsigned HADR7                  :1;
    };
    struct {
        unsigned SCANHADR               :8;
    };
    struct {
        unsigned SCANHADR0              :1;
        unsigned SCANHADR1              :1;
        unsigned SCANHADR2              :1;
        unsigned SCANHADR3              :1;
        unsigned SCANHADR4              :1;
        unsigned SCANHADR5              :1;
        unsigned SCANHADR6              :1;
        unsigned SCANHADR7              :1;
    };
} SCANHADRLbits_t;
extern volatile SCANHADRLbits_t SCANHADRLbits __at(0x3979);
// bitfield macros
#define _SCANHADRL_HADR_POSN                                0x0
#define _SCANHADRL_HADR_POSITION                            0x0
#define _SCANHADRL_HADR_SIZE                                0x8
#define _SCANHADRL_HADR_LENGTH                              0x8
#define _SCANHADRL_HADR_MASK                                0xFF
#define _SCANHADRL_HADR0_POSN                               0x0
#define _SCANHADRL_HADR0_POSITION                           0x0
#define _SCANHADRL_HADR0_SIZE                               0x1
#define _SCANHADRL_HADR0_LENGTH                             0x1
#define _SCANHADRL_HADR0_MASK                               0x1
#define _SCANHADRL_HADR1_POSN                               0x1
#define _SCANHADRL_HADR1_POSITION                           0x1
#define _SCANHADRL_HADR1_SIZE                               0x1
#define _SCANHADRL_HADR1_LENGTH                             0x1
#define _SCANHADRL_HADR1_MASK                               0x2
#define _SCANHADRL_HADR2_POSN                               0x2
#define _SCANHADRL_HADR2_POSITION                           0x2
#define _SCANHADRL_HADR2_SIZE                               0x1
#define _SCANHADRL_HADR2_LENGTH                             0x1
#define _SCANHADRL_HADR2_MASK                               0x4
#define _SCANHADRL_HADR3_POSN                               0x3
#define _SCANHADRL_HADR3_POSITION                           0x3
#define _SCANHADRL_HADR3_SIZE                               0x1
#define _SCANHADRL_HADR3_LENGTH                             0x1
#define _SCANHADRL_HADR3_MASK                               0x8
#define _SCANHADRL_HADR4_POSN                               0x4
#define _SCANHADRL_HADR4_POSITION                           0x4
#define _SCANHADRL_HADR4_SIZE                               0x1
#define _SCANHADRL_HADR4_LENGTH                             0x1
#define _SCANHADRL_HADR4_MASK                               0x10
#define _SCANHADRL_HADR5_POSN                               0x5
#define _SCANHADRL_HADR5_POSITION                           0x5
#define _SCANHADRL_HADR5_SIZE                               0x1
#define _SCANHADRL_HADR5_LENGTH                             0x1
#define _SCANHADRL_HADR5_MASK                               0x20
#define _SCANHADRL_HADR6_POSN                               0x6
#define _SCANHADRL_HADR6_POSITION                           0x6
#define _SCANHADRL_HADR6_SIZE                               0x1
#define _SCANHADRL_HADR6_LENGTH                             0x1
#define _SCANHADRL_HADR6_MASK                               0x40
#define _SCANHADRL_HADR7_POSN                               0x7
#define _SCANHADRL_HADR7_POSITION                           0x7
#define _SCANHADRL_HADR7_SIZE                               0x1
#define _SCANHADRL_HADR7_LENGTH                             0x1
#define _SCANHADRL_HADR7_MASK                               0x80
#define _SCANHADRL_SCANHADR_POSN                            0x0
#define _SCANHADRL_SCANHADR_POSITION                        0x0
#define _SCANHADRL_SCANHADR_SIZE                            0x8
#define _SCANHADRL_SCANHADR_LENGTH                          0x8
#define _SCANHADRL_SCANHADR_MASK                            0xFF
#define _SCANHADRL_SCANHADR0_POSN                           0x0
#define _SCANHADRL_SCANHADR0_POSITION                       0x0
#define _SCANHADRL_SCANHADR0_SIZE                           0x1
#define _SCANHADRL_SCANHADR0_LENGTH                         0x1
#define _SCANHADRL_SCANHADR0_MASK                           0x1
#define _SCANHADRL_SCANHADR1_POSN                           0x1
#define _SCANHADRL_SCANHADR1_POSITION                       0x1
#define _SCANHADRL_SCANHADR1_SIZE                           0x1
#define _SCANHADRL_SCANHADR1_LENGTH                         0x1
#define _SCANHADRL_SCANHADR1_MASK                           0x2
#define _SCANHADRL_SCANHADR2_POSN                           0x2
#define _SCANHADRL_SCANHADR2_POSITION                       0x2
#define _SCANHADRL_SCANHADR2_SIZE                           0x1
#define _SCANHADRL_SCANHADR2_LENGTH                         0x1
#define _SCANHADRL_SCANHADR2_MASK                           0x4
#define _SCANHADRL_SCANHADR3_POSN                           0x3
#define _SCANHADRL_SCANHADR3_POSITION                       0x3
#define _SCANHADRL_SCANHADR3_SIZE                           0x1
#define _SCANHADRL_SCANHADR3_LENGTH                         0x1
#define _SCANHADRL_SCANHADR3_MASK                           0x8
#define _SCANHADRL_SCANHADR4_POSN                           0x4
#define _SCANHADRL_SCANHADR4_POSITION                       0x4
#define _SCANHADRL_SCANHADR4_SIZE                           0x1
#define _SCANHADRL_SCANHADR4_LENGTH                         0x1
#define _SCANHADRL_SCANHADR4_MASK                           0x10
#define _SCANHADRL_SCANHADR5_POSN                           0x5
#define _SCANHADRL_SCANHADR5_POSITION                       0x5
#define _SCANHADRL_SCANHADR5_SIZE                           0x1
#define _SCANHADRL_SCANHADR5_LENGTH                         0x1
#define _SCANHADRL_SCANHADR5_MASK                           0x20
#define _SCANHADRL_SCANHADR6_POSN                           0x6
#define _SCANHADRL_SCANHADR6_POSITION                       0x6
#define _SCANHADRL_SCANHADR6_SIZE                           0x1
#define _SCANHADRL_SCANHADR6_LENGTH                         0x1
#define _SCANHADRL_SCANHADR6_MASK                           0x40
#define _SCANHADRL_SCANHADR7_POSN                           0x7
#define _SCANHADRL_SCANHADR7_POSITION                       0x7
#define _SCANHADRL_SCANHADR7_SIZE                           0x1
#define _SCANHADRL_SCANHADR7_LENGTH                         0x1
#define _SCANHADRL_SCANHADR7_MASK                           0x80

// Register: SCANHADRH
#define SCANHADRH SCANHADRH
extern volatile unsigned char           SCANHADRH           __at(0x397A);
#ifndef _LIB_BUILD
asm("SCANHADRH equ 0397Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned HADR                   :8;
    };
    struct {
        unsigned HADR8                  :1;
        unsigned HADR9                  :1;
        unsigned HADR10                 :1;
        unsigned HADR11                 :1;
        unsigned HADR12                 :1;
        unsigned HADR13                 :1;
        unsigned HADR14                 :1;
        unsigned HADR15                 :1;
    };
    struct {
        unsigned SCANHADR               :8;
    };
    struct {
        unsigned SCANHADR8              :1;
        unsigned SCANHADR9              :1;
        unsigned SCANHADR10             :1;
        unsigned SCANHADR11             :1;
        unsigned SCANHADR12             :1;
        unsigned SCANHADR13             :1;
        unsigned SCANHADR14             :1;
        unsigned SCANHADR15             :1;
    };
} SCANHADRHbits_t;
extern volatile SCANHADRHbits_t SCANHADRHbits __at(0x397A);
// bitfield macros
#define _SCANHADRH_HADR_POSN                                0x0
#define _SCANHADRH_HADR_POSITION                            0x0
#define _SCANHADRH_HADR_SIZE                                0x8
#define _SCANHADRH_HADR_LENGTH                              0x8
#define _SCANHADRH_HADR_MASK                                0xFF
#define _SCANHADRH_HADR8_POSN                               0x0
#define _SCANHADRH_HADR8_POSITION                           0x0
#define _SCANHADRH_HADR8_SIZE                               0x1
#define _SCANHADRH_HADR8_LENGTH                             0x1
#define _SCANHADRH_HADR8_MASK                               0x1
#define _SCANHADRH_HADR9_POSN                               0x1
#define _SCANHADRH_HADR9_POSITION                           0x1
#define _SCANHADRH_HADR9_SIZE                               0x1
#define _SCANHADRH_HADR9_LENGTH                             0x1
#define _SCANHADRH_HADR9_MASK                               0x2
#define _SCANHADRH_HADR10_POSN                              0x2
#define _SCANHADRH_HADR10_POSITION                          0x2
#define _SCANHADRH_HADR10_SIZE                              0x1
#define _SCANHADRH_HADR10_LENGTH                            0x1
#define _SCANHADRH_HADR10_MASK                              0x4
#define _SCANHADRH_HADR11_POSN                              0x3
#define _SCANHADRH_HADR11_POSITION                          0x3
#define _SCANHADRH_HADR11_SIZE                              0x1
#define _SCANHADRH_HADR11_LENGTH                            0x1
#define _SCANHADRH_HADR11_MASK                              0x8
#define _SCANHADRH_HADR12_POSN                              0x4
#define _SCANHADRH_HADR12_POSITION                          0x4
#define _SCANHADRH_HADR12_SIZE                              0x1
#define _SCANHADRH_HADR12_LENGTH                            0x1
#define _SCANHADRH_HADR12_MASK                              0x10
#define _SCANHADRH_HADR13_POSN                              0x5
#define _SCANHADRH_HADR13_POSITION                          0x5
#define _SCANHADRH_HADR13_SIZE                              0x1
#define _SCANHADRH_HADR13_LENGTH                            0x1
#define _SCANHADRH_HADR13_MASK                              0x20
#define _SCANHADRH_HADR14_POSN                              0x6
#define _SCANHADRH_HADR14_POSITION                          0x6
#define _SCANHADRH_HADR14_SIZE                              0x1
#define _SCANHADRH_HADR14_LENGTH                            0x1
#define _SCANHADRH_HADR14_MASK                              0x40
#define _SCANHADRH_HADR15_POSN                              0x7
#define _SCANHADRH_HADR15_POSITION                          0x7
#define _SCANHADRH_HADR15_SIZE                              0x1
#define _SCANHADRH_HADR15_LENGTH                            0x1
#define _SCANHADRH_HADR15_MASK                              0x80
#define _SCANHADRH_SCANHADR_POSN                            0x0
#define _SCANHADRH_SCANHADR_POSITION                        0x0
#define _SCANHADRH_SCANHADR_SIZE                            0x8
#define _SCANHADRH_SCANHADR_LENGTH                          0x8
#define _SCANHADRH_SCANHADR_MASK                            0xFF
#define _SCANHADRH_SCANHADR8_POSN                           0x0
#define _SCANHADRH_SCANHADR8_POSITION                       0x0
#define _SCANHADRH_SCANHADR8_SIZE                           0x1
#define _SCANHADRH_SCANHADR8_LENGTH                         0x1
#define _SCANHADRH_SCANHADR8_MASK                           0x1
#define _SCANHADRH_SCANHADR9_POSN                           0x1
#define _SCANHADRH_SCANHADR9_POSITION                       0x1
#define _SCANHADRH_SCANHADR9_SIZE                           0x1
#define _SCANHADRH_SCANHADR9_LENGTH                         0x1
#define _SCANHADRH_SCANHADR9_MASK                           0x2
#define _SCANHADRH_SCANHADR10_POSN                          0x2
#define _SCANHADRH_SCANHADR10_POSITION                      0x2
#define _SCANHADRH_SCANHADR10_SIZE                          0x1
#define _SCANHADRH_SCANHADR10_LENGTH                        0x1
#define _SCANHADRH_SCANHADR10_MASK                          0x4
#define _SCANHADRH_SCANHADR11_POSN                          0x3
#define _SCANHADRH_SCANHADR11_POSITION                      0x3
#define _SCANHADRH_SCANHADR11_SIZE                          0x1
#define _SCANHADRH_SCANHADR11_LENGTH                        0x1
#define _SCANHADRH_SCANHADR11_MASK                          0x8
#define _SCANHADRH_SCANHADR12_POSN                          0x4
#define _SCANHADRH_SCANHADR12_POSITION                      0x4
#define _SCANHADRH_SCANHADR12_SIZE                          0x1
#define _SCANHADRH_SCANHADR12_LENGTH                        0x1
#define _SCANHADRH_SCANHADR12_MASK                          0x10
#define _SCANHADRH_SCANHADR13_POSN                          0x5
#define _SCANHADRH_SCANHADR13_POSITION                      0x5
#define _SCANHADRH_SCANHADR13_SIZE                          0x1
#define _SCANHADRH_SCANHADR13_LENGTH                        0x1
#define _SCANHADRH_SCANHADR13_MASK                          0x20
#define _SCANHADRH_SCANHADR14_POSN                          0x6
#define _SCANHADRH_SCANHADR14_POSITION                      0x6
#define _SCANHADRH_SCANHADR14_SIZE                          0x1
#define _SCANHADRH_SCANHADR14_LENGTH                        0x1
#define _SCANHADRH_SCANHADR14_MASK                          0x40
#define _SCANHADRH_SCANHADR15_POSN                          0x7
#define _SCANHADRH_SCANHADR15_POSITION                      0x7
#define _SCANHADRH_SCANHADR15_SIZE                          0x1
#define _SCANHADRH_SCANHADR15_LENGTH                        0x1
#define _SCANHADRH_SCANHADR15_MASK                          0x80

// Register: SCANHADRU
#define SCANHADRU SCANHADRU
extern volatile unsigned char           SCANHADRU           __at(0x397B);
#ifndef _LIB_BUILD
asm("SCANHADRU equ 0397Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned HADR                   :6;
    };
    struct {
        unsigned HADR16                 :1;
        unsigned HADR17                 :1;
        unsigned HADR18                 :1;
        unsigned HADR19                 :1;
        unsigned HADR20                 :1;
        unsigned HADR21                 :1;
    };
    struct {
        unsigned SCANHADR               :6;
    };
    struct {
        unsigned SCANHADR16             :1;
        unsigned SCANHADR17             :1;
        unsigned SCANHADR18             :1;
        unsigned SCANHADR19             :1;
        unsigned SCANHADR20             :1;
        unsigned SCANHADR21             :1;
    };
} SCANHADRUbits_t;
extern volatile SCANHADRUbits_t SCANHADRUbits __at(0x397B);
// bitfield macros
#define _SCANHADRU_HADR_POSN                                0x0
#define _SCANHADRU_HADR_POSITION                            0x0
#define _SCANHADRU_HADR_SIZE                                0x6
#define _SCANHADRU_HADR_LENGTH                              0x6
#define _SCANHADRU_HADR_MASK                                0x3F
#define _SCANHADRU_HADR16_POSN                              0x0
#define _SCANHADRU_HADR16_POSITION                          0x0
#define _SCANHADRU_HADR16_SIZE                              0x1
#define _SCANHADRU_HADR16_LENGTH                            0x1
#define _SCANHADRU_HADR16_MASK                              0x1
#define _SCANHADRU_HADR17_POSN                              0x1
#define _SCANHADRU_HADR17_POSITION                          0x1
#define _SCANHADRU_HADR17_SIZE                              0x1
#define _SCANHADRU_HADR17_LENGTH                            0x1
#define _SCANHADRU_HADR17_MASK                              0x2
#define _SCANHADRU_HADR18_POSN                              0x2
#define _SCANHADRU_HADR18_POSITION                          0x2
#define _SCANHADRU_HADR18_SIZE                              0x1
#define _SCANHADRU_HADR18_LENGTH                            0x1
#define _SCANHADRU_HADR18_MASK                              0x4
#define _SCANHADRU_HADR19_POSN                              0x3
#define _SCANHADRU_HADR19_POSITION                          0x3
#define _SCANHADRU_HADR19_SIZE                              0x1
#define _SCANHADRU_HADR19_LENGTH                            0x1
#define _SCANHADRU_HADR19_MASK                              0x8
#define _SCANHADRU_HADR20_POSN                              0x4
#define _SCANHADRU_HADR20_POSITION                          0x4
#define _SCANHADRU_HADR20_SIZE                              0x1
#define _SCANHADRU_HADR20_LENGTH                            0x1
#define _SCANHADRU_HADR20_MASK                              0x10
#define _SCANHADRU_HADR21_POSN                              0x5
#define _SCANHADRU_HADR21_POSITION                          0x5
#define _SCANHADRU_HADR21_SIZE                              0x1
#define _SCANHADRU_HADR21_LENGTH                            0x1
#define _SCANHADRU_HADR21_MASK                              0x20
#define _SCANHADRU_SCANHADR_POSN                            0x0
#define _SCANHADRU_SCANHADR_POSITION                        0x0
#define _SCANHADRU_SCANHADR_SIZE                            0x6
#define _SCANHADRU_SCANHADR_LENGTH                          0x6
#define _SCANHADRU_SCANHADR_MASK                            0x3F
#define _SCANHADRU_SCANHADR16_POSN                          0x0
#define _SCANHADRU_SCANHADR16_POSITION                      0x0
#define _SCANHADRU_SCANHADR16_SIZE                          0x1
#define _SCANHADRU_SCANHADR16_LENGTH                        0x1
#define _SCANHADRU_SCANHADR16_MASK                          0x1
#define _SCANHADRU_SCANHADR17_POSN                          0x1
#define _SCANHADRU_SCANHADR17_POSITION                      0x1
#define _SCANHADRU_SCANHADR17_SIZE                          0x1
#define _SCANHADRU_SCANHADR17_LENGTH                        0x1
#define _SCANHADRU_SCANHADR17_MASK                          0x2
#define _SCANHADRU_SCANHADR18_POSN                          0x2
#define _SCANHADRU_SCANHADR18_POSITION                      0x2
#define _SCANHADRU_SCANHADR18_SIZE                          0x1
#define _SCANHADRU_SCANHADR18_LENGTH                        0x1
#define _SCANHADRU_SCANHADR18_MASK                          0x4
#define _SCANHADRU_SCANHADR19_POSN                          0x3
#define _SCANHADRU_SCANHADR19_POSITION                      0x3
#define _SCANHADRU_SCANHADR19_SIZE                          0x1
#define _SCANHADRU_SCANHADR19_LENGTH                        0x1
#define _SCANHADRU_SCANHADR19_MASK                          0x8
#define _SCANHADRU_SCANHADR20_POSN                          0x4
#define _SCANHADRU_SCANHADR20_POSITION                      0x4
#define _SCANHADRU_SCANHADR20_SIZE                          0x1
#define _SCANHADRU_SCANHADR20_LENGTH                        0x1
#define _SCANHADRU_SCANHADR20_MASK                          0x10
#define _SCANHADRU_SCANHADR21_POSN                          0x5
#define _SCANHADRU_SCANHADR21_POSITION                      0x5
#define _SCANHADRU_SCANHADR21_SIZE                          0x1
#define _SCANHADRU_SCANHADR21_LENGTH                        0x1
#define _SCANHADRU_SCANHADR21_MASK                          0x20

// Register: SCANCON0
#define SCANCON0 SCANCON0
extern volatile unsigned char           SCANCON0            __at(0x397C);
#ifndef _LIB_BUILD
asm("SCANCON0 equ 0397Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BUSY                   :1;
        unsigned BURSTMD                :1;
        unsigned MREG                   :1;
        unsigned                        :2;
        unsigned SGO                    :1;
        unsigned TRIGEN                 :1;
        unsigned EN                     :1;
    };
} SCANCON0bits_t;
extern volatile SCANCON0bits_t SCANCON0bits __at(0x397C);
// bitfield macros
#define _SCANCON0_BUSY_POSN                                 0x0
#define _SCANCON0_BUSY_POSITION                             0x0
#define _SCANCON0_BUSY_SIZE                                 0x1
#define _SCANCON0_BUSY_LENGTH                               0x1
#define _SCANCON0_BUSY_MASK                                 0x1
#define _SCANCON0_BURSTMD_POSN                              0x1
#define _SCANCON0_BURSTMD_POSITION                          0x1
#define _SCANCON0_BURSTMD_SIZE                              0x1
#define _SCANCON0_BURSTMD_LENGTH                            0x1
#define _SCANCON0_BURSTMD_MASK                              0x2
#define _SCANCON0_MREG_POSN                                 0x2
#define _SCANCON0_MREG_POSITION                             0x2
#define _SCANCON0_MREG_SIZE                                 0x1
#define _SCANCON0_MREG_LENGTH                               0x1
#define _SCANCON0_MREG_MASK                                 0x4
#define _SCANCON0_SGO_POSN                                  0x5
#define _SCANCON0_SGO_POSITION                              0x5
#define _SCANCON0_SGO_SIZE                                  0x1
#define _SCANCON0_SGO_LENGTH                                0x1
#define _SCANCON0_SGO_MASK                                  0x20
#define _SCANCON0_TRIGEN_POSN                               0x6
#define _SCANCON0_TRIGEN_POSITION                           0x6
#define _SCANCON0_TRIGEN_SIZE                               0x1
#define _SCANCON0_TRIGEN_LENGTH                             0x1
#define _SCANCON0_TRIGEN_MASK                               0x40
#define _SCANCON0_EN_POSN                                   0x7
#define _SCANCON0_EN_POSITION                               0x7
#define _SCANCON0_EN_SIZE                                   0x1
#define _SCANCON0_EN_LENGTH                                 0x1
#define _SCANCON0_EN_MASK                                   0x80

// Register: SCANTRIG
#define SCANTRIG SCANTRIG
extern volatile unsigned char           SCANTRIG            __at(0x397D);
#ifndef _LIB_BUILD
asm("SCANTRIG equ 0397Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TSEL                   :4;
    };
} SCANTRIGbits_t;
extern volatile SCANTRIGbits_t SCANTRIGbits __at(0x397D);
// bitfield macros
#define _SCANTRIG_TSEL_POSN                                 0x0
#define _SCANTRIG_TSEL_POSITION                             0x0
#define _SCANTRIG_TSEL_SIZE                                 0x4
#define _SCANTRIG_TSEL_LENGTH                               0x4
#define _SCANTRIG_TSEL_MASK                                 0xF

// Register: IPR0
#define IPR0 IPR0
extern volatile unsigned char           IPR0                __at(0x3980);
#ifndef _LIB_BUILD
asm("IPR0 equ 03980h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SWIP                   :1;
        unsigned HLVDIP                 :1;
        unsigned OSFIP                  :1;
        unsigned CSWIP                  :1;
        unsigned NVMIP                  :1;
        unsigned SCANIP                 :1;
        unsigned CRCIP                  :1;
        unsigned IOCIP                  :1;
    };
} IPR0bits_t;
extern volatile IPR0bits_t IPR0bits __at(0x3980);
// bitfield macros
#define _IPR0_SWIP_POSN                                     0x0
#define _IPR0_SWIP_POSITION                                 0x0
#define _IPR0_SWIP_SIZE                                     0x1
#define _IPR0_SWIP_LENGTH                                   0x1
#define _IPR0_SWIP_MASK                                     0x1
#define _IPR0_HLVDIP_POSN                                   0x1
#define _IPR0_HLVDIP_POSITION                               0x1
#define _IPR0_HLVDIP_SIZE                                   0x1
#define _IPR0_HLVDIP_LENGTH                                 0x1
#define _IPR0_HLVDIP_MASK                                   0x2
#define _IPR0_OSFIP_POSN                                    0x2
#define _IPR0_OSFIP_POSITION                                0x2
#define _IPR0_OSFIP_SIZE                                    0x1
#define _IPR0_OSFIP_LENGTH                                  0x1
#define _IPR0_OSFIP_MASK                                    0x4
#define _IPR0_CSWIP_POSN                                    0x3
#define _IPR0_CSWIP_POSITION                                0x3
#define _IPR0_CSWIP_SIZE                                    0x1
#define _IPR0_CSWIP_LENGTH                                  0x1
#define _IPR0_CSWIP_MASK                                    0x8
#define _IPR0_NVMIP_POSN                                    0x4
#define _IPR0_NVMIP_POSITION                                0x4
#define _IPR0_NVMIP_SIZE                                    0x1
#define _IPR0_NVMIP_LENGTH                                  0x1
#define _IPR0_NVMIP_MASK                                    0x10
#define _IPR0_SCANIP_POSN                                   0x5
#define _IPR0_SCANIP_POSITION                               0x5
#define _IPR0_SCANIP_SIZE                                   0x1
#define _IPR0_SCANIP_LENGTH                                 0x1
#define _IPR0_SCANIP_MASK                                   0x20
#define _IPR0_CRCIP_POSN                                    0x6
#define _IPR0_CRCIP_POSITION                                0x6
#define _IPR0_CRCIP_SIZE                                    0x1
#define _IPR0_CRCIP_LENGTH                                  0x1
#define _IPR0_CRCIP_MASK                                    0x40
#define _IPR0_IOCIP_POSN                                    0x7
#define _IPR0_IOCIP_POSITION                                0x7
#define _IPR0_IOCIP_SIZE                                    0x1
#define _IPR0_IOCIP_LENGTH                                  0x1
#define _IPR0_IOCIP_MASK                                    0x80

// Register: IPR1
#define IPR1 IPR1
extern volatile unsigned char           IPR1                __at(0x3981);
#ifndef _LIB_BUILD
asm("IPR1 equ 03981h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INT0IP                 :1;
        unsigned ZCDIP                  :1;
        unsigned ADIP                   :1;
        unsigned ADTIP                  :1;
        unsigned C1IP                   :1;
        unsigned SMT1IP                 :1;
        unsigned SMT1PRAIP              :1;
        unsigned SMT1PWAIP              :1;
    };
} IPR1bits_t;
extern volatile IPR1bits_t IPR1bits __at(0x3981);
// bitfield macros
#define _IPR1_INT0IP_POSN                                   0x0
#define _IPR1_INT0IP_POSITION                               0x0
#define _IPR1_INT0IP_SIZE                                   0x1
#define _IPR1_INT0IP_LENGTH                                 0x1
#define _IPR1_INT0IP_MASK                                   0x1
#define _IPR1_ZCDIP_POSN                                    0x1
#define _IPR1_ZCDIP_POSITION                                0x1
#define _IPR1_ZCDIP_SIZE                                    0x1
#define _IPR1_ZCDIP_LENGTH                                  0x1
#define _IPR1_ZCDIP_MASK                                    0x2
#define _IPR1_ADIP_POSN                                     0x2
#define _IPR1_ADIP_POSITION                                 0x2
#define _IPR1_ADIP_SIZE                                     0x1
#define _IPR1_ADIP_LENGTH                                   0x1
#define _IPR1_ADIP_MASK                                     0x4
#define _IPR1_ADTIP_POSN                                    0x3
#define _IPR1_ADTIP_POSITION                                0x3
#define _IPR1_ADTIP_SIZE                                    0x1
#define _IPR1_ADTIP_LENGTH                                  0x1
#define _IPR1_ADTIP_MASK                                    0x8
#define _IPR1_C1IP_POSN                                     0x4
#define _IPR1_C1IP_POSITION                                 0x4
#define _IPR1_C1IP_SIZE                                     0x1
#define _IPR1_C1IP_LENGTH                                   0x1
#define _IPR1_C1IP_MASK                                     0x10
#define _IPR1_SMT1IP_POSN                                   0x5
#define _IPR1_SMT1IP_POSITION                               0x5
#define _IPR1_SMT1IP_SIZE                                   0x1
#define _IPR1_SMT1IP_LENGTH                                 0x1
#define _IPR1_SMT1IP_MASK                                   0x20
#define _IPR1_SMT1PRAIP_POSN                                0x6
#define _IPR1_SMT1PRAIP_POSITION                            0x6
#define _IPR1_SMT1PRAIP_SIZE                                0x1
#define _IPR1_SMT1PRAIP_LENGTH                              0x1
#define _IPR1_SMT1PRAIP_MASK                                0x40
#define _IPR1_SMT1PWAIP_POSN                                0x7
#define _IPR1_SMT1PWAIP_POSITION                            0x7
#define _IPR1_SMT1PWAIP_SIZE                                0x1
#define _IPR1_SMT1PWAIP_LENGTH                              0x1
#define _IPR1_SMT1PWAIP_MASK                                0x80

// Register: IPR2
#define IPR2 IPR2
extern volatile unsigned char           IPR2                __at(0x3982);
#ifndef _LIB_BUILD
asm("IPR2 equ 03982h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DMA1SCNTIP             :1;
        unsigned DMA1DCNTIP             :1;
        unsigned DMA1ORIP               :1;
        unsigned DMA1AIP                :1;
        unsigned SPI1RXIP               :1;
        unsigned SPI1TXIP               :1;
        unsigned SPI1IP                 :1;
        unsigned I2C1RXIP               :1;
    };
} IPR2bits_t;
extern volatile IPR2bits_t IPR2bits __at(0x3982);
// bitfield macros
#define _IPR2_DMA1SCNTIP_POSN                               0x0
#define _IPR2_DMA1SCNTIP_POSITION                           0x0
#define _IPR2_DMA1SCNTIP_SIZE                               0x1
#define _IPR2_DMA1SCNTIP_LENGTH                             0x1
#define _IPR2_DMA1SCNTIP_MASK                               0x1
#define _IPR2_DMA1DCNTIP_POSN                               0x1
#define _IPR2_DMA1DCNTIP_POSITION                           0x1
#define _IPR2_DMA1DCNTIP_SIZE                               0x1
#define _IPR2_DMA1DCNTIP_LENGTH                             0x1
#define _IPR2_DMA1DCNTIP_MASK                               0x2
#define _IPR2_DMA1ORIP_POSN                                 0x2
#define _IPR2_DMA1ORIP_POSITION                             0x2
#define _IPR2_DMA1ORIP_SIZE                                 0x1
#define _IPR2_DMA1ORIP_LENGTH                               0x1
#define _IPR2_DMA1ORIP_MASK                                 0x4
#define _IPR2_DMA1AIP_POSN                                  0x3
#define _IPR2_DMA1AIP_POSITION                              0x3
#define _IPR2_DMA1AIP_SIZE                                  0x1
#define _IPR2_DMA1AIP_LENGTH                                0x1
#define _IPR2_DMA1AIP_MASK                                  0x8
#define _IPR2_SPI1RXIP_POSN                                 0x4
#define _IPR2_SPI1RXIP_POSITION                             0x4
#define _IPR2_SPI1RXIP_SIZE                                 0x1
#define _IPR2_SPI1RXIP_LENGTH                               0x1
#define _IPR2_SPI1RXIP_MASK                                 0x10
#define _IPR2_SPI1TXIP_POSN                                 0x5
#define _IPR2_SPI1TXIP_POSITION                             0x5
#define _IPR2_SPI1TXIP_SIZE                                 0x1
#define _IPR2_SPI1TXIP_LENGTH                               0x1
#define _IPR2_SPI1TXIP_MASK                                 0x20
#define _IPR2_SPI1IP_POSN                                   0x6
#define _IPR2_SPI1IP_POSITION                               0x6
#define _IPR2_SPI1IP_SIZE                                   0x1
#define _IPR2_SPI1IP_LENGTH                                 0x1
#define _IPR2_SPI1IP_MASK                                   0x40
#define _IPR2_I2C1RXIP_POSN                                 0x7
#define _IPR2_I2C1RXIP_POSITION                             0x7
#define _IPR2_I2C1RXIP_SIZE                                 0x1
#define _IPR2_I2C1RXIP_LENGTH                               0x1
#define _IPR2_I2C1RXIP_MASK                                 0x80

// Register: IPR3
#define IPR3 IPR3
extern volatile unsigned char           IPR3                __at(0x3983);
#ifndef _LIB_BUILD
asm("IPR3 equ 03983h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned I2C1TXIP               :1;
        unsigned I2C1IP                 :1;
        unsigned I2C1EIP                :1;
        unsigned U1RXIP                 :1;
        unsigned U1TXIP                 :1;
        unsigned U1EIP                  :1;
        unsigned U1IP                   :1;
        unsigned TMR0IP                 :1;
    };
} IPR3bits_t;
extern volatile IPR3bits_t IPR3bits __at(0x3983);
// bitfield macros
#define _IPR3_I2C1TXIP_POSN                                 0x0
#define _IPR3_I2C1TXIP_POSITION                             0x0
#define _IPR3_I2C1TXIP_SIZE                                 0x1
#define _IPR3_I2C1TXIP_LENGTH                               0x1
#define _IPR3_I2C1TXIP_MASK                                 0x1
#define _IPR3_I2C1IP_POSN                                   0x1
#define _IPR3_I2C1IP_POSITION                               0x1
#define _IPR3_I2C1IP_SIZE                                   0x1
#define _IPR3_I2C1IP_LENGTH                                 0x1
#define _IPR3_I2C1IP_MASK                                   0x2
#define _IPR3_I2C1EIP_POSN                                  0x2
#define _IPR3_I2C1EIP_POSITION                              0x2
#define _IPR3_I2C1EIP_SIZE                                  0x1
#define _IPR3_I2C1EIP_LENGTH                                0x1
#define _IPR3_I2C1EIP_MASK                                  0x4
#define _IPR3_U1RXIP_POSN                                   0x3
#define _IPR3_U1RXIP_POSITION                               0x3
#define _IPR3_U1RXIP_SIZE                                   0x1
#define _IPR3_U1RXIP_LENGTH                                 0x1
#define _IPR3_U1RXIP_MASK                                   0x8
#define _IPR3_U1TXIP_POSN                                   0x4
#define _IPR3_U1TXIP_POSITION                               0x4
#define _IPR3_U1TXIP_SIZE                                   0x1
#define _IPR3_U1TXIP_LENGTH                                 0x1
#define _IPR3_U1TXIP_MASK                                   0x10
#define _IPR3_U1EIP_POSN                                    0x5
#define _IPR3_U1EIP_POSITION                                0x5
#define _IPR3_U1EIP_SIZE                                    0x1
#define _IPR3_U1EIP_LENGTH                                  0x1
#define _IPR3_U1EIP_MASK                                    0x20
#define _IPR3_U1IP_POSN                                     0x6
#define _IPR3_U1IP_POSITION                                 0x6
#define _IPR3_U1IP_SIZE                                     0x1
#define _IPR3_U1IP_LENGTH                                   0x1
#define _IPR3_U1IP_MASK                                     0x40
#define _IPR3_TMR0IP_POSN                                   0x7
#define _IPR3_TMR0IP_POSITION                               0x7
#define _IPR3_TMR0IP_SIZE                                   0x1
#define _IPR3_TMR0IP_LENGTH                                 0x1
#define _IPR3_TMR0IP_MASK                                   0x80

// Register: IPR4
#define IPR4 IPR4
extern volatile unsigned char           IPR4                __at(0x3984);
#ifndef _LIB_BUILD
asm("IPR4 equ 03984h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR1IP                 :1;
        unsigned TMR1GIP                :1;
        unsigned TMR2IP                 :1;
        unsigned CCP1IP                 :1;
        unsigned                        :1;
        unsigned NCO1IP                 :1;
        unsigned CWG1IP                 :1;
        unsigned CLC1IP                 :1;
    };
} IPR4bits_t;
extern volatile IPR4bits_t IPR4bits __at(0x3984);
// bitfield macros
#define _IPR4_TMR1IP_POSN                                   0x0
#define _IPR4_TMR1IP_POSITION                               0x0
#define _IPR4_TMR1IP_SIZE                                   0x1
#define _IPR4_TMR1IP_LENGTH                                 0x1
#define _IPR4_TMR1IP_MASK                                   0x1
#define _IPR4_TMR1GIP_POSN                                  0x1
#define _IPR4_TMR1GIP_POSITION                              0x1
#define _IPR4_TMR1GIP_SIZE                                  0x1
#define _IPR4_TMR1GIP_LENGTH                                0x1
#define _IPR4_TMR1GIP_MASK                                  0x2
#define _IPR4_TMR2IP_POSN                                   0x2
#define _IPR4_TMR2IP_POSITION                               0x2
#define _IPR4_TMR2IP_SIZE                                   0x1
#define _IPR4_TMR2IP_LENGTH                                 0x1
#define _IPR4_TMR2IP_MASK                                   0x4
#define _IPR4_CCP1IP_POSN                                   0x3
#define _IPR4_CCP1IP_POSITION                               0x3
#define _IPR4_CCP1IP_SIZE                                   0x1
#define _IPR4_CCP1IP_LENGTH                                 0x1
#define _IPR4_CCP1IP_MASK                                   0x8
#define _IPR4_NCO1IP_POSN                                   0x5
#define _IPR4_NCO1IP_POSITION                               0x5
#define _IPR4_NCO1IP_SIZE                                   0x1
#define _IPR4_NCO1IP_LENGTH                                 0x1
#define _IPR4_NCO1IP_MASK                                   0x20
#define _IPR4_CWG1IP_POSN                                   0x6
#define _IPR4_CWG1IP_POSITION                               0x6
#define _IPR4_CWG1IP_SIZE                                   0x1
#define _IPR4_CWG1IP_LENGTH                                 0x1
#define _IPR4_CWG1IP_MASK                                   0x40
#define _IPR4_CLC1IP_POSN                                   0x7
#define _IPR4_CLC1IP_POSITION                               0x7
#define _IPR4_CLC1IP_SIZE                                   0x1
#define _IPR4_CLC1IP_LENGTH                                 0x1
#define _IPR4_CLC1IP_MASK                                   0x80

// Register: IPR5
#define IPR5 IPR5
extern volatile unsigned char           IPR5                __at(0x3985);
#ifndef _LIB_BUILD
asm("IPR5 equ 03985h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INT1IP                 :1;
        unsigned C2IP                   :1;
        unsigned DMA2SCNTIP             :1;
        unsigned DMA2DCNTIP             :1;
        unsigned DMA2ORIP               :1;
        unsigned DMA2AIP                :1;
        unsigned I2C2RXIP               :1;
        unsigned I2C2TXIP               :1;
    };
} IPR5bits_t;
extern volatile IPR5bits_t IPR5bits __at(0x3985);
// bitfield macros
#define _IPR5_INT1IP_POSN                                   0x0
#define _IPR5_INT1IP_POSITION                               0x0
#define _IPR5_INT1IP_SIZE                                   0x1
#define _IPR5_INT1IP_LENGTH                                 0x1
#define _IPR5_INT1IP_MASK                                   0x1
#define _IPR5_C2IP_POSN                                     0x1
#define _IPR5_C2IP_POSITION                                 0x1
#define _IPR5_C2IP_SIZE                                     0x1
#define _IPR5_C2IP_LENGTH                                   0x1
#define _IPR5_C2IP_MASK                                     0x2
#define _IPR5_DMA2SCNTIP_POSN                               0x2
#define _IPR5_DMA2SCNTIP_POSITION                           0x2
#define _IPR5_DMA2SCNTIP_SIZE                               0x1
#define _IPR5_DMA2SCNTIP_LENGTH                             0x1
#define _IPR5_DMA2SCNTIP_MASK                               0x4
#define _IPR5_DMA2DCNTIP_POSN                               0x3
#define _IPR5_DMA2DCNTIP_POSITION                           0x3
#define _IPR5_DMA2DCNTIP_SIZE                               0x1
#define _IPR5_DMA2DCNTIP_LENGTH                             0x1
#define _IPR5_DMA2DCNTIP_MASK                               0x8
#define _IPR5_DMA2ORIP_POSN                                 0x4
#define _IPR5_DMA2ORIP_POSITION                             0x4
#define _IPR5_DMA2ORIP_SIZE                                 0x1
#define _IPR5_DMA2ORIP_LENGTH                               0x1
#define _IPR5_DMA2ORIP_MASK                                 0x10
#define _IPR5_DMA2AIP_POSN                                  0x5
#define _IPR5_DMA2AIP_POSITION                              0x5
#define _IPR5_DMA2AIP_SIZE                                  0x1
#define _IPR5_DMA2AIP_LENGTH                                0x1
#define _IPR5_DMA2AIP_MASK                                  0x20
#define _IPR5_I2C2RXIP_POSN                                 0x6
#define _IPR5_I2C2RXIP_POSITION                             0x6
#define _IPR5_I2C2RXIP_SIZE                                 0x1
#define _IPR5_I2C2RXIP_LENGTH                               0x1
#define _IPR5_I2C2RXIP_MASK                                 0x40
#define _IPR5_I2C2TXIP_POSN                                 0x7
#define _IPR5_I2C2TXIP_POSITION                             0x7
#define _IPR5_I2C2TXIP_SIZE                                 0x1
#define _IPR5_I2C2TXIP_LENGTH                               0x1
#define _IPR5_I2C2TXIP_MASK                                 0x80

// Register: IPR6
#define IPR6 IPR6
extern volatile unsigned char           IPR6                __at(0x3986);
#ifndef _LIB_BUILD
asm("IPR6 equ 03986h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned I2C2IP                 :1;
        unsigned I2C2EIP                :1;
        unsigned U2RXIP                 :1;
        unsigned U2TXIP                 :1;
        unsigned U2EIP                  :1;
        unsigned U2IP                   :1;
        unsigned TMR3IP                 :1;
        unsigned TMR3GIP                :1;
    };
} IPR6bits_t;
extern volatile IPR6bits_t IPR6bits __at(0x3986);
// bitfield macros
#define _IPR6_I2C2IP_POSN                                   0x0
#define _IPR6_I2C2IP_POSITION                               0x0
#define _IPR6_I2C2IP_SIZE                                   0x1
#define _IPR6_I2C2IP_LENGTH                                 0x1
#define _IPR6_I2C2IP_MASK                                   0x1
#define _IPR6_I2C2EIP_POSN                                  0x1
#define _IPR6_I2C2EIP_POSITION                              0x1
#define _IPR6_I2C2EIP_SIZE                                  0x1
#define _IPR6_I2C2EIP_LENGTH                                0x1
#define _IPR6_I2C2EIP_MASK                                  0x2
#define _IPR6_U2RXIP_POSN                                   0x2
#define _IPR6_U2RXIP_POSITION                               0x2
#define _IPR6_U2RXIP_SIZE                                   0x1
#define _IPR6_U2RXIP_LENGTH                                 0x1
#define _IPR6_U2RXIP_MASK                                   0x4
#define _IPR6_U2TXIP_POSN                                   0x3
#define _IPR6_U2TXIP_POSITION                               0x3
#define _IPR6_U2TXIP_SIZE                                   0x1
#define _IPR6_U2TXIP_LENGTH                                 0x1
#define _IPR6_U2TXIP_MASK                                   0x8
#define _IPR6_U2EIP_POSN                                    0x4
#define _IPR6_U2EIP_POSITION                                0x4
#define _IPR6_U2EIP_SIZE                                    0x1
#define _IPR6_U2EIP_LENGTH                                  0x1
#define _IPR6_U2EIP_MASK                                    0x10
#define _IPR6_U2IP_POSN                                     0x5
#define _IPR6_U2IP_POSITION                                 0x5
#define _IPR6_U2IP_SIZE                                     0x1
#define _IPR6_U2IP_LENGTH                                   0x1
#define _IPR6_U2IP_MASK                                     0x20
#define _IPR6_TMR3IP_POSN                                   0x6
#define _IPR6_TMR3IP_POSITION                               0x6
#define _IPR6_TMR3IP_SIZE                                   0x1
#define _IPR6_TMR3IP_LENGTH                                 0x1
#define _IPR6_TMR3IP_MASK                                   0x40
#define _IPR6_TMR3GIP_POSN                                  0x7
#define _IPR6_TMR3GIP_POSITION                              0x7
#define _IPR6_TMR3GIP_SIZE                                  0x1
#define _IPR6_TMR3GIP_LENGTH                                0x1
#define _IPR6_TMR3GIP_MASK                                  0x80

// Register: IPR7
#define IPR7 IPR7
extern volatile unsigned char           IPR7                __at(0x3987);
#ifndef _LIB_BUILD
asm("IPR7 equ 03987h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR4IP                 :1;
        unsigned CCP2IP                 :1;
        unsigned                        :1;
        unsigned CWG2IP                 :1;
        unsigned CLC2IP                 :1;
        unsigned INT2IP                 :1;
    };
} IPR7bits_t;
extern volatile IPR7bits_t IPR7bits __at(0x3987);
// bitfield macros
#define _IPR7_TMR4IP_POSN                                   0x0
#define _IPR7_TMR4IP_POSITION                               0x0
#define _IPR7_TMR4IP_SIZE                                   0x1
#define _IPR7_TMR4IP_LENGTH                                 0x1
#define _IPR7_TMR4IP_MASK                                   0x1
#define _IPR7_CCP2IP_POSN                                   0x1
#define _IPR7_CCP2IP_POSITION                               0x1
#define _IPR7_CCP2IP_SIZE                                   0x1
#define _IPR7_CCP2IP_LENGTH                                 0x1
#define _IPR7_CCP2IP_MASK                                   0x2
#define _IPR7_CWG2IP_POSN                                   0x3
#define _IPR7_CWG2IP_POSITION                               0x3
#define _IPR7_CWG2IP_SIZE                                   0x1
#define _IPR7_CWG2IP_LENGTH                                 0x1
#define _IPR7_CWG2IP_MASK                                   0x8
#define _IPR7_CLC2IP_POSN                                   0x4
#define _IPR7_CLC2IP_POSITION                               0x4
#define _IPR7_CLC2IP_SIZE                                   0x1
#define _IPR7_CLC2IP_LENGTH                                 0x1
#define _IPR7_CLC2IP_MASK                                   0x10
#define _IPR7_INT2IP_POSN                                   0x5
#define _IPR7_INT2IP_POSITION                               0x5
#define _IPR7_INT2IP_SIZE                                   0x1
#define _IPR7_INT2IP_LENGTH                                 0x1
#define _IPR7_INT2IP_MASK                                   0x20

// Register: IPR8
#define IPR8 IPR8
extern volatile unsigned char           IPR8                __at(0x3988);
#ifndef _LIB_BUILD
asm("IPR8 equ 03988h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :6;
        unsigned TMR5IP                 :1;
        unsigned TMR5GIP                :1;
    };
} IPR8bits_t;
extern volatile IPR8bits_t IPR8bits __at(0x3988);
// bitfield macros
#define _IPR8_TMR5IP_POSN                                   0x6
#define _IPR8_TMR5IP_POSITION                               0x6
#define _IPR8_TMR5IP_SIZE                                   0x1
#define _IPR8_TMR5IP_LENGTH                                 0x1
#define _IPR8_TMR5IP_MASK                                   0x40
#define _IPR8_TMR5GIP_POSN                                  0x7
#define _IPR8_TMR5GIP_POSITION                              0x7
#define _IPR8_TMR5GIP_SIZE                                  0x1
#define _IPR8_TMR5GIP_LENGTH                                0x1
#define _IPR8_TMR5GIP_MASK                                  0x80

// Register: IPR9
#define IPR9 IPR9
extern volatile unsigned char           IPR9                __at(0x3989);
#ifndef _LIB_BUILD
asm("IPR9 equ 03989h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR6IP                 :1;
        unsigned CCP3IP                 :1;
        unsigned CWG3IP                 :1;
        unsigned CLC3IP                 :1;
    };
} IPR9bits_t;
extern volatile IPR9bits_t IPR9bits __at(0x3989);
// bitfield macros
#define _IPR9_TMR6IP_POSN                                   0x0
#define _IPR9_TMR6IP_POSITION                               0x0
#define _IPR9_TMR6IP_SIZE                                   0x1
#define _IPR9_TMR6IP_LENGTH                                 0x1
#define _IPR9_TMR6IP_MASK                                   0x1
#define _IPR9_CCP3IP_POSN                                   0x1
#define _IPR9_CCP3IP_POSITION                               0x1
#define _IPR9_CCP3IP_SIZE                                   0x1
#define _IPR9_CCP3IP_LENGTH                                 0x1
#define _IPR9_CCP3IP_MASK                                   0x2
#define _IPR9_CWG3IP_POSN                                   0x2
#define _IPR9_CWG3IP_POSITION                               0x2
#define _IPR9_CWG3IP_SIZE                                   0x1
#define _IPR9_CWG3IP_LENGTH                                 0x1
#define _IPR9_CWG3IP_MASK                                   0x4
#define _IPR9_CLC3IP_POSN                                   0x3
#define _IPR9_CLC3IP_POSITION                               0x3
#define _IPR9_CLC3IP_SIZE                                   0x1
#define _IPR9_CLC3IP_LENGTH                                 0x1
#define _IPR9_CLC3IP_MASK                                   0x8

// Register: IPR10
#define IPR10 IPR10
extern volatile unsigned char           IPR10               __at(0x398A);
#ifndef _LIB_BUILD
asm("IPR10 equ 0398Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP4IP                 :1;
        unsigned CLC4IP                 :1;
    };
} IPR10bits_t;
extern volatile IPR10bits_t IPR10bits __at(0x398A);
// bitfield macros
#define _IPR10_CCP4IP_POSN                                  0x0
#define _IPR10_CCP4IP_POSITION                              0x0
#define _IPR10_CCP4IP_SIZE                                  0x1
#define _IPR10_CCP4IP_LENGTH                                0x1
#define _IPR10_CCP4IP_MASK                                  0x1
#define _IPR10_CLC4IP_POSN                                  0x1
#define _IPR10_CLC4IP_POSITION                              0x1
#define _IPR10_CLC4IP_SIZE                                  0x1
#define _IPR10_CLC4IP_LENGTH                                0x1
#define _IPR10_CLC4IP_MASK                                  0x2

// Register: PIE0
#define PIE0 PIE0
extern volatile unsigned char           PIE0                __at(0x3990);
#ifndef _LIB_BUILD
asm("PIE0 equ 03990h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SWIE                   :1;
        unsigned HLVDIE                 :1;
        unsigned OSFIE                  :1;
        unsigned CSWIE                  :1;
        unsigned NVMIE                  :1;
        unsigned SCANIE                 :1;
        unsigned CRCIE                  :1;
        unsigned IOCIE                  :1;
    };
} PIE0bits_t;
extern volatile PIE0bits_t PIE0bits __at(0x3990);
// bitfield macros
#define _PIE0_SWIE_POSN                                     0x0
#define _PIE0_SWIE_POSITION                                 0x0
#define _PIE0_SWIE_SIZE                                     0x1
#define _PIE0_SWIE_LENGTH                                   0x1
#define _PIE0_SWIE_MASK                                     0x1
#define _PIE0_HLVDIE_POSN                                   0x1
#define _PIE0_HLVDIE_POSITION                               0x1
#define _PIE0_HLVDIE_SIZE                                   0x1
#define _PIE0_HLVDIE_LENGTH                                 0x1
#define _PIE0_HLVDIE_MASK                                   0x2
#define _PIE0_OSFIE_POSN                                    0x2
#define _PIE0_OSFIE_POSITION                                0x2
#define _PIE0_OSFIE_SIZE                                    0x1
#define _PIE0_OSFIE_LENGTH                                  0x1
#define _PIE0_OSFIE_MASK                                    0x4
#define _PIE0_CSWIE_POSN                                    0x3
#define _PIE0_CSWIE_POSITION                                0x3
#define _PIE0_CSWIE_SIZE                                    0x1
#define _PIE0_CSWIE_LENGTH                                  0x1
#define _PIE0_CSWIE_MASK                                    0x8
#define _PIE0_NVMIE_POSN                                    0x4
#define _PIE0_NVMIE_POSITION                                0x4
#define _PIE0_NVMIE_SIZE                                    0x1
#define _PIE0_NVMIE_LENGTH                                  0x1
#define _PIE0_NVMIE_MASK                                    0x10
#define _PIE0_SCANIE_POSN                                   0x5
#define _PIE0_SCANIE_POSITION                               0x5
#define _PIE0_SCANIE_SIZE                                   0x1
#define _PIE0_SCANIE_LENGTH                                 0x1
#define _PIE0_SCANIE_MASK                                   0x20
#define _PIE0_CRCIE_POSN                                    0x6
#define _PIE0_CRCIE_POSITION                                0x6
#define _PIE0_CRCIE_SIZE                                    0x1
#define _PIE0_CRCIE_LENGTH                                  0x1
#define _PIE0_CRCIE_MASK                                    0x40
#define _PIE0_IOCIE_POSN                                    0x7
#define _PIE0_IOCIE_POSITION                                0x7
#define _PIE0_IOCIE_SIZE                                    0x1
#define _PIE0_IOCIE_LENGTH                                  0x1
#define _PIE0_IOCIE_MASK                                    0x80

// Register: PIE1
#define PIE1 PIE1
extern volatile unsigned char           PIE1                __at(0x3991);
#ifndef _LIB_BUILD
asm("PIE1 equ 03991h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INT0IE                 :1;
        unsigned ZCDIE                  :1;
        unsigned ADIE                   :1;
        unsigned ADTIE                  :1;
        unsigned C1IE                   :1;
        unsigned SMT1IE                 :1;
        unsigned SMT1PRAIE              :1;
        unsigned SMT1PWAIE              :1;
    };
} PIE1bits_t;
extern volatile PIE1bits_t PIE1bits __at(0x3991);
// bitfield macros
#define _PIE1_INT0IE_POSN                                   0x0
#define _PIE1_INT0IE_POSITION                               0x0
#define _PIE1_INT0IE_SIZE                                   0x1
#define _PIE1_INT0IE_LENGTH                                 0x1
#define _PIE1_INT0IE_MASK                                   0x1
#define _PIE1_ZCDIE_POSN                                    0x1
#define _PIE1_ZCDIE_POSITION                                0x1
#define _PIE1_ZCDIE_SIZE                                    0x1
#define _PIE1_ZCDIE_LENGTH                                  0x1
#define _PIE1_ZCDIE_MASK                                    0x2
#define _PIE1_ADIE_POSN                                     0x2
#define _PIE1_ADIE_POSITION                                 0x2
#define _PIE1_ADIE_SIZE                                     0x1
#define _PIE1_ADIE_LENGTH                                   0x1
#define _PIE1_ADIE_MASK                                     0x4
#define _PIE1_ADTIE_POSN                                    0x3
#define _PIE1_ADTIE_POSITION                                0x3
#define _PIE1_ADTIE_SIZE                                    0x1
#define _PIE1_ADTIE_LENGTH                                  0x1
#define _PIE1_ADTIE_MASK                                    0x8
#define _PIE1_C1IE_POSN                                     0x4
#define _PIE1_C1IE_POSITION                                 0x4
#define _PIE1_C1IE_SIZE                                     0x1
#define _PIE1_C1IE_LENGTH                                   0x1
#define _PIE1_C1IE_MASK                                     0x10
#define _PIE1_SMT1IE_POSN                                   0x5
#define _PIE1_SMT1IE_POSITION                               0x5
#define _PIE1_SMT1IE_SIZE                                   0x1
#define _PIE1_SMT1IE_LENGTH                                 0x1
#define _PIE1_SMT1IE_MASK                                   0x20
#define _PIE1_SMT1PRAIE_POSN                                0x6
#define _PIE1_SMT1PRAIE_POSITION                            0x6
#define _PIE1_SMT1PRAIE_SIZE                                0x1
#define _PIE1_SMT1PRAIE_LENGTH                              0x1
#define _PIE1_SMT1PRAIE_MASK                                0x40
#define _PIE1_SMT1PWAIE_POSN                                0x7
#define _PIE1_SMT1PWAIE_POSITION                            0x7
#define _PIE1_SMT1PWAIE_SIZE                                0x1
#define _PIE1_SMT1PWAIE_LENGTH                              0x1
#define _PIE1_SMT1PWAIE_MASK                                0x80

// Register: PIE2
#define PIE2 PIE2
extern volatile unsigned char           PIE2                __at(0x3992);
#ifndef _LIB_BUILD
asm("PIE2 equ 03992h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DMA1SCNTIE             :1;
        unsigned DMA1DCNTIE             :1;
        unsigned DMA1ORIE               :1;
        unsigned DMA1AIE                :1;
        unsigned SPI1RXIE               :1;
        unsigned SPI1TXIE               :1;
        unsigned SPI1IE                 :1;
        unsigned I2C1RXIE               :1;
    };
} PIE2bits_t;
extern volatile PIE2bits_t PIE2bits __at(0x3992);
// bitfield macros
#define _PIE2_DMA1SCNTIE_POSN                               0x0
#define _PIE2_DMA1SCNTIE_POSITION                           0x0
#define _PIE2_DMA1SCNTIE_SIZE                               0x1
#define _PIE2_DMA1SCNTIE_LENGTH                             0x1
#define _PIE2_DMA1SCNTIE_MASK                               0x1
#define _PIE2_DMA1DCNTIE_POSN                               0x1
#define _PIE2_DMA1DCNTIE_POSITION                           0x1
#define _PIE2_DMA1DCNTIE_SIZE                               0x1
#define _PIE2_DMA1DCNTIE_LENGTH                             0x1
#define _PIE2_DMA1DCNTIE_MASK                               0x2
#define _PIE2_DMA1ORIE_POSN                                 0x2
#define _PIE2_DMA1ORIE_POSITION                             0x2
#define _PIE2_DMA1ORIE_SIZE                                 0x1
#define _PIE2_DMA1ORIE_LENGTH                               0x1
#define _PIE2_DMA1ORIE_MASK                                 0x4
#define _PIE2_DMA1AIE_POSN                                  0x3
#define _PIE2_DMA1AIE_POSITION                              0x3
#define _PIE2_DMA1AIE_SIZE                                  0x1
#define _PIE2_DMA1AIE_LENGTH                                0x1
#define _PIE2_DMA1AIE_MASK                                  0x8
#define _PIE2_SPI1RXIE_POSN                                 0x4
#define _PIE2_SPI1RXIE_POSITION                             0x4
#define _PIE2_SPI1RXIE_SIZE                                 0x1
#define _PIE2_SPI1RXIE_LENGTH                               0x1
#define _PIE2_SPI1RXIE_MASK                                 0x10
#define _PIE2_SPI1TXIE_POSN                                 0x5
#define _PIE2_SPI1TXIE_POSITION                             0x5
#define _PIE2_SPI1TXIE_SIZE                                 0x1
#define _PIE2_SPI1TXIE_LENGTH                               0x1
#define _PIE2_SPI1TXIE_MASK                                 0x20
#define _PIE2_SPI1IE_POSN                                   0x6
#define _PIE2_SPI1IE_POSITION                               0x6
#define _PIE2_SPI1IE_SIZE                                   0x1
#define _PIE2_SPI1IE_LENGTH                                 0x1
#define _PIE2_SPI1IE_MASK                                   0x40
#define _PIE2_I2C1RXIE_POSN                                 0x7
#define _PIE2_I2C1RXIE_POSITION                             0x7
#define _PIE2_I2C1RXIE_SIZE                                 0x1
#define _PIE2_I2C1RXIE_LENGTH                               0x1
#define _PIE2_I2C1RXIE_MASK                                 0x80

// Register: PIE3
#define PIE3 PIE3
extern volatile unsigned char           PIE3                __at(0x3993);
#ifndef _LIB_BUILD
asm("PIE3 equ 03993h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned I2C1TXIE               :1;
        unsigned I2C1IE                 :1;
        unsigned I2C1EIE                :1;
        unsigned U1RXIE                 :1;
        unsigned U1TXIE                 :1;
        unsigned U1EIE                  :1;
        unsigned U1IE                   :1;
        unsigned TMR0IE                 :1;
    };
} PIE3bits_t;
extern volatile PIE3bits_t PIE3bits __at(0x3993);
// bitfield macros
#define _PIE3_I2C1TXIE_POSN                                 0x0
#define _PIE3_I2C1TXIE_POSITION                             0x0
#define _PIE3_I2C1TXIE_SIZE                                 0x1
#define _PIE3_I2C1TXIE_LENGTH                               0x1
#define _PIE3_I2C1TXIE_MASK                                 0x1
#define _PIE3_I2C1IE_POSN                                   0x1
#define _PIE3_I2C1IE_POSITION                               0x1
#define _PIE3_I2C1IE_SIZE                                   0x1
#define _PIE3_I2C1IE_LENGTH                                 0x1
#define _PIE3_I2C1IE_MASK                                   0x2
#define _PIE3_I2C1EIE_POSN                                  0x2
#define _PIE3_I2C1EIE_POSITION                              0x2
#define _PIE3_I2C1EIE_SIZE                                  0x1
#define _PIE3_I2C1EIE_LENGTH                                0x1
#define _PIE3_I2C1EIE_MASK                                  0x4
#define _PIE3_U1RXIE_POSN                                   0x3
#define _PIE3_U1RXIE_POSITION                               0x3
#define _PIE3_U1RXIE_SIZE                                   0x1
#define _PIE3_U1RXIE_LENGTH                                 0x1
#define _PIE3_U1RXIE_MASK                                   0x8
#define _PIE3_U1TXIE_POSN                                   0x4
#define _PIE3_U1TXIE_POSITION                               0x4
#define _PIE3_U1TXIE_SIZE                                   0x1
#define _PIE3_U1TXIE_LENGTH                                 0x1
#define _PIE3_U1TXIE_MASK                                   0x10
#define _PIE3_U1EIE_POSN                                    0x5
#define _PIE3_U1EIE_POSITION                                0x5
#define _PIE3_U1EIE_SIZE                                    0x1
#define _PIE3_U1EIE_LENGTH                                  0x1
#define _PIE3_U1EIE_MASK                                    0x20
#define _PIE3_U1IE_POSN                                     0x6
#define _PIE3_U1IE_POSITION                                 0x6
#define _PIE3_U1IE_SIZE                                     0x1
#define _PIE3_U1IE_LENGTH                                   0x1
#define _PIE3_U1IE_MASK                                     0x40
#define _PIE3_TMR0IE_POSN                                   0x7
#define _PIE3_TMR0IE_POSITION                               0x7
#define _PIE3_TMR0IE_SIZE                                   0x1
#define _PIE3_TMR0IE_LENGTH                                 0x1
#define _PIE3_TMR0IE_MASK                                   0x80

// Register: PIE4
#define PIE4 PIE4
extern volatile unsigned char           PIE4                __at(0x3994);
#ifndef _LIB_BUILD
asm("PIE4 equ 03994h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR1IE                 :1;
        unsigned TMR1GIE                :1;
        unsigned TMR2IE                 :1;
        unsigned CCP1IE                 :1;
        unsigned                        :1;
        unsigned NCO1IE                 :1;
        unsigned CWG1IE                 :1;
        unsigned CLC1IE                 :1;
    };
} PIE4bits_t;
extern volatile PIE4bits_t PIE4bits __at(0x3994);
// bitfield macros
#define _PIE4_TMR1IE_POSN                                   0x0
#define _PIE4_TMR1IE_POSITION                               0x0
#define _PIE4_TMR1IE_SIZE                                   0x1
#define _PIE4_TMR1IE_LENGTH                                 0x1
#define _PIE4_TMR1IE_MASK                                   0x1
#define _PIE4_TMR1GIE_POSN                                  0x1
#define _PIE4_TMR1GIE_POSITION                              0x1
#define _PIE4_TMR1GIE_SIZE                                  0x1
#define _PIE4_TMR1GIE_LENGTH                                0x1
#define _PIE4_TMR1GIE_MASK                                  0x2
#define _PIE4_TMR2IE_POSN                                   0x2
#define _PIE4_TMR2IE_POSITION                               0x2
#define _PIE4_TMR2IE_SIZE                                   0x1
#define _PIE4_TMR2IE_LENGTH                                 0x1
#define _PIE4_TMR2IE_MASK                                   0x4
#define _PIE4_CCP1IE_POSN                                   0x3
#define _PIE4_CCP1IE_POSITION                               0x3
#define _PIE4_CCP1IE_SIZE                                   0x1
#define _PIE4_CCP1IE_LENGTH                                 0x1
#define _PIE4_CCP1IE_MASK                                   0x8
#define _PIE4_NCO1IE_POSN                                   0x5
#define _PIE4_NCO1IE_POSITION                               0x5
#define _PIE4_NCO1IE_SIZE                                   0x1
#define _PIE4_NCO1IE_LENGTH                                 0x1
#define _PIE4_NCO1IE_MASK                                   0x20
#define _PIE4_CWG1IE_POSN                                   0x6
#define _PIE4_CWG1IE_POSITION                               0x6
#define _PIE4_CWG1IE_SIZE                                   0x1
#define _PIE4_CWG1IE_LENGTH                                 0x1
#define _PIE4_CWG1IE_MASK                                   0x40
#define _PIE4_CLC1IE_POSN                                   0x7
#define _PIE4_CLC1IE_POSITION                               0x7
#define _PIE4_CLC1IE_SIZE                                   0x1
#define _PIE4_CLC1IE_LENGTH                                 0x1
#define _PIE4_CLC1IE_MASK                                   0x80

// Register: PIE5
#define PIE5 PIE5
extern volatile unsigned char           PIE5                __at(0x3995);
#ifndef _LIB_BUILD
asm("PIE5 equ 03995h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INT1IE                 :1;
        unsigned C2IE                   :1;
        unsigned DMA2SCNTIE             :1;
        unsigned DMA2DCNTIE             :1;
        unsigned DMA2ORIE               :1;
        unsigned DMA2AIE                :1;
        unsigned I2C2RXIE               :1;
        unsigned I2C2TXIE               :1;
    };
} PIE5bits_t;
extern volatile PIE5bits_t PIE5bits __at(0x3995);
// bitfield macros
#define _PIE5_INT1IE_POSN                                   0x0
#define _PIE5_INT1IE_POSITION                               0x0
#define _PIE5_INT1IE_SIZE                                   0x1
#define _PIE5_INT1IE_LENGTH                                 0x1
#define _PIE5_INT1IE_MASK                                   0x1
#define _PIE5_C2IE_POSN                                     0x1
#define _PIE5_C2IE_POSITION                                 0x1
#define _PIE5_C2IE_SIZE                                     0x1
#define _PIE5_C2IE_LENGTH                                   0x1
#define _PIE5_C2IE_MASK                                     0x2
#define _PIE5_DMA2SCNTIE_POSN                               0x2
#define _PIE5_DMA2SCNTIE_POSITION                           0x2
#define _PIE5_DMA2SCNTIE_SIZE                               0x1
#define _PIE5_DMA2SCNTIE_LENGTH                             0x1
#define _PIE5_DMA2SCNTIE_MASK                               0x4
#define _PIE5_DMA2DCNTIE_POSN                               0x3
#define _PIE5_DMA2DCNTIE_POSITION                           0x3
#define _PIE5_DMA2DCNTIE_SIZE                               0x1
#define _PIE5_DMA2DCNTIE_LENGTH                             0x1
#define _PIE5_DMA2DCNTIE_MASK                               0x8
#define _PIE5_DMA2ORIE_POSN                                 0x4
#define _PIE5_DMA2ORIE_POSITION                             0x4
#define _PIE5_DMA2ORIE_SIZE                                 0x1
#define _PIE5_DMA2ORIE_LENGTH                               0x1
#define _PIE5_DMA2ORIE_MASK                                 0x10
#define _PIE5_DMA2AIE_POSN                                  0x5
#define _PIE5_DMA2AIE_POSITION                              0x5
#define _PIE5_DMA2AIE_SIZE                                  0x1
#define _PIE5_DMA2AIE_LENGTH                                0x1
#define _PIE5_DMA2AIE_MASK                                  0x20
#define _PIE5_I2C2RXIE_POSN                                 0x6
#define _PIE5_I2C2RXIE_POSITION                             0x6
#define _PIE5_I2C2RXIE_SIZE                                 0x1
#define _PIE5_I2C2RXIE_LENGTH                               0x1
#define _PIE5_I2C2RXIE_MASK                                 0x40
#define _PIE5_I2C2TXIE_POSN                                 0x7
#define _PIE5_I2C2TXIE_POSITION                             0x7
#define _PIE5_I2C2TXIE_SIZE                                 0x1
#define _PIE5_I2C2TXIE_LENGTH                               0x1
#define _PIE5_I2C2TXIE_MASK                                 0x80

// Register: PIE6
#define PIE6 PIE6
extern volatile unsigned char           PIE6                __at(0x3996);
#ifndef _LIB_BUILD
asm("PIE6 equ 03996h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned I2C2IE                 :1;
        unsigned I2C2EIE                :1;
        unsigned U2RXIE                 :1;
        unsigned U2TXIE                 :1;
        unsigned U2EIE                  :1;
        unsigned U2IE                   :1;
        unsigned TMR3IE                 :1;
        unsigned TMR3GIE                :1;
    };
} PIE6bits_t;
extern volatile PIE6bits_t PIE6bits __at(0x3996);
// bitfield macros
#define _PIE6_I2C2IE_POSN                                   0x0
#define _PIE6_I2C2IE_POSITION                               0x0
#define _PIE6_I2C2IE_SIZE                                   0x1
#define _PIE6_I2C2IE_LENGTH                                 0x1
#define _PIE6_I2C2IE_MASK                                   0x1
#define _PIE6_I2C2EIE_POSN                                  0x1
#define _PIE6_I2C2EIE_POSITION                              0x1
#define _PIE6_I2C2EIE_SIZE                                  0x1
#define _PIE6_I2C2EIE_LENGTH                                0x1
#define _PIE6_I2C2EIE_MASK                                  0x2
#define _PIE6_U2RXIE_POSN                                   0x2
#define _PIE6_U2RXIE_POSITION                               0x2
#define _PIE6_U2RXIE_SIZE                                   0x1
#define _PIE6_U2RXIE_LENGTH                                 0x1
#define _PIE6_U2RXIE_MASK                                   0x4
#define _PIE6_U2TXIE_POSN                                   0x3
#define _PIE6_U2TXIE_POSITION                               0x3
#define _PIE6_U2TXIE_SIZE                                   0x1
#define _PIE6_U2TXIE_LENGTH                                 0x1
#define _PIE6_U2TXIE_MASK                                   0x8
#define _PIE6_U2EIE_POSN                                    0x4
#define _PIE6_U2EIE_POSITION                                0x4
#define _PIE6_U2EIE_SIZE                                    0x1
#define _PIE6_U2EIE_LENGTH                                  0x1
#define _PIE6_U2EIE_MASK                                    0x10
#define _PIE6_U2IE_POSN                                     0x5
#define _PIE6_U2IE_POSITION                                 0x5
#define _PIE6_U2IE_SIZE                                     0x1
#define _PIE6_U2IE_LENGTH                                   0x1
#define _PIE6_U2IE_MASK                                     0x20
#define _PIE6_TMR3IE_POSN                                   0x6
#define _PIE6_TMR3IE_POSITION                               0x6
#define _PIE6_TMR3IE_SIZE                                   0x1
#define _PIE6_TMR3IE_LENGTH                                 0x1
#define _PIE6_TMR3IE_MASK                                   0x40
#define _PIE6_TMR3GIE_POSN                                  0x7
#define _PIE6_TMR3GIE_POSITION                              0x7
#define _PIE6_TMR3GIE_SIZE                                  0x1
#define _PIE6_TMR3GIE_LENGTH                                0x1
#define _PIE6_TMR3GIE_MASK                                  0x80

// Register: PIE7
#define PIE7 PIE7
extern volatile unsigned char           PIE7                __at(0x3997);
#ifndef _LIB_BUILD
asm("PIE7 equ 03997h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR4IE                 :1;
        unsigned CCP2IE                 :1;
        unsigned                        :1;
        unsigned CWG2IE                 :1;
        unsigned CLC2IE                 :1;
        unsigned INT2IE                 :1;
    };
} PIE7bits_t;
extern volatile PIE7bits_t PIE7bits __at(0x3997);
// bitfield macros
#define _PIE7_TMR4IE_POSN                                   0x0
#define _PIE7_TMR4IE_POSITION                               0x0
#define _PIE7_TMR4IE_SIZE                                   0x1
#define _PIE7_TMR4IE_LENGTH                                 0x1
#define _PIE7_TMR4IE_MASK                                   0x1
#define _PIE7_CCP2IE_POSN                                   0x1
#define _PIE7_CCP2IE_POSITION                               0x1
#define _PIE7_CCP2IE_SIZE                                   0x1
#define _PIE7_CCP2IE_LENGTH                                 0x1
#define _PIE7_CCP2IE_MASK                                   0x2
#define _PIE7_CWG2IE_POSN                                   0x3
#define _PIE7_CWG2IE_POSITION                               0x3
#define _PIE7_CWG2IE_SIZE                                   0x1
#define _PIE7_CWG2IE_LENGTH                                 0x1
#define _PIE7_CWG2IE_MASK                                   0x8
#define _PIE7_CLC2IE_POSN                                   0x4
#define _PIE7_CLC2IE_POSITION                               0x4
#define _PIE7_CLC2IE_SIZE                                   0x1
#define _PIE7_CLC2IE_LENGTH                                 0x1
#define _PIE7_CLC2IE_MASK                                   0x10
#define _PIE7_INT2IE_POSN                                   0x5
#define _PIE7_INT2IE_POSITION                               0x5
#define _PIE7_INT2IE_SIZE                                   0x1
#define _PIE7_INT2IE_LENGTH                                 0x1
#define _PIE7_INT2IE_MASK                                   0x20

// Register: PIE8
#define PIE8 PIE8
extern volatile unsigned char           PIE8                __at(0x3998);
#ifndef _LIB_BUILD
asm("PIE8 equ 03998h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :6;
        unsigned TMR5IE                 :1;
        unsigned TMR5GIE                :1;
    };
} PIE8bits_t;
extern volatile PIE8bits_t PIE8bits __at(0x3998);
// bitfield macros
#define _PIE8_TMR5IE_POSN                                   0x6
#define _PIE8_TMR5IE_POSITION                               0x6
#define _PIE8_TMR5IE_SIZE                                   0x1
#define _PIE8_TMR5IE_LENGTH                                 0x1
#define _PIE8_TMR5IE_MASK                                   0x40
#define _PIE8_TMR5GIE_POSN                                  0x7
#define _PIE8_TMR5GIE_POSITION                              0x7
#define _PIE8_TMR5GIE_SIZE                                  0x1
#define _PIE8_TMR5GIE_LENGTH                                0x1
#define _PIE8_TMR5GIE_MASK                                  0x80

// Register: PIE9
#define PIE9 PIE9
extern volatile unsigned char           PIE9                __at(0x3999);
#ifndef _LIB_BUILD
asm("PIE9 equ 03999h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR6IE                 :1;
        unsigned CCP3IE                 :1;
        unsigned CWG3IE                 :1;
        unsigned CLC3IE                 :1;
    };
} PIE9bits_t;
extern volatile PIE9bits_t PIE9bits __at(0x3999);
// bitfield macros
#define _PIE9_TMR6IE_POSN                                   0x0
#define _PIE9_TMR6IE_POSITION                               0x0
#define _PIE9_TMR6IE_SIZE                                   0x1
#define _PIE9_TMR6IE_LENGTH                                 0x1
#define _PIE9_TMR6IE_MASK                                   0x1
#define _PIE9_CCP3IE_POSN                                   0x1
#define _PIE9_CCP3IE_POSITION                               0x1
#define _PIE9_CCP3IE_SIZE                                   0x1
#define _PIE9_CCP3IE_LENGTH                                 0x1
#define _PIE9_CCP3IE_MASK                                   0x2
#define _PIE9_CWG3IE_POSN                                   0x2
#define _PIE9_CWG3IE_POSITION                               0x2
#define _PIE9_CWG3IE_SIZE                                   0x1
#define _PIE9_CWG3IE_LENGTH                                 0x1
#define _PIE9_CWG3IE_MASK                                   0x4
#define _PIE9_CLC3IE_POSN                                   0x3
#define _PIE9_CLC3IE_POSITION                               0x3
#define _PIE9_CLC3IE_SIZE                                   0x1
#define _PIE9_CLC3IE_LENGTH                                 0x1
#define _PIE9_CLC3IE_MASK                                   0x8

// Register: PIE10
#define PIE10 PIE10
extern volatile unsigned char           PIE10               __at(0x399A);
#ifndef _LIB_BUILD
asm("PIE10 equ 0399Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP4IE                 :1;
        unsigned CLC4IE                 :1;
    };
} PIE10bits_t;
extern volatile PIE10bits_t PIE10bits __at(0x399A);
// bitfield macros
#define _PIE10_CCP4IE_POSN                                  0x0
#define _PIE10_CCP4IE_POSITION                              0x0
#define _PIE10_CCP4IE_SIZE                                  0x1
#define _PIE10_CCP4IE_LENGTH                                0x1
#define _PIE10_CCP4IE_MASK                                  0x1
#define _PIE10_CLC4IE_POSN                                  0x1
#define _PIE10_CLC4IE_POSITION                              0x1
#define _PIE10_CLC4IE_SIZE                                  0x1
#define _PIE10_CLC4IE_LENGTH                                0x1
#define _PIE10_CLC4IE_MASK                                  0x2

// Register: PIR0
#define PIR0 PIR0
extern volatile unsigned char           PIR0                __at(0x39A0);
#ifndef _LIB_BUILD
asm("PIR0 equ 039A0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SWIF                   :1;
        unsigned HLVDIF                 :1;
        unsigned OSFIF                  :1;
        unsigned CSWIF                  :1;
        unsigned NVMIF                  :1;
        unsigned SCANIF                 :1;
        unsigned CRCIF                  :1;
        unsigned IOCIF                  :1;
    };
} PIR0bits_t;
extern volatile PIR0bits_t PIR0bits __at(0x39A0);
// bitfield macros
#define _PIR0_SWIF_POSN                                     0x0
#define _PIR0_SWIF_POSITION                                 0x0
#define _PIR0_SWIF_SIZE                                     0x1
#define _PIR0_SWIF_LENGTH                                   0x1
#define _PIR0_SWIF_MASK                                     0x1
#define _PIR0_HLVDIF_POSN                                   0x1
#define _PIR0_HLVDIF_POSITION                               0x1
#define _PIR0_HLVDIF_SIZE                                   0x1
#define _PIR0_HLVDIF_LENGTH                                 0x1
#define _PIR0_HLVDIF_MASK                                   0x2
#define _PIR0_OSFIF_POSN                                    0x2
#define _PIR0_OSFIF_POSITION                                0x2
#define _PIR0_OSFIF_SIZE                                    0x1
#define _PIR0_OSFIF_LENGTH                                  0x1
#define _PIR0_OSFIF_MASK                                    0x4
#define _PIR0_CSWIF_POSN                                    0x3
#define _PIR0_CSWIF_POSITION                                0x3
#define _PIR0_CSWIF_SIZE                                    0x1
#define _PIR0_CSWIF_LENGTH                                  0x1
#define _PIR0_CSWIF_MASK                                    0x8
#define _PIR0_NVMIF_POSN                                    0x4
#define _PIR0_NVMIF_POSITION                                0x4
#define _PIR0_NVMIF_SIZE                                    0x1
#define _PIR0_NVMIF_LENGTH                                  0x1
#define _PIR0_NVMIF_MASK                                    0x10
#define _PIR0_SCANIF_POSN                                   0x5
#define _PIR0_SCANIF_POSITION                               0x5
#define _PIR0_SCANIF_SIZE                                   0x1
#define _PIR0_SCANIF_LENGTH                                 0x1
#define _PIR0_SCANIF_MASK                                   0x20
#define _PIR0_CRCIF_POSN                                    0x6
#define _PIR0_CRCIF_POSITION                                0x6
#define _PIR0_CRCIF_SIZE                                    0x1
#define _PIR0_CRCIF_LENGTH                                  0x1
#define _PIR0_CRCIF_MASK                                    0x40
#define _PIR0_IOCIF_POSN                                    0x7
#define _PIR0_IOCIF_POSITION                                0x7
#define _PIR0_IOCIF_SIZE                                    0x1
#define _PIR0_IOCIF_LENGTH                                  0x1
#define _PIR0_IOCIF_MASK                                    0x80

// Register: PIR1
#define PIR1 PIR1
extern volatile unsigned char           PIR1                __at(0x39A1);
#ifndef _LIB_BUILD
asm("PIR1 equ 039A1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INT0IF                 :1;
        unsigned ZCDIF                  :1;
        unsigned ADIF                   :1;
        unsigned ADTIF                  :1;
        unsigned C1IF                   :1;
        unsigned SMT1IF                 :1;
        unsigned SMT1PRAIF              :1;
        unsigned SMT1PWAIF              :1;
    };
} PIR1bits_t;
extern volatile PIR1bits_t PIR1bits __at(0x39A1);
// bitfield macros
#define _PIR1_INT0IF_POSN                                   0x0
#define _PIR1_INT0IF_POSITION                               0x0
#define _PIR1_INT0IF_SIZE                                   0x1
#define _PIR1_INT0IF_LENGTH                                 0x1
#define _PIR1_INT0IF_MASK                                   0x1
#define _PIR1_ZCDIF_POSN                                    0x1
#define _PIR1_ZCDIF_POSITION                                0x1
#define _PIR1_ZCDIF_SIZE                                    0x1
#define _PIR1_ZCDIF_LENGTH                                  0x1
#define _PIR1_ZCDIF_MASK                                    0x2
#define _PIR1_ADIF_POSN                                     0x2
#define _PIR1_ADIF_POSITION                                 0x2
#define _PIR1_ADIF_SIZE                                     0x1
#define _PIR1_ADIF_LENGTH                                   0x1
#define _PIR1_ADIF_MASK                                     0x4
#define _PIR1_ADTIF_POSN                                    0x3
#define _PIR1_ADTIF_POSITION                                0x3
#define _PIR1_ADTIF_SIZE                                    0x1
#define _PIR1_ADTIF_LENGTH                                  0x1
#define _PIR1_ADTIF_MASK                                    0x8
#define _PIR1_C1IF_POSN                                     0x4
#define _PIR1_C1IF_POSITION                                 0x4
#define _PIR1_C1IF_SIZE                                     0x1
#define _PIR1_C1IF_LENGTH                                   0x1
#define _PIR1_C1IF_MASK                                     0x10
#define _PIR1_SMT1IF_POSN                                   0x5
#define _PIR1_SMT1IF_POSITION                               0x5
#define _PIR1_SMT1IF_SIZE                                   0x1
#define _PIR1_SMT1IF_LENGTH                                 0x1
#define _PIR1_SMT1IF_MASK                                   0x20
#define _PIR1_SMT1PRAIF_POSN                                0x6
#define _PIR1_SMT1PRAIF_POSITION                            0x6
#define _PIR1_SMT1PRAIF_SIZE                                0x1
#define _PIR1_SMT1PRAIF_LENGTH                              0x1
#define _PIR1_SMT1PRAIF_MASK                                0x40
#define _PIR1_SMT1PWAIF_POSN                                0x7
#define _PIR1_SMT1PWAIF_POSITION                            0x7
#define _PIR1_SMT1PWAIF_SIZE                                0x1
#define _PIR1_SMT1PWAIF_LENGTH                              0x1
#define _PIR1_SMT1PWAIF_MASK                                0x80

// Register: PIR2
#define PIR2 PIR2
extern volatile unsigned char           PIR2                __at(0x39A2);
#ifndef _LIB_BUILD
asm("PIR2 equ 039A2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DMA1SCNTIF             :1;
        unsigned DMA1DCNTIF             :1;
        unsigned DMA1ORIF               :1;
        unsigned DMA1AIF                :1;
        unsigned SPI1RXIF               :1;
        unsigned SPI1TXIF               :1;
        unsigned SPI1IF                 :1;
        unsigned I2C1RXIF               :1;
    };
} PIR2bits_t;
extern volatile PIR2bits_t PIR2bits __at(0x39A2);
// bitfield macros
#define _PIR2_DMA1SCNTIF_POSN                               0x0
#define _PIR2_DMA1SCNTIF_POSITION                           0x0
#define _PIR2_DMA1SCNTIF_SIZE                               0x1
#define _PIR2_DMA1SCNTIF_LENGTH                             0x1
#define _PIR2_DMA1SCNTIF_MASK                               0x1
#define _PIR2_DMA1DCNTIF_POSN                               0x1
#define _PIR2_DMA1DCNTIF_POSITION                           0x1
#define _PIR2_DMA1DCNTIF_SIZE                               0x1
#define _PIR2_DMA1DCNTIF_LENGTH                             0x1
#define _PIR2_DMA1DCNTIF_MASK                               0x2
#define _PIR2_DMA1ORIF_POSN                                 0x2
#define _PIR2_DMA1ORIF_POSITION                             0x2
#define _PIR2_DMA1ORIF_SIZE                                 0x1
#define _PIR2_DMA1ORIF_LENGTH                               0x1
#define _PIR2_DMA1ORIF_MASK                                 0x4
#define _PIR2_DMA1AIF_POSN                                  0x3
#define _PIR2_DMA1AIF_POSITION                              0x3
#define _PIR2_DMA1AIF_SIZE                                  0x1
#define _PIR2_DMA1AIF_LENGTH                                0x1
#define _PIR2_DMA1AIF_MASK                                  0x8
#define _PIR2_SPI1RXIF_POSN                                 0x4
#define _PIR2_SPI1RXIF_POSITION                             0x4
#define _PIR2_SPI1RXIF_SIZE                                 0x1
#define _PIR2_SPI1RXIF_LENGTH                               0x1
#define _PIR2_SPI1RXIF_MASK                                 0x10
#define _PIR2_SPI1TXIF_POSN                                 0x5
#define _PIR2_SPI1TXIF_POSITION                             0x5
#define _PIR2_SPI1TXIF_SIZE                                 0x1
#define _PIR2_SPI1TXIF_LENGTH                               0x1
#define _PIR2_SPI1TXIF_MASK                                 0x20
#define _PIR2_SPI1IF_POSN                                   0x6
#define _PIR2_SPI1IF_POSITION                               0x6
#define _PIR2_SPI1IF_SIZE                                   0x1
#define _PIR2_SPI1IF_LENGTH                                 0x1
#define _PIR2_SPI1IF_MASK                                   0x40
#define _PIR2_I2C1RXIF_POSN                                 0x7
#define _PIR2_I2C1RXIF_POSITION                             0x7
#define _PIR2_I2C1RXIF_SIZE                                 0x1
#define _PIR2_I2C1RXIF_LENGTH                               0x1
#define _PIR2_I2C1RXIF_MASK                                 0x80

// Register: PIR3
#define PIR3 PIR3
extern volatile unsigned char           PIR3                __at(0x39A3);
#ifndef _LIB_BUILD
asm("PIR3 equ 039A3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned I2C1TXIF               :1;
        unsigned I2C1IF                 :1;
        unsigned I2C1EIF                :1;
        unsigned U1RXIF                 :1;
        unsigned U1TXIF                 :1;
        unsigned U1EIF                  :1;
        unsigned U1IF                   :1;
        unsigned TMR0IF                 :1;
    };
} PIR3bits_t;
extern volatile PIR3bits_t PIR3bits __at(0x39A3);
// bitfield macros
#define _PIR3_I2C1TXIF_POSN                                 0x0
#define _PIR3_I2C1TXIF_POSITION                             0x0
#define _PIR3_I2C1TXIF_SIZE                                 0x1
#define _PIR3_I2C1TXIF_LENGTH                               0x1
#define _PIR3_I2C1TXIF_MASK                                 0x1
#define _PIR3_I2C1IF_POSN                                   0x1
#define _PIR3_I2C1IF_POSITION                               0x1
#define _PIR3_I2C1IF_SIZE                                   0x1
#define _PIR3_I2C1IF_LENGTH                                 0x1
#define _PIR3_I2C1IF_MASK                                   0x2
#define _PIR3_I2C1EIF_POSN                                  0x2
#define _PIR3_I2C1EIF_POSITION                              0x2
#define _PIR3_I2C1EIF_SIZE                                  0x1
#define _PIR3_I2C1EIF_LENGTH                                0x1
#define _PIR3_I2C1EIF_MASK                                  0x4
#define _PIR3_U1RXIF_POSN                                   0x3
#define _PIR3_U1RXIF_POSITION                               0x3
#define _PIR3_U1RXIF_SIZE                                   0x1
#define _PIR3_U1RXIF_LENGTH                                 0x1
#define _PIR3_U1RXIF_MASK                                   0x8
#define _PIR3_U1TXIF_POSN                                   0x4
#define _PIR3_U1TXIF_POSITION                               0x4
#define _PIR3_U1TXIF_SIZE                                   0x1
#define _PIR3_U1TXIF_LENGTH                                 0x1
#define _PIR3_U1TXIF_MASK                                   0x10
#define _PIR3_U1EIF_POSN                                    0x5
#define _PIR3_U1EIF_POSITION                                0x5
#define _PIR3_U1EIF_SIZE                                    0x1
#define _PIR3_U1EIF_LENGTH                                  0x1
#define _PIR3_U1EIF_MASK                                    0x20
#define _PIR3_U1IF_POSN                                     0x6
#define _PIR3_U1IF_POSITION                                 0x6
#define _PIR3_U1IF_SIZE                                     0x1
#define _PIR3_U1IF_LENGTH                                   0x1
#define _PIR3_U1IF_MASK                                     0x40
#define _PIR3_TMR0IF_POSN                                   0x7
#define _PIR3_TMR0IF_POSITION                               0x7
#define _PIR3_TMR0IF_SIZE                                   0x1
#define _PIR3_TMR0IF_LENGTH                                 0x1
#define _PIR3_TMR0IF_MASK                                   0x80

// Register: PIR4
#define PIR4 PIR4
extern volatile unsigned char           PIR4                __at(0x39A4);
#ifndef _LIB_BUILD
asm("PIR4 equ 039A4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR1IF                 :1;
        unsigned TMR1GIF                :1;
        unsigned TMR2IF                 :1;
        unsigned CCP1IF                 :1;
        unsigned                        :1;
        unsigned NCO1IF                 :1;
        unsigned CWG1IF                 :1;
        unsigned CLC1IF                 :1;
    };
} PIR4bits_t;
extern volatile PIR4bits_t PIR4bits __at(0x39A4);
// bitfield macros
#define _PIR4_TMR1IF_POSN                                   0x0
#define _PIR4_TMR1IF_POSITION                               0x0
#define _PIR4_TMR1IF_SIZE                                   0x1
#define _PIR4_TMR1IF_LENGTH                                 0x1
#define _PIR4_TMR1IF_MASK                                   0x1
#define _PIR4_TMR1GIF_POSN                                  0x1
#define _PIR4_TMR1GIF_POSITION                              0x1
#define _PIR4_TMR1GIF_SIZE                                  0x1
#define _PIR4_TMR1GIF_LENGTH                                0x1
#define _PIR4_TMR1GIF_MASK                                  0x2
#define _PIR4_TMR2IF_POSN                                   0x2
#define _PIR4_TMR2IF_POSITION                               0x2
#define _PIR4_TMR2IF_SIZE                                   0x1
#define _PIR4_TMR2IF_LENGTH                                 0x1
#define _PIR4_TMR2IF_MASK                                   0x4
#define _PIR4_CCP1IF_POSN                                   0x3
#define _PIR4_CCP1IF_POSITION                               0x3
#define _PIR4_CCP1IF_SIZE                                   0x1
#define _PIR4_CCP1IF_LENGTH                                 0x1
#define _PIR4_CCP1IF_MASK                                   0x8
#define _PIR4_NCO1IF_POSN                                   0x5
#define _PIR4_NCO1IF_POSITION                               0x5
#define _PIR4_NCO1IF_SIZE                                   0x1
#define _PIR4_NCO1IF_LENGTH                                 0x1
#define _PIR4_NCO1IF_MASK                                   0x20
#define _PIR4_CWG1IF_POSN                                   0x6
#define _PIR4_CWG1IF_POSITION                               0x6
#define _PIR4_CWG1IF_SIZE                                   0x1
#define _PIR4_CWG1IF_LENGTH                                 0x1
#define _PIR4_CWG1IF_MASK                                   0x40
#define _PIR4_CLC1IF_POSN                                   0x7
#define _PIR4_CLC1IF_POSITION                               0x7
#define _PIR4_CLC1IF_SIZE                                   0x1
#define _PIR4_CLC1IF_LENGTH                                 0x1
#define _PIR4_CLC1IF_MASK                                   0x80

// Register: PIR5
#define PIR5 PIR5
extern volatile unsigned char           PIR5                __at(0x39A5);
#ifndef _LIB_BUILD
asm("PIR5 equ 039A5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INT1IF                 :1;
        unsigned C2IF                   :1;
        unsigned DMA2SCNTIF             :1;
        unsigned DMA2DCNTIF             :1;
        unsigned DMA2ORIF               :1;
        unsigned DMA2AIF                :1;
        unsigned I2C2RXIF               :1;
        unsigned I2C2TXIF               :1;
    };
} PIR5bits_t;
extern volatile PIR5bits_t PIR5bits __at(0x39A5);
// bitfield macros
#define _PIR5_INT1IF_POSN                                   0x0
#define _PIR5_INT1IF_POSITION                               0x0
#define _PIR5_INT1IF_SIZE                                   0x1
#define _PIR5_INT1IF_LENGTH                                 0x1
#define _PIR5_INT1IF_MASK                                   0x1
#define _PIR5_C2IF_POSN                                     0x1
#define _PIR5_C2IF_POSITION                                 0x1
#define _PIR5_C2IF_SIZE                                     0x1
#define _PIR5_C2IF_LENGTH                                   0x1
#define _PIR5_C2IF_MASK                                     0x2
#define _PIR5_DMA2SCNTIF_POSN                               0x2
#define _PIR5_DMA2SCNTIF_POSITION                           0x2
#define _PIR5_DMA2SCNTIF_SIZE                               0x1
#define _PIR5_DMA2SCNTIF_LENGTH                             0x1
#define _PIR5_DMA2SCNTIF_MASK                               0x4
#define _PIR5_DMA2DCNTIF_POSN                               0x3
#define _PIR5_DMA2DCNTIF_POSITION                           0x3
#define _PIR5_DMA2DCNTIF_SIZE                               0x1
#define _PIR5_DMA2DCNTIF_LENGTH                             0x1
#define _PIR5_DMA2DCNTIF_MASK                               0x8
#define _PIR5_DMA2ORIF_POSN                                 0x4
#define _PIR5_DMA2ORIF_POSITION                             0x4
#define _PIR5_DMA2ORIF_SIZE                                 0x1
#define _PIR5_DMA2ORIF_LENGTH                               0x1
#define _PIR5_DMA2ORIF_MASK                                 0x10
#define _PIR5_DMA2AIF_POSN                                  0x5
#define _PIR5_DMA2AIF_POSITION                              0x5
#define _PIR5_DMA2AIF_SIZE                                  0x1
#define _PIR5_DMA2AIF_LENGTH                                0x1
#define _PIR5_DMA2AIF_MASK                                  0x20
#define _PIR5_I2C2RXIF_POSN                                 0x6
#define _PIR5_I2C2RXIF_POSITION                             0x6
#define _PIR5_I2C2RXIF_SIZE                                 0x1
#define _PIR5_I2C2RXIF_LENGTH                               0x1
#define _PIR5_I2C2RXIF_MASK                                 0x40
#define _PIR5_I2C2TXIF_POSN                                 0x7
#define _PIR5_I2C2TXIF_POSITION                             0x7
#define _PIR5_I2C2TXIF_SIZE                                 0x1
#define _PIR5_I2C2TXIF_LENGTH                               0x1
#define _PIR5_I2C2TXIF_MASK                                 0x80

// Register: PIR6
#define PIR6 PIR6
extern volatile unsigned char           PIR6                __at(0x39A6);
#ifndef _LIB_BUILD
asm("PIR6 equ 039A6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned I2C2IF                 :1;
        unsigned I2C2EIF                :1;
        unsigned U2RXIF                 :1;
        unsigned U2TXIF                 :1;
        unsigned U2EIF                  :1;
        unsigned U2IF                   :1;
        unsigned TMR3IF                 :1;
        unsigned TMR3GIF                :1;
    };
} PIR6bits_t;
extern volatile PIR6bits_t PIR6bits __at(0x39A6);
// bitfield macros
#define _PIR6_I2C2IF_POSN                                   0x0
#define _PIR6_I2C2IF_POSITION                               0x0
#define _PIR6_I2C2IF_SIZE                                   0x1
#define _PIR6_I2C2IF_LENGTH                                 0x1
#define _PIR6_I2C2IF_MASK                                   0x1
#define _PIR6_I2C2EIF_POSN                                  0x1
#define _PIR6_I2C2EIF_POSITION                              0x1
#define _PIR6_I2C2EIF_SIZE                                  0x1
#define _PIR6_I2C2EIF_LENGTH                                0x1
#define _PIR6_I2C2EIF_MASK                                  0x2
#define _PIR6_U2RXIF_POSN                                   0x2
#define _PIR6_U2RXIF_POSITION                               0x2
#define _PIR6_U2RXIF_SIZE                                   0x1
#define _PIR6_U2RXIF_LENGTH                                 0x1
#define _PIR6_U2RXIF_MASK                                   0x4
#define _PIR6_U2TXIF_POSN                                   0x3
#define _PIR6_U2TXIF_POSITION                               0x3
#define _PIR6_U2TXIF_SIZE                                   0x1
#define _PIR6_U2TXIF_LENGTH                                 0x1
#define _PIR6_U2TXIF_MASK                                   0x8
#define _PIR6_U2EIF_POSN                                    0x4
#define _PIR6_U2EIF_POSITION                                0x4
#define _PIR6_U2EIF_SIZE                                    0x1
#define _PIR6_U2EIF_LENGTH                                  0x1
#define _PIR6_U2EIF_MASK                                    0x10
#define _PIR6_U2IF_POSN                                     0x5
#define _PIR6_U2IF_POSITION                                 0x5
#define _PIR6_U2IF_SIZE                                     0x1
#define _PIR6_U2IF_LENGTH                                   0x1
#define _PIR6_U2IF_MASK                                     0x20
#define _PIR6_TMR3IF_POSN                                   0x6
#define _PIR6_TMR3IF_POSITION                               0x6
#define _PIR6_TMR3IF_SIZE                                   0x1
#define _PIR6_TMR3IF_LENGTH                                 0x1
#define _PIR6_TMR3IF_MASK                                   0x40
#define _PIR6_TMR3GIF_POSN                                  0x7
#define _PIR6_TMR3GIF_POSITION                              0x7
#define _PIR6_TMR3GIF_SIZE                                  0x1
#define _PIR6_TMR3GIF_LENGTH                                0x1
#define _PIR6_TMR3GIF_MASK                                  0x80

// Register: PIR7
#define PIR7 PIR7
extern volatile unsigned char           PIR7                __at(0x39A7);
#ifndef _LIB_BUILD
asm("PIR7 equ 039A7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR4IF                 :1;
        unsigned CCP2IF                 :1;
        unsigned                        :1;
        unsigned CWG2IF                 :1;
        unsigned CLC2IF                 :1;
        unsigned INT2IF                 :1;
    };
} PIR7bits_t;
extern volatile PIR7bits_t PIR7bits __at(0x39A7);
// bitfield macros
#define _PIR7_TMR4IF_POSN                                   0x0
#define _PIR7_TMR4IF_POSITION                               0x0
#define _PIR7_TMR4IF_SIZE                                   0x1
#define _PIR7_TMR4IF_LENGTH                                 0x1
#define _PIR7_TMR4IF_MASK                                   0x1
#define _PIR7_CCP2IF_POSN                                   0x1
#define _PIR7_CCP2IF_POSITION                               0x1
#define _PIR7_CCP2IF_SIZE                                   0x1
#define _PIR7_CCP2IF_LENGTH                                 0x1
#define _PIR7_CCP2IF_MASK                                   0x2
#define _PIR7_CWG2IF_POSN                                   0x3
#define _PIR7_CWG2IF_POSITION                               0x3
#define _PIR7_CWG2IF_SIZE                                   0x1
#define _PIR7_CWG2IF_LENGTH                                 0x1
#define _PIR7_CWG2IF_MASK                                   0x8
#define _PIR7_CLC2IF_POSN                                   0x4
#define _PIR7_CLC2IF_POSITION                               0x4
#define _PIR7_CLC2IF_SIZE                                   0x1
#define _PIR7_CLC2IF_LENGTH                                 0x1
#define _PIR7_CLC2IF_MASK                                   0x10
#define _PIR7_INT2IF_POSN                                   0x5
#define _PIR7_INT2IF_POSITION                               0x5
#define _PIR7_INT2IF_SIZE                                   0x1
#define _PIR7_INT2IF_LENGTH                                 0x1
#define _PIR7_INT2IF_MASK                                   0x20

// Register: PIR8
#define PIR8 PIR8
extern volatile unsigned char           PIR8                __at(0x39A8);
#ifndef _LIB_BUILD
asm("PIR8 equ 039A8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :6;
        unsigned TMR5IF                 :1;
        unsigned TMR5GIF                :1;
    };
} PIR8bits_t;
extern volatile PIR8bits_t PIR8bits __at(0x39A8);
// bitfield macros
#define _PIR8_TMR5IF_POSN                                   0x6
#define _PIR8_TMR5IF_POSITION                               0x6
#define _PIR8_TMR5IF_SIZE                                   0x1
#define _PIR8_TMR5IF_LENGTH                                 0x1
#define _PIR8_TMR5IF_MASK                                   0x40
#define _PIR8_TMR5GIF_POSN                                  0x7
#define _PIR8_TMR5GIF_POSITION                              0x7
#define _PIR8_TMR5GIF_SIZE                                  0x1
#define _PIR8_TMR5GIF_LENGTH                                0x1
#define _PIR8_TMR5GIF_MASK                                  0x80

// Register: PIR9
#define PIR9 PIR9
extern volatile unsigned char           PIR9                __at(0x39A9);
#ifndef _LIB_BUILD
asm("PIR9 equ 039A9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR6IF                 :1;
        unsigned CCP3IF                 :1;
        unsigned CWG3IF                 :1;
        unsigned CLC3IF                 :1;
    };
} PIR9bits_t;
extern volatile PIR9bits_t PIR9bits __at(0x39A9);
// bitfield macros
#define _PIR9_TMR6IF_POSN                                   0x0
#define _PIR9_TMR6IF_POSITION                               0x0
#define _PIR9_TMR6IF_SIZE                                   0x1
#define _PIR9_TMR6IF_LENGTH                                 0x1
#define _PIR9_TMR6IF_MASK                                   0x1
#define _PIR9_CCP3IF_POSN                                   0x1
#define _PIR9_CCP3IF_POSITION                               0x1
#define _PIR9_CCP3IF_SIZE                                   0x1
#define _PIR9_CCP3IF_LENGTH                                 0x1
#define _PIR9_CCP3IF_MASK                                   0x2
#define _PIR9_CWG3IF_POSN                                   0x2
#define _PIR9_CWG3IF_POSITION                               0x2
#define _PIR9_CWG3IF_SIZE                                   0x1
#define _PIR9_CWG3IF_LENGTH                                 0x1
#define _PIR9_CWG3IF_MASK                                   0x4
#define _PIR9_CLC3IF_POSN                                   0x3
#define _PIR9_CLC3IF_POSITION                               0x3
#define _PIR9_CLC3IF_SIZE                                   0x1
#define _PIR9_CLC3IF_LENGTH                                 0x1
#define _PIR9_CLC3IF_MASK                                   0x8

// Register: PIR10
#define PIR10 PIR10
extern volatile unsigned char           PIR10               __at(0x39AA);
#ifndef _LIB_BUILD
asm("PIR10 equ 039AAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP4IF                 :1;
        unsigned CLC4IF                 :1;
    };
} PIR10bits_t;
extern volatile PIR10bits_t PIR10bits __at(0x39AA);
// bitfield macros
#define _PIR10_CCP4IF_POSN                                  0x0
#define _PIR10_CCP4IF_POSITION                              0x0
#define _PIR10_CCP4IF_SIZE                                  0x1
#define _PIR10_CCP4IF_LENGTH                                0x1
#define _PIR10_CCP4IF_MASK                                  0x1
#define _PIR10_CLC4IF_POSN                                  0x1
#define _PIR10_CLC4IF_POSITION                              0x1
#define _PIR10_CLC4IF_SIZE                                  0x1
#define _PIR10_CLC4IF_LENGTH                                0x1
#define _PIR10_CLC4IF_MASK                                  0x2

// Register: PMD0
#define PMD0 PMD0
extern volatile unsigned char           PMD0                __at(0x39C0);
#ifndef _LIB_BUILD
asm("PMD0 equ 039C0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCMD                  :1;
        unsigned CLKRMD                 :1;
        unsigned NVMMD                  :1;
        unsigned SCANMD                 :1;
        unsigned CRCMD                  :1;
        unsigned HLVDMD                 :1;
        unsigned FVRMD                  :1;
        unsigned SYSCMD                 :1;
    };
} PMD0bits_t;
extern volatile PMD0bits_t PMD0bits __at(0x39C0);
// bitfield macros
#define _PMD0_IOCMD_POSN                                    0x0
#define _PMD0_IOCMD_POSITION                                0x0
#define _PMD0_IOCMD_SIZE                                    0x1
#define _PMD0_IOCMD_LENGTH                                  0x1
#define _PMD0_IOCMD_MASK                                    0x1
#define _PMD0_CLKRMD_POSN                                   0x1
#define _PMD0_CLKRMD_POSITION                               0x1
#define _PMD0_CLKRMD_SIZE                                   0x1
#define _PMD0_CLKRMD_LENGTH                                 0x1
#define _PMD0_CLKRMD_MASK                                   0x2
#define _PMD0_NVMMD_POSN                                    0x2
#define _PMD0_NVMMD_POSITION                                0x2
#define _PMD0_NVMMD_SIZE                                    0x1
#define _PMD0_NVMMD_LENGTH                                  0x1
#define _PMD0_NVMMD_MASK                                    0x4
#define _PMD0_SCANMD_POSN                                   0x3
#define _PMD0_SCANMD_POSITION                               0x3
#define _PMD0_SCANMD_SIZE                                   0x1
#define _PMD0_SCANMD_LENGTH                                 0x1
#define _PMD0_SCANMD_MASK                                   0x8
#define _PMD0_CRCMD_POSN                                    0x4
#define _PMD0_CRCMD_POSITION                                0x4
#define _PMD0_CRCMD_SIZE                                    0x1
#define _PMD0_CRCMD_LENGTH                                  0x1
#define _PMD0_CRCMD_MASK                                    0x10
#define _PMD0_HLVDMD_POSN                                   0x5
#define _PMD0_HLVDMD_POSITION                               0x5
#define _PMD0_HLVDMD_SIZE                                   0x1
#define _PMD0_HLVDMD_LENGTH                                 0x1
#define _PMD0_HLVDMD_MASK                                   0x20
#define _PMD0_FVRMD_POSN                                    0x6
#define _PMD0_FVRMD_POSITION                                0x6
#define _PMD0_FVRMD_SIZE                                    0x1
#define _PMD0_FVRMD_LENGTH                                  0x1
#define _PMD0_FVRMD_MASK                                    0x40
#define _PMD0_SYSCMD_POSN                                   0x7
#define _PMD0_SYSCMD_POSITION                               0x7
#define _PMD0_SYSCMD_SIZE                                   0x1
#define _PMD0_SYSCMD_LENGTH                                 0x1
#define _PMD0_SYSCMD_MASK                                   0x80

// Register: PMD1
#define PMD1 PMD1
extern volatile unsigned char           PMD1                __at(0x39C1);
#ifndef _LIB_BUILD
asm("PMD1 equ 039C1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR0MD                 :1;
        unsigned TMR1MD                 :1;
        unsigned TMR2MD                 :1;
        unsigned TMR3MD                 :1;
        unsigned TMR4MD                 :1;
        unsigned TMR5MD                 :1;
        unsigned TMR6MD                 :1;
        unsigned NCO1MD                 :1;
    };
} PMD1bits_t;
extern volatile PMD1bits_t PMD1bits __at(0x39C1);
// bitfield macros
#define _PMD1_TMR0MD_POSN                                   0x0
#define _PMD1_TMR0MD_POSITION                               0x0
#define _PMD1_TMR0MD_SIZE                                   0x1
#define _PMD1_TMR0MD_LENGTH                                 0x1
#define _PMD1_TMR0MD_MASK                                   0x1
#define _PMD1_TMR1MD_POSN                                   0x1
#define _PMD1_TMR1MD_POSITION                               0x1
#define _PMD1_TMR1MD_SIZE                                   0x1
#define _PMD1_TMR1MD_LENGTH                                 0x1
#define _PMD1_TMR1MD_MASK                                   0x2
#define _PMD1_TMR2MD_POSN                                   0x2
#define _PMD1_TMR2MD_POSITION                               0x2
#define _PMD1_TMR2MD_SIZE                                   0x1
#define _PMD1_TMR2MD_LENGTH                                 0x1
#define _PMD1_TMR2MD_MASK                                   0x4
#define _PMD1_TMR3MD_POSN                                   0x3
#define _PMD1_TMR3MD_POSITION                               0x3
#define _PMD1_TMR3MD_SIZE                                   0x1
#define _PMD1_TMR3MD_LENGTH                                 0x1
#define _PMD1_TMR3MD_MASK                                   0x8
#define _PMD1_TMR4MD_POSN                                   0x4
#define _PMD1_TMR4MD_POSITION                               0x4
#define _PMD1_TMR4MD_SIZE                                   0x1
#define _PMD1_TMR4MD_LENGTH                                 0x1
#define _PMD1_TMR4MD_MASK                                   0x10
#define _PMD1_TMR5MD_POSN                                   0x5
#define _PMD1_TMR5MD_POSITION                               0x5
#define _PMD1_TMR5MD_SIZE                                   0x1
#define _PMD1_TMR5MD_LENGTH                                 0x1
#define _PMD1_TMR5MD_MASK                                   0x20
#define _PMD1_TMR6MD_POSN                                   0x6
#define _PMD1_TMR6MD_POSITION                               0x6
#define _PMD1_TMR6MD_SIZE                                   0x1
#define _PMD1_TMR6MD_LENGTH                                 0x1
#define _PMD1_TMR6MD_MASK                                   0x40
#define _PMD1_NCO1MD_POSN                                   0x7
#define _PMD1_NCO1MD_POSITION                               0x7
#define _PMD1_NCO1MD_SIZE                                   0x1
#define _PMD1_NCO1MD_LENGTH                                 0x1
#define _PMD1_NCO1MD_MASK                                   0x80

// Register: PMD2
#define PMD2 PMD2
extern volatile unsigned char           PMD2                __at(0x39C2);
#ifndef _LIB_BUILD
asm("PMD2 equ 039C2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ZCDMD                  :1;
        unsigned CMP1MD                 :1;
        unsigned CMP2MD                 :1;
        unsigned                        :2;
        unsigned ADCMD                  :1;
        unsigned DACMD                  :1;
    };
} PMD2bits_t;
extern volatile PMD2bits_t PMD2bits __at(0x39C2);
// bitfield macros
#define _PMD2_ZCDMD_POSN                                    0x0
#define _PMD2_ZCDMD_POSITION                                0x0
#define _PMD2_ZCDMD_SIZE                                    0x1
#define _PMD2_ZCDMD_LENGTH                                  0x1
#define _PMD2_ZCDMD_MASK                                    0x1
#define _PMD2_CMP1MD_POSN                                   0x1
#define _PMD2_CMP1MD_POSITION                               0x1
#define _PMD2_CMP1MD_SIZE                                   0x1
#define _PMD2_CMP1MD_LENGTH                                 0x1
#define _PMD2_CMP1MD_MASK                                   0x2
#define _PMD2_CMP2MD_POSN                                   0x2
#define _PMD2_CMP2MD_POSITION                               0x2
#define _PMD2_CMP2MD_SIZE                                   0x1
#define _PMD2_CMP2MD_LENGTH                                 0x1
#define _PMD2_CMP2MD_MASK                                   0x4
#define _PMD2_ADCMD_POSN                                    0x5
#define _PMD2_ADCMD_POSITION                                0x5
#define _PMD2_ADCMD_SIZE                                    0x1
#define _PMD2_ADCMD_LENGTH                                  0x1
#define _PMD2_ADCMD_MASK                                    0x20
#define _PMD2_DACMD_POSN                                    0x6
#define _PMD2_DACMD_POSITION                                0x6
#define _PMD2_DACMD_SIZE                                    0x1
#define _PMD2_DACMD_LENGTH                                  0x1
#define _PMD2_DACMD_MASK                                    0x40

// Register: PMD3
#define PMD3 PMD3
extern volatile unsigned char           PMD3                __at(0x39C3);
#ifndef _LIB_BUILD
asm("PMD3 equ 039C3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP1MD                 :1;
        unsigned CCP2MD                 :1;
        unsigned CCP3MD                 :1;
        unsigned CCP4MD                 :1;
        unsigned PWM5MD                 :1;
        unsigned PWM6MD                 :1;
        unsigned PWM7MD                 :1;
        unsigned PWM8MD                 :1;
    };
} PMD3bits_t;
extern volatile PMD3bits_t PMD3bits __at(0x39C3);
// bitfield macros
#define _PMD3_CCP1MD_POSN                                   0x0
#define _PMD3_CCP1MD_POSITION                               0x0
#define _PMD3_CCP1MD_SIZE                                   0x1
#define _PMD3_CCP1MD_LENGTH                                 0x1
#define _PMD3_CCP1MD_MASK                                   0x1
#define _PMD3_CCP2MD_POSN                                   0x1
#define _PMD3_CCP2MD_POSITION                               0x1
#define _PMD3_CCP2MD_SIZE                                   0x1
#define _PMD3_CCP2MD_LENGTH                                 0x1
#define _PMD3_CCP2MD_MASK                                   0x2
#define _PMD3_CCP3MD_POSN                                   0x2
#define _PMD3_CCP3MD_POSITION                               0x2
#define _PMD3_CCP3MD_SIZE                                   0x1
#define _PMD3_CCP3MD_LENGTH                                 0x1
#define _PMD3_CCP3MD_MASK                                   0x4
#define _PMD3_CCP4MD_POSN                                   0x3
#define _PMD3_CCP4MD_POSITION                               0x3
#define _PMD3_CCP4MD_SIZE                                   0x1
#define _PMD3_CCP4MD_LENGTH                                 0x1
#define _PMD3_CCP4MD_MASK                                   0x8
#define _PMD3_PWM5MD_POSN                                   0x4
#define _PMD3_PWM5MD_POSITION                               0x4
#define _PMD3_PWM5MD_SIZE                                   0x1
#define _PMD3_PWM5MD_LENGTH                                 0x1
#define _PMD3_PWM5MD_MASK                                   0x10
#define _PMD3_PWM6MD_POSN                                   0x5
#define _PMD3_PWM6MD_POSITION                               0x5
#define _PMD3_PWM6MD_SIZE                                   0x1
#define _PMD3_PWM6MD_LENGTH                                 0x1
#define _PMD3_PWM6MD_MASK                                   0x20
#define _PMD3_PWM7MD_POSN                                   0x6
#define _PMD3_PWM7MD_POSITION                               0x6
#define _PMD3_PWM7MD_SIZE                                   0x1
#define _PMD3_PWM7MD_LENGTH                                 0x1
#define _PMD3_PWM7MD_MASK                                   0x40
#define _PMD3_PWM8MD_POSN                                   0x7
#define _PMD3_PWM8MD_POSITION                               0x7
#define _PMD3_PWM8MD_SIZE                                   0x1
#define _PMD3_PWM8MD_LENGTH                                 0x1
#define _PMD3_PWM8MD_MASK                                   0x80

// Register: PMD4
#define PMD4 PMD4
extern volatile unsigned char           PMD4                __at(0x39C4);
#ifndef _LIB_BUILD
asm("PMD4 equ 039C4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :5;
        unsigned CWG1MD                 :1;
        unsigned CWG2MD                 :1;
        unsigned CWG3MD                 :1;
    };
} PMD4bits_t;
extern volatile PMD4bits_t PMD4bits __at(0x39C4);
// bitfield macros
#define _PMD4_CWG1MD_POSN                                   0x5
#define _PMD4_CWG1MD_POSITION                               0x5
#define _PMD4_CWG1MD_SIZE                                   0x1
#define _PMD4_CWG1MD_LENGTH                                 0x1
#define _PMD4_CWG1MD_MASK                                   0x20
#define _PMD4_CWG2MD_POSN                                   0x6
#define _PMD4_CWG2MD_POSITION                               0x6
#define _PMD4_CWG2MD_SIZE                                   0x1
#define _PMD4_CWG2MD_LENGTH                                 0x1
#define _PMD4_CWG2MD_MASK                                   0x40
#define _PMD4_CWG3MD_POSN                                   0x7
#define _PMD4_CWG3MD_POSITION                               0x7
#define _PMD4_CWG3MD_SIZE                                   0x1
#define _PMD4_CWG3MD_LENGTH                                 0x1
#define _PMD4_CWG3MD_MASK                                   0x80

// Register: PMD5
#define PMD5 PMD5
extern volatile unsigned char           PMD5                __at(0x39C5);
#ifndef _LIB_BUILD
asm("PMD5 equ 039C5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned I2C1MD                 :1;
        unsigned I2C2MD                 :1;
        unsigned SPI1MD                 :1;
        unsigned                        :1;
        unsigned U1MD                   :1;
        unsigned U2MD                   :1;
    };
} PMD5bits_t;
extern volatile PMD5bits_t PMD5bits __at(0x39C5);
// bitfield macros
#define _PMD5_I2C1MD_POSN                                   0x0
#define _PMD5_I2C1MD_POSITION                               0x0
#define _PMD5_I2C1MD_SIZE                                   0x1
#define _PMD5_I2C1MD_LENGTH                                 0x1
#define _PMD5_I2C1MD_MASK                                   0x1
#define _PMD5_I2C2MD_POSN                                   0x1
#define _PMD5_I2C2MD_POSITION                               0x1
#define _PMD5_I2C2MD_SIZE                                   0x1
#define _PMD5_I2C2MD_LENGTH                                 0x1
#define _PMD5_I2C2MD_MASK                                   0x2
#define _PMD5_SPI1MD_POSN                                   0x2
#define _PMD5_SPI1MD_POSITION                               0x2
#define _PMD5_SPI1MD_SIZE                                   0x1
#define _PMD5_SPI1MD_LENGTH                                 0x1
#define _PMD5_SPI1MD_MASK                                   0x4
#define _PMD5_U1MD_POSN                                     0x4
#define _PMD5_U1MD_POSITION                                 0x4
#define _PMD5_U1MD_SIZE                                     0x1
#define _PMD5_U1MD_LENGTH                                   0x1
#define _PMD5_U1MD_MASK                                     0x10
#define _PMD5_U2MD_POSN                                     0x5
#define _PMD5_U2MD_POSITION                                 0x5
#define _PMD5_U2MD_SIZE                                     0x1
#define _PMD5_U2MD_LENGTH                                   0x1
#define _PMD5_U2MD_MASK                                     0x20

// Register: PMD6
#define PMD6 PMD6
extern volatile unsigned char           PMD6                __at(0x39C6);
#ifndef _LIB_BUILD
asm("PMD6 equ 039C6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DSMMD                  :1;
        unsigned CLC1MD                 :1;
        unsigned CLC2MD                 :1;
        unsigned CLC3MD                 :1;
        unsigned CLC4MD                 :1;
        unsigned SMT1MD                 :1;
    };
} PMD6bits_t;
extern volatile PMD6bits_t PMD6bits __at(0x39C6);
// bitfield macros
#define _PMD6_DSMMD_POSN                                    0x0
#define _PMD6_DSMMD_POSITION                                0x0
#define _PMD6_DSMMD_SIZE                                    0x1
#define _PMD6_DSMMD_LENGTH                                  0x1
#define _PMD6_DSMMD_MASK                                    0x1
#define _PMD6_CLC1MD_POSN                                   0x1
#define _PMD6_CLC1MD_POSITION                               0x1
#define _PMD6_CLC1MD_SIZE                                   0x1
#define _PMD6_CLC1MD_LENGTH                                 0x1
#define _PMD6_CLC1MD_MASK                                   0x2
#define _PMD6_CLC2MD_POSN                                   0x2
#define _PMD6_CLC2MD_POSITION                               0x2
#define _PMD6_CLC2MD_SIZE                                   0x1
#define _PMD6_CLC2MD_LENGTH                                 0x1
#define _PMD6_CLC2MD_MASK                                   0x4
#define _PMD6_CLC3MD_POSN                                   0x3
#define _PMD6_CLC3MD_POSITION                               0x3
#define _PMD6_CLC3MD_SIZE                                   0x1
#define _PMD6_CLC3MD_LENGTH                                 0x1
#define _PMD6_CLC3MD_MASK                                   0x8
#define _PMD6_CLC4MD_POSN                                   0x4
#define _PMD6_CLC4MD_POSITION                               0x4
#define _PMD6_CLC4MD_SIZE                                   0x1
#define _PMD6_CLC4MD_LENGTH                                 0x1
#define _PMD6_CLC4MD_MASK                                   0x10
#define _PMD6_SMT1MD_POSN                                   0x5
#define _PMD6_SMT1MD_POSITION                               0x5
#define _PMD6_SMT1MD_SIZE                                   0x1
#define _PMD6_SMT1MD_LENGTH                                 0x1
#define _PMD6_SMT1MD_MASK                                   0x20

// Register: PMD7
#define PMD7 PMD7
extern volatile unsigned char           PMD7                __at(0x39C7);
#ifndef _LIB_BUILD
asm("PMD7 equ 039C7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DMA1MD                 :1;
        unsigned DMA2MD                 :1;
    };
} PMD7bits_t;
extern volatile PMD7bits_t PMD7bits __at(0x39C7);
// bitfield macros
#define _PMD7_DMA1MD_POSN                                   0x0
#define _PMD7_DMA1MD_POSITION                               0x0
#define _PMD7_DMA1MD_SIZE                                   0x1
#define _PMD7_DMA1MD_LENGTH                                 0x1
#define _PMD7_DMA1MD_MASK                                   0x1
#define _PMD7_DMA2MD_POSN                                   0x1
#define _PMD7_DMA2MD_POSITION                               0x1
#define _PMD7_DMA2MD_SIZE                                   0x1
#define _PMD7_DMA2MD_LENGTH                                 0x1
#define _PMD7_DMA2MD_MASK                                   0x2

// Register: BORCON
#define BORCON BORCON
extern volatile unsigned char           BORCON              __at(0x39D0);
#ifndef _LIB_BUILD
asm("BORCON equ 039D0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BORRDY                 :1;
        unsigned                        :6;
        unsigned SBOREN                 :1;
    };
} BORCONbits_t;
extern volatile BORCONbits_t BORCONbits __at(0x39D0);
// bitfield macros
#define _BORCON_BORRDY_POSN                                 0x0
#define _BORCON_BORRDY_POSITION                             0x0
#define _BORCON_BORRDY_SIZE                                 0x1
#define _BORCON_BORRDY_LENGTH                               0x1
#define _BORCON_BORRDY_MASK                                 0x1
#define _BORCON_SBOREN_POSN                                 0x7
#define _BORCON_SBOREN_POSITION                             0x7
#define _BORCON_SBOREN_SIZE                                 0x1
#define _BORCON_SBOREN_LENGTH                               0x1
#define _BORCON_SBOREN_MASK                                 0x80

// Register: CPUDOZE
#define CPUDOZE CPUDOZE
extern volatile unsigned char           CPUDOZE             __at(0x39D8);
#ifndef _LIB_BUILD
asm("CPUDOZE equ 039D8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DOZE                   :3;
        unsigned                        :1;
        unsigned DOE                    :1;
        unsigned ROI                    :1;
        unsigned DOZEN                  :1;
        unsigned IDLEN                  :1;
    };
    struct {
        unsigned DOZE0                  :1;
        unsigned DOZE1                  :1;
        unsigned DOZE2                  :1;
    };
} CPUDOZEbits_t;
extern volatile CPUDOZEbits_t CPUDOZEbits __at(0x39D8);
// bitfield macros
#define _CPUDOZE_DOZE_POSN                                  0x0
#define _CPUDOZE_DOZE_POSITION                              0x0
#define _CPUDOZE_DOZE_SIZE                                  0x3
#define _CPUDOZE_DOZE_LENGTH                                0x3
#define _CPUDOZE_DOZE_MASK                                  0x7
#define _CPUDOZE_DOE_POSN                                   0x4
#define _CPUDOZE_DOE_POSITION                               0x4
#define _CPUDOZE_DOE_SIZE                                   0x1
#define _CPUDOZE_DOE_LENGTH                                 0x1
#define _CPUDOZE_DOE_MASK                                   0x10
#define _CPUDOZE_ROI_POSN                                   0x5
#define _CPUDOZE_ROI_POSITION                               0x5
#define _CPUDOZE_ROI_SIZE                                   0x1
#define _CPUDOZE_ROI_LENGTH                                 0x1
#define _CPUDOZE_ROI_MASK                                   0x20
#define _CPUDOZE_DOZEN_POSN                                 0x6
#define _CPUDOZE_DOZEN_POSITION                             0x6
#define _CPUDOZE_DOZEN_SIZE                                 0x1
#define _CPUDOZE_DOZEN_LENGTH                               0x1
#define _CPUDOZE_DOZEN_MASK                                 0x40
#define _CPUDOZE_IDLEN_POSN                                 0x7
#define _CPUDOZE_IDLEN_POSITION                             0x7
#define _CPUDOZE_IDLEN_SIZE                                 0x1
#define _CPUDOZE_IDLEN_LENGTH                               0x1
#define _CPUDOZE_IDLEN_MASK                                 0x80
#define _CPUDOZE_DOZE0_POSN                                 0x0
#define _CPUDOZE_DOZE0_POSITION                             0x0
#define _CPUDOZE_DOZE0_SIZE                                 0x1
#define _CPUDOZE_DOZE0_LENGTH                               0x1
#define _CPUDOZE_DOZE0_MASK                                 0x1
#define _CPUDOZE_DOZE1_POSN                                 0x1
#define _CPUDOZE_DOZE1_POSITION                             0x1
#define _CPUDOZE_DOZE1_SIZE                                 0x1
#define _CPUDOZE_DOZE1_LENGTH                               0x1
#define _CPUDOZE_DOZE1_MASK                                 0x2
#define _CPUDOZE_DOZE2_POSN                                 0x2
#define _CPUDOZE_DOZE2_POSITION                             0x2
#define _CPUDOZE_DOZE2_SIZE                                 0x1
#define _CPUDOZE_DOZE2_LENGTH                               0x1
#define _CPUDOZE_DOZE2_MASK                                 0x4

// Register: OSCCON1
#define OSCCON1 OSCCON1
extern volatile unsigned char           OSCCON1             __at(0x39D9);
#ifndef _LIB_BUILD
asm("OSCCON1 equ 039D9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NDIV                   :4;
        unsigned NOSC                   :3;
    };
    struct {
        unsigned NDIV0                  :1;
        unsigned NDIV1                  :1;
        unsigned NDIV2                  :1;
        unsigned NDIV3                  :1;
        unsigned NOSC0                  :1;
        unsigned NOSC1                  :1;
        unsigned NOSC2                  :1;
    };
} OSCCON1bits_t;
extern volatile OSCCON1bits_t OSCCON1bits __at(0x39D9);
// bitfield macros
#define _OSCCON1_NDIV_POSN                                  0x0
#define _OSCCON1_NDIV_POSITION                              0x0
#define _OSCCON1_NDIV_SIZE                                  0x4
#define _OSCCON1_NDIV_LENGTH                                0x4
#define _OSCCON1_NDIV_MASK                                  0xF
#define _OSCCON1_NOSC_POSN                                  0x4
#define _OSCCON1_NOSC_POSITION                              0x4
#define _OSCCON1_NOSC_SIZE                                  0x3
#define _OSCCON1_NOSC_LENGTH                                0x3
#define _OSCCON1_NOSC_MASK                                  0x70
#define _OSCCON1_NDIV0_POSN                                 0x0
#define _OSCCON1_NDIV0_POSITION                             0x0
#define _OSCCON1_NDIV0_SIZE                                 0x1
#define _OSCCON1_NDIV0_LENGTH                               0x1
#define _OSCCON1_NDIV0_MASK                                 0x1
#define _OSCCON1_NDIV1_POSN                                 0x1
#define _OSCCON1_NDIV1_POSITION                             0x1
#define _OSCCON1_NDIV1_SIZE                                 0x1
#define _OSCCON1_NDIV1_LENGTH                               0x1
#define _OSCCON1_NDIV1_MASK                                 0x2
#define _OSCCON1_NDIV2_POSN                                 0x2
#define _OSCCON1_NDIV2_POSITION                             0x2
#define _OSCCON1_NDIV2_SIZE                                 0x1
#define _OSCCON1_NDIV2_LENGTH                               0x1
#define _OSCCON1_NDIV2_MASK                                 0x4
#define _OSCCON1_NDIV3_POSN                                 0x3
#define _OSCCON1_NDIV3_POSITION                             0x3
#define _OSCCON1_NDIV3_SIZE                                 0x1
#define _OSCCON1_NDIV3_LENGTH                               0x1
#define _OSCCON1_NDIV3_MASK                                 0x8
#define _OSCCON1_NOSC0_POSN                                 0x4
#define _OSCCON1_NOSC0_POSITION                             0x4
#define _OSCCON1_NOSC0_SIZE                                 0x1
#define _OSCCON1_NOSC0_LENGTH                               0x1
#define _OSCCON1_NOSC0_MASK                                 0x10
#define _OSCCON1_NOSC1_POSN                                 0x5
#define _OSCCON1_NOSC1_POSITION                             0x5
#define _OSCCON1_NOSC1_SIZE                                 0x1
#define _OSCCON1_NOSC1_LENGTH                               0x1
#define _OSCCON1_NOSC1_MASK                                 0x20
#define _OSCCON1_NOSC2_POSN                                 0x6
#define _OSCCON1_NOSC2_POSITION                             0x6
#define _OSCCON1_NOSC2_SIZE                                 0x1
#define _OSCCON1_NOSC2_LENGTH                               0x1
#define _OSCCON1_NOSC2_MASK                                 0x40

// Register: OSCCON2
#define OSCCON2 OSCCON2
extern volatile unsigned char           OSCCON2             __at(0x39DA);
#ifndef _LIB_BUILD
asm("OSCCON2 equ 039DAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CDIV                   :4;
        unsigned COSC                   :3;
    };
    struct {
        unsigned CDIV0                  :1;
        unsigned CDIV1                  :1;
        unsigned CDIV2                  :1;
        unsigned CDIV3                  :1;
        unsigned COSC0                  :1;
        unsigned COSC1                  :1;
        unsigned COSC2                  :1;
    };
} OSCCON2bits_t;
extern volatile OSCCON2bits_t OSCCON2bits __at(0x39DA);
// bitfield macros
#define _OSCCON2_CDIV_POSN                                  0x0
#define _OSCCON2_CDIV_POSITION                              0x0
#define _OSCCON2_CDIV_SIZE                                  0x4
#define _OSCCON2_CDIV_LENGTH                                0x4
#define _OSCCON2_CDIV_MASK                                  0xF
#define _OSCCON2_COSC_POSN                                  0x4
#define _OSCCON2_COSC_POSITION                              0x4
#define _OSCCON2_COSC_SIZE                                  0x3
#define _OSCCON2_COSC_LENGTH                                0x3
#define _OSCCON2_COSC_MASK                                  0x70
#define _OSCCON2_CDIV0_POSN                                 0x0
#define _OSCCON2_CDIV0_POSITION                             0x0
#define _OSCCON2_CDIV0_SIZE                                 0x1
#define _OSCCON2_CDIV0_LENGTH                               0x1
#define _OSCCON2_CDIV0_MASK                                 0x1
#define _OSCCON2_CDIV1_POSN                                 0x1
#define _OSCCON2_CDIV1_POSITION                             0x1
#define _OSCCON2_CDIV1_SIZE                                 0x1
#define _OSCCON2_CDIV1_LENGTH                               0x1
#define _OSCCON2_CDIV1_MASK                                 0x2
#define _OSCCON2_CDIV2_POSN                                 0x2
#define _OSCCON2_CDIV2_POSITION                             0x2
#define _OSCCON2_CDIV2_SIZE                                 0x1
#define _OSCCON2_CDIV2_LENGTH                               0x1
#define _OSCCON2_CDIV2_MASK                                 0x4
#define _OSCCON2_CDIV3_POSN                                 0x3
#define _OSCCON2_CDIV3_POSITION                             0x3
#define _OSCCON2_CDIV3_SIZE                                 0x1
#define _OSCCON2_CDIV3_LENGTH                               0x1
#define _OSCCON2_CDIV3_MASK                                 0x8
#define _OSCCON2_COSC0_POSN                                 0x4
#define _OSCCON2_COSC0_POSITION                             0x4
#define _OSCCON2_COSC0_SIZE                                 0x1
#define _OSCCON2_COSC0_LENGTH                               0x1
#define _OSCCON2_COSC0_MASK                                 0x10
#define _OSCCON2_COSC1_POSN                                 0x5
#define _OSCCON2_COSC1_POSITION                             0x5
#define _OSCCON2_COSC1_SIZE                                 0x1
#define _OSCCON2_COSC1_LENGTH                               0x1
#define _OSCCON2_COSC1_MASK                                 0x20
#define _OSCCON2_COSC2_POSN                                 0x6
#define _OSCCON2_COSC2_POSITION                             0x6
#define _OSCCON2_COSC2_SIZE                                 0x1
#define _OSCCON2_COSC2_LENGTH                               0x1
#define _OSCCON2_COSC2_MASK                                 0x40

// Register: OSCCON3
#define OSCCON3 OSCCON3
extern volatile unsigned char           OSCCON3             __at(0x39DB);
#ifndef _LIB_BUILD
asm("OSCCON3 equ 039DBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :3;
        unsigned NOSCR                  :1;
        unsigned ORDY                   :1;
        unsigned                        :1;
        unsigned SOSCPWR                :1;
        unsigned CSWHOLD                :1;
    };
} OSCCON3bits_t;
extern volatile OSCCON3bits_t OSCCON3bits __at(0x39DB);
// bitfield macros
#define _OSCCON3_NOSCR_POSN                                 0x3
#define _OSCCON3_NOSCR_POSITION                             0x3
#define _OSCCON3_NOSCR_SIZE                                 0x1
#define _OSCCON3_NOSCR_LENGTH                               0x1
#define _OSCCON3_NOSCR_MASK                                 0x8
#define _OSCCON3_ORDY_POSN                                  0x4
#define _OSCCON3_ORDY_POSITION                              0x4
#define _OSCCON3_ORDY_SIZE                                  0x1
#define _OSCCON3_ORDY_LENGTH                                0x1
#define _OSCCON3_ORDY_MASK                                  0x10
#define _OSCCON3_SOSCPWR_POSN                               0x6
#define _OSCCON3_SOSCPWR_POSITION                           0x6
#define _OSCCON3_SOSCPWR_SIZE                               0x1
#define _OSCCON3_SOSCPWR_LENGTH                             0x1
#define _OSCCON3_SOSCPWR_MASK                               0x40
#define _OSCCON3_CSWHOLD_POSN                               0x7
#define _OSCCON3_CSWHOLD_POSITION                           0x7
#define _OSCCON3_CSWHOLD_SIZE                               0x1
#define _OSCCON3_CSWHOLD_LENGTH                             0x1
#define _OSCCON3_CSWHOLD_MASK                               0x80

// Register: OSCSTAT
#define OSCSTAT OSCSTAT
extern volatile unsigned char           OSCSTAT             __at(0x39DC);
#ifndef _LIB_BUILD
asm("OSCSTAT equ 039DCh");
#endif
// aliases
extern volatile unsigned char           OSCSTAT1            __at(0x39DC);
#ifndef _LIB_BUILD
asm("OSCSTAT1 equ 039DCh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PLLR                   :1;
        unsigned                        :1;
        unsigned ADOR                   :1;
        unsigned SOR                    :1;
        unsigned LFOR                   :1;
        unsigned MFOR                   :1;
        unsigned HFOR                   :1;
        unsigned EXTOR                  :1;
    };
} OSCSTATbits_t;
extern volatile OSCSTATbits_t OSCSTATbits __at(0x39DC);
// bitfield macros
#define _OSCSTAT_PLLR_POSN                                  0x0
#define _OSCSTAT_PLLR_POSITION                              0x0
#define _OSCSTAT_PLLR_SIZE                                  0x1
#define _OSCSTAT_PLLR_LENGTH                                0x1
#define _OSCSTAT_PLLR_MASK                                  0x1
#define _OSCSTAT_ADOR_POSN                                  0x2
#define _OSCSTAT_ADOR_POSITION                              0x2
#define _OSCSTAT_ADOR_SIZE                                  0x1
#define _OSCSTAT_ADOR_LENGTH                                0x1
#define _OSCSTAT_ADOR_MASK                                  0x4
#define _OSCSTAT_SOR_POSN                                   0x3
#define _OSCSTAT_SOR_POSITION                               0x3
#define _OSCSTAT_SOR_SIZE                                   0x1
#define _OSCSTAT_SOR_LENGTH                                 0x1
#define _OSCSTAT_SOR_MASK                                   0x8
#define _OSCSTAT_LFOR_POSN                                  0x4
#define _OSCSTAT_LFOR_POSITION                              0x4
#define _OSCSTAT_LFOR_SIZE                                  0x1
#define _OSCSTAT_LFOR_LENGTH                                0x1
#define _OSCSTAT_LFOR_MASK                                  0x10
#define _OSCSTAT_MFOR_POSN                                  0x5
#define _OSCSTAT_MFOR_POSITION                              0x5
#define _OSCSTAT_MFOR_SIZE                                  0x1
#define _OSCSTAT_MFOR_LENGTH                                0x1
#define _OSCSTAT_MFOR_MASK                                  0x20
#define _OSCSTAT_HFOR_POSN                                  0x6
#define _OSCSTAT_HFOR_POSITION                              0x6
#define _OSCSTAT_HFOR_SIZE                                  0x1
#define _OSCSTAT_HFOR_LENGTH                                0x1
#define _OSCSTAT_HFOR_MASK                                  0x40
#define _OSCSTAT_EXTOR_POSN                                 0x7
#define _OSCSTAT_EXTOR_POSITION                             0x7
#define _OSCSTAT_EXTOR_SIZE                                 0x1
#define _OSCSTAT_EXTOR_LENGTH                               0x1
#define _OSCSTAT_EXTOR_MASK                                 0x80
// alias bitfield definitions
typedef union {
    struct {
        unsigned PLLR                   :1;
        unsigned                        :1;
        unsigned ADOR                   :1;
        unsigned SOR                    :1;
        unsigned LFOR                   :1;
        unsigned MFOR                   :1;
        unsigned HFOR                   :1;
        unsigned EXTOR                  :1;
    };
} OSCSTAT1bits_t;
extern volatile OSCSTAT1bits_t OSCSTAT1bits __at(0x39DC);
// bitfield macros
#define _OSCSTAT1_PLLR_POSN                                 0x0
#define _OSCSTAT1_PLLR_POSITION                             0x0
#define _OSCSTAT1_PLLR_SIZE                                 0x1
#define _OSCSTAT1_PLLR_LENGTH                               0x1
#define _OSCSTAT1_PLLR_MASK                                 0x1
#define _OSCSTAT1_ADOR_POSN                                 0x2
#define _OSCSTAT1_ADOR_POSITION                             0x2
#define _OSCSTAT1_ADOR_SIZE                                 0x1
#define _OSCSTAT1_ADOR_LENGTH                               0x1
#define _OSCSTAT1_ADOR_MASK                                 0x4
#define _OSCSTAT1_SOR_POSN                                  0x3
#define _OSCSTAT1_SOR_POSITION                              0x3
#define _OSCSTAT1_SOR_SIZE                                  0x1
#define _OSCSTAT1_SOR_LENGTH                                0x1
#define _OSCSTAT1_SOR_MASK                                  0x8
#define _OSCSTAT1_LFOR_POSN                                 0x4
#define _OSCSTAT1_LFOR_POSITION                             0x4
#define _OSCSTAT1_LFOR_SIZE                                 0x1
#define _OSCSTAT1_LFOR_LENGTH                               0x1
#define _OSCSTAT1_LFOR_MASK                                 0x10
#define _OSCSTAT1_MFOR_POSN                                 0x5
#define _OSCSTAT1_MFOR_POSITION                             0x5
#define _OSCSTAT1_MFOR_SIZE                                 0x1
#define _OSCSTAT1_MFOR_LENGTH                               0x1
#define _OSCSTAT1_MFOR_MASK                                 0x20
#define _OSCSTAT1_HFOR_POSN                                 0x6
#define _OSCSTAT1_HFOR_POSITION                             0x6
#define _OSCSTAT1_HFOR_SIZE                                 0x1
#define _OSCSTAT1_HFOR_LENGTH                               0x1
#define _OSCSTAT1_HFOR_MASK                                 0x40
#define _OSCSTAT1_EXTOR_POSN                                0x7
#define _OSCSTAT1_EXTOR_POSITION                            0x7
#define _OSCSTAT1_EXTOR_SIZE                                0x1
#define _OSCSTAT1_EXTOR_LENGTH                              0x1
#define _OSCSTAT1_EXTOR_MASK                                0x80

// Register: OSCEN
#define OSCEN OSCEN
extern volatile unsigned char           OSCEN               __at(0x39DD);
#ifndef _LIB_BUILD
asm("OSCEN equ 039DDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned ADOEN                  :1;
        unsigned SOSCEN                 :1;
        unsigned LFOEN                  :1;
        unsigned MFOEN                  :1;
        unsigned HFOEN                  :1;
        unsigned EXTOEN                 :1;
    };
} OSCENbits_t;
extern volatile OSCENbits_t OSCENbits __at(0x39DD);
// bitfield macros
#define _OSCEN_ADOEN_POSN                                   0x2
#define _OSCEN_ADOEN_POSITION                               0x2
#define _OSCEN_ADOEN_SIZE                                   0x1
#define _OSCEN_ADOEN_LENGTH                                 0x1
#define _OSCEN_ADOEN_MASK                                   0x4
#define _OSCEN_SOSCEN_POSN                                  0x3
#define _OSCEN_SOSCEN_POSITION                              0x3
#define _OSCEN_SOSCEN_SIZE                                  0x1
#define _OSCEN_SOSCEN_LENGTH                                0x1
#define _OSCEN_SOSCEN_MASK                                  0x8
#define _OSCEN_LFOEN_POSN                                   0x4
#define _OSCEN_LFOEN_POSITION                               0x4
#define _OSCEN_LFOEN_SIZE                                   0x1
#define _OSCEN_LFOEN_LENGTH                                 0x1
#define _OSCEN_LFOEN_MASK                                   0x10
#define _OSCEN_MFOEN_POSN                                   0x5
#define _OSCEN_MFOEN_POSITION                               0x5
#define _OSCEN_MFOEN_SIZE                                   0x1
#define _OSCEN_MFOEN_LENGTH                                 0x1
#define _OSCEN_MFOEN_MASK                                   0x20
#define _OSCEN_HFOEN_POSN                                   0x6
#define _OSCEN_HFOEN_POSITION                               0x6
#define _OSCEN_HFOEN_SIZE                                   0x1
#define _OSCEN_HFOEN_LENGTH                                 0x1
#define _OSCEN_HFOEN_MASK                                   0x40
#define _OSCEN_EXTOEN_POSN                                  0x7
#define _OSCEN_EXTOEN_POSITION                              0x7
#define _OSCEN_EXTOEN_SIZE                                  0x1
#define _OSCEN_EXTOEN_LENGTH                                0x1
#define _OSCEN_EXTOEN_MASK                                  0x80

// Register: OSCTUNE
#define OSCTUNE OSCTUNE
extern volatile unsigned char           OSCTUNE             __at(0x39DE);
#ifndef _LIB_BUILD
asm("OSCTUNE equ 039DEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TUN                    :6;
    };
    struct {
        unsigned TUN0                   :1;
        unsigned TUN1                   :1;
        unsigned TUN2                   :1;
        unsigned TUN3                   :1;
        unsigned TUN4                   :1;
        unsigned TUN5                   :1;
    };
    struct {
        unsigned HFTUN                  :6;
    };
    struct {
        unsigned HFTUN0                 :1;
        unsigned HFTUN1                 :1;
        unsigned HFTUN2                 :1;
        unsigned HFTUN3                 :1;
        unsigned HFTUN4                 :1;
        unsigned HFTUN5                 :1;
    };
} OSCTUNEbits_t;
extern volatile OSCTUNEbits_t OSCTUNEbits __at(0x39DE);
// bitfield macros
#define _OSCTUNE_TUN_POSN                                   0x0
#define _OSCTUNE_TUN_POSITION                               0x0
#define _OSCTUNE_TUN_SIZE                                   0x6
#define _OSCTUNE_TUN_LENGTH                                 0x6
#define _OSCTUNE_TUN_MASK                                   0x3F
#define _OSCTUNE_TUN0_POSN                                  0x0
#define _OSCTUNE_TUN0_POSITION                              0x0
#define _OSCTUNE_TUN0_SIZE                                  0x1
#define _OSCTUNE_TUN0_LENGTH                                0x1
#define _OSCTUNE_TUN0_MASK                                  0x1
#define _OSCTUNE_TUN1_POSN                                  0x1
#define _OSCTUNE_TUN1_POSITION                              0x1
#define _OSCTUNE_TUN1_SIZE                                  0x1
#define _OSCTUNE_TUN1_LENGTH                                0x1
#define _OSCTUNE_TUN1_MASK                                  0x2
#define _OSCTUNE_TUN2_POSN                                  0x2
#define _OSCTUNE_TUN2_POSITION                              0x2
#define _OSCTUNE_TUN2_SIZE                                  0x1
#define _OSCTUNE_TUN2_LENGTH                                0x1
#define _OSCTUNE_TUN2_MASK                                  0x4
#define _OSCTUNE_TUN3_POSN                                  0x3
#define _OSCTUNE_TUN3_POSITION                              0x3
#define _OSCTUNE_TUN3_SIZE                                  0x1
#define _OSCTUNE_TUN3_LENGTH                                0x1
#define _OSCTUNE_TUN3_MASK                                  0x8
#define _OSCTUNE_TUN4_POSN                                  0x4
#define _OSCTUNE_TUN4_POSITION                              0x4
#define _OSCTUNE_TUN4_SIZE                                  0x1
#define _OSCTUNE_TUN4_LENGTH                                0x1
#define _OSCTUNE_TUN4_MASK                                  0x10
#define _OSCTUNE_TUN5_POSN                                  0x5
#define _OSCTUNE_TUN5_POSITION                              0x5
#define _OSCTUNE_TUN5_SIZE                                  0x1
#define _OSCTUNE_TUN5_LENGTH                                0x1
#define _OSCTUNE_TUN5_MASK                                  0x20
#define _OSCTUNE_HFTUN_POSN                                 0x0
#define _OSCTUNE_HFTUN_POSITION                             0x0
#define _OSCTUNE_HFTUN_SIZE                                 0x6
#define _OSCTUNE_HFTUN_LENGTH                               0x6
#define _OSCTUNE_HFTUN_MASK                                 0x3F
#define _OSCTUNE_HFTUN0_POSN                                0x0
#define _OSCTUNE_HFTUN0_POSITION                            0x0
#define _OSCTUNE_HFTUN0_SIZE                                0x1
#define _OSCTUNE_HFTUN0_LENGTH                              0x1
#define _OSCTUNE_HFTUN0_MASK                                0x1
#define _OSCTUNE_HFTUN1_POSN                                0x1
#define _OSCTUNE_HFTUN1_POSITION                            0x1
#define _OSCTUNE_HFTUN1_SIZE                                0x1
#define _OSCTUNE_HFTUN1_LENGTH                              0x1
#define _OSCTUNE_HFTUN1_MASK                                0x2
#define _OSCTUNE_HFTUN2_POSN                                0x2
#define _OSCTUNE_HFTUN2_POSITION                            0x2
#define _OSCTUNE_HFTUN2_SIZE                                0x1
#define _OSCTUNE_HFTUN2_LENGTH                              0x1
#define _OSCTUNE_HFTUN2_MASK                                0x4
#define _OSCTUNE_HFTUN3_POSN                                0x3
#define _OSCTUNE_HFTUN3_POSITION                            0x3
#define _OSCTUNE_HFTUN3_SIZE                                0x1
#define _OSCTUNE_HFTUN3_LENGTH                              0x1
#define _OSCTUNE_HFTUN3_MASK                                0x8
#define _OSCTUNE_HFTUN4_POSN                                0x4
#define _OSCTUNE_HFTUN4_POSITION                            0x4
#define _OSCTUNE_HFTUN4_SIZE                                0x1
#define _OSCTUNE_HFTUN4_LENGTH                              0x1
#define _OSCTUNE_HFTUN4_MASK                                0x10
#define _OSCTUNE_HFTUN5_POSN                                0x5
#define _OSCTUNE_HFTUN5_POSITION                            0x5
#define _OSCTUNE_HFTUN5_SIZE                                0x1
#define _OSCTUNE_HFTUN5_LENGTH                              0x1
#define _OSCTUNE_HFTUN5_MASK                                0x20

// Register: OSCFRQ
#define OSCFRQ OSCFRQ
extern volatile unsigned char           OSCFRQ              __at(0x39DF);
#ifndef _LIB_BUILD
asm("OSCFRQ equ 039DFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FRQ                    :4;
    };
    struct {
        unsigned FRQ0                   :1;
        unsigned FRQ1                   :1;
        unsigned FRQ2                   :1;
        unsigned FRQ3                   :1;
    };
    struct {
        unsigned HFFRQ                  :4;
    };
    struct {
        unsigned HFFRQ0                 :1;
        unsigned HFFRQ1                 :1;
        unsigned HFFRQ2                 :1;
        unsigned HFFRQ3                 :1;
    };
} OSCFRQbits_t;
extern volatile OSCFRQbits_t OSCFRQbits __at(0x39DF);
// bitfield macros
#define _OSCFRQ_FRQ_POSN                                    0x0
#define _OSCFRQ_FRQ_POSITION                                0x0
#define _OSCFRQ_FRQ_SIZE                                    0x4
#define _OSCFRQ_FRQ_LENGTH                                  0x4
#define _OSCFRQ_FRQ_MASK                                    0xF
#define _OSCFRQ_FRQ0_POSN                                   0x0
#define _OSCFRQ_FRQ0_POSITION                               0x0
#define _OSCFRQ_FRQ0_SIZE                                   0x1
#define _OSCFRQ_FRQ0_LENGTH                                 0x1
#define _OSCFRQ_FRQ0_MASK                                   0x1
#define _OSCFRQ_FRQ1_POSN                                   0x1
#define _OSCFRQ_FRQ1_POSITION                               0x1
#define _OSCFRQ_FRQ1_SIZE                                   0x1
#define _OSCFRQ_FRQ1_LENGTH                                 0x1
#define _OSCFRQ_FRQ1_MASK                                   0x2
#define _OSCFRQ_FRQ2_POSN                                   0x2
#define _OSCFRQ_FRQ2_POSITION                               0x2
#define _OSCFRQ_FRQ2_SIZE                                   0x1
#define _OSCFRQ_FRQ2_LENGTH                                 0x1
#define _OSCFRQ_FRQ2_MASK                                   0x4
#define _OSCFRQ_FRQ3_POSN                                   0x3
#define _OSCFRQ_FRQ3_POSITION                               0x3
#define _OSCFRQ_FRQ3_SIZE                                   0x1
#define _OSCFRQ_FRQ3_LENGTH                                 0x1
#define _OSCFRQ_FRQ3_MASK                                   0x8
#define _OSCFRQ_HFFRQ_POSN                                  0x0
#define _OSCFRQ_HFFRQ_POSITION                              0x0
#define _OSCFRQ_HFFRQ_SIZE                                  0x4
#define _OSCFRQ_HFFRQ_LENGTH                                0x4
#define _OSCFRQ_HFFRQ_MASK                                  0xF
#define _OSCFRQ_HFFRQ0_POSN                                 0x0
#define _OSCFRQ_HFFRQ0_POSITION                             0x0
#define _OSCFRQ_HFFRQ0_SIZE                                 0x1
#define _OSCFRQ_HFFRQ0_LENGTH                               0x1
#define _OSCFRQ_HFFRQ0_MASK                                 0x1
#define _OSCFRQ_HFFRQ1_POSN                                 0x1
#define _OSCFRQ_HFFRQ1_POSITION                             0x1
#define _OSCFRQ_HFFRQ1_SIZE                                 0x1
#define _OSCFRQ_HFFRQ1_LENGTH                               0x1
#define _OSCFRQ_HFFRQ1_MASK                                 0x2
#define _OSCFRQ_HFFRQ2_POSN                                 0x2
#define _OSCFRQ_HFFRQ2_POSITION                             0x2
#define _OSCFRQ_HFFRQ2_SIZE                                 0x1
#define _OSCFRQ_HFFRQ2_LENGTH                               0x1
#define _OSCFRQ_HFFRQ2_MASK                                 0x4
#define _OSCFRQ_HFFRQ3_POSN                                 0x3
#define _OSCFRQ_HFFRQ3_POSITION                             0x3
#define _OSCFRQ_HFFRQ3_SIZE                                 0x1
#define _OSCFRQ_HFFRQ3_LENGTH                               0x1
#define _OSCFRQ_HFFRQ3_MASK                                 0x8

// Register: NVMADRL
#define NVMADRL NVMADRL
extern volatile unsigned char           NVMADRL             __at(0x39E0);
#ifndef _LIB_BUILD
asm("NVMADRL equ 039E0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADR                    :8;
    };
    struct {
        unsigned ADR0                   :1;
        unsigned ADR1                   :1;
        unsigned ADR2                   :1;
        unsigned ADR3                   :1;
        unsigned ADR4                   :1;
        unsigned ADR5                   :1;
        unsigned ADR6                   :1;
        unsigned ADR7                   :1;
    };
    struct {
        unsigned NVMADR                 :8;
    };
    struct {
        unsigned NVMADR0                :1;
        unsigned NVMADR1                :1;
        unsigned NVMADR2                :1;
        unsigned NVMADR3                :1;
        unsigned NVMADR4                :1;
        unsigned NVMADR5                :1;
        unsigned NVMADR6                :1;
        unsigned NVMADR7                :1;
    };
} NVMADRLbits_t;
extern volatile NVMADRLbits_t NVMADRLbits __at(0x39E0);
// bitfield macros
#define _NVMADRL_ADR_POSN                                   0x0
#define _NVMADRL_ADR_POSITION                               0x0
#define _NVMADRL_ADR_SIZE                                   0x8
#define _NVMADRL_ADR_LENGTH                                 0x8
#define _NVMADRL_ADR_MASK                                   0xFF
#define _NVMADRL_ADR0_POSN                                  0x0
#define _NVMADRL_ADR0_POSITION                              0x0
#define _NVMADRL_ADR0_SIZE                                  0x1
#define _NVMADRL_ADR0_LENGTH                                0x1
#define _NVMADRL_ADR0_MASK                                  0x1
#define _NVMADRL_ADR1_POSN                                  0x1
#define _NVMADRL_ADR1_POSITION                              0x1
#define _NVMADRL_ADR1_SIZE                                  0x1
#define _NVMADRL_ADR1_LENGTH                                0x1
#define _NVMADRL_ADR1_MASK                                  0x2
#define _NVMADRL_ADR2_POSN                                  0x2
#define _NVMADRL_ADR2_POSITION                              0x2
#define _NVMADRL_ADR2_SIZE                                  0x1
#define _NVMADRL_ADR2_LENGTH                                0x1
#define _NVMADRL_ADR2_MASK                                  0x4
#define _NVMADRL_ADR3_POSN                                  0x3
#define _NVMADRL_ADR3_POSITION                              0x3
#define _NVMADRL_ADR3_SIZE                                  0x1
#define _NVMADRL_ADR3_LENGTH                                0x1
#define _NVMADRL_ADR3_MASK                                  0x8
#define _NVMADRL_ADR4_POSN                                  0x4
#define _NVMADRL_ADR4_POSITION                              0x4
#define _NVMADRL_ADR4_SIZE                                  0x1
#define _NVMADRL_ADR4_LENGTH                                0x1
#define _NVMADRL_ADR4_MASK                                  0x10
#define _NVMADRL_ADR5_POSN                                  0x5
#define _NVMADRL_ADR5_POSITION                              0x5
#define _NVMADRL_ADR5_SIZE                                  0x1
#define _NVMADRL_ADR5_LENGTH                                0x1
#define _NVMADRL_ADR5_MASK                                  0x20
#define _NVMADRL_ADR6_POSN                                  0x6
#define _NVMADRL_ADR6_POSITION                              0x6
#define _NVMADRL_ADR6_SIZE                                  0x1
#define _NVMADRL_ADR6_LENGTH                                0x1
#define _NVMADRL_ADR6_MASK                                  0x40
#define _NVMADRL_ADR7_POSN                                  0x7
#define _NVMADRL_ADR7_POSITION                              0x7
#define _NVMADRL_ADR7_SIZE                                  0x1
#define _NVMADRL_ADR7_LENGTH                                0x1
#define _NVMADRL_ADR7_MASK                                  0x80
#define _NVMADRL_NVMADR_POSN                                0x0
#define _NVMADRL_NVMADR_POSITION                            0x0
#define _NVMADRL_NVMADR_SIZE                                0x8
#define _NVMADRL_NVMADR_LENGTH                              0x8
#define _NVMADRL_NVMADR_MASK                                0xFF
#define _NVMADRL_NVMADR0_POSN                               0x0
#define _NVMADRL_NVMADR0_POSITION                           0x0
#define _NVMADRL_NVMADR0_SIZE                               0x1
#define _NVMADRL_NVMADR0_LENGTH                             0x1
#define _NVMADRL_NVMADR0_MASK                               0x1
#define _NVMADRL_NVMADR1_POSN                               0x1
#define _NVMADRL_NVMADR1_POSITION                           0x1
#define _NVMADRL_NVMADR1_SIZE                               0x1
#define _NVMADRL_NVMADR1_LENGTH                             0x1
#define _NVMADRL_NVMADR1_MASK                               0x2
#define _NVMADRL_NVMADR2_POSN                               0x2
#define _NVMADRL_NVMADR2_POSITION                           0x2
#define _NVMADRL_NVMADR2_SIZE                               0x1
#define _NVMADRL_NVMADR2_LENGTH                             0x1
#define _NVMADRL_NVMADR2_MASK                               0x4
#define _NVMADRL_NVMADR3_POSN                               0x3
#define _NVMADRL_NVMADR3_POSITION                           0x3
#define _NVMADRL_NVMADR3_SIZE                               0x1
#define _NVMADRL_NVMADR3_LENGTH                             0x1
#define _NVMADRL_NVMADR3_MASK                               0x8
#define _NVMADRL_NVMADR4_POSN                               0x4
#define _NVMADRL_NVMADR4_POSITION                           0x4
#define _NVMADRL_NVMADR4_SIZE                               0x1
#define _NVMADRL_NVMADR4_LENGTH                             0x1
#define _NVMADRL_NVMADR4_MASK                               0x10
#define _NVMADRL_NVMADR5_POSN                               0x5
#define _NVMADRL_NVMADR5_POSITION                           0x5
#define _NVMADRL_NVMADR5_SIZE                               0x1
#define _NVMADRL_NVMADR5_LENGTH                             0x1
#define _NVMADRL_NVMADR5_MASK                               0x20
#define _NVMADRL_NVMADR6_POSN                               0x6
#define _NVMADRL_NVMADR6_POSITION                           0x6
#define _NVMADRL_NVMADR6_SIZE                               0x1
#define _NVMADRL_NVMADR6_LENGTH                             0x1
#define _NVMADRL_NVMADR6_MASK                               0x40
#define _NVMADRL_NVMADR7_POSN                               0x7
#define _NVMADRL_NVMADR7_POSITION                           0x7
#define _NVMADRL_NVMADR7_SIZE                               0x1
#define _NVMADRL_NVMADR7_LENGTH                             0x1
#define _NVMADRL_NVMADR7_MASK                               0x80

// Register: NVMADRH
#define NVMADRH NVMADRH
extern volatile unsigned char           NVMADRH             __at(0x39E1);
#ifndef _LIB_BUILD
asm("NVMADRH equ 039E1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADR                    :2;
    };
    struct {
        unsigned ADR8                   :1;
        unsigned ADR9                   :1;
    };
    struct {
        unsigned NVMADR                 :2;
    };
    struct {
        unsigned NVMADR8                :1;
        unsigned NVMADR9                :1;
    };
} NVMADRHbits_t;
extern volatile NVMADRHbits_t NVMADRHbits __at(0x39E1);
// bitfield macros
#define _NVMADRH_ADR_POSN                                   0x0
#define _NVMADRH_ADR_POSITION                               0x0
#define _NVMADRH_ADR_SIZE                                   0x2
#define _NVMADRH_ADR_LENGTH                                 0x2
#define _NVMADRH_ADR_MASK                                   0x3
#define _NVMADRH_ADR8_POSN                                  0x0
#define _NVMADRH_ADR8_POSITION                              0x0
#define _NVMADRH_ADR8_SIZE                                  0x1
#define _NVMADRH_ADR8_LENGTH                                0x1
#define _NVMADRH_ADR8_MASK                                  0x1
#define _NVMADRH_ADR9_POSN                                  0x1
#define _NVMADRH_ADR9_POSITION                              0x1
#define _NVMADRH_ADR9_SIZE                                  0x1
#define _NVMADRH_ADR9_LENGTH                                0x1
#define _NVMADRH_ADR9_MASK                                  0x2
#define _NVMADRH_NVMADR_POSN                                0x0
#define _NVMADRH_NVMADR_POSITION                            0x0
#define _NVMADRH_NVMADR_SIZE                                0x2
#define _NVMADRH_NVMADR_LENGTH                              0x2
#define _NVMADRH_NVMADR_MASK                                0x3
#define _NVMADRH_NVMADR8_POSN                               0x0
#define _NVMADRH_NVMADR8_POSITION                           0x0
#define _NVMADRH_NVMADR8_SIZE                               0x1
#define _NVMADRH_NVMADR8_LENGTH                             0x1
#define _NVMADRH_NVMADR8_MASK                               0x1
#define _NVMADRH_NVMADR9_POSN                               0x1
#define _NVMADRH_NVMADR9_POSITION                           0x1
#define _NVMADRH_NVMADR9_SIZE                               0x1
#define _NVMADRH_NVMADR9_LENGTH                             0x1
#define _NVMADRH_NVMADR9_MASK                               0x2

// Register: NVMDAT
#define NVMDAT NVMDAT
extern volatile unsigned char           NVMDAT              __at(0x39E3);
#ifndef _LIB_BUILD
asm("NVMDAT equ 039E3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DAT                    :8;
    };
    struct {
        unsigned DAT0                   :1;
        unsigned DAT1                   :1;
        unsigned DAT2                   :1;
        unsigned DAT3                   :1;
        unsigned DAT4                   :1;
        unsigned DAT5                   :1;
        unsigned DAT6                   :1;
        unsigned DAT7                   :1;
    };
    struct {
        unsigned NVMDAT                 :8;
    };
    struct {
        unsigned NVMDAT0                :1;
        unsigned NVMDAT1                :1;
        unsigned NVMDAT2                :1;
        unsigned NVMDAT3                :1;
        unsigned NVMDAT4                :1;
        unsigned NVMDAT5                :1;
        unsigned NVMDAT6                :1;
        unsigned NVMDAT7                :1;
    };
} NVMDATbits_t;
extern volatile NVMDATbits_t NVMDATbits __at(0x39E3);
// bitfield macros
#define _NVMDAT_DAT_POSN                                    0x0
#define _NVMDAT_DAT_POSITION                                0x0
#define _NVMDAT_DAT_SIZE                                    0x8
#define _NVMDAT_DAT_LENGTH                                  0x8
#define _NVMDAT_DAT_MASK                                    0xFF
#define _NVMDAT_DAT0_POSN                                   0x0
#define _NVMDAT_DAT0_POSITION                               0x0
#define _NVMDAT_DAT0_SIZE                                   0x1
#define _NVMDAT_DAT0_LENGTH                                 0x1
#define _NVMDAT_DAT0_MASK                                   0x1
#define _NVMDAT_DAT1_POSN                                   0x1
#define _NVMDAT_DAT1_POSITION                               0x1
#define _NVMDAT_DAT1_SIZE                                   0x1
#define _NVMDAT_DAT1_LENGTH                                 0x1
#define _NVMDAT_DAT1_MASK                                   0x2
#define _NVMDAT_DAT2_POSN                                   0x2
#define _NVMDAT_DAT2_POSITION                               0x2
#define _NVMDAT_DAT2_SIZE                                   0x1
#define _NVMDAT_DAT2_LENGTH                                 0x1
#define _NVMDAT_DAT2_MASK                                   0x4
#define _NVMDAT_DAT3_POSN                                   0x3
#define _NVMDAT_DAT3_POSITION                               0x3
#define _NVMDAT_DAT3_SIZE                                   0x1
#define _NVMDAT_DAT3_LENGTH                                 0x1
#define _NVMDAT_DAT3_MASK                                   0x8
#define _NVMDAT_DAT4_POSN                                   0x4
#define _NVMDAT_DAT4_POSITION                               0x4
#define _NVMDAT_DAT4_SIZE                                   0x1
#define _NVMDAT_DAT4_LENGTH                                 0x1
#define _NVMDAT_DAT4_MASK                                   0x10
#define _NVMDAT_DAT5_POSN                                   0x5
#define _NVMDAT_DAT5_POSITION                               0x5
#define _NVMDAT_DAT5_SIZE                                   0x1
#define _NVMDAT_DAT5_LENGTH                                 0x1
#define _NVMDAT_DAT5_MASK                                   0x20
#define _NVMDAT_DAT6_POSN                                   0x6
#define _NVMDAT_DAT6_POSITION                               0x6
#define _NVMDAT_DAT6_SIZE                                   0x1
#define _NVMDAT_DAT6_LENGTH                                 0x1
#define _NVMDAT_DAT6_MASK                                   0x40
#define _NVMDAT_DAT7_POSN                                   0x7
#define _NVMDAT_DAT7_POSITION                               0x7
#define _NVMDAT_DAT7_SIZE                                   0x1
#define _NVMDAT_DAT7_LENGTH                                 0x1
#define _NVMDAT_DAT7_MASK                                   0x80
#define _NVMDAT_NVMDAT_POSN                                 0x0
#define _NVMDAT_NVMDAT_POSITION                             0x0
#define _NVMDAT_NVMDAT_SIZE                                 0x8
#define _NVMDAT_NVMDAT_LENGTH                               0x8
#define _NVMDAT_NVMDAT_MASK                                 0xFF
#define _NVMDAT_NVMDAT0_POSN                                0x0
#define _NVMDAT_NVMDAT0_POSITION                            0x0
#define _NVMDAT_NVMDAT0_SIZE                                0x1
#define _NVMDAT_NVMDAT0_LENGTH                              0x1
#define _NVMDAT_NVMDAT0_MASK                                0x1
#define _NVMDAT_NVMDAT1_POSN                                0x1
#define _NVMDAT_NVMDAT1_POSITION                            0x1
#define _NVMDAT_NVMDAT1_SIZE                                0x1
#define _NVMDAT_NVMDAT1_LENGTH                              0x1
#define _NVMDAT_NVMDAT1_MASK                                0x2
#define _NVMDAT_NVMDAT2_POSN                                0x2
#define _NVMDAT_NVMDAT2_POSITION                            0x2
#define _NVMDAT_NVMDAT2_SIZE                                0x1
#define _NVMDAT_NVMDAT2_LENGTH                              0x1
#define _NVMDAT_NVMDAT2_MASK                                0x4
#define _NVMDAT_NVMDAT3_POSN                                0x3
#define _NVMDAT_NVMDAT3_POSITION                            0x3
#define _NVMDAT_NVMDAT3_SIZE                                0x1
#define _NVMDAT_NVMDAT3_LENGTH                              0x1
#define _NVMDAT_NVMDAT3_MASK                                0x8
#define _NVMDAT_NVMDAT4_POSN                                0x4
#define _NVMDAT_NVMDAT4_POSITION                            0x4
#define _NVMDAT_NVMDAT4_SIZE                                0x1
#define _NVMDAT_NVMDAT4_LENGTH                              0x1
#define _NVMDAT_NVMDAT4_MASK                                0x10
#define _NVMDAT_NVMDAT5_POSN                                0x5
#define _NVMDAT_NVMDAT5_POSITION                            0x5
#define _NVMDAT_NVMDAT5_SIZE                                0x1
#define _NVMDAT_NVMDAT5_LENGTH                              0x1
#define _NVMDAT_NVMDAT5_MASK                                0x20
#define _NVMDAT_NVMDAT6_POSN                                0x6
#define _NVMDAT_NVMDAT6_POSITION                            0x6
#define _NVMDAT_NVMDAT6_SIZE                                0x1
#define _NVMDAT_NVMDAT6_LENGTH                              0x1
#define _NVMDAT_NVMDAT6_MASK                                0x40
#define _NVMDAT_NVMDAT7_POSN                                0x7
#define _NVMDAT_NVMDAT7_POSITION                            0x7
#define _NVMDAT_NVMDAT7_SIZE                                0x1
#define _NVMDAT_NVMDAT7_LENGTH                              0x1
#define _NVMDAT_NVMDAT7_MASK                                0x80

// Register: NVMCON1
#define NVMCON1 NVMCON1
extern volatile unsigned char           NVMCON1             __at(0x39E5);
#ifndef _LIB_BUILD
asm("NVMCON1 equ 039E5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RD                     :1;
        unsigned WR                     :1;
        unsigned WREN                   :1;
        unsigned WRERR                  :1;
        unsigned FREE                   :1;
        unsigned                        :1;
        unsigned REG                    :2;
    };
    struct {
        unsigned                        :6;
        unsigned REG0                   :1;
        unsigned REG1                   :1;
    };
    struct {
        unsigned                        :6;
        unsigned NVMREG                 :2;
    };
    struct {
        unsigned                        :6;
        unsigned NVMREG0                :1;
        unsigned NVMREG1                :1;
    };
} NVMCON1bits_t;
extern volatile NVMCON1bits_t NVMCON1bits __at(0x39E5);
// bitfield macros
#define _NVMCON1_RD_POSN                                    0x0
#define _NVMCON1_RD_POSITION                                0x0
#define _NVMCON1_RD_SIZE                                    0x1
#define _NVMCON1_RD_LENGTH                                  0x1
#define _NVMCON1_RD_MASK                                    0x1
#define _NVMCON1_WR_POSN                                    0x1
#define _NVMCON1_WR_POSITION                                0x1
#define _NVMCON1_WR_SIZE                                    0x1
#define _NVMCON1_WR_LENGTH                                  0x1
#define _NVMCON1_WR_MASK                                    0x2
#define _NVMCON1_WREN_POSN                                  0x2
#define _NVMCON1_WREN_POSITION                              0x2
#define _NVMCON1_WREN_SIZE                                  0x1
#define _NVMCON1_WREN_LENGTH                                0x1
#define _NVMCON1_WREN_MASK                                  0x4
#define _NVMCON1_WRERR_POSN                                 0x3
#define _NVMCON1_WRERR_POSITION                             0x3
#define _NVMCON1_WRERR_SIZE                                 0x1
#define _NVMCON1_WRERR_LENGTH                               0x1
#define _NVMCON1_WRERR_MASK                                 0x8
#define _NVMCON1_FREE_POSN                                  0x4
#define _NVMCON1_FREE_POSITION                              0x4
#define _NVMCON1_FREE_SIZE                                  0x1
#define _NVMCON1_FREE_LENGTH                                0x1
#define _NVMCON1_FREE_MASK                                  0x10
#define _NVMCON1_REG_POSN                                   0x6
#define _NVMCON1_REG_POSITION                               0x6
#define _NVMCON1_REG_SIZE                                   0x2
#define _NVMCON1_REG_LENGTH                                 0x2
#define _NVMCON1_REG_MASK                                   0xC0
#define _NVMCON1_REG0_POSN                                  0x6
#define _NVMCON1_REG0_POSITION                              0x6
#define _NVMCON1_REG0_SIZE                                  0x1
#define _NVMCON1_REG0_LENGTH                                0x1
#define _NVMCON1_REG0_MASK                                  0x40
#define _NVMCON1_REG1_POSN                                  0x7
#define _NVMCON1_REG1_POSITION                              0x7
#define _NVMCON1_REG1_SIZE                                  0x1
#define _NVMCON1_REG1_LENGTH                                0x1
#define _NVMCON1_REG1_MASK                                  0x80
#define _NVMCON1_NVMREG_POSN                                0x6
#define _NVMCON1_NVMREG_POSITION                            0x6
#define _NVMCON1_NVMREG_SIZE                                0x2
#define _NVMCON1_NVMREG_LENGTH                              0x2
#define _NVMCON1_NVMREG_MASK                                0xC0
#define _NVMCON1_NVMREG0_POSN                               0x6
#define _NVMCON1_NVMREG0_POSITION                           0x6
#define _NVMCON1_NVMREG0_SIZE                               0x1
#define _NVMCON1_NVMREG0_LENGTH                             0x1
#define _NVMCON1_NVMREG0_MASK                               0x40
#define _NVMCON1_NVMREG1_POSN                               0x7
#define _NVMCON1_NVMREG1_POSITION                           0x7
#define _NVMCON1_NVMREG1_SIZE                               0x1
#define _NVMCON1_NVMREG1_LENGTH                             0x1
#define _NVMCON1_NVMREG1_MASK                               0x80

// Register: NVMCON2
#define NVMCON2 NVMCON2
extern volatile unsigned char           NVMCON2             __at(0x39E6);
#ifndef _LIB_BUILD
asm("NVMCON2 equ 039E6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NVMCON2                :8;
    };
} NVMCON2bits_t;
extern volatile NVMCON2bits_t NVMCON2bits __at(0x39E6);
// bitfield macros
#define _NVMCON2_NVMCON2_POSN                               0x0
#define _NVMCON2_NVMCON2_POSITION                           0x0
#define _NVMCON2_NVMCON2_SIZE                               0x8
#define _NVMCON2_NVMCON2_LENGTH                             0x8
#define _NVMCON2_NVMCON2_MASK                               0xFF

// Register: PRLOCK
#define PRLOCK PRLOCK
extern volatile unsigned char           PRLOCK              __at(0x39EF);
#ifndef _LIB_BUILD
asm("PRLOCK equ 039EFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PRLOCKED               :1;
    };
} PRLOCKbits_t;
extern volatile PRLOCKbits_t PRLOCKbits __at(0x39EF);
// bitfield macros
#define _PRLOCK_PRLOCKED_POSN                               0x0
#define _PRLOCK_PRLOCKED_POSITION                           0x0
#define _PRLOCK_PRLOCKED_SIZE                               0x1
#define _PRLOCK_PRLOCKED_LENGTH                             0x1
#define _PRLOCK_PRLOCKED_MASK                               0x1

// Register: ISRPR
#define ISRPR ISRPR
extern volatile unsigned char           ISRPR               __at(0x39F1);
#ifndef _LIB_BUILD
asm("ISRPR equ 039F1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PR                     :3;
    };
    struct {
        unsigned PR0                    :1;
        unsigned PR1                    :1;
        unsigned PR2                    :1;
    };
    struct {
        unsigned ISRPR                  :3;
    };
    struct {
        unsigned ISRPR0                 :1;
        unsigned ISRPR1                 :1;
        unsigned ISRPR2                 :1;
    };
} ISRPRbits_t;
extern volatile ISRPRbits_t ISRPRbits __at(0x39F1);
// bitfield macros
#define _ISRPR_PR_POSN                                      0x0
#define _ISRPR_PR_POSITION                                  0x0
#define _ISRPR_PR_SIZE                                      0x3
#define _ISRPR_PR_LENGTH                                    0x3
#define _ISRPR_PR_MASK                                      0x7
#define _ISRPR_PR0_POSN                                     0x0
#define _ISRPR_PR0_POSITION                                 0x0
#define _ISRPR_PR0_SIZE                                     0x1
#define _ISRPR_PR0_LENGTH                                   0x1
#define _ISRPR_PR0_MASK                                     0x1
#define _ISRPR_PR1_POSN                                     0x1
#define _ISRPR_PR1_POSITION                                 0x1
#define _ISRPR_PR1_SIZE                                     0x1
#define _ISRPR_PR1_LENGTH                                   0x1
#define _ISRPR_PR1_MASK                                     0x2
#define _ISRPR_PR2_POSN                                     0x2
#define _ISRPR_PR2_POSITION                                 0x2
#define _ISRPR_PR2_SIZE                                     0x1
#define _ISRPR_PR2_LENGTH                                   0x1
#define _ISRPR_PR2_MASK                                     0x4
#define _ISRPR_ISRPR_POSN                                   0x0
#define _ISRPR_ISRPR_POSITION                               0x0
#define _ISRPR_ISRPR_SIZE                                   0x3
#define _ISRPR_ISRPR_LENGTH                                 0x3
#define _ISRPR_ISRPR_MASK                                   0x7
#define _ISRPR_ISRPR0_POSN                                  0x0
#define _ISRPR_ISRPR0_POSITION                              0x0
#define _ISRPR_ISRPR0_SIZE                                  0x1
#define _ISRPR_ISRPR0_LENGTH                                0x1
#define _ISRPR_ISRPR0_MASK                                  0x1
#define _ISRPR_ISRPR1_POSN                                  0x1
#define _ISRPR_ISRPR1_POSITION                              0x1
#define _ISRPR_ISRPR1_SIZE                                  0x1
#define _ISRPR_ISRPR1_LENGTH                                0x1
#define _ISRPR_ISRPR1_MASK                                  0x2
#define _ISRPR_ISRPR2_POSN                                  0x2
#define _ISRPR_ISRPR2_POSITION                              0x2
#define _ISRPR_ISRPR2_SIZE                                  0x1
#define _ISRPR_ISRPR2_LENGTH                                0x1
#define _ISRPR_ISRPR2_MASK                                  0x4

// Register: MAINPR
#define MAINPR MAINPR
extern volatile unsigned char           MAINPR              __at(0x39F2);
#ifndef _LIB_BUILD
asm("MAINPR equ 039F2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PR                     :3;
    };
    struct {
        unsigned PR0                    :1;
        unsigned PR1                    :1;
        unsigned PR2                    :1;
    };
    struct {
        unsigned MAINPR                 :3;
    };
    struct {
        unsigned MAINPR0                :1;
        unsigned MAINPR1                :1;
        unsigned MAINPR2                :1;
    };
} MAINPRbits_t;
extern volatile MAINPRbits_t MAINPRbits __at(0x39F2);
// bitfield macros
#define _MAINPR_PR_POSN                                     0x0
#define _MAINPR_PR_POSITION                                 0x0
#define _MAINPR_PR_SIZE                                     0x3
#define _MAINPR_PR_LENGTH                                   0x3
#define _MAINPR_PR_MASK                                     0x7
#define _MAINPR_PR0_POSN                                    0x0
#define _MAINPR_PR0_POSITION                                0x0
#define _MAINPR_PR0_SIZE                                    0x1
#define _MAINPR_PR0_LENGTH                                  0x1
#define _MAINPR_PR0_MASK                                    0x1
#define _MAINPR_PR1_POSN                                    0x1
#define _MAINPR_PR1_POSITION                                0x1
#define _MAINPR_PR1_SIZE                                    0x1
#define _MAINPR_PR1_LENGTH                                  0x1
#define _MAINPR_PR1_MASK                                    0x2
#define _MAINPR_PR2_POSN                                    0x2
#define _MAINPR_PR2_POSITION                                0x2
#define _MAINPR_PR2_SIZE                                    0x1
#define _MAINPR_PR2_LENGTH                                  0x1
#define _MAINPR_PR2_MASK                                    0x4
#define _MAINPR_MAINPR_POSN                                 0x0
#define _MAINPR_MAINPR_POSITION                             0x0
#define _MAINPR_MAINPR_SIZE                                 0x3
#define _MAINPR_MAINPR_LENGTH                               0x3
#define _MAINPR_MAINPR_MASK                                 0x7
#define _MAINPR_MAINPR0_POSN                                0x0
#define _MAINPR_MAINPR0_POSITION                            0x0
#define _MAINPR_MAINPR0_SIZE                                0x1
#define _MAINPR_MAINPR0_LENGTH                              0x1
#define _MAINPR_MAINPR0_MASK                                0x1
#define _MAINPR_MAINPR1_POSN                                0x1
#define _MAINPR_MAINPR1_POSITION                            0x1
#define _MAINPR_MAINPR1_SIZE                                0x1
#define _MAINPR_MAINPR1_LENGTH                              0x1
#define _MAINPR_MAINPR1_MASK                                0x2
#define _MAINPR_MAINPR2_POSN                                0x2
#define _MAINPR_MAINPR2_POSITION                            0x2
#define _MAINPR_MAINPR2_SIZE                                0x1
#define _MAINPR_MAINPR2_LENGTH                              0x1
#define _MAINPR_MAINPR2_MASK                                0x4

// Register: DMA1PR
#define DMA1PR DMA1PR
extern volatile unsigned char           DMA1PR              __at(0x39F3);
#ifndef _LIB_BUILD
asm("DMA1PR equ 039F3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PR                     :3;
    };
    struct {
        unsigned PR0                    :1;
        unsigned PR1                    :1;
        unsigned PR2                    :1;
    };
    struct {
        unsigned DMA1PR                 :3;
    };
    struct {
        unsigned DMA1PR0                :1;
        unsigned DMA1PR1                :1;
        unsigned DMA1PR2                :1;
    };
} DMA1PRbits_t;
extern volatile DMA1PRbits_t DMA1PRbits __at(0x39F3);
// bitfield macros
#define _DMA1PR_PR_POSN                                     0x0
#define _DMA1PR_PR_POSITION                                 0x0
#define _DMA1PR_PR_SIZE                                     0x3
#define _DMA1PR_PR_LENGTH                                   0x3
#define _DMA1PR_PR_MASK                                     0x7
#define _DMA1PR_PR0_POSN                                    0x0
#define _DMA1PR_PR0_POSITION                                0x0
#define _DMA1PR_PR0_SIZE                                    0x1
#define _DMA1PR_PR0_LENGTH                                  0x1
#define _DMA1PR_PR0_MASK                                    0x1
#define _DMA1PR_PR1_POSN                                    0x1
#define _DMA1PR_PR1_POSITION                                0x1
#define _DMA1PR_PR1_SIZE                                    0x1
#define _DMA1PR_PR1_LENGTH                                  0x1
#define _DMA1PR_PR1_MASK                                    0x2
#define _DMA1PR_PR2_POSN                                    0x2
#define _DMA1PR_PR2_POSITION                                0x2
#define _DMA1PR_PR2_SIZE                                    0x1
#define _DMA1PR_PR2_LENGTH                                  0x1
#define _DMA1PR_PR2_MASK                                    0x4
#define _DMA1PR_DMA1PR_POSN                                 0x0
#define _DMA1PR_DMA1PR_POSITION                             0x0
#define _DMA1PR_DMA1PR_SIZE                                 0x3
#define _DMA1PR_DMA1PR_LENGTH                               0x3
#define _DMA1PR_DMA1PR_MASK                                 0x7
#define _DMA1PR_DMA1PR0_POSN                                0x0
#define _DMA1PR_DMA1PR0_POSITION                            0x0
#define _DMA1PR_DMA1PR0_SIZE                                0x1
#define _DMA1PR_DMA1PR0_LENGTH                              0x1
#define _DMA1PR_DMA1PR0_MASK                                0x1
#define _DMA1PR_DMA1PR1_POSN                                0x1
#define _DMA1PR_DMA1PR1_POSITION                            0x1
#define _DMA1PR_DMA1PR1_SIZE                                0x1
#define _DMA1PR_DMA1PR1_LENGTH                              0x1
#define _DMA1PR_DMA1PR1_MASK                                0x2
#define _DMA1PR_DMA1PR2_POSN                                0x2
#define _DMA1PR_DMA1PR2_POSITION                            0x2
#define _DMA1PR_DMA1PR2_SIZE                                0x1
#define _DMA1PR_DMA1PR2_LENGTH                              0x1
#define _DMA1PR_DMA1PR2_MASK                                0x4

// Register: DMA2PR
#define DMA2PR DMA2PR
extern volatile unsigned char           DMA2PR              __at(0x39F4);
#ifndef _LIB_BUILD
asm("DMA2PR equ 039F4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PR                     :3;
    };
    struct {
        unsigned PR0                    :1;
        unsigned PR1                    :1;
        unsigned PR2                    :1;
    };
    struct {
        unsigned DMA2PR                 :3;
    };
    struct {
        unsigned DMA2PR0                :1;
        unsigned DMA2PR1                :1;
        unsigned DMA2PR2                :1;
    };
} DMA2PRbits_t;
extern volatile DMA2PRbits_t DMA2PRbits __at(0x39F4);
// bitfield macros
#define _DMA2PR_PR_POSN                                     0x0
#define _DMA2PR_PR_POSITION                                 0x0
#define _DMA2PR_PR_SIZE                                     0x3
#define _DMA2PR_PR_LENGTH                                   0x3
#define _DMA2PR_PR_MASK                                     0x7
#define _DMA2PR_PR0_POSN                                    0x0
#define _DMA2PR_PR0_POSITION                                0x0
#define _DMA2PR_PR0_SIZE                                    0x1
#define _DMA2PR_PR0_LENGTH                                  0x1
#define _DMA2PR_PR0_MASK                                    0x1
#define _DMA2PR_PR1_POSN                                    0x1
#define _DMA2PR_PR1_POSITION                                0x1
#define _DMA2PR_PR1_SIZE                                    0x1
#define _DMA2PR_PR1_LENGTH                                  0x1
#define _DMA2PR_PR1_MASK                                    0x2
#define _DMA2PR_PR2_POSN                                    0x2
#define _DMA2PR_PR2_POSITION                                0x2
#define _DMA2PR_PR2_SIZE                                    0x1
#define _DMA2PR_PR2_LENGTH                                  0x1
#define _DMA2PR_PR2_MASK                                    0x4
#define _DMA2PR_DMA2PR_POSN                                 0x0
#define _DMA2PR_DMA2PR_POSITION                             0x0
#define _DMA2PR_DMA2PR_SIZE                                 0x3
#define _DMA2PR_DMA2PR_LENGTH                               0x3
#define _DMA2PR_DMA2PR_MASK                                 0x7
#define _DMA2PR_DMA2PR0_POSN                                0x0
#define _DMA2PR_DMA2PR0_POSITION                            0x0
#define _DMA2PR_DMA2PR0_SIZE                                0x1
#define _DMA2PR_DMA2PR0_LENGTH                              0x1
#define _DMA2PR_DMA2PR0_MASK                                0x1
#define _DMA2PR_DMA2PR1_POSN                                0x1
#define _DMA2PR_DMA2PR1_POSITION                            0x1
#define _DMA2PR_DMA2PR1_SIZE                                0x1
#define _DMA2PR_DMA2PR1_LENGTH                              0x1
#define _DMA2PR_DMA2PR1_MASK                                0x2
#define _DMA2PR_DMA2PR2_POSN                                0x2
#define _DMA2PR_DMA2PR2_POSITION                            0x2
#define _DMA2PR_DMA2PR2_SIZE                                0x1
#define _DMA2PR_DMA2PR2_LENGTH                              0x1
#define _DMA2PR_DMA2PR2_MASK                                0x4

// Register: SCANPR
#define SCANPR SCANPR
extern volatile unsigned char           SCANPR              __at(0x39F7);
#ifndef _LIB_BUILD
asm("SCANPR equ 039F7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PR                     :3;
    };
    struct {
        unsigned PR0                    :1;
        unsigned PR1                    :1;
        unsigned PR2                    :1;
    };
    struct {
        unsigned SCANPR                 :3;
    };
    struct {
        unsigned SCANPR0                :1;
        unsigned SCANPR1                :1;
        unsigned SCANPR2                :1;
    };
} SCANPRbits_t;
extern volatile SCANPRbits_t SCANPRbits __at(0x39F7);
// bitfield macros
#define _SCANPR_PR_POSN                                     0x0
#define _SCANPR_PR_POSITION                                 0x0
#define _SCANPR_PR_SIZE                                     0x3
#define _SCANPR_PR_LENGTH                                   0x3
#define _SCANPR_PR_MASK                                     0x7
#define _SCANPR_PR0_POSN                                    0x0
#define _SCANPR_PR0_POSITION                                0x0
#define _SCANPR_PR0_SIZE                                    0x1
#define _SCANPR_PR0_LENGTH                                  0x1
#define _SCANPR_PR0_MASK                                    0x1
#define _SCANPR_PR1_POSN                                    0x1
#define _SCANPR_PR1_POSITION                                0x1
#define _SCANPR_PR1_SIZE                                    0x1
#define _SCANPR_PR1_LENGTH                                  0x1
#define _SCANPR_PR1_MASK                                    0x2
#define _SCANPR_PR2_POSN                                    0x2
#define _SCANPR_PR2_POSITION                                0x2
#define _SCANPR_PR2_SIZE                                    0x1
#define _SCANPR_PR2_LENGTH                                  0x1
#define _SCANPR_PR2_MASK                                    0x4
#define _SCANPR_SCANPR_POSN                                 0x0
#define _SCANPR_SCANPR_POSITION                             0x0
#define _SCANPR_SCANPR_SIZE                                 0x3
#define _SCANPR_SCANPR_LENGTH                               0x3
#define _SCANPR_SCANPR_MASK                                 0x7
#define _SCANPR_SCANPR0_POSN                                0x0
#define _SCANPR_SCANPR0_POSITION                            0x0
#define _SCANPR_SCANPR0_SIZE                                0x1
#define _SCANPR_SCANPR0_LENGTH                              0x1
#define _SCANPR_SCANPR0_MASK                                0x1
#define _SCANPR_SCANPR1_POSN                                0x1
#define _SCANPR_SCANPR1_POSITION                            0x1
#define _SCANPR_SCANPR1_SIZE                                0x1
#define _SCANPR_SCANPR1_LENGTH                              0x1
#define _SCANPR_SCANPR1_MASK                                0x2
#define _SCANPR_SCANPR2_POSN                                0x2
#define _SCANPR_SCANPR2_POSITION                            0x2
#define _SCANPR_SCANPR2_SIZE                                0x1
#define _SCANPR_SCANPR2_LENGTH                              0x1
#define _SCANPR_SCANPR2_MASK                                0x4

// Register: RA0PPS
#define RA0PPS RA0PPS
extern volatile unsigned char           RA0PPS              __at(0x3A00);
#ifndef _LIB_BUILD
asm("RA0PPS equ 03A00h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA0PPS0                :1;
        unsigned RA0PPS1                :1;
        unsigned RA0PPS2                :1;
        unsigned RA0PPS3                :1;
        unsigned RA0PPS4                :1;
        unsigned RA0PPS5                :1;
    };
} RA0PPSbits_t;
extern volatile RA0PPSbits_t RA0PPSbits __at(0x3A00);
// bitfield macros
#define _RA0PPS_RA0PPS0_POSN                                0x0
#define _RA0PPS_RA0PPS0_POSITION                            0x0
#define _RA0PPS_RA0PPS0_SIZE                                0x1
#define _RA0PPS_RA0PPS0_LENGTH                              0x1
#define _RA0PPS_RA0PPS0_MASK                                0x1
#define _RA0PPS_RA0PPS1_POSN                                0x1
#define _RA0PPS_RA0PPS1_POSITION                            0x1
#define _RA0PPS_RA0PPS1_SIZE                                0x1
#define _RA0PPS_RA0PPS1_LENGTH                              0x1
#define _RA0PPS_RA0PPS1_MASK                                0x2
#define _RA0PPS_RA0PPS2_POSN                                0x2
#define _RA0PPS_RA0PPS2_POSITION                            0x2
#define _RA0PPS_RA0PPS2_SIZE                                0x1
#define _RA0PPS_RA0PPS2_LENGTH                              0x1
#define _RA0PPS_RA0PPS2_MASK                                0x4
#define _RA0PPS_RA0PPS3_POSN                                0x3
#define _RA0PPS_RA0PPS3_POSITION                            0x3
#define _RA0PPS_RA0PPS3_SIZE                                0x1
#define _RA0PPS_RA0PPS3_LENGTH                              0x1
#define _RA0PPS_RA0PPS3_MASK                                0x8
#define _RA0PPS_RA0PPS4_POSN                                0x4
#define _RA0PPS_RA0PPS4_POSITION                            0x4
#define _RA0PPS_RA0PPS4_SIZE                                0x1
#define _RA0PPS_RA0PPS4_LENGTH                              0x1
#define _RA0PPS_RA0PPS4_MASK                                0x10
#define _RA0PPS_RA0PPS5_POSN                                0x5
#define _RA0PPS_RA0PPS5_POSITION                            0x5
#define _RA0PPS_RA0PPS5_SIZE                                0x1
#define _RA0PPS_RA0PPS5_LENGTH                              0x1
#define _RA0PPS_RA0PPS5_MASK                                0x20

// Register: RA1PPS
#define RA1PPS RA1PPS
extern volatile unsigned char           RA1PPS              __at(0x3A01);
#ifndef _LIB_BUILD
asm("RA1PPS equ 03A01h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA1PPS0                :1;
        unsigned RA1PPS1                :1;
        unsigned RA1PPS2                :1;
        unsigned RA1PPS3                :1;
        unsigned RA1PPS4                :1;
        unsigned RA1PPS5                :1;
    };
} RA1PPSbits_t;
extern volatile RA1PPSbits_t RA1PPSbits __at(0x3A01);
// bitfield macros
#define _RA1PPS_RA1PPS0_POSN                                0x0
#define _RA1PPS_RA1PPS0_POSITION                            0x0
#define _RA1PPS_RA1PPS0_SIZE                                0x1
#define _RA1PPS_RA1PPS0_LENGTH                              0x1
#define _RA1PPS_RA1PPS0_MASK                                0x1
#define _RA1PPS_RA1PPS1_POSN                                0x1
#define _RA1PPS_RA1PPS1_POSITION                            0x1
#define _RA1PPS_RA1PPS1_SIZE                                0x1
#define _RA1PPS_RA1PPS1_LENGTH                              0x1
#define _RA1PPS_RA1PPS1_MASK                                0x2
#define _RA1PPS_RA1PPS2_POSN                                0x2
#define _RA1PPS_RA1PPS2_POSITION                            0x2
#define _RA1PPS_RA1PPS2_SIZE                                0x1
#define _RA1PPS_RA1PPS2_LENGTH                              0x1
#define _RA1PPS_RA1PPS2_MASK                                0x4
#define _RA1PPS_RA1PPS3_POSN                                0x3
#define _RA1PPS_RA1PPS3_POSITION                            0x3
#define _RA1PPS_RA1PPS3_SIZE                                0x1
#define _RA1PPS_RA1PPS3_LENGTH                              0x1
#define _RA1PPS_RA1PPS3_MASK                                0x8
#define _RA1PPS_RA1PPS4_POSN                                0x4
#define _RA1PPS_RA1PPS4_POSITION                            0x4
#define _RA1PPS_RA1PPS4_SIZE                                0x1
#define _RA1PPS_RA1PPS4_LENGTH                              0x1
#define _RA1PPS_RA1PPS4_MASK                                0x10
#define _RA1PPS_RA1PPS5_POSN                                0x5
#define _RA1PPS_RA1PPS5_POSITION                            0x5
#define _RA1PPS_RA1PPS5_SIZE                                0x1
#define _RA1PPS_RA1PPS5_LENGTH                              0x1
#define _RA1PPS_RA1PPS5_MASK                                0x20

// Register: RA2PPS
#define RA2PPS RA2PPS
extern volatile unsigned char           RA2PPS              __at(0x3A02);
#ifndef _LIB_BUILD
asm("RA2PPS equ 03A02h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA2PPS0                :1;
        unsigned RA2PPS1                :1;
        unsigned RA2PPS2                :1;
        unsigned RA2PPS3                :1;
        unsigned RA2PPS4                :1;
        unsigned RA2PPS5                :1;
    };
} RA2PPSbits_t;
extern volatile RA2PPSbits_t RA2PPSbits __at(0x3A02);
// bitfield macros
#define _RA2PPS_RA2PPS0_POSN                                0x0
#define _RA2PPS_RA2PPS0_POSITION                            0x0
#define _RA2PPS_RA2PPS0_SIZE                                0x1
#define _RA2PPS_RA2PPS0_LENGTH                              0x1
#define _RA2PPS_RA2PPS0_MASK                                0x1
#define _RA2PPS_RA2PPS1_POSN                                0x1
#define _RA2PPS_RA2PPS1_POSITION                            0x1
#define _RA2PPS_RA2PPS1_SIZE                                0x1
#define _RA2PPS_RA2PPS1_LENGTH                              0x1
#define _RA2PPS_RA2PPS1_MASK                                0x2
#define _RA2PPS_RA2PPS2_POSN                                0x2
#define _RA2PPS_RA2PPS2_POSITION                            0x2
#define _RA2PPS_RA2PPS2_SIZE                                0x1
#define _RA2PPS_RA2PPS2_LENGTH                              0x1
#define _RA2PPS_RA2PPS2_MASK                                0x4
#define _RA2PPS_RA2PPS3_POSN                                0x3
#define _RA2PPS_RA2PPS3_POSITION                            0x3
#define _RA2PPS_RA2PPS3_SIZE                                0x1
#define _RA2PPS_RA2PPS3_LENGTH                              0x1
#define _RA2PPS_RA2PPS3_MASK                                0x8
#define _RA2PPS_RA2PPS4_POSN                                0x4
#define _RA2PPS_RA2PPS4_POSITION                            0x4
#define _RA2PPS_RA2PPS4_SIZE                                0x1
#define _RA2PPS_RA2PPS4_LENGTH                              0x1
#define _RA2PPS_RA2PPS4_MASK                                0x10
#define _RA2PPS_RA2PPS5_POSN                                0x5
#define _RA2PPS_RA2PPS5_POSITION                            0x5
#define _RA2PPS_RA2PPS5_SIZE                                0x1
#define _RA2PPS_RA2PPS5_LENGTH                              0x1
#define _RA2PPS_RA2PPS5_MASK                                0x20

// Register: RA3PPS
#define RA3PPS RA3PPS
extern volatile unsigned char           RA3PPS              __at(0x3A03);
#ifndef _LIB_BUILD
asm("RA3PPS equ 03A03h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA3PPS0                :1;
        unsigned RA3PPS1                :1;
        unsigned RA3PPS2                :1;
        unsigned RA3PPS3                :1;
        unsigned RA3PPS4                :1;
        unsigned RA3PPS5                :1;
    };
} RA3PPSbits_t;
extern volatile RA3PPSbits_t RA3PPSbits __at(0x3A03);
// bitfield macros
#define _RA3PPS_RA3PPS0_POSN                                0x0
#define _RA3PPS_RA3PPS0_POSITION                            0x0
#define _RA3PPS_RA3PPS0_SIZE                                0x1
#define _RA3PPS_RA3PPS0_LENGTH                              0x1
#define _RA3PPS_RA3PPS0_MASK                                0x1
#define _RA3PPS_RA3PPS1_POSN                                0x1
#define _RA3PPS_RA3PPS1_POSITION                            0x1
#define _RA3PPS_RA3PPS1_SIZE                                0x1
#define _RA3PPS_RA3PPS1_LENGTH                              0x1
#define _RA3PPS_RA3PPS1_MASK                                0x2
#define _RA3PPS_RA3PPS2_POSN                                0x2
#define _RA3PPS_RA3PPS2_POSITION                            0x2
#define _RA3PPS_RA3PPS2_SIZE                                0x1
#define _RA3PPS_RA3PPS2_LENGTH                              0x1
#define _RA3PPS_RA3PPS2_MASK                                0x4
#define _RA3PPS_RA3PPS3_POSN                                0x3
#define _RA3PPS_RA3PPS3_POSITION                            0x3
#define _RA3PPS_RA3PPS3_SIZE                                0x1
#define _RA3PPS_RA3PPS3_LENGTH                              0x1
#define _RA3PPS_RA3PPS3_MASK                                0x8
#define _RA3PPS_RA3PPS4_POSN                                0x4
#define _RA3PPS_RA3PPS4_POSITION                            0x4
#define _RA3PPS_RA3PPS4_SIZE                                0x1
#define _RA3PPS_RA3PPS4_LENGTH                              0x1
#define _RA3PPS_RA3PPS4_MASK                                0x10
#define _RA3PPS_RA3PPS5_POSN                                0x5
#define _RA3PPS_RA3PPS5_POSITION                            0x5
#define _RA3PPS_RA3PPS5_SIZE                                0x1
#define _RA3PPS_RA3PPS5_LENGTH                              0x1
#define _RA3PPS_RA3PPS5_MASK                                0x20

// Register: RA4PPS
#define RA4PPS RA4PPS
extern volatile unsigned char           RA4PPS              __at(0x3A04);
#ifndef _LIB_BUILD
asm("RA4PPS equ 03A04h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA4PPS0                :1;
        unsigned RA4PPS1                :1;
        unsigned RA4PPS2                :1;
        unsigned RA4PPS3                :1;
        unsigned RA4PPS4                :1;
        unsigned RA4PPS5                :1;
    };
} RA4PPSbits_t;
extern volatile RA4PPSbits_t RA4PPSbits __at(0x3A04);
// bitfield macros
#define _RA4PPS_RA4PPS0_POSN                                0x0
#define _RA4PPS_RA4PPS0_POSITION                            0x0
#define _RA4PPS_RA4PPS0_SIZE                                0x1
#define _RA4PPS_RA4PPS0_LENGTH                              0x1
#define _RA4PPS_RA4PPS0_MASK                                0x1
#define _RA4PPS_RA4PPS1_POSN                                0x1
#define _RA4PPS_RA4PPS1_POSITION                            0x1
#define _RA4PPS_RA4PPS1_SIZE                                0x1
#define _RA4PPS_RA4PPS1_LENGTH                              0x1
#define _RA4PPS_RA4PPS1_MASK                                0x2
#define _RA4PPS_RA4PPS2_POSN                                0x2
#define _RA4PPS_RA4PPS2_POSITION                            0x2
#define _RA4PPS_RA4PPS2_SIZE                                0x1
#define _RA4PPS_RA4PPS2_LENGTH                              0x1
#define _RA4PPS_RA4PPS2_MASK                                0x4
#define _RA4PPS_RA4PPS3_POSN                                0x3
#define _RA4PPS_RA4PPS3_POSITION                            0x3
#define _RA4PPS_RA4PPS3_SIZE                                0x1
#define _RA4PPS_RA4PPS3_LENGTH                              0x1
#define _RA4PPS_RA4PPS3_MASK                                0x8
#define _RA4PPS_RA4PPS4_POSN                                0x4
#define _RA4PPS_RA4PPS4_POSITION                            0x4
#define _RA4PPS_RA4PPS4_SIZE                                0x1
#define _RA4PPS_RA4PPS4_LENGTH                              0x1
#define _RA4PPS_RA4PPS4_MASK                                0x10
#define _RA4PPS_RA4PPS5_POSN                                0x5
#define _RA4PPS_RA4PPS5_POSITION                            0x5
#define _RA4PPS_RA4PPS5_SIZE                                0x1
#define _RA4PPS_RA4PPS5_LENGTH                              0x1
#define _RA4PPS_RA4PPS5_MASK                                0x20

// Register: RA5PPS
#define RA5PPS RA5PPS
extern volatile unsigned char           RA5PPS              __at(0x3A05);
#ifndef _LIB_BUILD
asm("RA5PPS equ 03A05h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA5PPS0                :1;
        unsigned RA5PPS1                :1;
        unsigned RA5PPS2                :1;
        unsigned RA5PPS3                :1;
        unsigned RA5PPS4                :1;
        unsigned RA5PPS5                :1;
    };
} RA5PPSbits_t;
extern volatile RA5PPSbits_t RA5PPSbits __at(0x3A05);
// bitfield macros
#define _RA5PPS_RA5PPS0_POSN                                0x0
#define _RA5PPS_RA5PPS0_POSITION                            0x0
#define _RA5PPS_RA5PPS0_SIZE                                0x1
#define _RA5PPS_RA5PPS0_LENGTH                              0x1
#define _RA5PPS_RA5PPS0_MASK                                0x1
#define _RA5PPS_RA5PPS1_POSN                                0x1
#define _RA5PPS_RA5PPS1_POSITION                            0x1
#define _RA5PPS_RA5PPS1_SIZE                                0x1
#define _RA5PPS_RA5PPS1_LENGTH                              0x1
#define _RA5PPS_RA5PPS1_MASK                                0x2
#define _RA5PPS_RA5PPS2_POSN                                0x2
#define _RA5PPS_RA5PPS2_POSITION                            0x2
#define _RA5PPS_RA5PPS2_SIZE                                0x1
#define _RA5PPS_RA5PPS2_LENGTH                              0x1
#define _RA5PPS_RA5PPS2_MASK                                0x4
#define _RA5PPS_RA5PPS3_POSN                                0x3
#define _RA5PPS_RA5PPS3_POSITION                            0x3
#define _RA5PPS_RA5PPS3_SIZE                                0x1
#define _RA5PPS_RA5PPS3_LENGTH                              0x1
#define _RA5PPS_RA5PPS3_MASK                                0x8
#define _RA5PPS_RA5PPS4_POSN                                0x4
#define _RA5PPS_RA5PPS4_POSITION                            0x4
#define _RA5PPS_RA5PPS4_SIZE                                0x1
#define _RA5PPS_RA5PPS4_LENGTH                              0x1
#define _RA5PPS_RA5PPS4_MASK                                0x10
#define _RA5PPS_RA5PPS5_POSN                                0x5
#define _RA5PPS_RA5PPS5_POSITION                            0x5
#define _RA5PPS_RA5PPS5_SIZE                                0x1
#define _RA5PPS_RA5PPS5_LENGTH                              0x1
#define _RA5PPS_RA5PPS5_MASK                                0x20

// Register: RA6PPS
#define RA6PPS RA6PPS
extern volatile unsigned char           RA6PPS              __at(0x3A06);
#ifndef _LIB_BUILD
asm("RA6PPS equ 03A06h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA6PPS0                :1;
        unsigned RA6PPS1                :1;
        unsigned RA6PPS2                :1;
        unsigned RA6PPS3                :1;
        unsigned RA6PPS4                :1;
        unsigned RA6PPS5                :1;
    };
} RA6PPSbits_t;
extern volatile RA6PPSbits_t RA6PPSbits __at(0x3A06);
// bitfield macros
#define _RA6PPS_RA6PPS0_POSN                                0x0
#define _RA6PPS_RA6PPS0_POSITION                            0x0
#define _RA6PPS_RA6PPS0_SIZE                                0x1
#define _RA6PPS_RA6PPS0_LENGTH                              0x1
#define _RA6PPS_RA6PPS0_MASK                                0x1
#define _RA6PPS_RA6PPS1_POSN                                0x1
#define _RA6PPS_RA6PPS1_POSITION                            0x1
#define _RA6PPS_RA6PPS1_SIZE                                0x1
#define _RA6PPS_RA6PPS1_LENGTH                              0x1
#define _RA6PPS_RA6PPS1_MASK                                0x2
#define _RA6PPS_RA6PPS2_POSN                                0x2
#define _RA6PPS_RA6PPS2_POSITION                            0x2
#define _RA6PPS_RA6PPS2_SIZE                                0x1
#define _RA6PPS_RA6PPS2_LENGTH                              0x1
#define _RA6PPS_RA6PPS2_MASK                                0x4
#define _RA6PPS_RA6PPS3_POSN                                0x3
#define _RA6PPS_RA6PPS3_POSITION                            0x3
#define _RA6PPS_RA6PPS3_SIZE                                0x1
#define _RA6PPS_RA6PPS3_LENGTH                              0x1
#define _RA6PPS_RA6PPS3_MASK                                0x8
#define _RA6PPS_RA6PPS4_POSN                                0x4
#define _RA6PPS_RA6PPS4_POSITION                            0x4
#define _RA6PPS_RA6PPS4_SIZE                                0x1
#define _RA6PPS_RA6PPS4_LENGTH                              0x1
#define _RA6PPS_RA6PPS4_MASK                                0x10
#define _RA6PPS_RA6PPS5_POSN                                0x5
#define _RA6PPS_RA6PPS5_POSITION                            0x5
#define _RA6PPS_RA6PPS5_SIZE                                0x1
#define _RA6PPS_RA6PPS5_LENGTH                              0x1
#define _RA6PPS_RA6PPS5_MASK                                0x20

// Register: RA7PPS
#define RA7PPS RA7PPS
extern volatile unsigned char           RA7PPS              __at(0x3A07);
#ifndef _LIB_BUILD
asm("RA7PPS equ 03A07h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA7PPS0                :1;
        unsigned RA7PPS1                :1;
        unsigned RA7PPS2                :1;
        unsigned RA7PPS3                :1;
        unsigned RA7PPS4                :1;
        unsigned RA7PPS5                :1;
    };
} RA7PPSbits_t;
extern volatile RA7PPSbits_t RA7PPSbits __at(0x3A07);
// bitfield macros
#define _RA7PPS_RA7PPS0_POSN                                0x0
#define _RA7PPS_RA7PPS0_POSITION                            0x0
#define _RA7PPS_RA7PPS0_SIZE                                0x1
#define _RA7PPS_RA7PPS0_LENGTH                              0x1
#define _RA7PPS_RA7PPS0_MASK                                0x1
#define _RA7PPS_RA7PPS1_POSN                                0x1
#define _RA7PPS_RA7PPS1_POSITION                            0x1
#define _RA7PPS_RA7PPS1_SIZE                                0x1
#define _RA7PPS_RA7PPS1_LENGTH                              0x1
#define _RA7PPS_RA7PPS1_MASK                                0x2
#define _RA7PPS_RA7PPS2_POSN                                0x2
#define _RA7PPS_RA7PPS2_POSITION                            0x2
#define _RA7PPS_RA7PPS2_SIZE                                0x1
#define _RA7PPS_RA7PPS2_LENGTH                              0x1
#define _RA7PPS_RA7PPS2_MASK                                0x4
#define _RA7PPS_RA7PPS3_POSN                                0x3
#define _RA7PPS_RA7PPS3_POSITION                            0x3
#define _RA7PPS_RA7PPS3_SIZE                                0x1
#define _RA7PPS_RA7PPS3_LENGTH                              0x1
#define _RA7PPS_RA7PPS3_MASK                                0x8
#define _RA7PPS_RA7PPS4_POSN                                0x4
#define _RA7PPS_RA7PPS4_POSITION                            0x4
#define _RA7PPS_RA7PPS4_SIZE                                0x1
#define _RA7PPS_RA7PPS4_LENGTH                              0x1
#define _RA7PPS_RA7PPS4_MASK                                0x10
#define _RA7PPS_RA7PPS5_POSN                                0x5
#define _RA7PPS_RA7PPS5_POSITION                            0x5
#define _RA7PPS_RA7PPS5_SIZE                                0x1
#define _RA7PPS_RA7PPS5_LENGTH                              0x1
#define _RA7PPS_RA7PPS5_MASK                                0x20

// Register: RB0PPS
#define RB0PPS RB0PPS
extern volatile unsigned char           RB0PPS              __at(0x3A08);
#ifndef _LIB_BUILD
asm("RB0PPS equ 03A08h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RB0PPS0                :1;
        unsigned RB0PPS1                :1;
        unsigned RB0PPS2                :1;
        unsigned RB0PPS3                :1;
        unsigned RB0PPS4                :1;
        unsigned RB0PPS5                :1;
    };
} RB0PPSbits_t;
extern volatile RB0PPSbits_t RB0PPSbits __at(0x3A08);
// bitfield macros
#define _RB0PPS_RB0PPS0_POSN                                0x0
#define _RB0PPS_RB0PPS0_POSITION                            0x0
#define _RB0PPS_RB0PPS0_SIZE                                0x1
#define _RB0PPS_RB0PPS0_LENGTH                              0x1
#define _RB0PPS_RB0PPS0_MASK                                0x1
#define _RB0PPS_RB0PPS1_POSN                                0x1
#define _RB0PPS_RB0PPS1_POSITION                            0x1
#define _RB0PPS_RB0PPS1_SIZE                                0x1
#define _RB0PPS_RB0PPS1_LENGTH                              0x1
#define _RB0PPS_RB0PPS1_MASK                                0x2
#define _RB0PPS_RB0PPS2_POSN                                0x2
#define _RB0PPS_RB0PPS2_POSITION                            0x2
#define _RB0PPS_RB0PPS2_SIZE                                0x1
#define _RB0PPS_RB0PPS2_LENGTH                              0x1
#define _RB0PPS_RB0PPS2_MASK                                0x4
#define _RB0PPS_RB0PPS3_POSN                                0x3
#define _RB0PPS_RB0PPS3_POSITION                            0x3
#define _RB0PPS_RB0PPS3_SIZE                                0x1
#define _RB0PPS_RB0PPS3_LENGTH                              0x1
#define _RB0PPS_RB0PPS3_MASK                                0x8
#define _RB0PPS_RB0PPS4_POSN                                0x4
#define _RB0PPS_RB0PPS4_POSITION                            0x4
#define _RB0PPS_RB0PPS4_SIZE                                0x1
#define _RB0PPS_RB0PPS4_LENGTH                              0x1
#define _RB0PPS_RB0PPS4_MASK                                0x10
#define _RB0PPS_RB0PPS5_POSN                                0x5
#define _RB0PPS_RB0PPS5_POSITION                            0x5
#define _RB0PPS_RB0PPS5_SIZE                                0x1
#define _RB0PPS_RB0PPS5_LENGTH                              0x1
#define _RB0PPS_RB0PPS5_MASK                                0x20

// Register: RB1PPS
#define RB1PPS RB1PPS
extern volatile unsigned char           RB1PPS              __at(0x3A09);
#ifndef _LIB_BUILD
asm("RB1PPS equ 03A09h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RB1PPS0                :1;
        unsigned RB1PPS1                :1;
        unsigned RB1PPS2                :1;
        unsigned RB1PPS3                :1;
        unsigned RB1PPS4                :1;
        unsigned RB1PPS5                :1;
    };
} RB1PPSbits_t;
extern volatile RB1PPSbits_t RB1PPSbits __at(0x3A09);
// bitfield macros
#define _RB1PPS_RB1PPS0_POSN                                0x0
#define _RB1PPS_RB1PPS0_POSITION                            0x0
#define _RB1PPS_RB1PPS0_SIZE                                0x1
#define _RB1PPS_RB1PPS0_LENGTH                              0x1
#define _RB1PPS_RB1PPS0_MASK                                0x1
#define _RB1PPS_RB1PPS1_POSN                                0x1
#define _RB1PPS_RB1PPS1_POSITION                            0x1
#define _RB1PPS_RB1PPS1_SIZE                                0x1
#define _RB1PPS_RB1PPS1_LENGTH                              0x1
#define _RB1PPS_RB1PPS1_MASK                                0x2
#define _RB1PPS_RB1PPS2_POSN                                0x2
#define _RB1PPS_RB1PPS2_POSITION                            0x2
#define _RB1PPS_RB1PPS2_SIZE                                0x1
#define _RB1PPS_RB1PPS2_LENGTH                              0x1
#define _RB1PPS_RB1PPS2_MASK                                0x4
#define _RB1PPS_RB1PPS3_POSN                                0x3
#define _RB1PPS_RB1PPS3_POSITION                            0x3
#define _RB1PPS_RB1PPS3_SIZE                                0x1
#define _RB1PPS_RB1PPS3_LENGTH                              0x1
#define _RB1PPS_RB1PPS3_MASK                                0x8
#define _RB1PPS_RB1PPS4_POSN                                0x4
#define _RB1PPS_RB1PPS4_POSITION                            0x4
#define _RB1PPS_RB1PPS4_SIZE                                0x1
#define _RB1PPS_RB1PPS4_LENGTH                              0x1
#define _RB1PPS_RB1PPS4_MASK                                0x10
#define _RB1PPS_RB1PPS5_POSN                                0x5
#define _RB1PPS_RB1PPS5_POSITION                            0x5
#define _RB1PPS_RB1PPS5_SIZE                                0x1
#define _RB1PPS_RB1PPS5_LENGTH                              0x1
#define _RB1PPS_RB1PPS5_MASK                                0x20

// Register: RB2PPS
#define RB2PPS RB2PPS
extern volatile unsigned char           RB2PPS              __at(0x3A0A);
#ifndef _LIB_BUILD
asm("RB2PPS equ 03A0Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RB2PPS0                :1;
        unsigned RB2PPS1                :1;
        unsigned RB2PPS2                :1;
        unsigned RB2PPS3                :1;
        unsigned RB2PPS4                :1;
        unsigned RB2PPS5                :1;
    };
} RB2PPSbits_t;
extern volatile RB2PPSbits_t RB2PPSbits __at(0x3A0A);
// bitfield macros
#define _RB2PPS_RB2PPS0_POSN                                0x0
#define _RB2PPS_RB2PPS0_POSITION                            0x0
#define _RB2PPS_RB2PPS0_SIZE                                0x1
#define _RB2PPS_RB2PPS0_LENGTH                              0x1
#define _RB2PPS_RB2PPS0_MASK                                0x1
#define _RB2PPS_RB2PPS1_POSN                                0x1
#define _RB2PPS_RB2PPS1_POSITION                            0x1
#define _RB2PPS_RB2PPS1_SIZE                                0x1
#define _RB2PPS_RB2PPS1_LENGTH                              0x1
#define _RB2PPS_RB2PPS1_MASK                                0x2
#define _RB2PPS_RB2PPS2_POSN                                0x2
#define _RB2PPS_RB2PPS2_POSITION                            0x2
#define _RB2PPS_RB2PPS2_SIZE                                0x1
#define _RB2PPS_RB2PPS2_LENGTH                              0x1
#define _RB2PPS_RB2PPS2_MASK                                0x4
#define _RB2PPS_RB2PPS3_POSN                                0x3
#define _RB2PPS_RB2PPS3_POSITION                            0x3
#define _RB2PPS_RB2PPS3_SIZE                                0x1
#define _RB2PPS_RB2PPS3_LENGTH                              0x1
#define _RB2PPS_RB2PPS3_MASK                                0x8
#define _RB2PPS_RB2PPS4_POSN                                0x4
#define _RB2PPS_RB2PPS4_POSITION                            0x4
#define _RB2PPS_RB2PPS4_SIZE                                0x1
#define _RB2PPS_RB2PPS4_LENGTH                              0x1
#define _RB2PPS_RB2PPS4_MASK                                0x10
#define _RB2PPS_RB2PPS5_POSN                                0x5
#define _RB2PPS_RB2PPS5_POSITION                            0x5
#define _RB2PPS_RB2PPS5_SIZE                                0x1
#define _RB2PPS_RB2PPS5_LENGTH                              0x1
#define _RB2PPS_RB2PPS5_MASK                                0x20

// Register: RB3PPS
#define RB3PPS RB3PPS
extern volatile unsigned char           RB3PPS              __at(0x3A0B);
#ifndef _LIB_BUILD
asm("RB3PPS equ 03A0Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RB3PPS0                :1;
        unsigned RB3PPS1                :1;
        unsigned RB3PPS2                :1;
        unsigned RB3PPS3                :1;
        unsigned RB3PPS4                :1;
        unsigned RB3PPS5                :1;
    };
} RB3PPSbits_t;
extern volatile RB3PPSbits_t RB3PPSbits __at(0x3A0B);
// bitfield macros
#define _RB3PPS_RB3PPS0_POSN                                0x0
#define _RB3PPS_RB3PPS0_POSITION                            0x0
#define _RB3PPS_RB3PPS0_SIZE                                0x1
#define _RB3PPS_RB3PPS0_LENGTH                              0x1
#define _RB3PPS_RB3PPS0_MASK                                0x1
#define _RB3PPS_RB3PPS1_POSN                                0x1
#define _RB3PPS_RB3PPS1_POSITION                            0x1
#define _RB3PPS_RB3PPS1_SIZE                                0x1
#define _RB3PPS_RB3PPS1_LENGTH                              0x1
#define _RB3PPS_RB3PPS1_MASK                                0x2
#define _RB3PPS_RB3PPS2_POSN                                0x2
#define _RB3PPS_RB3PPS2_POSITION                            0x2
#define _RB3PPS_RB3PPS2_SIZE                                0x1
#define _RB3PPS_RB3PPS2_LENGTH                              0x1
#define _RB3PPS_RB3PPS2_MASK                                0x4
#define _RB3PPS_RB3PPS3_POSN                                0x3
#define _RB3PPS_RB3PPS3_POSITION                            0x3
#define _RB3PPS_RB3PPS3_SIZE                                0x1
#define _RB3PPS_RB3PPS3_LENGTH                              0x1
#define _RB3PPS_RB3PPS3_MASK                                0x8
#define _RB3PPS_RB3PPS4_POSN                                0x4
#define _RB3PPS_RB3PPS4_POSITION                            0x4
#define _RB3PPS_RB3PPS4_SIZE                                0x1
#define _RB3PPS_RB3PPS4_LENGTH                              0x1
#define _RB3PPS_RB3PPS4_MASK                                0x10
#define _RB3PPS_RB3PPS5_POSN                                0x5
#define _RB3PPS_RB3PPS5_POSITION                            0x5
#define _RB3PPS_RB3PPS5_SIZE                                0x1
#define _RB3PPS_RB3PPS5_LENGTH                              0x1
#define _RB3PPS_RB3PPS5_MASK                                0x20

// Register: RB4PPS
#define RB4PPS RB4PPS
extern volatile unsigned char           RB4PPS              __at(0x3A0C);
#ifndef _LIB_BUILD
asm("RB4PPS equ 03A0Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RB4PPS0                :1;
        unsigned RB4PPS1                :1;
        unsigned RB4PPS2                :1;
        unsigned RB4PPS3                :1;
        unsigned RB4PPS4                :1;
        unsigned RB4PPS5                :1;
    };
} RB4PPSbits_t;
extern volatile RB4PPSbits_t RB4PPSbits __at(0x3A0C);
// bitfield macros
#define _RB4PPS_RB4PPS0_POSN                                0x0
#define _RB4PPS_RB4PPS0_POSITION                            0x0
#define _RB4PPS_RB4PPS0_SIZE                                0x1
#define _RB4PPS_RB4PPS0_LENGTH                              0x1
#define _RB4PPS_RB4PPS0_MASK                                0x1
#define _RB4PPS_RB4PPS1_POSN                                0x1
#define _RB4PPS_RB4PPS1_POSITION                            0x1
#define _RB4PPS_RB4PPS1_SIZE                                0x1
#define _RB4PPS_RB4PPS1_LENGTH                              0x1
#define _RB4PPS_RB4PPS1_MASK                                0x2
#define _RB4PPS_RB4PPS2_POSN                                0x2
#define _RB4PPS_RB4PPS2_POSITION                            0x2
#define _RB4PPS_RB4PPS2_SIZE                                0x1
#define _RB4PPS_RB4PPS2_LENGTH                              0x1
#define _RB4PPS_RB4PPS2_MASK                                0x4
#define _RB4PPS_RB4PPS3_POSN                                0x3
#define _RB4PPS_RB4PPS3_POSITION                            0x3
#define _RB4PPS_RB4PPS3_SIZE                                0x1
#define _RB4PPS_RB4PPS3_LENGTH                              0x1
#define _RB4PPS_RB4PPS3_MASK                                0x8
#define _RB4PPS_RB4PPS4_POSN                                0x4
#define _RB4PPS_RB4PPS4_POSITION                            0x4
#define _RB4PPS_RB4PPS4_SIZE                                0x1
#define _RB4PPS_RB4PPS4_LENGTH                              0x1
#define _RB4PPS_RB4PPS4_MASK                                0x10
#define _RB4PPS_RB4PPS5_POSN                                0x5
#define _RB4PPS_RB4PPS5_POSITION                            0x5
#define _RB4PPS_RB4PPS5_SIZE                                0x1
#define _RB4PPS_RB4PPS5_LENGTH                              0x1
#define _RB4PPS_RB4PPS5_MASK                                0x20

// Register: RB5PPS
#define RB5PPS RB5PPS
extern volatile unsigned char           RB5PPS              __at(0x3A0D);
#ifndef _LIB_BUILD
asm("RB5PPS equ 03A0Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RB5PPS0                :1;
        unsigned RB5PPS1                :1;
        unsigned RB5PPS2                :1;
        unsigned RB5PPS3                :1;
        unsigned RB5PPS4                :1;
        unsigned RB5PPS5                :1;
    };
} RB5PPSbits_t;
extern volatile RB5PPSbits_t RB5PPSbits __at(0x3A0D);
// bitfield macros
#define _RB5PPS_RB5PPS0_POSN                                0x0
#define _RB5PPS_RB5PPS0_POSITION                            0x0
#define _RB5PPS_RB5PPS0_SIZE                                0x1
#define _RB5PPS_RB5PPS0_LENGTH                              0x1
#define _RB5PPS_RB5PPS0_MASK                                0x1
#define _RB5PPS_RB5PPS1_POSN                                0x1
#define _RB5PPS_RB5PPS1_POSITION                            0x1
#define _RB5PPS_RB5PPS1_SIZE                                0x1
#define _RB5PPS_RB5PPS1_LENGTH                              0x1
#define _RB5PPS_RB5PPS1_MASK                                0x2
#define _RB5PPS_RB5PPS2_POSN                                0x2
#define _RB5PPS_RB5PPS2_POSITION                            0x2
#define _RB5PPS_RB5PPS2_SIZE                                0x1
#define _RB5PPS_RB5PPS2_LENGTH                              0x1
#define _RB5PPS_RB5PPS2_MASK                                0x4
#define _RB5PPS_RB5PPS3_POSN                                0x3
#define _RB5PPS_RB5PPS3_POSITION                            0x3
#define _RB5PPS_RB5PPS3_SIZE                                0x1
#define _RB5PPS_RB5PPS3_LENGTH                              0x1
#define _RB5PPS_RB5PPS3_MASK                                0x8
#define _RB5PPS_RB5PPS4_POSN                                0x4
#define _RB5PPS_RB5PPS4_POSITION                            0x4
#define _RB5PPS_RB5PPS4_SIZE                                0x1
#define _RB5PPS_RB5PPS4_LENGTH                              0x1
#define _RB5PPS_RB5PPS4_MASK                                0x10
#define _RB5PPS_RB5PPS5_POSN                                0x5
#define _RB5PPS_RB5PPS5_POSITION                            0x5
#define _RB5PPS_RB5PPS5_SIZE                                0x1
#define _RB5PPS_RB5PPS5_LENGTH                              0x1
#define _RB5PPS_RB5PPS5_MASK                                0x20

// Register: RB6PPS
#define RB6PPS RB6PPS
extern volatile unsigned char           RB6PPS              __at(0x3A0E);
#ifndef _LIB_BUILD
asm("RB6PPS equ 03A0Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RB6PPS0                :1;
        unsigned RB6PPS1                :1;
        unsigned RB6PPS2                :1;
        unsigned RB6PPS3                :1;
        unsigned RB6PPS4                :1;
        unsigned RB6PPS5                :1;
    };
} RB6PPSbits_t;
extern volatile RB6PPSbits_t RB6PPSbits __at(0x3A0E);
// bitfield macros
#define _RB6PPS_RB6PPS0_POSN                                0x0
#define _RB6PPS_RB6PPS0_POSITION                            0x0
#define _RB6PPS_RB6PPS0_SIZE                                0x1
#define _RB6PPS_RB6PPS0_LENGTH                              0x1
#define _RB6PPS_RB6PPS0_MASK                                0x1
#define _RB6PPS_RB6PPS1_POSN                                0x1
#define _RB6PPS_RB6PPS1_POSITION                            0x1
#define _RB6PPS_RB6PPS1_SIZE                                0x1
#define _RB6PPS_RB6PPS1_LENGTH                              0x1
#define _RB6PPS_RB6PPS1_MASK                                0x2
#define _RB6PPS_RB6PPS2_POSN                                0x2
#define _RB6PPS_RB6PPS2_POSITION                            0x2
#define _RB6PPS_RB6PPS2_SIZE                                0x1
#define _RB6PPS_RB6PPS2_LENGTH                              0x1
#define _RB6PPS_RB6PPS2_MASK                                0x4
#define _RB6PPS_RB6PPS3_POSN                                0x3
#define _RB6PPS_RB6PPS3_POSITION                            0x3
#define _RB6PPS_RB6PPS3_SIZE                                0x1
#define _RB6PPS_RB6PPS3_LENGTH                              0x1
#define _RB6PPS_RB6PPS3_MASK                                0x8
#define _RB6PPS_RB6PPS4_POSN                                0x4
#define _RB6PPS_RB6PPS4_POSITION                            0x4
#define _RB6PPS_RB6PPS4_SIZE                                0x1
#define _RB6PPS_RB6PPS4_LENGTH                              0x1
#define _RB6PPS_RB6PPS4_MASK                                0x10
#define _RB6PPS_RB6PPS5_POSN                                0x5
#define _RB6PPS_RB6PPS5_POSITION                            0x5
#define _RB6PPS_RB6PPS5_SIZE                                0x1
#define _RB6PPS_RB6PPS5_LENGTH                              0x1
#define _RB6PPS_RB6PPS5_MASK                                0x20

// Register: RB7PPS
#define RB7PPS RB7PPS
extern volatile unsigned char           RB7PPS              __at(0x3A0F);
#ifndef _LIB_BUILD
asm("RB7PPS equ 03A0Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RB7PPS0                :1;
        unsigned RB7PPS1                :1;
        unsigned RB7PPS2                :1;
        unsigned RB7PPS3                :1;
        unsigned RB7PPS4                :1;
        unsigned RB7PPS5                :1;
    };
} RB7PPSbits_t;
extern volatile RB7PPSbits_t RB7PPSbits __at(0x3A0F);
// bitfield macros
#define _RB7PPS_RB7PPS0_POSN                                0x0
#define _RB7PPS_RB7PPS0_POSITION                            0x0
#define _RB7PPS_RB7PPS0_SIZE                                0x1
#define _RB7PPS_RB7PPS0_LENGTH                              0x1
#define _RB7PPS_RB7PPS0_MASK                                0x1
#define _RB7PPS_RB7PPS1_POSN                                0x1
#define _RB7PPS_RB7PPS1_POSITION                            0x1
#define _RB7PPS_RB7PPS1_SIZE                                0x1
#define _RB7PPS_RB7PPS1_LENGTH                              0x1
#define _RB7PPS_RB7PPS1_MASK                                0x2
#define _RB7PPS_RB7PPS2_POSN                                0x2
#define _RB7PPS_RB7PPS2_POSITION                            0x2
#define _RB7PPS_RB7PPS2_SIZE                                0x1
#define _RB7PPS_RB7PPS2_LENGTH                              0x1
#define _RB7PPS_RB7PPS2_MASK                                0x4
#define _RB7PPS_RB7PPS3_POSN                                0x3
#define _RB7PPS_RB7PPS3_POSITION                            0x3
#define _RB7PPS_RB7PPS3_SIZE                                0x1
#define _RB7PPS_RB7PPS3_LENGTH                              0x1
#define _RB7PPS_RB7PPS3_MASK                                0x8
#define _RB7PPS_RB7PPS4_POSN                                0x4
#define _RB7PPS_RB7PPS4_POSITION                            0x4
#define _RB7PPS_RB7PPS4_SIZE                                0x1
#define _RB7PPS_RB7PPS4_LENGTH                              0x1
#define _RB7PPS_RB7PPS4_MASK                                0x10
#define _RB7PPS_RB7PPS5_POSN                                0x5
#define _RB7PPS_RB7PPS5_POSITION                            0x5
#define _RB7PPS_RB7PPS5_SIZE                                0x1
#define _RB7PPS_RB7PPS5_LENGTH                              0x1
#define _RB7PPS_RB7PPS5_MASK                                0x20

// Register: RC0PPS
#define RC0PPS RC0PPS
extern volatile unsigned char           RC0PPS              __at(0x3A10);
#ifndef _LIB_BUILD
asm("RC0PPS equ 03A10h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC0PPS0                :1;
        unsigned RC0PPS1                :1;
        unsigned RC0PPS2                :1;
        unsigned RC0PPS3                :1;
        unsigned RC0PPS4                :1;
        unsigned RC0PPS5                :1;
    };
} RC0PPSbits_t;
extern volatile RC0PPSbits_t RC0PPSbits __at(0x3A10);
// bitfield macros
#define _RC0PPS_RC0PPS0_POSN                                0x0
#define _RC0PPS_RC0PPS0_POSITION                            0x0
#define _RC0PPS_RC0PPS0_SIZE                                0x1
#define _RC0PPS_RC0PPS0_LENGTH                              0x1
#define _RC0PPS_RC0PPS0_MASK                                0x1
#define _RC0PPS_RC0PPS1_POSN                                0x1
#define _RC0PPS_RC0PPS1_POSITION                            0x1
#define _RC0PPS_RC0PPS1_SIZE                                0x1
#define _RC0PPS_RC0PPS1_LENGTH                              0x1
#define _RC0PPS_RC0PPS1_MASK                                0x2
#define _RC0PPS_RC0PPS2_POSN                                0x2
#define _RC0PPS_RC0PPS2_POSITION                            0x2
#define _RC0PPS_RC0PPS2_SIZE                                0x1
#define _RC0PPS_RC0PPS2_LENGTH                              0x1
#define _RC0PPS_RC0PPS2_MASK                                0x4
#define _RC0PPS_RC0PPS3_POSN                                0x3
#define _RC0PPS_RC0PPS3_POSITION                            0x3
#define _RC0PPS_RC0PPS3_SIZE                                0x1
#define _RC0PPS_RC0PPS3_LENGTH                              0x1
#define _RC0PPS_RC0PPS3_MASK                                0x8
#define _RC0PPS_RC0PPS4_POSN                                0x4
#define _RC0PPS_RC0PPS4_POSITION                            0x4
#define _RC0PPS_RC0PPS4_SIZE                                0x1
#define _RC0PPS_RC0PPS4_LENGTH                              0x1
#define _RC0PPS_RC0PPS4_MASK                                0x10
#define _RC0PPS_RC0PPS5_POSN                                0x5
#define _RC0PPS_RC0PPS5_POSITION                            0x5
#define _RC0PPS_RC0PPS5_SIZE                                0x1
#define _RC0PPS_RC0PPS5_LENGTH                              0x1
#define _RC0PPS_RC0PPS5_MASK                                0x20

// Register: RC1PPS
#define RC1PPS RC1PPS
extern volatile unsigned char           RC1PPS              __at(0x3A11);
#ifndef _LIB_BUILD
asm("RC1PPS equ 03A11h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC1PPS0                :1;
        unsigned RC1PPS1                :1;
        unsigned RC1PPS2                :1;
        unsigned RC1PPS3                :1;
        unsigned RC1PPS4                :1;
        unsigned RC1PPS5                :1;
    };
} RC1PPSbits_t;
extern volatile RC1PPSbits_t RC1PPSbits __at(0x3A11);
// bitfield macros
#define _RC1PPS_RC1PPS0_POSN                                0x0
#define _RC1PPS_RC1PPS0_POSITION                            0x0
#define _RC1PPS_RC1PPS0_SIZE                                0x1
#define _RC1PPS_RC1PPS0_LENGTH                              0x1
#define _RC1PPS_RC1PPS0_MASK                                0x1
#define _RC1PPS_RC1PPS1_POSN                                0x1
#define _RC1PPS_RC1PPS1_POSITION                            0x1
#define _RC1PPS_RC1PPS1_SIZE                                0x1
#define _RC1PPS_RC1PPS1_LENGTH                              0x1
#define _RC1PPS_RC1PPS1_MASK                                0x2
#define _RC1PPS_RC1PPS2_POSN                                0x2
#define _RC1PPS_RC1PPS2_POSITION                            0x2
#define _RC1PPS_RC1PPS2_SIZE                                0x1
#define _RC1PPS_RC1PPS2_LENGTH                              0x1
#define _RC1PPS_RC1PPS2_MASK                                0x4
#define _RC1PPS_RC1PPS3_POSN                                0x3
#define _RC1PPS_RC1PPS3_POSITION                            0x3
#define _RC1PPS_RC1PPS3_SIZE                                0x1
#define _RC1PPS_RC1PPS3_LENGTH                              0x1
#define _RC1PPS_RC1PPS3_MASK                                0x8
#define _RC1PPS_RC1PPS4_POSN                                0x4
#define _RC1PPS_RC1PPS4_POSITION                            0x4
#define _RC1PPS_RC1PPS4_SIZE                                0x1
#define _RC1PPS_RC1PPS4_LENGTH                              0x1
#define _RC1PPS_RC1PPS4_MASK                                0x10
#define _RC1PPS_RC1PPS5_POSN                                0x5
#define _RC1PPS_RC1PPS5_POSITION                            0x5
#define _RC1PPS_RC1PPS5_SIZE                                0x1
#define _RC1PPS_RC1PPS5_LENGTH                              0x1
#define _RC1PPS_RC1PPS5_MASK                                0x20

// Register: RC2PPS
#define RC2PPS RC2PPS
extern volatile unsigned char           RC2PPS              __at(0x3A12);
#ifndef _LIB_BUILD
asm("RC2PPS equ 03A12h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC2PPS0                :1;
        unsigned RC2PPS1                :1;
        unsigned RC2PPS2                :1;
        unsigned RC2PPS3                :1;
        unsigned RC2PPS4                :1;
        unsigned RC2PPS5                :1;
    };
} RC2PPSbits_t;
extern volatile RC2PPSbits_t RC2PPSbits __at(0x3A12);
// bitfield macros
#define _RC2PPS_RC2PPS0_POSN                                0x0
#define _RC2PPS_RC2PPS0_POSITION                            0x0
#define _RC2PPS_RC2PPS0_SIZE                                0x1
#define _RC2PPS_RC2PPS0_LENGTH                              0x1
#define _RC2PPS_RC2PPS0_MASK                                0x1
#define _RC2PPS_RC2PPS1_POSN                                0x1
#define _RC2PPS_RC2PPS1_POSITION                            0x1
#define _RC2PPS_RC2PPS1_SIZE                                0x1
#define _RC2PPS_RC2PPS1_LENGTH                              0x1
#define _RC2PPS_RC2PPS1_MASK                                0x2
#define _RC2PPS_RC2PPS2_POSN                                0x2
#define _RC2PPS_RC2PPS2_POSITION                            0x2
#define _RC2PPS_RC2PPS2_SIZE                                0x1
#define _RC2PPS_RC2PPS2_LENGTH                              0x1
#define _RC2PPS_RC2PPS2_MASK                                0x4
#define _RC2PPS_RC2PPS3_POSN                                0x3
#define _RC2PPS_RC2PPS3_POSITION                            0x3
#define _RC2PPS_RC2PPS3_SIZE                                0x1
#define _RC2PPS_RC2PPS3_LENGTH                              0x1
#define _RC2PPS_RC2PPS3_MASK                                0x8
#define _RC2PPS_RC2PPS4_POSN                                0x4
#define _RC2PPS_RC2PPS4_POSITION                            0x4
#define _RC2PPS_RC2PPS4_SIZE                                0x1
#define _RC2PPS_RC2PPS4_LENGTH                              0x1
#define _RC2PPS_RC2PPS4_MASK                                0x10
#define _RC2PPS_RC2PPS5_POSN                                0x5
#define _RC2PPS_RC2PPS5_POSITION                            0x5
#define _RC2PPS_RC2PPS5_SIZE                                0x1
#define _RC2PPS_RC2PPS5_LENGTH                              0x1
#define _RC2PPS_RC2PPS5_MASK                                0x20

// Register: RC3PPS
#define RC3PPS RC3PPS
extern volatile unsigned char           RC3PPS              __at(0x3A13);
#ifndef _LIB_BUILD
asm("RC3PPS equ 03A13h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC3PPS0                :1;
        unsigned RC3PPS1                :1;
        unsigned RC3PPS2                :1;
        unsigned RC3PPS3                :1;
        unsigned RC3PPS4                :1;
        unsigned RC3PPS5                :1;
    };
} RC3PPSbits_t;
extern volatile RC3PPSbits_t RC3PPSbits __at(0x3A13);
// bitfield macros
#define _RC3PPS_RC3PPS0_POSN                                0x0
#define _RC3PPS_RC3PPS0_POSITION                            0x0
#define _RC3PPS_RC3PPS0_SIZE                                0x1
#define _RC3PPS_RC3PPS0_LENGTH                              0x1
#define _RC3PPS_RC3PPS0_MASK                                0x1
#define _RC3PPS_RC3PPS1_POSN                                0x1
#define _RC3PPS_RC3PPS1_POSITION                            0x1
#define _RC3PPS_RC3PPS1_SIZE                                0x1
#define _RC3PPS_RC3PPS1_LENGTH                              0x1
#define _RC3PPS_RC3PPS1_MASK                                0x2
#define _RC3PPS_RC3PPS2_POSN                                0x2
#define _RC3PPS_RC3PPS2_POSITION                            0x2
#define _RC3PPS_RC3PPS2_SIZE                                0x1
#define _RC3PPS_RC3PPS2_LENGTH                              0x1
#define _RC3PPS_RC3PPS2_MASK                                0x4
#define _RC3PPS_RC3PPS3_POSN                                0x3
#define _RC3PPS_RC3PPS3_POSITION                            0x3
#define _RC3PPS_RC3PPS3_SIZE                                0x1
#define _RC3PPS_RC3PPS3_LENGTH                              0x1
#define _RC3PPS_RC3PPS3_MASK                                0x8
#define _RC3PPS_RC3PPS4_POSN                                0x4
#define _RC3PPS_RC3PPS4_POSITION                            0x4
#define _RC3PPS_RC3PPS4_SIZE                                0x1
#define _RC3PPS_RC3PPS4_LENGTH                              0x1
#define _RC3PPS_RC3PPS4_MASK                                0x10
#define _RC3PPS_RC3PPS5_POSN                                0x5
#define _RC3PPS_RC3PPS5_POSITION                            0x5
#define _RC3PPS_RC3PPS5_SIZE                                0x1
#define _RC3PPS_RC3PPS5_LENGTH                              0x1
#define _RC3PPS_RC3PPS5_MASK                                0x20

// Register: RC4PPS
#define RC4PPS RC4PPS
extern volatile unsigned char           RC4PPS              __at(0x3A14);
#ifndef _LIB_BUILD
asm("RC4PPS equ 03A14h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC4PPS0                :1;
        unsigned RC4PPS1                :1;
        unsigned RC4PPS2                :1;
        unsigned RC4PPS3                :1;
        unsigned RC4PPS4                :1;
        unsigned RC4PPS5                :1;
    };
} RC4PPSbits_t;
extern volatile RC4PPSbits_t RC4PPSbits __at(0x3A14);
// bitfield macros
#define _RC4PPS_RC4PPS0_POSN                                0x0
#define _RC4PPS_RC4PPS0_POSITION                            0x0
#define _RC4PPS_RC4PPS0_SIZE                                0x1
#define _RC4PPS_RC4PPS0_LENGTH                              0x1
#define _RC4PPS_RC4PPS0_MASK                                0x1
#define _RC4PPS_RC4PPS1_POSN                                0x1
#define _RC4PPS_RC4PPS1_POSITION                            0x1
#define _RC4PPS_RC4PPS1_SIZE                                0x1
#define _RC4PPS_RC4PPS1_LENGTH                              0x1
#define _RC4PPS_RC4PPS1_MASK                                0x2
#define _RC4PPS_RC4PPS2_POSN                                0x2
#define _RC4PPS_RC4PPS2_POSITION                            0x2
#define _RC4PPS_RC4PPS2_SIZE                                0x1
#define _RC4PPS_RC4PPS2_LENGTH                              0x1
#define _RC4PPS_RC4PPS2_MASK                                0x4
#define _RC4PPS_RC4PPS3_POSN                                0x3
#define _RC4PPS_RC4PPS3_POSITION                            0x3
#define _RC4PPS_RC4PPS3_SIZE                                0x1
#define _RC4PPS_RC4PPS3_LENGTH                              0x1
#define _RC4PPS_RC4PPS3_MASK                                0x8
#define _RC4PPS_RC4PPS4_POSN                                0x4
#define _RC4PPS_RC4PPS4_POSITION                            0x4
#define _RC4PPS_RC4PPS4_SIZE                                0x1
#define _RC4PPS_RC4PPS4_LENGTH                              0x1
#define _RC4PPS_RC4PPS4_MASK                                0x10
#define _RC4PPS_RC4PPS5_POSN                                0x5
#define _RC4PPS_RC4PPS5_POSITION                            0x5
#define _RC4PPS_RC4PPS5_SIZE                                0x1
#define _RC4PPS_RC4PPS5_LENGTH                              0x1
#define _RC4PPS_RC4PPS5_MASK                                0x20

// Register: RC5PPS
#define RC5PPS RC5PPS
extern volatile unsigned char           RC5PPS              __at(0x3A15);
#ifndef _LIB_BUILD
asm("RC5PPS equ 03A15h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC5PPS0                :1;
        unsigned RC5PPS1                :1;
        unsigned RC5PPS2                :1;
        unsigned RC5PPS3                :1;
        unsigned RC5PPS4                :1;
        unsigned RC5PPS5                :1;
    };
} RC5PPSbits_t;
extern volatile RC5PPSbits_t RC5PPSbits __at(0x3A15);
// bitfield macros
#define _RC5PPS_RC5PPS0_POSN                                0x0
#define _RC5PPS_RC5PPS0_POSITION                            0x0
#define _RC5PPS_RC5PPS0_SIZE                                0x1
#define _RC5PPS_RC5PPS0_LENGTH                              0x1
#define _RC5PPS_RC5PPS0_MASK                                0x1
#define _RC5PPS_RC5PPS1_POSN                                0x1
#define _RC5PPS_RC5PPS1_POSITION                            0x1
#define _RC5PPS_RC5PPS1_SIZE                                0x1
#define _RC5PPS_RC5PPS1_LENGTH                              0x1
#define _RC5PPS_RC5PPS1_MASK                                0x2
#define _RC5PPS_RC5PPS2_POSN                                0x2
#define _RC5PPS_RC5PPS2_POSITION                            0x2
#define _RC5PPS_RC5PPS2_SIZE                                0x1
#define _RC5PPS_RC5PPS2_LENGTH                              0x1
#define _RC5PPS_RC5PPS2_MASK                                0x4
#define _RC5PPS_RC5PPS3_POSN                                0x3
#define _RC5PPS_RC5PPS3_POSITION                            0x3
#define _RC5PPS_RC5PPS3_SIZE                                0x1
#define _RC5PPS_RC5PPS3_LENGTH                              0x1
#define _RC5PPS_RC5PPS3_MASK                                0x8
#define _RC5PPS_RC5PPS4_POSN                                0x4
#define _RC5PPS_RC5PPS4_POSITION                            0x4
#define _RC5PPS_RC5PPS4_SIZE                                0x1
#define _RC5PPS_RC5PPS4_LENGTH                              0x1
#define _RC5PPS_RC5PPS4_MASK                                0x10
#define _RC5PPS_RC5PPS5_POSN                                0x5
#define _RC5PPS_RC5PPS5_POSITION                            0x5
#define _RC5PPS_RC5PPS5_SIZE                                0x1
#define _RC5PPS_RC5PPS5_LENGTH                              0x1
#define _RC5PPS_RC5PPS5_MASK                                0x20

// Register: RC6PPS
#define RC6PPS RC6PPS
extern volatile unsigned char           RC6PPS              __at(0x3A16);
#ifndef _LIB_BUILD
asm("RC6PPS equ 03A16h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC6PPS0                :1;
        unsigned RC6PPS1                :1;
        unsigned RC6PPS2                :1;
        unsigned RC6PPS3                :1;
        unsigned RC6PPS4                :1;
        unsigned RC6PPS5                :1;
    };
} RC6PPSbits_t;
extern volatile RC6PPSbits_t RC6PPSbits __at(0x3A16);
// bitfield macros
#define _RC6PPS_RC6PPS0_POSN                                0x0
#define _RC6PPS_RC6PPS0_POSITION                            0x0
#define _RC6PPS_RC6PPS0_SIZE                                0x1
#define _RC6PPS_RC6PPS0_LENGTH                              0x1
#define _RC6PPS_RC6PPS0_MASK                                0x1
#define _RC6PPS_RC6PPS1_POSN                                0x1
#define _RC6PPS_RC6PPS1_POSITION                            0x1
#define _RC6PPS_RC6PPS1_SIZE                                0x1
#define _RC6PPS_RC6PPS1_LENGTH                              0x1
#define _RC6PPS_RC6PPS1_MASK                                0x2
#define _RC6PPS_RC6PPS2_POSN                                0x2
#define _RC6PPS_RC6PPS2_POSITION                            0x2
#define _RC6PPS_RC6PPS2_SIZE                                0x1
#define _RC6PPS_RC6PPS2_LENGTH                              0x1
#define _RC6PPS_RC6PPS2_MASK                                0x4
#define _RC6PPS_RC6PPS3_POSN                                0x3
#define _RC6PPS_RC6PPS3_POSITION                            0x3
#define _RC6PPS_RC6PPS3_SIZE                                0x1
#define _RC6PPS_RC6PPS3_LENGTH                              0x1
#define _RC6PPS_RC6PPS3_MASK                                0x8
#define _RC6PPS_RC6PPS4_POSN                                0x4
#define _RC6PPS_RC6PPS4_POSITION                            0x4
#define _RC6PPS_RC6PPS4_SIZE                                0x1
#define _RC6PPS_RC6PPS4_LENGTH                              0x1
#define _RC6PPS_RC6PPS4_MASK                                0x10
#define _RC6PPS_RC6PPS5_POSN                                0x5
#define _RC6PPS_RC6PPS5_POSITION                            0x5
#define _RC6PPS_RC6PPS5_SIZE                                0x1
#define _RC6PPS_RC6PPS5_LENGTH                              0x1
#define _RC6PPS_RC6PPS5_MASK                                0x20

// Register: RC7PPS
#define RC7PPS RC7PPS
extern volatile unsigned char           RC7PPS              __at(0x3A17);
#ifndef _LIB_BUILD
asm("RC7PPS equ 03A17h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC7PPS0                :1;
        unsigned RC7PPS1                :1;
        unsigned RC7PPS2                :1;
        unsigned RC7PPS3                :1;
        unsigned RC7PPS4                :1;
        unsigned RC7PPS5                :1;
    };
} RC7PPSbits_t;
extern volatile RC7PPSbits_t RC7PPSbits __at(0x3A17);
// bitfield macros
#define _RC7PPS_RC7PPS0_POSN                                0x0
#define _RC7PPS_RC7PPS0_POSITION                            0x0
#define _RC7PPS_RC7PPS0_SIZE                                0x1
#define _RC7PPS_RC7PPS0_LENGTH                              0x1
#define _RC7PPS_RC7PPS0_MASK                                0x1
#define _RC7PPS_RC7PPS1_POSN                                0x1
#define _RC7PPS_RC7PPS1_POSITION                            0x1
#define _RC7PPS_RC7PPS1_SIZE                                0x1
#define _RC7PPS_RC7PPS1_LENGTH                              0x1
#define _RC7PPS_RC7PPS1_MASK                                0x2
#define _RC7PPS_RC7PPS2_POSN                                0x2
#define _RC7PPS_RC7PPS2_POSITION                            0x2
#define _RC7PPS_RC7PPS2_SIZE                                0x1
#define _RC7PPS_RC7PPS2_LENGTH                              0x1
#define _RC7PPS_RC7PPS2_MASK                                0x4
#define _RC7PPS_RC7PPS3_POSN                                0x3
#define _RC7PPS_RC7PPS3_POSITION                            0x3
#define _RC7PPS_RC7PPS3_SIZE                                0x1
#define _RC7PPS_RC7PPS3_LENGTH                              0x1
#define _RC7PPS_RC7PPS3_MASK                                0x8
#define _RC7PPS_RC7PPS4_POSN                                0x4
#define _RC7PPS_RC7PPS4_POSITION                            0x4
#define _RC7PPS_RC7PPS4_SIZE                                0x1
#define _RC7PPS_RC7PPS4_LENGTH                              0x1
#define _RC7PPS_RC7PPS4_MASK                                0x10
#define _RC7PPS_RC7PPS5_POSN                                0x5
#define _RC7PPS_RC7PPS5_POSITION                            0x5
#define _RC7PPS_RC7PPS5_SIZE                                0x1
#define _RC7PPS_RC7PPS5_LENGTH                              0x1
#define _RC7PPS_RC7PPS5_MASK                                0x20

// Register: ANSELA
#define ANSELA ANSELA
extern volatile unsigned char           ANSELA              __at(0x3A40);
#ifndef _LIB_BUILD
asm("ANSELA equ 03A40h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ANSELA0                :1;
        unsigned ANSELA1                :1;
        unsigned ANSELA2                :1;
        unsigned ANSELA3                :1;
        unsigned ANSELA4                :1;
        unsigned ANSELA5                :1;
        unsigned ANSELA6                :1;
        unsigned ANSELA7                :1;
    };
} ANSELAbits_t;
extern volatile ANSELAbits_t ANSELAbits __at(0x3A40);
// bitfield macros
#define _ANSELA_ANSELA0_POSN                                0x0
#define _ANSELA_ANSELA0_POSITION                            0x0
#define _ANSELA_ANSELA0_SIZE                                0x1
#define _ANSELA_ANSELA0_LENGTH                              0x1
#define _ANSELA_ANSELA0_MASK                                0x1
#define _ANSELA_ANSELA1_POSN                                0x1
#define _ANSELA_ANSELA1_POSITION                            0x1
#define _ANSELA_ANSELA1_SIZE                                0x1
#define _ANSELA_ANSELA1_LENGTH                              0x1
#define _ANSELA_ANSELA1_MASK                                0x2
#define _ANSELA_ANSELA2_POSN                                0x2
#define _ANSELA_ANSELA2_POSITION                            0x2
#define _ANSELA_ANSELA2_SIZE                                0x1
#define _ANSELA_ANSELA2_LENGTH                              0x1
#define _ANSELA_ANSELA2_MASK                                0x4
#define _ANSELA_ANSELA3_POSN                                0x3
#define _ANSELA_ANSELA3_POSITION                            0x3
#define _ANSELA_ANSELA3_SIZE                                0x1
#define _ANSELA_ANSELA3_LENGTH                              0x1
#define _ANSELA_ANSELA3_MASK                                0x8
#define _ANSELA_ANSELA4_POSN                                0x4
#define _ANSELA_ANSELA4_POSITION                            0x4
#define _ANSELA_ANSELA4_SIZE                                0x1
#define _ANSELA_ANSELA4_LENGTH                              0x1
#define _ANSELA_ANSELA4_MASK                                0x10
#define _ANSELA_ANSELA5_POSN                                0x5
#define _ANSELA_ANSELA5_POSITION                            0x5
#define _ANSELA_ANSELA5_SIZE                                0x1
#define _ANSELA_ANSELA5_LENGTH                              0x1
#define _ANSELA_ANSELA5_MASK                                0x20
#define _ANSELA_ANSELA6_POSN                                0x6
#define _ANSELA_ANSELA6_POSITION                            0x6
#define _ANSELA_ANSELA6_SIZE                                0x1
#define _ANSELA_ANSELA6_LENGTH                              0x1
#define _ANSELA_ANSELA6_MASK                                0x40
#define _ANSELA_ANSELA7_POSN                                0x7
#define _ANSELA_ANSELA7_POSITION                            0x7
#define _ANSELA_ANSELA7_SIZE                                0x1
#define _ANSELA_ANSELA7_LENGTH                              0x1
#define _ANSELA_ANSELA7_MASK                                0x80

// Register: WPUA
#define WPUA WPUA
extern volatile unsigned char           WPUA                __at(0x3A41);
#ifndef _LIB_BUILD
asm("WPUA equ 03A41h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WPUA0                  :1;
        unsigned WPUA1                  :1;
        unsigned WPUA2                  :1;
        unsigned WPUA3                  :1;
        unsigned WPUA4                  :1;
        unsigned WPUA5                  :1;
        unsigned WPUA6                  :1;
        unsigned WPUA7                  :1;
    };
} WPUAbits_t;
extern volatile WPUAbits_t WPUAbits __at(0x3A41);
// bitfield macros
#define _WPUA_WPUA0_POSN                                    0x0
#define _WPUA_WPUA0_POSITION                                0x0
#define _WPUA_WPUA0_SIZE                                    0x1
#define _WPUA_WPUA0_LENGTH                                  0x1
#define _WPUA_WPUA0_MASK                                    0x1
#define _WPUA_WPUA1_POSN                                    0x1
#define _WPUA_WPUA1_POSITION                                0x1
#define _WPUA_WPUA1_SIZE                                    0x1
#define _WPUA_WPUA1_LENGTH                                  0x1
#define _WPUA_WPUA1_MASK                                    0x2
#define _WPUA_WPUA2_POSN                                    0x2
#define _WPUA_WPUA2_POSITION                                0x2
#define _WPUA_WPUA2_SIZE                                    0x1
#define _WPUA_WPUA2_LENGTH                                  0x1
#define _WPUA_WPUA2_MASK                                    0x4
#define _WPUA_WPUA3_POSN                                    0x3
#define _WPUA_WPUA3_POSITION                                0x3
#define _WPUA_WPUA3_SIZE                                    0x1
#define _WPUA_WPUA3_LENGTH                                  0x1
#define _WPUA_WPUA3_MASK                                    0x8
#define _WPUA_WPUA4_POSN                                    0x4
#define _WPUA_WPUA4_POSITION                                0x4
#define _WPUA_WPUA4_SIZE                                    0x1
#define _WPUA_WPUA4_LENGTH                                  0x1
#define _WPUA_WPUA4_MASK                                    0x10
#define _WPUA_WPUA5_POSN                                    0x5
#define _WPUA_WPUA5_POSITION                                0x5
#define _WPUA_WPUA5_SIZE                                    0x1
#define _WPUA_WPUA5_LENGTH                                  0x1
#define _WPUA_WPUA5_MASK                                    0x20
#define _WPUA_WPUA6_POSN                                    0x6
#define _WPUA_WPUA6_POSITION                                0x6
#define _WPUA_WPUA6_SIZE                                    0x1
#define _WPUA_WPUA6_LENGTH                                  0x1
#define _WPUA_WPUA6_MASK                                    0x40
#define _WPUA_WPUA7_POSN                                    0x7
#define _WPUA_WPUA7_POSITION                                0x7
#define _WPUA_WPUA7_SIZE                                    0x1
#define _WPUA_WPUA7_LENGTH                                  0x1
#define _WPUA_WPUA7_MASK                                    0x80

// Register: ODCONA
#define ODCONA ODCONA
extern volatile unsigned char           ODCONA              __at(0x3A42);
#ifndef _LIB_BUILD
asm("ODCONA equ 03A42h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ODCA0                  :1;
        unsigned ODCA1                  :1;
        unsigned ODCA2                  :1;
        unsigned ODCA3                  :1;
        unsigned ODCA4                  :1;
        unsigned ODCA5                  :1;
        unsigned ODCA6                  :1;
        unsigned ODCA7                  :1;
    };
} ODCONAbits_t;
extern volatile ODCONAbits_t ODCONAbits __at(0x3A42);
// bitfield macros
#define _ODCONA_ODCA0_POSN                                  0x0
#define _ODCONA_ODCA0_POSITION                              0x0
#define _ODCONA_ODCA0_SIZE                                  0x1
#define _ODCONA_ODCA0_LENGTH                                0x1
#define _ODCONA_ODCA0_MASK                                  0x1
#define _ODCONA_ODCA1_POSN                                  0x1
#define _ODCONA_ODCA1_POSITION                              0x1
#define _ODCONA_ODCA1_SIZE                                  0x1
#define _ODCONA_ODCA1_LENGTH                                0x1
#define _ODCONA_ODCA1_MASK                                  0x2
#define _ODCONA_ODCA2_POSN                                  0x2
#define _ODCONA_ODCA2_POSITION                              0x2
#define _ODCONA_ODCA2_SIZE                                  0x1
#define _ODCONA_ODCA2_LENGTH                                0x1
#define _ODCONA_ODCA2_MASK                                  0x4
#define _ODCONA_ODCA3_POSN                                  0x3
#define _ODCONA_ODCA3_POSITION                              0x3
#define _ODCONA_ODCA3_SIZE                                  0x1
#define _ODCONA_ODCA3_LENGTH                                0x1
#define _ODCONA_ODCA3_MASK                                  0x8
#define _ODCONA_ODCA4_POSN                                  0x4
#define _ODCONA_ODCA4_POSITION                              0x4
#define _ODCONA_ODCA4_SIZE                                  0x1
#define _ODCONA_ODCA4_LENGTH                                0x1
#define _ODCONA_ODCA4_MASK                                  0x10
#define _ODCONA_ODCA5_POSN                                  0x5
#define _ODCONA_ODCA5_POSITION                              0x5
#define _ODCONA_ODCA5_SIZE                                  0x1
#define _ODCONA_ODCA5_LENGTH                                0x1
#define _ODCONA_ODCA5_MASK                                  0x20
#define _ODCONA_ODCA6_POSN                                  0x6
#define _ODCONA_ODCA6_POSITION                              0x6
#define _ODCONA_ODCA6_SIZE                                  0x1
#define _ODCONA_ODCA6_LENGTH                                0x1
#define _ODCONA_ODCA6_MASK                                  0x40
#define _ODCONA_ODCA7_POSN                                  0x7
#define _ODCONA_ODCA7_POSITION                              0x7
#define _ODCONA_ODCA7_SIZE                                  0x1
#define _ODCONA_ODCA7_LENGTH                                0x1
#define _ODCONA_ODCA7_MASK                                  0x80

// Register: SLRCONA
#define SLRCONA SLRCONA
extern volatile unsigned char           SLRCONA             __at(0x3A43);
#ifndef _LIB_BUILD
asm("SLRCONA equ 03A43h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SLRA0                  :1;
        unsigned SLRA1                  :1;
        unsigned SLRA2                  :1;
        unsigned SLRA3                  :1;
        unsigned SLRA4                  :1;
        unsigned SLRA5                  :1;
        unsigned SLRA6                  :1;
        unsigned SLRA7                  :1;
    };
} SLRCONAbits_t;
extern volatile SLRCONAbits_t SLRCONAbits __at(0x3A43);
// bitfield macros
#define _SLRCONA_SLRA0_POSN                                 0x0
#define _SLRCONA_SLRA0_POSITION                             0x0
#define _SLRCONA_SLRA0_SIZE                                 0x1
#define _SLRCONA_SLRA0_LENGTH                               0x1
#define _SLRCONA_SLRA0_MASK                                 0x1
#define _SLRCONA_SLRA1_POSN                                 0x1
#define _SLRCONA_SLRA1_POSITION                             0x1
#define _SLRCONA_SLRA1_SIZE                                 0x1
#define _SLRCONA_SLRA1_LENGTH                               0x1
#define _SLRCONA_SLRA1_MASK                                 0x2
#define _SLRCONA_SLRA2_POSN                                 0x2
#define _SLRCONA_SLRA2_POSITION                             0x2
#define _SLRCONA_SLRA2_SIZE                                 0x1
#define _SLRCONA_SLRA2_LENGTH                               0x1
#define _SLRCONA_SLRA2_MASK                                 0x4
#define _SLRCONA_SLRA3_POSN                                 0x3
#define _SLRCONA_SLRA3_POSITION                             0x3
#define _SLRCONA_SLRA3_SIZE                                 0x1
#define _SLRCONA_SLRA3_LENGTH                               0x1
#define _SLRCONA_SLRA3_MASK                                 0x8
#define _SLRCONA_SLRA4_POSN                                 0x4
#define _SLRCONA_SLRA4_POSITION                             0x4
#define _SLRCONA_SLRA4_SIZE                                 0x1
#define _SLRCONA_SLRA4_LENGTH                               0x1
#define _SLRCONA_SLRA4_MASK                                 0x10
#define _SLRCONA_SLRA5_POSN                                 0x5
#define _SLRCONA_SLRA5_POSITION                             0x5
#define _SLRCONA_SLRA5_SIZE                                 0x1
#define _SLRCONA_SLRA5_LENGTH                               0x1
#define _SLRCONA_SLRA5_MASK                                 0x20
#define _SLRCONA_SLRA6_POSN                                 0x6
#define _SLRCONA_SLRA6_POSITION                             0x6
#define _SLRCONA_SLRA6_SIZE                                 0x1
#define _SLRCONA_SLRA6_LENGTH                               0x1
#define _SLRCONA_SLRA6_MASK                                 0x40
#define _SLRCONA_SLRA7_POSN                                 0x7
#define _SLRCONA_SLRA7_POSITION                             0x7
#define _SLRCONA_SLRA7_SIZE                                 0x1
#define _SLRCONA_SLRA7_LENGTH                               0x1
#define _SLRCONA_SLRA7_MASK                                 0x80

// Register: INLVLA
#define INLVLA INLVLA
extern volatile unsigned char           INLVLA              __at(0x3A44);
#ifndef _LIB_BUILD
asm("INLVLA equ 03A44h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INLVLA0                :1;
        unsigned INLVLA1                :1;
        unsigned INLVLA2                :1;
        unsigned INLVLA3                :1;
        unsigned INLVLA4                :1;
        unsigned INLVLA5                :1;
        unsigned INLVLA6                :1;
        unsigned INLVLA7                :1;
    };
} INLVLAbits_t;
extern volatile INLVLAbits_t INLVLAbits __at(0x3A44);
// bitfield macros
#define _INLVLA_INLVLA0_POSN                                0x0
#define _INLVLA_INLVLA0_POSITION                            0x0
#define _INLVLA_INLVLA0_SIZE                                0x1
#define _INLVLA_INLVLA0_LENGTH                              0x1
#define _INLVLA_INLVLA0_MASK                                0x1
#define _INLVLA_INLVLA1_POSN                                0x1
#define _INLVLA_INLVLA1_POSITION                            0x1
#define _INLVLA_INLVLA1_SIZE                                0x1
#define _INLVLA_INLVLA1_LENGTH                              0x1
#define _INLVLA_INLVLA1_MASK                                0x2
#define _INLVLA_INLVLA2_POSN                                0x2
#define _INLVLA_INLVLA2_POSITION                            0x2
#define _INLVLA_INLVLA2_SIZE                                0x1
#define _INLVLA_INLVLA2_LENGTH                              0x1
#define _INLVLA_INLVLA2_MASK                                0x4
#define _INLVLA_INLVLA3_POSN                                0x3
#define _INLVLA_INLVLA3_POSITION                            0x3
#define _INLVLA_INLVLA3_SIZE                                0x1
#define _INLVLA_INLVLA3_LENGTH                              0x1
#define _INLVLA_INLVLA3_MASK                                0x8
#define _INLVLA_INLVLA4_POSN                                0x4
#define _INLVLA_INLVLA4_POSITION                            0x4
#define _INLVLA_INLVLA4_SIZE                                0x1
#define _INLVLA_INLVLA4_LENGTH                              0x1
#define _INLVLA_INLVLA4_MASK                                0x10
#define _INLVLA_INLVLA5_POSN                                0x5
#define _INLVLA_INLVLA5_POSITION                            0x5
#define _INLVLA_INLVLA5_SIZE                                0x1
#define _INLVLA_INLVLA5_LENGTH                              0x1
#define _INLVLA_INLVLA5_MASK                                0x20
#define _INLVLA_INLVLA6_POSN                                0x6
#define _INLVLA_INLVLA6_POSITION                            0x6
#define _INLVLA_INLVLA6_SIZE                                0x1
#define _INLVLA_INLVLA6_LENGTH                              0x1
#define _INLVLA_INLVLA6_MASK                                0x40
#define _INLVLA_INLVLA7_POSN                                0x7
#define _INLVLA_INLVLA7_POSITION                            0x7
#define _INLVLA_INLVLA7_SIZE                                0x1
#define _INLVLA_INLVLA7_LENGTH                              0x1
#define _INLVLA_INLVLA7_MASK                                0x80

// Register: IOCAP
#define IOCAP IOCAP
extern volatile unsigned char           IOCAP               __at(0x3A45);
#ifndef _LIB_BUILD
asm("IOCAP equ 03A45h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCAP0                 :1;
        unsigned IOCAP1                 :1;
        unsigned IOCAP2                 :1;
        unsigned IOCAP3                 :1;
        unsigned IOCAP4                 :1;
        unsigned IOCAP5                 :1;
        unsigned IOCAP6                 :1;
        unsigned IOCAP7                 :1;
    };
} IOCAPbits_t;
extern volatile IOCAPbits_t IOCAPbits __at(0x3A45);
// bitfield macros
#define _IOCAP_IOCAP0_POSN                                  0x0
#define _IOCAP_IOCAP0_POSITION                              0x0
#define _IOCAP_IOCAP0_SIZE                                  0x1
#define _IOCAP_IOCAP0_LENGTH                                0x1
#define _IOCAP_IOCAP0_MASK                                  0x1
#define _IOCAP_IOCAP1_POSN                                  0x1
#define _IOCAP_IOCAP1_POSITION                              0x1
#define _IOCAP_IOCAP1_SIZE                                  0x1
#define _IOCAP_IOCAP1_LENGTH                                0x1
#define _IOCAP_IOCAP1_MASK                                  0x2
#define _IOCAP_IOCAP2_POSN                                  0x2
#define _IOCAP_IOCAP2_POSITION                              0x2
#define _IOCAP_IOCAP2_SIZE                                  0x1
#define _IOCAP_IOCAP2_LENGTH                                0x1
#define _IOCAP_IOCAP2_MASK                                  0x4
#define _IOCAP_IOCAP3_POSN                                  0x3
#define _IOCAP_IOCAP3_POSITION                              0x3
#define _IOCAP_IOCAP3_SIZE                                  0x1
#define _IOCAP_IOCAP3_LENGTH                                0x1
#define _IOCAP_IOCAP3_MASK                                  0x8
#define _IOCAP_IOCAP4_POSN                                  0x4
#define _IOCAP_IOCAP4_POSITION                              0x4
#define _IOCAP_IOCAP4_SIZE                                  0x1
#define _IOCAP_IOCAP4_LENGTH                                0x1
#define _IOCAP_IOCAP4_MASK                                  0x10
#define _IOCAP_IOCAP5_POSN                                  0x5
#define _IOCAP_IOCAP5_POSITION                              0x5
#define _IOCAP_IOCAP5_SIZE                                  0x1
#define _IOCAP_IOCAP5_LENGTH                                0x1
#define _IOCAP_IOCAP5_MASK                                  0x20
#define _IOCAP_IOCAP6_POSN                                  0x6
#define _IOCAP_IOCAP6_POSITION                              0x6
#define _IOCAP_IOCAP6_SIZE                                  0x1
#define _IOCAP_IOCAP6_LENGTH                                0x1
#define _IOCAP_IOCAP6_MASK                                  0x40
#define _IOCAP_IOCAP7_POSN                                  0x7
#define _IOCAP_IOCAP7_POSITION                              0x7
#define _IOCAP_IOCAP7_SIZE                                  0x1
#define _IOCAP_IOCAP7_LENGTH                                0x1
#define _IOCAP_IOCAP7_MASK                                  0x80

// Register: IOCAN
#define IOCAN IOCAN
extern volatile unsigned char           IOCAN               __at(0x3A46);
#ifndef _LIB_BUILD
asm("IOCAN equ 03A46h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCAN0                 :1;
        unsigned IOCAN1                 :1;
        unsigned IOCAN2                 :1;
        unsigned IOCAN3                 :1;
        unsigned IOCAN4                 :1;
        unsigned IOCAN5                 :1;
        unsigned IOCAN6                 :1;
        unsigned IOCAN7                 :1;
    };
} IOCANbits_t;
extern volatile IOCANbits_t IOCANbits __at(0x3A46);
// bitfield macros
#define _IOCAN_IOCAN0_POSN                                  0x0
#define _IOCAN_IOCAN0_POSITION                              0x0
#define _IOCAN_IOCAN0_SIZE                                  0x1
#define _IOCAN_IOCAN0_LENGTH                                0x1
#define _IOCAN_IOCAN0_MASK                                  0x1
#define _IOCAN_IOCAN1_POSN                                  0x1
#define _IOCAN_IOCAN1_POSITION                              0x1
#define _IOCAN_IOCAN1_SIZE                                  0x1
#define _IOCAN_IOCAN1_LENGTH                                0x1
#define _IOCAN_IOCAN1_MASK                                  0x2
#define _IOCAN_IOCAN2_POSN                                  0x2
#define _IOCAN_IOCAN2_POSITION                              0x2
#define _IOCAN_IOCAN2_SIZE                                  0x1
#define _IOCAN_IOCAN2_LENGTH                                0x1
#define _IOCAN_IOCAN2_MASK                                  0x4
#define _IOCAN_IOCAN3_POSN                                  0x3
#define _IOCAN_IOCAN3_POSITION                              0x3
#define _IOCAN_IOCAN3_SIZE                                  0x1
#define _IOCAN_IOCAN3_LENGTH                                0x1
#define _IOCAN_IOCAN3_MASK                                  0x8
#define _IOCAN_IOCAN4_POSN                                  0x4
#define _IOCAN_IOCAN4_POSITION                              0x4
#define _IOCAN_IOCAN4_SIZE                                  0x1
#define _IOCAN_IOCAN4_LENGTH                                0x1
#define _IOCAN_IOCAN4_MASK                                  0x10
#define _IOCAN_IOCAN5_POSN                                  0x5
#define _IOCAN_IOCAN5_POSITION                              0x5
#define _IOCAN_IOCAN5_SIZE                                  0x1
#define _IOCAN_IOCAN5_LENGTH                                0x1
#define _IOCAN_IOCAN5_MASK                                  0x20
#define _IOCAN_IOCAN6_POSN                                  0x6
#define _IOCAN_IOCAN6_POSITION                              0x6
#define _IOCAN_IOCAN6_SIZE                                  0x1
#define _IOCAN_IOCAN6_LENGTH                                0x1
#define _IOCAN_IOCAN6_MASK                                  0x40
#define _IOCAN_IOCAN7_POSN                                  0x7
#define _IOCAN_IOCAN7_POSITION                              0x7
#define _IOCAN_IOCAN7_SIZE                                  0x1
#define _IOCAN_IOCAN7_LENGTH                                0x1
#define _IOCAN_IOCAN7_MASK                                  0x80

// Register: IOCAF
#define IOCAF IOCAF
extern volatile unsigned char           IOCAF               __at(0x3A47);
#ifndef _LIB_BUILD
asm("IOCAF equ 03A47h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCAF0                 :1;
        unsigned IOCAF1                 :1;
        unsigned IOCAF2                 :1;
        unsigned IOCAF3                 :1;
        unsigned IOCAF4                 :1;
        unsigned IOCAF5                 :1;
        unsigned IOCAF6                 :1;
        unsigned IOCAF7                 :1;
    };
} IOCAFbits_t;
extern volatile IOCAFbits_t IOCAFbits __at(0x3A47);
// bitfield macros
#define _IOCAF_IOCAF0_POSN                                  0x0
#define _IOCAF_IOCAF0_POSITION                              0x0
#define _IOCAF_IOCAF0_SIZE                                  0x1
#define _IOCAF_IOCAF0_LENGTH                                0x1
#define _IOCAF_IOCAF0_MASK                                  0x1
#define _IOCAF_IOCAF1_POSN                                  0x1
#define _IOCAF_IOCAF1_POSITION                              0x1
#define _IOCAF_IOCAF1_SIZE                                  0x1
#define _IOCAF_IOCAF1_LENGTH                                0x1
#define _IOCAF_IOCAF1_MASK                                  0x2
#define _IOCAF_IOCAF2_POSN                                  0x2
#define _IOCAF_IOCAF2_POSITION                              0x2
#define _IOCAF_IOCAF2_SIZE                                  0x1
#define _IOCAF_IOCAF2_LENGTH                                0x1
#define _IOCAF_IOCAF2_MASK                                  0x4
#define _IOCAF_IOCAF3_POSN                                  0x3
#define _IOCAF_IOCAF3_POSITION                              0x3
#define _IOCAF_IOCAF3_SIZE                                  0x1
#define _IOCAF_IOCAF3_LENGTH                                0x1
#define _IOCAF_IOCAF3_MASK                                  0x8
#define _IOCAF_IOCAF4_POSN                                  0x4
#define _IOCAF_IOCAF4_POSITION                              0x4
#define _IOCAF_IOCAF4_SIZE                                  0x1
#define _IOCAF_IOCAF4_LENGTH                                0x1
#define _IOCAF_IOCAF4_MASK                                  0x10
#define _IOCAF_IOCAF5_POSN                                  0x5
#define _IOCAF_IOCAF5_POSITION                              0x5
#define _IOCAF_IOCAF5_SIZE                                  0x1
#define _IOCAF_IOCAF5_LENGTH                                0x1
#define _IOCAF_IOCAF5_MASK                                  0x20
#define _IOCAF_IOCAF6_POSN                                  0x6
#define _IOCAF_IOCAF6_POSITION                              0x6
#define _IOCAF_IOCAF6_SIZE                                  0x1
#define _IOCAF_IOCAF6_LENGTH                                0x1
#define _IOCAF_IOCAF6_MASK                                  0x40
#define _IOCAF_IOCAF7_POSN                                  0x7
#define _IOCAF_IOCAF7_POSITION                              0x7
#define _IOCAF_IOCAF7_SIZE                                  0x1
#define _IOCAF_IOCAF7_LENGTH                                0x1
#define _IOCAF_IOCAF7_MASK                                  0x80

// Register: ANSELB
#define ANSELB ANSELB
extern volatile unsigned char           ANSELB              __at(0x3A50);
#ifndef _LIB_BUILD
asm("ANSELB equ 03A50h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ANSELB0                :1;
        unsigned ANSELB1                :1;
        unsigned ANSELB2                :1;
        unsigned ANSELB3                :1;
        unsigned ANSELB4                :1;
        unsigned ANSELB5                :1;
        unsigned ANSELB6                :1;
        unsigned ANSELB7                :1;
    };
} ANSELBbits_t;
extern volatile ANSELBbits_t ANSELBbits __at(0x3A50);
// bitfield macros
#define _ANSELB_ANSELB0_POSN                                0x0
#define _ANSELB_ANSELB0_POSITION                            0x0
#define _ANSELB_ANSELB0_SIZE                                0x1
#define _ANSELB_ANSELB0_LENGTH                              0x1
#define _ANSELB_ANSELB0_MASK                                0x1
#define _ANSELB_ANSELB1_POSN                                0x1
#define _ANSELB_ANSELB1_POSITION                            0x1
#define _ANSELB_ANSELB1_SIZE                                0x1
#define _ANSELB_ANSELB1_LENGTH                              0x1
#define _ANSELB_ANSELB1_MASK                                0x2
#define _ANSELB_ANSELB2_POSN                                0x2
#define _ANSELB_ANSELB2_POSITION                            0x2
#define _ANSELB_ANSELB2_SIZE                                0x1
#define _ANSELB_ANSELB2_LENGTH                              0x1
#define _ANSELB_ANSELB2_MASK                                0x4
#define _ANSELB_ANSELB3_POSN                                0x3
#define _ANSELB_ANSELB3_POSITION                            0x3
#define _ANSELB_ANSELB3_SIZE                                0x1
#define _ANSELB_ANSELB3_LENGTH                              0x1
#define _ANSELB_ANSELB3_MASK                                0x8
#define _ANSELB_ANSELB4_POSN                                0x4
#define _ANSELB_ANSELB4_POSITION                            0x4
#define _ANSELB_ANSELB4_SIZE                                0x1
#define _ANSELB_ANSELB4_LENGTH                              0x1
#define _ANSELB_ANSELB4_MASK                                0x10
#define _ANSELB_ANSELB5_POSN                                0x5
#define _ANSELB_ANSELB5_POSITION                            0x5
#define _ANSELB_ANSELB5_SIZE                                0x1
#define _ANSELB_ANSELB5_LENGTH                              0x1
#define _ANSELB_ANSELB5_MASK                                0x20
#define _ANSELB_ANSELB6_POSN                                0x6
#define _ANSELB_ANSELB6_POSITION                            0x6
#define _ANSELB_ANSELB6_SIZE                                0x1
#define _ANSELB_ANSELB6_LENGTH                              0x1
#define _ANSELB_ANSELB6_MASK                                0x40
#define _ANSELB_ANSELB7_POSN                                0x7
#define _ANSELB_ANSELB7_POSITION                            0x7
#define _ANSELB_ANSELB7_SIZE                                0x1
#define _ANSELB_ANSELB7_LENGTH                              0x1
#define _ANSELB_ANSELB7_MASK                                0x80

// Register: WPUB
#define WPUB WPUB
extern volatile unsigned char           WPUB                __at(0x3A51);
#ifndef _LIB_BUILD
asm("WPUB equ 03A51h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WPUB0                  :1;
        unsigned WPUB1                  :1;
        unsigned WPUB2                  :1;
        unsigned WPUB3                  :1;
        unsigned WPUB4                  :1;
        unsigned WPUB5                  :1;
        unsigned WPUB6                  :1;
        unsigned WPUB7                  :1;
    };
} WPUBbits_t;
extern volatile WPUBbits_t WPUBbits __at(0x3A51);
// bitfield macros
#define _WPUB_WPUB0_POSN                                    0x0
#define _WPUB_WPUB0_POSITION                                0x0
#define _WPUB_WPUB0_SIZE                                    0x1
#define _WPUB_WPUB0_LENGTH                                  0x1
#define _WPUB_WPUB0_MASK                                    0x1
#define _WPUB_WPUB1_POSN                                    0x1
#define _WPUB_WPUB1_POSITION                                0x1
#define _WPUB_WPUB1_SIZE                                    0x1
#define _WPUB_WPUB1_LENGTH                                  0x1
#define _WPUB_WPUB1_MASK                                    0x2
#define _WPUB_WPUB2_POSN                                    0x2
#define _WPUB_WPUB2_POSITION                                0x2
#define _WPUB_WPUB2_SIZE                                    0x1
#define _WPUB_WPUB2_LENGTH                                  0x1
#define _WPUB_WPUB2_MASK                                    0x4
#define _WPUB_WPUB3_POSN                                    0x3
#define _WPUB_WPUB3_POSITION                                0x3
#define _WPUB_WPUB3_SIZE                                    0x1
#define _WPUB_WPUB3_LENGTH                                  0x1
#define _WPUB_WPUB3_MASK                                    0x8
#define _WPUB_WPUB4_POSN                                    0x4
#define _WPUB_WPUB4_POSITION                                0x4
#define _WPUB_WPUB4_SIZE                                    0x1
#define _WPUB_WPUB4_LENGTH                                  0x1
#define _WPUB_WPUB4_MASK                                    0x10
#define _WPUB_WPUB5_POSN                                    0x5
#define _WPUB_WPUB5_POSITION                                0x5
#define _WPUB_WPUB5_SIZE                                    0x1
#define _WPUB_WPUB5_LENGTH                                  0x1
#define _WPUB_WPUB5_MASK                                    0x20
#define _WPUB_WPUB6_POSN                                    0x6
#define _WPUB_WPUB6_POSITION                                0x6
#define _WPUB_WPUB6_SIZE                                    0x1
#define _WPUB_WPUB6_LENGTH                                  0x1
#define _WPUB_WPUB6_MASK                                    0x40
#define _WPUB_WPUB7_POSN                                    0x7
#define _WPUB_WPUB7_POSITION                                0x7
#define _WPUB_WPUB7_SIZE                                    0x1
#define _WPUB_WPUB7_LENGTH                                  0x1
#define _WPUB_WPUB7_MASK                                    0x80

// Register: ODCONB
#define ODCONB ODCONB
extern volatile unsigned char           ODCONB              __at(0x3A52);
#ifndef _LIB_BUILD
asm("ODCONB equ 03A52h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ODCB0                  :1;
        unsigned ODCB1                  :1;
        unsigned ODCB2                  :1;
        unsigned ODCB3                  :1;
        unsigned ODCB4                  :1;
        unsigned ODCB5                  :1;
        unsigned ODCB6                  :1;
        unsigned ODCB7                  :1;
    };
} ODCONBbits_t;
extern volatile ODCONBbits_t ODCONBbits __at(0x3A52);
// bitfield macros
#define _ODCONB_ODCB0_POSN                                  0x0
#define _ODCONB_ODCB0_POSITION                              0x0
#define _ODCONB_ODCB0_SIZE                                  0x1
#define _ODCONB_ODCB0_LENGTH                                0x1
#define _ODCONB_ODCB0_MASK                                  0x1
#define _ODCONB_ODCB1_POSN                                  0x1
#define _ODCONB_ODCB1_POSITION                              0x1
#define _ODCONB_ODCB1_SIZE                                  0x1
#define _ODCONB_ODCB1_LENGTH                                0x1
#define _ODCONB_ODCB1_MASK                                  0x2
#define _ODCONB_ODCB2_POSN                                  0x2
#define _ODCONB_ODCB2_POSITION                              0x2
#define _ODCONB_ODCB2_SIZE                                  0x1
#define _ODCONB_ODCB2_LENGTH                                0x1
#define _ODCONB_ODCB2_MASK                                  0x4
#define _ODCONB_ODCB3_POSN                                  0x3
#define _ODCONB_ODCB3_POSITION                              0x3
#define _ODCONB_ODCB3_SIZE                                  0x1
#define _ODCONB_ODCB3_LENGTH                                0x1
#define _ODCONB_ODCB3_MASK                                  0x8
#define _ODCONB_ODCB4_POSN                                  0x4
#define _ODCONB_ODCB4_POSITION                              0x4
#define _ODCONB_ODCB4_SIZE                                  0x1
#define _ODCONB_ODCB4_LENGTH                                0x1
#define _ODCONB_ODCB4_MASK                                  0x10
#define _ODCONB_ODCB5_POSN                                  0x5
#define _ODCONB_ODCB5_POSITION                              0x5
#define _ODCONB_ODCB5_SIZE                                  0x1
#define _ODCONB_ODCB5_LENGTH                                0x1
#define _ODCONB_ODCB5_MASK                                  0x20
#define _ODCONB_ODCB6_POSN                                  0x6
#define _ODCONB_ODCB6_POSITION                              0x6
#define _ODCONB_ODCB6_SIZE                                  0x1
#define _ODCONB_ODCB6_LENGTH                                0x1
#define _ODCONB_ODCB6_MASK                                  0x40
#define _ODCONB_ODCB7_POSN                                  0x7
#define _ODCONB_ODCB7_POSITION                              0x7
#define _ODCONB_ODCB7_SIZE                                  0x1
#define _ODCONB_ODCB7_LENGTH                                0x1
#define _ODCONB_ODCB7_MASK                                  0x80

// Register: SLRCONB
#define SLRCONB SLRCONB
extern volatile unsigned char           SLRCONB             __at(0x3A53);
#ifndef _LIB_BUILD
asm("SLRCONB equ 03A53h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SLRB0                  :1;
        unsigned SLRB1                  :1;
        unsigned SLRB2                  :1;
        unsigned SLRB3                  :1;
        unsigned SLRB4                  :1;
        unsigned SLRB5                  :1;
        unsigned SLRB6                  :1;
        unsigned SLRB7                  :1;
    };
} SLRCONBbits_t;
extern volatile SLRCONBbits_t SLRCONBbits __at(0x3A53);
// bitfield macros
#define _SLRCONB_SLRB0_POSN                                 0x0
#define _SLRCONB_SLRB0_POSITION                             0x0
#define _SLRCONB_SLRB0_SIZE                                 0x1
#define _SLRCONB_SLRB0_LENGTH                               0x1
#define _SLRCONB_SLRB0_MASK                                 0x1
#define _SLRCONB_SLRB1_POSN                                 0x1
#define _SLRCONB_SLRB1_POSITION                             0x1
#define _SLRCONB_SLRB1_SIZE                                 0x1
#define _SLRCONB_SLRB1_LENGTH                               0x1
#define _SLRCONB_SLRB1_MASK                                 0x2
#define _SLRCONB_SLRB2_POSN                                 0x2
#define _SLRCONB_SLRB2_POSITION                             0x2
#define _SLRCONB_SLRB2_SIZE                                 0x1
#define _SLRCONB_SLRB2_LENGTH                               0x1
#define _SLRCONB_SLRB2_MASK                                 0x4
#define _SLRCONB_SLRB3_POSN                                 0x3
#define _SLRCONB_SLRB3_POSITION                             0x3
#define _SLRCONB_SLRB3_SIZE                                 0x1
#define _SLRCONB_SLRB3_LENGTH                               0x1
#define _SLRCONB_SLRB3_MASK                                 0x8
#define _SLRCONB_SLRB4_POSN                                 0x4
#define _SLRCONB_SLRB4_POSITION                             0x4
#define _SLRCONB_SLRB4_SIZE                                 0x1
#define _SLRCONB_SLRB4_LENGTH                               0x1
#define _SLRCONB_SLRB4_MASK                                 0x10
#define _SLRCONB_SLRB5_POSN                                 0x5
#define _SLRCONB_SLRB5_POSITION                             0x5
#define _SLRCONB_SLRB5_SIZE                                 0x1
#define _SLRCONB_SLRB5_LENGTH                               0x1
#define _SLRCONB_SLRB5_MASK                                 0x20
#define _SLRCONB_SLRB6_POSN                                 0x6
#define _SLRCONB_SLRB6_POSITION                             0x6
#define _SLRCONB_SLRB6_SIZE                                 0x1
#define _SLRCONB_SLRB6_LENGTH                               0x1
#define _SLRCONB_SLRB6_MASK                                 0x40
#define _SLRCONB_SLRB7_POSN                                 0x7
#define _SLRCONB_SLRB7_POSITION                             0x7
#define _SLRCONB_SLRB7_SIZE                                 0x1
#define _SLRCONB_SLRB7_LENGTH                               0x1
#define _SLRCONB_SLRB7_MASK                                 0x80

// Register: INLVLB
#define INLVLB INLVLB
extern volatile unsigned char           INLVLB              __at(0x3A54);
#ifndef _LIB_BUILD
asm("INLVLB equ 03A54h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INLVLB0                :1;
        unsigned INLVLB1                :1;
        unsigned INLVLB2                :1;
        unsigned INLVLB3                :1;
        unsigned INLVLB4                :1;
        unsigned INLVLB5                :1;
        unsigned INLVLB6                :1;
        unsigned INLVLB7                :1;
    };
} INLVLBbits_t;
extern volatile INLVLBbits_t INLVLBbits __at(0x3A54);
// bitfield macros
#define _INLVLB_INLVLB0_POSN                                0x0
#define _INLVLB_INLVLB0_POSITION                            0x0
#define _INLVLB_INLVLB0_SIZE                                0x1
#define _INLVLB_INLVLB0_LENGTH                              0x1
#define _INLVLB_INLVLB0_MASK                                0x1
#define _INLVLB_INLVLB1_POSN                                0x1
#define _INLVLB_INLVLB1_POSITION                            0x1
#define _INLVLB_INLVLB1_SIZE                                0x1
#define _INLVLB_INLVLB1_LENGTH                              0x1
#define _INLVLB_INLVLB1_MASK                                0x2
#define _INLVLB_INLVLB2_POSN                                0x2
#define _INLVLB_INLVLB2_POSITION                            0x2
#define _INLVLB_INLVLB2_SIZE                                0x1
#define _INLVLB_INLVLB2_LENGTH                              0x1
#define _INLVLB_INLVLB2_MASK                                0x4
#define _INLVLB_INLVLB3_POSN                                0x3
#define _INLVLB_INLVLB3_POSITION                            0x3
#define _INLVLB_INLVLB3_SIZE                                0x1
#define _INLVLB_INLVLB3_LENGTH                              0x1
#define _INLVLB_INLVLB3_MASK                                0x8
#define _INLVLB_INLVLB4_POSN                                0x4
#define _INLVLB_INLVLB4_POSITION                            0x4
#define _INLVLB_INLVLB4_SIZE                                0x1
#define _INLVLB_INLVLB4_LENGTH                              0x1
#define _INLVLB_INLVLB4_MASK                                0x10
#define _INLVLB_INLVLB5_POSN                                0x5
#define _INLVLB_INLVLB5_POSITION                            0x5
#define _INLVLB_INLVLB5_SIZE                                0x1
#define _INLVLB_INLVLB5_LENGTH                              0x1
#define _INLVLB_INLVLB5_MASK                                0x20
#define _INLVLB_INLVLB6_POSN                                0x6
#define _INLVLB_INLVLB6_POSITION                            0x6
#define _INLVLB_INLVLB6_SIZE                                0x1
#define _INLVLB_INLVLB6_LENGTH                              0x1
#define _INLVLB_INLVLB6_MASK                                0x40
#define _INLVLB_INLVLB7_POSN                                0x7
#define _INLVLB_INLVLB7_POSITION                            0x7
#define _INLVLB_INLVLB7_SIZE                                0x1
#define _INLVLB_INLVLB7_LENGTH                              0x1
#define _INLVLB_INLVLB7_MASK                                0x80

// Register: IOCBP
#define IOCBP IOCBP
extern volatile unsigned char           IOCBP               __at(0x3A55);
#ifndef _LIB_BUILD
asm("IOCBP equ 03A55h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCBP0                 :1;
        unsigned IOCBP1                 :1;
        unsigned IOCBP2                 :1;
        unsigned IOCBP3                 :1;
        unsigned IOCBP4                 :1;
        unsigned IOCBP5                 :1;
        unsigned IOCBP6                 :1;
        unsigned IOCBP7                 :1;
    };
} IOCBPbits_t;
extern volatile IOCBPbits_t IOCBPbits __at(0x3A55);
// bitfield macros
#define _IOCBP_IOCBP0_POSN                                  0x0
#define _IOCBP_IOCBP0_POSITION                              0x0
#define _IOCBP_IOCBP0_SIZE                                  0x1
#define _IOCBP_IOCBP0_LENGTH                                0x1
#define _IOCBP_IOCBP0_MASK                                  0x1
#define _IOCBP_IOCBP1_POSN                                  0x1
#define _IOCBP_IOCBP1_POSITION                              0x1
#define _IOCBP_IOCBP1_SIZE                                  0x1
#define _IOCBP_IOCBP1_LENGTH                                0x1
#define _IOCBP_IOCBP1_MASK                                  0x2
#define _IOCBP_IOCBP2_POSN                                  0x2
#define _IOCBP_IOCBP2_POSITION                              0x2
#define _IOCBP_IOCBP2_SIZE                                  0x1
#define _IOCBP_IOCBP2_LENGTH                                0x1
#define _IOCBP_IOCBP2_MASK                                  0x4
#define _IOCBP_IOCBP3_POSN                                  0x3
#define _IOCBP_IOCBP3_POSITION                              0x3
#define _IOCBP_IOCBP3_SIZE                                  0x1
#define _IOCBP_IOCBP3_LENGTH                                0x1
#define _IOCBP_IOCBP3_MASK                                  0x8
#define _IOCBP_IOCBP4_POSN                                  0x4
#define _IOCBP_IOCBP4_POSITION                              0x4
#define _IOCBP_IOCBP4_SIZE                                  0x1
#define _IOCBP_IOCBP4_LENGTH                                0x1
#define _IOCBP_IOCBP4_MASK                                  0x10
#define _IOCBP_IOCBP5_POSN                                  0x5
#define _IOCBP_IOCBP5_POSITION                              0x5
#define _IOCBP_IOCBP5_SIZE                                  0x1
#define _IOCBP_IOCBP5_LENGTH                                0x1
#define _IOCBP_IOCBP5_MASK                                  0x20
#define _IOCBP_IOCBP6_POSN                                  0x6
#define _IOCBP_IOCBP6_POSITION                              0x6
#define _IOCBP_IOCBP6_SIZE                                  0x1
#define _IOCBP_IOCBP6_LENGTH                                0x1
#define _IOCBP_IOCBP6_MASK                                  0x40
#define _IOCBP_IOCBP7_POSN                                  0x7
#define _IOCBP_IOCBP7_POSITION                              0x7
#define _IOCBP_IOCBP7_SIZE                                  0x1
#define _IOCBP_IOCBP7_LENGTH                                0x1
#define _IOCBP_IOCBP7_MASK                                  0x80

// Register: IOCBN
#define IOCBN IOCBN
extern volatile unsigned char           IOCBN               __at(0x3A56);
#ifndef _LIB_BUILD
asm("IOCBN equ 03A56h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCBN0                 :1;
        unsigned IOCBN1                 :1;
        unsigned IOCBN2                 :1;
        unsigned IOCBN3                 :1;
        unsigned IOCBN4                 :1;
        unsigned IOCBN5                 :1;
        unsigned IOCBN6                 :1;
        unsigned IOCBN7                 :1;
    };
} IOCBNbits_t;
extern volatile IOCBNbits_t IOCBNbits __at(0x3A56);
// bitfield macros
#define _IOCBN_IOCBN0_POSN                                  0x0
#define _IOCBN_IOCBN0_POSITION                              0x0
#define _IOCBN_IOCBN0_SIZE                                  0x1
#define _IOCBN_IOCBN0_LENGTH                                0x1
#define _IOCBN_IOCBN0_MASK                                  0x1
#define _IOCBN_IOCBN1_POSN                                  0x1
#define _IOCBN_IOCBN1_POSITION                              0x1
#define _IOCBN_IOCBN1_SIZE                                  0x1
#define _IOCBN_IOCBN1_LENGTH                                0x1
#define _IOCBN_IOCBN1_MASK                                  0x2
#define _IOCBN_IOCBN2_POSN                                  0x2
#define _IOCBN_IOCBN2_POSITION                              0x2
#define _IOCBN_IOCBN2_SIZE                                  0x1
#define _IOCBN_IOCBN2_LENGTH                                0x1
#define _IOCBN_IOCBN2_MASK                                  0x4
#define _IOCBN_IOCBN3_POSN                                  0x3
#define _IOCBN_IOCBN3_POSITION                              0x3
#define _IOCBN_IOCBN3_SIZE                                  0x1
#define _IOCBN_IOCBN3_LENGTH                                0x1
#define _IOCBN_IOCBN3_MASK                                  0x8
#define _IOCBN_IOCBN4_POSN                                  0x4
#define _IOCBN_IOCBN4_POSITION                              0x4
#define _IOCBN_IOCBN4_SIZE                                  0x1
#define _IOCBN_IOCBN4_LENGTH                                0x1
#define _IOCBN_IOCBN4_MASK                                  0x10
#define _IOCBN_IOCBN5_POSN                                  0x5
#define _IOCBN_IOCBN5_POSITION                              0x5
#define _IOCBN_IOCBN5_SIZE                                  0x1
#define _IOCBN_IOCBN5_LENGTH                                0x1
#define _IOCBN_IOCBN5_MASK                                  0x20
#define _IOCBN_IOCBN6_POSN                                  0x6
#define _IOCBN_IOCBN6_POSITION                              0x6
#define _IOCBN_IOCBN6_SIZE                                  0x1
#define _IOCBN_IOCBN6_LENGTH                                0x1
#define _IOCBN_IOCBN6_MASK                                  0x40
#define _IOCBN_IOCBN7_POSN                                  0x7
#define _IOCBN_IOCBN7_POSITION                              0x7
#define _IOCBN_IOCBN7_SIZE                                  0x1
#define _IOCBN_IOCBN7_LENGTH                                0x1
#define _IOCBN_IOCBN7_MASK                                  0x80

// Register: IOCBF
#define IOCBF IOCBF
extern volatile unsigned char           IOCBF               __at(0x3A57);
#ifndef _LIB_BUILD
asm("IOCBF equ 03A57h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCBF0                 :1;
        unsigned IOCBF1                 :1;
        unsigned IOCBF2                 :1;
        unsigned IOCBF3                 :1;
        unsigned IOCBF4                 :1;
        unsigned IOCBF5                 :1;
        unsigned IOCBF6                 :1;
        unsigned IOCBF7                 :1;
    };
} IOCBFbits_t;
extern volatile IOCBFbits_t IOCBFbits __at(0x3A57);
// bitfield macros
#define _IOCBF_IOCBF0_POSN                                  0x0
#define _IOCBF_IOCBF0_POSITION                              0x0
#define _IOCBF_IOCBF0_SIZE                                  0x1
#define _IOCBF_IOCBF0_LENGTH                                0x1
#define _IOCBF_IOCBF0_MASK                                  0x1
#define _IOCBF_IOCBF1_POSN                                  0x1
#define _IOCBF_IOCBF1_POSITION                              0x1
#define _IOCBF_IOCBF1_SIZE                                  0x1
#define _IOCBF_IOCBF1_LENGTH                                0x1
#define _IOCBF_IOCBF1_MASK                                  0x2
#define _IOCBF_IOCBF2_POSN                                  0x2
#define _IOCBF_IOCBF2_POSITION                              0x2
#define _IOCBF_IOCBF2_SIZE                                  0x1
#define _IOCBF_IOCBF2_LENGTH                                0x1
#define _IOCBF_IOCBF2_MASK                                  0x4
#define _IOCBF_IOCBF3_POSN                                  0x3
#define _IOCBF_IOCBF3_POSITION                              0x3
#define _IOCBF_IOCBF3_SIZE                                  0x1
#define _IOCBF_IOCBF3_LENGTH                                0x1
#define _IOCBF_IOCBF3_MASK                                  0x8
#define _IOCBF_IOCBF4_POSN                                  0x4
#define _IOCBF_IOCBF4_POSITION                              0x4
#define _IOCBF_IOCBF4_SIZE                                  0x1
#define _IOCBF_IOCBF4_LENGTH                                0x1
#define _IOCBF_IOCBF4_MASK                                  0x10
#define _IOCBF_IOCBF5_POSN                                  0x5
#define _IOCBF_IOCBF5_POSITION                              0x5
#define _IOCBF_IOCBF5_SIZE                                  0x1
#define _IOCBF_IOCBF5_LENGTH                                0x1
#define _IOCBF_IOCBF5_MASK                                  0x20
#define _IOCBF_IOCBF6_POSN                                  0x6
#define _IOCBF_IOCBF6_POSITION                              0x6
#define _IOCBF_IOCBF6_SIZE                                  0x1
#define _IOCBF_IOCBF6_LENGTH                                0x1
#define _IOCBF_IOCBF6_MASK                                  0x40
#define _IOCBF_IOCBF7_POSN                                  0x7
#define _IOCBF_IOCBF7_POSITION                              0x7
#define _IOCBF_IOCBF7_SIZE                                  0x1
#define _IOCBF_IOCBF7_LENGTH                                0x1
#define _IOCBF_IOCBF7_MASK                                  0x80

// Register: RB1I2C
#define RB1I2C RB1I2C
extern volatile unsigned char           RB1I2C              __at(0x3A5A);
#ifndef _LIB_BUILD
asm("RB1I2C equ 03A5Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TH                     :2;
        unsigned                        :2;
        unsigned PU                     :2;
        unsigned SLEW                   :1;
    };
    struct {
        unsigned TH0                    :1;
        unsigned TH1                    :1;
        unsigned                        :2;
        unsigned PU0                    :1;
        unsigned PU1                    :1;
    };
    struct {
        unsigned I2CTH                  :2;
        unsigned                        :2;
        unsigned I2CPU                  :2;
        unsigned I2CSLEW                :1;
    };
    struct {
        unsigned I2CTH0                 :1;
        unsigned I2CTH1                 :1;
        unsigned                        :2;
        unsigned I2CPU0                 :1;
        unsigned I2CPU1                 :1;
    };
} RB1I2Cbits_t;
extern volatile RB1I2Cbits_t RB1I2Cbits __at(0x3A5A);
// bitfield macros
#define _RB1I2C_TH_POSN                                     0x0
#define _RB1I2C_TH_POSITION                                 0x0
#define _RB1I2C_TH_SIZE                                     0x2
#define _RB1I2C_TH_LENGTH                                   0x2
#define _RB1I2C_TH_MASK                                     0x3
#define _RB1I2C_PU_POSN                                     0x4
#define _RB1I2C_PU_POSITION                                 0x4
#define _RB1I2C_PU_SIZE                                     0x2
#define _RB1I2C_PU_LENGTH                                   0x2
#define _RB1I2C_PU_MASK                                     0x30
#define _RB1I2C_SLEW_POSN                                   0x6
#define _RB1I2C_SLEW_POSITION                               0x6
#define _RB1I2C_SLEW_SIZE                                   0x1
#define _RB1I2C_SLEW_LENGTH                                 0x1
#define _RB1I2C_SLEW_MASK                                   0x40
#define _RB1I2C_TH0_POSN                                    0x0
#define _RB1I2C_TH0_POSITION                                0x0
#define _RB1I2C_TH0_SIZE                                    0x1
#define _RB1I2C_TH0_LENGTH                                  0x1
#define _RB1I2C_TH0_MASK                                    0x1
#define _RB1I2C_TH1_POSN                                    0x1
#define _RB1I2C_TH1_POSITION                                0x1
#define _RB1I2C_TH1_SIZE                                    0x1
#define _RB1I2C_TH1_LENGTH                                  0x1
#define _RB1I2C_TH1_MASK                                    0x2
#define _RB1I2C_PU0_POSN                                    0x4
#define _RB1I2C_PU0_POSITION                                0x4
#define _RB1I2C_PU0_SIZE                                    0x1
#define _RB1I2C_PU0_LENGTH                                  0x1
#define _RB1I2C_PU0_MASK                                    0x10
#define _RB1I2C_PU1_POSN                                    0x5
#define _RB1I2C_PU1_POSITION                                0x5
#define _RB1I2C_PU1_SIZE                                    0x1
#define _RB1I2C_PU1_LENGTH                                  0x1
#define _RB1I2C_PU1_MASK                                    0x20
#define _RB1I2C_I2CTH_POSN                                  0x0
#define _RB1I2C_I2CTH_POSITION                              0x0
#define _RB1I2C_I2CTH_SIZE                                  0x2
#define _RB1I2C_I2CTH_LENGTH                                0x2
#define _RB1I2C_I2CTH_MASK                                  0x3
#define _RB1I2C_I2CPU_POSN                                  0x4
#define _RB1I2C_I2CPU_POSITION                              0x4
#define _RB1I2C_I2CPU_SIZE                                  0x2
#define _RB1I2C_I2CPU_LENGTH                                0x2
#define _RB1I2C_I2CPU_MASK                                  0x30
#define _RB1I2C_I2CSLEW_POSN                                0x6
#define _RB1I2C_I2CSLEW_POSITION                            0x6
#define _RB1I2C_I2CSLEW_SIZE                                0x1
#define _RB1I2C_I2CSLEW_LENGTH                              0x1
#define _RB1I2C_I2CSLEW_MASK                                0x40
#define _RB1I2C_I2CTH0_POSN                                 0x0
#define _RB1I2C_I2CTH0_POSITION                             0x0
#define _RB1I2C_I2CTH0_SIZE                                 0x1
#define _RB1I2C_I2CTH0_LENGTH                               0x1
#define _RB1I2C_I2CTH0_MASK                                 0x1
#define _RB1I2C_I2CTH1_POSN                                 0x1
#define _RB1I2C_I2CTH1_POSITION                             0x1
#define _RB1I2C_I2CTH1_SIZE                                 0x1
#define _RB1I2C_I2CTH1_LENGTH                               0x1
#define _RB1I2C_I2CTH1_MASK                                 0x2
#define _RB1I2C_I2CPU0_POSN                                 0x4
#define _RB1I2C_I2CPU0_POSITION                             0x4
#define _RB1I2C_I2CPU0_SIZE                                 0x1
#define _RB1I2C_I2CPU0_LENGTH                               0x1
#define _RB1I2C_I2CPU0_MASK                                 0x10
#define _RB1I2C_I2CPU1_POSN                                 0x5
#define _RB1I2C_I2CPU1_POSITION                             0x5
#define _RB1I2C_I2CPU1_SIZE                                 0x1
#define _RB1I2C_I2CPU1_LENGTH                               0x1
#define _RB1I2C_I2CPU1_MASK                                 0x20

// Register: RB2I2C
#define RB2I2C RB2I2C
extern volatile unsigned char           RB2I2C              __at(0x3A5B);
#ifndef _LIB_BUILD
asm("RB2I2C equ 03A5Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TH                     :2;
        unsigned                        :2;
        unsigned PU                     :2;
        unsigned SLEW                   :1;
    };
    struct {
        unsigned TH0                    :1;
        unsigned TH1                    :1;
        unsigned                        :2;
        unsigned PU0                    :1;
        unsigned PU1                    :1;
    };
    struct {
        unsigned I2CTH                  :2;
        unsigned                        :2;
        unsigned I2CPU                  :2;
        unsigned I2CSLEW                :1;
    };
    struct {
        unsigned I2CTH0                 :1;
        unsigned I2CTH1                 :1;
        unsigned                        :2;
        unsigned I2CPU0                 :1;
        unsigned I2CPU1                 :1;
    };
} RB2I2Cbits_t;
extern volatile RB2I2Cbits_t RB2I2Cbits __at(0x3A5B);
// bitfield macros
#define _RB2I2C_TH_POSN                                     0x0
#define _RB2I2C_TH_POSITION                                 0x0
#define _RB2I2C_TH_SIZE                                     0x2
#define _RB2I2C_TH_LENGTH                                   0x2
#define _RB2I2C_TH_MASK                                     0x3
#define _RB2I2C_PU_POSN                                     0x4
#define _RB2I2C_PU_POSITION                                 0x4
#define _RB2I2C_PU_SIZE                                     0x2
#define _RB2I2C_PU_LENGTH                                   0x2
#define _RB2I2C_PU_MASK                                     0x30
#define _RB2I2C_SLEW_POSN                                   0x6
#define _RB2I2C_SLEW_POSITION                               0x6
#define _RB2I2C_SLEW_SIZE                                   0x1
#define _RB2I2C_SLEW_LENGTH                                 0x1
#define _RB2I2C_SLEW_MASK                                   0x40
#define _RB2I2C_TH0_POSN                                    0x0
#define _RB2I2C_TH0_POSITION                                0x0
#define _RB2I2C_TH0_SIZE                                    0x1
#define _RB2I2C_TH0_LENGTH                                  0x1
#define _RB2I2C_TH0_MASK                                    0x1
#define _RB2I2C_TH1_POSN                                    0x1
#define _RB2I2C_TH1_POSITION                                0x1
#define _RB2I2C_TH1_SIZE                                    0x1
#define _RB2I2C_TH1_LENGTH                                  0x1
#define _RB2I2C_TH1_MASK                                    0x2
#define _RB2I2C_PU0_POSN                                    0x4
#define _RB2I2C_PU0_POSITION                                0x4
#define _RB2I2C_PU0_SIZE                                    0x1
#define _RB2I2C_PU0_LENGTH                                  0x1
#define _RB2I2C_PU0_MASK                                    0x10
#define _RB2I2C_PU1_POSN                                    0x5
#define _RB2I2C_PU1_POSITION                                0x5
#define _RB2I2C_PU1_SIZE                                    0x1
#define _RB2I2C_PU1_LENGTH                                  0x1
#define _RB2I2C_PU1_MASK                                    0x20
#define _RB2I2C_I2CTH_POSN                                  0x0
#define _RB2I2C_I2CTH_POSITION                              0x0
#define _RB2I2C_I2CTH_SIZE                                  0x2
#define _RB2I2C_I2CTH_LENGTH                                0x2
#define _RB2I2C_I2CTH_MASK                                  0x3
#define _RB2I2C_I2CPU_POSN                                  0x4
#define _RB2I2C_I2CPU_POSITION                              0x4
#define _RB2I2C_I2CPU_SIZE                                  0x2
#define _RB2I2C_I2CPU_LENGTH                                0x2
#define _RB2I2C_I2CPU_MASK                                  0x30
#define _RB2I2C_I2CSLEW_POSN                                0x6
#define _RB2I2C_I2CSLEW_POSITION                            0x6
#define _RB2I2C_I2CSLEW_SIZE                                0x1
#define _RB2I2C_I2CSLEW_LENGTH                              0x1
#define _RB2I2C_I2CSLEW_MASK                                0x40
#define _RB2I2C_I2CTH0_POSN                                 0x0
#define _RB2I2C_I2CTH0_POSITION                             0x0
#define _RB2I2C_I2CTH0_SIZE                                 0x1
#define _RB2I2C_I2CTH0_LENGTH                               0x1
#define _RB2I2C_I2CTH0_MASK                                 0x1
#define _RB2I2C_I2CTH1_POSN                                 0x1
#define _RB2I2C_I2CTH1_POSITION                             0x1
#define _RB2I2C_I2CTH1_SIZE                                 0x1
#define _RB2I2C_I2CTH1_LENGTH                               0x1
#define _RB2I2C_I2CTH1_MASK                                 0x2
#define _RB2I2C_I2CPU0_POSN                                 0x4
#define _RB2I2C_I2CPU0_POSITION                             0x4
#define _RB2I2C_I2CPU0_SIZE                                 0x1
#define _RB2I2C_I2CPU0_LENGTH                               0x1
#define _RB2I2C_I2CPU0_MASK                                 0x10
#define _RB2I2C_I2CPU1_POSN                                 0x5
#define _RB2I2C_I2CPU1_POSITION                             0x5
#define _RB2I2C_I2CPU1_SIZE                                 0x1
#define _RB2I2C_I2CPU1_LENGTH                               0x1
#define _RB2I2C_I2CPU1_MASK                                 0x20

// Register: ANSELC
#define ANSELC ANSELC
extern volatile unsigned char           ANSELC              __at(0x3A60);
#ifndef _LIB_BUILD
asm("ANSELC equ 03A60h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ANSELC0                :1;
        unsigned ANSELC1                :1;
        unsigned ANSELC2                :1;
        unsigned ANSELC3                :1;
        unsigned ANSELC4                :1;
        unsigned ANSELC5                :1;
        unsigned ANSELC6                :1;
        unsigned ANSELC7                :1;
    };
} ANSELCbits_t;
extern volatile ANSELCbits_t ANSELCbits __at(0x3A60);
// bitfield macros
#define _ANSELC_ANSELC0_POSN                                0x0
#define _ANSELC_ANSELC0_POSITION                            0x0
#define _ANSELC_ANSELC0_SIZE                                0x1
#define _ANSELC_ANSELC0_LENGTH                              0x1
#define _ANSELC_ANSELC0_MASK                                0x1
#define _ANSELC_ANSELC1_POSN                                0x1
#define _ANSELC_ANSELC1_POSITION                            0x1
#define _ANSELC_ANSELC1_SIZE                                0x1
#define _ANSELC_ANSELC1_LENGTH                              0x1
#define _ANSELC_ANSELC1_MASK                                0x2
#define _ANSELC_ANSELC2_POSN                                0x2
#define _ANSELC_ANSELC2_POSITION                            0x2
#define _ANSELC_ANSELC2_SIZE                                0x1
#define _ANSELC_ANSELC2_LENGTH                              0x1
#define _ANSELC_ANSELC2_MASK                                0x4
#define _ANSELC_ANSELC3_POSN                                0x3
#define _ANSELC_ANSELC3_POSITION                            0x3
#define _ANSELC_ANSELC3_SIZE                                0x1
#define _ANSELC_ANSELC3_LENGTH                              0x1
#define _ANSELC_ANSELC3_MASK                                0x8
#define _ANSELC_ANSELC4_POSN                                0x4
#define _ANSELC_ANSELC4_POSITION                            0x4
#define _ANSELC_ANSELC4_SIZE                                0x1
#define _ANSELC_ANSELC4_LENGTH                              0x1
#define _ANSELC_ANSELC4_MASK                                0x10
#define _ANSELC_ANSELC5_POSN                                0x5
#define _ANSELC_ANSELC5_POSITION                            0x5
#define _ANSELC_ANSELC5_SIZE                                0x1
#define _ANSELC_ANSELC5_LENGTH                              0x1
#define _ANSELC_ANSELC5_MASK                                0x20
#define _ANSELC_ANSELC6_POSN                                0x6
#define _ANSELC_ANSELC6_POSITION                            0x6
#define _ANSELC_ANSELC6_SIZE                                0x1
#define _ANSELC_ANSELC6_LENGTH                              0x1
#define _ANSELC_ANSELC6_MASK                                0x40
#define _ANSELC_ANSELC7_POSN                                0x7
#define _ANSELC_ANSELC7_POSITION                            0x7
#define _ANSELC_ANSELC7_SIZE                                0x1
#define _ANSELC_ANSELC7_LENGTH                              0x1
#define _ANSELC_ANSELC7_MASK                                0x80

// Register: WPUC
#define WPUC WPUC
extern volatile unsigned char           WPUC                __at(0x3A61);
#ifndef _LIB_BUILD
asm("WPUC equ 03A61h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WPUC0                  :1;
        unsigned WPUC1                  :1;
        unsigned WPUC2                  :1;
        unsigned WPUC3                  :1;
        unsigned WPUC4                  :1;
        unsigned WPUC5                  :1;
        unsigned WPUC6                  :1;
        unsigned WPUC7                  :1;
    };
} WPUCbits_t;
extern volatile WPUCbits_t WPUCbits __at(0x3A61);
// bitfield macros
#define _WPUC_WPUC0_POSN                                    0x0
#define _WPUC_WPUC0_POSITION                                0x0
#define _WPUC_WPUC0_SIZE                                    0x1
#define _WPUC_WPUC0_LENGTH                                  0x1
#define _WPUC_WPUC0_MASK                                    0x1
#define _WPUC_WPUC1_POSN                                    0x1
#define _WPUC_WPUC1_POSITION                                0x1
#define _WPUC_WPUC1_SIZE                                    0x1
#define _WPUC_WPUC1_LENGTH                                  0x1
#define _WPUC_WPUC1_MASK                                    0x2
#define _WPUC_WPUC2_POSN                                    0x2
#define _WPUC_WPUC2_POSITION                                0x2
#define _WPUC_WPUC2_SIZE                                    0x1
#define _WPUC_WPUC2_LENGTH                                  0x1
#define _WPUC_WPUC2_MASK                                    0x4
#define _WPUC_WPUC3_POSN                                    0x3
#define _WPUC_WPUC3_POSITION                                0x3
#define _WPUC_WPUC3_SIZE                                    0x1
#define _WPUC_WPUC3_LENGTH                                  0x1
#define _WPUC_WPUC3_MASK                                    0x8
#define _WPUC_WPUC4_POSN                                    0x4
#define _WPUC_WPUC4_POSITION                                0x4
#define _WPUC_WPUC4_SIZE                                    0x1
#define _WPUC_WPUC4_LENGTH                                  0x1
#define _WPUC_WPUC4_MASK                                    0x10
#define _WPUC_WPUC5_POSN                                    0x5
#define _WPUC_WPUC5_POSITION                                0x5
#define _WPUC_WPUC5_SIZE                                    0x1
#define _WPUC_WPUC5_LENGTH                                  0x1
#define _WPUC_WPUC5_MASK                                    0x20
#define _WPUC_WPUC6_POSN                                    0x6
#define _WPUC_WPUC6_POSITION                                0x6
#define _WPUC_WPUC6_SIZE                                    0x1
#define _WPUC_WPUC6_LENGTH                                  0x1
#define _WPUC_WPUC6_MASK                                    0x40
#define _WPUC_WPUC7_POSN                                    0x7
#define _WPUC_WPUC7_POSITION                                0x7
#define _WPUC_WPUC7_SIZE                                    0x1
#define _WPUC_WPUC7_LENGTH                                  0x1
#define _WPUC_WPUC7_MASK                                    0x80

// Register: ODCONC
#define ODCONC ODCONC
extern volatile unsigned char           ODCONC              __at(0x3A62);
#ifndef _LIB_BUILD
asm("ODCONC equ 03A62h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ODCC0                  :1;
        unsigned ODCC1                  :1;
        unsigned ODCC2                  :1;
        unsigned ODCC3                  :1;
        unsigned ODCC4                  :1;
        unsigned ODCC5                  :1;
        unsigned ODCC6                  :1;
        unsigned ODCC7                  :1;
    };
} ODCONCbits_t;
extern volatile ODCONCbits_t ODCONCbits __at(0x3A62);
// bitfield macros
#define _ODCONC_ODCC0_POSN                                  0x0
#define _ODCONC_ODCC0_POSITION                              0x0
#define _ODCONC_ODCC0_SIZE                                  0x1
#define _ODCONC_ODCC0_LENGTH                                0x1
#define _ODCONC_ODCC0_MASK                                  0x1
#define _ODCONC_ODCC1_POSN                                  0x1
#define _ODCONC_ODCC1_POSITION                              0x1
#define _ODCONC_ODCC1_SIZE                                  0x1
#define _ODCONC_ODCC1_LENGTH                                0x1
#define _ODCONC_ODCC1_MASK                                  0x2
#define _ODCONC_ODCC2_POSN                                  0x2
#define _ODCONC_ODCC2_POSITION                              0x2
#define _ODCONC_ODCC2_SIZE                                  0x1
#define _ODCONC_ODCC2_LENGTH                                0x1
#define _ODCONC_ODCC2_MASK                                  0x4
#define _ODCONC_ODCC3_POSN                                  0x3
#define _ODCONC_ODCC3_POSITION                              0x3
#define _ODCONC_ODCC3_SIZE                                  0x1
#define _ODCONC_ODCC3_LENGTH                                0x1
#define _ODCONC_ODCC3_MASK                                  0x8
#define _ODCONC_ODCC4_POSN                                  0x4
#define _ODCONC_ODCC4_POSITION                              0x4
#define _ODCONC_ODCC4_SIZE                                  0x1
#define _ODCONC_ODCC4_LENGTH                                0x1
#define _ODCONC_ODCC4_MASK                                  0x10
#define _ODCONC_ODCC5_POSN                                  0x5
#define _ODCONC_ODCC5_POSITION                              0x5
#define _ODCONC_ODCC5_SIZE                                  0x1
#define _ODCONC_ODCC5_LENGTH                                0x1
#define _ODCONC_ODCC5_MASK                                  0x20
#define _ODCONC_ODCC6_POSN                                  0x6
#define _ODCONC_ODCC6_POSITION                              0x6
#define _ODCONC_ODCC6_SIZE                                  0x1
#define _ODCONC_ODCC6_LENGTH                                0x1
#define _ODCONC_ODCC6_MASK                                  0x40
#define _ODCONC_ODCC7_POSN                                  0x7
#define _ODCONC_ODCC7_POSITION                              0x7
#define _ODCONC_ODCC7_SIZE                                  0x1
#define _ODCONC_ODCC7_LENGTH                                0x1
#define _ODCONC_ODCC7_MASK                                  0x80

// Register: SLRCONC
#define SLRCONC SLRCONC
extern volatile unsigned char           SLRCONC             __at(0x3A63);
#ifndef _LIB_BUILD
asm("SLRCONC equ 03A63h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SLRC0                  :1;
        unsigned SLRC1                  :1;
        unsigned SLRC2                  :1;
        unsigned SLRC3                  :1;
        unsigned SLRC4                  :1;
        unsigned SLRC5                  :1;
        unsigned SLRC6                  :1;
        unsigned SLRC7                  :1;
    };
} SLRCONCbits_t;
extern volatile SLRCONCbits_t SLRCONCbits __at(0x3A63);
// bitfield macros
#define _SLRCONC_SLRC0_POSN                                 0x0
#define _SLRCONC_SLRC0_POSITION                             0x0
#define _SLRCONC_SLRC0_SIZE                                 0x1
#define _SLRCONC_SLRC0_LENGTH                               0x1
#define _SLRCONC_SLRC0_MASK                                 0x1
#define _SLRCONC_SLRC1_POSN                                 0x1
#define _SLRCONC_SLRC1_POSITION                             0x1
#define _SLRCONC_SLRC1_SIZE                                 0x1
#define _SLRCONC_SLRC1_LENGTH                               0x1
#define _SLRCONC_SLRC1_MASK                                 0x2
#define _SLRCONC_SLRC2_POSN                                 0x2
#define _SLRCONC_SLRC2_POSITION                             0x2
#define _SLRCONC_SLRC2_SIZE                                 0x1
#define _SLRCONC_SLRC2_LENGTH                               0x1
#define _SLRCONC_SLRC2_MASK                                 0x4
#define _SLRCONC_SLRC3_POSN                                 0x3
#define _SLRCONC_SLRC3_POSITION                             0x3
#define _SLRCONC_SLRC3_SIZE                                 0x1
#define _SLRCONC_SLRC3_LENGTH                               0x1
#define _SLRCONC_SLRC3_MASK                                 0x8
#define _SLRCONC_SLRC4_POSN                                 0x4
#define _SLRCONC_SLRC4_POSITION                             0x4
#define _SLRCONC_SLRC4_SIZE                                 0x1
#define _SLRCONC_SLRC4_LENGTH                               0x1
#define _SLRCONC_SLRC4_MASK                                 0x10
#define _SLRCONC_SLRC5_POSN                                 0x5
#define _SLRCONC_SLRC5_POSITION                             0x5
#define _SLRCONC_SLRC5_SIZE                                 0x1
#define _SLRCONC_SLRC5_LENGTH                               0x1
#define _SLRCONC_SLRC5_MASK                                 0x20
#define _SLRCONC_SLRC6_POSN                                 0x6
#define _SLRCONC_SLRC6_POSITION                             0x6
#define _SLRCONC_SLRC6_SIZE                                 0x1
#define _SLRCONC_SLRC6_LENGTH                               0x1
#define _SLRCONC_SLRC6_MASK                                 0x40
#define _SLRCONC_SLRC7_POSN                                 0x7
#define _SLRCONC_SLRC7_POSITION                             0x7
#define _SLRCONC_SLRC7_SIZE                                 0x1
#define _SLRCONC_SLRC7_LENGTH                               0x1
#define _SLRCONC_SLRC7_MASK                                 0x80

// Register: INLVLC
#define INLVLC INLVLC
extern volatile unsigned char           INLVLC              __at(0x3A64);
#ifndef _LIB_BUILD
asm("INLVLC equ 03A64h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INLVLC0                :1;
        unsigned INLVLC1                :1;
        unsigned INLVLC2                :1;
        unsigned INLVLC3                :1;
        unsigned INLVLC4                :1;
        unsigned INLVLC5                :1;
        unsigned INLVLC6                :1;
        unsigned INLVLC7                :1;
    };
} INLVLCbits_t;
extern volatile INLVLCbits_t INLVLCbits __at(0x3A64);
// bitfield macros
#define _INLVLC_INLVLC0_POSN                                0x0
#define _INLVLC_INLVLC0_POSITION                            0x0
#define _INLVLC_INLVLC0_SIZE                                0x1
#define _INLVLC_INLVLC0_LENGTH                              0x1
#define _INLVLC_INLVLC0_MASK                                0x1
#define _INLVLC_INLVLC1_POSN                                0x1
#define _INLVLC_INLVLC1_POSITION                            0x1
#define _INLVLC_INLVLC1_SIZE                                0x1
#define _INLVLC_INLVLC1_LENGTH                              0x1
#define _INLVLC_INLVLC1_MASK                                0x2
#define _INLVLC_INLVLC2_POSN                                0x2
#define _INLVLC_INLVLC2_POSITION                            0x2
#define _INLVLC_INLVLC2_SIZE                                0x1
#define _INLVLC_INLVLC2_LENGTH                              0x1
#define _INLVLC_INLVLC2_MASK                                0x4
#define _INLVLC_INLVLC3_POSN                                0x3
#define _INLVLC_INLVLC3_POSITION                            0x3
#define _INLVLC_INLVLC3_SIZE                                0x1
#define _INLVLC_INLVLC3_LENGTH                              0x1
#define _INLVLC_INLVLC3_MASK                                0x8
#define _INLVLC_INLVLC4_POSN                                0x4
#define _INLVLC_INLVLC4_POSITION                            0x4
#define _INLVLC_INLVLC4_SIZE                                0x1
#define _INLVLC_INLVLC4_LENGTH                              0x1
#define _INLVLC_INLVLC4_MASK                                0x10
#define _INLVLC_INLVLC5_POSN                                0x5
#define _INLVLC_INLVLC5_POSITION                            0x5
#define _INLVLC_INLVLC5_SIZE                                0x1
#define _INLVLC_INLVLC5_LENGTH                              0x1
#define _INLVLC_INLVLC5_MASK                                0x20
#define _INLVLC_INLVLC6_POSN                                0x6
#define _INLVLC_INLVLC6_POSITION                            0x6
#define _INLVLC_INLVLC6_SIZE                                0x1
#define _INLVLC_INLVLC6_LENGTH                              0x1
#define _INLVLC_INLVLC6_MASK                                0x40
#define _INLVLC_INLVLC7_POSN                                0x7
#define _INLVLC_INLVLC7_POSITION                            0x7
#define _INLVLC_INLVLC7_SIZE                                0x1
#define _INLVLC_INLVLC7_LENGTH                              0x1
#define _INLVLC_INLVLC7_MASK                                0x80

// Register: IOCCP
#define IOCCP IOCCP
extern volatile unsigned char           IOCCP               __at(0x3A65);
#ifndef _LIB_BUILD
asm("IOCCP equ 03A65h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCCP0                 :1;
        unsigned IOCCP1                 :1;
        unsigned IOCCP2                 :1;
        unsigned IOCCP3                 :1;
        unsigned IOCCP4                 :1;
        unsigned IOCCP5                 :1;
        unsigned IOCCP6                 :1;
        unsigned IOCCP7                 :1;
    };
} IOCCPbits_t;
extern volatile IOCCPbits_t IOCCPbits __at(0x3A65);
// bitfield macros
#define _IOCCP_IOCCP0_POSN                                  0x0
#define _IOCCP_IOCCP0_POSITION                              0x0
#define _IOCCP_IOCCP0_SIZE                                  0x1
#define _IOCCP_IOCCP0_LENGTH                                0x1
#define _IOCCP_IOCCP0_MASK                                  0x1
#define _IOCCP_IOCCP1_POSN                                  0x1
#define _IOCCP_IOCCP1_POSITION                              0x1
#define _IOCCP_IOCCP1_SIZE                                  0x1
#define _IOCCP_IOCCP1_LENGTH                                0x1
#define _IOCCP_IOCCP1_MASK                                  0x2
#define _IOCCP_IOCCP2_POSN                                  0x2
#define _IOCCP_IOCCP2_POSITION                              0x2
#define _IOCCP_IOCCP2_SIZE                                  0x1
#define _IOCCP_IOCCP2_LENGTH                                0x1
#define _IOCCP_IOCCP2_MASK                                  0x4
#define _IOCCP_IOCCP3_POSN                                  0x3
#define _IOCCP_IOCCP3_POSITION                              0x3
#define _IOCCP_IOCCP3_SIZE                                  0x1
#define _IOCCP_IOCCP3_LENGTH                                0x1
#define _IOCCP_IOCCP3_MASK                                  0x8
#define _IOCCP_IOCCP4_POSN                                  0x4
#define _IOCCP_IOCCP4_POSITION                              0x4
#define _IOCCP_IOCCP4_SIZE                                  0x1
#define _IOCCP_IOCCP4_LENGTH                                0x1
#define _IOCCP_IOCCP4_MASK                                  0x10
#define _IOCCP_IOCCP5_POSN                                  0x5
#define _IOCCP_IOCCP5_POSITION                              0x5
#define _IOCCP_IOCCP5_SIZE                                  0x1
#define _IOCCP_IOCCP5_LENGTH                                0x1
#define _IOCCP_IOCCP5_MASK                                  0x20
#define _IOCCP_IOCCP6_POSN                                  0x6
#define _IOCCP_IOCCP6_POSITION                              0x6
#define _IOCCP_IOCCP6_SIZE                                  0x1
#define _IOCCP_IOCCP6_LENGTH                                0x1
#define _IOCCP_IOCCP6_MASK                                  0x40
#define _IOCCP_IOCCP7_POSN                                  0x7
#define _IOCCP_IOCCP7_POSITION                              0x7
#define _IOCCP_IOCCP7_SIZE                                  0x1
#define _IOCCP_IOCCP7_LENGTH                                0x1
#define _IOCCP_IOCCP7_MASK                                  0x80

// Register: IOCCN
#define IOCCN IOCCN
extern volatile unsigned char           IOCCN               __at(0x3A66);
#ifndef _LIB_BUILD
asm("IOCCN equ 03A66h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCCN0                 :1;
        unsigned IOCCN1                 :1;
        unsigned IOCCN2                 :1;
        unsigned IOCCN3                 :1;
        unsigned IOCCN4                 :1;
        unsigned IOCCN5                 :1;
        unsigned IOCCN6                 :1;
        unsigned IOCCN7                 :1;
    };
} IOCCNbits_t;
extern volatile IOCCNbits_t IOCCNbits __at(0x3A66);
// bitfield macros
#define _IOCCN_IOCCN0_POSN                                  0x0
#define _IOCCN_IOCCN0_POSITION                              0x0
#define _IOCCN_IOCCN0_SIZE                                  0x1
#define _IOCCN_IOCCN0_LENGTH                                0x1
#define _IOCCN_IOCCN0_MASK                                  0x1
#define _IOCCN_IOCCN1_POSN                                  0x1
#define _IOCCN_IOCCN1_POSITION                              0x1
#define _IOCCN_IOCCN1_SIZE                                  0x1
#define _IOCCN_IOCCN1_LENGTH                                0x1
#define _IOCCN_IOCCN1_MASK                                  0x2
#define _IOCCN_IOCCN2_POSN                                  0x2
#define _IOCCN_IOCCN2_POSITION                              0x2
#define _IOCCN_IOCCN2_SIZE                                  0x1
#define _IOCCN_IOCCN2_LENGTH                                0x1
#define _IOCCN_IOCCN2_MASK                                  0x4
#define _IOCCN_IOCCN3_POSN                                  0x3
#define _IOCCN_IOCCN3_POSITION                              0x3
#define _IOCCN_IOCCN3_SIZE                                  0x1
#define _IOCCN_IOCCN3_LENGTH                                0x1
#define _IOCCN_IOCCN3_MASK                                  0x8
#define _IOCCN_IOCCN4_POSN                                  0x4
#define _IOCCN_IOCCN4_POSITION                              0x4
#define _IOCCN_IOCCN4_SIZE                                  0x1
#define _IOCCN_IOCCN4_LENGTH                                0x1
#define _IOCCN_IOCCN4_MASK                                  0x10
#define _IOCCN_IOCCN5_POSN                                  0x5
#define _IOCCN_IOCCN5_POSITION                              0x5
#define _IOCCN_IOCCN5_SIZE                                  0x1
#define _IOCCN_IOCCN5_LENGTH                                0x1
#define _IOCCN_IOCCN5_MASK                                  0x20
#define _IOCCN_IOCCN6_POSN                                  0x6
#define _IOCCN_IOCCN6_POSITION                              0x6
#define _IOCCN_IOCCN6_SIZE                                  0x1
#define _IOCCN_IOCCN6_LENGTH                                0x1
#define _IOCCN_IOCCN6_MASK                                  0x40
#define _IOCCN_IOCCN7_POSN                                  0x7
#define _IOCCN_IOCCN7_POSITION                              0x7
#define _IOCCN_IOCCN7_SIZE                                  0x1
#define _IOCCN_IOCCN7_LENGTH                                0x1
#define _IOCCN_IOCCN7_MASK                                  0x80

// Register: IOCCF
#define IOCCF IOCCF
extern volatile unsigned char           IOCCF               __at(0x3A67);
#ifndef _LIB_BUILD
asm("IOCCF equ 03A67h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCCF0                 :1;
        unsigned IOCCF1                 :1;
        unsigned IOCCF2                 :1;
        unsigned IOCCF3                 :1;
        unsigned IOCCF4                 :1;
        unsigned IOCCF5                 :1;
        unsigned IOCCF6                 :1;
        unsigned IOCCF7                 :1;
    };
} IOCCFbits_t;
extern volatile IOCCFbits_t IOCCFbits __at(0x3A67);
// bitfield macros
#define _IOCCF_IOCCF0_POSN                                  0x0
#define _IOCCF_IOCCF0_POSITION                              0x0
#define _IOCCF_IOCCF0_SIZE                                  0x1
#define _IOCCF_IOCCF0_LENGTH                                0x1
#define _IOCCF_IOCCF0_MASK                                  0x1
#define _IOCCF_IOCCF1_POSN                                  0x1
#define _IOCCF_IOCCF1_POSITION                              0x1
#define _IOCCF_IOCCF1_SIZE                                  0x1
#define _IOCCF_IOCCF1_LENGTH                                0x1
#define _IOCCF_IOCCF1_MASK                                  0x2
#define _IOCCF_IOCCF2_POSN                                  0x2
#define _IOCCF_IOCCF2_POSITION                              0x2
#define _IOCCF_IOCCF2_SIZE                                  0x1
#define _IOCCF_IOCCF2_LENGTH                                0x1
#define _IOCCF_IOCCF2_MASK                                  0x4
#define _IOCCF_IOCCF3_POSN                                  0x3
#define _IOCCF_IOCCF3_POSITION                              0x3
#define _IOCCF_IOCCF3_SIZE                                  0x1
#define _IOCCF_IOCCF3_LENGTH                                0x1
#define _IOCCF_IOCCF3_MASK                                  0x8
#define _IOCCF_IOCCF4_POSN                                  0x4
#define _IOCCF_IOCCF4_POSITION                              0x4
#define _IOCCF_IOCCF4_SIZE                                  0x1
#define _IOCCF_IOCCF4_LENGTH                                0x1
#define _IOCCF_IOCCF4_MASK                                  0x10
#define _IOCCF_IOCCF5_POSN                                  0x5
#define _IOCCF_IOCCF5_POSITION                              0x5
#define _IOCCF_IOCCF5_SIZE                                  0x1
#define _IOCCF_IOCCF5_LENGTH                                0x1
#define _IOCCF_IOCCF5_MASK                                  0x20
#define _IOCCF_IOCCF6_POSN                                  0x6
#define _IOCCF_IOCCF6_POSITION                              0x6
#define _IOCCF_IOCCF6_SIZE                                  0x1
#define _IOCCF_IOCCF6_LENGTH                                0x1
#define _IOCCF_IOCCF6_MASK                                  0x40
#define _IOCCF_IOCCF7_POSN                                  0x7
#define _IOCCF_IOCCF7_POSITION                              0x7
#define _IOCCF_IOCCF7_SIZE                                  0x1
#define _IOCCF_IOCCF7_LENGTH                                0x1
#define _IOCCF_IOCCF7_MASK                                  0x80

// Register: RC3I2C
#define RC3I2C RC3I2C
extern volatile unsigned char           RC3I2C              __at(0x3A6A);
#ifndef _LIB_BUILD
asm("RC3I2C equ 03A6Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TH                     :2;
        unsigned                        :2;
        unsigned PU                     :2;
        unsigned SLEW                   :1;
    };
    struct {
        unsigned TH0                    :1;
        unsigned TH1                    :1;
        unsigned                        :2;
        unsigned PU0                    :1;
        unsigned PU1                    :1;
    };
    struct {
        unsigned I2CTH                  :2;
        unsigned                        :2;
        unsigned I2CPU                  :2;
        unsigned I2CSLEW                :1;
    };
    struct {
        unsigned I2CTH0                 :1;
        unsigned I2CTH1                 :1;
        unsigned                        :2;
        unsigned I2CPU0                 :1;
        unsigned I2CPU1                 :1;
    };
} RC3I2Cbits_t;
extern volatile RC3I2Cbits_t RC3I2Cbits __at(0x3A6A);
// bitfield macros
#define _RC3I2C_TH_POSN                                     0x0
#define _RC3I2C_TH_POSITION                                 0x0
#define _RC3I2C_TH_SIZE                                     0x2
#define _RC3I2C_TH_LENGTH                                   0x2
#define _RC3I2C_TH_MASK                                     0x3
#define _RC3I2C_PU_POSN                                     0x4
#define _RC3I2C_PU_POSITION                                 0x4
#define _RC3I2C_PU_SIZE                                     0x2
#define _RC3I2C_PU_LENGTH                                   0x2
#define _RC3I2C_PU_MASK                                     0x30
#define _RC3I2C_SLEW_POSN                                   0x6
#define _RC3I2C_SLEW_POSITION                               0x6
#define _RC3I2C_SLEW_SIZE                                   0x1
#define _RC3I2C_SLEW_LENGTH                                 0x1
#define _RC3I2C_SLEW_MASK                                   0x40
#define _RC3I2C_TH0_POSN                                    0x0
#define _RC3I2C_TH0_POSITION                                0x0
#define _RC3I2C_TH0_SIZE                                    0x1
#define _RC3I2C_TH0_LENGTH                                  0x1
#define _RC3I2C_TH0_MASK                                    0x1
#define _RC3I2C_TH1_POSN                                    0x1
#define _RC3I2C_TH1_POSITION                                0x1
#define _RC3I2C_TH1_SIZE                                    0x1
#define _RC3I2C_TH1_LENGTH                                  0x1
#define _RC3I2C_TH1_MASK                                    0x2
#define _RC3I2C_PU0_POSN                                    0x4
#define _RC3I2C_PU0_POSITION                                0x4
#define _RC3I2C_PU0_SIZE                                    0x1
#define _RC3I2C_PU0_LENGTH                                  0x1
#define _RC3I2C_PU0_MASK                                    0x10
#define _RC3I2C_PU1_POSN                                    0x5
#define _RC3I2C_PU1_POSITION                                0x5
#define _RC3I2C_PU1_SIZE                                    0x1
#define _RC3I2C_PU1_LENGTH                                  0x1
#define _RC3I2C_PU1_MASK                                    0x20
#define _RC3I2C_I2CTH_POSN                                  0x0
#define _RC3I2C_I2CTH_POSITION                              0x0
#define _RC3I2C_I2CTH_SIZE                                  0x2
#define _RC3I2C_I2CTH_LENGTH                                0x2
#define _RC3I2C_I2CTH_MASK                                  0x3
#define _RC3I2C_I2CPU_POSN                                  0x4
#define _RC3I2C_I2CPU_POSITION                              0x4
#define _RC3I2C_I2CPU_SIZE                                  0x2
#define _RC3I2C_I2CPU_LENGTH                                0x2
#define _RC3I2C_I2CPU_MASK                                  0x30
#define _RC3I2C_I2CSLEW_POSN                                0x6
#define _RC3I2C_I2CSLEW_POSITION                            0x6
#define _RC3I2C_I2CSLEW_SIZE                                0x1
#define _RC3I2C_I2CSLEW_LENGTH                              0x1
#define _RC3I2C_I2CSLEW_MASK                                0x40
#define _RC3I2C_I2CTH0_POSN                                 0x0
#define _RC3I2C_I2CTH0_POSITION                             0x0
#define _RC3I2C_I2CTH0_SIZE                                 0x1
#define _RC3I2C_I2CTH0_LENGTH                               0x1
#define _RC3I2C_I2CTH0_MASK                                 0x1
#define _RC3I2C_I2CTH1_POSN                                 0x1
#define _RC3I2C_I2CTH1_POSITION                             0x1
#define _RC3I2C_I2CTH1_SIZE                                 0x1
#define _RC3I2C_I2CTH1_LENGTH                               0x1
#define _RC3I2C_I2CTH1_MASK                                 0x2
#define _RC3I2C_I2CPU0_POSN                                 0x4
#define _RC3I2C_I2CPU0_POSITION                             0x4
#define _RC3I2C_I2CPU0_SIZE                                 0x1
#define _RC3I2C_I2CPU0_LENGTH                               0x1
#define _RC3I2C_I2CPU0_MASK                                 0x10
#define _RC3I2C_I2CPU1_POSN                                 0x5
#define _RC3I2C_I2CPU1_POSITION                             0x5
#define _RC3I2C_I2CPU1_SIZE                                 0x1
#define _RC3I2C_I2CPU1_LENGTH                               0x1
#define _RC3I2C_I2CPU1_MASK                                 0x20

// Register: RC4I2C
#define RC4I2C RC4I2C
extern volatile unsigned char           RC4I2C              __at(0x3A6B);
#ifndef _LIB_BUILD
asm("RC4I2C equ 03A6Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TH                     :2;
        unsigned                        :2;
        unsigned PU                     :2;
        unsigned SLEW                   :1;
    };
    struct {
        unsigned TH0                    :1;
        unsigned TH1                    :1;
        unsigned                        :2;
        unsigned PU0                    :1;
        unsigned PU1                    :1;
    };
    struct {
        unsigned I2CTH                  :2;
        unsigned                        :2;
        unsigned I2CPU                  :2;
        unsigned I2CSLEW                :1;
    };
    struct {
        unsigned I2CTH0                 :1;
        unsigned I2CTH1                 :1;
        unsigned                        :2;
        unsigned I2CPU0                 :1;
        unsigned I2CPU1                 :1;
    };
} RC4I2Cbits_t;
extern volatile RC4I2Cbits_t RC4I2Cbits __at(0x3A6B);
// bitfield macros
#define _RC4I2C_TH_POSN                                     0x0
#define _RC4I2C_TH_POSITION                                 0x0
#define _RC4I2C_TH_SIZE                                     0x2
#define _RC4I2C_TH_LENGTH                                   0x2
#define _RC4I2C_TH_MASK                                     0x3
#define _RC4I2C_PU_POSN                                     0x4
#define _RC4I2C_PU_POSITION                                 0x4
#define _RC4I2C_PU_SIZE                                     0x2
#define _RC4I2C_PU_LENGTH                                   0x2
#define _RC4I2C_PU_MASK                                     0x30
#define _RC4I2C_SLEW_POSN                                   0x6
#define _RC4I2C_SLEW_POSITION                               0x6
#define _RC4I2C_SLEW_SIZE                                   0x1
#define _RC4I2C_SLEW_LENGTH                                 0x1
#define _RC4I2C_SLEW_MASK                                   0x40
#define _RC4I2C_TH0_POSN                                    0x0
#define _RC4I2C_TH0_POSITION                                0x0
#define _RC4I2C_TH0_SIZE                                    0x1
#define _RC4I2C_TH0_LENGTH                                  0x1
#define _RC4I2C_TH0_MASK                                    0x1
#define _RC4I2C_TH1_POSN                                    0x1
#define _RC4I2C_TH1_POSITION                                0x1
#define _RC4I2C_TH1_SIZE                                    0x1
#define _RC4I2C_TH1_LENGTH                                  0x1
#define _RC4I2C_TH1_MASK                                    0x2
#define _RC4I2C_PU0_POSN                                    0x4
#define _RC4I2C_PU0_POSITION                                0x4
#define _RC4I2C_PU0_SIZE                                    0x1
#define _RC4I2C_PU0_LENGTH                                  0x1
#define _RC4I2C_PU0_MASK                                    0x10
#define _RC4I2C_PU1_POSN                                    0x5
#define _RC4I2C_PU1_POSITION                                0x5
#define _RC4I2C_PU1_SIZE                                    0x1
#define _RC4I2C_PU1_LENGTH                                  0x1
#define _RC4I2C_PU1_MASK                                    0x20
#define _RC4I2C_I2CTH_POSN                                  0x0
#define _RC4I2C_I2CTH_POSITION                              0x0
#define _RC4I2C_I2CTH_SIZE                                  0x2
#define _RC4I2C_I2CTH_LENGTH                                0x2
#define _RC4I2C_I2CTH_MASK                                  0x3
#define _RC4I2C_I2CPU_POSN                                  0x4
#define _RC4I2C_I2CPU_POSITION                              0x4
#define _RC4I2C_I2CPU_SIZE                                  0x2
#define _RC4I2C_I2CPU_LENGTH                                0x2
#define _RC4I2C_I2CPU_MASK                                  0x30
#define _RC4I2C_I2CSLEW_POSN                                0x6
#define _RC4I2C_I2CSLEW_POSITION                            0x6
#define _RC4I2C_I2CSLEW_SIZE                                0x1
#define _RC4I2C_I2CSLEW_LENGTH                              0x1
#define _RC4I2C_I2CSLEW_MASK                                0x40
#define _RC4I2C_I2CTH0_POSN                                 0x0
#define _RC4I2C_I2CTH0_POSITION                             0x0
#define _RC4I2C_I2CTH0_SIZE                                 0x1
#define _RC4I2C_I2CTH0_LENGTH                               0x1
#define _RC4I2C_I2CTH0_MASK                                 0x1
#define _RC4I2C_I2CTH1_POSN                                 0x1
#define _RC4I2C_I2CTH1_POSITION                             0x1
#define _RC4I2C_I2CTH1_SIZE                                 0x1
#define _RC4I2C_I2CTH1_LENGTH                               0x1
#define _RC4I2C_I2CTH1_MASK                                 0x2
#define _RC4I2C_I2CPU0_POSN                                 0x4
#define _RC4I2C_I2CPU0_POSITION                             0x4
#define _RC4I2C_I2CPU0_SIZE                                 0x1
#define _RC4I2C_I2CPU0_LENGTH                               0x1
#define _RC4I2C_I2CPU0_MASK                                 0x10
#define _RC4I2C_I2CPU1_POSN                                 0x5
#define _RC4I2C_I2CPU1_POSITION                             0x5
#define _RC4I2C_I2CPU1_SIZE                                 0x1
#define _RC4I2C_I2CPU1_LENGTH                               0x1
#define _RC4I2C_I2CPU1_MASK                                 0x20

// Register: WPUE
#define WPUE WPUE
extern volatile unsigned char           WPUE                __at(0x3A81);
#ifndef _LIB_BUILD
asm("WPUE equ 03A81h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :3;
        unsigned WPUE3                  :1;
    };
} WPUEbits_t;
extern volatile WPUEbits_t WPUEbits __at(0x3A81);
// bitfield macros
#define _WPUE_WPUE3_POSN                                    0x3
#define _WPUE_WPUE3_POSITION                                0x3
#define _WPUE_WPUE3_SIZE                                    0x1
#define _WPUE_WPUE3_LENGTH                                  0x1
#define _WPUE_WPUE3_MASK                                    0x8

// Register: INLVLE
#define INLVLE INLVLE
extern volatile unsigned char           INLVLE              __at(0x3A84);
#ifndef _LIB_BUILD
asm("INLVLE equ 03A84h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :3;
        unsigned INLVLE3                :1;
    };
} INLVLEbits_t;
extern volatile INLVLEbits_t INLVLEbits __at(0x3A84);
// bitfield macros
#define _INLVLE_INLVLE3_POSN                                0x3
#define _INLVLE_INLVLE3_POSITION                            0x3
#define _INLVLE_INLVLE3_SIZE                                0x1
#define _INLVLE_INLVLE3_LENGTH                              0x1
#define _INLVLE_INLVLE3_MASK                                0x8

// Register: IOCEP
#define IOCEP IOCEP
extern volatile unsigned char           IOCEP               __at(0x3A85);
#ifndef _LIB_BUILD
asm("IOCEP equ 03A85h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :3;
        unsigned IOCEP3                 :1;
    };
} IOCEPbits_t;
extern volatile IOCEPbits_t IOCEPbits __at(0x3A85);
// bitfield macros
#define _IOCEP_IOCEP3_POSN                                  0x3
#define _IOCEP_IOCEP3_POSITION                              0x3
#define _IOCEP_IOCEP3_SIZE                                  0x1
#define _IOCEP_IOCEP3_LENGTH                                0x1
#define _IOCEP_IOCEP3_MASK                                  0x8

// Register: IOCEN
#define IOCEN IOCEN
extern volatile unsigned char           IOCEN               __at(0x3A86);
#ifndef _LIB_BUILD
asm("IOCEN equ 03A86h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :3;
        unsigned IOCEN3                 :1;
    };
} IOCENbits_t;
extern volatile IOCENbits_t IOCENbits __at(0x3A86);
// bitfield macros
#define _IOCEN_IOCEN3_POSN                                  0x3
#define _IOCEN_IOCEN3_POSITION                              0x3
#define _IOCEN_IOCEN3_SIZE                                  0x1
#define _IOCEN_IOCEN3_LENGTH                                0x1
#define _IOCEN_IOCEN3_MASK                                  0x8

// Register: IOCEF
#define IOCEF IOCEF
extern volatile unsigned char           IOCEF               __at(0x3A87);
#ifndef _LIB_BUILD
asm("IOCEF equ 03A87h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :3;
        unsigned IOCEF3                 :1;
    };
} IOCEFbits_t;
extern volatile IOCEFbits_t IOCEFbits __at(0x3A87);
// bitfield macros
#define _IOCEF_IOCEF3_POSN                                  0x3
#define _IOCEF_IOCEF3_POSITION                              0x3
#define _IOCEF_IOCEF3_SIZE                                  0x1
#define _IOCEF_IOCEF3_LENGTH                                0x1
#define _IOCEF_IOCEF3_MASK                                  0x8

// Register: PPSLOCK
#define PPSLOCK PPSLOCK
extern volatile unsigned char           PPSLOCK             __at(0x3ABF);
#ifndef _LIB_BUILD
asm("PPSLOCK equ 03ABFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PPSLOCKED              :1;
    };
} PPSLOCKbits_t;
extern volatile PPSLOCKbits_t PPSLOCKbits __at(0x3ABF);
// bitfield macros
#define _PPSLOCK_PPSLOCKED_POSN                             0x0
#define _PPSLOCK_PPSLOCKED_POSITION                         0x0
#define _PPSLOCK_PPSLOCKED_SIZE                             0x1
#define _PPSLOCK_PPSLOCKED_LENGTH                           0x1
#define _PPSLOCK_PPSLOCKED_MASK                             0x1

// Register: INT0PPS
#define INT0PPS INT0PPS
extern volatile unsigned char           INT0PPS             __at(0x3AC0);
#ifndef _LIB_BUILD
asm("INT0PPS equ 03AC0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INT0PPS                :5;
    };
} INT0PPSbits_t;
extern volatile INT0PPSbits_t INT0PPSbits __at(0x3AC0);
// bitfield macros
#define _INT0PPS_INT0PPS_POSN                               0x0
#define _INT0PPS_INT0PPS_POSITION                           0x0
#define _INT0PPS_INT0PPS_SIZE                               0x5
#define _INT0PPS_INT0PPS_LENGTH                             0x5
#define _INT0PPS_INT0PPS_MASK                               0x1F

// Register: INT1PPS
#define INT1PPS INT1PPS
extern volatile unsigned char           INT1PPS             __at(0x3AC1);
#ifndef _LIB_BUILD
asm("INT1PPS equ 03AC1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INT1PPS                :5;
    };
} INT1PPSbits_t;
extern volatile INT1PPSbits_t INT1PPSbits __at(0x3AC1);
// bitfield macros
#define _INT1PPS_INT1PPS_POSN                               0x0
#define _INT1PPS_INT1PPS_POSITION                           0x0
#define _INT1PPS_INT1PPS_SIZE                               0x5
#define _INT1PPS_INT1PPS_LENGTH                             0x5
#define _INT1PPS_INT1PPS_MASK                               0x1F

// Register: INT2PPS
#define INT2PPS INT2PPS
extern volatile unsigned char           INT2PPS             __at(0x3AC2);
#ifndef _LIB_BUILD
asm("INT2PPS equ 03AC2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INT2PPS                :5;
    };
} INT2PPSbits_t;
extern volatile INT2PPSbits_t INT2PPSbits __at(0x3AC2);
// bitfield macros
#define _INT2PPS_INT2PPS_POSN                               0x0
#define _INT2PPS_INT2PPS_POSITION                           0x0
#define _INT2PPS_INT2PPS_SIZE                               0x5
#define _INT2PPS_INT2PPS_LENGTH                             0x5
#define _INT2PPS_INT2PPS_MASK                               0x1F

// Register: T0CKIPPS
#define T0CKIPPS T0CKIPPS
extern volatile unsigned char           T0CKIPPS            __at(0x3AC3);
#ifndef _LIB_BUILD
asm("T0CKIPPS equ 03AC3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T0CKIPPS               :5;
    };
} T0CKIPPSbits_t;
extern volatile T0CKIPPSbits_t T0CKIPPSbits __at(0x3AC3);
// bitfield macros
#define _T0CKIPPS_T0CKIPPS_POSN                             0x0
#define _T0CKIPPS_T0CKIPPS_POSITION                         0x0
#define _T0CKIPPS_T0CKIPPS_SIZE                             0x5
#define _T0CKIPPS_T0CKIPPS_LENGTH                           0x5
#define _T0CKIPPS_T0CKIPPS_MASK                             0x1F

// Register: T1CKIPPS
#define T1CKIPPS T1CKIPPS
extern volatile unsigned char           T1CKIPPS            __at(0x3AC4);
#ifndef _LIB_BUILD
asm("T1CKIPPS equ 03AC4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T1CKIPPS               :5;
    };
} T1CKIPPSbits_t;
extern volatile T1CKIPPSbits_t T1CKIPPSbits __at(0x3AC4);
// bitfield macros
#define _T1CKIPPS_T1CKIPPS_POSN                             0x0
#define _T1CKIPPS_T1CKIPPS_POSITION                         0x0
#define _T1CKIPPS_T1CKIPPS_SIZE                             0x5
#define _T1CKIPPS_T1CKIPPS_LENGTH                           0x5
#define _T1CKIPPS_T1CKIPPS_MASK                             0x1F

// Register: T1GPPS
#define T1GPPS T1GPPS
extern volatile unsigned char           T1GPPS              __at(0x3AC5);
#ifndef _LIB_BUILD
asm("T1GPPS equ 03AC5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T1GPPS                 :5;
    };
} T1GPPSbits_t;
extern volatile T1GPPSbits_t T1GPPSbits __at(0x3AC5);
// bitfield macros
#define _T1GPPS_T1GPPS_POSN                                 0x0
#define _T1GPPS_T1GPPS_POSITION                             0x0
#define _T1GPPS_T1GPPS_SIZE                                 0x5
#define _T1GPPS_T1GPPS_LENGTH                               0x5
#define _T1GPPS_T1GPPS_MASK                                 0x1F

// Register: T3CKIPPS
#define T3CKIPPS T3CKIPPS
extern volatile unsigned char           T3CKIPPS            __at(0x3AC6);
#ifndef _LIB_BUILD
asm("T3CKIPPS equ 03AC6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T3CKIPPS               :5;
    };
} T3CKIPPSbits_t;
extern volatile T3CKIPPSbits_t T3CKIPPSbits __at(0x3AC6);
// bitfield macros
#define _T3CKIPPS_T3CKIPPS_POSN                             0x0
#define _T3CKIPPS_T3CKIPPS_POSITION                         0x0
#define _T3CKIPPS_T3CKIPPS_SIZE                             0x5
#define _T3CKIPPS_T3CKIPPS_LENGTH                           0x5
#define _T3CKIPPS_T3CKIPPS_MASK                             0x1F

// Register: T3GPPS
#define T3GPPS T3GPPS
extern volatile unsigned char           T3GPPS              __at(0x3AC7);
#ifndef _LIB_BUILD
asm("T3GPPS equ 03AC7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T3GPPS                 :5;
    };
} T3GPPSbits_t;
extern volatile T3GPPSbits_t T3GPPSbits __at(0x3AC7);
// bitfield macros
#define _T3GPPS_T3GPPS_POSN                                 0x0
#define _T3GPPS_T3GPPS_POSITION                             0x0
#define _T3GPPS_T3GPPS_SIZE                                 0x5
#define _T3GPPS_T3GPPS_LENGTH                               0x5
#define _T3GPPS_T3GPPS_MASK                                 0x1F

// Register: T5CKIPPS
#define T5CKIPPS T5CKIPPS
extern volatile unsigned char           T5CKIPPS            __at(0x3AC8);
#ifndef _LIB_BUILD
asm("T5CKIPPS equ 03AC8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T5CKIPPS               :5;
    };
} T5CKIPPSbits_t;
extern volatile T5CKIPPSbits_t T5CKIPPSbits __at(0x3AC8);
// bitfield macros
#define _T5CKIPPS_T5CKIPPS_POSN                             0x0
#define _T5CKIPPS_T5CKIPPS_POSITION                         0x0
#define _T5CKIPPS_T5CKIPPS_SIZE                             0x5
#define _T5CKIPPS_T5CKIPPS_LENGTH                           0x5
#define _T5CKIPPS_T5CKIPPS_MASK                             0x1F

// Register: T5GPPS
#define T5GPPS T5GPPS
extern volatile unsigned char           T5GPPS              __at(0x3AC9);
#ifndef _LIB_BUILD
asm("T5GPPS equ 03AC9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T5GPPS                 :5;
    };
} T5GPPSbits_t;
extern volatile T5GPPSbits_t T5GPPSbits __at(0x3AC9);
// bitfield macros
#define _T5GPPS_T5GPPS_POSN                                 0x0
#define _T5GPPS_T5GPPS_POSITION                             0x0
#define _T5GPPS_T5GPPS_SIZE                                 0x5
#define _T5GPPS_T5GPPS_LENGTH                               0x5
#define _T5GPPS_T5GPPS_MASK                                 0x1F

// Register: T2INPPS
#define T2INPPS T2INPPS
extern volatile unsigned char           T2INPPS             __at(0x3ACA);
#ifndef _LIB_BUILD
asm("T2INPPS equ 03ACAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T2INPPS                :5;
    };
} T2INPPSbits_t;
extern volatile T2INPPSbits_t T2INPPSbits __at(0x3ACA);
// bitfield macros
#define _T2INPPS_T2INPPS_POSN                               0x0
#define _T2INPPS_T2INPPS_POSITION                           0x0
#define _T2INPPS_T2INPPS_SIZE                               0x5
#define _T2INPPS_T2INPPS_LENGTH                             0x5
#define _T2INPPS_T2INPPS_MASK                               0x1F

// Register: T4INPPS
#define T4INPPS T4INPPS
extern volatile unsigned char           T4INPPS             __at(0x3ACB);
#ifndef _LIB_BUILD
asm("T4INPPS equ 03ACBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T4INPPS                :5;
    };
} T4INPPSbits_t;
extern volatile T4INPPSbits_t T4INPPSbits __at(0x3ACB);
// bitfield macros
#define _T4INPPS_T4INPPS_POSN                               0x0
#define _T4INPPS_T4INPPS_POSITION                           0x0
#define _T4INPPS_T4INPPS_SIZE                               0x5
#define _T4INPPS_T4INPPS_LENGTH                             0x5
#define _T4INPPS_T4INPPS_MASK                               0x1F

// Register: T6INPPS
#define T6INPPS T6INPPS
extern volatile unsigned char           T6INPPS             __at(0x3ACC);
#ifndef _LIB_BUILD
asm("T6INPPS equ 03ACCh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T6INPPS                :5;
    };
} T6INPPSbits_t;
extern volatile T6INPPSbits_t T6INPPSbits __at(0x3ACC);
// bitfield macros
#define _T6INPPS_T6INPPS_POSN                               0x0
#define _T6INPPS_T6INPPS_POSITION                           0x0
#define _T6INPPS_T6INPPS_SIZE                               0x5
#define _T6INPPS_T6INPPS_LENGTH                             0x5
#define _T6INPPS_T6INPPS_MASK                               0x1F

// Register: CCP1PPS
#define CCP1PPS CCP1PPS
extern volatile unsigned char           CCP1PPS             __at(0x3ACD);
#ifndef _LIB_BUILD
asm("CCP1PPS equ 03ACDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP1PPS                :5;
    };
} CCP1PPSbits_t;
extern volatile CCP1PPSbits_t CCP1PPSbits __at(0x3ACD);
// bitfield macros
#define _CCP1PPS_CCP1PPS_POSN                               0x0
#define _CCP1PPS_CCP1PPS_POSITION                           0x0
#define _CCP1PPS_CCP1PPS_SIZE                               0x5
#define _CCP1PPS_CCP1PPS_LENGTH                             0x5
#define _CCP1PPS_CCP1PPS_MASK                               0x1F

// Register: CCP2PPS
#define CCP2PPS CCP2PPS
extern volatile unsigned char           CCP2PPS             __at(0x3ACE);
#ifndef _LIB_BUILD
asm("CCP2PPS equ 03ACEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP2PPS                :5;
    };
} CCP2PPSbits_t;
extern volatile CCP2PPSbits_t CCP2PPSbits __at(0x3ACE);
// bitfield macros
#define _CCP2PPS_CCP2PPS_POSN                               0x0
#define _CCP2PPS_CCP2PPS_POSITION                           0x0
#define _CCP2PPS_CCP2PPS_SIZE                               0x5
#define _CCP2PPS_CCP2PPS_LENGTH                             0x5
#define _CCP2PPS_CCP2PPS_MASK                               0x1F

// Register: CCP3PPS
#define CCP3PPS CCP3PPS
extern volatile unsigned char           CCP3PPS             __at(0x3ACF);
#ifndef _LIB_BUILD
asm("CCP3PPS equ 03ACFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP3PPS                :5;
    };
} CCP3PPSbits_t;
extern volatile CCP3PPSbits_t CCP3PPSbits __at(0x3ACF);
// bitfield macros
#define _CCP3PPS_CCP3PPS_POSN                               0x0
#define _CCP3PPS_CCP3PPS_POSITION                           0x0
#define _CCP3PPS_CCP3PPS_SIZE                               0x5
#define _CCP3PPS_CCP3PPS_LENGTH                             0x5
#define _CCP3PPS_CCP3PPS_MASK                               0x1F

// Register: CCP4PPS
#define CCP4PPS CCP4PPS
extern volatile unsigned char           CCP4PPS             __at(0x3AD0);
#ifndef _LIB_BUILD
asm("CCP4PPS equ 03AD0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP4PPS                :5;
    };
} CCP4PPSbits_t;
extern volatile CCP4PPSbits_t CCP4PPSbits __at(0x3AD0);
// bitfield macros
#define _CCP4PPS_CCP4PPS_POSN                               0x0
#define _CCP4PPS_CCP4PPS_POSITION                           0x0
#define _CCP4PPS_CCP4PPS_SIZE                               0x5
#define _CCP4PPS_CCP4PPS_LENGTH                             0x5
#define _CCP4PPS_CCP4PPS_MASK                               0x1F

// Register: SMT1WINPPS
#define SMT1WINPPS SMT1WINPPS
extern volatile unsigned char           SMT1WINPPS          __at(0x3AD1);
#ifndef _LIB_BUILD
asm("SMT1WINPPS equ 03AD1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SMT1WINPPS             :5;
    };
} SMT1WINPPSbits_t;
extern volatile SMT1WINPPSbits_t SMT1WINPPSbits __at(0x3AD1);
// bitfield macros
#define _SMT1WINPPS_SMT1WINPPS_POSN                         0x0
#define _SMT1WINPPS_SMT1WINPPS_POSITION                     0x0
#define _SMT1WINPPS_SMT1WINPPS_SIZE                         0x5
#define _SMT1WINPPS_SMT1WINPPS_LENGTH                       0x5
#define _SMT1WINPPS_SMT1WINPPS_MASK                         0x1F

// Register: SMT1SIGPPS
#define SMT1SIGPPS SMT1SIGPPS
extern volatile unsigned char           SMT1SIGPPS          __at(0x3AD2);
#ifndef _LIB_BUILD
asm("SMT1SIGPPS equ 03AD2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SMT1SIGPPS             :5;
    };
} SMT1SIGPPSbits_t;
extern volatile SMT1SIGPPSbits_t SMT1SIGPPSbits __at(0x3AD2);
// bitfield macros
#define _SMT1SIGPPS_SMT1SIGPPS_POSN                         0x0
#define _SMT1SIGPPS_SMT1SIGPPS_POSITION                     0x0
#define _SMT1SIGPPS_SMT1SIGPPS_SIZE                         0x5
#define _SMT1SIGPPS_SMT1SIGPPS_LENGTH                       0x5
#define _SMT1SIGPPS_SMT1SIGPPS_MASK                         0x1F

// Register: CWG1INPPS
#define CWG1INPPS CWG1INPPS
extern volatile unsigned char           CWG1INPPS           __at(0x3AD3);
#ifndef _LIB_BUILD
asm("CWG1INPPS equ 03AD3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CWG1INPPS              :5;
    };
} CWG1INPPSbits_t;
extern volatile CWG1INPPSbits_t CWG1INPPSbits __at(0x3AD3);
// bitfield macros
#define _CWG1INPPS_CWG1INPPS_POSN                           0x0
#define _CWG1INPPS_CWG1INPPS_POSITION                       0x0
#define _CWG1INPPS_CWG1INPPS_SIZE                           0x5
#define _CWG1INPPS_CWG1INPPS_LENGTH                         0x5
#define _CWG1INPPS_CWG1INPPS_MASK                           0x1F

// Register: CWG2INPPS
#define CWG2INPPS CWG2INPPS
extern volatile unsigned char           CWG2INPPS           __at(0x3AD4);
#ifndef _LIB_BUILD
asm("CWG2INPPS equ 03AD4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CWG2INPPS              :5;
    };
} CWG2INPPSbits_t;
extern volatile CWG2INPPSbits_t CWG2INPPSbits __at(0x3AD4);
// bitfield macros
#define _CWG2INPPS_CWG2INPPS_POSN                           0x0
#define _CWG2INPPS_CWG2INPPS_POSITION                       0x0
#define _CWG2INPPS_CWG2INPPS_SIZE                           0x5
#define _CWG2INPPS_CWG2INPPS_LENGTH                         0x5
#define _CWG2INPPS_CWG2INPPS_MASK                           0x1F

// Register: CWG3INPPS
#define CWG3INPPS CWG3INPPS
extern volatile unsigned char           CWG3INPPS           __at(0x3AD5);
#ifndef _LIB_BUILD
asm("CWG3INPPS equ 03AD5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CWG3INPPS              :5;
    };
} CWG3INPPSbits_t;
extern volatile CWG3INPPSbits_t CWG3INPPSbits __at(0x3AD5);
// bitfield macros
#define _CWG3INPPS_CWG3INPPS_POSN                           0x0
#define _CWG3INPPS_CWG3INPPS_POSITION                       0x0
#define _CWG3INPPS_CWG3INPPS_SIZE                           0x5
#define _CWG3INPPS_CWG3INPPS_LENGTH                         0x5
#define _CWG3INPPS_CWG3INPPS_MASK                           0x1F

// Register: MD1CARLPPS
#define MD1CARLPPS MD1CARLPPS
extern volatile unsigned char           MD1CARLPPS          __at(0x3AD6);
#ifndef _LIB_BUILD
asm("MD1CARLPPS equ 03AD6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MD1CARLPPS             :5;
    };
} MD1CARLPPSbits_t;
extern volatile MD1CARLPPSbits_t MD1CARLPPSbits __at(0x3AD6);
// bitfield macros
#define _MD1CARLPPS_MD1CARLPPS_POSN                         0x0
#define _MD1CARLPPS_MD1CARLPPS_POSITION                     0x0
#define _MD1CARLPPS_MD1CARLPPS_SIZE                         0x5
#define _MD1CARLPPS_MD1CARLPPS_LENGTH                       0x5
#define _MD1CARLPPS_MD1CARLPPS_MASK                         0x1F

// Register: MD1CARHPPS
#define MD1CARHPPS MD1CARHPPS
extern volatile unsigned char           MD1CARHPPS          __at(0x3AD7);
#ifndef _LIB_BUILD
asm("MD1CARHPPS equ 03AD7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MD1CARHPPS             :5;
    };
} MD1CARHPPSbits_t;
extern volatile MD1CARHPPSbits_t MD1CARHPPSbits __at(0x3AD7);
// bitfield macros
#define _MD1CARHPPS_MD1CARHPPS_POSN                         0x0
#define _MD1CARHPPS_MD1CARHPPS_POSITION                     0x0
#define _MD1CARHPPS_MD1CARHPPS_SIZE                         0x5
#define _MD1CARHPPS_MD1CARHPPS_LENGTH                       0x5
#define _MD1CARHPPS_MD1CARHPPS_MASK                         0x1F

// Register: MD1SRCPPS
#define MD1SRCPPS MD1SRCPPS
extern volatile unsigned char           MD1SRCPPS           __at(0x3AD8);
#ifndef _LIB_BUILD
asm("MD1SRCPPS equ 03AD8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MD1SRCPPS              :5;
    };
} MD1SRCPPSbits_t;
extern volatile MD1SRCPPSbits_t MD1SRCPPSbits __at(0x3AD8);
// bitfield macros
#define _MD1SRCPPS_MD1SRCPPS_POSN                           0x0
#define _MD1SRCPPS_MD1SRCPPS_POSITION                       0x0
#define _MD1SRCPPS_MD1SRCPPS_SIZE                           0x5
#define _MD1SRCPPS_MD1SRCPPS_LENGTH                         0x5
#define _MD1SRCPPS_MD1SRCPPS_MASK                           0x1F

// Register: CLCIN0PPS
#define CLCIN0PPS CLCIN0PPS
extern volatile unsigned char           CLCIN0PPS           __at(0x3AD9);
#ifndef _LIB_BUILD
asm("CLCIN0PPS equ 03AD9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLCIN0PPS              :5;
    };
} CLCIN0PPSbits_t;
extern volatile CLCIN0PPSbits_t CLCIN0PPSbits __at(0x3AD9);
// bitfield macros
#define _CLCIN0PPS_CLCIN0PPS_POSN                           0x0
#define _CLCIN0PPS_CLCIN0PPS_POSITION                       0x0
#define _CLCIN0PPS_CLCIN0PPS_SIZE                           0x5
#define _CLCIN0PPS_CLCIN0PPS_LENGTH                         0x5
#define _CLCIN0PPS_CLCIN0PPS_MASK                           0x1F

// Register: CLCIN1PPS
#define CLCIN1PPS CLCIN1PPS
extern volatile unsigned char           CLCIN1PPS           __at(0x3ADA);
#ifndef _LIB_BUILD
asm("CLCIN1PPS equ 03ADAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLCIN1PPS              :5;
    };
} CLCIN1PPSbits_t;
extern volatile CLCIN1PPSbits_t CLCIN1PPSbits __at(0x3ADA);
// bitfield macros
#define _CLCIN1PPS_CLCIN1PPS_POSN                           0x0
#define _CLCIN1PPS_CLCIN1PPS_POSITION                       0x0
#define _CLCIN1PPS_CLCIN1PPS_SIZE                           0x5
#define _CLCIN1PPS_CLCIN1PPS_LENGTH                         0x5
#define _CLCIN1PPS_CLCIN1PPS_MASK                           0x1F

// Register: CLCIN2PPS
#define CLCIN2PPS CLCIN2PPS
extern volatile unsigned char           CLCIN2PPS           __at(0x3ADB);
#ifndef _LIB_BUILD
asm("CLCIN2PPS equ 03ADBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLCIN2PPS              :5;
    };
} CLCIN2PPSbits_t;
extern volatile CLCIN2PPSbits_t CLCIN2PPSbits __at(0x3ADB);
// bitfield macros
#define _CLCIN2PPS_CLCIN2PPS_POSN                           0x0
#define _CLCIN2PPS_CLCIN2PPS_POSITION                       0x0
#define _CLCIN2PPS_CLCIN2PPS_SIZE                           0x5
#define _CLCIN2PPS_CLCIN2PPS_LENGTH                         0x5
#define _CLCIN2PPS_CLCIN2PPS_MASK                           0x1F

// Register: CLCIN3PPS
#define CLCIN3PPS CLCIN3PPS
extern volatile unsigned char           CLCIN3PPS           __at(0x3ADC);
#ifndef _LIB_BUILD
asm("CLCIN3PPS equ 03ADCh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLCIN3PPS              :5;
    };
} CLCIN3PPSbits_t;
extern volatile CLCIN3PPSbits_t CLCIN3PPSbits __at(0x3ADC);
// bitfield macros
#define _CLCIN3PPS_CLCIN3PPS_POSN                           0x0
#define _CLCIN3PPS_CLCIN3PPS_POSITION                       0x0
#define _CLCIN3PPS_CLCIN3PPS_SIZE                           0x5
#define _CLCIN3PPS_CLCIN3PPS_LENGTH                         0x5
#define _CLCIN3PPS_CLCIN3PPS_MASK                           0x1F

// Register: ADACTPPS
#define ADACTPPS ADACTPPS
extern volatile unsigned char           ADACTPPS            __at(0x3ADD);
#ifndef _LIB_BUILD
asm("ADACTPPS equ 03ADDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADACTPPS               :5;
    };
} ADACTPPSbits_t;
extern volatile ADACTPPSbits_t ADACTPPSbits __at(0x3ADD);
// bitfield macros
#define _ADACTPPS_ADACTPPS_POSN                             0x0
#define _ADACTPPS_ADACTPPS_POSITION                         0x0
#define _ADACTPPS_ADACTPPS_SIZE                             0x5
#define _ADACTPPS_ADACTPPS_LENGTH                           0x5
#define _ADACTPPS_ADACTPPS_MASK                             0x1F

// Register: SPI1SCKPPS
#define SPI1SCKPPS SPI1SCKPPS
extern volatile unsigned char           SPI1SCKPPS          __at(0x3ADE);
#ifndef _LIB_BUILD
asm("SPI1SCKPPS equ 03ADEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SPI1SCKPPS             :5;
    };
} SPI1SCKPPSbits_t;
extern volatile SPI1SCKPPSbits_t SPI1SCKPPSbits __at(0x3ADE);
// bitfield macros
#define _SPI1SCKPPS_SPI1SCKPPS_POSN                         0x0
#define _SPI1SCKPPS_SPI1SCKPPS_POSITION                     0x0
#define _SPI1SCKPPS_SPI1SCKPPS_SIZE                         0x5
#define _SPI1SCKPPS_SPI1SCKPPS_LENGTH                       0x5
#define _SPI1SCKPPS_SPI1SCKPPS_MASK                         0x1F

// Register: SPI1SDIPPS
#define SPI1SDIPPS SPI1SDIPPS
extern volatile unsigned char           SPI1SDIPPS          __at(0x3ADF);
#ifndef _LIB_BUILD
asm("SPI1SDIPPS equ 03ADFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SPI1SDIPPS             :5;
    };
} SPI1SDIPPSbits_t;
extern volatile SPI1SDIPPSbits_t SPI1SDIPPSbits __at(0x3ADF);
// bitfield macros
#define _SPI1SDIPPS_SPI1SDIPPS_POSN                         0x0
#define _SPI1SDIPPS_SPI1SDIPPS_POSITION                     0x0
#define _SPI1SDIPPS_SPI1SDIPPS_SIZE                         0x5
#define _SPI1SDIPPS_SPI1SDIPPS_LENGTH                       0x5
#define _SPI1SDIPPS_SPI1SDIPPS_MASK                         0x1F

// Register: SPI1SSPPS
#define SPI1SSPPS SPI1SSPPS
extern volatile unsigned char           SPI1SSPPS           __at(0x3AE0);
#ifndef _LIB_BUILD
asm("SPI1SSPPS equ 03AE0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SPI1SSPPS              :5;
    };
} SPI1SSPPSbits_t;
extern volatile SPI1SSPPSbits_t SPI1SSPPSbits __at(0x3AE0);
// bitfield macros
#define _SPI1SSPPS_SPI1SSPPS_POSN                           0x0
#define _SPI1SSPPS_SPI1SSPPS_POSITION                       0x0
#define _SPI1SSPPS_SPI1SSPPS_SIZE                           0x5
#define _SPI1SSPPS_SPI1SSPPS_LENGTH                         0x5
#define _SPI1SSPPS_SPI1SSPPS_MASK                           0x1F

// Register: I2C1SCLPPS
#define I2C1SCLPPS I2C1SCLPPS
extern volatile unsigned char           I2C1SCLPPS          __at(0x3AE1);
#ifndef _LIB_BUILD
asm("I2C1SCLPPS equ 03AE1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned I2C1SCLPPS             :5;
    };
} I2C1SCLPPSbits_t;
extern volatile I2C1SCLPPSbits_t I2C1SCLPPSbits __at(0x3AE1);
// bitfield macros
#define _I2C1SCLPPS_I2C1SCLPPS_POSN                         0x0
#define _I2C1SCLPPS_I2C1SCLPPS_POSITION                     0x0
#define _I2C1SCLPPS_I2C1SCLPPS_SIZE                         0x5
#define _I2C1SCLPPS_I2C1SCLPPS_LENGTH                       0x5
#define _I2C1SCLPPS_I2C1SCLPPS_MASK                         0x1F

// Register: I2C1SDAPPS
#define I2C1SDAPPS I2C1SDAPPS
extern volatile unsigned char           I2C1SDAPPS          __at(0x3AE2);
#ifndef _LIB_BUILD
asm("I2C1SDAPPS equ 03AE2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned I2C1SDAPPS             :5;
    };
} I2C1SDAPPSbits_t;
extern volatile I2C1SDAPPSbits_t I2C1SDAPPSbits __at(0x3AE2);
// bitfield macros
#define _I2C1SDAPPS_I2C1SDAPPS_POSN                         0x0
#define _I2C1SDAPPS_I2C1SDAPPS_POSITION                     0x0
#define _I2C1SDAPPS_I2C1SDAPPS_SIZE                         0x5
#define _I2C1SDAPPS_I2C1SDAPPS_LENGTH                       0x5
#define _I2C1SDAPPS_I2C1SDAPPS_MASK                         0x1F

// Register: I2C2SCLPPS
#define I2C2SCLPPS I2C2SCLPPS
extern volatile unsigned char           I2C2SCLPPS          __at(0x3AE3);
#ifndef _LIB_BUILD
asm("I2C2SCLPPS equ 03AE3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned I2C2SCLPPS             :5;
    };
} I2C2SCLPPSbits_t;
extern volatile I2C2SCLPPSbits_t I2C2SCLPPSbits __at(0x3AE3);
// bitfield macros
#define _I2C2SCLPPS_I2C2SCLPPS_POSN                         0x0
#define _I2C2SCLPPS_I2C2SCLPPS_POSITION                     0x0
#define _I2C2SCLPPS_I2C2SCLPPS_SIZE                         0x5
#define _I2C2SCLPPS_I2C2SCLPPS_LENGTH                       0x5
#define _I2C2SCLPPS_I2C2SCLPPS_MASK                         0x1F

// Register: I2C2SDAPPS
#define I2C2SDAPPS I2C2SDAPPS
extern volatile unsigned char           I2C2SDAPPS          __at(0x3AE4);
#ifndef _LIB_BUILD
asm("I2C2SDAPPS equ 03AE4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned I2C2SDAPPS             :5;
    };
} I2C2SDAPPSbits_t;
extern volatile I2C2SDAPPSbits_t I2C2SDAPPSbits __at(0x3AE4);
// bitfield macros
#define _I2C2SDAPPS_I2C2SDAPPS_POSN                         0x0
#define _I2C2SDAPPS_I2C2SDAPPS_POSITION                     0x0
#define _I2C2SDAPPS_I2C2SDAPPS_SIZE                         0x5
#define _I2C2SDAPPS_I2C2SDAPPS_LENGTH                       0x5
#define _I2C2SDAPPS_I2C2SDAPPS_MASK                         0x1F

// Register: U1RXPPS
#define U1RXPPS U1RXPPS
extern volatile unsigned char           U1RXPPS             __at(0x3AE5);
#ifndef _LIB_BUILD
asm("U1RXPPS equ 03AE5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned U1RXPPS                :5;
    };
} U1RXPPSbits_t;
extern volatile U1RXPPSbits_t U1RXPPSbits __at(0x3AE5);
// bitfield macros
#define _U1RXPPS_U1RXPPS_POSN                               0x0
#define _U1RXPPS_U1RXPPS_POSITION                           0x0
#define _U1RXPPS_U1RXPPS_SIZE                               0x5
#define _U1RXPPS_U1RXPPS_LENGTH                             0x5
#define _U1RXPPS_U1RXPPS_MASK                               0x1F

// Register: U1CTSPPS
#define U1CTSPPS U1CTSPPS
extern volatile unsigned char           U1CTSPPS            __at(0x3AE6);
#ifndef _LIB_BUILD
asm("U1CTSPPS equ 03AE6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned U1CTSPPS               :5;
    };
} U1CTSPPSbits_t;
extern volatile U1CTSPPSbits_t U1CTSPPSbits __at(0x3AE6);
// bitfield macros
#define _U1CTSPPS_U1CTSPPS_POSN                             0x0
#define _U1CTSPPS_U1CTSPPS_POSITION                         0x0
#define _U1CTSPPS_U1CTSPPS_SIZE                             0x5
#define _U1CTSPPS_U1CTSPPS_LENGTH                           0x5
#define _U1CTSPPS_U1CTSPPS_MASK                             0x1F

// Register: U2RXPPS
#define U2RXPPS U2RXPPS
extern volatile unsigned char           U2RXPPS             __at(0x3AE8);
#ifndef _LIB_BUILD
asm("U2RXPPS equ 03AE8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned U2RXPPS                :5;
    };
} U2RXPPSbits_t;
extern volatile U2RXPPSbits_t U2RXPPSbits __at(0x3AE8);
// bitfield macros
#define _U2RXPPS_U2RXPPS_POSN                               0x0
#define _U2RXPPS_U2RXPPS_POSITION                           0x0
#define _U2RXPPS_U2RXPPS_SIZE                               0x5
#define _U2RXPPS_U2RXPPS_LENGTH                             0x5
#define _U2RXPPS_U2RXPPS_MASK                               0x1F

// Register: U2CTSPPS
#define U2CTSPPS U2CTSPPS
extern volatile unsigned char           U2CTSPPS            __at(0x3AE9);
#ifndef _LIB_BUILD
asm("U2CTSPPS equ 03AE9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned U2CTSPPS               :5;
    };
} U2CTSPPSbits_t;
extern volatile U2CTSPPSbits_t U2CTSPPSbits __at(0x3AE9);
// bitfield macros
#define _U2CTSPPS_U2CTSPPS_POSN                             0x0
#define _U2CTSPPS_U2CTSPPS_POSITION                         0x0
#define _U2CTSPPS_U2CTSPPS_SIZE                             0x5
#define _U2CTSPPS_U2CTSPPS_LENGTH                           0x5
#define _U2CTSPPS_U2CTSPPS_MASK                             0x1F

// Register: DMA2BUF
#define DMA2BUF DMA2BUF
extern volatile unsigned char           DMA2BUF             __at(0x3BC9);
#ifndef _LIB_BUILD
asm("DMA2BUF equ 03BC9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BUF                    :8;
    };
    struct {
        unsigned BUF0                   :1;
        unsigned BUF1                   :1;
        unsigned BUF2                   :1;
        unsigned BUF3                   :1;
        unsigned BUF4                   :1;
        unsigned BUF5                   :1;
        unsigned BUF6                   :1;
        unsigned BUF7                   :1;
    };
    struct {
        unsigned DMA2BUF                :8;
    };
    struct {
        unsigned DMA2BUF0               :1;
        unsigned DMA2BUF1               :1;
        unsigned DMA2BUF2               :1;
        unsigned DMA2BUF3               :1;
        unsigned DMA2BUF4               :1;
        unsigned DMA2BUF5               :1;
        unsigned DMA2BUF6               :1;
        unsigned DMA2BUF7               :1;
    };
} DMA2BUFbits_t;
extern volatile DMA2BUFbits_t DMA2BUFbits __at(0x3BC9);
// bitfield macros
#define _DMA2BUF_BUF_POSN                                   0x0
#define _DMA2BUF_BUF_POSITION                               0x0
#define _DMA2BUF_BUF_SIZE                                   0x8
#define _DMA2BUF_BUF_LENGTH                                 0x8
#define _DMA2BUF_BUF_MASK                                   0xFF
#define _DMA2BUF_BUF0_POSN                                  0x0
#define _DMA2BUF_BUF0_POSITION                              0x0
#define _DMA2BUF_BUF0_SIZE                                  0x1
#define _DMA2BUF_BUF0_LENGTH                                0x1
#define _DMA2BUF_BUF0_MASK                                  0x1
#define _DMA2BUF_BUF1_POSN                                  0x1
#define _DMA2BUF_BUF1_POSITION                              0x1
#define _DMA2BUF_BUF1_SIZE                                  0x1
#define _DMA2BUF_BUF1_LENGTH                                0x1
#define _DMA2BUF_BUF1_MASK                                  0x2
#define _DMA2BUF_BUF2_POSN                                  0x2
#define _DMA2BUF_BUF2_POSITION                              0x2
#define _DMA2BUF_BUF2_SIZE                                  0x1
#define _DMA2BUF_BUF2_LENGTH                                0x1
#define _DMA2BUF_BUF2_MASK                                  0x4
#define _DMA2BUF_BUF3_POSN                                  0x3
#define _DMA2BUF_BUF3_POSITION                              0x3
#define _DMA2BUF_BUF3_SIZE                                  0x1
#define _DMA2BUF_BUF3_LENGTH                                0x1
#define _DMA2BUF_BUF3_MASK                                  0x8
#define _DMA2BUF_BUF4_POSN                                  0x4
#define _DMA2BUF_BUF4_POSITION                              0x4
#define _DMA2BUF_BUF4_SIZE                                  0x1
#define _DMA2BUF_BUF4_LENGTH                                0x1
#define _DMA2BUF_BUF4_MASK                                  0x10
#define _DMA2BUF_BUF5_POSN                                  0x5
#define _DMA2BUF_BUF5_POSITION                              0x5
#define _DMA2BUF_BUF5_SIZE                                  0x1
#define _DMA2BUF_BUF5_LENGTH                                0x1
#define _DMA2BUF_BUF5_MASK                                  0x20
#define _DMA2BUF_BUF6_POSN                                  0x6
#define _DMA2BUF_BUF6_POSITION                              0x6
#define _DMA2BUF_BUF6_SIZE                                  0x1
#define _DMA2BUF_BUF6_LENGTH                                0x1
#define _DMA2BUF_BUF6_MASK                                  0x40
#define _DMA2BUF_BUF7_POSN                                  0x7
#define _DMA2BUF_BUF7_POSITION                              0x7
#define _DMA2BUF_BUF7_SIZE                                  0x1
#define _DMA2BUF_BUF7_LENGTH                                0x1
#define _DMA2BUF_BUF7_MASK                                  0x80
#define _DMA2BUF_DMA2BUF_POSN                               0x0
#define _DMA2BUF_DMA2BUF_POSITION                           0x0
#define _DMA2BUF_DMA2BUF_SIZE                               0x8
#define _DMA2BUF_DMA2BUF_LENGTH                             0x8
#define _DMA2BUF_DMA2BUF_MASK                               0xFF
#define _DMA2BUF_DMA2BUF0_POSN                              0x0
#define _DMA2BUF_DMA2BUF0_POSITION                          0x0
#define _DMA2BUF_DMA2BUF0_SIZE                              0x1
#define _DMA2BUF_DMA2BUF0_LENGTH                            0x1
#define _DMA2BUF_DMA2BUF0_MASK                              0x1
#define _DMA2BUF_DMA2BUF1_POSN                              0x1
#define _DMA2BUF_DMA2BUF1_POSITION                          0x1
#define _DMA2BUF_DMA2BUF1_SIZE                              0x1
#define _DMA2BUF_DMA2BUF1_LENGTH                            0x1
#define _DMA2BUF_DMA2BUF1_MASK                              0x2
#define _DMA2BUF_DMA2BUF2_POSN                              0x2
#define _DMA2BUF_DMA2BUF2_POSITION                          0x2
#define _DMA2BUF_DMA2BUF2_SIZE                              0x1
#define _DMA2BUF_DMA2BUF2_LENGTH                            0x1
#define _DMA2BUF_DMA2BUF2_MASK                              0x4
#define _DMA2BUF_DMA2BUF3_POSN                              0x3
#define _DMA2BUF_DMA2BUF3_POSITION                          0x3
#define _DMA2BUF_DMA2BUF3_SIZE                              0x1
#define _DMA2BUF_DMA2BUF3_LENGTH                            0x1
#define _DMA2BUF_DMA2BUF3_MASK                              0x8
#define _DMA2BUF_DMA2BUF4_POSN                              0x4
#define _DMA2BUF_DMA2BUF4_POSITION                          0x4
#define _DMA2BUF_DMA2BUF4_SIZE                              0x1
#define _DMA2BUF_DMA2BUF4_LENGTH                            0x1
#define _DMA2BUF_DMA2BUF4_MASK                              0x10
#define _DMA2BUF_DMA2BUF5_POSN                              0x5
#define _DMA2BUF_DMA2BUF5_POSITION                          0x5
#define _DMA2BUF_DMA2BUF5_SIZE                              0x1
#define _DMA2BUF_DMA2BUF5_LENGTH                            0x1
#define _DMA2BUF_DMA2BUF5_MASK                              0x20
#define _DMA2BUF_DMA2BUF6_POSN                              0x6
#define _DMA2BUF_DMA2BUF6_POSITION                          0x6
#define _DMA2BUF_DMA2BUF6_SIZE                              0x1
#define _DMA2BUF_DMA2BUF6_LENGTH                            0x1
#define _DMA2BUF_DMA2BUF6_MASK                              0x40
#define _DMA2BUF_DMA2BUF7_POSN                              0x7
#define _DMA2BUF_DMA2BUF7_POSITION                          0x7
#define _DMA2BUF_DMA2BUF7_SIZE                              0x1
#define _DMA2BUF_DMA2BUF7_LENGTH                            0x1
#define _DMA2BUF_DMA2BUF7_MASK                              0x80

// Register: DMA2DCNT
#define DMA2DCNT DMA2DCNT
extern volatile unsigned short          DMA2DCNT            __at(0x3BCA);
#ifndef _LIB_BUILD
asm("DMA2DCNT equ 03BCAh");
#endif

// Register: DMA2DCNTL
#define DMA2DCNTL DMA2DCNTL
extern volatile unsigned char           DMA2DCNTL           __at(0x3BCA);
#ifndef _LIB_BUILD
asm("DMA2DCNTL equ 03BCAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DCNT                   :8;
    };
    struct {
        unsigned DCNT0                  :1;
        unsigned DCNT1                  :1;
        unsigned DCNT2                  :1;
        unsigned DCNT3                  :1;
        unsigned DCNT4                  :1;
        unsigned DCNT5                  :1;
        unsigned DCNT6                  :1;
        unsigned DCNT7                  :1;
    };
    struct {
        unsigned DMA2DCNT               :8;
    };
    struct {
        unsigned DMA2DCNT0              :1;
        unsigned DMA2DCNT1              :1;
        unsigned DMA2DCNT2              :1;
        unsigned DMA2DCNT3              :1;
        unsigned DMA2DCNT4              :1;
        unsigned DMA2DCNT5              :1;
        unsigned DMA2DCNT6              :1;
        unsigned DMA2DCNT7              :1;
    };
} DMA2DCNTLbits_t;
extern volatile DMA2DCNTLbits_t DMA2DCNTLbits __at(0x3BCA);
// bitfield macros
#define _DMA2DCNTL_DCNT_POSN                                0x0
#define _DMA2DCNTL_DCNT_POSITION                            0x0
#define _DMA2DCNTL_DCNT_SIZE                                0x8
#define _DMA2DCNTL_DCNT_LENGTH                              0x8
#define _DMA2DCNTL_DCNT_MASK                                0xFF
#define _DMA2DCNTL_DCNT0_POSN                               0x0
#define _DMA2DCNTL_DCNT0_POSITION                           0x0
#define _DMA2DCNTL_DCNT0_SIZE                               0x1
#define _DMA2DCNTL_DCNT0_LENGTH                             0x1
#define _DMA2DCNTL_DCNT0_MASK                               0x1
#define _DMA2DCNTL_DCNT1_POSN                               0x1
#define _DMA2DCNTL_DCNT1_POSITION                           0x1
#define _DMA2DCNTL_DCNT1_SIZE                               0x1
#define _DMA2DCNTL_DCNT1_LENGTH                             0x1
#define _DMA2DCNTL_DCNT1_MASK                               0x2
#define _DMA2DCNTL_DCNT2_POSN                               0x2
#define _DMA2DCNTL_DCNT2_POSITION                           0x2
#define _DMA2DCNTL_DCNT2_SIZE                               0x1
#define _DMA2DCNTL_DCNT2_LENGTH                             0x1
#define _DMA2DCNTL_DCNT2_MASK                               0x4
#define _DMA2DCNTL_DCNT3_POSN                               0x3
#define _DMA2DCNTL_DCNT3_POSITION                           0x3
#define _DMA2DCNTL_DCNT3_SIZE                               0x1
#define _DMA2DCNTL_DCNT3_LENGTH                             0x1
#define _DMA2DCNTL_DCNT3_MASK                               0x8
#define _DMA2DCNTL_DCNT4_POSN                               0x4
#define _DMA2DCNTL_DCNT4_POSITION                           0x4
#define _DMA2DCNTL_DCNT4_SIZE                               0x1
#define _DMA2DCNTL_DCNT4_LENGTH                             0x1
#define _DMA2DCNTL_DCNT4_MASK                               0x10
#define _DMA2DCNTL_DCNT5_POSN                               0x5
#define _DMA2DCNTL_DCNT5_POSITION                           0x5
#define _DMA2DCNTL_DCNT5_SIZE                               0x1
#define _DMA2DCNTL_DCNT5_LENGTH                             0x1
#define _DMA2DCNTL_DCNT5_MASK                               0x20
#define _DMA2DCNTL_DCNT6_POSN                               0x6
#define _DMA2DCNTL_DCNT6_POSITION                           0x6
#define _DMA2DCNTL_DCNT6_SIZE                               0x1
#define _DMA2DCNTL_DCNT6_LENGTH                             0x1
#define _DMA2DCNTL_DCNT6_MASK                               0x40
#define _DMA2DCNTL_DCNT7_POSN                               0x7
#define _DMA2DCNTL_DCNT7_POSITION                           0x7
#define _DMA2DCNTL_DCNT7_SIZE                               0x1
#define _DMA2DCNTL_DCNT7_LENGTH                             0x1
#define _DMA2DCNTL_DCNT7_MASK                               0x80
#define _DMA2DCNTL_DMA2DCNT_POSN                            0x0
#define _DMA2DCNTL_DMA2DCNT_POSITION                        0x0
#define _DMA2DCNTL_DMA2DCNT_SIZE                            0x8
#define _DMA2DCNTL_DMA2DCNT_LENGTH                          0x8
#define _DMA2DCNTL_DMA2DCNT_MASK                            0xFF
#define _DMA2DCNTL_DMA2DCNT0_POSN                           0x0
#define _DMA2DCNTL_DMA2DCNT0_POSITION                       0x0
#define _DMA2DCNTL_DMA2DCNT0_SIZE                           0x1
#define _DMA2DCNTL_DMA2DCNT0_LENGTH                         0x1
#define _DMA2DCNTL_DMA2DCNT0_MASK                           0x1
#define _DMA2DCNTL_DMA2DCNT1_POSN                           0x1
#define _DMA2DCNTL_DMA2DCNT1_POSITION                       0x1
#define _DMA2DCNTL_DMA2DCNT1_SIZE                           0x1
#define _DMA2DCNTL_DMA2DCNT1_LENGTH                         0x1
#define _DMA2DCNTL_DMA2DCNT1_MASK                           0x2
#define _DMA2DCNTL_DMA2DCNT2_POSN                           0x2
#define _DMA2DCNTL_DMA2DCNT2_POSITION                       0x2
#define _DMA2DCNTL_DMA2DCNT2_SIZE                           0x1
#define _DMA2DCNTL_DMA2DCNT2_LENGTH                         0x1
#define _DMA2DCNTL_DMA2DCNT2_MASK                           0x4
#define _DMA2DCNTL_DMA2DCNT3_POSN                           0x3
#define _DMA2DCNTL_DMA2DCNT3_POSITION                       0x3
#define _DMA2DCNTL_DMA2DCNT3_SIZE                           0x1
#define _DMA2DCNTL_DMA2DCNT3_LENGTH                         0x1
#define _DMA2DCNTL_DMA2DCNT3_MASK                           0x8
#define _DMA2DCNTL_DMA2DCNT4_POSN                           0x4
#define _DMA2DCNTL_DMA2DCNT4_POSITION                       0x4
#define _DMA2DCNTL_DMA2DCNT4_SIZE                           0x1
#define _DMA2DCNTL_DMA2DCNT4_LENGTH                         0x1
#define _DMA2DCNTL_DMA2DCNT4_MASK                           0x10
#define _DMA2DCNTL_DMA2DCNT5_POSN                           0x5
#define _DMA2DCNTL_DMA2DCNT5_POSITION                       0x5
#define _DMA2DCNTL_DMA2DCNT5_SIZE                           0x1
#define _DMA2DCNTL_DMA2DCNT5_LENGTH                         0x1
#define _DMA2DCNTL_DMA2DCNT5_MASK                           0x20
#define _DMA2DCNTL_DMA2DCNT6_POSN                           0x6
#define _DMA2DCNTL_DMA2DCNT6_POSITION                       0x6
#define _DMA2DCNTL_DMA2DCNT6_SIZE                           0x1
#define _DMA2DCNTL_DMA2DCNT6_LENGTH                         0x1
#define _DMA2DCNTL_DMA2DCNT6_MASK                           0x40
#define _DMA2DCNTL_DMA2DCNT7_POSN                           0x7
#define _DMA2DCNTL_DMA2DCNT7_POSITION                       0x7
#define _DMA2DCNTL_DMA2DCNT7_SIZE                           0x1
#define _DMA2DCNTL_DMA2DCNT7_LENGTH                         0x1
#define _DMA2DCNTL_DMA2DCNT7_MASK                           0x80

// Register: DMA2DCNTH
#define DMA2DCNTH DMA2DCNTH
extern volatile unsigned char           DMA2DCNTH           __at(0x3BCB);
#ifndef _LIB_BUILD
asm("DMA2DCNTH equ 03BCBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DCNT                   :4;
    };
    struct {
        unsigned DCNT8                  :1;
        unsigned DCNT9                  :1;
        unsigned DCNT10                 :1;
        unsigned DCNT11                 :1;
    };
    struct {
        unsigned DMA2SCNT               :4;
    };
    struct {
        unsigned DMA2DCNT8              :1;
        unsigned DMA2DCNT9              :1;
        unsigned DMA2DCNT10             :1;
        unsigned DMA2DCNT11             :1;
    };
} DMA2DCNTHbits_t;
extern volatile DMA2DCNTHbits_t DMA2DCNTHbits __at(0x3BCB);
// bitfield macros
#define _DMA2DCNTH_DCNT_POSN                                0x0
#define _DMA2DCNTH_DCNT_POSITION                            0x0
#define _DMA2DCNTH_DCNT_SIZE                                0x4
#define _DMA2DCNTH_DCNT_LENGTH                              0x4
#define _DMA2DCNTH_DCNT_MASK                                0xF
#define _DMA2DCNTH_DCNT8_POSN                               0x0
#define _DMA2DCNTH_DCNT8_POSITION                           0x0
#define _DMA2DCNTH_DCNT8_SIZE                               0x1
#define _DMA2DCNTH_DCNT8_LENGTH                             0x1
#define _DMA2DCNTH_DCNT8_MASK                               0x1
#define _DMA2DCNTH_DCNT9_POSN                               0x1
#define _DMA2DCNTH_DCNT9_POSITION                           0x1
#define _DMA2DCNTH_DCNT9_SIZE                               0x1
#define _DMA2DCNTH_DCNT9_LENGTH                             0x1
#define _DMA2DCNTH_DCNT9_MASK                               0x2
#define _DMA2DCNTH_DCNT10_POSN                              0x2
#define _DMA2DCNTH_DCNT10_POSITION                          0x2
#define _DMA2DCNTH_DCNT10_SIZE                              0x1
#define _DMA2DCNTH_DCNT10_LENGTH                            0x1
#define _DMA2DCNTH_DCNT10_MASK                              0x4
#define _DMA2DCNTH_DCNT11_POSN                              0x3
#define _DMA2DCNTH_DCNT11_POSITION                          0x3
#define _DMA2DCNTH_DCNT11_SIZE                              0x1
#define _DMA2DCNTH_DCNT11_LENGTH                            0x1
#define _DMA2DCNTH_DCNT11_MASK                              0x8
#define _DMA2DCNTH_DMA2SCNT_POSN                            0x0
#define _DMA2DCNTH_DMA2SCNT_POSITION                        0x0
#define _DMA2DCNTH_DMA2SCNT_SIZE                            0x4
#define _DMA2DCNTH_DMA2SCNT_LENGTH                          0x4
#define _DMA2DCNTH_DMA2SCNT_MASK                            0xF
#define _DMA2DCNTH_DMA2DCNT8_POSN                           0x0
#define _DMA2DCNTH_DMA2DCNT8_POSITION                       0x0
#define _DMA2DCNTH_DMA2DCNT8_SIZE                           0x1
#define _DMA2DCNTH_DMA2DCNT8_LENGTH                         0x1
#define _DMA2DCNTH_DMA2DCNT8_MASK                           0x1
#define _DMA2DCNTH_DMA2DCNT9_POSN                           0x1
#define _DMA2DCNTH_DMA2DCNT9_POSITION                       0x1
#define _DMA2DCNTH_DMA2DCNT9_SIZE                           0x1
#define _DMA2DCNTH_DMA2DCNT9_LENGTH                         0x1
#define _DMA2DCNTH_DMA2DCNT9_MASK                           0x2
#define _DMA2DCNTH_DMA2DCNT10_POSN                          0x2
#define _DMA2DCNTH_DMA2DCNT10_POSITION                      0x2
#define _DMA2DCNTH_DMA2DCNT10_SIZE                          0x1
#define _DMA2DCNTH_DMA2DCNT10_LENGTH                        0x1
#define _DMA2DCNTH_DMA2DCNT10_MASK                          0x4
#define _DMA2DCNTH_DMA2DCNT11_POSN                          0x3
#define _DMA2DCNTH_DMA2DCNT11_POSITION                      0x3
#define _DMA2DCNTH_DMA2DCNT11_SIZE                          0x1
#define _DMA2DCNTH_DMA2DCNT11_LENGTH                        0x1
#define _DMA2DCNTH_DMA2DCNT11_MASK                          0x8

// Register: DMA2DPTR
#define DMA2DPTR DMA2DPTR
extern volatile unsigned short          DMA2DPTR            __at(0x3BCC);
#ifndef _LIB_BUILD
asm("DMA2DPTR equ 03BCCh");
#endif

// Register: DMA2DPTRL
#define DMA2DPTRL DMA2DPTRL
extern volatile unsigned char           DMA2DPTRL           __at(0x3BCC);
#ifndef _LIB_BUILD
asm("DMA2DPTRL equ 03BCCh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DPTR                   :8;
    };
    struct {
        unsigned DPTR0                  :1;
        unsigned DPTR1                  :1;
        unsigned DPTR2                  :1;
        unsigned DPTR3                  :1;
        unsigned DPTR4                  :1;
        unsigned DPTR5                  :1;
        unsigned DPTR6                  :1;
        unsigned DPTR7                  :1;
    };
    struct {
        unsigned DMA2DPTR               :8;
    };
    struct {
        unsigned DMA2DPTR0              :1;
        unsigned DMA2DPTR1              :1;
        unsigned DMA2DPTR2              :1;
        unsigned DMA2DPTR3              :1;
        unsigned DMA2DPTR4              :1;
        unsigned DMA2DPTR5              :1;
        unsigned DMA2DPTR6              :1;
        unsigned DMA2DPTR7              :1;
    };
} DMA2DPTRLbits_t;
extern volatile DMA2DPTRLbits_t DMA2DPTRLbits __at(0x3BCC);
// bitfield macros
#define _DMA2DPTRL_DPTR_POSN                                0x0
#define _DMA2DPTRL_DPTR_POSITION                            0x0
#define _DMA2DPTRL_DPTR_SIZE                                0x8
#define _DMA2DPTRL_DPTR_LENGTH                              0x8
#define _DMA2DPTRL_DPTR_MASK                                0xFF
#define _DMA2DPTRL_DPTR0_POSN                               0x0
#define _DMA2DPTRL_DPTR0_POSITION                           0x0
#define _DMA2DPTRL_DPTR0_SIZE                               0x1
#define _DMA2DPTRL_DPTR0_LENGTH                             0x1
#define _DMA2DPTRL_DPTR0_MASK                               0x1
#define _DMA2DPTRL_DPTR1_POSN                               0x1
#define _DMA2DPTRL_DPTR1_POSITION                           0x1
#define _DMA2DPTRL_DPTR1_SIZE                               0x1
#define _DMA2DPTRL_DPTR1_LENGTH                             0x1
#define _DMA2DPTRL_DPTR1_MASK                               0x2
#define _DMA2DPTRL_DPTR2_POSN                               0x2
#define _DMA2DPTRL_DPTR2_POSITION                           0x2
#define _DMA2DPTRL_DPTR2_SIZE                               0x1
#define _DMA2DPTRL_DPTR2_LENGTH                             0x1
#define _DMA2DPTRL_DPTR2_MASK                               0x4
#define _DMA2DPTRL_DPTR3_POSN                               0x3
#define _DMA2DPTRL_DPTR3_POSITION                           0x3
#define _DMA2DPTRL_DPTR3_SIZE                               0x1
#define _DMA2DPTRL_DPTR3_LENGTH                             0x1
#define _DMA2DPTRL_DPTR3_MASK                               0x8
#define _DMA2DPTRL_DPTR4_POSN                               0x4
#define _DMA2DPTRL_DPTR4_POSITION                           0x4
#define _DMA2DPTRL_DPTR4_SIZE                               0x1
#define _DMA2DPTRL_DPTR4_LENGTH                             0x1
#define _DMA2DPTRL_DPTR4_MASK                               0x10
#define _DMA2DPTRL_DPTR5_POSN                               0x5
#define _DMA2DPTRL_DPTR5_POSITION                           0x5
#define _DMA2DPTRL_DPTR5_SIZE                               0x1
#define _DMA2DPTRL_DPTR5_LENGTH                             0x1
#define _DMA2DPTRL_DPTR5_MASK                               0x20
#define _DMA2DPTRL_DPTR6_POSN                               0x6
#define _DMA2DPTRL_DPTR6_POSITION                           0x6
#define _DMA2DPTRL_DPTR6_SIZE                               0x1
#define _DMA2DPTRL_DPTR6_LENGTH                             0x1
#define _DMA2DPTRL_DPTR6_MASK                               0x40
#define _DMA2DPTRL_DPTR7_POSN                               0x7
#define _DMA2DPTRL_DPTR7_POSITION                           0x7
#define _DMA2DPTRL_DPTR7_SIZE                               0x1
#define _DMA2DPTRL_DPTR7_LENGTH                             0x1
#define _DMA2DPTRL_DPTR7_MASK                               0x80
#define _DMA2DPTRL_DMA2DPTR_POSN                            0x0
#define _DMA2DPTRL_DMA2DPTR_POSITION                        0x0
#define _DMA2DPTRL_DMA2DPTR_SIZE                            0x8
#define _DMA2DPTRL_DMA2DPTR_LENGTH                          0x8
#define _DMA2DPTRL_DMA2DPTR_MASK                            0xFF
#define _DMA2DPTRL_DMA2DPTR0_POSN                           0x0
#define _DMA2DPTRL_DMA2DPTR0_POSITION                       0x0
#define _DMA2DPTRL_DMA2DPTR0_SIZE                           0x1
#define _DMA2DPTRL_DMA2DPTR0_LENGTH                         0x1
#define _DMA2DPTRL_DMA2DPTR0_MASK                           0x1
#define _DMA2DPTRL_DMA2DPTR1_POSN                           0x1
#define _DMA2DPTRL_DMA2DPTR1_POSITION                       0x1
#define _DMA2DPTRL_DMA2DPTR1_SIZE                           0x1
#define _DMA2DPTRL_DMA2DPTR1_LENGTH                         0x1
#define _DMA2DPTRL_DMA2DPTR1_MASK                           0x2
#define _DMA2DPTRL_DMA2DPTR2_POSN                           0x2
#define _DMA2DPTRL_DMA2DPTR2_POSITION                       0x2
#define _DMA2DPTRL_DMA2DPTR2_SIZE                           0x1
#define _DMA2DPTRL_DMA2DPTR2_LENGTH                         0x1
#define _DMA2DPTRL_DMA2DPTR2_MASK                           0x4
#define _DMA2DPTRL_DMA2DPTR3_POSN                           0x3
#define _DMA2DPTRL_DMA2DPTR3_POSITION                       0x3
#define _DMA2DPTRL_DMA2DPTR3_SIZE                           0x1
#define _DMA2DPTRL_DMA2DPTR3_LENGTH                         0x1
#define _DMA2DPTRL_DMA2DPTR3_MASK                           0x8
#define _DMA2DPTRL_DMA2DPTR4_POSN                           0x4
#define _DMA2DPTRL_DMA2DPTR4_POSITION                       0x4
#define _DMA2DPTRL_DMA2DPTR4_SIZE                           0x1
#define _DMA2DPTRL_DMA2DPTR4_LENGTH                         0x1
#define _DMA2DPTRL_DMA2DPTR4_MASK                           0x10
#define _DMA2DPTRL_DMA2DPTR5_POSN                           0x5
#define _DMA2DPTRL_DMA2DPTR5_POSITION                       0x5
#define _DMA2DPTRL_DMA2DPTR5_SIZE                           0x1
#define _DMA2DPTRL_DMA2DPTR5_LENGTH                         0x1
#define _DMA2DPTRL_DMA2DPTR5_MASK                           0x20
#define _DMA2DPTRL_DMA2DPTR6_POSN                           0x6
#define _DMA2DPTRL_DMA2DPTR6_POSITION                       0x6
#define _DMA2DPTRL_DMA2DPTR6_SIZE                           0x1
#define _DMA2DPTRL_DMA2DPTR6_LENGTH                         0x1
#define _DMA2DPTRL_DMA2DPTR6_MASK                           0x40
#define _DMA2DPTRL_DMA2DPTR7_POSN                           0x7
#define _DMA2DPTRL_DMA2DPTR7_POSITION                       0x7
#define _DMA2DPTRL_DMA2DPTR7_SIZE                           0x1
#define _DMA2DPTRL_DMA2DPTR7_LENGTH                         0x1
#define _DMA2DPTRL_DMA2DPTR7_MASK                           0x80

// Register: DMA2DPTRH
#define DMA2DPTRH DMA2DPTRH
extern volatile unsigned char           DMA2DPTRH           __at(0x3BCD);
#ifndef _LIB_BUILD
asm("DMA2DPTRH equ 03BCDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DPTR                   :8;
    };
    struct {
        unsigned DPTR8                  :1;
        unsigned DPTR9                  :1;
        unsigned DPTR10                 :1;
        unsigned DPTR11                 :1;
        unsigned DPTR12                 :1;
        unsigned DPTR13                 :1;
        unsigned DPTR14                 :1;
        unsigned DPTR15                 :1;
    };
    struct {
        unsigned DMA2DPTR               :8;
    };
    struct {
        unsigned DMA2DPTR8              :1;
        unsigned DMA2DPTR9              :1;
        unsigned DMA2DPTR10             :1;
        unsigned DMA2DPTR11             :1;
        unsigned DMA2DPTR12             :1;
        unsigned DMA2DPTR13             :1;
        unsigned DMA2DPTR14             :1;
        unsigned DMA2DPTR15             :1;
    };
} DMA2DPTRHbits_t;
extern volatile DMA2DPTRHbits_t DMA2DPTRHbits __at(0x3BCD);
// bitfield macros
#define _DMA2DPTRH_DPTR_POSN                                0x0
#define _DMA2DPTRH_DPTR_POSITION                            0x0
#define _DMA2DPTRH_DPTR_SIZE                                0x8
#define _DMA2DPTRH_DPTR_LENGTH                              0x8
#define _DMA2DPTRH_DPTR_MASK                                0xFF
#define _DMA2DPTRH_DPTR8_POSN                               0x0
#define _DMA2DPTRH_DPTR8_POSITION                           0x0
#define _DMA2DPTRH_DPTR8_SIZE                               0x1
#define _DMA2DPTRH_DPTR8_LENGTH                             0x1
#define _DMA2DPTRH_DPTR8_MASK                               0x1
#define _DMA2DPTRH_DPTR9_POSN                               0x1
#define _DMA2DPTRH_DPTR9_POSITION                           0x1
#define _DMA2DPTRH_DPTR9_SIZE                               0x1
#define _DMA2DPTRH_DPTR9_LENGTH                             0x1
#define _DMA2DPTRH_DPTR9_MASK                               0x2
#define _DMA2DPTRH_DPTR10_POSN                              0x2
#define _DMA2DPTRH_DPTR10_POSITION                          0x2
#define _DMA2DPTRH_DPTR10_SIZE                              0x1
#define _DMA2DPTRH_DPTR10_LENGTH                            0x1
#define _DMA2DPTRH_DPTR10_MASK                              0x4
#define _DMA2DPTRH_DPTR11_POSN                              0x3
#define _DMA2DPTRH_DPTR11_POSITION                          0x3
#define _DMA2DPTRH_DPTR11_SIZE                              0x1
#define _DMA2DPTRH_DPTR11_LENGTH                            0x1
#define _DMA2DPTRH_DPTR11_MASK                              0x8
#define _DMA2DPTRH_DPTR12_POSN                              0x4
#define _DMA2DPTRH_DPTR12_POSITION                          0x4
#define _DMA2DPTRH_DPTR12_SIZE                              0x1
#define _DMA2DPTRH_DPTR12_LENGTH                            0x1
#define _DMA2DPTRH_DPTR12_MASK                              0x10
#define _DMA2DPTRH_DPTR13_POSN                              0x5
#define _DMA2DPTRH_DPTR13_POSITION                          0x5
#define _DMA2DPTRH_DPTR13_SIZE                              0x1
#define _DMA2DPTRH_DPTR13_LENGTH                            0x1
#define _DMA2DPTRH_DPTR13_MASK                              0x20
#define _DMA2DPTRH_DPTR14_POSN                              0x6
#define _DMA2DPTRH_DPTR14_POSITION                          0x6
#define _DMA2DPTRH_DPTR14_SIZE                              0x1
#define _DMA2DPTRH_DPTR14_LENGTH                            0x1
#define _DMA2DPTRH_DPTR14_MASK                              0x40
#define _DMA2DPTRH_DPTR15_POSN                              0x7
#define _DMA2DPTRH_DPTR15_POSITION                          0x7
#define _DMA2DPTRH_DPTR15_SIZE                              0x1
#define _DMA2DPTRH_DPTR15_LENGTH                            0x1
#define _DMA2DPTRH_DPTR15_MASK                              0x80
#define _DMA2DPTRH_DMA2DPTR_POSN                            0x0
#define _DMA2DPTRH_DMA2DPTR_POSITION                        0x0
#define _DMA2DPTRH_DMA2DPTR_SIZE                            0x8
#define _DMA2DPTRH_DMA2DPTR_LENGTH                          0x8
#define _DMA2DPTRH_DMA2DPTR_MASK                            0xFF
#define _DMA2DPTRH_DMA2DPTR8_POSN                           0x0
#define _DMA2DPTRH_DMA2DPTR8_POSITION                       0x0
#define _DMA2DPTRH_DMA2DPTR8_SIZE                           0x1
#define _DMA2DPTRH_DMA2DPTR8_LENGTH                         0x1
#define _DMA2DPTRH_DMA2DPTR8_MASK                           0x1
#define _DMA2DPTRH_DMA2DPTR9_POSN                           0x1
#define _DMA2DPTRH_DMA2DPTR9_POSITION                       0x1
#define _DMA2DPTRH_DMA2DPTR9_SIZE                           0x1
#define _DMA2DPTRH_DMA2DPTR9_LENGTH                         0x1
#define _DMA2DPTRH_DMA2DPTR9_MASK                           0x2
#define _DMA2DPTRH_DMA2DPTR10_POSN                          0x2
#define _DMA2DPTRH_DMA2DPTR10_POSITION                      0x2
#define _DMA2DPTRH_DMA2DPTR10_SIZE                          0x1
#define _DMA2DPTRH_DMA2DPTR10_LENGTH                        0x1
#define _DMA2DPTRH_DMA2DPTR10_MASK                          0x4
#define _DMA2DPTRH_DMA2DPTR11_POSN                          0x3
#define _DMA2DPTRH_DMA2DPTR11_POSITION                      0x3
#define _DMA2DPTRH_DMA2DPTR11_SIZE                          0x1
#define _DMA2DPTRH_DMA2DPTR11_LENGTH                        0x1
#define _DMA2DPTRH_DMA2DPTR11_MASK                          0x8
#define _DMA2DPTRH_DMA2DPTR12_POSN                          0x4
#define _DMA2DPTRH_DMA2DPTR12_POSITION                      0x4
#define _DMA2DPTRH_DMA2DPTR12_SIZE                          0x1
#define _DMA2DPTRH_DMA2DPTR12_LENGTH                        0x1
#define _DMA2DPTRH_DMA2DPTR12_MASK                          0x10
#define _DMA2DPTRH_DMA2DPTR13_POSN                          0x5
#define _DMA2DPTRH_DMA2DPTR13_POSITION                      0x5
#define _DMA2DPTRH_DMA2DPTR13_SIZE                          0x1
#define _DMA2DPTRH_DMA2DPTR13_LENGTH                        0x1
#define _DMA2DPTRH_DMA2DPTR13_MASK                          0x20
#define _DMA2DPTRH_DMA2DPTR14_POSN                          0x6
#define _DMA2DPTRH_DMA2DPTR14_POSITION                      0x6
#define _DMA2DPTRH_DMA2DPTR14_SIZE                          0x1
#define _DMA2DPTRH_DMA2DPTR14_LENGTH                        0x1
#define _DMA2DPTRH_DMA2DPTR14_MASK                          0x40
#define _DMA2DPTRH_DMA2DPTR15_POSN                          0x7
#define _DMA2DPTRH_DMA2DPTR15_POSITION                      0x7
#define _DMA2DPTRH_DMA2DPTR15_SIZE                          0x1
#define _DMA2DPTRH_DMA2DPTR15_LENGTH                        0x1
#define _DMA2DPTRH_DMA2DPTR15_MASK                          0x80

// Register: DMA2DSZ
#define DMA2DSZ DMA2DSZ
extern volatile unsigned short          DMA2DSZ             __at(0x3BCE);
#ifndef _LIB_BUILD
asm("DMA2DSZ equ 03BCEh");
#endif

// Register: DMA2DSZL
#define DMA2DSZL DMA2DSZL
extern volatile unsigned char           DMA2DSZL            __at(0x3BCE);
#ifndef _LIB_BUILD
asm("DMA2DSZL equ 03BCEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DSZ                    :8;
    };
    struct {
        unsigned DMA2DSZ                :8;
    };
    struct {
        unsigned DSZ0                   :1;
        unsigned DSZ1                   :1;
        unsigned DSZ2                   :1;
        unsigned DSZ3                   :1;
        unsigned DSZ4                   :1;
        unsigned DSZ5                   :1;
        unsigned DSZ6                   :1;
        unsigned DSZ7                   :1;
    };
    struct {
        unsigned DMA2DSZ0               :1;
        unsigned DMA2DSZ1               :1;
        unsigned DMA2DSZ2               :1;
        unsigned DMA2DSZ3               :1;
        unsigned DMA2DSZ4               :1;
        unsigned DMA2DSZ5               :1;
        unsigned DMA2DSZ6               :1;
        unsigned DMA2DSZ7               :1;
    };
} DMA2DSZLbits_t;
extern volatile DMA2DSZLbits_t DMA2DSZLbits __at(0x3BCE);
// bitfield macros
#define _DMA2DSZL_DSZ_POSN                                  0x0
#define _DMA2DSZL_DSZ_POSITION                              0x0
#define _DMA2DSZL_DSZ_SIZE                                  0x8
#define _DMA2DSZL_DSZ_LENGTH                                0x8
#define _DMA2DSZL_DSZ_MASK                                  0xFF
#define _DMA2DSZL_DMA2DSZ_POSN                              0x0
#define _DMA2DSZL_DMA2DSZ_POSITION                          0x0
#define _DMA2DSZL_DMA2DSZ_SIZE                              0x8
#define _DMA2DSZL_DMA2DSZ_LENGTH                            0x8
#define _DMA2DSZL_DMA2DSZ_MASK                              0xFF
#define _DMA2DSZL_DSZ0_POSN                                 0x0
#define _DMA2DSZL_DSZ0_POSITION                             0x0
#define _DMA2DSZL_DSZ0_SIZE                                 0x1
#define _DMA2DSZL_DSZ0_LENGTH                               0x1
#define _DMA2DSZL_DSZ0_MASK                                 0x1
#define _DMA2DSZL_DSZ1_POSN                                 0x1
#define _DMA2DSZL_DSZ1_POSITION                             0x1
#define _DMA2DSZL_DSZ1_SIZE                                 0x1
#define _DMA2DSZL_DSZ1_LENGTH                               0x1
#define _DMA2DSZL_DSZ1_MASK                                 0x2
#define _DMA2DSZL_DSZ2_POSN                                 0x2
#define _DMA2DSZL_DSZ2_POSITION                             0x2
#define _DMA2DSZL_DSZ2_SIZE                                 0x1
#define _DMA2DSZL_DSZ2_LENGTH                               0x1
#define _DMA2DSZL_DSZ2_MASK                                 0x4
#define _DMA2DSZL_DSZ3_POSN                                 0x3
#define _DMA2DSZL_DSZ3_POSITION                             0x3
#define _DMA2DSZL_DSZ3_SIZE                                 0x1
#define _DMA2DSZL_DSZ3_LENGTH                               0x1
#define _DMA2DSZL_DSZ3_MASK                                 0x8
#define _DMA2DSZL_DSZ4_POSN                                 0x4
#define _DMA2DSZL_DSZ4_POSITION                             0x4
#define _DMA2DSZL_DSZ4_SIZE                                 0x1
#define _DMA2DSZL_DSZ4_LENGTH                               0x1
#define _DMA2DSZL_DSZ4_MASK                                 0x10
#define _DMA2DSZL_DSZ5_POSN                                 0x5
#define _DMA2DSZL_DSZ5_POSITION                             0x5
#define _DMA2DSZL_DSZ5_SIZE                                 0x1
#define _DMA2DSZL_DSZ5_LENGTH                               0x1
#define _DMA2DSZL_DSZ5_MASK                                 0x20
#define _DMA2DSZL_DSZ6_POSN                                 0x6
#define _DMA2DSZL_DSZ6_POSITION                             0x6
#define _DMA2DSZL_DSZ6_SIZE                                 0x1
#define _DMA2DSZL_DSZ6_LENGTH                               0x1
#define _DMA2DSZL_DSZ6_MASK                                 0x40
#define _DMA2DSZL_DSZ7_POSN                                 0x7
#define _DMA2DSZL_DSZ7_POSITION                             0x7
#define _DMA2DSZL_DSZ7_SIZE                                 0x1
#define _DMA2DSZL_DSZ7_LENGTH                               0x1
#define _DMA2DSZL_DSZ7_MASK                                 0x80
#define _DMA2DSZL_DMA2DSZ0_POSN                             0x0
#define _DMA2DSZL_DMA2DSZ0_POSITION                         0x0
#define _DMA2DSZL_DMA2DSZ0_SIZE                             0x1
#define _DMA2DSZL_DMA2DSZ0_LENGTH                           0x1
#define _DMA2DSZL_DMA2DSZ0_MASK                             0x1
#define _DMA2DSZL_DMA2DSZ1_POSN                             0x1
#define _DMA2DSZL_DMA2DSZ1_POSITION                         0x1
#define _DMA2DSZL_DMA2DSZ1_SIZE                             0x1
#define _DMA2DSZL_DMA2DSZ1_LENGTH                           0x1
#define _DMA2DSZL_DMA2DSZ1_MASK                             0x2
#define _DMA2DSZL_DMA2DSZ2_POSN                             0x2
#define _DMA2DSZL_DMA2DSZ2_POSITION                         0x2
#define _DMA2DSZL_DMA2DSZ2_SIZE                             0x1
#define _DMA2DSZL_DMA2DSZ2_LENGTH                           0x1
#define _DMA2DSZL_DMA2DSZ2_MASK                             0x4
#define _DMA2DSZL_DMA2DSZ3_POSN                             0x3
#define _DMA2DSZL_DMA2DSZ3_POSITION                         0x3
#define _DMA2DSZL_DMA2DSZ3_SIZE                             0x1
#define _DMA2DSZL_DMA2DSZ3_LENGTH                           0x1
#define _DMA2DSZL_DMA2DSZ3_MASK                             0x8
#define _DMA2DSZL_DMA2DSZ4_POSN                             0x4
#define _DMA2DSZL_DMA2DSZ4_POSITION                         0x4
#define _DMA2DSZL_DMA2DSZ4_SIZE                             0x1
#define _DMA2DSZL_DMA2DSZ4_LENGTH                           0x1
#define _DMA2DSZL_DMA2DSZ4_MASK                             0x10
#define _DMA2DSZL_DMA2DSZ5_POSN                             0x5
#define _DMA2DSZL_DMA2DSZ5_POSITION                         0x5
#define _DMA2DSZL_DMA2DSZ5_SIZE                             0x1
#define _DMA2DSZL_DMA2DSZ5_LENGTH                           0x1
#define _DMA2DSZL_DMA2DSZ5_MASK                             0x20
#define _DMA2DSZL_DMA2DSZ6_POSN                             0x6
#define _DMA2DSZL_DMA2DSZ6_POSITION                         0x6
#define _DMA2DSZL_DMA2DSZ6_SIZE                             0x1
#define _DMA2DSZL_DMA2DSZ6_LENGTH                           0x1
#define _DMA2DSZL_DMA2DSZ6_MASK                             0x40
#define _DMA2DSZL_DMA2DSZ7_POSN                             0x7
#define _DMA2DSZL_DMA2DSZ7_POSITION                         0x7
#define _DMA2DSZL_DMA2DSZ7_SIZE                             0x1
#define _DMA2DSZL_DMA2DSZ7_LENGTH                           0x1
#define _DMA2DSZL_DMA2DSZ7_MASK                             0x80

// Register: DMA2DSZH
#define DMA2DSZH DMA2DSZH
extern volatile unsigned char           DMA2DSZH            __at(0x3BCF);
#ifndef _LIB_BUILD
asm("DMA2DSZH equ 03BCFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DSZ                    :4;
    };
    struct {
        unsigned DMA2DSZ                :4;
    };
    struct {
        unsigned DSZ8                   :1;
        unsigned DSZ9                   :1;
        unsigned DSZ10                  :1;
        unsigned DSZ11                  :1;
    };
    struct {
        unsigned DMA2DSZ8               :1;
        unsigned DMA2DSZ9               :1;
        unsigned DMA2DSZ10              :1;
        unsigned DMA2DSZ11              :1;
    };
} DMA2DSZHbits_t;
extern volatile DMA2DSZHbits_t DMA2DSZHbits __at(0x3BCF);
// bitfield macros
#define _DMA2DSZH_DSZ_POSN                                  0x0
#define _DMA2DSZH_DSZ_POSITION                              0x0
#define _DMA2DSZH_DSZ_SIZE                                  0x4
#define _DMA2DSZH_DSZ_LENGTH                                0x4
#define _DMA2DSZH_DSZ_MASK                                  0xF
#define _DMA2DSZH_DMA2DSZ_POSN                              0x0
#define _DMA2DSZH_DMA2DSZ_POSITION                          0x0
#define _DMA2DSZH_DMA2DSZ_SIZE                              0x4
#define _DMA2DSZH_DMA2DSZ_LENGTH                            0x4
#define _DMA2DSZH_DMA2DSZ_MASK                              0xF
#define _DMA2DSZH_DSZ8_POSN                                 0x0
#define _DMA2DSZH_DSZ8_POSITION                             0x0
#define _DMA2DSZH_DSZ8_SIZE                                 0x1
#define _DMA2DSZH_DSZ8_LENGTH                               0x1
#define _DMA2DSZH_DSZ8_MASK                                 0x1
#define _DMA2DSZH_DSZ9_POSN                                 0x1
#define _DMA2DSZH_DSZ9_POSITION                             0x1
#define _DMA2DSZH_DSZ9_SIZE                                 0x1
#define _DMA2DSZH_DSZ9_LENGTH                               0x1
#define _DMA2DSZH_DSZ9_MASK                                 0x2
#define _DMA2DSZH_DSZ10_POSN                                0x2
#define _DMA2DSZH_DSZ10_POSITION                            0x2
#define _DMA2DSZH_DSZ10_SIZE                                0x1
#define _DMA2DSZH_DSZ10_LENGTH                              0x1
#define _DMA2DSZH_DSZ10_MASK                                0x4
#define _DMA2DSZH_DSZ11_POSN                                0x3
#define _DMA2DSZH_DSZ11_POSITION                            0x3
#define _DMA2DSZH_DSZ11_SIZE                                0x1
#define _DMA2DSZH_DSZ11_LENGTH                              0x1
#define _DMA2DSZH_DSZ11_MASK                                0x8
#define _DMA2DSZH_DMA2DSZ8_POSN                             0x0
#define _DMA2DSZH_DMA2DSZ8_POSITION                         0x0
#define _DMA2DSZH_DMA2DSZ8_SIZE                             0x1
#define _DMA2DSZH_DMA2DSZ8_LENGTH                           0x1
#define _DMA2DSZH_DMA2DSZ8_MASK                             0x1
#define _DMA2DSZH_DMA2DSZ9_POSN                             0x1
#define _DMA2DSZH_DMA2DSZ9_POSITION                         0x1
#define _DMA2DSZH_DMA2DSZ9_SIZE                             0x1
#define _DMA2DSZH_DMA2DSZ9_LENGTH                           0x1
#define _DMA2DSZH_DMA2DSZ9_MASK                             0x2
#define _DMA2DSZH_DMA2DSZ10_POSN                            0x2
#define _DMA2DSZH_DMA2DSZ10_POSITION                        0x2
#define _DMA2DSZH_DMA2DSZ10_SIZE                            0x1
#define _DMA2DSZH_DMA2DSZ10_LENGTH                          0x1
#define _DMA2DSZH_DMA2DSZ10_MASK                            0x4
#define _DMA2DSZH_DMA2DSZ11_POSN                            0x3
#define _DMA2DSZH_DMA2DSZ11_POSITION                        0x3
#define _DMA2DSZH_DMA2DSZ11_SIZE                            0x1
#define _DMA2DSZH_DMA2DSZ11_LENGTH                          0x1
#define _DMA2DSZH_DMA2DSZ11_MASK                            0x8

// Register: DMA2DSA
#define DMA2DSA DMA2DSA
extern volatile unsigned short          DMA2DSA             __at(0x3BD0);
#ifndef _LIB_BUILD
asm("DMA2DSA equ 03BD0h");
#endif

// Register: DMA2DSAL
#define DMA2DSAL DMA2DSAL
extern volatile unsigned char           DMA2DSAL            __at(0x3BD0);
#ifndef _LIB_BUILD
asm("DMA2DSAL equ 03BD0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DSA                    :8;
    };
    struct {
        unsigned DSA0                   :1;
        unsigned DSA1                   :1;
        unsigned DSA2                   :1;
        unsigned DSA3                   :1;
        unsigned DSA4                   :1;
        unsigned DSA5                   :1;
        unsigned DSA6                   :1;
        unsigned DSA7                   :1;
    };
    struct {
        unsigned DMA2DSA                :8;
    };
    struct {
        unsigned DMA2DSA0               :1;
        unsigned DMA2DSA1               :1;
        unsigned DMA2DSA2               :1;
        unsigned DMA2DSA3               :1;
        unsigned DMA2DSA4               :1;
        unsigned DMA2DSA5               :1;
        unsigned DMA2DSA6               :1;
        unsigned DMA2DSA7               :1;
    };
} DMA2DSALbits_t;
extern volatile DMA2DSALbits_t DMA2DSALbits __at(0x3BD0);
// bitfield macros
#define _DMA2DSAL_DSA_POSN                                  0x0
#define _DMA2DSAL_DSA_POSITION                              0x0
#define _DMA2DSAL_DSA_SIZE                                  0x8
#define _DMA2DSAL_DSA_LENGTH                                0x8
#define _DMA2DSAL_DSA_MASK                                  0xFF
#define _DMA2DSAL_DSA0_POSN                                 0x0
#define _DMA2DSAL_DSA0_POSITION                             0x0
#define _DMA2DSAL_DSA0_SIZE                                 0x1
#define _DMA2DSAL_DSA0_LENGTH                               0x1
#define _DMA2DSAL_DSA0_MASK                                 0x1
#define _DMA2DSAL_DSA1_POSN                                 0x1
#define _DMA2DSAL_DSA1_POSITION                             0x1
#define _DMA2DSAL_DSA1_SIZE                                 0x1
#define _DMA2DSAL_DSA1_LENGTH                               0x1
#define _DMA2DSAL_DSA1_MASK                                 0x2
#define _DMA2DSAL_DSA2_POSN                                 0x2
#define _DMA2DSAL_DSA2_POSITION                             0x2
#define _DMA2DSAL_DSA2_SIZE                                 0x1
#define _DMA2DSAL_DSA2_LENGTH                               0x1
#define _DMA2DSAL_DSA2_MASK                                 0x4
#define _DMA2DSAL_DSA3_POSN                                 0x3
#define _DMA2DSAL_DSA3_POSITION                             0x3
#define _DMA2DSAL_DSA3_SIZE                                 0x1
#define _DMA2DSAL_DSA3_LENGTH                               0x1
#define _DMA2DSAL_DSA3_MASK                                 0x8
#define _DMA2DSAL_DSA4_POSN                                 0x4
#define _DMA2DSAL_DSA4_POSITION                             0x4
#define _DMA2DSAL_DSA4_SIZE                                 0x1
#define _DMA2DSAL_DSA4_LENGTH                               0x1
#define _DMA2DSAL_DSA4_MASK                                 0x10
#define _DMA2DSAL_DSA5_POSN                                 0x5
#define _DMA2DSAL_DSA5_POSITION                             0x5
#define _DMA2DSAL_DSA5_SIZE                                 0x1
#define _DMA2DSAL_DSA5_LENGTH                               0x1
#define _DMA2DSAL_DSA5_MASK                                 0x20
#define _DMA2DSAL_DSA6_POSN                                 0x6
#define _DMA2DSAL_DSA6_POSITION                             0x6
#define _DMA2DSAL_DSA6_SIZE                                 0x1
#define _DMA2DSAL_DSA6_LENGTH                               0x1
#define _DMA2DSAL_DSA6_MASK                                 0x40
#define _DMA2DSAL_DSA7_POSN                                 0x7
#define _DMA2DSAL_DSA7_POSITION                             0x7
#define _DMA2DSAL_DSA7_SIZE                                 0x1
#define _DMA2DSAL_DSA7_LENGTH                               0x1
#define _DMA2DSAL_DSA7_MASK                                 0x80
#define _DMA2DSAL_DMA2DSA_POSN                              0x0
#define _DMA2DSAL_DMA2DSA_POSITION                          0x0
#define _DMA2DSAL_DMA2DSA_SIZE                              0x8
#define _DMA2DSAL_DMA2DSA_LENGTH                            0x8
#define _DMA2DSAL_DMA2DSA_MASK                              0xFF
#define _DMA2DSAL_DMA2DSA0_POSN                             0x0
#define _DMA2DSAL_DMA2DSA0_POSITION                         0x0
#define _DMA2DSAL_DMA2DSA0_SIZE                             0x1
#define _DMA2DSAL_DMA2DSA0_LENGTH                           0x1
#define _DMA2DSAL_DMA2DSA0_MASK                             0x1
#define _DMA2DSAL_DMA2DSA1_POSN                             0x1
#define _DMA2DSAL_DMA2DSA1_POSITION                         0x1
#define _DMA2DSAL_DMA2DSA1_SIZE                             0x1
#define _DMA2DSAL_DMA2DSA1_LENGTH                           0x1
#define _DMA2DSAL_DMA2DSA1_MASK                             0x2
#define _DMA2DSAL_DMA2DSA2_POSN                             0x2
#define _DMA2DSAL_DMA2DSA2_POSITION                         0x2
#define _DMA2DSAL_DMA2DSA2_SIZE                             0x1
#define _DMA2DSAL_DMA2DSA2_LENGTH                           0x1
#define _DMA2DSAL_DMA2DSA2_MASK                             0x4
#define _DMA2DSAL_DMA2DSA3_POSN                             0x3
#define _DMA2DSAL_DMA2DSA3_POSITION                         0x3
#define _DMA2DSAL_DMA2DSA3_SIZE                             0x1
#define _DMA2DSAL_DMA2DSA3_LENGTH                           0x1
#define _DMA2DSAL_DMA2DSA3_MASK                             0x8
#define _DMA2DSAL_DMA2DSA4_POSN                             0x4
#define _DMA2DSAL_DMA2DSA4_POSITION                         0x4
#define _DMA2DSAL_DMA2DSA4_SIZE                             0x1
#define _DMA2DSAL_DMA2DSA4_LENGTH                           0x1
#define _DMA2DSAL_DMA2DSA4_MASK                             0x10
#define _DMA2DSAL_DMA2DSA5_POSN                             0x5
#define _DMA2DSAL_DMA2DSA5_POSITION                         0x5
#define _DMA2DSAL_DMA2DSA5_SIZE                             0x1
#define _DMA2DSAL_DMA2DSA5_LENGTH                           0x1
#define _DMA2DSAL_DMA2DSA5_MASK                             0x20
#define _DMA2DSAL_DMA2DSA6_POSN                             0x6
#define _DMA2DSAL_DMA2DSA6_POSITION                         0x6
#define _DMA2DSAL_DMA2DSA6_SIZE                             0x1
#define _DMA2DSAL_DMA2DSA6_LENGTH                           0x1
#define _DMA2DSAL_DMA2DSA6_MASK                             0x40
#define _DMA2DSAL_DMA2DSA7_POSN                             0x7
#define _DMA2DSAL_DMA2DSA7_POSITION                         0x7
#define _DMA2DSAL_DMA2DSA7_SIZE                             0x1
#define _DMA2DSAL_DMA2DSA7_LENGTH                           0x1
#define _DMA2DSAL_DMA2DSA7_MASK                             0x80

// Register: DMA2DSAH
#define DMA2DSAH DMA2DSAH
extern volatile unsigned char           DMA2DSAH            __at(0x3BD1);
#ifndef _LIB_BUILD
asm("DMA2DSAH equ 03BD1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DSA                    :8;
    };
    struct {
        unsigned DSA8                   :1;
        unsigned DSA9                   :1;
        unsigned DSA10                  :1;
        unsigned DSA11                  :1;
        unsigned DSA12                  :1;
        unsigned DSA13                  :1;
        unsigned DSA14                  :1;
        unsigned DSA15                  :1;
    };
    struct {
        unsigned DMA2DSA                :8;
    };
    struct {
        unsigned DMA2DSA8               :1;
        unsigned DMA2DSA9               :1;
        unsigned DMA2DSA10              :1;
        unsigned DMA2DSA11              :1;
        unsigned DMA2DSA12              :1;
        unsigned DMA2DSA13              :1;
        unsigned DMA2DSA14              :1;
        unsigned DMA2DSA15              :1;
    };
} DMA2DSAHbits_t;
extern volatile DMA2DSAHbits_t DMA2DSAHbits __at(0x3BD1);
// bitfield macros
#define _DMA2DSAH_DSA_POSN                                  0x0
#define _DMA2DSAH_DSA_POSITION                              0x0
#define _DMA2DSAH_DSA_SIZE                                  0x8
#define _DMA2DSAH_DSA_LENGTH                                0x8
#define _DMA2DSAH_DSA_MASK                                  0xFF
#define _DMA2DSAH_DSA8_POSN                                 0x0
#define _DMA2DSAH_DSA8_POSITION                             0x0
#define _DMA2DSAH_DSA8_SIZE                                 0x1
#define _DMA2DSAH_DSA8_LENGTH                               0x1
#define _DMA2DSAH_DSA8_MASK                                 0x1
#define _DMA2DSAH_DSA9_POSN                                 0x1
#define _DMA2DSAH_DSA9_POSITION                             0x1
#define _DMA2DSAH_DSA9_SIZE                                 0x1
#define _DMA2DSAH_DSA9_LENGTH                               0x1
#define _DMA2DSAH_DSA9_MASK                                 0x2
#define _DMA2DSAH_DSA10_POSN                                0x2
#define _DMA2DSAH_DSA10_POSITION                            0x2
#define _DMA2DSAH_DSA10_SIZE                                0x1
#define _DMA2DSAH_DSA10_LENGTH                              0x1
#define _DMA2DSAH_DSA10_MASK                                0x4
#define _DMA2DSAH_DSA11_POSN                                0x3
#define _DMA2DSAH_DSA11_POSITION                            0x3
#define _DMA2DSAH_DSA11_SIZE                                0x1
#define _DMA2DSAH_DSA11_LENGTH                              0x1
#define _DMA2DSAH_DSA11_MASK                                0x8
#define _DMA2DSAH_DSA12_POSN                                0x4
#define _DMA2DSAH_DSA12_POSITION                            0x4
#define _DMA2DSAH_DSA12_SIZE                                0x1
#define _DMA2DSAH_DSA12_LENGTH                              0x1
#define _DMA2DSAH_DSA12_MASK                                0x10
#define _DMA2DSAH_DSA13_POSN                                0x5
#define _DMA2DSAH_DSA13_POSITION                            0x5
#define _DMA2DSAH_DSA13_SIZE                                0x1
#define _DMA2DSAH_DSA13_LENGTH                              0x1
#define _DMA2DSAH_DSA13_MASK                                0x20
#define _DMA2DSAH_DSA14_POSN                                0x6
#define _DMA2DSAH_DSA14_POSITION                            0x6
#define _DMA2DSAH_DSA14_SIZE                                0x1
#define _DMA2DSAH_DSA14_LENGTH                              0x1
#define _DMA2DSAH_DSA14_MASK                                0x40
#define _DMA2DSAH_DSA15_POSN                                0x7
#define _DMA2DSAH_DSA15_POSITION                            0x7
#define _DMA2DSAH_DSA15_SIZE                                0x1
#define _DMA2DSAH_DSA15_LENGTH                              0x1
#define _DMA2DSAH_DSA15_MASK                                0x80
#define _DMA2DSAH_DMA2DSA_POSN                              0x0
#define _DMA2DSAH_DMA2DSA_POSITION                          0x0
#define _DMA2DSAH_DMA2DSA_SIZE                              0x8
#define _DMA2DSAH_DMA2DSA_LENGTH                            0x8
#define _DMA2DSAH_DMA2DSA_MASK                              0xFF
#define _DMA2DSAH_DMA2DSA8_POSN                             0x0
#define _DMA2DSAH_DMA2DSA8_POSITION                         0x0
#define _DMA2DSAH_DMA2DSA8_SIZE                             0x1
#define _DMA2DSAH_DMA2DSA8_LENGTH                           0x1
#define _DMA2DSAH_DMA2DSA8_MASK                             0x1
#define _DMA2DSAH_DMA2DSA9_POSN                             0x1
#define _DMA2DSAH_DMA2DSA9_POSITION                         0x1
#define _DMA2DSAH_DMA2DSA9_SIZE                             0x1
#define _DMA2DSAH_DMA2DSA9_LENGTH                           0x1
#define _DMA2DSAH_DMA2DSA9_MASK                             0x2
#define _DMA2DSAH_DMA2DSA10_POSN                            0x2
#define _DMA2DSAH_DMA2DSA10_POSITION                        0x2
#define _DMA2DSAH_DMA2DSA10_SIZE                            0x1
#define _DMA2DSAH_DMA2DSA10_LENGTH                          0x1
#define _DMA2DSAH_DMA2DSA10_MASK                            0x4
#define _DMA2DSAH_DMA2DSA11_POSN                            0x3
#define _DMA2DSAH_DMA2DSA11_POSITION                        0x3
#define _DMA2DSAH_DMA2DSA11_SIZE                            0x1
#define _DMA2DSAH_DMA2DSA11_LENGTH                          0x1
#define _DMA2DSAH_DMA2DSA11_MASK                            0x8
#define _DMA2DSAH_DMA2DSA12_POSN                            0x4
#define _DMA2DSAH_DMA2DSA12_POSITION                        0x4
#define _DMA2DSAH_DMA2DSA12_SIZE                            0x1
#define _DMA2DSAH_DMA2DSA12_LENGTH                          0x1
#define _DMA2DSAH_DMA2DSA12_MASK                            0x10
#define _DMA2DSAH_DMA2DSA13_POSN                            0x5
#define _DMA2DSAH_DMA2DSA13_POSITION                        0x5
#define _DMA2DSAH_DMA2DSA13_SIZE                            0x1
#define _DMA2DSAH_DMA2DSA13_LENGTH                          0x1
#define _DMA2DSAH_DMA2DSA13_MASK                            0x20
#define _DMA2DSAH_DMA2DSA14_POSN                            0x6
#define _DMA2DSAH_DMA2DSA14_POSITION                        0x6
#define _DMA2DSAH_DMA2DSA14_SIZE                            0x1
#define _DMA2DSAH_DMA2DSA14_LENGTH                          0x1
#define _DMA2DSAH_DMA2DSA14_MASK                            0x40
#define _DMA2DSAH_DMA2DSA15_POSN                            0x7
#define _DMA2DSAH_DMA2DSA15_POSITION                        0x7
#define _DMA2DSAH_DMA2DSA15_SIZE                            0x1
#define _DMA2DSAH_DMA2DSA15_LENGTH                          0x1
#define _DMA2DSAH_DMA2DSA15_MASK                            0x80

// Register: DMA2SCNT
#define DMA2SCNT DMA2SCNT
extern volatile unsigned short          DMA2SCNT            __at(0x3BD2);
#ifndef _LIB_BUILD
asm("DMA2SCNT equ 03BD2h");
#endif

// Register: DMA2SCNTL
#define DMA2SCNTL DMA2SCNTL
extern volatile unsigned char           DMA2SCNTL           __at(0x3BD2);
#ifndef _LIB_BUILD
asm("DMA2SCNTL equ 03BD2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SCNT                   :8;
    };
    struct {
        unsigned SCNT0                  :1;
        unsigned SCNT1                  :1;
        unsigned SCNT2                  :1;
        unsigned SCNT3                  :1;
        unsigned SCNT4                  :1;
        unsigned SCNT5                  :1;
        unsigned SCNT6                  :1;
        unsigned SCNT7                  :1;
    };
    struct {
        unsigned DMA2SCNT               :8;
    };
    struct {
        unsigned DMA2SCNT0              :1;
        unsigned DMA2SCNT1              :1;
        unsigned DMA2SCNT2              :1;
        unsigned DMA2SCNT3              :1;
        unsigned DMA2SCNT4              :1;
        unsigned DMA2SCNT5              :1;
        unsigned DMA2SCNT6              :1;
        unsigned DMA2SCNT7              :1;
    };
} DMA2SCNTLbits_t;
extern volatile DMA2SCNTLbits_t DMA2SCNTLbits __at(0x3BD2);
// bitfield macros
#define _DMA2SCNTL_SCNT_POSN                                0x0
#define _DMA2SCNTL_SCNT_POSITION                            0x0
#define _DMA2SCNTL_SCNT_SIZE                                0x8
#define _DMA2SCNTL_SCNT_LENGTH                              0x8
#define _DMA2SCNTL_SCNT_MASK                                0xFF
#define _DMA2SCNTL_SCNT0_POSN                               0x0
#define _DMA2SCNTL_SCNT0_POSITION                           0x0
#define _DMA2SCNTL_SCNT0_SIZE                               0x1
#define _DMA2SCNTL_SCNT0_LENGTH                             0x1
#define _DMA2SCNTL_SCNT0_MASK                               0x1
#define _DMA2SCNTL_SCNT1_POSN                               0x1
#define _DMA2SCNTL_SCNT1_POSITION                           0x1
#define _DMA2SCNTL_SCNT1_SIZE                               0x1
#define _DMA2SCNTL_SCNT1_LENGTH                             0x1
#define _DMA2SCNTL_SCNT1_MASK                               0x2
#define _DMA2SCNTL_SCNT2_POSN                               0x2
#define _DMA2SCNTL_SCNT2_POSITION                           0x2
#define _DMA2SCNTL_SCNT2_SIZE                               0x1
#define _DMA2SCNTL_SCNT2_LENGTH                             0x1
#define _DMA2SCNTL_SCNT2_MASK                               0x4
#define _DMA2SCNTL_SCNT3_POSN                               0x3
#define _DMA2SCNTL_SCNT3_POSITION                           0x3
#define _DMA2SCNTL_SCNT3_SIZE                               0x1
#define _DMA2SCNTL_SCNT3_LENGTH                             0x1
#define _DMA2SCNTL_SCNT3_MASK                               0x8
#define _DMA2SCNTL_SCNT4_POSN                               0x4
#define _DMA2SCNTL_SCNT4_POSITION                           0x4
#define _DMA2SCNTL_SCNT4_SIZE                               0x1
#define _DMA2SCNTL_SCNT4_LENGTH                             0x1
#define _DMA2SCNTL_SCNT4_MASK                               0x10
#define _DMA2SCNTL_SCNT5_POSN                               0x5
#define _DMA2SCNTL_SCNT5_POSITION                           0x5
#define _DMA2SCNTL_SCNT5_SIZE                               0x1
#define _DMA2SCNTL_SCNT5_LENGTH                             0x1
#define _DMA2SCNTL_SCNT5_MASK                               0x20
#define _DMA2SCNTL_SCNT6_POSN                               0x6
#define _DMA2SCNTL_SCNT6_POSITION                           0x6
#define _DMA2SCNTL_SCNT6_SIZE                               0x1
#define _DMA2SCNTL_SCNT6_LENGTH                             0x1
#define _DMA2SCNTL_SCNT6_MASK                               0x40
#define _DMA2SCNTL_SCNT7_POSN                               0x7
#define _DMA2SCNTL_SCNT7_POSITION                           0x7
#define _DMA2SCNTL_SCNT7_SIZE                               0x1
#define _DMA2SCNTL_SCNT7_LENGTH                             0x1
#define _DMA2SCNTL_SCNT7_MASK                               0x80
#define _DMA2SCNTL_DMA2SCNT_POSN                            0x0
#define _DMA2SCNTL_DMA2SCNT_POSITION                        0x0
#define _DMA2SCNTL_DMA2SCNT_SIZE                            0x8
#define _DMA2SCNTL_DMA2SCNT_LENGTH                          0x8
#define _DMA2SCNTL_DMA2SCNT_MASK                            0xFF
#define _DMA2SCNTL_DMA2SCNT0_POSN                           0x0
#define _DMA2SCNTL_DMA2SCNT0_POSITION                       0x0
#define _DMA2SCNTL_DMA2SCNT0_SIZE                           0x1
#define _DMA2SCNTL_DMA2SCNT0_LENGTH                         0x1
#define _DMA2SCNTL_DMA2SCNT0_MASK                           0x1
#define _DMA2SCNTL_DMA2SCNT1_POSN                           0x1
#define _DMA2SCNTL_DMA2SCNT1_POSITION                       0x1
#define _DMA2SCNTL_DMA2SCNT1_SIZE                           0x1
#define _DMA2SCNTL_DMA2SCNT1_LENGTH                         0x1
#define _DMA2SCNTL_DMA2SCNT1_MASK                           0x2
#define _DMA2SCNTL_DMA2SCNT2_POSN                           0x2
#define _DMA2SCNTL_DMA2SCNT2_POSITION                       0x2
#define _DMA2SCNTL_DMA2SCNT2_SIZE                           0x1
#define _DMA2SCNTL_DMA2SCNT2_LENGTH                         0x1
#define _DMA2SCNTL_DMA2SCNT2_MASK                           0x4
#define _DMA2SCNTL_DMA2SCNT3_POSN                           0x3
#define _DMA2SCNTL_DMA2SCNT3_POSITION                       0x3
#define _DMA2SCNTL_DMA2SCNT3_SIZE                           0x1
#define _DMA2SCNTL_DMA2SCNT3_LENGTH                         0x1
#define _DMA2SCNTL_DMA2SCNT3_MASK                           0x8
#define _DMA2SCNTL_DMA2SCNT4_POSN                           0x4
#define _DMA2SCNTL_DMA2SCNT4_POSITION                       0x4
#define _DMA2SCNTL_DMA2SCNT4_SIZE                           0x1
#define _DMA2SCNTL_DMA2SCNT4_LENGTH                         0x1
#define _DMA2SCNTL_DMA2SCNT4_MASK                           0x10
#define _DMA2SCNTL_DMA2SCNT5_POSN                           0x5
#define _DMA2SCNTL_DMA2SCNT5_POSITION                       0x5
#define _DMA2SCNTL_DMA2SCNT5_SIZE                           0x1
#define _DMA2SCNTL_DMA2SCNT5_LENGTH                         0x1
#define _DMA2SCNTL_DMA2SCNT5_MASK                           0x20
#define _DMA2SCNTL_DMA2SCNT6_POSN                           0x6
#define _DMA2SCNTL_DMA2SCNT6_POSITION                       0x6
#define _DMA2SCNTL_DMA2SCNT6_SIZE                           0x1
#define _DMA2SCNTL_DMA2SCNT6_LENGTH                         0x1
#define _DMA2SCNTL_DMA2SCNT6_MASK                           0x40
#define _DMA2SCNTL_DMA2SCNT7_POSN                           0x7
#define _DMA2SCNTL_DMA2SCNT7_POSITION                       0x7
#define _DMA2SCNTL_DMA2SCNT7_SIZE                           0x1
#define _DMA2SCNTL_DMA2SCNT7_LENGTH                         0x1
#define _DMA2SCNTL_DMA2SCNT7_MASK                           0x80

// Register: DMA2SCNTH
#define DMA2SCNTH DMA2SCNTH
extern volatile unsigned char           DMA2SCNTH           __at(0x3BD3);
#ifndef _LIB_BUILD
asm("DMA2SCNTH equ 03BD3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SCNT                   :4;
    };
    struct {
        unsigned SCNT8                  :1;
        unsigned SCNT9                  :1;
        unsigned SCNT10                 :1;
        unsigned SCNT11                 :1;
    };
    struct {
        unsigned DMA2SCNT               :4;
    };
    struct {
        unsigned DMA2SCNT8              :1;
        unsigned DMA2SCNT9              :1;
        unsigned DMA2SCNT10             :1;
        unsigned DMA2SCNT11             :1;
    };
} DMA2SCNTHbits_t;
extern volatile DMA2SCNTHbits_t DMA2SCNTHbits __at(0x3BD3);
// bitfield macros
#define _DMA2SCNTH_SCNT_POSN                                0x0
#define _DMA2SCNTH_SCNT_POSITION                            0x0
#define _DMA2SCNTH_SCNT_SIZE                                0x4
#define _DMA2SCNTH_SCNT_LENGTH                              0x4
#define _DMA2SCNTH_SCNT_MASK                                0xF
#define _DMA2SCNTH_SCNT8_POSN                               0x0
#define _DMA2SCNTH_SCNT8_POSITION                           0x0
#define _DMA2SCNTH_SCNT8_SIZE                               0x1
#define _DMA2SCNTH_SCNT8_LENGTH                             0x1
#define _DMA2SCNTH_SCNT8_MASK                               0x1
#define _DMA2SCNTH_SCNT9_POSN                               0x1
#define _DMA2SCNTH_SCNT9_POSITION                           0x1
#define _DMA2SCNTH_SCNT9_SIZE                               0x1
#define _DMA2SCNTH_SCNT9_LENGTH                             0x1
#define _DMA2SCNTH_SCNT9_MASK                               0x2
#define _DMA2SCNTH_SCNT10_POSN                              0x2
#define _DMA2SCNTH_SCNT10_POSITION                          0x2
#define _DMA2SCNTH_SCNT10_SIZE                              0x1
#define _DMA2SCNTH_SCNT10_LENGTH                            0x1
#define _DMA2SCNTH_SCNT10_MASK                              0x4
#define _DMA2SCNTH_SCNT11_POSN                              0x3
#define _DMA2SCNTH_SCNT11_POSITION                          0x3
#define _DMA2SCNTH_SCNT11_SIZE                              0x1
#define _DMA2SCNTH_SCNT11_LENGTH                            0x1
#define _DMA2SCNTH_SCNT11_MASK                              0x8
#define _DMA2SCNTH_DMA2SCNT_POSN                            0x0
#define _DMA2SCNTH_DMA2SCNT_POSITION                        0x0
#define _DMA2SCNTH_DMA2SCNT_SIZE                            0x4
#define _DMA2SCNTH_DMA2SCNT_LENGTH                          0x4
#define _DMA2SCNTH_DMA2SCNT_MASK                            0xF
#define _DMA2SCNTH_DMA2SCNT8_POSN                           0x0
#define _DMA2SCNTH_DMA2SCNT8_POSITION                       0x0
#define _DMA2SCNTH_DMA2SCNT8_SIZE                           0x1
#define _DMA2SCNTH_DMA2SCNT8_LENGTH                         0x1
#define _DMA2SCNTH_DMA2SCNT8_MASK                           0x1
#define _DMA2SCNTH_DMA2SCNT9_POSN                           0x1
#define _DMA2SCNTH_DMA2SCNT9_POSITION                       0x1
#define _DMA2SCNTH_DMA2SCNT9_SIZE                           0x1
#define _DMA2SCNTH_DMA2SCNT9_LENGTH                         0x1
#define _DMA2SCNTH_DMA2SCNT9_MASK                           0x2
#define _DMA2SCNTH_DMA2SCNT10_POSN                          0x2
#define _DMA2SCNTH_DMA2SCNT10_POSITION                      0x2
#define _DMA2SCNTH_DMA2SCNT10_SIZE                          0x1
#define _DMA2SCNTH_DMA2SCNT10_LENGTH                        0x1
#define _DMA2SCNTH_DMA2SCNT10_MASK                          0x4
#define _DMA2SCNTH_DMA2SCNT11_POSN                          0x3
#define _DMA2SCNTH_DMA2SCNT11_POSITION                      0x3
#define _DMA2SCNTH_DMA2SCNT11_SIZE                          0x1
#define _DMA2SCNTH_DMA2SCNT11_LENGTH                        0x1
#define _DMA2SCNTH_DMA2SCNT11_MASK                          0x8

// Register: DMA2SPTR
#define DMA2SPTR DMA2SPTR
#ifndef __CCI__
extern volatile __uint24                DMA2SPTR            __at(0x3BD4);
#endif
#ifndef _LIB_BUILD
asm("DMA2SPTR equ 03BD4h");
#endif

// Register: DMA2SPTRL
#define DMA2SPTRL DMA2SPTRL
extern volatile unsigned char           DMA2SPTRL           __at(0x3BD4);
#ifndef _LIB_BUILD
asm("DMA2SPTRL equ 03BD4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SPTR                   :8;
    };
    struct {
        unsigned SPTR0                  :1;
        unsigned SPTR1                  :1;
        unsigned SPTR2                  :1;
        unsigned SPTR3                  :1;
        unsigned SPTR4                  :1;
        unsigned SPTR5                  :1;
        unsigned SPTR6                  :1;
        unsigned SPTR7                  :1;
    };
    struct {
        unsigned DMA2SPTR               :8;
    };
    struct {
        unsigned DMA2SPTR0              :1;
        unsigned DMA2SPTR1              :1;
        unsigned DMA2SPTR2              :1;
        unsigned DMA2SPTR3              :1;
        unsigned DMA2SPTR4              :1;
        unsigned DMA2SPTR5              :1;
        unsigned DMA2SPTR6              :1;
        unsigned DMA2SPTR7              :1;
    };
} DMA2SPTRLbits_t;
extern volatile DMA2SPTRLbits_t DMA2SPTRLbits __at(0x3BD4);
// bitfield macros
#define _DMA2SPTRL_SPTR_POSN                                0x0
#define _DMA2SPTRL_SPTR_POSITION                            0x0
#define _DMA2SPTRL_SPTR_SIZE                                0x8
#define _DMA2SPTRL_SPTR_LENGTH                              0x8
#define _DMA2SPTRL_SPTR_MASK                                0xFF
#define _DMA2SPTRL_SPTR0_POSN                               0x0
#define _DMA2SPTRL_SPTR0_POSITION                           0x0
#define _DMA2SPTRL_SPTR0_SIZE                               0x1
#define _DMA2SPTRL_SPTR0_LENGTH                             0x1
#define _DMA2SPTRL_SPTR0_MASK                               0x1
#define _DMA2SPTRL_SPTR1_POSN                               0x1
#define _DMA2SPTRL_SPTR1_POSITION                           0x1
#define _DMA2SPTRL_SPTR1_SIZE                               0x1
#define _DMA2SPTRL_SPTR1_LENGTH                             0x1
#define _DMA2SPTRL_SPTR1_MASK                               0x2
#define _DMA2SPTRL_SPTR2_POSN                               0x2
#define _DMA2SPTRL_SPTR2_POSITION                           0x2
#define _DMA2SPTRL_SPTR2_SIZE                               0x1
#define _DMA2SPTRL_SPTR2_LENGTH                             0x1
#define _DMA2SPTRL_SPTR2_MASK                               0x4
#define _DMA2SPTRL_SPTR3_POSN                               0x3
#define _DMA2SPTRL_SPTR3_POSITION                           0x3
#define _DMA2SPTRL_SPTR3_SIZE                               0x1
#define _DMA2SPTRL_SPTR3_LENGTH                             0x1
#define _DMA2SPTRL_SPTR3_MASK                               0x8
#define _DMA2SPTRL_SPTR4_POSN                               0x4
#define _DMA2SPTRL_SPTR4_POSITION                           0x4
#define _DMA2SPTRL_SPTR4_SIZE                               0x1
#define _DMA2SPTRL_SPTR4_LENGTH                             0x1
#define _DMA2SPTRL_SPTR4_MASK                               0x10
#define _DMA2SPTRL_SPTR5_POSN                               0x5
#define _DMA2SPTRL_SPTR5_POSITION                           0x5
#define _DMA2SPTRL_SPTR5_SIZE                               0x1
#define _DMA2SPTRL_SPTR5_LENGTH                             0x1
#define _DMA2SPTRL_SPTR5_MASK                               0x20
#define _DMA2SPTRL_SPTR6_POSN                               0x6
#define _DMA2SPTRL_SPTR6_POSITION                           0x6
#define _DMA2SPTRL_SPTR6_SIZE                               0x1
#define _DMA2SPTRL_SPTR6_LENGTH                             0x1
#define _DMA2SPTRL_SPTR6_MASK                               0x40
#define _DMA2SPTRL_SPTR7_POSN                               0x7
#define _DMA2SPTRL_SPTR7_POSITION                           0x7
#define _DMA2SPTRL_SPTR7_SIZE                               0x1
#define _DMA2SPTRL_SPTR7_LENGTH                             0x1
#define _DMA2SPTRL_SPTR7_MASK                               0x80
#define _DMA2SPTRL_DMA2SPTR_POSN                            0x0
#define _DMA2SPTRL_DMA2SPTR_POSITION                        0x0
#define _DMA2SPTRL_DMA2SPTR_SIZE                            0x8
#define _DMA2SPTRL_DMA2SPTR_LENGTH                          0x8
#define _DMA2SPTRL_DMA2SPTR_MASK                            0xFF
#define _DMA2SPTRL_DMA2SPTR0_POSN                           0x0
#define _DMA2SPTRL_DMA2SPTR0_POSITION                       0x0
#define _DMA2SPTRL_DMA2SPTR0_SIZE                           0x1
#define _DMA2SPTRL_DMA2SPTR0_LENGTH                         0x1
#define _DMA2SPTRL_DMA2SPTR0_MASK                           0x1
#define _DMA2SPTRL_DMA2SPTR1_POSN                           0x1
#define _DMA2SPTRL_DMA2SPTR1_POSITION                       0x1
#define _DMA2SPTRL_DMA2SPTR1_SIZE                           0x1
#define _DMA2SPTRL_DMA2SPTR1_LENGTH                         0x1
#define _DMA2SPTRL_DMA2SPTR1_MASK                           0x2
#define _DMA2SPTRL_DMA2SPTR2_POSN                           0x2
#define _DMA2SPTRL_DMA2SPTR2_POSITION                       0x2
#define _DMA2SPTRL_DMA2SPTR2_SIZE                           0x1
#define _DMA2SPTRL_DMA2SPTR2_LENGTH                         0x1
#define _DMA2SPTRL_DMA2SPTR2_MASK                           0x4
#define _DMA2SPTRL_DMA2SPTR3_POSN                           0x3
#define _DMA2SPTRL_DMA2SPTR3_POSITION                       0x3
#define _DMA2SPTRL_DMA2SPTR3_SIZE                           0x1
#define _DMA2SPTRL_DMA2SPTR3_LENGTH                         0x1
#define _DMA2SPTRL_DMA2SPTR3_MASK                           0x8
#define _DMA2SPTRL_DMA2SPTR4_POSN                           0x4
#define _DMA2SPTRL_DMA2SPTR4_POSITION                       0x4
#define _DMA2SPTRL_DMA2SPTR4_SIZE                           0x1
#define _DMA2SPTRL_DMA2SPTR4_LENGTH                         0x1
#define _DMA2SPTRL_DMA2SPTR4_MASK                           0x10
#define _DMA2SPTRL_DMA2SPTR5_POSN                           0x5
#define _DMA2SPTRL_DMA2SPTR5_POSITION                       0x5
#define _DMA2SPTRL_DMA2SPTR5_SIZE                           0x1
#define _DMA2SPTRL_DMA2SPTR5_LENGTH                         0x1
#define _DMA2SPTRL_DMA2SPTR5_MASK                           0x20
#define _DMA2SPTRL_DMA2SPTR6_POSN                           0x6
#define _DMA2SPTRL_DMA2SPTR6_POSITION                       0x6
#define _DMA2SPTRL_DMA2SPTR6_SIZE                           0x1
#define _DMA2SPTRL_DMA2SPTR6_LENGTH                         0x1
#define _DMA2SPTRL_DMA2SPTR6_MASK                           0x40
#define _DMA2SPTRL_DMA2SPTR7_POSN                           0x7
#define _DMA2SPTRL_DMA2SPTR7_POSITION                       0x7
#define _DMA2SPTRL_DMA2SPTR7_SIZE                           0x1
#define _DMA2SPTRL_DMA2SPTR7_LENGTH                         0x1
#define _DMA2SPTRL_DMA2SPTR7_MASK                           0x80

// Register: DMA2SPTRH
#define DMA2SPTRH DMA2SPTRH
extern volatile unsigned char           DMA2SPTRH           __at(0x3BD5);
#ifndef _LIB_BUILD
asm("DMA2SPTRH equ 03BD5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SPTR                   :8;
    };
    struct {
        unsigned SPTR8                  :1;
        unsigned SPTR9                  :1;
        unsigned SPTR10                 :1;
        unsigned SPTR11                 :1;
        unsigned SPTR12                 :1;
        unsigned SPTR13                 :1;
        unsigned SPTR14                 :1;
        unsigned SPTR15                 :1;
    };
    struct {
        unsigned DMA2SPTR               :8;
    };
    struct {
        unsigned DMA2SPTR8              :1;
        unsigned DMA2SPTR9              :1;
        unsigned DMA2SPTR10             :1;
        unsigned DMA2SPTR11             :1;
        unsigned DMA2SPTR12             :1;
        unsigned DMA2SPTR13             :1;
        unsigned DMA2SPTR14             :1;
        unsigned DMA2SPTR15             :1;
    };
} DMA2SPTRHbits_t;
extern volatile DMA2SPTRHbits_t DMA2SPTRHbits __at(0x3BD5);
// bitfield macros
#define _DMA2SPTRH_SPTR_POSN                                0x0
#define _DMA2SPTRH_SPTR_POSITION                            0x0
#define _DMA2SPTRH_SPTR_SIZE                                0x8
#define _DMA2SPTRH_SPTR_LENGTH                              0x8
#define _DMA2SPTRH_SPTR_MASK                                0xFF
#define _DMA2SPTRH_SPTR8_POSN                               0x0
#define _DMA2SPTRH_SPTR8_POSITION                           0x0
#define _DMA2SPTRH_SPTR8_SIZE                               0x1
#define _DMA2SPTRH_SPTR8_LENGTH                             0x1
#define _DMA2SPTRH_SPTR8_MASK                               0x1
#define _DMA2SPTRH_SPTR9_POSN                               0x1
#define _DMA2SPTRH_SPTR9_POSITION                           0x1
#define _DMA2SPTRH_SPTR9_SIZE                               0x1
#define _DMA2SPTRH_SPTR9_LENGTH                             0x1
#define _DMA2SPTRH_SPTR9_MASK                               0x2
#define _DMA2SPTRH_SPTR10_POSN                              0x2
#define _DMA2SPTRH_SPTR10_POSITION                          0x2
#define _DMA2SPTRH_SPTR10_SIZE                              0x1
#define _DMA2SPTRH_SPTR10_LENGTH                            0x1
#define _DMA2SPTRH_SPTR10_MASK                              0x4
#define _DMA2SPTRH_SPTR11_POSN                              0x3
#define _DMA2SPTRH_SPTR11_POSITION                          0x3
#define _DMA2SPTRH_SPTR11_SIZE                              0x1
#define _DMA2SPTRH_SPTR11_LENGTH                            0x1
#define _DMA2SPTRH_SPTR11_MASK                              0x8
#define _DMA2SPTRH_SPTR12_POSN                              0x4
#define _DMA2SPTRH_SPTR12_POSITION                          0x4
#define _DMA2SPTRH_SPTR12_SIZE                              0x1
#define _DMA2SPTRH_SPTR12_LENGTH                            0x1
#define _DMA2SPTRH_SPTR12_MASK                              0x10
#define _DMA2SPTRH_SPTR13_POSN                              0x5
#define _DMA2SPTRH_SPTR13_POSITION                          0x5
#define _DMA2SPTRH_SPTR13_SIZE                              0x1
#define _DMA2SPTRH_SPTR13_LENGTH                            0x1
#define _DMA2SPTRH_SPTR13_MASK                              0x20
#define _DMA2SPTRH_SPTR14_POSN                              0x6
#define _DMA2SPTRH_SPTR14_POSITION                          0x6
#define _DMA2SPTRH_SPTR14_SIZE                              0x1
#define _DMA2SPTRH_SPTR14_LENGTH                            0x1
#define _DMA2SPTRH_SPTR14_MASK                              0x40
#define _DMA2SPTRH_SPTR15_POSN                              0x7
#define _DMA2SPTRH_SPTR15_POSITION                          0x7
#define _DMA2SPTRH_SPTR15_SIZE                              0x1
#define _DMA2SPTRH_SPTR15_LENGTH                            0x1
#define _DMA2SPTRH_SPTR15_MASK                              0x80
#define _DMA2SPTRH_DMA2SPTR_POSN                            0x0
#define _DMA2SPTRH_DMA2SPTR_POSITION                        0x0
#define _DMA2SPTRH_DMA2SPTR_SIZE                            0x8
#define _DMA2SPTRH_DMA2SPTR_LENGTH                          0x8
#define _DMA2SPTRH_DMA2SPTR_MASK                            0xFF
#define _DMA2SPTRH_DMA2SPTR8_POSN                           0x0
#define _DMA2SPTRH_DMA2SPTR8_POSITION                       0x0
#define _DMA2SPTRH_DMA2SPTR8_SIZE                           0x1
#define _DMA2SPTRH_DMA2SPTR8_LENGTH                         0x1
#define _DMA2SPTRH_DMA2SPTR8_MASK                           0x1
#define _DMA2SPTRH_DMA2SPTR9_POSN                           0x1
#define _DMA2SPTRH_DMA2SPTR9_POSITION                       0x1
#define _DMA2SPTRH_DMA2SPTR9_SIZE                           0x1
#define _DMA2SPTRH_DMA2SPTR9_LENGTH                         0x1
#define _DMA2SPTRH_DMA2SPTR9_MASK                           0x2
#define _DMA2SPTRH_DMA2SPTR10_POSN                          0x2
#define _DMA2SPTRH_DMA2SPTR10_POSITION                      0x2
#define _DMA2SPTRH_DMA2SPTR10_SIZE                          0x1
#define _DMA2SPTRH_DMA2SPTR10_LENGTH                        0x1
#define _DMA2SPTRH_DMA2SPTR10_MASK                          0x4
#define _DMA2SPTRH_DMA2SPTR11_POSN                          0x3
#define _DMA2SPTRH_DMA2SPTR11_POSITION                      0x3
#define _DMA2SPTRH_DMA2SPTR11_SIZE                          0x1
#define _DMA2SPTRH_DMA2SPTR11_LENGTH                        0x1
#define _DMA2SPTRH_DMA2SPTR11_MASK                          0x8
#define _DMA2SPTRH_DMA2SPTR12_POSN                          0x4
#define _DMA2SPTRH_DMA2SPTR12_POSITION                      0x4
#define _DMA2SPTRH_DMA2SPTR12_SIZE                          0x1
#define _DMA2SPTRH_DMA2SPTR12_LENGTH                        0x1
#define _DMA2SPTRH_DMA2SPTR12_MASK                          0x10
#define _DMA2SPTRH_DMA2SPTR13_POSN                          0x5
#define _DMA2SPTRH_DMA2SPTR13_POSITION                      0x5
#define _DMA2SPTRH_DMA2SPTR13_SIZE                          0x1
#define _DMA2SPTRH_DMA2SPTR13_LENGTH                        0x1
#define _DMA2SPTRH_DMA2SPTR13_MASK                          0x20
#define _DMA2SPTRH_DMA2SPTR14_POSN                          0x6
#define _DMA2SPTRH_DMA2SPTR14_POSITION                      0x6
#define _DMA2SPTRH_DMA2SPTR14_SIZE                          0x1
#define _DMA2SPTRH_DMA2SPTR14_LENGTH                        0x1
#define _DMA2SPTRH_DMA2SPTR14_MASK                          0x40
#define _DMA2SPTRH_DMA2SPTR15_POSN                          0x7
#define _DMA2SPTRH_DMA2SPTR15_POSITION                      0x7
#define _DMA2SPTRH_DMA2SPTR15_SIZE                          0x1
#define _DMA2SPTRH_DMA2SPTR15_LENGTH                        0x1
#define _DMA2SPTRH_DMA2SPTR15_MASK                          0x80

// Register: DMA2SPTRU
#define DMA2SPTRU DMA2SPTRU
extern volatile unsigned char           DMA2SPTRU           __at(0x3BD6);
#ifndef _LIB_BUILD
asm("DMA2SPTRU equ 03BD6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SPTR                   :6;
    };
    struct {
        unsigned SPTR16                 :1;
        unsigned SPTR17                 :1;
        unsigned SPTR18                 :1;
        unsigned SPTR19                 :1;
        unsigned SPTR20                 :1;
        unsigned SPTR21                 :1;
    };
    struct {
        unsigned DMA2SPTR               :6;
    };
    struct {
        unsigned DMA2SPTR16             :1;
        unsigned DMA2SPTR17             :1;
        unsigned DMA2SPTR18             :1;
        unsigned DMA2SPTR19             :1;
        unsigned DMA2SPTR20             :1;
        unsigned DMA2SPTR21             :1;
    };
} DMA2SPTRUbits_t;
extern volatile DMA2SPTRUbits_t DMA2SPTRUbits __at(0x3BD6);
// bitfield macros
#define _DMA2SPTRU_SPTR_POSN                                0x0
#define _DMA2SPTRU_SPTR_POSITION                            0x0
#define _DMA2SPTRU_SPTR_SIZE                                0x6
#define _DMA2SPTRU_SPTR_LENGTH                              0x6
#define _DMA2SPTRU_SPTR_MASK                                0x3F
#define _DMA2SPTRU_SPTR16_POSN                              0x0
#define _DMA2SPTRU_SPTR16_POSITION                          0x0
#define _DMA2SPTRU_SPTR16_SIZE                              0x1
#define _DMA2SPTRU_SPTR16_LENGTH                            0x1
#define _DMA2SPTRU_SPTR16_MASK                              0x1
#define _DMA2SPTRU_SPTR17_POSN                              0x1
#define _DMA2SPTRU_SPTR17_POSITION                          0x1
#define _DMA2SPTRU_SPTR17_SIZE                              0x1
#define _DMA2SPTRU_SPTR17_LENGTH                            0x1
#define _DMA2SPTRU_SPTR17_MASK                              0x2
#define _DMA2SPTRU_SPTR18_POSN                              0x2
#define _DMA2SPTRU_SPTR18_POSITION                          0x2
#define _DMA2SPTRU_SPTR18_SIZE                              0x1
#define _DMA2SPTRU_SPTR18_LENGTH                            0x1
#define _DMA2SPTRU_SPTR18_MASK                              0x4
#define _DMA2SPTRU_SPTR19_POSN                              0x3
#define _DMA2SPTRU_SPTR19_POSITION                          0x3
#define _DMA2SPTRU_SPTR19_SIZE                              0x1
#define _DMA2SPTRU_SPTR19_LENGTH                            0x1
#define _DMA2SPTRU_SPTR19_MASK                              0x8
#define _DMA2SPTRU_SPTR20_POSN                              0x4
#define _DMA2SPTRU_SPTR20_POSITION                          0x4
#define _DMA2SPTRU_SPTR20_SIZE                              0x1
#define _DMA2SPTRU_SPTR20_LENGTH                            0x1
#define _DMA2SPTRU_SPTR20_MASK                              0x10
#define _DMA2SPTRU_SPTR21_POSN                              0x5
#define _DMA2SPTRU_SPTR21_POSITION                          0x5
#define _DMA2SPTRU_SPTR21_SIZE                              0x1
#define _DMA2SPTRU_SPTR21_LENGTH                            0x1
#define _DMA2SPTRU_SPTR21_MASK                              0x20
#define _DMA2SPTRU_DMA2SPTR_POSN                            0x0
#define _DMA2SPTRU_DMA2SPTR_POSITION                        0x0
#define _DMA2SPTRU_DMA2SPTR_SIZE                            0x6
#define _DMA2SPTRU_DMA2SPTR_LENGTH                          0x6
#define _DMA2SPTRU_DMA2SPTR_MASK                            0x3F
#define _DMA2SPTRU_DMA2SPTR16_POSN                          0x0
#define _DMA2SPTRU_DMA2SPTR16_POSITION                      0x0
#define _DMA2SPTRU_DMA2SPTR16_SIZE                          0x1
#define _DMA2SPTRU_DMA2SPTR16_LENGTH                        0x1
#define _DMA2SPTRU_DMA2SPTR16_MASK                          0x1
#define _DMA2SPTRU_DMA2SPTR17_POSN                          0x1
#define _DMA2SPTRU_DMA2SPTR17_POSITION                      0x1
#define _DMA2SPTRU_DMA2SPTR17_SIZE                          0x1
#define _DMA2SPTRU_DMA2SPTR17_LENGTH                        0x1
#define _DMA2SPTRU_DMA2SPTR17_MASK                          0x2
#define _DMA2SPTRU_DMA2SPTR18_POSN                          0x2
#define _DMA2SPTRU_DMA2SPTR18_POSITION                      0x2
#define _DMA2SPTRU_DMA2SPTR18_SIZE                          0x1
#define _DMA2SPTRU_DMA2SPTR18_LENGTH                        0x1
#define _DMA2SPTRU_DMA2SPTR18_MASK                          0x4
#define _DMA2SPTRU_DMA2SPTR19_POSN                          0x3
#define _DMA2SPTRU_DMA2SPTR19_POSITION                      0x3
#define _DMA2SPTRU_DMA2SPTR19_SIZE                          0x1
#define _DMA2SPTRU_DMA2SPTR19_LENGTH                        0x1
#define _DMA2SPTRU_DMA2SPTR19_MASK                          0x8
#define _DMA2SPTRU_DMA2SPTR20_POSN                          0x4
#define _DMA2SPTRU_DMA2SPTR20_POSITION                      0x4
#define _DMA2SPTRU_DMA2SPTR20_SIZE                          0x1
#define _DMA2SPTRU_DMA2SPTR20_LENGTH                        0x1
#define _DMA2SPTRU_DMA2SPTR20_MASK                          0x10
#define _DMA2SPTRU_DMA2SPTR21_POSN                          0x5
#define _DMA2SPTRU_DMA2SPTR21_POSITION                      0x5
#define _DMA2SPTRU_DMA2SPTR21_SIZE                          0x1
#define _DMA2SPTRU_DMA2SPTR21_LENGTH                        0x1
#define _DMA2SPTRU_DMA2SPTR21_MASK                          0x20

// Register: DMA2SSZ
#define DMA2SSZ DMA2SSZ
extern volatile unsigned short          DMA2SSZ             __at(0x3BD7);
#ifndef _LIB_BUILD
asm("DMA2SSZ equ 03BD7h");
#endif

// Register: DMA2SSZL
#define DMA2SSZL DMA2SSZL
extern volatile unsigned char           DMA2SSZL            __at(0x3BD7);
#ifndef _LIB_BUILD
asm("DMA2SSZL equ 03BD7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSZ                    :8;
    };
    struct {
        unsigned DMA2SSZ                :8;
    };
    struct {
        unsigned SSZ0                   :1;
        unsigned SSZ1                   :1;
        unsigned SSZ2                   :1;
        unsigned SSZ3                   :1;
        unsigned SSZ4                   :1;
        unsigned SSZ5                   :1;
        unsigned SSZ6                   :1;
        unsigned SSZ7                   :1;
    };
    struct {
        unsigned DMA2SSZ0               :1;
        unsigned DMA2SSZ1               :1;
        unsigned DMA2SSZ2               :1;
        unsigned DMA2SSZ3               :1;
        unsigned DMA2SSZ4               :1;
        unsigned DMA2SSZ5               :1;
        unsigned DMA2SSZ6               :1;
        unsigned DMA2SSZ7               :1;
    };
} DMA2SSZLbits_t;
extern volatile DMA2SSZLbits_t DMA2SSZLbits __at(0x3BD7);
// bitfield macros
#define _DMA2SSZL_SSZ_POSN                                  0x0
#define _DMA2SSZL_SSZ_POSITION                              0x0
#define _DMA2SSZL_SSZ_SIZE                                  0x8
#define _DMA2SSZL_SSZ_LENGTH                                0x8
#define _DMA2SSZL_SSZ_MASK                                  0xFF
#define _DMA2SSZL_DMA2SSZ_POSN                              0x0
#define _DMA2SSZL_DMA2SSZ_POSITION                          0x0
#define _DMA2SSZL_DMA2SSZ_SIZE                              0x8
#define _DMA2SSZL_DMA2SSZ_LENGTH                            0x8
#define _DMA2SSZL_DMA2SSZ_MASK                              0xFF
#define _DMA2SSZL_SSZ0_POSN                                 0x0
#define _DMA2SSZL_SSZ0_POSITION                             0x0
#define _DMA2SSZL_SSZ0_SIZE                                 0x1
#define _DMA2SSZL_SSZ0_LENGTH                               0x1
#define _DMA2SSZL_SSZ0_MASK                                 0x1
#define _DMA2SSZL_SSZ1_POSN                                 0x1
#define _DMA2SSZL_SSZ1_POSITION                             0x1
#define _DMA2SSZL_SSZ1_SIZE                                 0x1
#define _DMA2SSZL_SSZ1_LENGTH                               0x1
#define _DMA2SSZL_SSZ1_MASK                                 0x2
#define _DMA2SSZL_SSZ2_POSN                                 0x2
#define _DMA2SSZL_SSZ2_POSITION                             0x2
#define _DMA2SSZL_SSZ2_SIZE                                 0x1
#define _DMA2SSZL_SSZ2_LENGTH                               0x1
#define _DMA2SSZL_SSZ2_MASK                                 0x4
#define _DMA2SSZL_SSZ3_POSN                                 0x3
#define _DMA2SSZL_SSZ3_POSITION                             0x3
#define _DMA2SSZL_SSZ3_SIZE                                 0x1
#define _DMA2SSZL_SSZ3_LENGTH                               0x1
#define _DMA2SSZL_SSZ3_MASK                                 0x8
#define _DMA2SSZL_SSZ4_POSN                                 0x4
#define _DMA2SSZL_SSZ4_POSITION                             0x4
#define _DMA2SSZL_SSZ4_SIZE                                 0x1
#define _DMA2SSZL_SSZ4_LENGTH                               0x1
#define _DMA2SSZL_SSZ4_MASK                                 0x10
#define _DMA2SSZL_SSZ5_POSN                                 0x5
#define _DMA2SSZL_SSZ5_POSITION                             0x5
#define _DMA2SSZL_SSZ5_SIZE                                 0x1
#define _DMA2SSZL_SSZ5_LENGTH                               0x1
#define _DMA2SSZL_SSZ5_MASK                                 0x20
#define _DMA2SSZL_SSZ6_POSN                                 0x6
#define _DMA2SSZL_SSZ6_POSITION                             0x6
#define _DMA2SSZL_SSZ6_SIZE                                 0x1
#define _DMA2SSZL_SSZ6_LENGTH                               0x1
#define _DMA2SSZL_SSZ6_MASK                                 0x40
#define _DMA2SSZL_SSZ7_POSN                                 0x7
#define _DMA2SSZL_SSZ7_POSITION                             0x7
#define _DMA2SSZL_SSZ7_SIZE                                 0x1
#define _DMA2SSZL_SSZ7_LENGTH                               0x1
#define _DMA2SSZL_SSZ7_MASK                                 0x80
#define _DMA2SSZL_DMA2SSZ0_POSN                             0x0
#define _DMA2SSZL_DMA2SSZ0_POSITION                         0x0
#define _DMA2SSZL_DMA2SSZ0_SIZE                             0x1
#define _DMA2SSZL_DMA2SSZ0_LENGTH                           0x1
#define _DMA2SSZL_DMA2SSZ0_MASK                             0x1
#define _DMA2SSZL_DMA2SSZ1_POSN                             0x1
#define _DMA2SSZL_DMA2SSZ1_POSITION                         0x1
#define _DMA2SSZL_DMA2SSZ1_SIZE                             0x1
#define _DMA2SSZL_DMA2SSZ1_LENGTH                           0x1
#define _DMA2SSZL_DMA2SSZ1_MASK                             0x2
#define _DMA2SSZL_DMA2SSZ2_POSN                             0x2
#define _DMA2SSZL_DMA2SSZ2_POSITION                         0x2
#define _DMA2SSZL_DMA2SSZ2_SIZE                             0x1
#define _DMA2SSZL_DMA2SSZ2_LENGTH                           0x1
#define _DMA2SSZL_DMA2SSZ2_MASK                             0x4
#define _DMA2SSZL_DMA2SSZ3_POSN                             0x3
#define _DMA2SSZL_DMA2SSZ3_POSITION                         0x3
#define _DMA2SSZL_DMA2SSZ3_SIZE                             0x1
#define _DMA2SSZL_DMA2SSZ3_LENGTH                           0x1
#define _DMA2SSZL_DMA2SSZ3_MASK                             0x8
#define _DMA2SSZL_DMA2SSZ4_POSN                             0x4
#define _DMA2SSZL_DMA2SSZ4_POSITION                         0x4
#define _DMA2SSZL_DMA2SSZ4_SIZE                             0x1
#define _DMA2SSZL_DMA2SSZ4_LENGTH                           0x1
#define _DMA2SSZL_DMA2SSZ4_MASK                             0x10
#define _DMA2SSZL_DMA2SSZ5_POSN                             0x5
#define _DMA2SSZL_DMA2SSZ5_POSITION                         0x5
#define _DMA2SSZL_DMA2SSZ5_SIZE                             0x1
#define _DMA2SSZL_DMA2SSZ5_LENGTH                           0x1
#define _DMA2SSZL_DMA2SSZ5_MASK                             0x20
#define _DMA2SSZL_DMA2SSZ6_POSN                             0x6
#define _DMA2SSZL_DMA2SSZ6_POSITION                         0x6
#define _DMA2SSZL_DMA2SSZ6_SIZE                             0x1
#define _DMA2SSZL_DMA2SSZ6_LENGTH                           0x1
#define _DMA2SSZL_DMA2SSZ6_MASK                             0x40
#define _DMA2SSZL_DMA2SSZ7_POSN                             0x7
#define _DMA2SSZL_DMA2SSZ7_POSITION                         0x7
#define _DMA2SSZL_DMA2SSZ7_SIZE                             0x1
#define _DMA2SSZL_DMA2SSZ7_LENGTH                           0x1
#define _DMA2SSZL_DMA2SSZ7_MASK                             0x80

// Register: DMA2SSZH
#define DMA2SSZH DMA2SSZH
extern volatile unsigned char           DMA2SSZH            __at(0x3BD8);
#ifndef _LIB_BUILD
asm("DMA2SSZH equ 03BD8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSZ                    :4;
    };
    struct {
        unsigned DMA2SSZ                :4;
    };
    struct {
        unsigned SSZ8                   :1;
        unsigned SSZ9                   :1;
        unsigned SSZ10                  :1;
        unsigned SSZ11                  :1;
    };
    struct {
        unsigned DMA2SSZ8               :1;
        unsigned DMA2SSZ9               :1;
        unsigned DMA2SSZ10              :1;
        unsigned DMA2SSZ11              :1;
    };
} DMA2SSZHbits_t;
extern volatile DMA2SSZHbits_t DMA2SSZHbits __at(0x3BD8);
// bitfield macros
#define _DMA2SSZH_SSZ_POSN                                  0x0
#define _DMA2SSZH_SSZ_POSITION                              0x0
#define _DMA2SSZH_SSZ_SIZE                                  0x4
#define _DMA2SSZH_SSZ_LENGTH                                0x4
#define _DMA2SSZH_SSZ_MASK                                  0xF
#define _DMA2SSZH_DMA2SSZ_POSN                              0x0
#define _DMA2SSZH_DMA2SSZ_POSITION                          0x0
#define _DMA2SSZH_DMA2SSZ_SIZE                              0x4
#define _DMA2SSZH_DMA2SSZ_LENGTH                            0x4
#define _DMA2SSZH_DMA2SSZ_MASK                              0xF
#define _DMA2SSZH_SSZ8_POSN                                 0x0
#define _DMA2SSZH_SSZ8_POSITION                             0x0
#define _DMA2SSZH_SSZ8_SIZE                                 0x1
#define _DMA2SSZH_SSZ8_LENGTH                               0x1
#define _DMA2SSZH_SSZ8_MASK                                 0x1
#define _DMA2SSZH_SSZ9_POSN                                 0x1
#define _DMA2SSZH_SSZ9_POSITION                             0x1
#define _DMA2SSZH_SSZ9_SIZE                                 0x1
#define _DMA2SSZH_SSZ9_LENGTH                               0x1
#define _DMA2SSZH_SSZ9_MASK                                 0x2
#define _DMA2SSZH_SSZ10_POSN                                0x2
#define _DMA2SSZH_SSZ10_POSITION                            0x2
#define _DMA2SSZH_SSZ10_SIZE                                0x1
#define _DMA2SSZH_SSZ10_LENGTH                              0x1
#define _DMA2SSZH_SSZ10_MASK                                0x4
#define _DMA2SSZH_SSZ11_POSN                                0x3
#define _DMA2SSZH_SSZ11_POSITION                            0x3
#define _DMA2SSZH_SSZ11_SIZE                                0x1
#define _DMA2SSZH_SSZ11_LENGTH                              0x1
#define _DMA2SSZH_SSZ11_MASK                                0x8
#define _DMA2SSZH_DMA2SSZ8_POSN                             0x0
#define _DMA2SSZH_DMA2SSZ8_POSITION                         0x0
#define _DMA2SSZH_DMA2SSZ8_SIZE                             0x1
#define _DMA2SSZH_DMA2SSZ8_LENGTH                           0x1
#define _DMA2SSZH_DMA2SSZ8_MASK                             0x1
#define _DMA2SSZH_DMA2SSZ9_POSN                             0x1
#define _DMA2SSZH_DMA2SSZ9_POSITION                         0x1
#define _DMA2SSZH_DMA2SSZ9_SIZE                             0x1
#define _DMA2SSZH_DMA2SSZ9_LENGTH                           0x1
#define _DMA2SSZH_DMA2SSZ9_MASK                             0x2
#define _DMA2SSZH_DMA2SSZ10_POSN                            0x2
#define _DMA2SSZH_DMA2SSZ10_POSITION                        0x2
#define _DMA2SSZH_DMA2SSZ10_SIZE                            0x1
#define _DMA2SSZH_DMA2SSZ10_LENGTH                          0x1
#define _DMA2SSZH_DMA2SSZ10_MASK                            0x4
#define _DMA2SSZH_DMA2SSZ11_POSN                            0x3
#define _DMA2SSZH_DMA2SSZ11_POSITION                        0x3
#define _DMA2SSZH_DMA2SSZ11_SIZE                            0x1
#define _DMA2SSZH_DMA2SSZ11_LENGTH                          0x1
#define _DMA2SSZH_DMA2SSZ11_MASK                            0x8

// Register: DMA2SSA
#define DMA2SSA DMA2SSA
#ifndef __CCI__
extern volatile __uint24                DMA2SSA             __at(0x3BD9);
#endif
#ifndef _LIB_BUILD
asm("DMA2SSA equ 03BD9h");
#endif

// Register: DMA2SSAL
#define DMA2SSAL DMA2SSAL
extern volatile unsigned char           DMA2SSAL            __at(0x3BD9);
#ifndef _LIB_BUILD
asm("DMA2SSAL equ 03BD9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSA                    :8;
    };
    struct {
        unsigned SSA0                   :1;
        unsigned SSA1                   :1;
        unsigned SSA2                   :1;
        unsigned SSA3                   :1;
        unsigned SSA4                   :1;
        unsigned SSA5                   :1;
        unsigned SSA6                   :1;
        unsigned SSA7                   :1;
    };
    struct {
        unsigned DMA2SSA                :8;
    };
    struct {
        unsigned DMA2SSA0               :1;
        unsigned DMA2SSA1               :1;
        unsigned DMA2SSA2               :1;
        unsigned DMA2SSA3               :1;
        unsigned DMA2SSA4               :1;
        unsigned DMA2SSA5               :1;
        unsigned DMA2SSA6               :1;
        unsigned DMA2SSA7               :1;
    };
} DMA2SSALbits_t;
extern volatile DMA2SSALbits_t DMA2SSALbits __at(0x3BD9);
// bitfield macros
#define _DMA2SSAL_SSA_POSN                                  0x0
#define _DMA2SSAL_SSA_POSITION                              0x0
#define _DMA2SSAL_SSA_SIZE                                  0x8
#define _DMA2SSAL_SSA_LENGTH                                0x8
#define _DMA2SSAL_SSA_MASK                                  0xFF
#define _DMA2SSAL_SSA0_POSN                                 0x0
#define _DMA2SSAL_SSA0_POSITION                             0x0
#define _DMA2SSAL_SSA0_SIZE                                 0x1
#define _DMA2SSAL_SSA0_LENGTH                               0x1
#define _DMA2SSAL_SSA0_MASK                                 0x1
#define _DMA2SSAL_SSA1_POSN                                 0x1
#define _DMA2SSAL_SSA1_POSITION                             0x1
#define _DMA2SSAL_SSA1_SIZE                                 0x1
#define _DMA2SSAL_SSA1_LENGTH                               0x1
#define _DMA2SSAL_SSA1_MASK                                 0x2
#define _DMA2SSAL_SSA2_POSN                                 0x2
#define _DMA2SSAL_SSA2_POSITION                             0x2
#define _DMA2SSAL_SSA2_SIZE                                 0x1
#define _DMA2SSAL_SSA2_LENGTH                               0x1
#define _DMA2SSAL_SSA2_MASK                                 0x4
#define _DMA2SSAL_SSA3_POSN                                 0x3
#define _DMA2SSAL_SSA3_POSITION                             0x3
#define _DMA2SSAL_SSA3_SIZE                                 0x1
#define _DMA2SSAL_SSA3_LENGTH                               0x1
#define _DMA2SSAL_SSA3_MASK                                 0x8
#define _DMA2SSAL_SSA4_POSN                                 0x4
#define _DMA2SSAL_SSA4_POSITION                             0x4
#define _DMA2SSAL_SSA4_SIZE                                 0x1
#define _DMA2SSAL_SSA4_LENGTH                               0x1
#define _DMA2SSAL_SSA4_MASK                                 0x10
#define _DMA2SSAL_SSA5_POSN                                 0x5
#define _DMA2SSAL_SSA5_POSITION                             0x5
#define _DMA2SSAL_SSA5_SIZE                                 0x1
#define _DMA2SSAL_SSA5_LENGTH                               0x1
#define _DMA2SSAL_SSA5_MASK                                 0x20
#define _DMA2SSAL_SSA6_POSN                                 0x6
#define _DMA2SSAL_SSA6_POSITION                             0x6
#define _DMA2SSAL_SSA6_SIZE                                 0x1
#define _DMA2SSAL_SSA6_LENGTH                               0x1
#define _DMA2SSAL_SSA6_MASK                                 0x40
#define _DMA2SSAL_SSA7_POSN                                 0x7
#define _DMA2SSAL_SSA7_POSITION                             0x7
#define _DMA2SSAL_SSA7_SIZE                                 0x1
#define _DMA2SSAL_SSA7_LENGTH                               0x1
#define _DMA2SSAL_SSA7_MASK                                 0x80
#define _DMA2SSAL_DMA2SSA_POSN                              0x0
#define _DMA2SSAL_DMA2SSA_POSITION                          0x0
#define _DMA2SSAL_DMA2SSA_SIZE                              0x8
#define _DMA2SSAL_DMA2SSA_LENGTH                            0x8
#define _DMA2SSAL_DMA2SSA_MASK                              0xFF
#define _DMA2SSAL_DMA2SSA0_POSN                             0x0
#define _DMA2SSAL_DMA2SSA0_POSITION                         0x0
#define _DMA2SSAL_DMA2SSA0_SIZE                             0x1
#define _DMA2SSAL_DMA2SSA0_LENGTH                           0x1
#define _DMA2SSAL_DMA2SSA0_MASK                             0x1
#define _DMA2SSAL_DMA2SSA1_POSN                             0x1
#define _DMA2SSAL_DMA2SSA1_POSITION                         0x1
#define _DMA2SSAL_DMA2SSA1_SIZE                             0x1
#define _DMA2SSAL_DMA2SSA1_LENGTH                           0x1
#define _DMA2SSAL_DMA2SSA1_MASK                             0x2
#define _DMA2SSAL_DMA2SSA2_POSN                             0x2
#define _DMA2SSAL_DMA2SSA2_POSITION                         0x2
#define _DMA2SSAL_DMA2SSA2_SIZE                             0x1
#define _DMA2SSAL_DMA2SSA2_LENGTH                           0x1
#define _DMA2SSAL_DMA2SSA2_MASK                             0x4
#define _DMA2SSAL_DMA2SSA3_POSN                             0x3
#define _DMA2SSAL_DMA2SSA3_POSITION                         0x3
#define _DMA2SSAL_DMA2SSA3_SIZE                             0x1
#define _DMA2SSAL_DMA2SSA3_LENGTH                           0x1
#define _DMA2SSAL_DMA2SSA3_MASK                             0x8
#define _DMA2SSAL_DMA2SSA4_POSN                             0x4
#define _DMA2SSAL_DMA2SSA4_POSITION                         0x4
#define _DMA2SSAL_DMA2SSA4_SIZE                             0x1
#define _DMA2SSAL_DMA2SSA4_LENGTH                           0x1
#define _DMA2SSAL_DMA2SSA4_MASK                             0x10
#define _DMA2SSAL_DMA2SSA5_POSN                             0x5
#define _DMA2SSAL_DMA2SSA5_POSITION                         0x5
#define _DMA2SSAL_DMA2SSA5_SIZE                             0x1
#define _DMA2SSAL_DMA2SSA5_LENGTH                           0x1
#define _DMA2SSAL_DMA2SSA5_MASK                             0x20
#define _DMA2SSAL_DMA2SSA6_POSN                             0x6
#define _DMA2SSAL_DMA2SSA6_POSITION                         0x6
#define _DMA2SSAL_DMA2SSA6_SIZE                             0x1
#define _DMA2SSAL_DMA2SSA6_LENGTH                           0x1
#define _DMA2SSAL_DMA2SSA6_MASK                             0x40
#define _DMA2SSAL_DMA2SSA7_POSN                             0x7
#define _DMA2SSAL_DMA2SSA7_POSITION                         0x7
#define _DMA2SSAL_DMA2SSA7_SIZE                             0x1
#define _DMA2SSAL_DMA2SSA7_LENGTH                           0x1
#define _DMA2SSAL_DMA2SSA7_MASK                             0x80

// Register: DMA2SSAH
#define DMA2SSAH DMA2SSAH
extern volatile unsigned char           DMA2SSAH            __at(0x3BDA);
#ifndef _LIB_BUILD
asm("DMA2SSAH equ 03BDAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSA                    :8;
    };
    struct {
        unsigned SSA8                   :1;
        unsigned SSA9                   :1;
        unsigned SSA10                  :1;
        unsigned SSA11                  :1;
        unsigned SSA12                  :1;
        unsigned SSA13                  :1;
        unsigned SSA14                  :1;
        unsigned SSA15                  :1;
    };
    struct {
        unsigned DMA2SSA                :8;
    };
    struct {
        unsigned DMA2SSA8               :1;
        unsigned DMA2SSA9               :1;
        unsigned DMA2SSA10              :1;
        unsigned DMA2SSA11              :1;
        unsigned DMA2SSA12              :1;
        unsigned DMA2SSA13              :1;
        unsigned DMA2SSA14              :1;
        unsigned DMA2SSA15              :1;
    };
} DMA2SSAHbits_t;
extern volatile DMA2SSAHbits_t DMA2SSAHbits __at(0x3BDA);
// bitfield macros
#define _DMA2SSAH_SSA_POSN                                  0x0
#define _DMA2SSAH_SSA_POSITION                              0x0
#define _DMA2SSAH_SSA_SIZE                                  0x8
#define _DMA2SSAH_SSA_LENGTH                                0x8
#define _DMA2SSAH_SSA_MASK                                  0xFF
#define _DMA2SSAH_SSA8_POSN                                 0x0
#define _DMA2SSAH_SSA8_POSITION                             0x0
#define _DMA2SSAH_SSA8_SIZE                                 0x1
#define _DMA2SSAH_SSA8_LENGTH                               0x1
#define _DMA2SSAH_SSA8_MASK                                 0x1
#define _DMA2SSAH_SSA9_POSN                                 0x1
#define _DMA2SSAH_SSA9_POSITION                             0x1
#define _DMA2SSAH_SSA9_SIZE                                 0x1
#define _DMA2SSAH_SSA9_LENGTH                               0x1
#define _DMA2SSAH_SSA9_MASK                                 0x2
#define _DMA2SSAH_SSA10_POSN                                0x2
#define _DMA2SSAH_SSA10_POSITION                            0x2
#define _DMA2SSAH_SSA10_SIZE                                0x1
#define _DMA2SSAH_SSA10_LENGTH                              0x1
#define _DMA2SSAH_SSA10_MASK                                0x4
#define _DMA2SSAH_SSA11_POSN                                0x3
#define _DMA2SSAH_SSA11_POSITION                            0x3
#define _DMA2SSAH_SSA11_SIZE                                0x1
#define _DMA2SSAH_SSA11_LENGTH                              0x1
#define _DMA2SSAH_SSA11_MASK                                0x8
#define _DMA2SSAH_SSA12_POSN                                0x4
#define _DMA2SSAH_SSA12_POSITION                            0x4
#define _DMA2SSAH_SSA12_SIZE                                0x1
#define _DMA2SSAH_SSA12_LENGTH                              0x1
#define _DMA2SSAH_SSA12_MASK                                0x10
#define _DMA2SSAH_SSA13_POSN                                0x5
#define _DMA2SSAH_SSA13_POSITION                            0x5
#define _DMA2SSAH_SSA13_SIZE                                0x1
#define _DMA2SSAH_SSA13_LENGTH                              0x1
#define _DMA2SSAH_SSA13_MASK                                0x20
#define _DMA2SSAH_SSA14_POSN                                0x6
#define _DMA2SSAH_SSA14_POSITION                            0x6
#define _DMA2SSAH_SSA14_SIZE                                0x1
#define _DMA2SSAH_SSA14_LENGTH                              0x1
#define _DMA2SSAH_SSA14_MASK                                0x40
#define _DMA2SSAH_SSA15_POSN                                0x7
#define _DMA2SSAH_SSA15_POSITION                            0x7
#define _DMA2SSAH_SSA15_SIZE                                0x1
#define _DMA2SSAH_SSA15_LENGTH                              0x1
#define _DMA2SSAH_SSA15_MASK                                0x80
#define _DMA2SSAH_DMA2SSA_POSN                              0x0
#define _DMA2SSAH_DMA2SSA_POSITION                          0x0
#define _DMA2SSAH_DMA2SSA_SIZE                              0x8
#define _DMA2SSAH_DMA2SSA_LENGTH                            0x8
#define _DMA2SSAH_DMA2SSA_MASK                              0xFF
#define _DMA2SSAH_DMA2SSA8_POSN                             0x0
#define _DMA2SSAH_DMA2SSA8_POSITION                         0x0
#define _DMA2SSAH_DMA2SSA8_SIZE                             0x1
#define _DMA2SSAH_DMA2SSA8_LENGTH                           0x1
#define _DMA2SSAH_DMA2SSA8_MASK                             0x1
#define _DMA2SSAH_DMA2SSA9_POSN                             0x1
#define _DMA2SSAH_DMA2SSA9_POSITION                         0x1
#define _DMA2SSAH_DMA2SSA9_SIZE                             0x1
#define _DMA2SSAH_DMA2SSA9_LENGTH                           0x1
#define _DMA2SSAH_DMA2SSA9_MASK                             0x2
#define _DMA2SSAH_DMA2SSA10_POSN                            0x2
#define _DMA2SSAH_DMA2SSA10_POSITION                        0x2
#define _DMA2SSAH_DMA2SSA10_SIZE                            0x1
#define _DMA2SSAH_DMA2SSA10_LENGTH                          0x1
#define _DMA2SSAH_DMA2SSA10_MASK                            0x4
#define _DMA2SSAH_DMA2SSA11_POSN                            0x3
#define _DMA2SSAH_DMA2SSA11_POSITION                        0x3
#define _DMA2SSAH_DMA2SSA11_SIZE                            0x1
#define _DMA2SSAH_DMA2SSA11_LENGTH                          0x1
#define _DMA2SSAH_DMA2SSA11_MASK                            0x8
#define _DMA2SSAH_DMA2SSA12_POSN                            0x4
#define _DMA2SSAH_DMA2SSA12_POSITION                        0x4
#define _DMA2SSAH_DMA2SSA12_SIZE                            0x1
#define _DMA2SSAH_DMA2SSA12_LENGTH                          0x1
#define _DMA2SSAH_DMA2SSA12_MASK                            0x10
#define _DMA2SSAH_DMA2SSA13_POSN                            0x5
#define _DMA2SSAH_DMA2SSA13_POSITION                        0x5
#define _DMA2SSAH_DMA2SSA13_SIZE                            0x1
#define _DMA2SSAH_DMA2SSA13_LENGTH                          0x1
#define _DMA2SSAH_DMA2SSA13_MASK                            0x20
#define _DMA2SSAH_DMA2SSA14_POSN                            0x6
#define _DMA2SSAH_DMA2SSA14_POSITION                        0x6
#define _DMA2SSAH_DMA2SSA14_SIZE                            0x1
#define _DMA2SSAH_DMA2SSA14_LENGTH                          0x1
#define _DMA2SSAH_DMA2SSA14_MASK                            0x40
#define _DMA2SSAH_DMA2SSA15_POSN                            0x7
#define _DMA2SSAH_DMA2SSA15_POSITION                        0x7
#define _DMA2SSAH_DMA2SSA15_SIZE                            0x1
#define _DMA2SSAH_DMA2SSA15_LENGTH                          0x1
#define _DMA2SSAH_DMA2SSA15_MASK                            0x80

// Register: DMA2SSAU
#define DMA2SSAU DMA2SSAU
extern volatile unsigned char           DMA2SSAU            __at(0x3BDB);
#ifndef _LIB_BUILD
asm("DMA2SSAU equ 03BDBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSA                    :6;
    };
    struct {
        unsigned SSA16                  :1;
        unsigned SSA17                  :1;
        unsigned SSA18                  :1;
        unsigned SSA19                  :1;
        unsigned SSA20                  :1;
        unsigned SSA21                  :1;
    };
    struct {
        unsigned DMA2SSA                :6;
    };
    struct {
        unsigned DMA2SSA16              :1;
        unsigned DMA2SSA17              :1;
        unsigned DMA2SSA18              :1;
        unsigned DMA2SSA19              :1;
        unsigned DMA2SSA20              :1;
        unsigned DMA2SSA21              :1;
    };
} DMA2SSAUbits_t;
extern volatile DMA2SSAUbits_t DMA2SSAUbits __at(0x3BDB);
// bitfield macros
#define _DMA2SSAU_SSA_POSN                                  0x0
#define _DMA2SSAU_SSA_POSITION                              0x0
#define _DMA2SSAU_SSA_SIZE                                  0x6
#define _DMA2SSAU_SSA_LENGTH                                0x6
#define _DMA2SSAU_SSA_MASK                                  0x3F
#define _DMA2SSAU_SSA16_POSN                                0x0
#define _DMA2SSAU_SSA16_POSITION                            0x0
#define _DMA2SSAU_SSA16_SIZE                                0x1
#define _DMA2SSAU_SSA16_LENGTH                              0x1
#define _DMA2SSAU_SSA16_MASK                                0x1
#define _DMA2SSAU_SSA17_POSN                                0x1
#define _DMA2SSAU_SSA17_POSITION                            0x1
#define _DMA2SSAU_SSA17_SIZE                                0x1
#define _DMA2SSAU_SSA17_LENGTH                              0x1
#define _DMA2SSAU_SSA17_MASK                                0x2
#define _DMA2SSAU_SSA18_POSN                                0x2
#define _DMA2SSAU_SSA18_POSITION                            0x2
#define _DMA2SSAU_SSA18_SIZE                                0x1
#define _DMA2SSAU_SSA18_LENGTH                              0x1
#define _DMA2SSAU_SSA18_MASK                                0x4
#define _DMA2SSAU_SSA19_POSN                                0x3
#define _DMA2SSAU_SSA19_POSITION                            0x3
#define _DMA2SSAU_SSA19_SIZE                                0x1
#define _DMA2SSAU_SSA19_LENGTH                              0x1
#define _DMA2SSAU_SSA19_MASK                                0x8
#define _DMA2SSAU_SSA20_POSN                                0x4
#define _DMA2SSAU_SSA20_POSITION                            0x4
#define _DMA2SSAU_SSA20_SIZE                                0x1
#define _DMA2SSAU_SSA20_LENGTH                              0x1
#define _DMA2SSAU_SSA20_MASK                                0x10
#define _DMA2SSAU_SSA21_POSN                                0x5
#define _DMA2SSAU_SSA21_POSITION                            0x5
#define _DMA2SSAU_SSA21_SIZE                                0x1
#define _DMA2SSAU_SSA21_LENGTH                              0x1
#define _DMA2SSAU_SSA21_MASK                                0x20
#define _DMA2SSAU_DMA2SSA_POSN                              0x0
#define _DMA2SSAU_DMA2SSA_POSITION                          0x0
#define _DMA2SSAU_DMA2SSA_SIZE                              0x6
#define _DMA2SSAU_DMA2SSA_LENGTH                            0x6
#define _DMA2SSAU_DMA2SSA_MASK                              0x3F
#define _DMA2SSAU_DMA2SSA16_POSN                            0x0
#define _DMA2SSAU_DMA2SSA16_POSITION                        0x0
#define _DMA2SSAU_DMA2SSA16_SIZE                            0x1
#define _DMA2SSAU_DMA2SSA16_LENGTH                          0x1
#define _DMA2SSAU_DMA2SSA16_MASK                            0x1
#define _DMA2SSAU_DMA2SSA17_POSN                            0x1
#define _DMA2SSAU_DMA2SSA17_POSITION                        0x1
#define _DMA2SSAU_DMA2SSA17_SIZE                            0x1
#define _DMA2SSAU_DMA2SSA17_LENGTH                          0x1
#define _DMA2SSAU_DMA2SSA17_MASK                            0x2
#define _DMA2SSAU_DMA2SSA18_POSN                            0x2
#define _DMA2SSAU_DMA2SSA18_POSITION                        0x2
#define _DMA2SSAU_DMA2SSA18_SIZE                            0x1
#define _DMA2SSAU_DMA2SSA18_LENGTH                          0x1
#define _DMA2SSAU_DMA2SSA18_MASK                            0x4
#define _DMA2SSAU_DMA2SSA19_POSN                            0x3
#define _DMA2SSAU_DMA2SSA19_POSITION                        0x3
#define _DMA2SSAU_DMA2SSA19_SIZE                            0x1
#define _DMA2SSAU_DMA2SSA19_LENGTH                          0x1
#define _DMA2SSAU_DMA2SSA19_MASK                            0x8
#define _DMA2SSAU_DMA2SSA20_POSN                            0x4
#define _DMA2SSAU_DMA2SSA20_POSITION                        0x4
#define _DMA2SSAU_DMA2SSA20_SIZE                            0x1
#define _DMA2SSAU_DMA2SSA20_LENGTH                          0x1
#define _DMA2SSAU_DMA2SSA20_MASK                            0x10
#define _DMA2SSAU_DMA2SSA21_POSN                            0x5
#define _DMA2SSAU_DMA2SSA21_POSITION                        0x5
#define _DMA2SSAU_DMA2SSA21_SIZE                            0x1
#define _DMA2SSAU_DMA2SSA21_LENGTH                          0x1
#define _DMA2SSAU_DMA2SSA21_MASK                            0x20

// Register: DMA2CON0
#define DMA2CON0 DMA2CON0
extern volatile unsigned char           DMA2CON0            __at(0x3BDC);
#ifndef _LIB_BUILD
asm("DMA2CON0 equ 03BDCh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned XIP                    :1;
        unsigned                        :1;
        unsigned AIRQEN                 :1;
        unsigned                        :2;
        unsigned DGO                    :1;
        unsigned SIRQEN                 :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned DMA2XIP                :1;
        unsigned                        :1;
        unsigned DMA2AIRQEN             :1;
        unsigned                        :2;
        unsigned DMA2DGO                :1;
        unsigned DMA2SIRQEN             :1;
        unsigned DMA2EN                 :1;
    };
} DMA2CON0bits_t;
extern volatile DMA2CON0bits_t DMA2CON0bits __at(0x3BDC);
// bitfield macros
#define _DMA2CON0_XIP_POSN                                  0x0
#define _DMA2CON0_XIP_POSITION                              0x0
#define _DMA2CON0_XIP_SIZE                                  0x1
#define _DMA2CON0_XIP_LENGTH                                0x1
#define _DMA2CON0_XIP_MASK                                  0x1
#define _DMA2CON0_AIRQEN_POSN                               0x2
#define _DMA2CON0_AIRQEN_POSITION                           0x2
#define _DMA2CON0_AIRQEN_SIZE                               0x1
#define _DMA2CON0_AIRQEN_LENGTH                             0x1
#define _DMA2CON0_AIRQEN_MASK                               0x4
#define _DMA2CON0_DGO_POSN                                  0x5
#define _DMA2CON0_DGO_POSITION                              0x5
#define _DMA2CON0_DGO_SIZE                                  0x1
#define _DMA2CON0_DGO_LENGTH                                0x1
#define _DMA2CON0_DGO_MASK                                  0x20
#define _DMA2CON0_SIRQEN_POSN                               0x6
#define _DMA2CON0_SIRQEN_POSITION                           0x6
#define _DMA2CON0_SIRQEN_SIZE                               0x1
#define _DMA2CON0_SIRQEN_LENGTH                             0x1
#define _DMA2CON0_SIRQEN_MASK                               0x40
#define _DMA2CON0_EN_POSN                                   0x7
#define _DMA2CON0_EN_POSITION                               0x7
#define _DMA2CON0_EN_SIZE                                   0x1
#define _DMA2CON0_EN_LENGTH                                 0x1
#define _DMA2CON0_EN_MASK                                   0x80
#define _DMA2CON0_DMA2XIP_POSN                              0x0
#define _DMA2CON0_DMA2XIP_POSITION                          0x0
#define _DMA2CON0_DMA2XIP_SIZE                              0x1
#define _DMA2CON0_DMA2XIP_LENGTH                            0x1
#define _DMA2CON0_DMA2XIP_MASK                              0x1
#define _DMA2CON0_DMA2AIRQEN_POSN                           0x2
#define _DMA2CON0_DMA2AIRQEN_POSITION                       0x2
#define _DMA2CON0_DMA2AIRQEN_SIZE                           0x1
#define _DMA2CON0_DMA2AIRQEN_LENGTH                         0x1
#define _DMA2CON0_DMA2AIRQEN_MASK                           0x4
#define _DMA2CON0_DMA2DGO_POSN                              0x5
#define _DMA2CON0_DMA2DGO_POSITION                          0x5
#define _DMA2CON0_DMA2DGO_SIZE                              0x1
#define _DMA2CON0_DMA2DGO_LENGTH                            0x1
#define _DMA2CON0_DMA2DGO_MASK                              0x20
#define _DMA2CON0_DMA2SIRQEN_POSN                           0x6
#define _DMA2CON0_DMA2SIRQEN_POSITION                       0x6
#define _DMA2CON0_DMA2SIRQEN_SIZE                           0x1
#define _DMA2CON0_DMA2SIRQEN_LENGTH                         0x1
#define _DMA2CON0_DMA2SIRQEN_MASK                           0x40
#define _DMA2CON0_DMA2EN_POSN                               0x7
#define _DMA2CON0_DMA2EN_POSITION                           0x7
#define _DMA2CON0_DMA2EN_SIZE                               0x1
#define _DMA2CON0_DMA2EN_LENGTH                             0x1
#define _DMA2CON0_DMA2EN_MASK                               0x80

// Register: DMA2CON1
#define DMA2CON1 DMA2CON1
extern volatile unsigned char           DMA2CON1            __at(0x3BDD);
#ifndef _LIB_BUILD
asm("DMA2CON1 equ 03BDDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSTP                   :1;
        unsigned SMODE                  :2;
        unsigned SMR                    :2;
        unsigned DSTP                   :1;
        unsigned DMODE                  :2;
    };
} DMA2CON1bits_t;
extern volatile DMA2CON1bits_t DMA2CON1bits __at(0x3BDD);
// bitfield macros
#define _DMA2CON1_SSTP_POSN                                 0x0
#define _DMA2CON1_SSTP_POSITION                             0x0
#define _DMA2CON1_SSTP_SIZE                                 0x1
#define _DMA2CON1_SSTP_LENGTH                               0x1
#define _DMA2CON1_SSTP_MASK                                 0x1
#define _DMA2CON1_SMODE_POSN                                0x1
#define _DMA2CON1_SMODE_POSITION                            0x1
#define _DMA2CON1_SMODE_SIZE                                0x2
#define _DMA2CON1_SMODE_LENGTH                              0x2
#define _DMA2CON1_SMODE_MASK                                0x6
#define _DMA2CON1_SMR_POSN                                  0x3
#define _DMA2CON1_SMR_POSITION                              0x3
#define _DMA2CON1_SMR_SIZE                                  0x2
#define _DMA2CON1_SMR_LENGTH                                0x2
#define _DMA2CON1_SMR_MASK                                  0x18
#define _DMA2CON1_DSTP_POSN                                 0x5
#define _DMA2CON1_DSTP_POSITION                             0x5
#define _DMA2CON1_DSTP_SIZE                                 0x1
#define _DMA2CON1_DSTP_LENGTH                               0x1
#define _DMA2CON1_DSTP_MASK                                 0x20
#define _DMA2CON1_DMODE_POSN                                0x6
#define _DMA2CON1_DMODE_POSITION                            0x6
#define _DMA2CON1_DMODE_SIZE                                0x2
#define _DMA2CON1_DMODE_LENGTH                              0x2
#define _DMA2CON1_DMODE_MASK                                0xC0

// Register: DMA2AIRQ
#define DMA2AIRQ DMA2AIRQ
extern volatile unsigned char           DMA2AIRQ            __at(0x3BDE);
#ifndef _LIB_BUILD
asm("DMA2AIRQ equ 03BDEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned AIRQ                   :8;
    };
    struct {
        unsigned DMA2AIRQ               :8;
    };
    struct {
        unsigned AIRQ0                  :1;
        unsigned AIRQ1                  :1;
        unsigned AIRQ2                  :1;
        unsigned AIRQ3                  :1;
        unsigned AIRQ4                  :1;
        unsigned AIRQ5                  :1;
        unsigned AIRQ6                  :1;
    };
    struct {
        unsigned DMA2AIRQ0              :1;
        unsigned DMA2AIRQ1              :1;
        unsigned DMA2AIRQ2              :1;
        unsigned DMA2AIRQ3              :1;
        unsigned DMA2AIRQ4              :1;
        unsigned DMA2AIRQ5              :1;
        unsigned DMA2AIRQ6              :1;
    };
} DMA2AIRQbits_t;
extern volatile DMA2AIRQbits_t DMA2AIRQbits __at(0x3BDE);
// bitfield macros
#define _DMA2AIRQ_AIRQ_POSN                                 0x0
#define _DMA2AIRQ_AIRQ_POSITION                             0x0
#define _DMA2AIRQ_AIRQ_SIZE                                 0x8
#define _DMA2AIRQ_AIRQ_LENGTH                               0x8
#define _DMA2AIRQ_AIRQ_MASK                                 0xFF
#define _DMA2AIRQ_DMA2AIRQ_POSN                             0x0
#define _DMA2AIRQ_DMA2AIRQ_POSITION                         0x0
#define _DMA2AIRQ_DMA2AIRQ_SIZE                             0x8
#define _DMA2AIRQ_DMA2AIRQ_LENGTH                           0x8
#define _DMA2AIRQ_DMA2AIRQ_MASK                             0xFF
#define _DMA2AIRQ_AIRQ0_POSN                                0x0
#define _DMA2AIRQ_AIRQ0_POSITION                            0x0
#define _DMA2AIRQ_AIRQ0_SIZE                                0x1
#define _DMA2AIRQ_AIRQ0_LENGTH                              0x1
#define _DMA2AIRQ_AIRQ0_MASK                                0x1
#define _DMA2AIRQ_AIRQ1_POSN                                0x1
#define _DMA2AIRQ_AIRQ1_POSITION                            0x1
#define _DMA2AIRQ_AIRQ1_SIZE                                0x1
#define _DMA2AIRQ_AIRQ1_LENGTH                              0x1
#define _DMA2AIRQ_AIRQ1_MASK                                0x2
#define _DMA2AIRQ_AIRQ2_POSN                                0x2
#define _DMA2AIRQ_AIRQ2_POSITION                            0x2
#define _DMA2AIRQ_AIRQ2_SIZE                                0x1
#define _DMA2AIRQ_AIRQ2_LENGTH                              0x1
#define _DMA2AIRQ_AIRQ2_MASK                                0x4
#define _DMA2AIRQ_AIRQ3_POSN                                0x3
#define _DMA2AIRQ_AIRQ3_POSITION                            0x3
#define _DMA2AIRQ_AIRQ3_SIZE                                0x1
#define _DMA2AIRQ_AIRQ3_LENGTH                              0x1
#define _DMA2AIRQ_AIRQ3_MASK                                0x8
#define _DMA2AIRQ_AIRQ4_POSN                                0x4
#define _DMA2AIRQ_AIRQ4_POSITION                            0x4
#define _DMA2AIRQ_AIRQ4_SIZE                                0x1
#define _DMA2AIRQ_AIRQ4_LENGTH                              0x1
#define _DMA2AIRQ_AIRQ4_MASK                                0x10
#define _DMA2AIRQ_AIRQ5_POSN                                0x5
#define _DMA2AIRQ_AIRQ5_POSITION                            0x5
#define _DMA2AIRQ_AIRQ5_SIZE                                0x1
#define _DMA2AIRQ_AIRQ5_LENGTH                              0x1
#define _DMA2AIRQ_AIRQ5_MASK                                0x20
#define _DMA2AIRQ_AIRQ6_POSN                                0x6
#define _DMA2AIRQ_AIRQ6_POSITION                            0x6
#define _DMA2AIRQ_AIRQ6_SIZE                                0x1
#define _DMA2AIRQ_AIRQ6_LENGTH                              0x1
#define _DMA2AIRQ_AIRQ6_MASK                                0x40
#define _DMA2AIRQ_DMA2AIRQ0_POSN                            0x0
#define _DMA2AIRQ_DMA2AIRQ0_POSITION                        0x0
#define _DMA2AIRQ_DMA2AIRQ0_SIZE                            0x1
#define _DMA2AIRQ_DMA2AIRQ0_LENGTH                          0x1
#define _DMA2AIRQ_DMA2AIRQ0_MASK                            0x1
#define _DMA2AIRQ_DMA2AIRQ1_POSN                            0x1
#define _DMA2AIRQ_DMA2AIRQ1_POSITION                        0x1
#define _DMA2AIRQ_DMA2AIRQ1_SIZE                            0x1
#define _DMA2AIRQ_DMA2AIRQ1_LENGTH                          0x1
#define _DMA2AIRQ_DMA2AIRQ1_MASK                            0x2
#define _DMA2AIRQ_DMA2AIRQ2_POSN                            0x2
#define _DMA2AIRQ_DMA2AIRQ2_POSITION                        0x2
#define _DMA2AIRQ_DMA2AIRQ2_SIZE                            0x1
#define _DMA2AIRQ_DMA2AIRQ2_LENGTH                          0x1
#define _DMA2AIRQ_DMA2AIRQ2_MASK                            0x4
#define _DMA2AIRQ_DMA2AIRQ3_POSN                            0x3
#define _DMA2AIRQ_DMA2AIRQ3_POSITION                        0x3
#define _DMA2AIRQ_DMA2AIRQ3_SIZE                            0x1
#define _DMA2AIRQ_DMA2AIRQ3_LENGTH                          0x1
#define _DMA2AIRQ_DMA2AIRQ3_MASK                            0x8
#define _DMA2AIRQ_DMA2AIRQ4_POSN                            0x4
#define _DMA2AIRQ_DMA2AIRQ4_POSITION                        0x4
#define _DMA2AIRQ_DMA2AIRQ4_SIZE                            0x1
#define _DMA2AIRQ_DMA2AIRQ4_LENGTH                          0x1
#define _DMA2AIRQ_DMA2AIRQ4_MASK                            0x10
#define _DMA2AIRQ_DMA2AIRQ5_POSN                            0x5
#define _DMA2AIRQ_DMA2AIRQ5_POSITION                        0x5
#define _DMA2AIRQ_DMA2AIRQ5_SIZE                            0x1
#define _DMA2AIRQ_DMA2AIRQ5_LENGTH                          0x1
#define _DMA2AIRQ_DMA2AIRQ5_MASK                            0x20
#define _DMA2AIRQ_DMA2AIRQ6_POSN                            0x6
#define _DMA2AIRQ_DMA2AIRQ6_POSITION                        0x6
#define _DMA2AIRQ_DMA2AIRQ6_SIZE                            0x1
#define _DMA2AIRQ_DMA2AIRQ6_LENGTH                          0x1
#define _DMA2AIRQ_DMA2AIRQ6_MASK                            0x40

// Register: DMA2SIRQ
#define DMA2SIRQ DMA2SIRQ
extern volatile unsigned char           DMA2SIRQ            __at(0x3BDF);
#ifndef _LIB_BUILD
asm("DMA2SIRQ equ 03BDFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SIRQ                   :8;
    };
    struct {
        unsigned DMA2SIRQ               :8;
    };
    struct {
        unsigned SIRQ0                  :1;
        unsigned SIRQ1                  :1;
        unsigned SIRQ2                  :1;
        unsigned SIRQ3                  :1;
        unsigned SIRQ4                  :1;
        unsigned SIRQ5                  :1;
        unsigned SIRQ6                  :1;
    };
    struct {
        unsigned DMA2SIRQ0              :1;
        unsigned DMA2SIRQ1              :1;
        unsigned DMA2SIRQ2              :1;
        unsigned DMA2SIRQ3              :1;
        unsigned DMA2SIRQ4              :1;
        unsigned DMA2SIRQ5              :1;
        unsigned DMA2SIRQ6              :1;
    };
} DMA2SIRQbits_t;
extern volatile DMA2SIRQbits_t DMA2SIRQbits __at(0x3BDF);
// bitfield macros
#define _DMA2SIRQ_SIRQ_POSN                                 0x0
#define _DMA2SIRQ_SIRQ_POSITION                             0x0
#define _DMA2SIRQ_SIRQ_SIZE                                 0x8
#define _DMA2SIRQ_SIRQ_LENGTH                               0x8
#define _DMA2SIRQ_SIRQ_MASK                                 0xFF
#define _DMA2SIRQ_DMA2SIRQ_POSN                             0x0
#define _DMA2SIRQ_DMA2SIRQ_POSITION                         0x0
#define _DMA2SIRQ_DMA2SIRQ_SIZE                             0x8
#define _DMA2SIRQ_DMA2SIRQ_LENGTH                           0x8
#define _DMA2SIRQ_DMA2SIRQ_MASK                             0xFF
#define _DMA2SIRQ_SIRQ0_POSN                                0x0
#define _DMA2SIRQ_SIRQ0_POSITION                            0x0
#define _DMA2SIRQ_SIRQ0_SIZE                                0x1
#define _DMA2SIRQ_SIRQ0_LENGTH                              0x1
#define _DMA2SIRQ_SIRQ0_MASK                                0x1
#define _DMA2SIRQ_SIRQ1_POSN                                0x1
#define _DMA2SIRQ_SIRQ1_POSITION                            0x1
#define _DMA2SIRQ_SIRQ1_SIZE                                0x1
#define _DMA2SIRQ_SIRQ1_LENGTH                              0x1
#define _DMA2SIRQ_SIRQ1_MASK                                0x2
#define _DMA2SIRQ_SIRQ2_POSN                                0x2
#define _DMA2SIRQ_SIRQ2_POSITION                            0x2
#define _DMA2SIRQ_SIRQ2_SIZE                                0x1
#define _DMA2SIRQ_SIRQ2_LENGTH                              0x1
#define _DMA2SIRQ_SIRQ2_MASK                                0x4
#define _DMA2SIRQ_SIRQ3_POSN                                0x3
#define _DMA2SIRQ_SIRQ3_POSITION                            0x3
#define _DMA2SIRQ_SIRQ3_SIZE                                0x1
#define _DMA2SIRQ_SIRQ3_LENGTH                              0x1
#define _DMA2SIRQ_SIRQ3_MASK                                0x8
#define _DMA2SIRQ_SIRQ4_POSN                                0x4
#define _DMA2SIRQ_SIRQ4_POSITION                            0x4
#define _DMA2SIRQ_SIRQ4_SIZE                                0x1
#define _DMA2SIRQ_SIRQ4_LENGTH                              0x1
#define _DMA2SIRQ_SIRQ4_MASK                                0x10
#define _DMA2SIRQ_SIRQ5_POSN                                0x5
#define _DMA2SIRQ_SIRQ5_POSITION                            0x5
#define _DMA2SIRQ_SIRQ5_SIZE                                0x1
#define _DMA2SIRQ_SIRQ5_LENGTH                              0x1
#define _DMA2SIRQ_SIRQ5_MASK                                0x20
#define _DMA2SIRQ_SIRQ6_POSN                                0x6
#define _DMA2SIRQ_SIRQ6_POSITION                            0x6
#define _DMA2SIRQ_SIRQ6_SIZE                                0x1
#define _DMA2SIRQ_SIRQ6_LENGTH                              0x1
#define _DMA2SIRQ_SIRQ6_MASK                                0x40
#define _DMA2SIRQ_DMA2SIRQ0_POSN                            0x0
#define _DMA2SIRQ_DMA2SIRQ0_POSITION                        0x0
#define _DMA2SIRQ_DMA2SIRQ0_SIZE                            0x1
#define _DMA2SIRQ_DMA2SIRQ0_LENGTH                          0x1
#define _DMA2SIRQ_DMA2SIRQ0_MASK                            0x1
#define _DMA2SIRQ_DMA2SIRQ1_POSN                            0x1
#define _DMA2SIRQ_DMA2SIRQ1_POSITION                        0x1
#define _DMA2SIRQ_DMA2SIRQ1_SIZE                            0x1
#define _DMA2SIRQ_DMA2SIRQ1_LENGTH                          0x1
#define _DMA2SIRQ_DMA2SIRQ1_MASK                            0x2
#define _DMA2SIRQ_DMA2SIRQ2_POSN                            0x2
#define _DMA2SIRQ_DMA2SIRQ2_POSITION                        0x2
#define _DMA2SIRQ_DMA2SIRQ2_SIZE                            0x1
#define _DMA2SIRQ_DMA2SIRQ2_LENGTH                          0x1
#define _DMA2SIRQ_DMA2SIRQ2_MASK                            0x4
#define _DMA2SIRQ_DMA2SIRQ3_POSN                            0x3
#define _DMA2SIRQ_DMA2SIRQ3_POSITION                        0x3
#define _DMA2SIRQ_DMA2SIRQ3_SIZE                            0x1
#define _DMA2SIRQ_DMA2SIRQ3_LENGTH                          0x1
#define _DMA2SIRQ_DMA2SIRQ3_MASK                            0x8
#define _DMA2SIRQ_DMA2SIRQ4_POSN                            0x4
#define _DMA2SIRQ_DMA2SIRQ4_POSITION                        0x4
#define _DMA2SIRQ_DMA2SIRQ4_SIZE                            0x1
#define _DMA2SIRQ_DMA2SIRQ4_LENGTH                          0x1
#define _DMA2SIRQ_DMA2SIRQ4_MASK                            0x10
#define _DMA2SIRQ_DMA2SIRQ5_POSN                            0x5
#define _DMA2SIRQ_DMA2SIRQ5_POSITION                        0x5
#define _DMA2SIRQ_DMA2SIRQ5_SIZE                            0x1
#define _DMA2SIRQ_DMA2SIRQ5_LENGTH                          0x1
#define _DMA2SIRQ_DMA2SIRQ5_MASK                            0x20
#define _DMA2SIRQ_DMA2SIRQ6_POSN                            0x6
#define _DMA2SIRQ_DMA2SIRQ6_POSITION                        0x6
#define _DMA2SIRQ_DMA2SIRQ6_SIZE                            0x1
#define _DMA2SIRQ_DMA2SIRQ6_LENGTH                          0x1
#define _DMA2SIRQ_DMA2SIRQ6_MASK                            0x40

// Register: DMA1BUF
#define DMA1BUF DMA1BUF
extern volatile unsigned char           DMA1BUF             __at(0x3BE9);
#ifndef _LIB_BUILD
asm("DMA1BUF equ 03BE9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BUF                    :8;
    };
    struct {
        unsigned BUF0                   :1;
        unsigned BUF1                   :1;
        unsigned BUF2                   :1;
        unsigned BUF3                   :1;
        unsigned BUF4                   :1;
        unsigned BUF5                   :1;
        unsigned BUF6                   :1;
        unsigned BUF7                   :1;
    };
    struct {
        unsigned DMA1BUF                :8;
    };
    struct {
        unsigned DMA1BUF0               :1;
        unsigned DMA1BUF1               :1;
        unsigned DMA1BUF2               :1;
        unsigned DMA1BUF3               :1;
        unsigned DMA1BUF4               :1;
        unsigned DMA1BUF5               :1;
        unsigned DMA1BUF6               :1;
        unsigned DMA1BUF7               :1;
    };
} DMA1BUFbits_t;
extern volatile DMA1BUFbits_t DMA1BUFbits __at(0x3BE9);
// bitfield macros
#define _DMA1BUF_BUF_POSN                                   0x0
#define _DMA1BUF_BUF_POSITION                               0x0
#define _DMA1BUF_BUF_SIZE                                   0x8
#define _DMA1BUF_BUF_LENGTH                                 0x8
#define _DMA1BUF_BUF_MASK                                   0xFF
#define _DMA1BUF_BUF0_POSN                                  0x0
#define _DMA1BUF_BUF0_POSITION                              0x0
#define _DMA1BUF_BUF0_SIZE                                  0x1
#define _DMA1BUF_BUF0_LENGTH                                0x1
#define _DMA1BUF_BUF0_MASK                                  0x1
#define _DMA1BUF_BUF1_POSN                                  0x1
#define _DMA1BUF_BUF1_POSITION                              0x1
#define _DMA1BUF_BUF1_SIZE                                  0x1
#define _DMA1BUF_BUF1_LENGTH                                0x1
#define _DMA1BUF_BUF1_MASK                                  0x2
#define _DMA1BUF_BUF2_POSN                                  0x2
#define _DMA1BUF_BUF2_POSITION                              0x2
#define _DMA1BUF_BUF2_SIZE                                  0x1
#define _DMA1BUF_BUF2_LENGTH                                0x1
#define _DMA1BUF_BUF2_MASK                                  0x4
#define _DMA1BUF_BUF3_POSN                                  0x3
#define _DMA1BUF_BUF3_POSITION                              0x3
#define _DMA1BUF_BUF3_SIZE                                  0x1
#define _DMA1BUF_BUF3_LENGTH                                0x1
#define _DMA1BUF_BUF3_MASK                                  0x8
#define _DMA1BUF_BUF4_POSN                                  0x4
#define _DMA1BUF_BUF4_POSITION                              0x4
#define _DMA1BUF_BUF4_SIZE                                  0x1
#define _DMA1BUF_BUF4_LENGTH                                0x1
#define _DMA1BUF_BUF4_MASK                                  0x10
#define _DMA1BUF_BUF5_POSN                                  0x5
#define _DMA1BUF_BUF5_POSITION                              0x5
#define _DMA1BUF_BUF5_SIZE                                  0x1
#define _DMA1BUF_BUF5_LENGTH                                0x1
#define _DMA1BUF_BUF5_MASK                                  0x20
#define _DMA1BUF_BUF6_POSN                                  0x6
#define _DMA1BUF_BUF6_POSITION                              0x6
#define _DMA1BUF_BUF6_SIZE                                  0x1
#define _DMA1BUF_BUF6_LENGTH                                0x1
#define _DMA1BUF_BUF6_MASK                                  0x40
#define _DMA1BUF_BUF7_POSN                                  0x7
#define _DMA1BUF_BUF7_POSITION                              0x7
#define _DMA1BUF_BUF7_SIZE                                  0x1
#define _DMA1BUF_BUF7_LENGTH                                0x1
#define _DMA1BUF_BUF7_MASK                                  0x80
#define _DMA1BUF_DMA1BUF_POSN                               0x0
#define _DMA1BUF_DMA1BUF_POSITION                           0x0
#define _DMA1BUF_DMA1BUF_SIZE                               0x8
#define _DMA1BUF_DMA1BUF_LENGTH                             0x8
#define _DMA1BUF_DMA1BUF_MASK                               0xFF
#define _DMA1BUF_DMA1BUF0_POSN                              0x0
#define _DMA1BUF_DMA1BUF0_POSITION                          0x0
#define _DMA1BUF_DMA1BUF0_SIZE                              0x1
#define _DMA1BUF_DMA1BUF0_LENGTH                            0x1
#define _DMA1BUF_DMA1BUF0_MASK                              0x1
#define _DMA1BUF_DMA1BUF1_POSN                              0x1
#define _DMA1BUF_DMA1BUF1_POSITION                          0x1
#define _DMA1BUF_DMA1BUF1_SIZE                              0x1
#define _DMA1BUF_DMA1BUF1_LENGTH                            0x1
#define _DMA1BUF_DMA1BUF1_MASK                              0x2
#define _DMA1BUF_DMA1BUF2_POSN                              0x2
#define _DMA1BUF_DMA1BUF2_POSITION                          0x2
#define _DMA1BUF_DMA1BUF2_SIZE                              0x1
#define _DMA1BUF_DMA1BUF2_LENGTH                            0x1
#define _DMA1BUF_DMA1BUF2_MASK                              0x4
#define _DMA1BUF_DMA1BUF3_POSN                              0x3
#define _DMA1BUF_DMA1BUF3_POSITION                          0x3
#define _DMA1BUF_DMA1BUF3_SIZE                              0x1
#define _DMA1BUF_DMA1BUF3_LENGTH                            0x1
#define _DMA1BUF_DMA1BUF3_MASK                              0x8
#define _DMA1BUF_DMA1BUF4_POSN                              0x4
#define _DMA1BUF_DMA1BUF4_POSITION                          0x4
#define _DMA1BUF_DMA1BUF4_SIZE                              0x1
#define _DMA1BUF_DMA1BUF4_LENGTH                            0x1
#define _DMA1BUF_DMA1BUF4_MASK                              0x10
#define _DMA1BUF_DMA1BUF5_POSN                              0x5
#define _DMA1BUF_DMA1BUF5_POSITION                          0x5
#define _DMA1BUF_DMA1BUF5_SIZE                              0x1
#define _DMA1BUF_DMA1BUF5_LENGTH                            0x1
#define _DMA1BUF_DMA1BUF5_MASK                              0x20
#define _DMA1BUF_DMA1BUF6_POSN                              0x6
#define _DMA1BUF_DMA1BUF6_POSITION                          0x6
#define _DMA1BUF_DMA1BUF6_SIZE                              0x1
#define _DMA1BUF_DMA1BUF6_LENGTH                            0x1
#define _DMA1BUF_DMA1BUF6_MASK                              0x40
#define _DMA1BUF_DMA1BUF7_POSN                              0x7
#define _DMA1BUF_DMA1BUF7_POSITION                          0x7
#define _DMA1BUF_DMA1BUF7_SIZE                              0x1
#define _DMA1BUF_DMA1BUF7_LENGTH                            0x1
#define _DMA1BUF_DMA1BUF7_MASK                              0x80

// Register: DMA1DCNT
#define DMA1DCNT DMA1DCNT
extern volatile unsigned short          DMA1DCNT            __at(0x3BEA);
#ifndef _LIB_BUILD
asm("DMA1DCNT equ 03BEAh");
#endif

// Register: DMA1DCNTL
#define DMA1DCNTL DMA1DCNTL
extern volatile unsigned char           DMA1DCNTL           __at(0x3BEA);
#ifndef _LIB_BUILD
asm("DMA1DCNTL equ 03BEAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DCNT                   :8;
    };
    struct {
        unsigned DCNT0                  :1;
        unsigned DCNT1                  :1;
        unsigned DCNT2                  :1;
        unsigned DCNT3                  :1;
        unsigned DCNT4                  :1;
        unsigned DCNT5                  :1;
        unsigned DCNT6                  :1;
        unsigned DCNT7                  :1;
    };
    struct {
        unsigned DMA1DCNT               :8;
    };
    struct {
        unsigned DMA1DCNT0              :1;
        unsigned DMA1DCNT1              :1;
        unsigned DMA1DCNT2              :1;
        unsigned DMA1DCNT3              :1;
        unsigned DMA1DCNT4              :1;
        unsigned DMA1DCNT5              :1;
        unsigned DMA1DCNT6              :1;
        unsigned DMA1DCNT7              :1;
    };
} DMA1DCNTLbits_t;
extern volatile DMA1DCNTLbits_t DMA1DCNTLbits __at(0x3BEA);
// bitfield macros
#define _DMA1DCNTL_DCNT_POSN                                0x0
#define _DMA1DCNTL_DCNT_POSITION                            0x0
#define _DMA1DCNTL_DCNT_SIZE                                0x8
#define _DMA1DCNTL_DCNT_LENGTH                              0x8
#define _DMA1DCNTL_DCNT_MASK                                0xFF
#define _DMA1DCNTL_DCNT0_POSN                               0x0
#define _DMA1DCNTL_DCNT0_POSITION                           0x0
#define _DMA1DCNTL_DCNT0_SIZE                               0x1
#define _DMA1DCNTL_DCNT0_LENGTH                             0x1
#define _DMA1DCNTL_DCNT0_MASK                               0x1
#define _DMA1DCNTL_DCNT1_POSN                               0x1
#define _DMA1DCNTL_DCNT1_POSITION                           0x1
#define _DMA1DCNTL_DCNT1_SIZE                               0x1
#define _DMA1DCNTL_DCNT1_LENGTH                             0x1
#define _DMA1DCNTL_DCNT1_MASK                               0x2
#define _DMA1DCNTL_DCNT2_POSN                               0x2
#define _DMA1DCNTL_DCNT2_POSITION                           0x2
#define _DMA1DCNTL_DCNT2_SIZE                               0x1
#define _DMA1DCNTL_DCNT2_LENGTH                             0x1
#define _DMA1DCNTL_DCNT2_MASK                               0x4
#define _DMA1DCNTL_DCNT3_POSN                               0x3
#define _DMA1DCNTL_DCNT3_POSITION                           0x3
#define _DMA1DCNTL_DCNT3_SIZE                               0x1
#define _DMA1DCNTL_DCNT3_LENGTH                             0x1
#define _DMA1DCNTL_DCNT3_MASK                               0x8
#define _DMA1DCNTL_DCNT4_POSN                               0x4
#define _DMA1DCNTL_DCNT4_POSITION                           0x4
#define _DMA1DCNTL_DCNT4_SIZE                               0x1
#define _DMA1DCNTL_DCNT4_LENGTH                             0x1
#define _DMA1DCNTL_DCNT4_MASK                               0x10
#define _DMA1DCNTL_DCNT5_POSN                               0x5
#define _DMA1DCNTL_DCNT5_POSITION                           0x5
#define _DMA1DCNTL_DCNT5_SIZE                               0x1
#define _DMA1DCNTL_DCNT5_LENGTH                             0x1
#define _DMA1DCNTL_DCNT5_MASK                               0x20
#define _DMA1DCNTL_DCNT6_POSN                               0x6
#define _DMA1DCNTL_DCNT6_POSITION                           0x6
#define _DMA1DCNTL_DCNT6_SIZE                               0x1
#define _DMA1DCNTL_DCNT6_LENGTH                             0x1
#define _DMA1DCNTL_DCNT6_MASK                               0x40
#define _DMA1DCNTL_DCNT7_POSN                               0x7
#define _DMA1DCNTL_DCNT7_POSITION                           0x7
#define _DMA1DCNTL_DCNT7_SIZE                               0x1
#define _DMA1DCNTL_DCNT7_LENGTH                             0x1
#define _DMA1DCNTL_DCNT7_MASK                               0x80
#define _DMA1DCNTL_DMA1DCNT_POSN                            0x0
#define _DMA1DCNTL_DMA1DCNT_POSITION                        0x0
#define _DMA1DCNTL_DMA1DCNT_SIZE                            0x8
#define _DMA1DCNTL_DMA1DCNT_LENGTH                          0x8
#define _DMA1DCNTL_DMA1DCNT_MASK                            0xFF
#define _DMA1DCNTL_DMA1DCNT0_POSN                           0x0
#define _DMA1DCNTL_DMA1DCNT0_POSITION                       0x0
#define _DMA1DCNTL_DMA1DCNT0_SIZE                           0x1
#define _DMA1DCNTL_DMA1DCNT0_LENGTH                         0x1
#define _DMA1DCNTL_DMA1DCNT0_MASK                           0x1
#define _DMA1DCNTL_DMA1DCNT1_POSN                           0x1
#define _DMA1DCNTL_DMA1DCNT1_POSITION                       0x1
#define _DMA1DCNTL_DMA1DCNT1_SIZE                           0x1
#define _DMA1DCNTL_DMA1DCNT1_LENGTH                         0x1
#define _DMA1DCNTL_DMA1DCNT1_MASK                           0x2
#define _DMA1DCNTL_DMA1DCNT2_POSN                           0x2
#define _DMA1DCNTL_DMA1DCNT2_POSITION                       0x2
#define _DMA1DCNTL_DMA1DCNT2_SIZE                           0x1
#define _DMA1DCNTL_DMA1DCNT2_LENGTH                         0x1
#define _DMA1DCNTL_DMA1DCNT2_MASK                           0x4
#define _DMA1DCNTL_DMA1DCNT3_POSN                           0x3
#define _DMA1DCNTL_DMA1DCNT3_POSITION                       0x3
#define _DMA1DCNTL_DMA1DCNT3_SIZE                           0x1
#define _DMA1DCNTL_DMA1DCNT3_LENGTH                         0x1
#define _DMA1DCNTL_DMA1DCNT3_MASK                           0x8
#define _DMA1DCNTL_DMA1DCNT4_POSN                           0x4
#define _DMA1DCNTL_DMA1DCNT4_POSITION                       0x4
#define _DMA1DCNTL_DMA1DCNT4_SIZE                           0x1
#define _DMA1DCNTL_DMA1DCNT4_LENGTH                         0x1
#define _DMA1DCNTL_DMA1DCNT4_MASK                           0x10
#define _DMA1DCNTL_DMA1DCNT5_POSN                           0x5
#define _DMA1DCNTL_DMA1DCNT5_POSITION                       0x5
#define _DMA1DCNTL_DMA1DCNT5_SIZE                           0x1
#define _DMA1DCNTL_DMA1DCNT5_LENGTH                         0x1
#define _DMA1DCNTL_DMA1DCNT5_MASK                           0x20
#define _DMA1DCNTL_DMA1DCNT6_POSN                           0x6
#define _DMA1DCNTL_DMA1DCNT6_POSITION                       0x6
#define _DMA1DCNTL_DMA1DCNT6_SIZE                           0x1
#define _DMA1DCNTL_DMA1DCNT6_LENGTH                         0x1
#define _DMA1DCNTL_DMA1DCNT6_MASK                           0x40
#define _DMA1DCNTL_DMA1DCNT7_POSN                           0x7
#define _DMA1DCNTL_DMA1DCNT7_POSITION                       0x7
#define _DMA1DCNTL_DMA1DCNT7_SIZE                           0x1
#define _DMA1DCNTL_DMA1DCNT7_LENGTH                         0x1
#define _DMA1DCNTL_DMA1DCNT7_MASK                           0x80

// Register: DMA1DCNTH
#define DMA1DCNTH DMA1DCNTH
extern volatile unsigned char           DMA1DCNTH           __at(0x3BEB);
#ifndef _LIB_BUILD
asm("DMA1DCNTH equ 03BEBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DCNT                   :4;
    };
    struct {
        unsigned DCNT8                  :1;
        unsigned DCNT9                  :1;
        unsigned DCNT10                 :1;
        unsigned DCNT11                 :1;
    };
    struct {
        unsigned DMA1SCNT               :4;
    };
    struct {
        unsigned DMA1DCNT8              :1;
        unsigned DMA1DCNT9              :1;
        unsigned DMA1DCNT10             :1;
        unsigned DMA1DCNT11             :1;
    };
} DMA1DCNTHbits_t;
extern volatile DMA1DCNTHbits_t DMA1DCNTHbits __at(0x3BEB);
// bitfield macros
#define _DMA1DCNTH_DCNT_POSN                                0x0
#define _DMA1DCNTH_DCNT_POSITION                            0x0
#define _DMA1DCNTH_DCNT_SIZE                                0x4
#define _DMA1DCNTH_DCNT_LENGTH                              0x4
#define _DMA1DCNTH_DCNT_MASK                                0xF
#define _DMA1DCNTH_DCNT8_POSN                               0x0
#define _DMA1DCNTH_DCNT8_POSITION                           0x0
#define _DMA1DCNTH_DCNT8_SIZE                               0x1
#define _DMA1DCNTH_DCNT8_LENGTH                             0x1
#define _DMA1DCNTH_DCNT8_MASK                               0x1
#define _DMA1DCNTH_DCNT9_POSN                               0x1
#define _DMA1DCNTH_DCNT9_POSITION                           0x1
#define _DMA1DCNTH_DCNT9_SIZE                               0x1
#define _DMA1DCNTH_DCNT9_LENGTH                             0x1
#define _DMA1DCNTH_DCNT9_MASK                               0x2
#define _DMA1DCNTH_DCNT10_POSN                              0x2
#define _DMA1DCNTH_DCNT10_POSITION                          0x2
#define _DMA1DCNTH_DCNT10_SIZE                              0x1
#define _DMA1DCNTH_DCNT10_LENGTH                            0x1
#define _DMA1DCNTH_DCNT10_MASK                              0x4
#define _DMA1DCNTH_DCNT11_POSN                              0x3
#define _DMA1DCNTH_DCNT11_POSITION                          0x3
#define _DMA1DCNTH_DCNT11_SIZE                              0x1
#define _DMA1DCNTH_DCNT11_LENGTH                            0x1
#define _DMA1DCNTH_DCNT11_MASK                              0x8
#define _DMA1DCNTH_DMA1SCNT_POSN                            0x0
#define _DMA1DCNTH_DMA1SCNT_POSITION                        0x0
#define _DMA1DCNTH_DMA1SCNT_SIZE                            0x4
#define _DMA1DCNTH_DMA1SCNT_LENGTH                          0x4
#define _DMA1DCNTH_DMA1SCNT_MASK                            0xF
#define _DMA1DCNTH_DMA1DCNT8_POSN                           0x0
#define _DMA1DCNTH_DMA1DCNT8_POSITION                       0x0
#define _DMA1DCNTH_DMA1DCNT8_SIZE                           0x1
#define _DMA1DCNTH_DMA1DCNT8_LENGTH                         0x1
#define _DMA1DCNTH_DMA1DCNT8_MASK                           0x1
#define _DMA1DCNTH_DMA1DCNT9_POSN                           0x1
#define _DMA1DCNTH_DMA1DCNT9_POSITION                       0x1
#define _DMA1DCNTH_DMA1DCNT9_SIZE                           0x1
#define _DMA1DCNTH_DMA1DCNT9_LENGTH                         0x1
#define _DMA1DCNTH_DMA1DCNT9_MASK                           0x2
#define _DMA1DCNTH_DMA1DCNT10_POSN                          0x2
#define _DMA1DCNTH_DMA1DCNT10_POSITION                      0x2
#define _DMA1DCNTH_DMA1DCNT10_SIZE                          0x1
#define _DMA1DCNTH_DMA1DCNT10_LENGTH                        0x1
#define _DMA1DCNTH_DMA1DCNT10_MASK                          0x4
#define _DMA1DCNTH_DMA1DCNT11_POSN                          0x3
#define _DMA1DCNTH_DMA1DCNT11_POSITION                      0x3
#define _DMA1DCNTH_DMA1DCNT11_SIZE                          0x1
#define _DMA1DCNTH_DMA1DCNT11_LENGTH                        0x1
#define _DMA1DCNTH_DMA1DCNT11_MASK                          0x8

// Register: DMA1DPTR
#define DMA1DPTR DMA1DPTR
extern volatile unsigned short          DMA1DPTR            __at(0x3BEC);
#ifndef _LIB_BUILD
asm("DMA1DPTR equ 03BECh");
#endif

// Register: DMA1DPTRL
#define DMA1DPTRL DMA1DPTRL
extern volatile unsigned char           DMA1DPTRL           __at(0x3BEC);
#ifndef _LIB_BUILD
asm("DMA1DPTRL equ 03BECh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DPTR                   :8;
    };
    struct {
        unsigned DPTR0                  :1;
        unsigned DPTR1                  :1;
        unsigned DPTR2                  :1;
        unsigned DPTR3                  :1;
        unsigned DPTR4                  :1;
        unsigned DPTR5                  :1;
        unsigned DPTR6                  :1;
        unsigned DPTR7                  :1;
    };
    struct {
        unsigned DMA1DPTR               :8;
    };
    struct {
        unsigned DMA1DPTR0              :1;
        unsigned DMA1DPTR1              :1;
        unsigned DMA1DPTR2              :1;
        unsigned DMA1DPTR3              :1;
        unsigned DMA1DPTR4              :1;
        unsigned DMA1DPTR5              :1;
        unsigned DMA1DPTR6              :1;
        unsigned DMA1DPTR7              :1;
    };
} DMA1DPTRLbits_t;
extern volatile DMA1DPTRLbits_t DMA1DPTRLbits __at(0x3BEC);
// bitfield macros
#define _DMA1DPTRL_DPTR_POSN                                0x0
#define _DMA1DPTRL_DPTR_POSITION                            0x0
#define _DMA1DPTRL_DPTR_SIZE                                0x8
#define _DMA1DPTRL_DPTR_LENGTH                              0x8
#define _DMA1DPTRL_DPTR_MASK                                0xFF
#define _DMA1DPTRL_DPTR0_POSN                               0x0
#define _DMA1DPTRL_DPTR0_POSITION                           0x0
#define _DMA1DPTRL_DPTR0_SIZE                               0x1
#define _DMA1DPTRL_DPTR0_LENGTH                             0x1
#define _DMA1DPTRL_DPTR0_MASK                               0x1
#define _DMA1DPTRL_DPTR1_POSN                               0x1
#define _DMA1DPTRL_DPTR1_POSITION                           0x1
#define _DMA1DPTRL_DPTR1_SIZE                               0x1
#define _DMA1DPTRL_DPTR1_LENGTH                             0x1
#define _DMA1DPTRL_DPTR1_MASK                               0x2
#define _DMA1DPTRL_DPTR2_POSN                               0x2
#define _DMA1DPTRL_DPTR2_POSITION                           0x2
#define _DMA1DPTRL_DPTR2_SIZE                               0x1
#define _DMA1DPTRL_DPTR2_LENGTH                             0x1
#define _DMA1DPTRL_DPTR2_MASK                               0x4
#define _DMA1DPTRL_DPTR3_POSN                               0x3
#define _DMA1DPTRL_DPTR3_POSITION                           0x3
#define _DMA1DPTRL_DPTR3_SIZE                               0x1
#define _DMA1DPTRL_DPTR3_LENGTH                             0x1
#define _DMA1DPTRL_DPTR3_MASK                               0x8
#define _DMA1DPTRL_DPTR4_POSN                               0x4
#define _DMA1DPTRL_DPTR4_POSITION                           0x4
#define _DMA1DPTRL_DPTR4_SIZE                               0x1
#define _DMA1DPTRL_DPTR4_LENGTH                             0x1
#define _DMA1DPTRL_DPTR4_MASK                               0x10
#define _DMA1DPTRL_DPTR5_POSN                               0x5
#define _DMA1DPTRL_DPTR5_POSITION                           0x5
#define _DMA1DPTRL_DPTR5_SIZE                               0x1
#define _DMA1DPTRL_DPTR5_LENGTH                             0x1
#define _DMA1DPTRL_DPTR5_MASK                               0x20
#define _DMA1DPTRL_DPTR6_POSN                               0x6
#define _DMA1DPTRL_DPTR6_POSITION                           0x6
#define _DMA1DPTRL_DPTR6_SIZE                               0x1
#define _DMA1DPTRL_DPTR6_LENGTH                             0x1
#define _DMA1DPTRL_DPTR6_MASK                               0x40
#define _DMA1DPTRL_DPTR7_POSN                               0x7
#define _DMA1DPTRL_DPTR7_POSITION                           0x7
#define _DMA1DPTRL_DPTR7_SIZE                               0x1
#define _DMA1DPTRL_DPTR7_LENGTH                             0x1
#define _DMA1DPTRL_DPTR7_MASK                               0x80
#define _DMA1DPTRL_DMA1DPTR_POSN                            0x0
#define _DMA1DPTRL_DMA1DPTR_POSITION                        0x0
#define _DMA1DPTRL_DMA1DPTR_SIZE                            0x8
#define _DMA1DPTRL_DMA1DPTR_LENGTH                          0x8
#define _DMA1DPTRL_DMA1DPTR_MASK                            0xFF
#define _DMA1DPTRL_DMA1DPTR0_POSN                           0x0
#define _DMA1DPTRL_DMA1DPTR0_POSITION                       0x0
#define _DMA1DPTRL_DMA1DPTR0_SIZE                           0x1
#define _DMA1DPTRL_DMA1DPTR0_LENGTH                         0x1
#define _DMA1DPTRL_DMA1DPTR0_MASK                           0x1
#define _DMA1DPTRL_DMA1DPTR1_POSN                           0x1
#define _DMA1DPTRL_DMA1DPTR1_POSITION                       0x1
#define _DMA1DPTRL_DMA1DPTR1_SIZE                           0x1
#define _DMA1DPTRL_DMA1DPTR1_LENGTH                         0x1
#define _DMA1DPTRL_DMA1DPTR1_MASK                           0x2
#define _DMA1DPTRL_DMA1DPTR2_POSN                           0x2
#define _DMA1DPTRL_DMA1DPTR2_POSITION                       0x2
#define _DMA1DPTRL_DMA1DPTR2_SIZE                           0x1
#define _DMA1DPTRL_DMA1DPTR2_LENGTH                         0x1
#define _DMA1DPTRL_DMA1DPTR2_MASK                           0x4
#define _DMA1DPTRL_DMA1DPTR3_POSN                           0x3
#define _DMA1DPTRL_DMA1DPTR3_POSITION                       0x3
#define _DMA1DPTRL_DMA1DPTR3_SIZE                           0x1
#define _DMA1DPTRL_DMA1DPTR3_LENGTH                         0x1
#define _DMA1DPTRL_DMA1DPTR3_MASK                           0x8
#define _DMA1DPTRL_DMA1DPTR4_POSN                           0x4
#define _DMA1DPTRL_DMA1DPTR4_POSITION                       0x4
#define _DMA1DPTRL_DMA1DPTR4_SIZE                           0x1
#define _DMA1DPTRL_DMA1DPTR4_LENGTH                         0x1
#define _DMA1DPTRL_DMA1DPTR4_MASK                           0x10
#define _DMA1DPTRL_DMA1DPTR5_POSN                           0x5
#define _DMA1DPTRL_DMA1DPTR5_POSITION                       0x5
#define _DMA1DPTRL_DMA1DPTR5_SIZE                           0x1
#define _DMA1DPTRL_DMA1DPTR5_LENGTH                         0x1
#define _DMA1DPTRL_DMA1DPTR5_MASK                           0x20
#define _DMA1DPTRL_DMA1DPTR6_POSN                           0x6
#define _DMA1DPTRL_DMA1DPTR6_POSITION                       0x6
#define _DMA1DPTRL_DMA1DPTR6_SIZE                           0x1
#define _DMA1DPTRL_DMA1DPTR6_LENGTH                         0x1
#define _DMA1DPTRL_DMA1DPTR6_MASK                           0x40
#define _DMA1DPTRL_DMA1DPTR7_POSN                           0x7
#define _DMA1DPTRL_DMA1DPTR7_POSITION                       0x7
#define _DMA1DPTRL_DMA1DPTR7_SIZE                           0x1
#define _DMA1DPTRL_DMA1DPTR7_LENGTH                         0x1
#define _DMA1DPTRL_DMA1DPTR7_MASK                           0x80

// Register: DMA1DPTRH
#define DMA1DPTRH DMA1DPTRH
extern volatile unsigned char           DMA1DPTRH           __at(0x3BED);
#ifndef _LIB_BUILD
asm("DMA1DPTRH equ 03BEDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DPTR                   :8;
    };
    struct {
        unsigned DPTR8                  :1;
        unsigned DPTR9                  :1;
        unsigned DPTR10                 :1;
        unsigned DPTR11                 :1;
        unsigned DPTR12                 :1;
        unsigned DPTR13                 :1;
        unsigned DPTR14                 :1;
        unsigned DPTR15                 :1;
    };
    struct {
        unsigned DMA1DPTR               :8;
    };
    struct {
        unsigned DMA1DPTR8              :1;
        unsigned DMA1DPTR9              :1;
        unsigned DMA1DPTR10             :1;
        unsigned DMA1DPTR11             :1;
        unsigned DMA1DPTR12             :1;
        unsigned DMA1DPTR13             :1;
        unsigned DMA1DPTR14             :1;
        unsigned DMA1DPTR15             :1;
    };
} DMA1DPTRHbits_t;
extern volatile DMA1DPTRHbits_t DMA1DPTRHbits __at(0x3BED);
// bitfield macros
#define _DMA1DPTRH_DPTR_POSN                                0x0
#define _DMA1DPTRH_DPTR_POSITION                            0x0
#define _DMA1DPTRH_DPTR_SIZE                                0x8
#define _DMA1DPTRH_DPTR_LENGTH                              0x8
#define _DMA1DPTRH_DPTR_MASK                                0xFF
#define _DMA1DPTRH_DPTR8_POSN                               0x0
#define _DMA1DPTRH_DPTR8_POSITION                           0x0
#define _DMA1DPTRH_DPTR8_SIZE                               0x1
#define _DMA1DPTRH_DPTR8_LENGTH                             0x1
#define _DMA1DPTRH_DPTR8_MASK                               0x1
#define _DMA1DPTRH_DPTR9_POSN                               0x1
#define _DMA1DPTRH_DPTR9_POSITION                           0x1
#define _DMA1DPTRH_DPTR9_SIZE                               0x1
#define _DMA1DPTRH_DPTR9_LENGTH                             0x1
#define _DMA1DPTRH_DPTR9_MASK                               0x2
#define _DMA1DPTRH_DPTR10_POSN                              0x2
#define _DMA1DPTRH_DPTR10_POSITION                          0x2
#define _DMA1DPTRH_DPTR10_SIZE                              0x1
#define _DMA1DPTRH_DPTR10_LENGTH                            0x1
#define _DMA1DPTRH_DPTR10_MASK                              0x4
#define _DMA1DPTRH_DPTR11_POSN                              0x3
#define _DMA1DPTRH_DPTR11_POSITION                          0x3
#define _DMA1DPTRH_DPTR11_SIZE                              0x1
#define _DMA1DPTRH_DPTR11_LENGTH                            0x1
#define _DMA1DPTRH_DPTR11_MASK                              0x8
#define _DMA1DPTRH_DPTR12_POSN                              0x4
#define _DMA1DPTRH_DPTR12_POSITION                          0x4
#define _DMA1DPTRH_DPTR12_SIZE                              0x1
#define _DMA1DPTRH_DPTR12_LENGTH                            0x1
#define _DMA1DPTRH_DPTR12_MASK                              0x10
#define _DMA1DPTRH_DPTR13_POSN                              0x5
#define _DMA1DPTRH_DPTR13_POSITION                          0x5
#define _DMA1DPTRH_DPTR13_SIZE                              0x1
#define _DMA1DPTRH_DPTR13_LENGTH                            0x1
#define _DMA1DPTRH_DPTR13_MASK                              0x20
#define _DMA1DPTRH_DPTR14_POSN                              0x6
#define _DMA1DPTRH_DPTR14_POSITION                          0x6
#define _DMA1DPTRH_DPTR14_SIZE                              0x1
#define _DMA1DPTRH_DPTR14_LENGTH                            0x1
#define _DMA1DPTRH_DPTR14_MASK                              0x40
#define _DMA1DPTRH_DPTR15_POSN                              0x7
#define _DMA1DPTRH_DPTR15_POSITION                          0x7
#define _DMA1DPTRH_DPTR15_SIZE                              0x1
#define _DMA1DPTRH_DPTR15_LENGTH                            0x1
#define _DMA1DPTRH_DPTR15_MASK                              0x80
#define _DMA1DPTRH_DMA1DPTR_POSN                            0x0
#define _DMA1DPTRH_DMA1DPTR_POSITION                        0x0
#define _DMA1DPTRH_DMA1DPTR_SIZE                            0x8
#define _DMA1DPTRH_DMA1DPTR_LENGTH                          0x8
#define _DMA1DPTRH_DMA1DPTR_MASK                            0xFF
#define _DMA1DPTRH_DMA1DPTR8_POSN                           0x0
#define _DMA1DPTRH_DMA1DPTR8_POSITION                       0x0
#define _DMA1DPTRH_DMA1DPTR8_SIZE                           0x1
#define _DMA1DPTRH_DMA1DPTR8_LENGTH                         0x1
#define _DMA1DPTRH_DMA1DPTR8_MASK                           0x1
#define _DMA1DPTRH_DMA1DPTR9_POSN                           0x1
#define _DMA1DPTRH_DMA1DPTR9_POSITION                       0x1
#define _DMA1DPTRH_DMA1DPTR9_SIZE                           0x1
#define _DMA1DPTRH_DMA1DPTR9_LENGTH                         0x1
#define _DMA1DPTRH_DMA1DPTR9_MASK                           0x2
#define _DMA1DPTRH_DMA1DPTR10_POSN                          0x2
#define _DMA1DPTRH_DMA1DPTR10_POSITION                      0x2
#define _DMA1DPTRH_DMA1DPTR10_SIZE                          0x1
#define _DMA1DPTRH_DMA1DPTR10_LENGTH                        0x1
#define _DMA1DPTRH_DMA1DPTR10_MASK                          0x4
#define _DMA1DPTRH_DMA1DPTR11_POSN                          0x3
#define _DMA1DPTRH_DMA1DPTR11_POSITION                      0x3
#define _DMA1DPTRH_DMA1DPTR11_SIZE                          0x1
#define _DMA1DPTRH_DMA1DPTR11_LENGTH                        0x1
#define _DMA1DPTRH_DMA1DPTR11_MASK                          0x8
#define _DMA1DPTRH_DMA1DPTR12_POSN                          0x4
#define _DMA1DPTRH_DMA1DPTR12_POSITION                      0x4
#define _DMA1DPTRH_DMA1DPTR12_SIZE                          0x1
#define _DMA1DPTRH_DMA1DPTR12_LENGTH                        0x1
#define _DMA1DPTRH_DMA1DPTR12_MASK                          0x10
#define _DMA1DPTRH_DMA1DPTR13_POSN                          0x5
#define _DMA1DPTRH_DMA1DPTR13_POSITION                      0x5
#define _DMA1DPTRH_DMA1DPTR13_SIZE                          0x1
#define _DMA1DPTRH_DMA1DPTR13_LENGTH                        0x1
#define _DMA1DPTRH_DMA1DPTR13_MASK                          0x20
#define _DMA1DPTRH_DMA1DPTR14_POSN                          0x6
#define _DMA1DPTRH_DMA1DPTR14_POSITION                      0x6
#define _DMA1DPTRH_DMA1DPTR14_SIZE                          0x1
#define _DMA1DPTRH_DMA1DPTR14_LENGTH                        0x1
#define _DMA1DPTRH_DMA1DPTR14_MASK                          0x40
#define _DMA1DPTRH_DMA1DPTR15_POSN                          0x7
#define _DMA1DPTRH_DMA1DPTR15_POSITION                      0x7
#define _DMA1DPTRH_DMA1DPTR15_SIZE                          0x1
#define _DMA1DPTRH_DMA1DPTR15_LENGTH                        0x1
#define _DMA1DPTRH_DMA1DPTR15_MASK                          0x80

// Register: DMA1DSZ
#define DMA1DSZ DMA1DSZ
extern volatile unsigned short          DMA1DSZ             __at(0x3BEE);
#ifndef _LIB_BUILD
asm("DMA1DSZ equ 03BEEh");
#endif

// Register: DMA1DSZL
#define DMA1DSZL DMA1DSZL
extern volatile unsigned char           DMA1DSZL            __at(0x3BEE);
#ifndef _LIB_BUILD
asm("DMA1DSZL equ 03BEEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DSZ                    :8;
    };
    struct {
        unsigned DMA1DSZ                :8;
    };
    struct {
        unsigned DSZ0                   :1;
        unsigned DSZ1                   :1;
        unsigned DSZ2                   :1;
        unsigned DSZ3                   :1;
        unsigned DSZ4                   :1;
        unsigned DSZ5                   :1;
        unsigned DSZ6                   :1;
        unsigned DSZ7                   :1;
    };
    struct {
        unsigned DMA1DSZ0               :1;
        unsigned DMA1DSZ1               :1;
        unsigned DMA1DSZ2               :1;
        unsigned DMA1DSZ3               :1;
        unsigned DMA1DSZ4               :1;
        unsigned DMA1DSZ5               :1;
        unsigned DMA1DSZ6               :1;
        unsigned DMA1DSZ7               :1;
    };
} DMA1DSZLbits_t;
extern volatile DMA1DSZLbits_t DMA1DSZLbits __at(0x3BEE);
// bitfield macros
#define _DMA1DSZL_DSZ_POSN                                  0x0
#define _DMA1DSZL_DSZ_POSITION                              0x0
#define _DMA1DSZL_DSZ_SIZE                                  0x8
#define _DMA1DSZL_DSZ_LENGTH                                0x8
#define _DMA1DSZL_DSZ_MASK                                  0xFF
#define _DMA1DSZL_DMA1DSZ_POSN                              0x0
#define _DMA1DSZL_DMA1DSZ_POSITION                          0x0
#define _DMA1DSZL_DMA1DSZ_SIZE                              0x8
#define _DMA1DSZL_DMA1DSZ_LENGTH                            0x8
#define _DMA1DSZL_DMA1DSZ_MASK                              0xFF
#define _DMA1DSZL_DSZ0_POSN                                 0x0
#define _DMA1DSZL_DSZ0_POSITION                             0x0
#define _DMA1DSZL_DSZ0_SIZE                                 0x1
#define _DMA1DSZL_DSZ0_LENGTH                               0x1
#define _DMA1DSZL_DSZ0_MASK                                 0x1
#define _DMA1DSZL_DSZ1_POSN                                 0x1
#define _DMA1DSZL_DSZ1_POSITION                             0x1
#define _DMA1DSZL_DSZ1_SIZE                                 0x1
#define _DMA1DSZL_DSZ1_LENGTH                               0x1
#define _DMA1DSZL_DSZ1_MASK                                 0x2
#define _DMA1DSZL_DSZ2_POSN                                 0x2
#define _DMA1DSZL_DSZ2_POSITION                             0x2
#define _DMA1DSZL_DSZ2_SIZE                                 0x1
#define _DMA1DSZL_DSZ2_LENGTH                               0x1
#define _DMA1DSZL_DSZ2_MASK                                 0x4
#define _DMA1DSZL_DSZ3_POSN                                 0x3
#define _DMA1DSZL_DSZ3_POSITION                             0x3
#define _DMA1DSZL_DSZ3_SIZE                                 0x1
#define _DMA1DSZL_DSZ3_LENGTH                               0x1
#define _DMA1DSZL_DSZ3_MASK                                 0x8
#define _DMA1DSZL_DSZ4_POSN                                 0x4
#define _DMA1DSZL_DSZ4_POSITION                             0x4
#define _DMA1DSZL_DSZ4_SIZE                                 0x1
#define _DMA1DSZL_DSZ4_LENGTH                               0x1
#define _DMA1DSZL_DSZ4_MASK                                 0x10
#define _DMA1DSZL_DSZ5_POSN                                 0x5
#define _DMA1DSZL_DSZ5_POSITION                             0x5
#define _DMA1DSZL_DSZ5_SIZE                                 0x1
#define _DMA1DSZL_DSZ5_LENGTH                               0x1
#define _DMA1DSZL_DSZ5_MASK                                 0x20
#define _DMA1DSZL_DSZ6_POSN                                 0x6
#define _DMA1DSZL_DSZ6_POSITION                             0x6
#define _DMA1DSZL_DSZ6_SIZE                                 0x1
#define _DMA1DSZL_DSZ6_LENGTH                               0x1
#define _DMA1DSZL_DSZ6_MASK                                 0x40
#define _DMA1DSZL_DSZ7_POSN                                 0x7
#define _DMA1DSZL_DSZ7_POSITION                             0x7
#define _DMA1DSZL_DSZ7_SIZE                                 0x1
#define _DMA1DSZL_DSZ7_LENGTH                               0x1
#define _DMA1DSZL_DSZ7_MASK                                 0x80
#define _DMA1DSZL_DMA1DSZ0_POSN                             0x0
#define _DMA1DSZL_DMA1DSZ0_POSITION                         0x0
#define _DMA1DSZL_DMA1DSZ0_SIZE                             0x1
#define _DMA1DSZL_DMA1DSZ0_LENGTH                           0x1
#define _DMA1DSZL_DMA1DSZ0_MASK                             0x1
#define _DMA1DSZL_DMA1DSZ1_POSN                             0x1
#define _DMA1DSZL_DMA1DSZ1_POSITION                         0x1
#define _DMA1DSZL_DMA1DSZ1_SIZE                             0x1
#define _DMA1DSZL_DMA1DSZ1_LENGTH                           0x1
#define _DMA1DSZL_DMA1DSZ1_MASK                             0x2
#define _DMA1DSZL_DMA1DSZ2_POSN                             0x2
#define _DMA1DSZL_DMA1DSZ2_POSITION                         0x2
#define _DMA1DSZL_DMA1DSZ2_SIZE                             0x1
#define _DMA1DSZL_DMA1DSZ2_LENGTH                           0x1
#define _DMA1DSZL_DMA1DSZ2_MASK                             0x4
#define _DMA1DSZL_DMA1DSZ3_POSN                             0x3
#define _DMA1DSZL_DMA1DSZ3_POSITION                         0x3
#define _DMA1DSZL_DMA1DSZ3_SIZE                             0x1
#define _DMA1DSZL_DMA1DSZ3_LENGTH                           0x1
#define _DMA1DSZL_DMA1DSZ3_MASK                             0x8
#define _DMA1DSZL_DMA1DSZ4_POSN                             0x4
#define _DMA1DSZL_DMA1DSZ4_POSITION                         0x4
#define _DMA1DSZL_DMA1DSZ4_SIZE                             0x1
#define _DMA1DSZL_DMA1DSZ4_LENGTH                           0x1
#define _DMA1DSZL_DMA1DSZ4_MASK                             0x10
#define _DMA1DSZL_DMA1DSZ5_POSN                             0x5
#define _DMA1DSZL_DMA1DSZ5_POSITION                         0x5
#define _DMA1DSZL_DMA1DSZ5_SIZE                             0x1
#define _DMA1DSZL_DMA1DSZ5_LENGTH                           0x1
#define _DMA1DSZL_DMA1DSZ5_MASK                             0x20
#define _DMA1DSZL_DMA1DSZ6_POSN                             0x6
#define _DMA1DSZL_DMA1DSZ6_POSITION                         0x6
#define _DMA1DSZL_DMA1DSZ6_SIZE                             0x1
#define _DMA1DSZL_DMA1DSZ6_LENGTH                           0x1
#define _DMA1DSZL_DMA1DSZ6_MASK                             0x40
#define _DMA1DSZL_DMA1DSZ7_POSN                             0x7
#define _DMA1DSZL_DMA1DSZ7_POSITION                         0x7
#define _DMA1DSZL_DMA1DSZ7_SIZE                             0x1
#define _DMA1DSZL_DMA1DSZ7_LENGTH                           0x1
#define _DMA1DSZL_DMA1DSZ7_MASK                             0x80

// Register: DMA1DSZH
#define DMA1DSZH DMA1DSZH
extern volatile unsigned char           DMA1DSZH            __at(0x3BEF);
#ifndef _LIB_BUILD
asm("DMA1DSZH equ 03BEFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DSZ                    :4;
    };
    struct {
        unsigned DMA1DSZ                :4;
    };
    struct {
        unsigned DSZ8                   :1;
        unsigned DSZ9                   :1;
        unsigned DSZ10                  :1;
        unsigned DSZ11                  :1;
    };
    struct {
        unsigned DMA1DSZ8               :1;
        unsigned DMA1DSZ9               :1;
        unsigned DMA1DSZ10              :1;
        unsigned DMA1DSZ11              :1;
    };
} DMA1DSZHbits_t;
extern volatile DMA1DSZHbits_t DMA1DSZHbits __at(0x3BEF);
// bitfield macros
#define _DMA1DSZH_DSZ_POSN                                  0x0
#define _DMA1DSZH_DSZ_POSITION                              0x0
#define _DMA1DSZH_DSZ_SIZE                                  0x4
#define _DMA1DSZH_DSZ_LENGTH                                0x4
#define _DMA1DSZH_DSZ_MASK                                  0xF
#define _DMA1DSZH_DMA1DSZ_POSN                              0x0
#define _DMA1DSZH_DMA1DSZ_POSITION                          0x0
#define _DMA1DSZH_DMA1DSZ_SIZE                              0x4
#define _DMA1DSZH_DMA1DSZ_LENGTH                            0x4
#define _DMA1DSZH_DMA1DSZ_MASK                              0xF
#define _DMA1DSZH_DSZ8_POSN                                 0x0
#define _DMA1DSZH_DSZ8_POSITION                             0x0
#define _DMA1DSZH_DSZ8_SIZE                                 0x1
#define _DMA1DSZH_DSZ8_LENGTH                               0x1
#define _DMA1DSZH_DSZ8_MASK                                 0x1
#define _DMA1DSZH_DSZ9_POSN                                 0x1
#define _DMA1DSZH_DSZ9_POSITION                             0x1
#define _DMA1DSZH_DSZ9_SIZE                                 0x1
#define _DMA1DSZH_DSZ9_LENGTH                               0x1
#define _DMA1DSZH_DSZ9_MASK                                 0x2
#define _DMA1DSZH_DSZ10_POSN                                0x2
#define _DMA1DSZH_DSZ10_POSITION                            0x2
#define _DMA1DSZH_DSZ10_SIZE                                0x1
#define _DMA1DSZH_DSZ10_LENGTH                              0x1
#define _DMA1DSZH_DSZ10_MASK                                0x4
#define _DMA1DSZH_DSZ11_POSN                                0x3
#define _DMA1DSZH_DSZ11_POSITION                            0x3
#define _DMA1DSZH_DSZ11_SIZE                                0x1
#define _DMA1DSZH_DSZ11_LENGTH                              0x1
#define _DMA1DSZH_DSZ11_MASK                                0x8
#define _DMA1DSZH_DMA1DSZ8_POSN                             0x0
#define _DMA1DSZH_DMA1DSZ8_POSITION                         0x0
#define _DMA1DSZH_DMA1DSZ8_SIZE                             0x1
#define _DMA1DSZH_DMA1DSZ8_LENGTH                           0x1
#define _DMA1DSZH_DMA1DSZ8_MASK                             0x1
#define _DMA1DSZH_DMA1DSZ9_POSN                             0x1
#define _DMA1DSZH_DMA1DSZ9_POSITION                         0x1
#define _DMA1DSZH_DMA1DSZ9_SIZE                             0x1
#define _DMA1DSZH_DMA1DSZ9_LENGTH                           0x1
#define _DMA1DSZH_DMA1DSZ9_MASK                             0x2
#define _DMA1DSZH_DMA1DSZ10_POSN                            0x2
#define _DMA1DSZH_DMA1DSZ10_POSITION                        0x2
#define _DMA1DSZH_DMA1DSZ10_SIZE                            0x1
#define _DMA1DSZH_DMA1DSZ10_LENGTH                          0x1
#define _DMA1DSZH_DMA1DSZ10_MASK                            0x4
#define _DMA1DSZH_DMA1DSZ11_POSN                            0x3
#define _DMA1DSZH_DMA1DSZ11_POSITION                        0x3
#define _DMA1DSZH_DMA1DSZ11_SIZE                            0x1
#define _DMA1DSZH_DMA1DSZ11_LENGTH                          0x1
#define _DMA1DSZH_DMA1DSZ11_MASK                            0x8

// Register: DMA1DSA
#define DMA1DSA DMA1DSA
extern volatile unsigned short          DMA1DSA             __at(0x3BF0);
#ifndef _LIB_BUILD
asm("DMA1DSA equ 03BF0h");
#endif

// Register: DMA1DSAL
#define DMA1DSAL DMA1DSAL
extern volatile unsigned char           DMA1DSAL            __at(0x3BF0);
#ifndef _LIB_BUILD
asm("DMA1DSAL equ 03BF0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DSA                    :8;
    };
    struct {
        unsigned DSA0                   :1;
        unsigned DSA1                   :1;
        unsigned DSA2                   :1;
        unsigned DSA3                   :1;
        unsigned DSA4                   :1;
        unsigned DSA5                   :1;
        unsigned DSA6                   :1;
        unsigned DSA7                   :1;
    };
    struct {
        unsigned DMA1DSA                :8;
    };
    struct {
        unsigned DMA1DSA0               :1;
        unsigned DMA1DSA1               :1;
        unsigned DMA1DSA2               :1;
        unsigned DMA1DSA3               :1;
        unsigned DMA1DSA4               :1;
        unsigned DMA1DSA5               :1;
        unsigned DMA1DSA6               :1;
        unsigned DMA1DSA7               :1;
    };
} DMA1DSALbits_t;
extern volatile DMA1DSALbits_t DMA1DSALbits __at(0x3BF0);
// bitfield macros
#define _DMA1DSAL_DSA_POSN                                  0x0
#define _DMA1DSAL_DSA_POSITION                              0x0
#define _DMA1DSAL_DSA_SIZE                                  0x8
#define _DMA1DSAL_DSA_LENGTH                                0x8
#define _DMA1DSAL_DSA_MASK                                  0xFF
#define _DMA1DSAL_DSA0_POSN                                 0x0
#define _DMA1DSAL_DSA0_POSITION                             0x0
#define _DMA1DSAL_DSA0_SIZE                                 0x1
#define _DMA1DSAL_DSA0_LENGTH                               0x1
#define _DMA1DSAL_DSA0_MASK                                 0x1
#define _DMA1DSAL_DSA1_POSN                                 0x1
#define _DMA1DSAL_DSA1_POSITION                             0x1
#define _DMA1DSAL_DSA1_SIZE                                 0x1
#define _DMA1DSAL_DSA1_LENGTH                               0x1
#define _DMA1DSAL_DSA1_MASK                                 0x2
#define _DMA1DSAL_DSA2_POSN                                 0x2
#define _DMA1DSAL_DSA2_POSITION                             0x2
#define _DMA1DSAL_DSA2_SIZE                                 0x1
#define _DMA1DSAL_DSA2_LENGTH                               0x1
#define _DMA1DSAL_DSA2_MASK                                 0x4
#define _DMA1DSAL_DSA3_POSN                                 0x3
#define _DMA1DSAL_DSA3_POSITION                             0x3
#define _DMA1DSAL_DSA3_SIZE                                 0x1
#define _DMA1DSAL_DSA3_LENGTH                               0x1
#define _DMA1DSAL_DSA3_MASK                                 0x8
#define _DMA1DSAL_DSA4_POSN                                 0x4
#define _DMA1DSAL_DSA4_POSITION                             0x4
#define _DMA1DSAL_DSA4_SIZE                                 0x1
#define _DMA1DSAL_DSA4_LENGTH                               0x1
#define _DMA1DSAL_DSA4_MASK                                 0x10
#define _DMA1DSAL_DSA5_POSN                                 0x5
#define _DMA1DSAL_DSA5_POSITION                             0x5
#define _DMA1DSAL_DSA5_SIZE                                 0x1
#define _DMA1DSAL_DSA5_LENGTH                               0x1
#define _DMA1DSAL_DSA5_MASK                                 0x20
#define _DMA1DSAL_DSA6_POSN                                 0x6
#define _DMA1DSAL_DSA6_POSITION                             0x6
#define _DMA1DSAL_DSA6_SIZE                                 0x1
#define _DMA1DSAL_DSA6_LENGTH                               0x1
#define _DMA1DSAL_DSA6_MASK                                 0x40
#define _DMA1DSAL_DSA7_POSN                                 0x7
#define _DMA1DSAL_DSA7_POSITION                             0x7
#define _DMA1DSAL_DSA7_SIZE                                 0x1
#define _DMA1DSAL_DSA7_LENGTH                               0x1
#define _DMA1DSAL_DSA7_MASK                                 0x80
#define _DMA1DSAL_DMA1DSA_POSN                              0x0
#define _DMA1DSAL_DMA1DSA_POSITION                          0x0
#define _DMA1DSAL_DMA1DSA_SIZE                              0x8
#define _DMA1DSAL_DMA1DSA_LENGTH                            0x8
#define _DMA1DSAL_DMA1DSA_MASK                              0xFF
#define _DMA1DSAL_DMA1DSA0_POSN                             0x0
#define _DMA1DSAL_DMA1DSA0_POSITION                         0x0
#define _DMA1DSAL_DMA1DSA0_SIZE                             0x1
#define _DMA1DSAL_DMA1DSA0_LENGTH                           0x1
#define _DMA1DSAL_DMA1DSA0_MASK                             0x1
#define _DMA1DSAL_DMA1DSA1_POSN                             0x1
#define _DMA1DSAL_DMA1DSA1_POSITION                         0x1
#define _DMA1DSAL_DMA1DSA1_SIZE                             0x1
#define _DMA1DSAL_DMA1DSA1_LENGTH                           0x1
#define _DMA1DSAL_DMA1DSA1_MASK                             0x2
#define _DMA1DSAL_DMA1DSA2_POSN                             0x2
#define _DMA1DSAL_DMA1DSA2_POSITION                         0x2
#define _DMA1DSAL_DMA1DSA2_SIZE                             0x1
#define _DMA1DSAL_DMA1DSA2_LENGTH                           0x1
#define _DMA1DSAL_DMA1DSA2_MASK                             0x4
#define _DMA1DSAL_DMA1DSA3_POSN                             0x3
#define _DMA1DSAL_DMA1DSA3_POSITION                         0x3
#define _DMA1DSAL_DMA1DSA3_SIZE                             0x1
#define _DMA1DSAL_DMA1DSA3_LENGTH                           0x1
#define _DMA1DSAL_DMA1DSA3_MASK                             0x8
#define _DMA1DSAL_DMA1DSA4_POSN                             0x4
#define _DMA1DSAL_DMA1DSA4_POSITION                         0x4
#define _DMA1DSAL_DMA1DSA4_SIZE                             0x1
#define _DMA1DSAL_DMA1DSA4_LENGTH                           0x1
#define _DMA1DSAL_DMA1DSA4_MASK                             0x10
#define _DMA1DSAL_DMA1DSA5_POSN                             0x5
#define _DMA1DSAL_DMA1DSA5_POSITION                         0x5
#define _DMA1DSAL_DMA1DSA5_SIZE                             0x1
#define _DMA1DSAL_DMA1DSA5_LENGTH                           0x1
#define _DMA1DSAL_DMA1DSA5_MASK                             0x20
#define _DMA1DSAL_DMA1DSA6_POSN                             0x6
#define _DMA1DSAL_DMA1DSA6_POSITION                         0x6
#define _DMA1DSAL_DMA1DSA6_SIZE                             0x1
#define _DMA1DSAL_DMA1DSA6_LENGTH                           0x1
#define _DMA1DSAL_DMA1DSA6_MASK                             0x40
#define _DMA1DSAL_DMA1DSA7_POSN                             0x7
#define _DMA1DSAL_DMA1DSA7_POSITION                         0x7
#define _DMA1DSAL_DMA1DSA7_SIZE                             0x1
#define _DMA1DSAL_DMA1DSA7_LENGTH                           0x1
#define _DMA1DSAL_DMA1DSA7_MASK                             0x80

// Register: DMA1DSAH
#define DMA1DSAH DMA1DSAH
extern volatile unsigned char           DMA1DSAH            __at(0x3BF1);
#ifndef _LIB_BUILD
asm("DMA1DSAH equ 03BF1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DSA                    :8;
    };
    struct {
        unsigned DSA8                   :1;
        unsigned DSA9                   :1;
        unsigned DSA10                  :1;
        unsigned DSA11                  :1;
        unsigned DSA12                  :1;
        unsigned DSA13                  :1;
        unsigned DSA14                  :1;
        unsigned DSA15                  :1;
    };
    struct {
        unsigned DMA1DSA                :8;
    };
    struct {
        unsigned DMA1DSA8               :1;
        unsigned DMA1DSA9               :1;
        unsigned DMA1DSA10              :1;
        unsigned DMA1DSA11              :1;
        unsigned DMA1DSA12              :1;
        unsigned DMA1DSA13              :1;
        unsigned DMA1DSA14              :1;
        unsigned DMA1DSA15              :1;
    };
} DMA1DSAHbits_t;
extern volatile DMA1DSAHbits_t DMA1DSAHbits __at(0x3BF1);
// bitfield macros
#define _DMA1DSAH_DSA_POSN                                  0x0
#define _DMA1DSAH_DSA_POSITION                              0x0
#define _DMA1DSAH_DSA_SIZE                                  0x8
#define _DMA1DSAH_DSA_LENGTH                                0x8
#define _DMA1DSAH_DSA_MASK                                  0xFF
#define _DMA1DSAH_DSA8_POSN                                 0x0
#define _DMA1DSAH_DSA8_POSITION                             0x0
#define _DMA1DSAH_DSA8_SIZE                                 0x1
#define _DMA1DSAH_DSA8_LENGTH                               0x1
#define _DMA1DSAH_DSA8_MASK                                 0x1
#define _DMA1DSAH_DSA9_POSN                                 0x1
#define _DMA1DSAH_DSA9_POSITION                             0x1
#define _DMA1DSAH_DSA9_SIZE                                 0x1
#define _DMA1DSAH_DSA9_LENGTH                               0x1
#define _DMA1DSAH_DSA9_MASK                                 0x2
#define _DMA1DSAH_DSA10_POSN                                0x2
#define _DMA1DSAH_DSA10_POSITION                            0x2
#define _DMA1DSAH_DSA10_SIZE                                0x1
#define _DMA1DSAH_DSA10_LENGTH                              0x1
#define _DMA1DSAH_DSA10_MASK                                0x4
#define _DMA1DSAH_DSA11_POSN                                0x3
#define _DMA1DSAH_DSA11_POSITION                            0x3
#define _DMA1DSAH_DSA11_SIZE                                0x1
#define _DMA1DSAH_DSA11_LENGTH                              0x1
#define _DMA1DSAH_DSA11_MASK                                0x8
#define _DMA1DSAH_DSA12_POSN                                0x4
#define _DMA1DSAH_DSA12_POSITION                            0x4
#define _DMA1DSAH_DSA12_SIZE                                0x1
#define _DMA1DSAH_DSA12_LENGTH                              0x1
#define _DMA1DSAH_DSA12_MASK                                0x10
#define _DMA1DSAH_DSA13_POSN                                0x5
#define _DMA1DSAH_DSA13_POSITION                            0x5
#define _DMA1DSAH_DSA13_SIZE                                0x1
#define _DMA1DSAH_DSA13_LENGTH                              0x1
#define _DMA1DSAH_DSA13_MASK                                0x20
#define _DMA1DSAH_DSA14_POSN                                0x6
#define _DMA1DSAH_DSA14_POSITION                            0x6
#define _DMA1DSAH_DSA14_SIZE                                0x1
#define _DMA1DSAH_DSA14_LENGTH                              0x1
#define _DMA1DSAH_DSA14_MASK                                0x40
#define _DMA1DSAH_DSA15_POSN                                0x7
#define _DMA1DSAH_DSA15_POSITION                            0x7
#define _DMA1DSAH_DSA15_SIZE                                0x1
#define _DMA1DSAH_DSA15_LENGTH                              0x1
#define _DMA1DSAH_DSA15_MASK                                0x80
#define _DMA1DSAH_DMA1DSA_POSN                              0x0
#define _DMA1DSAH_DMA1DSA_POSITION                          0x0
#define _DMA1DSAH_DMA1DSA_SIZE                              0x8
#define _DMA1DSAH_DMA1DSA_LENGTH                            0x8
#define _DMA1DSAH_DMA1DSA_MASK                              0xFF
#define _DMA1DSAH_DMA1DSA8_POSN                             0x0
#define _DMA1DSAH_DMA1DSA8_POSITION                         0x0
#define _DMA1DSAH_DMA1DSA8_SIZE                             0x1
#define _DMA1DSAH_DMA1DSA8_LENGTH                           0x1
#define _DMA1DSAH_DMA1DSA8_MASK                             0x1
#define _DMA1DSAH_DMA1DSA9_POSN                             0x1
#define _DMA1DSAH_DMA1DSA9_POSITION                         0x1
#define _DMA1DSAH_DMA1DSA9_SIZE                             0x1
#define _DMA1DSAH_DMA1DSA9_LENGTH                           0x1
#define _DMA1DSAH_DMA1DSA9_MASK                             0x2
#define _DMA1DSAH_DMA1DSA10_POSN                            0x2
#define _DMA1DSAH_DMA1DSA10_POSITION                        0x2
#define _DMA1DSAH_DMA1DSA10_SIZE                            0x1
#define _DMA1DSAH_DMA1DSA10_LENGTH                          0x1
#define _DMA1DSAH_DMA1DSA10_MASK                            0x4
#define _DMA1DSAH_DMA1DSA11_POSN                            0x3
#define _DMA1DSAH_DMA1DSA11_POSITION                        0x3
#define _DMA1DSAH_DMA1DSA11_SIZE                            0x1
#define _DMA1DSAH_DMA1DSA11_LENGTH                          0x1
#define _DMA1DSAH_DMA1DSA11_MASK                            0x8
#define _DMA1DSAH_DMA1DSA12_POSN                            0x4
#define _DMA1DSAH_DMA1DSA12_POSITION                        0x4
#define _DMA1DSAH_DMA1DSA12_SIZE                            0x1
#define _DMA1DSAH_DMA1DSA12_LENGTH                          0x1
#define _DMA1DSAH_DMA1DSA12_MASK                            0x10
#define _DMA1DSAH_DMA1DSA13_POSN                            0x5
#define _DMA1DSAH_DMA1DSA13_POSITION                        0x5
#define _DMA1DSAH_DMA1DSA13_SIZE                            0x1
#define _DMA1DSAH_DMA1DSA13_LENGTH                          0x1
#define _DMA1DSAH_DMA1DSA13_MASK                            0x20
#define _DMA1DSAH_DMA1DSA14_POSN                            0x6
#define _DMA1DSAH_DMA1DSA14_POSITION                        0x6
#define _DMA1DSAH_DMA1DSA14_SIZE                            0x1
#define _DMA1DSAH_DMA1DSA14_LENGTH                          0x1
#define _DMA1DSAH_DMA1DSA14_MASK                            0x40
#define _DMA1DSAH_DMA1DSA15_POSN                            0x7
#define _DMA1DSAH_DMA1DSA15_POSITION                        0x7
#define _DMA1DSAH_DMA1DSA15_SIZE                            0x1
#define _DMA1DSAH_DMA1DSA15_LENGTH                          0x1
#define _DMA1DSAH_DMA1DSA15_MASK                            0x80

// Register: DMA1SCNT
#define DMA1SCNT DMA1SCNT
extern volatile unsigned short          DMA1SCNT            __at(0x3BF2);
#ifndef _LIB_BUILD
asm("DMA1SCNT equ 03BF2h");
#endif

// Register: DMA1SCNTL
#define DMA1SCNTL DMA1SCNTL
extern volatile unsigned char           DMA1SCNTL           __at(0x3BF2);
#ifndef _LIB_BUILD
asm("DMA1SCNTL equ 03BF2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SCNT                   :8;
    };
    struct {
        unsigned SCNT0                  :1;
        unsigned SCNT1                  :1;
        unsigned SCNT2                  :1;
        unsigned SCNT3                  :1;
        unsigned SCNT4                  :1;
        unsigned SCNT5                  :1;
        unsigned SCNT6                  :1;
        unsigned SCNT7                  :1;
    };
    struct {
        unsigned DMA1SCNT               :8;
    };
    struct {
        unsigned DMA1SCNT0              :1;
        unsigned DMA1SCNT1              :1;
        unsigned DMA1SCNT2              :1;
        unsigned DMA1SCNT3              :1;
        unsigned DMA1SCNT4              :1;
        unsigned DMA1SCNT5              :1;
        unsigned DMA1SCNT6              :1;
        unsigned DMA1SCNT7              :1;
    };
} DMA1SCNTLbits_t;
extern volatile DMA1SCNTLbits_t DMA1SCNTLbits __at(0x3BF2);
// bitfield macros
#define _DMA1SCNTL_SCNT_POSN                                0x0
#define _DMA1SCNTL_SCNT_POSITION                            0x0
#define _DMA1SCNTL_SCNT_SIZE                                0x8
#define _DMA1SCNTL_SCNT_LENGTH                              0x8
#define _DMA1SCNTL_SCNT_MASK                                0xFF
#define _DMA1SCNTL_SCNT0_POSN                               0x0
#define _DMA1SCNTL_SCNT0_POSITION                           0x0
#define _DMA1SCNTL_SCNT0_SIZE                               0x1
#define _DMA1SCNTL_SCNT0_LENGTH                             0x1
#define _DMA1SCNTL_SCNT0_MASK                               0x1
#define _DMA1SCNTL_SCNT1_POSN                               0x1
#define _DMA1SCNTL_SCNT1_POSITION                           0x1
#define _DMA1SCNTL_SCNT1_SIZE                               0x1
#define _DMA1SCNTL_SCNT1_LENGTH                             0x1
#define _DMA1SCNTL_SCNT1_MASK                               0x2
#define _DMA1SCNTL_SCNT2_POSN                               0x2
#define _DMA1SCNTL_SCNT2_POSITION                           0x2
#define _DMA1SCNTL_SCNT2_SIZE                               0x1
#define _DMA1SCNTL_SCNT2_LENGTH                             0x1
#define _DMA1SCNTL_SCNT2_MASK                               0x4
#define _DMA1SCNTL_SCNT3_POSN                               0x3
#define _DMA1SCNTL_SCNT3_POSITION                           0x3
#define _DMA1SCNTL_SCNT3_SIZE                               0x1
#define _DMA1SCNTL_SCNT3_LENGTH                             0x1
#define _DMA1SCNTL_SCNT3_MASK                               0x8
#define _DMA1SCNTL_SCNT4_POSN                               0x4
#define _DMA1SCNTL_SCNT4_POSITION                           0x4
#define _DMA1SCNTL_SCNT4_SIZE                               0x1
#define _DMA1SCNTL_SCNT4_LENGTH                             0x1
#define _DMA1SCNTL_SCNT4_MASK                               0x10
#define _DMA1SCNTL_SCNT5_POSN                               0x5
#define _DMA1SCNTL_SCNT5_POSITION                           0x5
#define _DMA1SCNTL_SCNT5_SIZE                               0x1
#define _DMA1SCNTL_SCNT5_LENGTH                             0x1
#define _DMA1SCNTL_SCNT5_MASK                               0x20
#define _DMA1SCNTL_SCNT6_POSN                               0x6
#define _DMA1SCNTL_SCNT6_POSITION                           0x6
#define _DMA1SCNTL_SCNT6_SIZE                               0x1
#define _DMA1SCNTL_SCNT6_LENGTH                             0x1
#define _DMA1SCNTL_SCNT6_MASK                               0x40
#define _DMA1SCNTL_SCNT7_POSN                               0x7
#define _DMA1SCNTL_SCNT7_POSITION                           0x7
#define _DMA1SCNTL_SCNT7_SIZE                               0x1
#define _DMA1SCNTL_SCNT7_LENGTH                             0x1
#define _DMA1SCNTL_SCNT7_MASK                               0x80
#define _DMA1SCNTL_DMA1SCNT_POSN                            0x0
#define _DMA1SCNTL_DMA1SCNT_POSITION                        0x0
#define _DMA1SCNTL_DMA1SCNT_SIZE                            0x8
#define _DMA1SCNTL_DMA1SCNT_LENGTH                          0x8
#define _DMA1SCNTL_DMA1SCNT_MASK                            0xFF
#define _DMA1SCNTL_DMA1SCNT0_POSN                           0x0
#define _DMA1SCNTL_DMA1SCNT0_POSITION                       0x0
#define _DMA1SCNTL_DMA1SCNT0_SIZE                           0x1
#define _DMA1SCNTL_DMA1SCNT0_LENGTH                         0x1
#define _DMA1SCNTL_DMA1SCNT0_MASK                           0x1
#define _DMA1SCNTL_DMA1SCNT1_POSN                           0x1
#define _DMA1SCNTL_DMA1SCNT1_POSITION                       0x1
#define _DMA1SCNTL_DMA1SCNT1_SIZE                           0x1
#define _DMA1SCNTL_DMA1SCNT1_LENGTH                         0x1
#define _DMA1SCNTL_DMA1SCNT1_MASK                           0x2
#define _DMA1SCNTL_DMA1SCNT2_POSN                           0x2
#define _DMA1SCNTL_DMA1SCNT2_POSITION                       0x2
#define _DMA1SCNTL_DMA1SCNT2_SIZE                           0x1
#define _DMA1SCNTL_DMA1SCNT2_LENGTH                         0x1
#define _DMA1SCNTL_DMA1SCNT2_MASK                           0x4
#define _DMA1SCNTL_DMA1SCNT3_POSN                           0x3
#define _DMA1SCNTL_DMA1SCNT3_POSITION                       0x3
#define _DMA1SCNTL_DMA1SCNT3_SIZE                           0x1
#define _DMA1SCNTL_DMA1SCNT3_LENGTH                         0x1
#define _DMA1SCNTL_DMA1SCNT3_MASK                           0x8
#define _DMA1SCNTL_DMA1SCNT4_POSN                           0x4
#define _DMA1SCNTL_DMA1SCNT4_POSITION                       0x4
#define _DMA1SCNTL_DMA1SCNT4_SIZE                           0x1
#define _DMA1SCNTL_DMA1SCNT4_LENGTH                         0x1
#define _DMA1SCNTL_DMA1SCNT4_MASK                           0x10
#define _DMA1SCNTL_DMA1SCNT5_POSN                           0x5
#define _DMA1SCNTL_DMA1SCNT5_POSITION                       0x5
#define _DMA1SCNTL_DMA1SCNT5_SIZE                           0x1
#define _DMA1SCNTL_DMA1SCNT5_LENGTH                         0x1
#define _DMA1SCNTL_DMA1SCNT5_MASK                           0x20
#define _DMA1SCNTL_DMA1SCNT6_POSN                           0x6
#define _DMA1SCNTL_DMA1SCNT6_POSITION                       0x6
#define _DMA1SCNTL_DMA1SCNT6_SIZE                           0x1
#define _DMA1SCNTL_DMA1SCNT6_LENGTH                         0x1
#define _DMA1SCNTL_DMA1SCNT6_MASK                           0x40
#define _DMA1SCNTL_DMA1SCNT7_POSN                           0x7
#define _DMA1SCNTL_DMA1SCNT7_POSITION                       0x7
#define _DMA1SCNTL_DMA1SCNT7_SIZE                           0x1
#define _DMA1SCNTL_DMA1SCNT7_LENGTH                         0x1
#define _DMA1SCNTL_DMA1SCNT7_MASK                           0x80

// Register: DMA1SCNTH
#define DMA1SCNTH DMA1SCNTH
extern volatile unsigned char           DMA1SCNTH           __at(0x3BF3);
#ifndef _LIB_BUILD
asm("DMA1SCNTH equ 03BF3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SCNT                   :4;
    };
    struct {
        unsigned SCNT8                  :1;
        unsigned SCNT9                  :1;
        unsigned SCNT10                 :1;
        unsigned SCNT11                 :1;
    };
    struct {
        unsigned DMA1SCNT               :4;
    };
    struct {
        unsigned DMA1SCNT8              :1;
        unsigned DMA1SCNT9              :1;
        unsigned DMA1SCNT10             :1;
        unsigned DMA1SCNT11             :1;
    };
} DMA1SCNTHbits_t;
extern volatile DMA1SCNTHbits_t DMA1SCNTHbits __at(0x3BF3);
// bitfield macros
#define _DMA1SCNTH_SCNT_POSN                                0x0
#define _DMA1SCNTH_SCNT_POSITION                            0x0
#define _DMA1SCNTH_SCNT_SIZE                                0x4
#define _DMA1SCNTH_SCNT_LENGTH                              0x4
#define _DMA1SCNTH_SCNT_MASK                                0xF
#define _DMA1SCNTH_SCNT8_POSN                               0x0
#define _DMA1SCNTH_SCNT8_POSITION                           0x0
#define _DMA1SCNTH_SCNT8_SIZE                               0x1
#define _DMA1SCNTH_SCNT8_LENGTH                             0x1
#define _DMA1SCNTH_SCNT8_MASK                               0x1
#define _DMA1SCNTH_SCNT9_POSN                               0x1
#define _DMA1SCNTH_SCNT9_POSITION                           0x1
#define _DMA1SCNTH_SCNT9_SIZE                               0x1
#define _DMA1SCNTH_SCNT9_LENGTH                             0x1
#define _DMA1SCNTH_SCNT9_MASK                               0x2
#define _DMA1SCNTH_SCNT10_POSN                              0x2
#define _DMA1SCNTH_SCNT10_POSITION                          0x2
#define _DMA1SCNTH_SCNT10_SIZE                              0x1
#define _DMA1SCNTH_SCNT10_LENGTH                            0x1
#define _DMA1SCNTH_SCNT10_MASK                              0x4
#define _DMA1SCNTH_SCNT11_POSN                              0x3
#define _DMA1SCNTH_SCNT11_POSITION                          0x3
#define _DMA1SCNTH_SCNT11_SIZE                              0x1
#define _DMA1SCNTH_SCNT11_LENGTH                            0x1
#define _DMA1SCNTH_SCNT11_MASK                              0x8
#define _DMA1SCNTH_DMA1SCNT_POSN                            0x0
#define _DMA1SCNTH_DMA1SCNT_POSITION                        0x0
#define _DMA1SCNTH_DMA1SCNT_SIZE                            0x4
#define _DMA1SCNTH_DMA1SCNT_LENGTH                          0x4
#define _DMA1SCNTH_DMA1SCNT_MASK                            0xF
#define _DMA1SCNTH_DMA1SCNT8_POSN                           0x0
#define _DMA1SCNTH_DMA1SCNT8_POSITION                       0x0
#define _DMA1SCNTH_DMA1SCNT8_SIZE                           0x1
#define _DMA1SCNTH_DMA1SCNT8_LENGTH                         0x1
#define _DMA1SCNTH_DMA1SCNT8_MASK                           0x1
#define _DMA1SCNTH_DMA1SCNT9_POSN                           0x1
#define _DMA1SCNTH_DMA1SCNT9_POSITION                       0x1
#define _DMA1SCNTH_DMA1SCNT9_SIZE                           0x1
#define _DMA1SCNTH_DMA1SCNT9_LENGTH                         0x1
#define _DMA1SCNTH_DMA1SCNT9_MASK                           0x2
#define _DMA1SCNTH_DMA1SCNT10_POSN                          0x2
#define _DMA1SCNTH_DMA1SCNT10_POSITION                      0x2
#define _DMA1SCNTH_DMA1SCNT10_SIZE                          0x1
#define _DMA1SCNTH_DMA1SCNT10_LENGTH                        0x1
#define _DMA1SCNTH_DMA1SCNT10_MASK                          0x4
#define _DMA1SCNTH_DMA1SCNT11_POSN                          0x3
#define _DMA1SCNTH_DMA1SCNT11_POSITION                      0x3
#define _DMA1SCNTH_DMA1SCNT11_SIZE                          0x1
#define _DMA1SCNTH_DMA1SCNT11_LENGTH                        0x1
#define _DMA1SCNTH_DMA1SCNT11_MASK                          0x8

// Register: DMA1SPTR
#define DMA1SPTR DMA1SPTR
#ifndef __CCI__
extern volatile __uint24                DMA1SPTR            __at(0x3BF4);
#endif
#ifndef _LIB_BUILD
asm("DMA1SPTR equ 03BF4h");
#endif

// Register: DMA1SPTRL
#define DMA1SPTRL DMA1SPTRL
extern volatile unsigned char           DMA1SPTRL           __at(0x3BF4);
#ifndef _LIB_BUILD
asm("DMA1SPTRL equ 03BF4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SPTR                   :8;
    };
    struct {
        unsigned SPTR0                  :1;
        unsigned SPTR1                  :1;
        unsigned SPTR2                  :1;
        unsigned SPTR3                  :1;
        unsigned SPTR4                  :1;
        unsigned SPTR5                  :1;
        unsigned SPTR6                  :1;
        unsigned SPTR7                  :1;
    };
    struct {
        unsigned DMA1SPTR               :8;
    };
    struct {
        unsigned DMA1SPTR0              :1;
        unsigned DMA1SPTR1              :1;
        unsigned DMA1SPTR2              :1;
        unsigned DMA1SPTR3              :1;
        unsigned DMA1SPTR4              :1;
        unsigned DMA1SPTR5              :1;
        unsigned DMA1SPTR6              :1;
        unsigned DMA1SPTR7              :1;
    };
} DMA1SPTRLbits_t;
extern volatile DMA1SPTRLbits_t DMA1SPTRLbits __at(0x3BF4);
// bitfield macros
#define _DMA1SPTRL_SPTR_POSN                                0x0
#define _DMA1SPTRL_SPTR_POSITION                            0x0
#define _DMA1SPTRL_SPTR_SIZE                                0x8
#define _DMA1SPTRL_SPTR_LENGTH                              0x8
#define _DMA1SPTRL_SPTR_MASK                                0xFF
#define _DMA1SPTRL_SPTR0_POSN                               0x0
#define _DMA1SPTRL_SPTR0_POSITION                           0x0
#define _DMA1SPTRL_SPTR0_SIZE                               0x1
#define _DMA1SPTRL_SPTR0_LENGTH                             0x1
#define _DMA1SPTRL_SPTR0_MASK                               0x1
#define _DMA1SPTRL_SPTR1_POSN                               0x1
#define _DMA1SPTRL_SPTR1_POSITION                           0x1
#define _DMA1SPTRL_SPTR1_SIZE                               0x1
#define _DMA1SPTRL_SPTR1_LENGTH                             0x1
#define _DMA1SPTRL_SPTR1_MASK                               0x2
#define _DMA1SPTRL_SPTR2_POSN                               0x2
#define _DMA1SPTRL_SPTR2_POSITION                           0x2
#define _DMA1SPTRL_SPTR2_SIZE                               0x1
#define _DMA1SPTRL_SPTR2_LENGTH                             0x1
#define _DMA1SPTRL_SPTR2_MASK                               0x4
#define _DMA1SPTRL_SPTR3_POSN                               0x3
#define _DMA1SPTRL_SPTR3_POSITION                           0x3
#define _DMA1SPTRL_SPTR3_SIZE                               0x1
#define _DMA1SPTRL_SPTR3_LENGTH                             0x1
#define _DMA1SPTRL_SPTR3_MASK                               0x8
#define _DMA1SPTRL_SPTR4_POSN                               0x4
#define _DMA1SPTRL_SPTR4_POSITION                           0x4
#define _DMA1SPTRL_SPTR4_SIZE                               0x1
#define _DMA1SPTRL_SPTR4_LENGTH                             0x1
#define _DMA1SPTRL_SPTR4_MASK                               0x10
#define _DMA1SPTRL_SPTR5_POSN                               0x5
#define _DMA1SPTRL_SPTR5_POSITION                           0x5
#define _DMA1SPTRL_SPTR5_SIZE                               0x1
#define _DMA1SPTRL_SPTR5_LENGTH                             0x1
#define _DMA1SPTRL_SPTR5_MASK                               0x20
#define _DMA1SPTRL_SPTR6_POSN                               0x6
#define _DMA1SPTRL_SPTR6_POSITION                           0x6
#define _DMA1SPTRL_SPTR6_SIZE                               0x1
#define _DMA1SPTRL_SPTR6_LENGTH                             0x1
#define _DMA1SPTRL_SPTR6_MASK                               0x40
#define _DMA1SPTRL_SPTR7_POSN                               0x7
#define _DMA1SPTRL_SPTR7_POSITION                           0x7
#define _DMA1SPTRL_SPTR7_SIZE                               0x1
#define _DMA1SPTRL_SPTR7_LENGTH                             0x1
#define _DMA1SPTRL_SPTR7_MASK                               0x80
#define _DMA1SPTRL_DMA1SPTR_POSN                            0x0
#define _DMA1SPTRL_DMA1SPTR_POSITION                        0x0
#define _DMA1SPTRL_DMA1SPTR_SIZE                            0x8
#define _DMA1SPTRL_DMA1SPTR_LENGTH                          0x8
#define _DMA1SPTRL_DMA1SPTR_MASK                            0xFF
#define _DMA1SPTRL_DMA1SPTR0_POSN                           0x0
#define _DMA1SPTRL_DMA1SPTR0_POSITION                       0x0
#define _DMA1SPTRL_DMA1SPTR0_SIZE                           0x1
#define _DMA1SPTRL_DMA1SPTR0_LENGTH                         0x1
#define _DMA1SPTRL_DMA1SPTR0_MASK                           0x1
#define _DMA1SPTRL_DMA1SPTR1_POSN                           0x1
#define _DMA1SPTRL_DMA1SPTR1_POSITION                       0x1
#define _DMA1SPTRL_DMA1SPTR1_SIZE                           0x1
#define _DMA1SPTRL_DMA1SPTR1_LENGTH                         0x1
#define _DMA1SPTRL_DMA1SPTR1_MASK                           0x2
#define _DMA1SPTRL_DMA1SPTR2_POSN                           0x2
#define _DMA1SPTRL_DMA1SPTR2_POSITION                       0x2
#define _DMA1SPTRL_DMA1SPTR2_SIZE                           0x1
#define _DMA1SPTRL_DMA1SPTR2_LENGTH                         0x1
#define _DMA1SPTRL_DMA1SPTR2_MASK                           0x4
#define _DMA1SPTRL_DMA1SPTR3_POSN                           0x3
#define _DMA1SPTRL_DMA1SPTR3_POSITION                       0x3
#define _DMA1SPTRL_DMA1SPTR3_SIZE                           0x1
#define _DMA1SPTRL_DMA1SPTR3_LENGTH                         0x1
#define _DMA1SPTRL_DMA1SPTR3_MASK                           0x8
#define _DMA1SPTRL_DMA1SPTR4_POSN                           0x4
#define _DMA1SPTRL_DMA1SPTR4_POSITION                       0x4
#define _DMA1SPTRL_DMA1SPTR4_SIZE                           0x1
#define _DMA1SPTRL_DMA1SPTR4_LENGTH                         0x1
#define _DMA1SPTRL_DMA1SPTR4_MASK                           0x10
#define _DMA1SPTRL_DMA1SPTR5_POSN                           0x5
#define _DMA1SPTRL_DMA1SPTR5_POSITION                       0x5
#define _DMA1SPTRL_DMA1SPTR5_SIZE                           0x1
#define _DMA1SPTRL_DMA1SPTR5_LENGTH                         0x1
#define _DMA1SPTRL_DMA1SPTR5_MASK                           0x20
#define _DMA1SPTRL_DMA1SPTR6_POSN                           0x6
#define _DMA1SPTRL_DMA1SPTR6_POSITION                       0x6
#define _DMA1SPTRL_DMA1SPTR6_SIZE                           0x1
#define _DMA1SPTRL_DMA1SPTR6_LENGTH                         0x1
#define _DMA1SPTRL_DMA1SPTR6_MASK                           0x40
#define _DMA1SPTRL_DMA1SPTR7_POSN                           0x7
#define _DMA1SPTRL_DMA1SPTR7_POSITION                       0x7
#define _DMA1SPTRL_DMA1SPTR7_SIZE                           0x1
#define _DMA1SPTRL_DMA1SPTR7_LENGTH                         0x1
#define _DMA1SPTRL_DMA1SPTR7_MASK                           0x80

// Register: DMA1SPTRH
#define DMA1SPTRH DMA1SPTRH
extern volatile unsigned char           DMA1SPTRH           __at(0x3BF5);
#ifndef _LIB_BUILD
asm("DMA1SPTRH equ 03BF5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SPTR                   :8;
    };
    struct {
        unsigned SPTR8                  :1;
        unsigned SPTR9                  :1;
        unsigned SPTR10                 :1;
        unsigned SPTR11                 :1;
        unsigned SPTR12                 :1;
        unsigned SPTR13                 :1;
        unsigned SPTR14                 :1;
        unsigned SPTR15                 :1;
    };
    struct {
        unsigned DMA1SPTR               :8;
    };
    struct {
        unsigned DMA1SPTR8              :1;
        unsigned DMA1SPTR9              :1;
        unsigned DMA1SPTR10             :1;
        unsigned DMA1SPTR11             :1;
        unsigned DMA1SPTR12             :1;
        unsigned DMA1SPTR13             :1;
        unsigned DMA1SPTR14             :1;
        unsigned DMA1SPTR15             :1;
    };
} DMA1SPTRHbits_t;
extern volatile DMA1SPTRHbits_t DMA1SPTRHbits __at(0x3BF5);
// bitfield macros
#define _DMA1SPTRH_SPTR_POSN                                0x0
#define _DMA1SPTRH_SPTR_POSITION                            0x0
#define _DMA1SPTRH_SPTR_SIZE                                0x8
#define _DMA1SPTRH_SPTR_LENGTH                              0x8
#define _DMA1SPTRH_SPTR_MASK                                0xFF
#define _DMA1SPTRH_SPTR8_POSN                               0x0
#define _DMA1SPTRH_SPTR8_POSITION                           0x0
#define _DMA1SPTRH_SPTR8_SIZE                               0x1
#define _DMA1SPTRH_SPTR8_LENGTH                             0x1
#define _DMA1SPTRH_SPTR8_MASK                               0x1
#define _DMA1SPTRH_SPTR9_POSN                               0x1
#define _DMA1SPTRH_SPTR9_POSITION                           0x1
#define _DMA1SPTRH_SPTR9_SIZE                               0x1
#define _DMA1SPTRH_SPTR9_LENGTH                             0x1
#define _DMA1SPTRH_SPTR9_MASK                               0x2
#define _DMA1SPTRH_SPTR10_POSN                              0x2
#define _DMA1SPTRH_SPTR10_POSITION                          0x2
#define _DMA1SPTRH_SPTR10_SIZE                              0x1
#define _DMA1SPTRH_SPTR10_LENGTH                            0x1
#define _DMA1SPTRH_SPTR10_MASK                              0x4
#define _DMA1SPTRH_SPTR11_POSN                              0x3
#define _DMA1SPTRH_SPTR11_POSITION                          0x3
#define _DMA1SPTRH_SPTR11_SIZE                              0x1
#define _DMA1SPTRH_SPTR11_LENGTH                            0x1
#define _DMA1SPTRH_SPTR11_MASK                              0x8
#define _DMA1SPTRH_SPTR12_POSN                              0x4
#define _DMA1SPTRH_SPTR12_POSITION                          0x4
#define _DMA1SPTRH_SPTR12_SIZE                              0x1
#define _DMA1SPTRH_SPTR12_LENGTH                            0x1
#define _DMA1SPTRH_SPTR12_MASK                              0x10
#define _DMA1SPTRH_SPTR13_POSN                              0x5
#define _DMA1SPTRH_SPTR13_POSITION                          0x5
#define _DMA1SPTRH_SPTR13_SIZE                              0x1
#define _DMA1SPTRH_SPTR13_LENGTH                            0x1
#define _DMA1SPTRH_SPTR13_MASK                              0x20
#define _DMA1SPTRH_SPTR14_POSN                              0x6
#define _DMA1SPTRH_SPTR14_POSITION                          0x6
#define _DMA1SPTRH_SPTR14_SIZE                              0x1
#define _DMA1SPTRH_SPTR14_LENGTH                            0x1
#define _DMA1SPTRH_SPTR14_MASK                              0x40
#define _DMA1SPTRH_SPTR15_POSN                              0x7
#define _DMA1SPTRH_SPTR15_POSITION                          0x7
#define _DMA1SPTRH_SPTR15_SIZE                              0x1
#define _DMA1SPTRH_SPTR15_LENGTH                            0x1
#define _DMA1SPTRH_SPTR15_MASK                              0x80
#define _DMA1SPTRH_DMA1SPTR_POSN                            0x0
#define _DMA1SPTRH_DMA1SPTR_POSITION                        0x0
#define _DMA1SPTRH_DMA1SPTR_SIZE                            0x8
#define _DMA1SPTRH_DMA1SPTR_LENGTH                          0x8
#define _DMA1SPTRH_DMA1SPTR_MASK                            0xFF
#define _DMA1SPTRH_DMA1SPTR8_POSN                           0x0
#define _DMA1SPTRH_DMA1SPTR8_POSITION                       0x0
#define _DMA1SPTRH_DMA1SPTR8_SIZE                           0x1
#define _DMA1SPTRH_DMA1SPTR8_LENGTH                         0x1
#define _DMA1SPTRH_DMA1SPTR8_MASK                           0x1
#define _DMA1SPTRH_DMA1SPTR9_POSN                           0x1
#define _DMA1SPTRH_DMA1SPTR9_POSITION                       0x1
#define _DMA1SPTRH_DMA1SPTR9_SIZE                           0x1
#define _DMA1SPTRH_DMA1SPTR9_LENGTH                         0x1
#define _DMA1SPTRH_DMA1SPTR9_MASK                           0x2
#define _DMA1SPTRH_DMA1SPTR10_POSN                          0x2
#define _DMA1SPTRH_DMA1SPTR10_POSITION                      0x2
#define _DMA1SPTRH_DMA1SPTR10_SIZE                          0x1
#define _DMA1SPTRH_DMA1SPTR10_LENGTH                        0x1
#define _DMA1SPTRH_DMA1SPTR10_MASK                          0x4
#define _DMA1SPTRH_DMA1SPTR11_POSN                          0x3
#define _DMA1SPTRH_DMA1SPTR11_POSITION                      0x3
#define _DMA1SPTRH_DMA1SPTR11_SIZE                          0x1
#define _DMA1SPTRH_DMA1SPTR11_LENGTH                        0x1
#define _DMA1SPTRH_DMA1SPTR11_MASK                          0x8
#define _DMA1SPTRH_DMA1SPTR12_POSN                          0x4
#define _DMA1SPTRH_DMA1SPTR12_POSITION                      0x4
#define _DMA1SPTRH_DMA1SPTR12_SIZE                          0x1
#define _DMA1SPTRH_DMA1SPTR12_LENGTH                        0x1
#define _DMA1SPTRH_DMA1SPTR12_MASK                          0x10
#define _DMA1SPTRH_DMA1SPTR13_POSN                          0x5
#define _DMA1SPTRH_DMA1SPTR13_POSITION                      0x5
#define _DMA1SPTRH_DMA1SPTR13_SIZE                          0x1
#define _DMA1SPTRH_DMA1SPTR13_LENGTH                        0x1
#define _DMA1SPTRH_DMA1SPTR13_MASK                          0x20
#define _DMA1SPTRH_DMA1SPTR14_POSN                          0x6
#define _DMA1SPTRH_DMA1SPTR14_POSITION                      0x6
#define _DMA1SPTRH_DMA1SPTR14_SIZE                          0x1
#define _DMA1SPTRH_DMA1SPTR14_LENGTH                        0x1
#define _DMA1SPTRH_DMA1SPTR14_MASK                          0x40
#define _DMA1SPTRH_DMA1SPTR15_POSN                          0x7
#define _DMA1SPTRH_DMA1SPTR15_POSITION                      0x7
#define _DMA1SPTRH_DMA1SPTR15_SIZE                          0x1
#define _DMA1SPTRH_DMA1SPTR15_LENGTH                        0x1
#define _DMA1SPTRH_DMA1SPTR15_MASK                          0x80

// Register: DMA1SPTRU
#define DMA1SPTRU DMA1SPTRU
extern volatile unsigned char           DMA1SPTRU           __at(0x3BF6);
#ifndef _LIB_BUILD
asm("DMA1SPTRU equ 03BF6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SPTR                   :6;
    };
    struct {
        unsigned SPTR16                 :1;
        unsigned SPTR17                 :1;
        unsigned SPTR18                 :1;
        unsigned SPTR19                 :1;
        unsigned SPTR20                 :1;
        unsigned SPTR21                 :1;
    };
    struct {
        unsigned DMA1SPTR               :6;
    };
    struct {
        unsigned DMA1SPTR16             :1;
        unsigned DMA1SPTR17             :1;
        unsigned DMA1SPTR18             :1;
        unsigned DMA1SPTR19             :1;
        unsigned DMA1SPTR20             :1;
        unsigned DMA1SPTR21             :1;
    };
} DMA1SPTRUbits_t;
extern volatile DMA1SPTRUbits_t DMA1SPTRUbits __at(0x3BF6);
// bitfield macros
#define _DMA1SPTRU_SPTR_POSN                                0x0
#define _DMA1SPTRU_SPTR_POSITION                            0x0
#define _DMA1SPTRU_SPTR_SIZE                                0x6
#define _DMA1SPTRU_SPTR_LENGTH                              0x6
#define _DMA1SPTRU_SPTR_MASK                                0x3F
#define _DMA1SPTRU_SPTR16_POSN                              0x0
#define _DMA1SPTRU_SPTR16_POSITION                          0x0
#define _DMA1SPTRU_SPTR16_SIZE                              0x1
#define _DMA1SPTRU_SPTR16_LENGTH                            0x1
#define _DMA1SPTRU_SPTR16_MASK                              0x1
#define _DMA1SPTRU_SPTR17_POSN                              0x1
#define _DMA1SPTRU_SPTR17_POSITION                          0x1
#define _DMA1SPTRU_SPTR17_SIZE                              0x1
#define _DMA1SPTRU_SPTR17_LENGTH                            0x1
#define _DMA1SPTRU_SPTR17_MASK                              0x2
#define _DMA1SPTRU_SPTR18_POSN                              0x2
#define _DMA1SPTRU_SPTR18_POSITION                          0x2
#define _DMA1SPTRU_SPTR18_SIZE                              0x1
#define _DMA1SPTRU_SPTR18_LENGTH                            0x1
#define _DMA1SPTRU_SPTR18_MASK                              0x4
#define _DMA1SPTRU_SPTR19_POSN                              0x3
#define _DMA1SPTRU_SPTR19_POSITION                          0x3
#define _DMA1SPTRU_SPTR19_SIZE                              0x1
#define _DMA1SPTRU_SPTR19_LENGTH                            0x1
#define _DMA1SPTRU_SPTR19_MASK                              0x8
#define _DMA1SPTRU_SPTR20_POSN                              0x4
#define _DMA1SPTRU_SPTR20_POSITION                          0x4
#define _DMA1SPTRU_SPTR20_SIZE                              0x1
#define _DMA1SPTRU_SPTR20_LENGTH                            0x1
#define _DMA1SPTRU_SPTR20_MASK                              0x10
#define _DMA1SPTRU_SPTR21_POSN                              0x5
#define _DMA1SPTRU_SPTR21_POSITION                          0x5
#define _DMA1SPTRU_SPTR21_SIZE                              0x1
#define _DMA1SPTRU_SPTR21_LENGTH                            0x1
#define _DMA1SPTRU_SPTR21_MASK                              0x20
#define _DMA1SPTRU_DMA1SPTR_POSN                            0x0
#define _DMA1SPTRU_DMA1SPTR_POSITION                        0x0
#define _DMA1SPTRU_DMA1SPTR_SIZE                            0x6
#define _DMA1SPTRU_DMA1SPTR_LENGTH                          0x6
#define _DMA1SPTRU_DMA1SPTR_MASK                            0x3F
#define _DMA1SPTRU_DMA1SPTR16_POSN                          0x0
#define _DMA1SPTRU_DMA1SPTR16_POSITION                      0x0
#define _DMA1SPTRU_DMA1SPTR16_SIZE                          0x1
#define _DMA1SPTRU_DMA1SPTR16_LENGTH                        0x1
#define _DMA1SPTRU_DMA1SPTR16_MASK                          0x1
#define _DMA1SPTRU_DMA1SPTR17_POSN                          0x1
#define _DMA1SPTRU_DMA1SPTR17_POSITION                      0x1
#define _DMA1SPTRU_DMA1SPTR17_SIZE                          0x1
#define _DMA1SPTRU_DMA1SPTR17_LENGTH                        0x1
#define _DMA1SPTRU_DMA1SPTR17_MASK                          0x2
#define _DMA1SPTRU_DMA1SPTR18_POSN                          0x2
#define _DMA1SPTRU_DMA1SPTR18_POSITION                      0x2
#define _DMA1SPTRU_DMA1SPTR18_SIZE                          0x1
#define _DMA1SPTRU_DMA1SPTR18_LENGTH                        0x1
#define _DMA1SPTRU_DMA1SPTR18_MASK                          0x4
#define _DMA1SPTRU_DMA1SPTR19_POSN                          0x3
#define _DMA1SPTRU_DMA1SPTR19_POSITION                      0x3
#define _DMA1SPTRU_DMA1SPTR19_SIZE                          0x1
#define _DMA1SPTRU_DMA1SPTR19_LENGTH                        0x1
#define _DMA1SPTRU_DMA1SPTR19_MASK                          0x8
#define _DMA1SPTRU_DMA1SPTR20_POSN                          0x4
#define _DMA1SPTRU_DMA1SPTR20_POSITION                      0x4
#define _DMA1SPTRU_DMA1SPTR20_SIZE                          0x1
#define _DMA1SPTRU_DMA1SPTR20_LENGTH                        0x1
#define _DMA1SPTRU_DMA1SPTR20_MASK                          0x10
#define _DMA1SPTRU_DMA1SPTR21_POSN                          0x5
#define _DMA1SPTRU_DMA1SPTR21_POSITION                      0x5
#define _DMA1SPTRU_DMA1SPTR21_SIZE                          0x1
#define _DMA1SPTRU_DMA1SPTR21_LENGTH                        0x1
#define _DMA1SPTRU_DMA1SPTR21_MASK                          0x20

// Register: DMA1SSZ
#define DMA1SSZ DMA1SSZ
extern volatile unsigned short          DMA1SSZ             __at(0x3BF7);
#ifndef _LIB_BUILD
asm("DMA1SSZ equ 03BF7h");
#endif

// Register: DMA1SSZL
#define DMA1SSZL DMA1SSZL
extern volatile unsigned char           DMA1SSZL            __at(0x3BF7);
#ifndef _LIB_BUILD
asm("DMA1SSZL equ 03BF7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSZ                    :8;
    };
    struct {
        unsigned DMA1SSZ                :8;
    };
    struct {
        unsigned SSZ0                   :1;
        unsigned SSZ1                   :1;
        unsigned SSZ2                   :1;
        unsigned SSZ3                   :1;
        unsigned SSZ4                   :1;
        unsigned SSZ5                   :1;
        unsigned SSZ6                   :1;
        unsigned SSZ7                   :1;
    };
    struct {
        unsigned DMA1SSZ0               :1;
        unsigned DMA1SSZ1               :1;
        unsigned DMA1SSZ2               :1;
        unsigned DMA1SSZ3               :1;
        unsigned DMA1SSZ4               :1;
        unsigned DMA1SSZ5               :1;
        unsigned DMA1SSZ6               :1;
        unsigned DMA1SSZ7               :1;
    };
} DMA1SSZLbits_t;
extern volatile DMA1SSZLbits_t DMA1SSZLbits __at(0x3BF7);
// bitfield macros
#define _DMA1SSZL_SSZ_POSN                                  0x0
#define _DMA1SSZL_SSZ_POSITION                              0x0
#define _DMA1SSZL_SSZ_SIZE                                  0x8
#define _DMA1SSZL_SSZ_LENGTH                                0x8
#define _DMA1SSZL_SSZ_MASK                                  0xFF
#define _DMA1SSZL_DMA1SSZ_POSN                              0x0
#define _DMA1SSZL_DMA1SSZ_POSITION                          0x0
#define _DMA1SSZL_DMA1SSZ_SIZE                              0x8
#define _DMA1SSZL_DMA1SSZ_LENGTH                            0x8
#define _DMA1SSZL_DMA1SSZ_MASK                              0xFF
#define _DMA1SSZL_SSZ0_POSN                                 0x0
#define _DMA1SSZL_SSZ0_POSITION                             0x0
#define _DMA1SSZL_SSZ0_SIZE                                 0x1
#define _DMA1SSZL_SSZ0_LENGTH                               0x1
#define _DMA1SSZL_SSZ0_MASK                                 0x1
#define _DMA1SSZL_SSZ1_POSN                                 0x1
#define _DMA1SSZL_SSZ1_POSITION                             0x1
#define _DMA1SSZL_SSZ1_SIZE                                 0x1
#define _DMA1SSZL_SSZ1_LENGTH                               0x1
#define _DMA1SSZL_SSZ1_MASK                                 0x2
#define _DMA1SSZL_SSZ2_POSN                                 0x2
#define _DMA1SSZL_SSZ2_POSITION                             0x2
#define _DMA1SSZL_SSZ2_SIZE                                 0x1
#define _DMA1SSZL_SSZ2_LENGTH                               0x1
#define _DMA1SSZL_SSZ2_MASK                                 0x4
#define _DMA1SSZL_SSZ3_POSN                                 0x3
#define _DMA1SSZL_SSZ3_POSITION                             0x3
#define _DMA1SSZL_SSZ3_SIZE                                 0x1
#define _DMA1SSZL_SSZ3_LENGTH                               0x1
#define _DMA1SSZL_SSZ3_MASK                                 0x8
#define _DMA1SSZL_SSZ4_POSN                                 0x4
#define _DMA1SSZL_SSZ4_POSITION                             0x4
#define _DMA1SSZL_SSZ4_SIZE                                 0x1
#define _DMA1SSZL_SSZ4_LENGTH                               0x1
#define _DMA1SSZL_SSZ4_MASK                                 0x10
#define _DMA1SSZL_SSZ5_POSN                                 0x5
#define _DMA1SSZL_SSZ5_POSITION                             0x5
#define _DMA1SSZL_SSZ5_SIZE                                 0x1
#define _DMA1SSZL_SSZ5_LENGTH                               0x1
#define _DMA1SSZL_SSZ5_MASK                                 0x20
#define _DMA1SSZL_SSZ6_POSN                                 0x6
#define _DMA1SSZL_SSZ6_POSITION                             0x6
#define _DMA1SSZL_SSZ6_SIZE                                 0x1
#define _DMA1SSZL_SSZ6_LENGTH                               0x1
#define _DMA1SSZL_SSZ6_MASK                                 0x40
#define _DMA1SSZL_SSZ7_POSN                                 0x7
#define _DMA1SSZL_SSZ7_POSITION                             0x7
#define _DMA1SSZL_SSZ7_SIZE                                 0x1
#define _DMA1SSZL_SSZ7_LENGTH                               0x1
#define _DMA1SSZL_SSZ7_MASK                                 0x80
#define _DMA1SSZL_DMA1SSZ0_POSN                             0x0
#define _DMA1SSZL_DMA1SSZ0_POSITION                         0x0
#define _DMA1SSZL_DMA1SSZ0_SIZE                             0x1
#define _DMA1SSZL_DMA1SSZ0_LENGTH                           0x1
#define _DMA1SSZL_DMA1SSZ0_MASK                             0x1
#define _DMA1SSZL_DMA1SSZ1_POSN                             0x1
#define _DMA1SSZL_DMA1SSZ1_POSITION                         0x1
#define _DMA1SSZL_DMA1SSZ1_SIZE                             0x1
#define _DMA1SSZL_DMA1SSZ1_LENGTH                           0x1
#define _DMA1SSZL_DMA1SSZ1_MASK                             0x2
#define _DMA1SSZL_DMA1SSZ2_POSN                             0x2
#define _DMA1SSZL_DMA1SSZ2_POSITION                         0x2
#define _DMA1SSZL_DMA1SSZ2_SIZE                             0x1
#define _DMA1SSZL_DMA1SSZ2_LENGTH                           0x1
#define _DMA1SSZL_DMA1SSZ2_MASK                             0x4
#define _DMA1SSZL_DMA1SSZ3_POSN                             0x3
#define _DMA1SSZL_DMA1SSZ3_POSITION                         0x3
#define _DMA1SSZL_DMA1SSZ3_SIZE                             0x1
#define _DMA1SSZL_DMA1SSZ3_LENGTH                           0x1
#define _DMA1SSZL_DMA1SSZ3_MASK                             0x8
#define _DMA1SSZL_DMA1SSZ4_POSN                             0x4
#define _DMA1SSZL_DMA1SSZ4_POSITION                         0x4
#define _DMA1SSZL_DMA1SSZ4_SIZE                             0x1
#define _DMA1SSZL_DMA1SSZ4_LENGTH                           0x1
#define _DMA1SSZL_DMA1SSZ4_MASK                             0x10
#define _DMA1SSZL_DMA1SSZ5_POSN                             0x5
#define _DMA1SSZL_DMA1SSZ5_POSITION                         0x5
#define _DMA1SSZL_DMA1SSZ5_SIZE                             0x1
#define _DMA1SSZL_DMA1SSZ5_LENGTH                           0x1
#define _DMA1SSZL_DMA1SSZ5_MASK                             0x20
#define _DMA1SSZL_DMA1SSZ6_POSN                             0x6
#define _DMA1SSZL_DMA1SSZ6_POSITION                         0x6
#define _DMA1SSZL_DMA1SSZ6_SIZE                             0x1
#define _DMA1SSZL_DMA1SSZ6_LENGTH                           0x1
#define _DMA1SSZL_DMA1SSZ6_MASK                             0x40
#define _DMA1SSZL_DMA1SSZ7_POSN                             0x7
#define _DMA1SSZL_DMA1SSZ7_POSITION                         0x7
#define _DMA1SSZL_DMA1SSZ7_SIZE                             0x1
#define _DMA1SSZL_DMA1SSZ7_LENGTH                           0x1
#define _DMA1SSZL_DMA1SSZ7_MASK                             0x80

// Register: DMA1SSZH
#define DMA1SSZH DMA1SSZH
extern volatile unsigned char           DMA1SSZH            __at(0x3BF8);
#ifndef _LIB_BUILD
asm("DMA1SSZH equ 03BF8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSZ                    :4;
    };
    struct {
        unsigned DMA1SSZ                :4;
    };
    struct {
        unsigned SSZ8                   :1;
        unsigned SSZ9                   :1;
        unsigned SSZ10                  :1;
        unsigned SSZ11                  :1;
    };
    struct {
        unsigned DMA1SSZ8               :1;
        unsigned DMA1SSZ9               :1;
        unsigned DMA1SSZ10              :1;
        unsigned DMA1SSZ11              :1;
    };
} DMA1SSZHbits_t;
extern volatile DMA1SSZHbits_t DMA1SSZHbits __at(0x3BF8);
// bitfield macros
#define _DMA1SSZH_SSZ_POSN                                  0x0
#define _DMA1SSZH_SSZ_POSITION                              0x0
#define _DMA1SSZH_SSZ_SIZE                                  0x4
#define _DMA1SSZH_SSZ_LENGTH                                0x4
#define _DMA1SSZH_SSZ_MASK                                  0xF
#define _DMA1SSZH_DMA1SSZ_POSN                              0x0
#define _DMA1SSZH_DMA1SSZ_POSITION                          0x0
#define _DMA1SSZH_DMA1SSZ_SIZE                              0x4
#define _DMA1SSZH_DMA1SSZ_LENGTH                            0x4
#define _DMA1SSZH_DMA1SSZ_MASK                              0xF
#define _DMA1SSZH_SSZ8_POSN                                 0x0
#define _DMA1SSZH_SSZ8_POSITION                             0x0
#define _DMA1SSZH_SSZ8_SIZE                                 0x1
#define _DMA1SSZH_SSZ8_LENGTH                               0x1
#define _DMA1SSZH_SSZ8_MASK                                 0x1
#define _DMA1SSZH_SSZ9_POSN                                 0x1
#define _DMA1SSZH_SSZ9_POSITION                             0x1
#define _DMA1SSZH_SSZ9_SIZE                                 0x1
#define _DMA1SSZH_SSZ9_LENGTH                               0x1
#define _DMA1SSZH_SSZ9_MASK                                 0x2
#define _DMA1SSZH_SSZ10_POSN                                0x2
#define _DMA1SSZH_SSZ10_POSITION                            0x2
#define _DMA1SSZH_SSZ10_SIZE                                0x1
#define _DMA1SSZH_SSZ10_LENGTH                              0x1
#define _DMA1SSZH_SSZ10_MASK                                0x4
#define _DMA1SSZH_SSZ11_POSN                                0x3
#define _DMA1SSZH_SSZ11_POSITION                            0x3
#define _DMA1SSZH_SSZ11_SIZE                                0x1
#define _DMA1SSZH_SSZ11_LENGTH                              0x1
#define _DMA1SSZH_SSZ11_MASK                                0x8
#define _DMA1SSZH_DMA1SSZ8_POSN                             0x0
#define _DMA1SSZH_DMA1SSZ8_POSITION                         0x0
#define _DMA1SSZH_DMA1SSZ8_SIZE                             0x1
#define _DMA1SSZH_DMA1SSZ8_LENGTH                           0x1
#define _DMA1SSZH_DMA1SSZ8_MASK                             0x1
#define _DMA1SSZH_DMA1SSZ9_POSN                             0x1
#define _DMA1SSZH_DMA1SSZ9_POSITION                         0x1
#define _DMA1SSZH_DMA1SSZ9_SIZE                             0x1
#define _DMA1SSZH_DMA1SSZ9_LENGTH                           0x1
#define _DMA1SSZH_DMA1SSZ9_MASK                             0x2
#define _DMA1SSZH_DMA1SSZ10_POSN                            0x2
#define _DMA1SSZH_DMA1SSZ10_POSITION                        0x2
#define _DMA1SSZH_DMA1SSZ10_SIZE                            0x1
#define _DMA1SSZH_DMA1SSZ10_LENGTH                          0x1
#define _DMA1SSZH_DMA1SSZ10_MASK                            0x4
#define _DMA1SSZH_DMA1SSZ11_POSN                            0x3
#define _DMA1SSZH_DMA1SSZ11_POSITION                        0x3
#define _DMA1SSZH_DMA1SSZ11_SIZE                            0x1
#define _DMA1SSZH_DMA1SSZ11_LENGTH                          0x1
#define _DMA1SSZH_DMA1SSZ11_MASK                            0x8

// Register: DMA1SSA
#define DMA1SSA DMA1SSA
#ifndef __CCI__
extern volatile __uint24                DMA1SSA             __at(0x3BF9);
#endif
#ifndef _LIB_BUILD
asm("DMA1SSA equ 03BF9h");
#endif

// Register: DMA1SSAL
#define DMA1SSAL DMA1SSAL
extern volatile unsigned char           DMA1SSAL            __at(0x3BF9);
#ifndef _LIB_BUILD
asm("DMA1SSAL equ 03BF9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSA                    :8;
    };
    struct {
        unsigned SSA0                   :1;
        unsigned SSA1                   :1;
        unsigned SSA2                   :1;
        unsigned SSA3                   :1;
        unsigned SSA4                   :1;
        unsigned SSA5                   :1;
        unsigned SSA6                   :1;
        unsigned SSA7                   :1;
    };
    struct {
        unsigned DMA1SSA                :8;
    };
    struct {
        unsigned DMA1SSA0               :1;
        unsigned DMA1SSA1               :1;
        unsigned DMA1SSA2               :1;
        unsigned DMA1SSA3               :1;
        unsigned DMA1SSA4               :1;
        unsigned DMA1SSA5               :1;
        unsigned DMA1SSA6               :1;
        unsigned DMA1SSA7               :1;
    };
} DMA1SSALbits_t;
extern volatile DMA1SSALbits_t DMA1SSALbits __at(0x3BF9);
// bitfield macros
#define _DMA1SSAL_SSA_POSN                                  0x0
#define _DMA1SSAL_SSA_POSITION                              0x0
#define _DMA1SSAL_SSA_SIZE                                  0x8
#define _DMA1SSAL_SSA_LENGTH                                0x8
#define _DMA1SSAL_SSA_MASK                                  0xFF
#define _DMA1SSAL_SSA0_POSN                                 0x0
#define _DMA1SSAL_SSA0_POSITION                             0x0
#define _DMA1SSAL_SSA0_SIZE                                 0x1
#define _DMA1SSAL_SSA0_LENGTH                               0x1
#define _DMA1SSAL_SSA0_MASK                                 0x1
#define _DMA1SSAL_SSA1_POSN                                 0x1
#define _DMA1SSAL_SSA1_POSITION                             0x1
#define _DMA1SSAL_SSA1_SIZE                                 0x1
#define _DMA1SSAL_SSA1_LENGTH                               0x1
#define _DMA1SSAL_SSA1_MASK                                 0x2
#define _DMA1SSAL_SSA2_POSN                                 0x2
#define _DMA1SSAL_SSA2_POSITION                             0x2
#define _DMA1SSAL_SSA2_SIZE                                 0x1
#define _DMA1SSAL_SSA2_LENGTH                               0x1
#define _DMA1SSAL_SSA2_MASK                                 0x4
#define _DMA1SSAL_SSA3_POSN                                 0x3
#define _DMA1SSAL_SSA3_POSITION                             0x3
#define _DMA1SSAL_SSA3_SIZE                                 0x1
#define _DMA1SSAL_SSA3_LENGTH                               0x1
#define _DMA1SSAL_SSA3_MASK                                 0x8
#define _DMA1SSAL_SSA4_POSN                                 0x4
#define _DMA1SSAL_SSA4_POSITION                             0x4
#define _DMA1SSAL_SSA4_SIZE                                 0x1
#define _DMA1SSAL_SSA4_LENGTH                               0x1
#define _DMA1SSAL_SSA4_MASK                                 0x10
#define _DMA1SSAL_SSA5_POSN                                 0x5
#define _DMA1SSAL_SSA5_POSITION                             0x5
#define _DMA1SSAL_SSA5_SIZE                                 0x1
#define _DMA1SSAL_SSA5_LENGTH                               0x1
#define _DMA1SSAL_SSA5_MASK                                 0x20
#define _DMA1SSAL_SSA6_POSN                                 0x6
#define _DMA1SSAL_SSA6_POSITION                             0x6
#define _DMA1SSAL_SSA6_SIZE                                 0x1
#define _DMA1SSAL_SSA6_LENGTH                               0x1
#define _DMA1SSAL_SSA6_MASK                                 0x40
#define _DMA1SSAL_SSA7_POSN                                 0x7
#define _DMA1SSAL_SSA7_POSITION                             0x7
#define _DMA1SSAL_SSA7_SIZE                                 0x1
#define _DMA1SSAL_SSA7_LENGTH                               0x1
#define _DMA1SSAL_SSA7_MASK                                 0x80
#define _DMA1SSAL_DMA1SSA_POSN                              0x0
#define _DMA1SSAL_DMA1SSA_POSITION                          0x0
#define _DMA1SSAL_DMA1SSA_SIZE                              0x8
#define _DMA1SSAL_DMA1SSA_LENGTH                            0x8
#define _DMA1SSAL_DMA1SSA_MASK                              0xFF
#define _DMA1SSAL_DMA1SSA0_POSN                             0x0
#define _DMA1SSAL_DMA1SSA0_POSITION                         0x0
#define _DMA1SSAL_DMA1SSA0_SIZE                             0x1
#define _DMA1SSAL_DMA1SSA0_LENGTH                           0x1
#define _DMA1SSAL_DMA1SSA0_MASK                             0x1
#define _DMA1SSAL_DMA1SSA1_POSN                             0x1
#define _DMA1SSAL_DMA1SSA1_POSITION                         0x1
#define _DMA1SSAL_DMA1SSA1_SIZE                             0x1
#define _DMA1SSAL_DMA1SSA1_LENGTH                           0x1
#define _DMA1SSAL_DMA1SSA1_MASK                             0x2
#define _DMA1SSAL_DMA1SSA2_POSN                             0x2
#define _DMA1SSAL_DMA1SSA2_POSITION                         0x2
#define _DMA1SSAL_DMA1SSA2_SIZE                             0x1
#define _DMA1SSAL_DMA1SSA2_LENGTH                           0x1
#define _DMA1SSAL_DMA1SSA2_MASK                             0x4
#define _DMA1SSAL_DMA1SSA3_POSN                             0x3
#define _DMA1SSAL_DMA1SSA3_POSITION                         0x3
#define _DMA1SSAL_DMA1SSA3_SIZE                             0x1
#define _DMA1SSAL_DMA1SSA3_LENGTH                           0x1
#define _DMA1SSAL_DMA1SSA3_MASK                             0x8
#define _DMA1SSAL_DMA1SSA4_POSN                             0x4
#define _DMA1SSAL_DMA1SSA4_POSITION                         0x4
#define _DMA1SSAL_DMA1SSA4_SIZE                             0x1
#define _DMA1SSAL_DMA1SSA4_LENGTH                           0x1
#define _DMA1SSAL_DMA1SSA4_MASK                             0x10
#define _DMA1SSAL_DMA1SSA5_POSN                             0x5
#define _DMA1SSAL_DMA1SSA5_POSITION                         0x5
#define _DMA1SSAL_DMA1SSA5_SIZE                             0x1
#define _DMA1SSAL_DMA1SSA5_LENGTH                           0x1
#define _DMA1SSAL_DMA1SSA5_MASK                             0x20
#define _DMA1SSAL_DMA1SSA6_POSN                             0x6
#define _DMA1SSAL_DMA1SSA6_POSITION                         0x6
#define _DMA1SSAL_DMA1SSA6_SIZE                             0x1
#define _DMA1SSAL_DMA1SSA6_LENGTH                           0x1
#define _DMA1SSAL_DMA1SSA6_MASK                             0x40
#define _DMA1SSAL_DMA1SSA7_POSN                             0x7
#define _DMA1SSAL_DMA1SSA7_POSITION                         0x7
#define _DMA1SSAL_DMA1SSA7_SIZE                             0x1
#define _DMA1SSAL_DMA1SSA7_LENGTH                           0x1
#define _DMA1SSAL_DMA1SSA7_MASK                             0x80

// Register: DMA1SSAH
#define DMA1SSAH DMA1SSAH
extern volatile unsigned char           DMA1SSAH            __at(0x3BFA);
#ifndef _LIB_BUILD
asm("DMA1SSAH equ 03BFAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSA                    :8;
    };
    struct {
        unsigned SSA8                   :1;
        unsigned SSA9                   :1;
        unsigned SSA10                  :1;
        unsigned SSA11                  :1;
        unsigned SSA12                  :1;
        unsigned SSA13                  :1;
        unsigned SSA14                  :1;
        unsigned SSA15                  :1;
    };
    struct {
        unsigned DMA1SSA                :8;
    };
    struct {
        unsigned DMA1SSA8               :1;
        unsigned DMA1SSA9               :1;
        unsigned DMA1SSA10              :1;
        unsigned DMA1SSA11              :1;
        unsigned DMA1SSA12              :1;
        unsigned DMA1SSA13              :1;
        unsigned DMA1SSA14              :1;
        unsigned DMA1SSA15              :1;
    };
} DMA1SSAHbits_t;
extern volatile DMA1SSAHbits_t DMA1SSAHbits __at(0x3BFA);
// bitfield macros
#define _DMA1SSAH_SSA_POSN                                  0x0
#define _DMA1SSAH_SSA_POSITION                              0x0
#define _DMA1SSAH_SSA_SIZE                                  0x8
#define _DMA1SSAH_SSA_LENGTH                                0x8
#define _DMA1SSAH_SSA_MASK                                  0xFF
#define _DMA1SSAH_SSA8_POSN                                 0x0
#define _DMA1SSAH_SSA8_POSITION                             0x0
#define _DMA1SSAH_SSA8_SIZE                                 0x1
#define _DMA1SSAH_SSA8_LENGTH                               0x1
#define _DMA1SSAH_SSA8_MASK                                 0x1
#define _DMA1SSAH_SSA9_POSN                                 0x1
#define _DMA1SSAH_SSA9_POSITION                             0x1
#define _DMA1SSAH_SSA9_SIZE                                 0x1
#define _DMA1SSAH_SSA9_LENGTH                               0x1
#define _DMA1SSAH_SSA9_MASK                                 0x2
#define _DMA1SSAH_SSA10_POSN                                0x2
#define _DMA1SSAH_SSA10_POSITION                            0x2
#define _DMA1SSAH_SSA10_SIZE                                0x1
#define _DMA1SSAH_SSA10_LENGTH                              0x1
#define _DMA1SSAH_SSA10_MASK                                0x4
#define _DMA1SSAH_SSA11_POSN                                0x3
#define _DMA1SSAH_SSA11_POSITION                            0x3
#define _DMA1SSAH_SSA11_SIZE                                0x1
#define _DMA1SSAH_SSA11_LENGTH                              0x1
#define _DMA1SSAH_SSA11_MASK                                0x8
#define _DMA1SSAH_SSA12_POSN                                0x4
#define _DMA1SSAH_SSA12_POSITION                            0x4
#define _DMA1SSAH_SSA12_SIZE                                0x1
#define _DMA1SSAH_SSA12_LENGTH                              0x1
#define _DMA1SSAH_SSA12_MASK                                0x10
#define _DMA1SSAH_SSA13_POSN                                0x5
#define _DMA1SSAH_SSA13_POSITION                            0x5
#define _DMA1SSAH_SSA13_SIZE                                0x1
#define _DMA1SSAH_SSA13_LENGTH                              0x1
#define _DMA1SSAH_SSA13_MASK                                0x20
#define _DMA1SSAH_SSA14_POSN                                0x6
#define _DMA1SSAH_SSA14_POSITION                            0x6
#define _DMA1SSAH_SSA14_SIZE                                0x1
#define _DMA1SSAH_SSA14_LENGTH                              0x1
#define _DMA1SSAH_SSA14_MASK                                0x40
#define _DMA1SSAH_SSA15_POSN                                0x7
#define _DMA1SSAH_SSA15_POSITION                            0x7
#define _DMA1SSAH_SSA15_SIZE                                0x1
#define _DMA1SSAH_SSA15_LENGTH                              0x1
#define _DMA1SSAH_SSA15_MASK                                0x80
#define _DMA1SSAH_DMA1SSA_POSN                              0x0
#define _DMA1SSAH_DMA1SSA_POSITION                          0x0
#define _DMA1SSAH_DMA1SSA_SIZE                              0x8
#define _DMA1SSAH_DMA1SSA_LENGTH                            0x8
#define _DMA1SSAH_DMA1SSA_MASK                              0xFF
#define _DMA1SSAH_DMA1SSA8_POSN                             0x0
#define _DMA1SSAH_DMA1SSA8_POSITION                         0x0
#define _DMA1SSAH_DMA1SSA8_SIZE                             0x1
#define _DMA1SSAH_DMA1SSA8_LENGTH                           0x1
#define _DMA1SSAH_DMA1SSA8_MASK                             0x1
#define _DMA1SSAH_DMA1SSA9_POSN                             0x1
#define _DMA1SSAH_DMA1SSA9_POSITION                         0x1
#define _DMA1SSAH_DMA1SSA9_SIZE                             0x1
#define _DMA1SSAH_DMA1SSA9_LENGTH                           0x1
#define _DMA1SSAH_DMA1SSA9_MASK                             0x2
#define _DMA1SSAH_DMA1SSA10_POSN                            0x2
#define _DMA1SSAH_DMA1SSA10_POSITION                        0x2
#define _DMA1SSAH_DMA1SSA10_SIZE                            0x1
#define _DMA1SSAH_DMA1SSA10_LENGTH                          0x1
#define _DMA1SSAH_DMA1SSA10_MASK                            0x4
#define _DMA1SSAH_DMA1SSA11_POSN                            0x3
#define _DMA1SSAH_DMA1SSA11_POSITION                        0x3
#define _DMA1SSAH_DMA1SSA11_SIZE                            0x1
#define _DMA1SSAH_DMA1SSA11_LENGTH                          0x1
#define _DMA1SSAH_DMA1SSA11_MASK                            0x8
#define _DMA1SSAH_DMA1SSA12_POSN                            0x4
#define _DMA1SSAH_DMA1SSA12_POSITION                        0x4
#define _DMA1SSAH_DMA1SSA12_SIZE                            0x1
#define _DMA1SSAH_DMA1SSA12_LENGTH                          0x1
#define _DMA1SSAH_DMA1SSA12_MASK                            0x10
#define _DMA1SSAH_DMA1SSA13_POSN                            0x5
#define _DMA1SSAH_DMA1SSA13_POSITION                        0x5
#define _DMA1SSAH_DMA1SSA13_SIZE                            0x1
#define _DMA1SSAH_DMA1SSA13_LENGTH                          0x1
#define _DMA1SSAH_DMA1SSA13_MASK                            0x20
#define _DMA1SSAH_DMA1SSA14_POSN                            0x6
#define _DMA1SSAH_DMA1SSA14_POSITION                        0x6
#define _DMA1SSAH_DMA1SSA14_SIZE                            0x1
#define _DMA1SSAH_DMA1SSA14_LENGTH                          0x1
#define _DMA1SSAH_DMA1SSA14_MASK                            0x40
#define _DMA1SSAH_DMA1SSA15_POSN                            0x7
#define _DMA1SSAH_DMA1SSA15_POSITION                        0x7
#define _DMA1SSAH_DMA1SSA15_SIZE                            0x1
#define _DMA1SSAH_DMA1SSA15_LENGTH                          0x1
#define _DMA1SSAH_DMA1SSA15_MASK                            0x80

// Register: DMA1SSAU
#define DMA1SSAU DMA1SSAU
extern volatile unsigned char           DMA1SSAU            __at(0x3BFB);
#ifndef _LIB_BUILD
asm("DMA1SSAU equ 03BFBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSA                    :6;
    };
    struct {
        unsigned SSA16                  :1;
        unsigned SSA17                  :1;
        unsigned SSA18                  :1;
        unsigned SSA19                  :1;
        unsigned SSA20                  :1;
        unsigned SSA21                  :1;
    };
    struct {
        unsigned DMA1SSA                :6;
    };
    struct {
        unsigned DMA1SSA16              :1;
        unsigned DMA1SSA17              :1;
        unsigned DMA1SSA18              :1;
        unsigned DMA1SSA19              :1;
        unsigned DMA1SSA20              :1;
        unsigned DMA1SSA21              :1;
    };
} DMA1SSAUbits_t;
extern volatile DMA1SSAUbits_t DMA1SSAUbits __at(0x3BFB);
// bitfield macros
#define _DMA1SSAU_SSA_POSN                                  0x0
#define _DMA1SSAU_SSA_POSITION                              0x0
#define _DMA1SSAU_SSA_SIZE                                  0x6
#define _DMA1SSAU_SSA_LENGTH                                0x6
#define _DMA1SSAU_SSA_MASK                                  0x3F
#define _DMA1SSAU_SSA16_POSN                                0x0
#define _DMA1SSAU_SSA16_POSITION                            0x0
#define _DMA1SSAU_SSA16_SIZE                                0x1
#define _DMA1SSAU_SSA16_LENGTH                              0x1
#define _DMA1SSAU_SSA16_MASK                                0x1
#define _DMA1SSAU_SSA17_POSN                                0x1
#define _DMA1SSAU_SSA17_POSITION                            0x1
#define _DMA1SSAU_SSA17_SIZE                                0x1
#define _DMA1SSAU_SSA17_LENGTH                              0x1
#define _DMA1SSAU_SSA17_MASK                                0x2
#define _DMA1SSAU_SSA18_POSN                                0x2
#define _DMA1SSAU_SSA18_POSITION                            0x2
#define _DMA1SSAU_SSA18_SIZE                                0x1
#define _DMA1SSAU_SSA18_LENGTH                              0x1
#define _DMA1SSAU_SSA18_MASK                                0x4
#define _DMA1SSAU_SSA19_POSN                                0x3
#define _DMA1SSAU_SSA19_POSITION                            0x3
#define _DMA1SSAU_SSA19_SIZE                                0x1
#define _DMA1SSAU_SSA19_LENGTH                              0x1
#define _DMA1SSAU_SSA19_MASK                                0x8
#define _DMA1SSAU_SSA20_POSN                                0x4
#define _DMA1SSAU_SSA20_POSITION                            0x4
#define _DMA1SSAU_SSA20_SIZE                                0x1
#define _DMA1SSAU_SSA20_LENGTH                              0x1
#define _DMA1SSAU_SSA20_MASK                                0x10
#define _DMA1SSAU_SSA21_POSN                                0x5
#define _DMA1SSAU_SSA21_POSITION                            0x5
#define _DMA1SSAU_SSA21_SIZE                                0x1
#define _DMA1SSAU_SSA21_LENGTH                              0x1
#define _DMA1SSAU_SSA21_MASK                                0x20
#define _DMA1SSAU_DMA1SSA_POSN                              0x0
#define _DMA1SSAU_DMA1SSA_POSITION                          0x0
#define _DMA1SSAU_DMA1SSA_SIZE                              0x6
#define _DMA1SSAU_DMA1SSA_LENGTH                            0x6
#define _DMA1SSAU_DMA1SSA_MASK                              0x3F
#define _DMA1SSAU_DMA1SSA16_POSN                            0x0
#define _DMA1SSAU_DMA1SSA16_POSITION                        0x0
#define _DMA1SSAU_DMA1SSA16_SIZE                            0x1
#define _DMA1SSAU_DMA1SSA16_LENGTH                          0x1
#define _DMA1SSAU_DMA1SSA16_MASK                            0x1
#define _DMA1SSAU_DMA1SSA17_POSN                            0x1
#define _DMA1SSAU_DMA1SSA17_POSITION                        0x1
#define _DMA1SSAU_DMA1SSA17_SIZE                            0x1
#define _DMA1SSAU_DMA1SSA17_LENGTH                          0x1
#define _DMA1SSAU_DMA1SSA17_MASK                            0x2
#define _DMA1SSAU_DMA1SSA18_POSN                            0x2
#define _DMA1SSAU_DMA1SSA18_POSITION                        0x2
#define _DMA1SSAU_DMA1SSA18_SIZE                            0x1
#define _DMA1SSAU_DMA1SSA18_LENGTH                          0x1
#define _DMA1SSAU_DMA1SSA18_MASK                            0x4
#define _DMA1SSAU_DMA1SSA19_POSN                            0x3
#define _DMA1SSAU_DMA1SSA19_POSITION                        0x3
#define _DMA1SSAU_DMA1SSA19_SIZE                            0x1
#define _DMA1SSAU_DMA1SSA19_LENGTH                          0x1
#define _DMA1SSAU_DMA1SSA19_MASK                            0x8
#define _DMA1SSAU_DMA1SSA20_POSN                            0x4
#define _DMA1SSAU_DMA1SSA20_POSITION                        0x4
#define _DMA1SSAU_DMA1SSA20_SIZE                            0x1
#define _DMA1SSAU_DMA1SSA20_LENGTH                          0x1
#define _DMA1SSAU_DMA1SSA20_MASK                            0x10
#define _DMA1SSAU_DMA1SSA21_POSN                            0x5
#define _DMA1SSAU_DMA1SSA21_POSITION                        0x5
#define _DMA1SSAU_DMA1SSA21_SIZE                            0x1
#define _DMA1SSAU_DMA1SSA21_LENGTH                          0x1
#define _DMA1SSAU_DMA1SSA21_MASK                            0x20

// Register: DMA1CON0
#define DMA1CON0 DMA1CON0
extern volatile unsigned char           DMA1CON0            __at(0x3BFC);
#ifndef _LIB_BUILD
asm("DMA1CON0 equ 03BFCh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned XIP                    :1;
        unsigned                        :1;
        unsigned AIRQEN                 :1;
        unsigned                        :2;
        unsigned DGO                    :1;
        unsigned SIRQEN                 :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned DMA1XIP                :1;
        unsigned                        :1;
        unsigned DMA1AIRQEN             :1;
        unsigned                        :2;
        unsigned DMA1DGO                :1;
        unsigned DMA1SIRQEN             :1;
        unsigned DMA1EN                 :1;
    };
} DMA1CON0bits_t;
extern volatile DMA1CON0bits_t DMA1CON0bits __at(0x3BFC);
// bitfield macros
#define _DMA1CON0_XIP_POSN                                  0x0
#define _DMA1CON0_XIP_POSITION                              0x0
#define _DMA1CON0_XIP_SIZE                                  0x1
#define _DMA1CON0_XIP_LENGTH                                0x1
#define _DMA1CON0_XIP_MASK                                  0x1
#define _DMA1CON0_AIRQEN_POSN                               0x2
#define _DMA1CON0_AIRQEN_POSITION                           0x2
#define _DMA1CON0_AIRQEN_SIZE                               0x1
#define _DMA1CON0_AIRQEN_LENGTH                             0x1
#define _DMA1CON0_AIRQEN_MASK                               0x4
#define _DMA1CON0_DGO_POSN                                  0x5
#define _DMA1CON0_DGO_POSITION                              0x5
#define _DMA1CON0_DGO_SIZE                                  0x1
#define _DMA1CON0_DGO_LENGTH                                0x1
#define _DMA1CON0_DGO_MASK                                  0x20
#define _DMA1CON0_SIRQEN_POSN                               0x6
#define _DMA1CON0_SIRQEN_POSITION                           0x6
#define _DMA1CON0_SIRQEN_SIZE                               0x1
#define _DMA1CON0_SIRQEN_LENGTH                             0x1
#define _DMA1CON0_SIRQEN_MASK                               0x40
#define _DMA1CON0_EN_POSN                                   0x7
#define _DMA1CON0_EN_POSITION                               0x7
#define _DMA1CON0_EN_SIZE                                   0x1
#define _DMA1CON0_EN_LENGTH                                 0x1
#define _DMA1CON0_EN_MASK                                   0x80
#define _DMA1CON0_DMA1XIP_POSN                              0x0
#define _DMA1CON0_DMA1XIP_POSITION                          0x0
#define _DMA1CON0_DMA1XIP_SIZE                              0x1
#define _DMA1CON0_DMA1XIP_LENGTH                            0x1
#define _DMA1CON0_DMA1XIP_MASK                              0x1
#define _DMA1CON0_DMA1AIRQEN_POSN                           0x2
#define _DMA1CON0_DMA1AIRQEN_POSITION                       0x2
#define _DMA1CON0_DMA1AIRQEN_SIZE                           0x1
#define _DMA1CON0_DMA1AIRQEN_LENGTH                         0x1
#define _DMA1CON0_DMA1AIRQEN_MASK                           0x4
#define _DMA1CON0_DMA1DGO_POSN                              0x5
#define _DMA1CON0_DMA1DGO_POSITION                          0x5
#define _DMA1CON0_DMA1DGO_SIZE                              0x1
#define _DMA1CON0_DMA1DGO_LENGTH                            0x1
#define _DMA1CON0_DMA1DGO_MASK                              0x20
#define _DMA1CON0_DMA1SIRQEN_POSN                           0x6
#define _DMA1CON0_DMA1SIRQEN_POSITION                       0x6
#define _DMA1CON0_DMA1SIRQEN_SIZE                           0x1
#define _DMA1CON0_DMA1SIRQEN_LENGTH                         0x1
#define _DMA1CON0_DMA1SIRQEN_MASK                           0x40
#define _DMA1CON0_DMA1EN_POSN                               0x7
#define _DMA1CON0_DMA1EN_POSITION                           0x7
#define _DMA1CON0_DMA1EN_SIZE                               0x1
#define _DMA1CON0_DMA1EN_LENGTH                             0x1
#define _DMA1CON0_DMA1EN_MASK                               0x80

// Register: DMA1CON1
#define DMA1CON1 DMA1CON1
extern volatile unsigned char           DMA1CON1            __at(0x3BFD);
#ifndef _LIB_BUILD
asm("DMA1CON1 equ 03BFDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSTP                   :1;
        unsigned SMODE                  :2;
        unsigned SMR                    :2;
        unsigned DSTP                   :1;
        unsigned DMODE                  :2;
    };
} DMA1CON1bits_t;
extern volatile DMA1CON1bits_t DMA1CON1bits __at(0x3BFD);
// bitfield macros
#define _DMA1CON1_SSTP_POSN                                 0x0
#define _DMA1CON1_SSTP_POSITION                             0x0
#define _DMA1CON1_SSTP_SIZE                                 0x1
#define _DMA1CON1_SSTP_LENGTH                               0x1
#define _DMA1CON1_SSTP_MASK                                 0x1
#define _DMA1CON1_SMODE_POSN                                0x1
#define _DMA1CON1_SMODE_POSITION                            0x1
#define _DMA1CON1_SMODE_SIZE                                0x2
#define _DMA1CON1_SMODE_LENGTH                              0x2
#define _DMA1CON1_SMODE_MASK                                0x6
#define _DMA1CON1_SMR_POSN                                  0x3
#define _DMA1CON1_SMR_POSITION                              0x3
#define _DMA1CON1_SMR_SIZE                                  0x2
#define _DMA1CON1_SMR_LENGTH                                0x2
#define _DMA1CON1_SMR_MASK                                  0x18
#define _DMA1CON1_DSTP_POSN                                 0x5
#define _DMA1CON1_DSTP_POSITION                             0x5
#define _DMA1CON1_DSTP_SIZE                                 0x1
#define _DMA1CON1_DSTP_LENGTH                               0x1
#define _DMA1CON1_DSTP_MASK                                 0x20
#define _DMA1CON1_DMODE_POSN                                0x6
#define _DMA1CON1_DMODE_POSITION                            0x6
#define _DMA1CON1_DMODE_SIZE                                0x2
#define _DMA1CON1_DMODE_LENGTH                              0x2
#define _DMA1CON1_DMODE_MASK                                0xC0

// Register: DMA1AIRQ
#define DMA1AIRQ DMA1AIRQ
extern volatile unsigned char           DMA1AIRQ            __at(0x3BFE);
#ifndef _LIB_BUILD
asm("DMA1AIRQ equ 03BFEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned AIRQ                   :8;
    };
    struct {
        unsigned DMA1AIRQ               :8;
    };
    struct {
        unsigned AIRQ0                  :1;
        unsigned AIRQ1                  :1;
        unsigned AIRQ2                  :1;
        unsigned AIRQ3                  :1;
        unsigned AIRQ4                  :1;
        unsigned AIRQ5                  :1;
        unsigned AIRQ6                  :1;
    };
    struct {
        unsigned DMA1AIRQ0              :1;
        unsigned DMA1AIRQ1              :1;
        unsigned DMA1AIRQ2              :1;
        unsigned DMA1AIRQ3              :1;
        unsigned DMA1AIRQ4              :1;
        unsigned DMA1AIRQ5              :1;
        unsigned DMA1AIRQ6              :1;
    };
} DMA1AIRQbits_t;
extern volatile DMA1AIRQbits_t DMA1AIRQbits __at(0x3BFE);
// bitfield macros
#define _DMA1AIRQ_AIRQ_POSN                                 0x0
#define _DMA1AIRQ_AIRQ_POSITION                             0x0
#define _DMA1AIRQ_AIRQ_SIZE                                 0x8
#define _DMA1AIRQ_AIRQ_LENGTH                               0x8
#define _DMA1AIRQ_AIRQ_MASK                                 0xFF
#define _DMA1AIRQ_DMA1AIRQ_POSN                             0x0
#define _DMA1AIRQ_DMA1AIRQ_POSITION                         0x0
#define _DMA1AIRQ_DMA1AIRQ_SIZE                             0x8
#define _DMA1AIRQ_DMA1AIRQ_LENGTH                           0x8
#define _DMA1AIRQ_DMA1AIRQ_MASK                             0xFF
#define _DMA1AIRQ_AIRQ0_POSN                                0x0
#define _DMA1AIRQ_AIRQ0_POSITION                            0x0
#define _DMA1AIRQ_AIRQ0_SIZE                                0x1
#define _DMA1AIRQ_AIRQ0_LENGTH                              0x1
#define _DMA1AIRQ_AIRQ0_MASK                                0x1
#define _DMA1AIRQ_AIRQ1_POSN                                0x1
#define _DMA1AIRQ_AIRQ1_POSITION                            0x1
#define _DMA1AIRQ_AIRQ1_SIZE                                0x1
#define _DMA1AIRQ_AIRQ1_LENGTH                              0x1
#define _DMA1AIRQ_AIRQ1_MASK                                0x2
#define _DMA1AIRQ_AIRQ2_POSN                                0x2
#define _DMA1AIRQ_AIRQ2_POSITION                            0x2
#define _DMA1AIRQ_AIRQ2_SIZE                                0x1
#define _DMA1AIRQ_AIRQ2_LENGTH                              0x1
#define _DMA1AIRQ_AIRQ2_MASK                                0x4
#define _DMA1AIRQ_AIRQ3_POSN                                0x3
#define _DMA1AIRQ_AIRQ3_POSITION                            0x3
#define _DMA1AIRQ_AIRQ3_SIZE                                0x1
#define _DMA1AIRQ_AIRQ3_LENGTH                              0x1
#define _DMA1AIRQ_AIRQ3_MASK                                0x8
#define _DMA1AIRQ_AIRQ4_POSN                                0x4
#define _DMA1AIRQ_AIRQ4_POSITION                            0x4
#define _DMA1AIRQ_AIRQ4_SIZE                                0x1
#define _DMA1AIRQ_AIRQ4_LENGTH                              0x1
#define _DMA1AIRQ_AIRQ4_MASK                                0x10
#define _DMA1AIRQ_AIRQ5_POSN                                0x5
#define _DMA1AIRQ_AIRQ5_POSITION                            0x5
#define _DMA1AIRQ_AIRQ5_SIZE                                0x1
#define _DMA1AIRQ_AIRQ5_LENGTH                              0x1
#define _DMA1AIRQ_AIRQ5_MASK                                0x20
#define _DMA1AIRQ_AIRQ6_POSN                                0x6
#define _DMA1AIRQ_AIRQ6_POSITION                            0x6
#define _DMA1AIRQ_AIRQ6_SIZE                                0x1
#define _DMA1AIRQ_AIRQ6_LENGTH                              0x1
#define _DMA1AIRQ_AIRQ6_MASK                                0x40
#define _DMA1AIRQ_DMA1AIRQ0_POSN                            0x0
#define _DMA1AIRQ_DMA1AIRQ0_POSITION                        0x0
#define _DMA1AIRQ_DMA1AIRQ0_SIZE                            0x1
#define _DMA1AIRQ_DMA1AIRQ0_LENGTH                          0x1
#define _DMA1AIRQ_DMA1AIRQ0_MASK                            0x1
#define _DMA1AIRQ_DMA1AIRQ1_POSN                            0x1
#define _DMA1AIRQ_DMA1AIRQ1_POSITION                        0x1
#define _DMA1AIRQ_DMA1AIRQ1_SIZE                            0x1
#define _DMA1AIRQ_DMA1AIRQ1_LENGTH                          0x1
#define _DMA1AIRQ_DMA1AIRQ1_MASK                            0x2
#define _DMA1AIRQ_DMA1AIRQ2_POSN                            0x2
#define _DMA1AIRQ_DMA1AIRQ2_POSITION                        0x2
#define _DMA1AIRQ_DMA1AIRQ2_SIZE                            0x1
#define _DMA1AIRQ_DMA1AIRQ2_LENGTH                          0x1
#define _DMA1AIRQ_DMA1AIRQ2_MASK                            0x4
#define _DMA1AIRQ_DMA1AIRQ3_POSN                            0x3
#define _DMA1AIRQ_DMA1AIRQ3_POSITION                        0x3
#define _DMA1AIRQ_DMA1AIRQ3_SIZE                            0x1
#define _DMA1AIRQ_DMA1AIRQ3_LENGTH                          0x1
#define _DMA1AIRQ_DMA1AIRQ3_MASK                            0x8
#define _DMA1AIRQ_DMA1AIRQ4_POSN                            0x4
#define _DMA1AIRQ_DMA1AIRQ4_POSITION                        0x4
#define _DMA1AIRQ_DMA1AIRQ4_SIZE                            0x1
#define _DMA1AIRQ_DMA1AIRQ4_LENGTH                          0x1
#define _DMA1AIRQ_DMA1AIRQ4_MASK                            0x10
#define _DMA1AIRQ_DMA1AIRQ5_POSN                            0x5
#define _DMA1AIRQ_DMA1AIRQ5_POSITION                        0x5
#define _DMA1AIRQ_DMA1AIRQ5_SIZE                            0x1
#define _DMA1AIRQ_DMA1AIRQ5_LENGTH                          0x1
#define _DMA1AIRQ_DMA1AIRQ5_MASK                            0x20
#define _DMA1AIRQ_DMA1AIRQ6_POSN                            0x6
#define _DMA1AIRQ_DMA1AIRQ6_POSITION                        0x6
#define _DMA1AIRQ_DMA1AIRQ6_SIZE                            0x1
#define _DMA1AIRQ_DMA1AIRQ6_LENGTH                          0x1
#define _DMA1AIRQ_DMA1AIRQ6_MASK                            0x40

// Register: DMA1SIRQ
#define DMA1SIRQ DMA1SIRQ
extern volatile unsigned char           DMA1SIRQ            __at(0x3BFF);
#ifndef _LIB_BUILD
asm("DMA1SIRQ equ 03BFFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SIRQ                   :8;
    };
    struct {
        unsigned DMA1SIRQ               :8;
    };
    struct {
        unsigned SIRQ0                  :1;
        unsigned SIRQ1                  :1;
        unsigned SIRQ2                  :1;
        unsigned SIRQ3                  :1;
        unsigned SIRQ4                  :1;
        unsigned SIRQ5                  :1;
        unsigned SIRQ6                  :1;
    };
    struct {
        unsigned DMA1SIRQ0              :1;
        unsigned DMA1SIRQ1              :1;
        unsigned DMA1SIRQ2              :1;
        unsigned DMA1SIRQ3              :1;
        unsigned DMA1SIRQ4              :1;
        unsigned DMA1SIRQ5              :1;
        unsigned DMA1SIRQ6              :1;
    };
} DMA1SIRQbits_t;
extern volatile DMA1SIRQbits_t DMA1SIRQbits __at(0x3BFF);
// bitfield macros
#define _DMA1SIRQ_SIRQ_POSN                                 0x0
#define _DMA1SIRQ_SIRQ_POSITION                             0x0
#define _DMA1SIRQ_SIRQ_SIZE                                 0x8
#define _DMA1SIRQ_SIRQ_LENGTH                               0x8
#define _DMA1SIRQ_SIRQ_MASK                                 0xFF
#define _DMA1SIRQ_DMA1SIRQ_POSN                             0x0
#define _DMA1SIRQ_DMA1SIRQ_POSITION                         0x0
#define _DMA1SIRQ_DMA1SIRQ_SIZE                             0x8
#define _DMA1SIRQ_DMA1SIRQ_LENGTH                           0x8
#define _DMA1SIRQ_DMA1SIRQ_MASK                             0xFF
#define _DMA1SIRQ_SIRQ0_POSN                                0x0
#define _DMA1SIRQ_SIRQ0_POSITION                            0x0
#define _DMA1SIRQ_SIRQ0_SIZE                                0x1
#define _DMA1SIRQ_SIRQ0_LENGTH                              0x1
#define _DMA1SIRQ_SIRQ0_MASK                                0x1
#define _DMA1SIRQ_SIRQ1_POSN                                0x1
#define _DMA1SIRQ_SIRQ1_POSITION                            0x1
#define _DMA1SIRQ_SIRQ1_SIZE                                0x1
#define _DMA1SIRQ_SIRQ1_LENGTH                              0x1
#define _DMA1SIRQ_SIRQ1_MASK                                0x2
#define _DMA1SIRQ_SIRQ2_POSN                                0x2
#define _DMA1SIRQ_SIRQ2_POSITION                            0x2
#define _DMA1SIRQ_SIRQ2_SIZE                                0x1
#define _DMA1SIRQ_SIRQ2_LENGTH                              0x1
#define _DMA1SIRQ_SIRQ2_MASK                                0x4
#define _DMA1SIRQ_SIRQ3_POSN                                0x3
#define _DMA1SIRQ_SIRQ3_POSITION                            0x3
#define _DMA1SIRQ_SIRQ3_SIZE                                0x1
#define _DMA1SIRQ_SIRQ3_LENGTH                              0x1
#define _DMA1SIRQ_SIRQ3_MASK                                0x8
#define _DMA1SIRQ_SIRQ4_POSN                                0x4
#define _DMA1SIRQ_SIRQ4_POSITION                            0x4
#define _DMA1SIRQ_SIRQ4_SIZE                                0x1
#define _DMA1SIRQ_SIRQ4_LENGTH                              0x1
#define _DMA1SIRQ_SIRQ4_MASK                                0x10
#define _DMA1SIRQ_SIRQ5_POSN                                0x5
#define _DMA1SIRQ_SIRQ5_POSITION                            0x5
#define _DMA1SIRQ_SIRQ5_SIZE                                0x1
#define _DMA1SIRQ_SIRQ5_LENGTH                              0x1
#define _DMA1SIRQ_SIRQ5_MASK                                0x20
#define _DMA1SIRQ_SIRQ6_POSN                                0x6
#define _DMA1SIRQ_SIRQ6_POSITION                            0x6
#define _DMA1SIRQ_SIRQ6_SIZE                                0x1
#define _DMA1SIRQ_SIRQ6_LENGTH                              0x1
#define _DMA1SIRQ_SIRQ6_MASK                                0x40
#define _DMA1SIRQ_DMA1SIRQ0_POSN                            0x0
#define _DMA1SIRQ_DMA1SIRQ0_POSITION                        0x0
#define _DMA1SIRQ_DMA1SIRQ0_SIZE                            0x1
#define _DMA1SIRQ_DMA1SIRQ0_LENGTH                          0x1
#define _DMA1SIRQ_DMA1SIRQ0_MASK                            0x1
#define _DMA1SIRQ_DMA1SIRQ1_POSN                            0x1
#define _DMA1SIRQ_DMA1SIRQ1_POSITION                        0x1
#define _DMA1SIRQ_DMA1SIRQ1_SIZE                            0x1
#define _DMA1SIRQ_DMA1SIRQ1_LENGTH                          0x1
#define _DMA1SIRQ_DMA1SIRQ1_MASK                            0x2
#define _DMA1SIRQ_DMA1SIRQ2_POSN                            0x2
#define _DMA1SIRQ_DMA1SIRQ2_POSITION                        0x2
#define _DMA1SIRQ_DMA1SIRQ2_SIZE                            0x1
#define _DMA1SIRQ_DMA1SIRQ2_LENGTH                          0x1
#define _DMA1SIRQ_DMA1SIRQ2_MASK                            0x4
#define _DMA1SIRQ_DMA1SIRQ3_POSN                            0x3
#define _DMA1SIRQ_DMA1SIRQ3_POSITION                        0x3
#define _DMA1SIRQ_DMA1SIRQ3_SIZE                            0x1
#define _DMA1SIRQ_DMA1SIRQ3_LENGTH                          0x1
#define _DMA1SIRQ_DMA1SIRQ3_MASK                            0x8
#define _DMA1SIRQ_DMA1SIRQ4_POSN                            0x4
#define _DMA1SIRQ_DMA1SIRQ4_POSITION                        0x4
#define _DMA1SIRQ_DMA1SIRQ4_SIZE                            0x1
#define _DMA1SIRQ_DMA1SIRQ4_LENGTH                          0x1
#define _DMA1SIRQ_DMA1SIRQ4_MASK                            0x10
#define _DMA1SIRQ_DMA1SIRQ5_POSN                            0x5
#define _DMA1SIRQ_DMA1SIRQ5_POSITION                        0x5
#define _DMA1SIRQ_DMA1SIRQ5_SIZE                            0x1
#define _DMA1SIRQ_DMA1SIRQ5_LENGTH                          0x1
#define _DMA1SIRQ_DMA1SIRQ5_MASK                            0x20
#define _DMA1SIRQ_DMA1SIRQ6_POSN                            0x6
#define _DMA1SIRQ_DMA1SIRQ6_POSITION                        0x6
#define _DMA1SIRQ_DMA1SIRQ6_SIZE                            0x1
#define _DMA1SIRQ_DMA1SIRQ6_LENGTH                          0x1
#define _DMA1SIRQ_DMA1SIRQ6_MASK                            0x40

// Register: CLC4CON
#define CLC4CON CLC4CON
extern volatile unsigned char           CLC4CON             __at(0x3C56);
#ifndef _LIB_BUILD
asm("CLC4CON equ 03C56h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :3;
        unsigned INTN                   :1;
        unsigned INTP                   :1;
        unsigned OUT                    :1;
        unsigned OE                     :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
    };
    struct {
        unsigned LC4MODE                :3;
        unsigned LC4INTN                :1;
        unsigned LC4INTP                :1;
        unsigned LC4OUT                 :1;
        unsigned LC4OE                  :1;
        unsigned LC4EN                  :1;
    };
    struct {
        unsigned LC4MODE0               :1;
        unsigned LC4MODE1               :1;
        unsigned LC4MODE2               :1;
    };
} CLC4CONbits_t;
extern volatile CLC4CONbits_t CLC4CONbits __at(0x3C56);
// bitfield macros
#define _CLC4CON_MODE_POSN                                  0x0
#define _CLC4CON_MODE_POSITION                              0x0
#define _CLC4CON_MODE_SIZE                                  0x3
#define _CLC4CON_MODE_LENGTH                                0x3
#define _CLC4CON_MODE_MASK                                  0x7
#define _CLC4CON_INTN_POSN                                  0x3
#define _CLC4CON_INTN_POSITION                              0x3
#define _CLC4CON_INTN_SIZE                                  0x1
#define _CLC4CON_INTN_LENGTH                                0x1
#define _CLC4CON_INTN_MASK                                  0x8
#define _CLC4CON_INTP_POSN                                  0x4
#define _CLC4CON_INTP_POSITION                              0x4
#define _CLC4CON_INTP_SIZE                                  0x1
#define _CLC4CON_INTP_LENGTH                                0x1
#define _CLC4CON_INTP_MASK                                  0x10
#define _CLC4CON_OUT_POSN                                   0x5
#define _CLC4CON_OUT_POSITION                               0x5
#define _CLC4CON_OUT_SIZE                                   0x1
#define _CLC4CON_OUT_LENGTH                                 0x1
#define _CLC4CON_OUT_MASK                                   0x20
#define _CLC4CON_OE_POSN                                    0x6
#define _CLC4CON_OE_POSITION                                0x6
#define _CLC4CON_OE_SIZE                                    0x1
#define _CLC4CON_OE_LENGTH                                  0x1
#define _CLC4CON_OE_MASK                                    0x40
#define _CLC4CON_EN_POSN                                    0x7
#define _CLC4CON_EN_POSITION                                0x7
#define _CLC4CON_EN_SIZE                                    0x1
#define _CLC4CON_EN_LENGTH                                  0x1
#define _CLC4CON_EN_MASK                                    0x80
#define _CLC4CON_MODE0_POSN                                 0x0
#define _CLC4CON_MODE0_POSITION                             0x0
#define _CLC4CON_MODE0_SIZE                                 0x1
#define _CLC4CON_MODE0_LENGTH                               0x1
#define _CLC4CON_MODE0_MASK                                 0x1
#define _CLC4CON_MODE1_POSN                                 0x1
#define _CLC4CON_MODE1_POSITION                             0x1
#define _CLC4CON_MODE1_SIZE                                 0x1
#define _CLC4CON_MODE1_LENGTH                               0x1
#define _CLC4CON_MODE1_MASK                                 0x2
#define _CLC4CON_MODE2_POSN                                 0x2
#define _CLC4CON_MODE2_POSITION                             0x2
#define _CLC4CON_MODE2_SIZE                                 0x1
#define _CLC4CON_MODE2_LENGTH                               0x1
#define _CLC4CON_MODE2_MASK                                 0x4
#define _CLC4CON_LC4MODE_POSN                               0x0
#define _CLC4CON_LC4MODE_POSITION                           0x0
#define _CLC4CON_LC4MODE_SIZE                               0x3
#define _CLC4CON_LC4MODE_LENGTH                             0x3
#define _CLC4CON_LC4MODE_MASK                               0x7
#define _CLC4CON_LC4INTN_POSN                               0x3
#define _CLC4CON_LC4INTN_POSITION                           0x3
#define _CLC4CON_LC4INTN_SIZE                               0x1
#define _CLC4CON_LC4INTN_LENGTH                             0x1
#define _CLC4CON_LC4INTN_MASK                               0x8
#define _CLC4CON_LC4INTP_POSN                               0x4
#define _CLC4CON_LC4INTP_POSITION                           0x4
#define _CLC4CON_LC4INTP_SIZE                               0x1
#define _CLC4CON_LC4INTP_LENGTH                             0x1
#define _CLC4CON_LC4INTP_MASK                               0x10
#define _CLC4CON_LC4OUT_POSN                                0x5
#define _CLC4CON_LC4OUT_POSITION                            0x5
#define _CLC4CON_LC4OUT_SIZE                                0x1
#define _CLC4CON_LC4OUT_LENGTH                              0x1
#define _CLC4CON_LC4OUT_MASK                                0x20
#define _CLC4CON_LC4OE_POSN                                 0x6
#define _CLC4CON_LC4OE_POSITION                             0x6
#define _CLC4CON_LC4OE_SIZE                                 0x1
#define _CLC4CON_LC4OE_LENGTH                               0x1
#define _CLC4CON_LC4OE_MASK                                 0x40
#define _CLC4CON_LC4EN_POSN                                 0x7
#define _CLC4CON_LC4EN_POSITION                             0x7
#define _CLC4CON_LC4EN_SIZE                                 0x1
#define _CLC4CON_LC4EN_LENGTH                               0x1
#define _CLC4CON_LC4EN_MASK                                 0x80
#define _CLC4CON_LC4MODE0_POSN                              0x0
#define _CLC4CON_LC4MODE0_POSITION                          0x0
#define _CLC4CON_LC4MODE0_SIZE                              0x1
#define _CLC4CON_LC4MODE0_LENGTH                            0x1
#define _CLC4CON_LC4MODE0_MASK                              0x1
#define _CLC4CON_LC4MODE1_POSN                              0x1
#define _CLC4CON_LC4MODE1_POSITION                          0x1
#define _CLC4CON_LC4MODE1_SIZE                              0x1
#define _CLC4CON_LC4MODE1_LENGTH                            0x1
#define _CLC4CON_LC4MODE1_MASK                              0x2
#define _CLC4CON_LC4MODE2_POSN                              0x2
#define _CLC4CON_LC4MODE2_POSITION                          0x2
#define _CLC4CON_LC4MODE2_SIZE                              0x1
#define _CLC4CON_LC4MODE2_LENGTH                            0x1
#define _CLC4CON_LC4MODE2_MASK                              0x4

// Register: CLC4POL
#define CLC4POL CLC4POL
extern volatile unsigned char           CLC4POL             __at(0x3C57);
#ifndef _LIB_BUILD
asm("CLC4POL equ 03C57h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned G1POL                  :1;
        unsigned G2POL                  :1;
        unsigned G3POL                  :1;
        unsigned G4POL                  :1;
        unsigned                        :3;
        unsigned POL                    :1;
    };
    struct {
        unsigned LC4G1POL               :1;
        unsigned LC4G2POL               :1;
        unsigned LC4G3POL               :1;
        unsigned LC4G4POL               :1;
        unsigned                        :3;
        unsigned LC4POL                 :1;
    };
} CLC4POLbits_t;
extern volatile CLC4POLbits_t CLC4POLbits __at(0x3C57);
// bitfield macros
#define _CLC4POL_G1POL_POSN                                 0x0
#define _CLC4POL_G1POL_POSITION                             0x0
#define _CLC4POL_G1POL_SIZE                                 0x1
#define _CLC4POL_G1POL_LENGTH                               0x1
#define _CLC4POL_G1POL_MASK                                 0x1
#define _CLC4POL_G2POL_POSN                                 0x1
#define _CLC4POL_G2POL_POSITION                             0x1
#define _CLC4POL_G2POL_SIZE                                 0x1
#define _CLC4POL_G2POL_LENGTH                               0x1
#define _CLC4POL_G2POL_MASK                                 0x2
#define _CLC4POL_G3POL_POSN                                 0x2
#define _CLC4POL_G3POL_POSITION                             0x2
#define _CLC4POL_G3POL_SIZE                                 0x1
#define _CLC4POL_G3POL_LENGTH                               0x1
#define _CLC4POL_G3POL_MASK                                 0x4
#define _CLC4POL_G4POL_POSN                                 0x3
#define _CLC4POL_G4POL_POSITION                             0x3
#define _CLC4POL_G4POL_SIZE                                 0x1
#define _CLC4POL_G4POL_LENGTH                               0x1
#define _CLC4POL_G4POL_MASK                                 0x8
#define _CLC4POL_POL_POSN                                   0x7
#define _CLC4POL_POL_POSITION                               0x7
#define _CLC4POL_POL_SIZE                                   0x1
#define _CLC4POL_POL_LENGTH                                 0x1
#define _CLC4POL_POL_MASK                                   0x80
#define _CLC4POL_LC4G1POL_POSN                              0x0
#define _CLC4POL_LC4G1POL_POSITION                          0x0
#define _CLC4POL_LC4G1POL_SIZE                              0x1
#define _CLC4POL_LC4G1POL_LENGTH                            0x1
#define _CLC4POL_LC4G1POL_MASK                              0x1
#define _CLC4POL_LC4G2POL_POSN                              0x1
#define _CLC4POL_LC4G2POL_POSITION                          0x1
#define _CLC4POL_LC4G2POL_SIZE                              0x1
#define _CLC4POL_LC4G2POL_LENGTH                            0x1
#define _CLC4POL_LC4G2POL_MASK                              0x2
#define _CLC4POL_LC4G3POL_POSN                              0x2
#define _CLC4POL_LC4G3POL_POSITION                          0x2
#define _CLC4POL_LC4G3POL_SIZE                              0x1
#define _CLC4POL_LC4G3POL_LENGTH                            0x1
#define _CLC4POL_LC4G3POL_MASK                              0x4
#define _CLC4POL_LC4G4POL_POSN                              0x3
#define _CLC4POL_LC4G4POL_POSITION                          0x3
#define _CLC4POL_LC4G4POL_SIZE                              0x1
#define _CLC4POL_LC4G4POL_LENGTH                            0x1
#define _CLC4POL_LC4G4POL_MASK                              0x8
#define _CLC4POL_LC4POL_POSN                                0x7
#define _CLC4POL_LC4POL_POSITION                            0x7
#define _CLC4POL_LC4POL_SIZE                                0x1
#define _CLC4POL_LC4POL_LENGTH                              0x1
#define _CLC4POL_LC4POL_MASK                                0x80

// Register: CLC4SEL0
#define CLC4SEL0 CLC4SEL0
extern volatile unsigned char           CLC4SEL0            __at(0x3C58);
#ifndef _LIB_BUILD
asm("CLC4SEL0 equ 03C58h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned D1S                    :8;
    };
    struct {
        unsigned LC4D1S                 :8;
    };
    struct {
        unsigned D1S0                   :1;
        unsigned D1S1                   :1;
        unsigned D1S2                   :1;
        unsigned D1S3                   :1;
        unsigned D1S4                   :1;
        unsigned D1S5                   :1;
        unsigned D1S6                   :1;
        unsigned D1S7                   :1;
    };
    struct {
        unsigned LC4D1S0                :1;
        unsigned LC4D1S1                :1;
        unsigned LC4D1S2                :1;
        unsigned LC4D1S3                :1;
        unsigned LC4D1S4                :1;
        unsigned LC4D1S5                :1;
        unsigned LC4D1S6                :1;
        unsigned LC4D1S7                :1;
    };
} CLC4SEL0bits_t;
extern volatile CLC4SEL0bits_t CLC4SEL0bits __at(0x3C58);
// bitfield macros
#define _CLC4SEL0_D1S_POSN                                  0x0
#define _CLC4SEL0_D1S_POSITION                              0x0
#define _CLC4SEL0_D1S_SIZE                                  0x8
#define _CLC4SEL0_D1S_LENGTH                                0x8
#define _CLC4SEL0_D1S_MASK                                  0xFF
#define _CLC4SEL0_LC4D1S_POSN                               0x0
#define _CLC4SEL0_LC4D1S_POSITION                           0x0
#define _CLC4SEL0_LC4D1S_SIZE                               0x8
#define _CLC4SEL0_LC4D1S_LENGTH                             0x8
#define _CLC4SEL0_LC4D1S_MASK                               0xFF
#define _CLC4SEL0_D1S0_POSN                                 0x0
#define _CLC4SEL0_D1S0_POSITION                             0x0
#define _CLC4SEL0_D1S0_SIZE                                 0x1
#define _CLC4SEL0_D1S0_LENGTH                               0x1
#define _CLC4SEL0_D1S0_MASK                                 0x1
#define _CLC4SEL0_D1S1_POSN                                 0x1
#define _CLC4SEL0_D1S1_POSITION                             0x1
#define _CLC4SEL0_D1S1_SIZE                                 0x1
#define _CLC4SEL0_D1S1_LENGTH                               0x1
#define _CLC4SEL0_D1S1_MASK                                 0x2
#define _CLC4SEL0_D1S2_POSN                                 0x2
#define _CLC4SEL0_D1S2_POSITION                             0x2
#define _CLC4SEL0_D1S2_SIZE                                 0x1
#define _CLC4SEL0_D1S2_LENGTH                               0x1
#define _CLC4SEL0_D1S2_MASK                                 0x4
#define _CLC4SEL0_D1S3_POSN                                 0x3
#define _CLC4SEL0_D1S3_POSITION                             0x3
#define _CLC4SEL0_D1S3_SIZE                                 0x1
#define _CLC4SEL0_D1S3_LENGTH                               0x1
#define _CLC4SEL0_D1S3_MASK                                 0x8
#define _CLC4SEL0_D1S4_POSN                                 0x4
#define _CLC4SEL0_D1S4_POSITION                             0x4
#define _CLC4SEL0_D1S4_SIZE                                 0x1
#define _CLC4SEL0_D1S4_LENGTH                               0x1
#define _CLC4SEL0_D1S4_MASK                                 0x10
#define _CLC4SEL0_D1S5_POSN                                 0x5
#define _CLC4SEL0_D1S5_POSITION                             0x5
#define _CLC4SEL0_D1S5_SIZE                                 0x1
#define _CLC4SEL0_D1S5_LENGTH                               0x1
#define _CLC4SEL0_D1S5_MASK                                 0x20
#define _CLC4SEL0_D1S6_POSN                                 0x6
#define _CLC4SEL0_D1S6_POSITION                             0x6
#define _CLC4SEL0_D1S6_SIZE                                 0x1
#define _CLC4SEL0_D1S6_LENGTH                               0x1
#define _CLC4SEL0_D1S6_MASK                                 0x40
#define _CLC4SEL0_D1S7_POSN                                 0x7
#define _CLC4SEL0_D1S7_POSITION                             0x7
#define _CLC4SEL0_D1S7_SIZE                                 0x1
#define _CLC4SEL0_D1S7_LENGTH                               0x1
#define _CLC4SEL0_D1S7_MASK                                 0x80
#define _CLC4SEL0_LC4D1S0_POSN                              0x0
#define _CLC4SEL0_LC4D1S0_POSITION                          0x0
#define _CLC4SEL0_LC4D1S0_SIZE                              0x1
#define _CLC4SEL0_LC4D1S0_LENGTH                            0x1
#define _CLC4SEL0_LC4D1S0_MASK                              0x1
#define _CLC4SEL0_LC4D1S1_POSN                              0x1
#define _CLC4SEL0_LC4D1S1_POSITION                          0x1
#define _CLC4SEL0_LC4D1S1_SIZE                              0x1
#define _CLC4SEL0_LC4D1S1_LENGTH                            0x1
#define _CLC4SEL0_LC4D1S1_MASK                              0x2
#define _CLC4SEL0_LC4D1S2_POSN                              0x2
#define _CLC4SEL0_LC4D1S2_POSITION                          0x2
#define _CLC4SEL0_LC4D1S2_SIZE                              0x1
#define _CLC4SEL0_LC4D1S2_LENGTH                            0x1
#define _CLC4SEL0_LC4D1S2_MASK                              0x4
#define _CLC4SEL0_LC4D1S3_POSN                              0x3
#define _CLC4SEL0_LC4D1S3_POSITION                          0x3
#define _CLC4SEL0_LC4D1S3_SIZE                              0x1
#define _CLC4SEL0_LC4D1S3_LENGTH                            0x1
#define _CLC4SEL0_LC4D1S3_MASK                              0x8
#define _CLC4SEL0_LC4D1S4_POSN                              0x4
#define _CLC4SEL0_LC4D1S4_POSITION                          0x4
#define _CLC4SEL0_LC4D1S4_SIZE                              0x1
#define _CLC4SEL0_LC4D1S4_LENGTH                            0x1
#define _CLC4SEL0_LC4D1S4_MASK                              0x10
#define _CLC4SEL0_LC4D1S5_POSN                              0x5
#define _CLC4SEL0_LC4D1S5_POSITION                          0x5
#define _CLC4SEL0_LC4D1S5_SIZE                              0x1
#define _CLC4SEL0_LC4D1S5_LENGTH                            0x1
#define _CLC4SEL0_LC4D1S5_MASK                              0x20
#define _CLC4SEL0_LC4D1S6_POSN                              0x6
#define _CLC4SEL0_LC4D1S6_POSITION                          0x6
#define _CLC4SEL0_LC4D1S6_SIZE                              0x1
#define _CLC4SEL0_LC4D1S6_LENGTH                            0x1
#define _CLC4SEL0_LC4D1S6_MASK                              0x40
#define _CLC4SEL0_LC4D1S7_POSN                              0x7
#define _CLC4SEL0_LC4D1S7_POSITION                          0x7
#define _CLC4SEL0_LC4D1S7_SIZE                              0x1
#define _CLC4SEL0_LC4D1S7_LENGTH                            0x1
#define _CLC4SEL0_LC4D1S7_MASK                              0x80

// Register: CLC4SEL1
#define CLC4SEL1 CLC4SEL1
extern volatile unsigned char           CLC4SEL1            __at(0x3C59);
#ifndef _LIB_BUILD
asm("CLC4SEL1 equ 03C59h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned D2S                    :8;
    };
    struct {
        unsigned LC4D2S                 :8;
    };
    struct {
        unsigned D2S0                   :1;
        unsigned D2S1                   :1;
        unsigned D2S2                   :1;
        unsigned D2S3                   :1;
        unsigned D2S4                   :1;
        unsigned D2S5                   :1;
        unsigned D2S6                   :1;
        unsigned D2S7                   :1;
    };
    struct {
        unsigned LC4D2S0                :1;
        unsigned LC4D2S1                :1;
        unsigned LC4D2S2                :1;
        unsigned LC4D2S3                :1;
        unsigned LC4D2S4                :1;
        unsigned LC4D2S5                :1;
        unsigned LC4D2S6                :1;
        unsigned LC4D2S7                :1;
    };
} CLC4SEL1bits_t;
extern volatile CLC4SEL1bits_t CLC4SEL1bits __at(0x3C59);
// bitfield macros
#define _CLC4SEL1_D2S_POSN                                  0x0
#define _CLC4SEL1_D2S_POSITION                              0x0
#define _CLC4SEL1_D2S_SIZE                                  0x8
#define _CLC4SEL1_D2S_LENGTH                                0x8
#define _CLC4SEL1_D2S_MASK                                  0xFF
#define _CLC4SEL1_LC4D2S_POSN                               0x0
#define _CLC4SEL1_LC4D2S_POSITION                           0x0
#define _CLC4SEL1_LC4D2S_SIZE                               0x8
#define _CLC4SEL1_LC4D2S_LENGTH                             0x8
#define _CLC4SEL1_LC4D2S_MASK                               0xFF
#define _CLC4SEL1_D2S0_POSN                                 0x0
#define _CLC4SEL1_D2S0_POSITION                             0x0
#define _CLC4SEL1_D2S0_SIZE                                 0x1
#define _CLC4SEL1_D2S0_LENGTH                               0x1
#define _CLC4SEL1_D2S0_MASK                                 0x1
#define _CLC4SEL1_D2S1_POSN                                 0x1
#define _CLC4SEL1_D2S1_POSITION                             0x1
#define _CLC4SEL1_D2S1_SIZE                                 0x1
#define _CLC4SEL1_D2S1_LENGTH                               0x1
#define _CLC4SEL1_D2S1_MASK                                 0x2
#define _CLC4SEL1_D2S2_POSN                                 0x2
#define _CLC4SEL1_D2S2_POSITION                             0x2
#define _CLC4SEL1_D2S2_SIZE                                 0x1
#define _CLC4SEL1_D2S2_LENGTH                               0x1
#define _CLC4SEL1_D2S2_MASK                                 0x4
#define _CLC4SEL1_D2S3_POSN                                 0x3
#define _CLC4SEL1_D2S3_POSITION                             0x3
#define _CLC4SEL1_D2S3_SIZE                                 0x1
#define _CLC4SEL1_D2S3_LENGTH                               0x1
#define _CLC4SEL1_D2S3_MASK                                 0x8
#define _CLC4SEL1_D2S4_POSN                                 0x4
#define _CLC4SEL1_D2S4_POSITION                             0x4
#define _CLC4SEL1_D2S4_SIZE                                 0x1
#define _CLC4SEL1_D2S4_LENGTH                               0x1
#define _CLC4SEL1_D2S4_MASK                                 0x10
#define _CLC4SEL1_D2S5_POSN                                 0x5
#define _CLC4SEL1_D2S5_POSITION                             0x5
#define _CLC4SEL1_D2S5_SIZE                                 0x1
#define _CLC4SEL1_D2S5_LENGTH                               0x1
#define _CLC4SEL1_D2S5_MASK                                 0x20
#define _CLC4SEL1_D2S6_POSN                                 0x6
#define _CLC4SEL1_D2S6_POSITION                             0x6
#define _CLC4SEL1_D2S6_SIZE                                 0x1
#define _CLC4SEL1_D2S6_LENGTH                               0x1
#define _CLC4SEL1_D2S6_MASK                                 0x40
#define _CLC4SEL1_D2S7_POSN                                 0x7
#define _CLC4SEL1_D2S7_POSITION                             0x7
#define _CLC4SEL1_D2S7_SIZE                                 0x1
#define _CLC4SEL1_D2S7_LENGTH                               0x1
#define _CLC4SEL1_D2S7_MASK                                 0x80
#define _CLC4SEL1_LC4D2S0_POSN                              0x0
#define _CLC4SEL1_LC4D2S0_POSITION                          0x0
#define _CLC4SEL1_LC4D2S0_SIZE                              0x1
#define _CLC4SEL1_LC4D2S0_LENGTH                            0x1
#define _CLC4SEL1_LC4D2S0_MASK                              0x1
#define _CLC4SEL1_LC4D2S1_POSN                              0x1
#define _CLC4SEL1_LC4D2S1_POSITION                          0x1
#define _CLC4SEL1_LC4D2S1_SIZE                              0x1
#define _CLC4SEL1_LC4D2S1_LENGTH                            0x1
#define _CLC4SEL1_LC4D2S1_MASK                              0x2
#define _CLC4SEL1_LC4D2S2_POSN                              0x2
#define _CLC4SEL1_LC4D2S2_POSITION                          0x2
#define _CLC4SEL1_LC4D2S2_SIZE                              0x1
#define _CLC4SEL1_LC4D2S2_LENGTH                            0x1
#define _CLC4SEL1_LC4D2S2_MASK                              0x4
#define _CLC4SEL1_LC4D2S3_POSN                              0x3
#define _CLC4SEL1_LC4D2S3_POSITION                          0x3
#define _CLC4SEL1_LC4D2S3_SIZE                              0x1
#define _CLC4SEL1_LC4D2S3_LENGTH                            0x1
#define _CLC4SEL1_LC4D2S3_MASK                              0x8
#define _CLC4SEL1_LC4D2S4_POSN                              0x4
#define _CLC4SEL1_LC4D2S4_POSITION                          0x4
#define _CLC4SEL1_LC4D2S4_SIZE                              0x1
#define _CLC4SEL1_LC4D2S4_LENGTH                            0x1
#define _CLC4SEL1_LC4D2S4_MASK                              0x10
#define _CLC4SEL1_LC4D2S5_POSN                              0x5
#define _CLC4SEL1_LC4D2S5_POSITION                          0x5
#define _CLC4SEL1_LC4D2S5_SIZE                              0x1
#define _CLC4SEL1_LC4D2S5_LENGTH                            0x1
#define _CLC4SEL1_LC4D2S5_MASK                              0x20
#define _CLC4SEL1_LC4D2S6_POSN                              0x6
#define _CLC4SEL1_LC4D2S6_POSITION                          0x6
#define _CLC4SEL1_LC4D2S6_SIZE                              0x1
#define _CLC4SEL1_LC4D2S6_LENGTH                            0x1
#define _CLC4SEL1_LC4D2S6_MASK                              0x40
#define _CLC4SEL1_LC4D2S7_POSN                              0x7
#define _CLC4SEL1_LC4D2S7_POSITION                          0x7
#define _CLC4SEL1_LC4D2S7_SIZE                              0x1
#define _CLC4SEL1_LC4D2S7_LENGTH                            0x1
#define _CLC4SEL1_LC4D2S7_MASK                              0x80

// Register: CLC4SEL2
#define CLC4SEL2 CLC4SEL2
extern volatile unsigned char           CLC4SEL2            __at(0x3C5A);
#ifndef _LIB_BUILD
asm("CLC4SEL2 equ 03C5Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned D3S                    :8;
    };
    struct {
        unsigned LC4D3S                 :8;
    };
    struct {
        unsigned D3S0                   :1;
        unsigned D3S1                   :1;
        unsigned D3S2                   :1;
        unsigned D3S3                   :1;
        unsigned D3S4                   :1;
        unsigned D3S5                   :1;
        unsigned D3S6                   :1;
        unsigned D3S7                   :1;
    };
    struct {
        unsigned LC4D3S0                :1;
        unsigned LC4D3S1                :1;
        unsigned LC4D3S2                :1;
        unsigned LC4D3S3                :1;
        unsigned LC4D3S4                :1;
        unsigned LC4D3S5                :1;
        unsigned LC4D3S6                :1;
        unsigned LC4D3S7                :1;
    };
} CLC4SEL2bits_t;
extern volatile CLC4SEL2bits_t CLC4SEL2bits __at(0x3C5A);
// bitfield macros
#define _CLC4SEL2_D3S_POSN                                  0x0
#define _CLC4SEL2_D3S_POSITION                              0x0
#define _CLC4SEL2_D3S_SIZE                                  0x8
#define _CLC4SEL2_D3S_LENGTH                                0x8
#define _CLC4SEL2_D3S_MASK                                  0xFF
#define _CLC4SEL2_LC4D3S_POSN                               0x0
#define _CLC4SEL2_LC4D3S_POSITION                           0x0
#define _CLC4SEL2_LC4D3S_SIZE                               0x8
#define _CLC4SEL2_LC4D3S_LENGTH                             0x8
#define _CLC4SEL2_LC4D3S_MASK                               0xFF
#define _CLC4SEL2_D3S0_POSN                                 0x0
#define _CLC4SEL2_D3S0_POSITION                             0x0
#define _CLC4SEL2_D3S0_SIZE                                 0x1
#define _CLC4SEL2_D3S0_LENGTH                               0x1
#define _CLC4SEL2_D3S0_MASK                                 0x1
#define _CLC4SEL2_D3S1_POSN                                 0x1
#define _CLC4SEL2_D3S1_POSITION                             0x1
#define _CLC4SEL2_D3S1_SIZE                                 0x1
#define _CLC4SEL2_D3S1_LENGTH                               0x1
#define _CLC4SEL2_D3S1_MASK                                 0x2
#define _CLC4SEL2_D3S2_POSN                                 0x2
#define _CLC4SEL2_D3S2_POSITION                             0x2
#define _CLC4SEL2_D3S2_SIZE                                 0x1
#define _CLC4SEL2_D3S2_LENGTH                               0x1
#define _CLC4SEL2_D3S2_MASK                                 0x4
#define _CLC4SEL2_D3S3_POSN                                 0x3
#define _CLC4SEL2_D3S3_POSITION                             0x3
#define _CLC4SEL2_D3S3_SIZE                                 0x1
#define _CLC4SEL2_D3S3_LENGTH                               0x1
#define _CLC4SEL2_D3S3_MASK                                 0x8
#define _CLC4SEL2_D3S4_POSN                                 0x4
#define _CLC4SEL2_D3S4_POSITION                             0x4
#define _CLC4SEL2_D3S4_SIZE                                 0x1
#define _CLC4SEL2_D3S4_LENGTH                               0x1
#define _CLC4SEL2_D3S4_MASK                                 0x10
#define _CLC4SEL2_D3S5_POSN                                 0x5
#define _CLC4SEL2_D3S5_POSITION                             0x5
#define _CLC4SEL2_D3S5_SIZE                                 0x1
#define _CLC4SEL2_D3S5_LENGTH                               0x1
#define _CLC4SEL2_D3S5_MASK                                 0x20
#define _CLC4SEL2_D3S6_POSN                                 0x6
#define _CLC4SEL2_D3S6_POSITION                             0x6
#define _CLC4SEL2_D3S6_SIZE                                 0x1
#define _CLC4SEL2_D3S6_LENGTH                               0x1
#define _CLC4SEL2_D3S6_MASK                                 0x40
#define _CLC4SEL2_D3S7_POSN                                 0x7
#define _CLC4SEL2_D3S7_POSITION                             0x7
#define _CLC4SEL2_D3S7_SIZE                                 0x1
#define _CLC4SEL2_D3S7_LENGTH                               0x1
#define _CLC4SEL2_D3S7_MASK                                 0x80
#define _CLC4SEL2_LC4D3S0_POSN                              0x0
#define _CLC4SEL2_LC4D3S0_POSITION                          0x0
#define _CLC4SEL2_LC4D3S0_SIZE                              0x1
#define _CLC4SEL2_LC4D3S0_LENGTH                            0x1
#define _CLC4SEL2_LC4D3S0_MASK                              0x1
#define _CLC4SEL2_LC4D3S1_POSN                              0x1
#define _CLC4SEL2_LC4D3S1_POSITION                          0x1
#define _CLC4SEL2_LC4D3S1_SIZE                              0x1
#define _CLC4SEL2_LC4D3S1_LENGTH                            0x1
#define _CLC4SEL2_LC4D3S1_MASK                              0x2
#define _CLC4SEL2_LC4D3S2_POSN                              0x2
#define _CLC4SEL2_LC4D3S2_POSITION                          0x2
#define _CLC4SEL2_LC4D3S2_SIZE                              0x1
#define _CLC4SEL2_LC4D3S2_LENGTH                            0x1
#define _CLC4SEL2_LC4D3S2_MASK                              0x4
#define _CLC4SEL2_LC4D3S3_POSN                              0x3
#define _CLC4SEL2_LC4D3S3_POSITION                          0x3
#define _CLC4SEL2_LC4D3S3_SIZE                              0x1
#define _CLC4SEL2_LC4D3S3_LENGTH                            0x1
#define _CLC4SEL2_LC4D3S3_MASK                              0x8
#define _CLC4SEL2_LC4D3S4_POSN                              0x4
#define _CLC4SEL2_LC4D3S4_POSITION                          0x4
#define _CLC4SEL2_LC4D3S4_SIZE                              0x1
#define _CLC4SEL2_LC4D3S4_LENGTH                            0x1
#define _CLC4SEL2_LC4D3S4_MASK                              0x10
#define _CLC4SEL2_LC4D3S5_POSN                              0x5
#define _CLC4SEL2_LC4D3S5_POSITION                          0x5
#define _CLC4SEL2_LC4D3S5_SIZE                              0x1
#define _CLC4SEL2_LC4D3S5_LENGTH                            0x1
#define _CLC4SEL2_LC4D3S5_MASK                              0x20
#define _CLC4SEL2_LC4D3S6_POSN                              0x6
#define _CLC4SEL2_LC4D3S6_POSITION                          0x6
#define _CLC4SEL2_LC4D3S6_SIZE                              0x1
#define _CLC4SEL2_LC4D3S6_LENGTH                            0x1
#define _CLC4SEL2_LC4D3S6_MASK                              0x40
#define _CLC4SEL2_LC4D3S7_POSN                              0x7
#define _CLC4SEL2_LC4D3S7_POSITION                          0x7
#define _CLC4SEL2_LC4D3S7_SIZE                              0x1
#define _CLC4SEL2_LC4D3S7_LENGTH                            0x1
#define _CLC4SEL2_LC4D3S7_MASK                              0x80

// Register: CLC4SEL3
#define CLC4SEL3 CLC4SEL3
extern volatile unsigned char           CLC4SEL3            __at(0x3C5B);
#ifndef _LIB_BUILD
asm("CLC4SEL3 equ 03C5Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned D4S                    :8;
    };
    struct {
        unsigned LC4D4S                 :8;
    };
    struct {
        unsigned D4S0                   :1;
        unsigned D4S1                   :1;
        unsigned D4S2                   :1;
        unsigned D4S3                   :1;
        unsigned D4S4                   :1;
        unsigned D4S5                   :1;
        unsigned D4S6                   :1;
        unsigned D4S7                   :1;
    };
    struct {
        unsigned LC4D4S0                :1;
        unsigned LC4D4S1                :1;
        unsigned LC4D4S2                :1;
        unsigned LC4D4S3                :1;
        unsigned LC4D4S4                :1;
        unsigned LC4D4S5                :1;
        unsigned LC4D4S6                :1;
        unsigned LC4D4S7                :1;
    };
} CLC4SEL3bits_t;
extern volatile CLC4SEL3bits_t CLC4SEL3bits __at(0x3C5B);
// bitfield macros
#define _CLC4SEL3_D4S_POSN                                  0x0
#define _CLC4SEL3_D4S_POSITION                              0x0
#define _CLC4SEL3_D4S_SIZE                                  0x8
#define _CLC4SEL3_D4S_LENGTH                                0x8
#define _CLC4SEL3_D4S_MASK                                  0xFF
#define _CLC4SEL3_LC4D4S_POSN                               0x0
#define _CLC4SEL3_LC4D4S_POSITION                           0x0
#define _CLC4SEL3_LC4D4S_SIZE                               0x8
#define _CLC4SEL3_LC4D4S_LENGTH                             0x8
#define _CLC4SEL3_LC4D4S_MASK                               0xFF
#define _CLC4SEL3_D4S0_POSN                                 0x0
#define _CLC4SEL3_D4S0_POSITION                             0x0
#define _CLC4SEL3_D4S0_SIZE                                 0x1
#define _CLC4SEL3_D4S0_LENGTH                               0x1
#define _CLC4SEL3_D4S0_MASK                                 0x1
#define _CLC4SEL3_D4S1_POSN                                 0x1
#define _CLC4SEL3_D4S1_POSITION                             0x1
#define _CLC4SEL3_D4S1_SIZE                                 0x1
#define _CLC4SEL3_D4S1_LENGTH                               0x1
#define _CLC4SEL3_D4S1_MASK                                 0x2
#define _CLC4SEL3_D4S2_POSN                                 0x2
#define _CLC4SEL3_D4S2_POSITION                             0x2
#define _CLC4SEL3_D4S2_SIZE                                 0x1
#define _CLC4SEL3_D4S2_LENGTH                               0x1
#define _CLC4SEL3_D4S2_MASK                                 0x4
#define _CLC4SEL3_D4S3_POSN                                 0x3
#define _CLC4SEL3_D4S3_POSITION                             0x3
#define _CLC4SEL3_D4S3_SIZE                                 0x1
#define _CLC4SEL3_D4S3_LENGTH                               0x1
#define _CLC4SEL3_D4S3_MASK                                 0x8
#define _CLC4SEL3_D4S4_POSN                                 0x4
#define _CLC4SEL3_D4S4_POSITION                             0x4
#define _CLC4SEL3_D4S4_SIZE                                 0x1
#define _CLC4SEL3_D4S4_LENGTH                               0x1
#define _CLC4SEL3_D4S4_MASK                                 0x10
#define _CLC4SEL3_D4S5_POSN                                 0x5
#define _CLC4SEL3_D4S5_POSITION                             0x5
#define _CLC4SEL3_D4S5_SIZE                                 0x1
#define _CLC4SEL3_D4S5_LENGTH                               0x1
#define _CLC4SEL3_D4S5_MASK                                 0x20
#define _CLC4SEL3_D4S6_POSN                                 0x6
#define _CLC4SEL3_D4S6_POSITION                             0x6
#define _CLC4SEL3_D4S6_SIZE                                 0x1
#define _CLC4SEL3_D4S6_LENGTH                               0x1
#define _CLC4SEL3_D4S6_MASK                                 0x40
#define _CLC4SEL3_D4S7_POSN                                 0x7
#define _CLC4SEL3_D4S7_POSITION                             0x7
#define _CLC4SEL3_D4S7_SIZE                                 0x1
#define _CLC4SEL3_D4S7_LENGTH                               0x1
#define _CLC4SEL3_D4S7_MASK                                 0x80
#define _CLC4SEL3_LC4D4S0_POSN                              0x0
#define _CLC4SEL3_LC4D4S0_POSITION                          0x0
#define _CLC4SEL3_LC4D4S0_SIZE                              0x1
#define _CLC4SEL3_LC4D4S0_LENGTH                            0x1
#define _CLC4SEL3_LC4D4S0_MASK                              0x1
#define _CLC4SEL3_LC4D4S1_POSN                              0x1
#define _CLC4SEL3_LC4D4S1_POSITION                          0x1
#define _CLC4SEL3_LC4D4S1_SIZE                              0x1
#define _CLC4SEL3_LC4D4S1_LENGTH                            0x1
#define _CLC4SEL3_LC4D4S1_MASK                              0x2
#define _CLC4SEL3_LC4D4S2_POSN                              0x2
#define _CLC4SEL3_LC4D4S2_POSITION                          0x2
#define _CLC4SEL3_LC4D4S2_SIZE                              0x1
#define _CLC4SEL3_LC4D4S2_LENGTH                            0x1
#define _CLC4SEL3_LC4D4S2_MASK                              0x4
#define _CLC4SEL3_LC4D4S3_POSN                              0x3
#define _CLC4SEL3_LC4D4S3_POSITION                          0x3
#define _CLC4SEL3_LC4D4S3_SIZE                              0x1
#define _CLC4SEL3_LC4D4S3_LENGTH                            0x1
#define _CLC4SEL3_LC4D4S3_MASK                              0x8
#define _CLC4SEL3_LC4D4S4_POSN                              0x4
#define _CLC4SEL3_LC4D4S4_POSITION                          0x4
#define _CLC4SEL3_LC4D4S4_SIZE                              0x1
#define _CLC4SEL3_LC4D4S4_LENGTH                            0x1
#define _CLC4SEL3_LC4D4S4_MASK                              0x10
#define _CLC4SEL3_LC4D4S5_POSN                              0x5
#define _CLC4SEL3_LC4D4S5_POSITION                          0x5
#define _CLC4SEL3_LC4D4S5_SIZE                              0x1
#define _CLC4SEL3_LC4D4S5_LENGTH                            0x1
#define _CLC4SEL3_LC4D4S5_MASK                              0x20
#define _CLC4SEL3_LC4D4S6_POSN                              0x6
#define _CLC4SEL3_LC4D4S6_POSITION                          0x6
#define _CLC4SEL3_LC4D4S6_SIZE                              0x1
#define _CLC4SEL3_LC4D4S6_LENGTH                            0x1
#define _CLC4SEL3_LC4D4S6_MASK                              0x40
#define _CLC4SEL3_LC4D4S7_POSN                              0x7
#define _CLC4SEL3_LC4D4S7_POSITION                          0x7
#define _CLC4SEL3_LC4D4S7_SIZE                              0x1
#define _CLC4SEL3_LC4D4S7_LENGTH                            0x1
#define _CLC4SEL3_LC4D4S7_MASK                              0x80

// Register: CLC4GLS0
#define CLC4GLS0 CLC4GLS0
extern volatile unsigned char           CLC4GLS0            __at(0x3C5C);
#ifndef _LIB_BUILD
asm("CLC4GLS0 equ 03C5Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned G1D1N                  :1;
        unsigned G1D1T                  :1;
        unsigned G1D2N                  :1;
        unsigned G1D2T                  :1;
        unsigned G1D3N                  :1;
        unsigned G1D3T                  :1;
        unsigned G1D4N                  :1;
        unsigned G1D4T                  :1;
    };
    struct {
        unsigned LC4G1D1N               :1;
        unsigned LC4G1D1T               :1;
        unsigned LC4G1D2N               :1;
        unsigned LC4G1D2T               :1;
        unsigned LC4G1D3N               :1;
        unsigned LC4G1D3T               :1;
        unsigned LC4G1D4N               :1;
        unsigned LC4G1D4T               :1;
    };
} CLC4GLS0bits_t;
extern volatile CLC4GLS0bits_t CLC4GLS0bits __at(0x3C5C);
// bitfield macros
#define _CLC4GLS0_G1D1N_POSN                                0x0
#define _CLC4GLS0_G1D1N_POSITION                            0x0
#define _CLC4GLS0_G1D1N_SIZE                                0x1
#define _CLC4GLS0_G1D1N_LENGTH                              0x1
#define _CLC4GLS0_G1D1N_MASK                                0x1
#define _CLC4GLS0_G1D1T_POSN                                0x1
#define _CLC4GLS0_G1D1T_POSITION                            0x1
#define _CLC4GLS0_G1D1T_SIZE                                0x1
#define _CLC4GLS0_G1D1T_LENGTH                              0x1
#define _CLC4GLS0_G1D1T_MASK                                0x2
#define _CLC4GLS0_G1D2N_POSN                                0x2
#define _CLC4GLS0_G1D2N_POSITION                            0x2
#define _CLC4GLS0_G1D2N_SIZE                                0x1
#define _CLC4GLS0_G1D2N_LENGTH                              0x1
#define _CLC4GLS0_G1D2N_MASK                                0x4
#define _CLC4GLS0_G1D2T_POSN                                0x3
#define _CLC4GLS0_G1D2T_POSITION                            0x3
#define _CLC4GLS0_G1D2T_SIZE                                0x1
#define _CLC4GLS0_G1D2T_LENGTH                              0x1
#define _CLC4GLS0_G1D2T_MASK                                0x8
#define _CLC4GLS0_G1D3N_POSN                                0x4
#define _CLC4GLS0_G1D3N_POSITION                            0x4
#define _CLC4GLS0_G1D3N_SIZE                                0x1
#define _CLC4GLS0_G1D3N_LENGTH                              0x1
#define _CLC4GLS0_G1D3N_MASK                                0x10
#define _CLC4GLS0_G1D3T_POSN                                0x5
#define _CLC4GLS0_G1D3T_POSITION                            0x5
#define _CLC4GLS0_G1D3T_SIZE                                0x1
#define _CLC4GLS0_G1D3T_LENGTH                              0x1
#define _CLC4GLS0_G1D3T_MASK                                0x20
#define _CLC4GLS0_G1D4N_POSN                                0x6
#define _CLC4GLS0_G1D4N_POSITION                            0x6
#define _CLC4GLS0_G1D4N_SIZE                                0x1
#define _CLC4GLS0_G1D4N_LENGTH                              0x1
#define _CLC4GLS0_G1D4N_MASK                                0x40
#define _CLC4GLS0_G1D4T_POSN                                0x7
#define _CLC4GLS0_G1D4T_POSITION                            0x7
#define _CLC4GLS0_G1D4T_SIZE                                0x1
#define _CLC4GLS0_G1D4T_LENGTH                              0x1
#define _CLC4GLS0_G1D4T_MASK                                0x80
#define _CLC4GLS0_LC4G1D1N_POSN                             0x0
#define _CLC4GLS0_LC4G1D1N_POSITION                         0x0
#define _CLC4GLS0_LC4G1D1N_SIZE                             0x1
#define _CLC4GLS0_LC4G1D1N_LENGTH                           0x1
#define _CLC4GLS0_LC4G1D1N_MASK                             0x1
#define _CLC4GLS0_LC4G1D1T_POSN                             0x1
#define _CLC4GLS0_LC4G1D1T_POSITION                         0x1
#define _CLC4GLS0_LC4G1D1T_SIZE                             0x1
#define _CLC4GLS0_LC4G1D1T_LENGTH                           0x1
#define _CLC4GLS0_LC4G1D1T_MASK                             0x2
#define _CLC4GLS0_LC4G1D2N_POSN                             0x2
#define _CLC4GLS0_LC4G1D2N_POSITION                         0x2
#define _CLC4GLS0_LC4G1D2N_SIZE                             0x1
#define _CLC4GLS0_LC4G1D2N_LENGTH                           0x1
#define _CLC4GLS0_LC4G1D2N_MASK                             0x4
#define _CLC4GLS0_LC4G1D2T_POSN                             0x3
#define _CLC4GLS0_LC4G1D2T_POSITION                         0x3
#define _CLC4GLS0_LC4G1D2T_SIZE                             0x1
#define _CLC4GLS0_LC4G1D2T_LENGTH                           0x1
#define _CLC4GLS0_LC4G1D2T_MASK                             0x8
#define _CLC4GLS0_LC4G1D3N_POSN                             0x4
#define _CLC4GLS0_LC4G1D3N_POSITION                         0x4
#define _CLC4GLS0_LC4G1D3N_SIZE                             0x1
#define _CLC4GLS0_LC4G1D3N_LENGTH                           0x1
#define _CLC4GLS0_LC4G1D3N_MASK                             0x10
#define _CLC4GLS0_LC4G1D3T_POSN                             0x5
#define _CLC4GLS0_LC4G1D3T_POSITION                         0x5
#define _CLC4GLS0_LC4G1D3T_SIZE                             0x1
#define _CLC4GLS0_LC4G1D3T_LENGTH                           0x1
#define _CLC4GLS0_LC4G1D3T_MASK                             0x20
#define _CLC4GLS0_LC4G1D4N_POSN                             0x6
#define _CLC4GLS0_LC4G1D4N_POSITION                         0x6
#define _CLC4GLS0_LC4G1D4N_SIZE                             0x1
#define _CLC4GLS0_LC4G1D4N_LENGTH                           0x1
#define _CLC4GLS0_LC4G1D4N_MASK                             0x40
#define _CLC4GLS0_LC4G1D4T_POSN                             0x7
#define _CLC4GLS0_LC4G1D4T_POSITION                         0x7
#define _CLC4GLS0_LC4G1D4T_SIZE                             0x1
#define _CLC4GLS0_LC4G1D4T_LENGTH                           0x1
#define _CLC4GLS0_LC4G1D4T_MASK                             0x80

// Register: CLC4GLS1
#define CLC4GLS1 CLC4GLS1
extern volatile unsigned char           CLC4GLS1            __at(0x3C5D);
#ifndef _LIB_BUILD
asm("CLC4GLS1 equ 03C5Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned G2D1N                  :1;
        unsigned G2D1T                  :1;
        unsigned G2D2N                  :1;
        unsigned G2D2T                  :1;
        unsigned G2D3N                  :1;
        unsigned G2D3T                  :1;
        unsigned G2D4N                  :1;
        unsigned G2D4T                  :1;
    };
    struct {
        unsigned LC4G2D1N               :1;
        unsigned LC4G2D1T               :1;
        unsigned LC4G2D2N               :1;
        unsigned LC4G2D2T               :1;
        unsigned LC4G2D3N               :1;
        unsigned LC4G2D3T               :1;
        unsigned LC4G2D4N               :1;
        unsigned LC4G2D4T               :1;
    };
} CLC4GLS1bits_t;
extern volatile CLC4GLS1bits_t CLC4GLS1bits __at(0x3C5D);
// bitfield macros
#define _CLC4GLS1_G2D1N_POSN                                0x0
#define _CLC4GLS1_G2D1N_POSITION                            0x0
#define _CLC4GLS1_G2D1N_SIZE                                0x1
#define _CLC4GLS1_G2D1N_LENGTH                              0x1
#define _CLC4GLS1_G2D1N_MASK                                0x1
#define _CLC4GLS1_G2D1T_POSN                                0x1
#define _CLC4GLS1_G2D1T_POSITION                            0x1
#define _CLC4GLS1_G2D1T_SIZE                                0x1
#define _CLC4GLS1_G2D1T_LENGTH                              0x1
#define _CLC4GLS1_G2D1T_MASK                                0x2
#define _CLC4GLS1_G2D2N_POSN                                0x2
#define _CLC4GLS1_G2D2N_POSITION                            0x2
#define _CLC4GLS1_G2D2N_SIZE                                0x1
#define _CLC4GLS1_G2D2N_LENGTH                              0x1
#define _CLC4GLS1_G2D2N_MASK                                0x4
#define _CLC4GLS1_G2D2T_POSN                                0x3
#define _CLC4GLS1_G2D2T_POSITION                            0x3
#define _CLC4GLS1_G2D2T_SIZE                                0x1
#define _CLC4GLS1_G2D2T_LENGTH                              0x1
#define _CLC4GLS1_G2D2T_MASK                                0x8
#define _CLC4GLS1_G2D3N_POSN                                0x4
#define _CLC4GLS1_G2D3N_POSITION                            0x4
#define _CLC4GLS1_G2D3N_SIZE                                0x1
#define _CLC4GLS1_G2D3N_LENGTH                              0x1
#define _CLC4GLS1_G2D3N_MASK                                0x10
#define _CLC4GLS1_G2D3T_POSN                                0x5
#define _CLC4GLS1_G2D3T_POSITION                            0x5
#define _CLC4GLS1_G2D3T_SIZE                                0x1
#define _CLC4GLS1_G2D3T_LENGTH                              0x1
#define _CLC4GLS1_G2D3T_MASK                                0x20
#define _CLC4GLS1_G2D4N_POSN                                0x6
#define _CLC4GLS1_G2D4N_POSITION                            0x6
#define _CLC4GLS1_G2D4N_SIZE                                0x1
#define _CLC4GLS1_G2D4N_LENGTH                              0x1
#define _CLC4GLS1_G2D4N_MASK                                0x40
#define _CLC4GLS1_G2D4T_POSN                                0x7
#define _CLC4GLS1_G2D4T_POSITION                            0x7
#define _CLC4GLS1_G2D4T_SIZE                                0x1
#define _CLC4GLS1_G2D4T_LENGTH                              0x1
#define _CLC4GLS1_G2D4T_MASK                                0x80
#define _CLC4GLS1_LC4G2D1N_POSN                             0x0
#define _CLC4GLS1_LC4G2D1N_POSITION                         0x0
#define _CLC4GLS1_LC4G2D1N_SIZE                             0x1
#define _CLC4GLS1_LC4G2D1N_LENGTH                           0x1
#define _CLC4GLS1_LC4G2D1N_MASK                             0x1
#define _CLC4GLS1_LC4G2D1T_POSN                             0x1
#define _CLC4GLS1_LC4G2D1T_POSITION                         0x1
#define _CLC4GLS1_LC4G2D1T_SIZE                             0x1
#define _CLC4GLS1_LC4G2D1T_LENGTH                           0x1
#define _CLC4GLS1_LC4G2D1T_MASK                             0x2
#define _CLC4GLS1_LC4G2D2N_POSN                             0x2
#define _CLC4GLS1_LC4G2D2N_POSITION                         0x2
#define _CLC4GLS1_LC4G2D2N_SIZE                             0x1
#define _CLC4GLS1_LC4G2D2N_LENGTH                           0x1
#define _CLC4GLS1_LC4G2D2N_MASK                             0x4
#define _CLC4GLS1_LC4G2D2T_POSN                             0x3
#define _CLC4GLS1_LC4G2D2T_POSITION                         0x3
#define _CLC4GLS1_LC4G2D2T_SIZE                             0x1
#define _CLC4GLS1_LC4G2D2T_LENGTH                           0x1
#define _CLC4GLS1_LC4G2D2T_MASK                             0x8
#define _CLC4GLS1_LC4G2D3N_POSN                             0x4
#define _CLC4GLS1_LC4G2D3N_POSITION                         0x4
#define _CLC4GLS1_LC4G2D3N_SIZE                             0x1
#define _CLC4GLS1_LC4G2D3N_LENGTH                           0x1
#define _CLC4GLS1_LC4G2D3N_MASK                             0x10
#define _CLC4GLS1_LC4G2D3T_POSN                             0x5
#define _CLC4GLS1_LC4G2D3T_POSITION                         0x5
#define _CLC4GLS1_LC4G2D3T_SIZE                             0x1
#define _CLC4GLS1_LC4G2D3T_LENGTH                           0x1
#define _CLC4GLS1_LC4G2D3T_MASK                             0x20
#define _CLC4GLS1_LC4G2D4N_POSN                             0x6
#define _CLC4GLS1_LC4G2D4N_POSITION                         0x6
#define _CLC4GLS1_LC4G2D4N_SIZE                             0x1
#define _CLC4GLS1_LC4G2D4N_LENGTH                           0x1
#define _CLC4GLS1_LC4G2D4N_MASK                             0x40
#define _CLC4GLS1_LC4G2D4T_POSN                             0x7
#define _CLC4GLS1_LC4G2D4T_POSITION                         0x7
#define _CLC4GLS1_LC4G2D4T_SIZE                             0x1
#define _CLC4GLS1_LC4G2D4T_LENGTH                           0x1
#define _CLC4GLS1_LC4G2D4T_MASK                             0x80

// Register: CLC4GLS2
#define CLC4GLS2 CLC4GLS2
extern volatile unsigned char           CLC4GLS2            __at(0x3C5E);
#ifndef _LIB_BUILD
asm("CLC4GLS2 equ 03C5Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned G3D1N                  :1;
        unsigned G3D1T                  :1;
        unsigned G3D2N                  :1;
        unsigned G3D2T                  :1;
        unsigned G3D3N                  :1;
        unsigned G3D3T                  :1;
        unsigned G3D4N                  :1;
        unsigned G3D4T                  :1;
    };
    struct {
        unsigned LC4G3D1N               :1;
        unsigned LC4G3D1T               :1;
        unsigned LC4G3D2N               :1;
        unsigned LC4G3D2T               :1;
        unsigned LC4G3D3N               :1;
        unsigned LC4G3D3T               :1;
        unsigned LC4G3D4N               :1;
        unsigned LC4G3D4T               :1;
    };
} CLC4GLS2bits_t;
extern volatile CLC4GLS2bits_t CLC4GLS2bits __at(0x3C5E);
// bitfield macros
#define _CLC4GLS2_G3D1N_POSN                                0x0
#define _CLC4GLS2_G3D1N_POSITION                            0x0
#define _CLC4GLS2_G3D1N_SIZE                                0x1
#define _CLC4GLS2_G3D1N_LENGTH                              0x1
#define _CLC4GLS2_G3D1N_MASK                                0x1
#define _CLC4GLS2_G3D1T_POSN                                0x1
#define _CLC4GLS2_G3D1T_POSITION                            0x1
#define _CLC4GLS2_G3D1T_SIZE                                0x1
#define _CLC4GLS2_G3D1T_LENGTH                              0x1
#define _CLC4GLS2_G3D1T_MASK                                0x2
#define _CLC4GLS2_G3D2N_POSN                                0x2
#define _CLC4GLS2_G3D2N_POSITION                            0x2
#define _CLC4GLS2_G3D2N_SIZE                                0x1
#define _CLC4GLS2_G3D2N_LENGTH                              0x1
#define _CLC4GLS2_G3D2N_MASK                                0x4
#define _CLC4GLS2_G3D2T_POSN                                0x3
#define _CLC4GLS2_G3D2T_POSITION                            0x3
#define _CLC4GLS2_G3D2T_SIZE                                0x1
#define _CLC4GLS2_G3D2T_LENGTH                              0x1
#define _CLC4GLS2_G3D2T_MASK                                0x8
#define _CLC4GLS2_G3D3N_POSN                                0x4
#define _CLC4GLS2_G3D3N_POSITION                            0x4
#define _CLC4GLS2_G3D3N_SIZE                                0x1
#define _CLC4GLS2_G3D3N_LENGTH                              0x1
#define _CLC4GLS2_G3D3N_MASK                                0x10
#define _CLC4GLS2_G3D3T_POSN                                0x5
#define _CLC4GLS2_G3D3T_POSITION                            0x5
#define _CLC4GLS2_G3D3T_SIZE                                0x1
#define _CLC4GLS2_G3D3T_LENGTH                              0x1
#define _CLC4GLS2_G3D3T_MASK                                0x20
#define _CLC4GLS2_G3D4N_POSN                                0x6
#define _CLC4GLS2_G3D4N_POSITION                            0x6
#define _CLC4GLS2_G3D4N_SIZE                                0x1
#define _CLC4GLS2_G3D4N_LENGTH                              0x1
#define _CLC4GLS2_G3D4N_MASK                                0x40
#define _CLC4GLS2_G3D4T_POSN                                0x7
#define _CLC4GLS2_G3D4T_POSITION                            0x7
#define _CLC4GLS2_G3D4T_SIZE                                0x1
#define _CLC4GLS2_G3D4T_LENGTH                              0x1
#define _CLC4GLS2_G3D4T_MASK                                0x80
#define _CLC4GLS2_LC4G3D1N_POSN                             0x0
#define _CLC4GLS2_LC4G3D1N_POSITION                         0x0
#define _CLC4GLS2_LC4G3D1N_SIZE                             0x1
#define _CLC4GLS2_LC4G3D1N_LENGTH                           0x1
#define _CLC4GLS2_LC4G3D1N_MASK                             0x1
#define _CLC4GLS2_LC4G3D1T_POSN                             0x1
#define _CLC4GLS2_LC4G3D1T_POSITION                         0x1
#define _CLC4GLS2_LC4G3D1T_SIZE                             0x1
#define _CLC4GLS2_LC4G3D1T_LENGTH                           0x1
#define _CLC4GLS2_LC4G3D1T_MASK                             0x2
#define _CLC4GLS2_LC4G3D2N_POSN                             0x2
#define _CLC4GLS2_LC4G3D2N_POSITION                         0x2
#define _CLC4GLS2_LC4G3D2N_SIZE                             0x1
#define _CLC4GLS2_LC4G3D2N_LENGTH                           0x1
#define _CLC4GLS2_LC4G3D2N_MASK                             0x4
#define _CLC4GLS2_LC4G3D2T_POSN                             0x3
#define _CLC4GLS2_LC4G3D2T_POSITION                         0x3
#define _CLC4GLS2_LC4G3D2T_SIZE                             0x1
#define _CLC4GLS2_LC4G3D2T_LENGTH                           0x1
#define _CLC4GLS2_LC4G3D2T_MASK                             0x8
#define _CLC4GLS2_LC4G3D3N_POSN                             0x4
#define _CLC4GLS2_LC4G3D3N_POSITION                         0x4
#define _CLC4GLS2_LC4G3D3N_SIZE                             0x1
#define _CLC4GLS2_LC4G3D3N_LENGTH                           0x1
#define _CLC4GLS2_LC4G3D3N_MASK                             0x10
#define _CLC4GLS2_LC4G3D3T_POSN                             0x5
#define _CLC4GLS2_LC4G3D3T_POSITION                         0x5
#define _CLC4GLS2_LC4G3D3T_SIZE                             0x1
#define _CLC4GLS2_LC4G3D3T_LENGTH                           0x1
#define _CLC4GLS2_LC4G3D3T_MASK                             0x20
#define _CLC4GLS2_LC4G3D4N_POSN                             0x6
#define _CLC4GLS2_LC4G3D4N_POSITION                         0x6
#define _CLC4GLS2_LC4G3D4N_SIZE                             0x1
#define _CLC4GLS2_LC4G3D4N_LENGTH                           0x1
#define _CLC4GLS2_LC4G3D4N_MASK                             0x40
#define _CLC4GLS2_LC4G3D4T_POSN                             0x7
#define _CLC4GLS2_LC4G3D4T_POSITION                         0x7
#define _CLC4GLS2_LC4G3D4T_SIZE                             0x1
#define _CLC4GLS2_LC4G3D4T_LENGTH                           0x1
#define _CLC4GLS2_LC4G3D4T_MASK                             0x80

// Register: CLC4GLS3
#define CLC4GLS3 CLC4GLS3
extern volatile unsigned char           CLC4GLS3            __at(0x3C5F);
#ifndef _LIB_BUILD
asm("CLC4GLS3 equ 03C5Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned G4D1N                  :1;
        unsigned G4D1T                  :1;
        unsigned G4D2N                  :1;
        unsigned G4D2T                  :1;
        unsigned G4D3N                  :1;
        unsigned G4D3T                  :1;
        unsigned G4D4N                  :1;
        unsigned G4D4T                  :1;
    };
    struct {
        unsigned LC4G4D1N               :1;
        unsigned LC4G4D1T               :1;
        unsigned LC4G4D2N               :1;
        unsigned LC4G4D2T               :1;
        unsigned LC4G4D3N               :1;
        unsigned LC4G4D3T               :1;
        unsigned LC4G4D4N               :1;
        unsigned LC4G4D4T               :1;
    };
} CLC4GLS3bits_t;
extern volatile CLC4GLS3bits_t CLC4GLS3bits __at(0x3C5F);
// bitfield macros
#define _CLC4GLS3_G4D1N_POSN                                0x0
#define _CLC4GLS3_G4D1N_POSITION                            0x0
#define _CLC4GLS3_G4D1N_SIZE                                0x1
#define _CLC4GLS3_G4D1N_LENGTH                              0x1
#define _CLC4GLS3_G4D1N_MASK                                0x1
#define _CLC4GLS3_G4D1T_POSN                                0x1
#define _CLC4GLS3_G4D1T_POSITION                            0x1
#define _CLC4GLS3_G4D1T_SIZE                                0x1
#define _CLC4GLS3_G4D1T_LENGTH                              0x1
#define _CLC4GLS3_G4D1T_MASK                                0x2
#define _CLC4GLS3_G4D2N_POSN                                0x2
#define _CLC4GLS3_G4D2N_POSITION                            0x2
#define _CLC4GLS3_G4D2N_SIZE                                0x1
#define _CLC4GLS3_G4D2N_LENGTH                              0x1
#define _CLC4GLS3_G4D2N_MASK                                0x4
#define _CLC4GLS3_G4D2T_POSN                                0x3
#define _CLC4GLS3_G4D2T_POSITION                            0x3
#define _CLC4GLS3_G4D2T_SIZE                                0x1
#define _CLC4GLS3_G4D2T_LENGTH                              0x1
#define _CLC4GLS3_G4D2T_MASK                                0x8
#define _CLC4GLS3_G4D3N_POSN                                0x4
#define _CLC4GLS3_G4D3N_POSITION                            0x4
#define _CLC4GLS3_G4D3N_SIZE                                0x1
#define _CLC4GLS3_G4D3N_LENGTH                              0x1
#define _CLC4GLS3_G4D3N_MASK                                0x10
#define _CLC4GLS3_G4D3T_POSN                                0x5
#define _CLC4GLS3_G4D3T_POSITION                            0x5
#define _CLC4GLS3_G4D3T_SIZE                                0x1
#define _CLC4GLS3_G4D3T_LENGTH                              0x1
#define _CLC4GLS3_G4D3T_MASK                                0x20
#define _CLC4GLS3_G4D4N_POSN                                0x6
#define _CLC4GLS3_G4D4N_POSITION                            0x6
#define _CLC4GLS3_G4D4N_SIZE                                0x1
#define _CLC4GLS3_G4D4N_LENGTH                              0x1
#define _CLC4GLS3_G4D4N_MASK                                0x40
#define _CLC4GLS3_G4D4T_POSN                                0x7
#define _CLC4GLS3_G4D4T_POSITION                            0x7
#define _CLC4GLS3_G4D4T_SIZE                                0x1
#define _CLC4GLS3_G4D4T_LENGTH                              0x1
#define _CLC4GLS3_G4D4T_MASK                                0x80
#define _CLC4GLS3_LC4G4D1N_POSN                             0x0
#define _CLC4GLS3_LC4G4D1N_POSITION                         0x0
#define _CLC4GLS3_LC4G4D1N_SIZE                             0x1
#define _CLC4GLS3_LC4G4D1N_LENGTH                           0x1
#define _CLC4GLS3_LC4G4D1N_MASK                             0x1
#define _CLC4GLS3_LC4G4D1T_POSN                             0x1
#define _CLC4GLS3_LC4G4D1T_POSITION                         0x1
#define _CLC4GLS3_LC4G4D1T_SIZE                             0x1
#define _CLC4GLS3_LC4G4D1T_LENGTH                           0x1
#define _CLC4GLS3_LC4G4D1T_MASK                             0x2
#define _CLC4GLS3_LC4G4D2N_POSN                             0x2
#define _CLC4GLS3_LC4G4D2N_POSITION                         0x2
#define _CLC4GLS3_LC4G4D2N_SIZE                             0x1
#define _CLC4GLS3_LC4G4D2N_LENGTH                           0x1
#define _CLC4GLS3_LC4G4D2N_MASK                             0x4
#define _CLC4GLS3_LC4G4D2T_POSN                             0x3
#define _CLC4GLS3_LC4G4D2T_POSITION                         0x3
#define _CLC4GLS3_LC4G4D2T_SIZE                             0x1
#define _CLC4GLS3_LC4G4D2T_LENGTH                           0x1
#define _CLC4GLS3_LC4G4D2T_MASK                             0x8
#define _CLC4GLS3_LC4G4D3N_POSN                             0x4
#define _CLC4GLS3_LC4G4D3N_POSITION                         0x4
#define _CLC4GLS3_LC4G4D3N_SIZE                             0x1
#define _CLC4GLS3_LC4G4D3N_LENGTH                           0x1
#define _CLC4GLS3_LC4G4D3N_MASK                             0x10
#define _CLC4GLS3_LC4G4D3T_POSN                             0x5
#define _CLC4GLS3_LC4G4D3T_POSITION                         0x5
#define _CLC4GLS3_LC4G4D3T_SIZE                             0x1
#define _CLC4GLS3_LC4G4D3T_LENGTH                           0x1
#define _CLC4GLS3_LC4G4D3T_MASK                             0x20
#define _CLC4GLS3_LC4G4D4N_POSN                             0x6
#define _CLC4GLS3_LC4G4D4N_POSITION                         0x6
#define _CLC4GLS3_LC4G4D4N_SIZE                             0x1
#define _CLC4GLS3_LC4G4D4N_LENGTH                           0x1
#define _CLC4GLS3_LC4G4D4N_MASK                             0x40
#define _CLC4GLS3_LC4G4D4T_POSN                             0x7
#define _CLC4GLS3_LC4G4D4T_POSITION                         0x7
#define _CLC4GLS3_LC4G4D4T_SIZE                             0x1
#define _CLC4GLS3_LC4G4D4T_LENGTH                           0x1
#define _CLC4GLS3_LC4G4D4T_MASK                             0x80

// Register: CLC3CON
#define CLC3CON CLC3CON
extern volatile unsigned char           CLC3CON             __at(0x3C60);
#ifndef _LIB_BUILD
asm("CLC3CON equ 03C60h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :3;
        unsigned INTN                   :1;
        unsigned INTP                   :1;
        unsigned OUT                    :1;
        unsigned OE                     :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
    };
    struct {
        unsigned LC3MODE                :3;
        unsigned LC3INTN                :1;
        unsigned LC3INTP                :1;
        unsigned LC3OUT                 :1;
        unsigned LC3OE                  :1;
        unsigned LC3EN                  :1;
    };
    struct {
        unsigned LC3MODE0               :1;
        unsigned LC3MODE1               :1;
        unsigned LC3MODE2               :1;
    };
} CLC3CONbits_t;
extern volatile CLC3CONbits_t CLC3CONbits __at(0x3C60);
// bitfield macros
#define _CLC3CON_MODE_POSN                                  0x0
#define _CLC3CON_MODE_POSITION                              0x0
#define _CLC3CON_MODE_SIZE                                  0x3
#define _CLC3CON_MODE_LENGTH                                0x3
#define _CLC3CON_MODE_MASK                                  0x7
#define _CLC3CON_INTN_POSN                                  0x3
#define _CLC3CON_INTN_POSITION                              0x3
#define _CLC3CON_INTN_SIZE                                  0x1
#define _CLC3CON_INTN_LENGTH                                0x1
#define _CLC3CON_INTN_MASK                                  0x8
#define _CLC3CON_INTP_POSN                                  0x4
#define _CLC3CON_INTP_POSITION                              0x4
#define _CLC3CON_INTP_SIZE                                  0x1
#define _CLC3CON_INTP_LENGTH                                0x1
#define _CLC3CON_INTP_MASK                                  0x10
#define _CLC3CON_OUT_POSN                                   0x5
#define _CLC3CON_OUT_POSITION                               0x5
#define _CLC3CON_OUT_SIZE                                   0x1
#define _CLC3CON_OUT_LENGTH                                 0x1
#define _CLC3CON_OUT_MASK                                   0x20
#define _CLC3CON_OE_POSN                                    0x6
#define _CLC3CON_OE_POSITION                                0x6
#define _CLC3CON_OE_SIZE                                    0x1
#define _CLC3CON_OE_LENGTH                                  0x1
#define _CLC3CON_OE_MASK                                    0x40
#define _CLC3CON_EN_POSN                                    0x7
#define _CLC3CON_EN_POSITION                                0x7
#define _CLC3CON_EN_SIZE                                    0x1
#define _CLC3CON_EN_LENGTH                                  0x1
#define _CLC3CON_EN_MASK                                    0x80
#define _CLC3CON_MODE0_POSN                                 0x0
#define _CLC3CON_MODE0_POSITION                             0x0
#define _CLC3CON_MODE0_SIZE                                 0x1
#define _CLC3CON_MODE0_LENGTH                               0x1
#define _CLC3CON_MODE0_MASK                                 0x1
#define _CLC3CON_MODE1_POSN                                 0x1
#define _CLC3CON_MODE1_POSITION                             0x1
#define _CLC3CON_MODE1_SIZE                                 0x1
#define _CLC3CON_MODE1_LENGTH                               0x1
#define _CLC3CON_MODE1_MASK                                 0x2
#define _CLC3CON_MODE2_POSN                                 0x2
#define _CLC3CON_MODE2_POSITION                             0x2
#define _CLC3CON_MODE2_SIZE                                 0x1
#define _CLC3CON_MODE2_LENGTH                               0x1
#define _CLC3CON_MODE2_MASK                                 0x4
#define _CLC3CON_LC3MODE_POSN                               0x0
#define _CLC3CON_LC3MODE_POSITION                           0x0
#define _CLC3CON_LC3MODE_SIZE                               0x3
#define _CLC3CON_LC3MODE_LENGTH                             0x3
#define _CLC3CON_LC3MODE_MASK                               0x7
#define _CLC3CON_LC3INTN_POSN                               0x3
#define _CLC3CON_LC3INTN_POSITION                           0x3
#define _CLC3CON_LC3INTN_SIZE                               0x1
#define _CLC3CON_LC3INTN_LENGTH                             0x1
#define _CLC3CON_LC3INTN_MASK                               0x8
#define _CLC3CON_LC3INTP_POSN                               0x4
#define _CLC3CON_LC3INTP_POSITION                           0x4
#define _CLC3CON_LC3INTP_SIZE                               0x1
#define _CLC3CON_LC3INTP_LENGTH                             0x1
#define _CLC3CON_LC3INTP_MASK                               0x10
#define _CLC3CON_LC3OUT_POSN                                0x5
#define _CLC3CON_LC3OUT_POSITION                            0x5
#define _CLC3CON_LC3OUT_SIZE                                0x1
#define _CLC3CON_LC3OUT_LENGTH                              0x1
#define _CLC3CON_LC3OUT_MASK                                0x20
#define _CLC3CON_LC3OE_POSN                                 0x6
#define _CLC3CON_LC3OE_POSITION                             0x6
#define _CLC3CON_LC3OE_SIZE                                 0x1
#define _CLC3CON_LC3OE_LENGTH                               0x1
#define _CLC3CON_LC3OE_MASK                                 0x40
#define _CLC3CON_LC3EN_POSN                                 0x7
#define _CLC3CON_LC3EN_POSITION                             0x7
#define _CLC3CON_LC3EN_SIZE                                 0x1
#define _CLC3CON_LC3EN_LENGTH                               0x1
#define _CLC3CON_LC3EN_MASK                                 0x80
#define _CLC3CON_LC3MODE0_POSN                              0x0
#define _CLC3CON_LC3MODE0_POSITION                          0x0
#define _CLC3CON_LC3MODE0_SIZE                              0x1
#define _CLC3CON_LC3MODE0_LENGTH                            0x1
#define _CLC3CON_LC3MODE0_MASK                              0x1
#define _CLC3CON_LC3MODE1_POSN                              0x1
#define _CLC3CON_LC3MODE1_POSITION                          0x1
#define _CLC3CON_LC3MODE1_SIZE                              0x1
#define _CLC3CON_LC3MODE1_LENGTH                            0x1
#define _CLC3CON_LC3MODE1_MASK                              0x2
#define _CLC3CON_LC3MODE2_POSN                              0x2
#define _CLC3CON_LC3MODE2_POSITION                          0x2
#define _CLC3CON_LC3MODE2_SIZE                              0x1
#define _CLC3CON_LC3MODE2_LENGTH                            0x1
#define _CLC3CON_LC3MODE2_MASK                              0x4

// Register: CLC3POL
#define CLC3POL CLC3POL
extern volatile unsigned char           CLC3POL             __at(0x3C61);
#ifndef _LIB_BUILD
asm("CLC3POL equ 03C61h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned G1POL                  :1;
        unsigned G2POL                  :1;
        unsigned G3POL                  :1;
        unsigned G4POL                  :1;
        unsigned                        :3;
        unsigned POL                    :1;
    };
    struct {
        unsigned LC3G1POL               :1;
        unsigned LC3G2POL               :1;
        unsigned LC3G3POL               :1;
        unsigned LC3G4POL               :1;
        unsigned                        :3;
        unsigned LC3POL                 :1;
    };
} CLC3POLbits_t;
extern volatile CLC3POLbits_t CLC3POLbits __at(0x3C61);
// bitfield macros
#define _CLC3POL_G1POL_POSN                                 0x0
#define _CLC3POL_G1POL_POSITION                             0x0
#define _CLC3POL_G1POL_SIZE                                 0x1
#define _CLC3POL_G1POL_LENGTH                               0x1
#define _CLC3POL_G1POL_MASK                                 0x1
#define _CLC3POL_G2POL_POSN                                 0x1
#define _CLC3POL_G2POL_POSITION                             0x1
#define _CLC3POL_G2POL_SIZE                                 0x1
#define _CLC3POL_G2POL_LENGTH                               0x1
#define _CLC3POL_G2POL_MASK                                 0x2
#define _CLC3POL_G3POL_POSN                                 0x2
#define _CLC3POL_G3POL_POSITION                             0x2
#define _CLC3POL_G3POL_SIZE                                 0x1
#define _CLC3POL_G3POL_LENGTH                               0x1
#define _CLC3POL_G3POL_MASK                                 0x4
#define _CLC3POL_G4POL_POSN                                 0x3
#define _CLC3POL_G4POL_POSITION                             0x3
#define _CLC3POL_G4POL_SIZE                                 0x1
#define _CLC3POL_G4POL_LENGTH                               0x1
#define _CLC3POL_G4POL_MASK                                 0x8
#define _CLC3POL_POL_POSN                                   0x7
#define _CLC3POL_POL_POSITION                               0x7
#define _CLC3POL_POL_SIZE                                   0x1
#define _CLC3POL_POL_LENGTH                                 0x1
#define _CLC3POL_POL_MASK                                   0x80
#define _CLC3POL_LC3G1POL_POSN                              0x0
#define _CLC3POL_LC3G1POL_POSITION                          0x0
#define _CLC3POL_LC3G1POL_SIZE                              0x1
#define _CLC3POL_LC3G1POL_LENGTH                            0x1
#define _CLC3POL_LC3G1POL_MASK                              0x1
#define _CLC3POL_LC3G2POL_POSN                              0x1
#define _CLC3POL_LC3G2POL_POSITION                          0x1
#define _CLC3POL_LC3G2POL_SIZE                              0x1
#define _CLC3POL_LC3G2POL_LENGTH                            0x1
#define _CLC3POL_LC3G2POL_MASK                              0x2
#define _CLC3POL_LC3G3POL_POSN                              0x2
#define _CLC3POL_LC3G3POL_POSITION                          0x2
#define _CLC3POL_LC3G3POL_SIZE                              0x1
#define _CLC3POL_LC3G3POL_LENGTH                            0x1
#define _CLC3POL_LC3G3POL_MASK                              0x4
#define _CLC3POL_LC3G4POL_POSN                              0x3
#define _CLC3POL_LC3G4POL_POSITION                          0x3
#define _CLC3POL_LC3G4POL_SIZE                              0x1
#define _CLC3POL_LC3G4POL_LENGTH                            0x1
#define _CLC3POL_LC3G4POL_MASK                              0x8
#define _CLC3POL_LC3POL_POSN                                0x7
#define _CLC3POL_LC3POL_POSITION                            0x7
#define _CLC3POL_LC3POL_SIZE                                0x1
#define _CLC3POL_LC3POL_LENGTH                              0x1
#define _CLC3POL_LC3POL_MASK                                0x80

// Register: CLC3SEL0
#define CLC3SEL0 CLC3SEL0
extern volatile unsigned char           CLC3SEL0            __at(0x3C62);
#ifndef _LIB_BUILD
asm("CLC3SEL0 equ 03C62h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned D1S                    :8;
    };
    struct {
        unsigned LC3D1S                 :8;
    };
    struct {
        unsigned D1S0                   :1;
        unsigned D1S1                   :1;
        unsigned D1S2                   :1;
        unsigned D1S3                   :1;
        unsigned D1S4                   :1;
        unsigned D1S5                   :1;
        unsigned D1S6                   :1;
        unsigned D1S7                   :1;
    };
    struct {
        unsigned LC3D1S0                :1;
        unsigned LC3D1S1                :1;
        unsigned LC3D1S2                :1;
        unsigned LC3D1S3                :1;
        unsigned LC3D1S4                :1;
        unsigned LC3D1S5                :1;
        unsigned LC3D1S6                :1;
        unsigned LC3D1S7                :1;
    };
} CLC3SEL0bits_t;
extern volatile CLC3SEL0bits_t CLC3SEL0bits __at(0x3C62);
// bitfield macros
#define _CLC3SEL0_D1S_POSN                                  0x0
#define _CLC3SEL0_D1S_POSITION                              0x0
#define _CLC3SEL0_D1S_SIZE                                  0x8
#define _CLC3SEL0_D1S_LENGTH                                0x8
#define _CLC3SEL0_D1S_MASK                                  0xFF
#define _CLC3SEL0_LC3D1S_POSN                               0x0
#define _CLC3SEL0_LC3D1S_POSITION                           0x0
#define _CLC3SEL0_LC3D1S_SIZE                               0x8
#define _CLC3SEL0_LC3D1S_LENGTH                             0x8
#define _CLC3SEL0_LC3D1S_MASK                               0xFF
#define _CLC3SEL0_D1S0_POSN                                 0x0
#define _CLC3SEL0_D1S0_POSITION                             0x0
#define _CLC3SEL0_D1S0_SIZE                                 0x1
#define _CLC3SEL0_D1S0_LENGTH                               0x1
#define _CLC3SEL0_D1S0_MASK                                 0x1
#define _CLC3SEL0_D1S1_POSN                                 0x1
#define _CLC3SEL0_D1S1_POSITION                             0x1
#define _CLC3SEL0_D1S1_SIZE                                 0x1
#define _CLC3SEL0_D1S1_LENGTH                               0x1
#define _CLC3SEL0_D1S1_MASK                                 0x2
#define _CLC3SEL0_D1S2_POSN                                 0x2
#define _CLC3SEL0_D1S2_POSITION                             0x2
#define _CLC3SEL0_D1S2_SIZE                                 0x1
#define _CLC3SEL0_D1S2_LENGTH                               0x1
#define _CLC3SEL0_D1S2_MASK                                 0x4
#define _CLC3SEL0_D1S3_POSN                                 0x3
#define _CLC3SEL0_D1S3_POSITION                             0x3
#define _CLC3SEL0_D1S3_SIZE                                 0x1
#define _CLC3SEL0_D1S3_LENGTH                               0x1
#define _CLC3SEL0_D1S3_MASK                                 0x8
#define _CLC3SEL0_D1S4_POSN                                 0x4
#define _CLC3SEL0_D1S4_POSITION                             0x4
#define _CLC3SEL0_D1S4_SIZE                                 0x1
#define _CLC3SEL0_D1S4_LENGTH                               0x1
#define _CLC3SEL0_D1S4_MASK                                 0x10
#define _CLC3SEL0_D1S5_POSN                                 0x5
#define _CLC3SEL0_D1S5_POSITION                             0x5
#define _CLC3SEL0_D1S5_SIZE                                 0x1
#define _CLC3SEL0_D1S5_LENGTH                               0x1
#define _CLC3SEL0_D1S5_MASK                                 0x20
#define _CLC3SEL0_D1S6_POSN                                 0x6
#define _CLC3SEL0_D1S6_POSITION                             0x6
#define _CLC3SEL0_D1S6_SIZE                                 0x1
#define _CLC3SEL0_D1S6_LENGTH                               0x1
#define _CLC3SEL0_D1S6_MASK                                 0x40
#define _CLC3SEL0_D1S7_POSN                                 0x7
#define _CLC3SEL0_D1S7_POSITION                             0x7
#define _CLC3SEL0_D1S7_SIZE                                 0x1
#define _CLC3SEL0_D1S7_LENGTH                               0x1
#define _CLC3SEL0_D1S7_MASK                                 0x80
#define _CLC3SEL0_LC3D1S0_POSN                              0x0
#define _CLC3SEL0_LC3D1S0_POSITION                          0x0
#define _CLC3SEL0_LC3D1S0_SIZE                              0x1
#define _CLC3SEL0_LC3D1S0_LENGTH                            0x1
#define _CLC3SEL0_LC3D1S0_MASK                              0x1
#define _CLC3SEL0_LC3D1S1_POSN                              0x1
#define _CLC3SEL0_LC3D1S1_POSITION                          0x1
#define _CLC3SEL0_LC3D1S1_SIZE                              0x1
#define _CLC3SEL0_LC3D1S1_LENGTH                            0x1
#define _CLC3SEL0_LC3D1S1_MASK                              0x2
#define _CLC3SEL0_LC3D1S2_POSN                              0x2
#define _CLC3SEL0_LC3D1S2_POSITION                          0x2
#define _CLC3SEL0_LC3D1S2_SIZE                              0x1
#define _CLC3SEL0_LC3D1S2_LENGTH                            0x1
#define _CLC3SEL0_LC3D1S2_MASK                              0x4
#define _CLC3SEL0_LC3D1S3_POSN                              0x3
#define _CLC3SEL0_LC3D1S3_POSITION                          0x3
#define _CLC3SEL0_LC3D1S3_SIZE                              0x1
#define _CLC3SEL0_LC3D1S3_LENGTH                            0x1
#define _CLC3SEL0_LC3D1S3_MASK                              0x8
#define _CLC3SEL0_LC3D1S4_POSN                              0x4
#define _CLC3SEL0_LC3D1S4_POSITION                          0x4
#define _CLC3SEL0_LC3D1S4_SIZE                              0x1
#define _CLC3SEL0_LC3D1S4_LENGTH                            0x1
#define _CLC3SEL0_LC3D1S4_MASK                              0x10
#define _CLC3SEL0_LC3D1S5_POSN                              0x5
#define _CLC3SEL0_LC3D1S5_POSITION                          0x5
#define _CLC3SEL0_LC3D1S5_SIZE                              0x1
#define _CLC3SEL0_LC3D1S5_LENGTH                            0x1
#define _CLC3SEL0_LC3D1S5_MASK                              0x20
#define _CLC3SEL0_LC3D1S6_POSN                              0x6
#define _CLC3SEL0_LC3D1S6_POSITION                          0x6
#define _CLC3SEL0_LC3D1S6_SIZE                              0x1
#define _CLC3SEL0_LC3D1S6_LENGTH                            0x1
#define _CLC3SEL0_LC3D1S6_MASK                              0x40
#define _CLC3SEL0_LC3D1S7_POSN                              0x7
#define _CLC3SEL0_LC3D1S7_POSITION                          0x7
#define _CLC3SEL0_LC3D1S7_SIZE                              0x1
#define _CLC3SEL0_LC3D1S7_LENGTH                            0x1
#define _CLC3SEL0_LC3D1S7_MASK                              0x80

// Register: CLC3SEL1
#define CLC3SEL1 CLC3SEL1
extern volatile unsigned char           CLC3SEL1            __at(0x3C63);
#ifndef _LIB_BUILD
asm("CLC3SEL1 equ 03C63h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned D2S                    :8;
    };
    struct {
        unsigned LC3D2S                 :8;
    };
    struct {
        unsigned D2S0                   :1;
        unsigned D2S1                   :1;
        unsigned D2S2                   :1;
        unsigned D2S3                   :1;
        unsigned D2S4                   :1;
        unsigned D2S5                   :1;
        unsigned D2S6                   :1;
        unsigned D2S7                   :1;
    };
    struct {
        unsigned LC3D2S0                :1;
        unsigned LC3D2S1                :1;
        unsigned LC3D2S2                :1;
        unsigned LC3D2S3                :1;
        unsigned LC3D2S4                :1;
        unsigned LC3D2S5                :1;
        unsigned LC3D2S6                :1;
        unsigned LC3D2S7                :1;
    };
} CLC3SEL1bits_t;
extern volatile CLC3SEL1bits_t CLC3SEL1bits __at(0x3C63);
// bitfield macros
#define _CLC3SEL1_D2S_POSN                                  0x0
#define _CLC3SEL1_D2S_POSITION                              0x0
#define _CLC3SEL1_D2S_SIZE                                  0x8
#define _CLC3SEL1_D2S_LENGTH                                0x8
#define _CLC3SEL1_D2S_MASK                                  0xFF
#define _CLC3SEL1_LC3D2S_POSN                               0x0
#define _CLC3SEL1_LC3D2S_POSITION                           0x0
#define _CLC3SEL1_LC3D2S_SIZE                               0x8
#define _CLC3SEL1_LC3D2S_LENGTH                             0x8
#define _CLC3SEL1_LC3D2S_MASK                               0xFF
#define _CLC3SEL1_D2S0_POSN                                 0x0
#define _CLC3SEL1_D2S0_POSITION                             0x0
#define _CLC3SEL1_D2S0_SIZE                                 0x1
#define _CLC3SEL1_D2S0_LENGTH                               0x1
#define _CLC3SEL1_D2S0_MASK                                 0x1
#define _CLC3SEL1_D2S1_POSN                                 0x1
#define _CLC3SEL1_D2S1_POSITION                             0x1
#define _CLC3SEL1_D2S1_SIZE                                 0x1
#define _CLC3SEL1_D2S1_LENGTH                               0x1
#define _CLC3SEL1_D2S1_MASK                                 0x2
#define _CLC3SEL1_D2S2_POSN                                 0x2
#define _CLC3SEL1_D2S2_POSITION                             0x2
#define _CLC3SEL1_D2S2_SIZE                                 0x1
#define _CLC3SEL1_D2S2_LENGTH                               0x1
#define _CLC3SEL1_D2S2_MASK                                 0x4
#define _CLC3SEL1_D2S3_POSN                                 0x3
#define _CLC3SEL1_D2S3_POSITION                             0x3
#define _CLC3SEL1_D2S3_SIZE                                 0x1
#define _CLC3SEL1_D2S3_LENGTH                               0x1
#define _CLC3SEL1_D2S3_MASK                                 0x8
#define _CLC3SEL1_D2S4_POSN                                 0x4
#define _CLC3SEL1_D2S4_POSITION                             0x4
#define _CLC3SEL1_D2S4_SIZE                                 0x1
#define _CLC3SEL1_D2S4_LENGTH                               0x1
#define _CLC3SEL1_D2S4_MASK                                 0x10
#define _CLC3SEL1_D2S5_POSN                                 0x5
#define _CLC3SEL1_D2S5_POSITION                             0x5
#define _CLC3SEL1_D2S5_SIZE                                 0x1
#define _CLC3SEL1_D2S5_LENGTH                               0x1
#define _CLC3SEL1_D2S5_MASK                                 0x20
#define _CLC3SEL1_D2S6_POSN                                 0x6
#define _CLC3SEL1_D2S6_POSITION                             0x6
#define _CLC3SEL1_D2S6_SIZE                                 0x1
#define _CLC3SEL1_D2S6_LENGTH                               0x1
#define _CLC3SEL1_D2S6_MASK                                 0x40
#define _CLC3SEL1_D2S7_POSN                                 0x7
#define _CLC3SEL1_D2S7_POSITION                             0x7
#define _CLC3SEL1_D2S7_SIZE                                 0x1
#define _CLC3SEL1_D2S7_LENGTH                               0x1
#define _CLC3SEL1_D2S7_MASK                                 0x80
#define _CLC3SEL1_LC3D2S0_POSN                              0x0
#define _CLC3SEL1_LC3D2S0_POSITION                          0x0
#define _CLC3SEL1_LC3D2S0_SIZE                              0x1
#define _CLC3SEL1_LC3D2S0_LENGTH                            0x1
#define _CLC3SEL1_LC3D2S0_MASK                              0x1
#define _CLC3SEL1_LC3D2S1_POSN                              0x1
#define _CLC3SEL1_LC3D2S1_POSITION                          0x1
#define _CLC3SEL1_LC3D2S1_SIZE                              0x1
#define _CLC3SEL1_LC3D2S1_LENGTH                            0x1
#define _CLC3SEL1_LC3D2S1_MASK                              0x2
#define _CLC3SEL1_LC3D2S2_POSN                              0x2
#define _CLC3SEL1_LC3D2S2_POSITION                          0x2
#define _CLC3SEL1_LC3D2S2_SIZE                              0x1
#define _CLC3SEL1_LC3D2S2_LENGTH                            0x1
#define _CLC3SEL1_LC3D2S2_MASK                              0x4
#define _CLC3SEL1_LC3D2S3_POSN                              0x3
#define _CLC3SEL1_LC3D2S3_POSITION                          0x3
#define _CLC3SEL1_LC3D2S3_SIZE                              0x1
#define _CLC3SEL1_LC3D2S3_LENGTH                            0x1
#define _CLC3SEL1_LC3D2S3_MASK                              0x8
#define _CLC3SEL1_LC3D2S4_POSN                              0x4
#define _CLC3SEL1_LC3D2S4_POSITION                          0x4
#define _CLC3SEL1_LC3D2S4_SIZE                              0x1
#define _CLC3SEL1_LC3D2S4_LENGTH                            0x1
#define _CLC3SEL1_LC3D2S4_MASK                              0x10
#define _CLC3SEL1_LC3D2S5_POSN                              0x5
#define _CLC3SEL1_LC3D2S5_POSITION                          0x5
#define _CLC3SEL1_LC3D2S5_SIZE                              0x1
#define _CLC3SEL1_LC3D2S5_LENGTH                            0x1
#define _CLC3SEL1_LC3D2S5_MASK                              0x20
#define _CLC3SEL1_LC3D2S6_POSN                              0x6
#define _CLC3SEL1_LC3D2S6_POSITION                          0x6
#define _CLC3SEL1_LC3D2S6_SIZE                              0x1
#define _CLC3SEL1_LC3D2S6_LENGTH                            0x1
#define _CLC3SEL1_LC3D2S6_MASK                              0x40
#define _CLC3SEL1_LC3D2S7_POSN                              0x7
#define _CLC3SEL1_LC3D2S7_POSITION                          0x7
#define _CLC3SEL1_LC3D2S7_SIZE                              0x1
#define _CLC3SEL1_LC3D2S7_LENGTH                            0x1
#define _CLC3SEL1_LC3D2S7_MASK                              0x80

// Register: CLC3SEL2
#define CLC3SEL2 CLC3SEL2
extern volatile unsigned char           CLC3SEL2            __at(0x3C64);
#ifndef _LIB_BUILD
asm("CLC3SEL2 equ 03C64h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned D3S                    :8;
    };
    struct {
        unsigned LC3D3S                 :8;
    };
    struct {
        unsigned D3S0                   :1;
        unsigned D3S1                   :1;
        unsigned D3S2                   :1;
        unsigned D3S3                   :1;
        unsigned D3S4                   :1;
        unsigned D3S5                   :1;
        unsigned D3S6                   :1;
        unsigned D3S7                   :1;
    };
    struct {
        unsigned LC3D3S0                :1;
        unsigned LC3D3S1                :1;
        unsigned LC3D3S2                :1;
        unsigned LC3D3S3                :1;
        unsigned LC3D3S4                :1;
        unsigned LC3D3S5                :1;
        unsigned LC3D3S6                :1;
        unsigned LC3D3S7                :1;
    };
} CLC3SEL2bits_t;
extern volatile CLC3SEL2bits_t CLC3SEL2bits __at(0x3C64);
// bitfield macros
#define _CLC3SEL2_D3S_POSN                                  0x0
#define _CLC3SEL2_D3S_POSITION                              0x0
#define _CLC3SEL2_D3S_SIZE                                  0x8
#define _CLC3SEL2_D3S_LENGTH                                0x8
#define _CLC3SEL2_D3S_MASK                                  0xFF
#define _CLC3SEL2_LC3D3S_POSN                               0x0
#define _CLC3SEL2_LC3D3S_POSITION                           0x0
#define _CLC3SEL2_LC3D3S_SIZE                               0x8
#define _CLC3SEL2_LC3D3S_LENGTH                             0x8
#define _CLC3SEL2_LC3D3S_MASK                               0xFF
#define _CLC3SEL2_D3S0_POSN                                 0x0
#define _CLC3SEL2_D3S0_POSITION                             0x0
#define _CLC3SEL2_D3S0_SIZE                                 0x1
#define _CLC3SEL2_D3S0_LENGTH                               0x1
#define _CLC3SEL2_D3S0_MASK                                 0x1
#define _CLC3SEL2_D3S1_POSN                                 0x1
#define _CLC3SEL2_D3S1_POSITION                             0x1
#define _CLC3SEL2_D3S1_SIZE                                 0x1
#define _CLC3SEL2_D3S1_LENGTH                               0x1
#define _CLC3SEL2_D3S1_MASK                                 0x2
#define _CLC3SEL2_D3S2_POSN                                 0x2
#define _CLC3SEL2_D3S2_POSITION                             0x2
#define _CLC3SEL2_D3S2_SIZE                                 0x1
#define _CLC3SEL2_D3S2_LENGTH                               0x1
#define _CLC3SEL2_D3S2_MASK                                 0x4
#define _CLC3SEL2_D3S3_POSN                                 0x3
#define _CLC3SEL2_D3S3_POSITION                             0x3
#define _CLC3SEL2_D3S3_SIZE                                 0x1
#define _CLC3SEL2_D3S3_LENGTH                               0x1
#define _CLC3SEL2_D3S3_MASK                                 0x8
#define _CLC3SEL2_D3S4_POSN                                 0x4
#define _CLC3SEL2_D3S4_POSITION                             0x4
#define _CLC3SEL2_D3S4_SIZE                                 0x1
#define _CLC3SEL2_D3S4_LENGTH                               0x1
#define _CLC3SEL2_D3S4_MASK                                 0x10
#define _CLC3SEL2_D3S5_POSN                                 0x5
#define _CLC3SEL2_D3S5_POSITION                             0x5
#define _CLC3SEL2_D3S5_SIZE                                 0x1
#define _CLC3SEL2_D3S5_LENGTH                               0x1
#define _CLC3SEL2_D3S5_MASK                                 0x20
#define _CLC3SEL2_D3S6_POSN                                 0x6
#define _CLC3SEL2_D3S6_POSITION                             0x6
#define _CLC3SEL2_D3S6_SIZE                                 0x1
#define _CLC3SEL2_D3S6_LENGTH                               0x1
#define _CLC3SEL2_D3S6_MASK                                 0x40
#define _CLC3SEL2_D3S7_POSN                                 0x7
#define _CLC3SEL2_D3S7_POSITION                             0x7
#define _CLC3SEL2_D3S7_SIZE                                 0x1
#define _CLC3SEL2_D3S7_LENGTH                               0x1
#define _CLC3SEL2_D3S7_MASK                                 0x80
#define _CLC3SEL2_LC3D3S0_POSN                              0x0
#define _CLC3SEL2_LC3D3S0_POSITION                          0x0
#define _CLC3SEL2_LC3D3S0_SIZE                              0x1
#define _CLC3SEL2_LC3D3S0_LENGTH                            0x1
#define _CLC3SEL2_LC3D3S0_MASK                              0x1
#define _CLC3SEL2_LC3D3S1_POSN                              0x1
#define _CLC3SEL2_LC3D3S1_POSITION                          0x1
#define _CLC3SEL2_LC3D3S1_SIZE                              0x1
#define _CLC3SEL2_LC3D3S1_LENGTH                            0x1
#define _CLC3SEL2_LC3D3S1_MASK                              0x2
#define _CLC3SEL2_LC3D3S2_POSN                              0x2
#define _CLC3SEL2_LC3D3S2_POSITION                          0x2
#define _CLC3SEL2_LC3D3S2_SIZE                              0x1
#define _CLC3SEL2_LC3D3S2_LENGTH                            0x1
#define _CLC3SEL2_LC3D3S2_MASK                              0x4
#define _CLC3SEL2_LC3D3S3_POSN                              0x3
#define _CLC3SEL2_LC3D3S3_POSITION                          0x3
#define _CLC3SEL2_LC3D3S3_SIZE                              0x1
#define _CLC3SEL2_LC3D3S3_LENGTH                            0x1
#define _CLC3SEL2_LC3D3S3_MASK                              0x8
#define _CLC3SEL2_LC3D3S4_POSN                              0x4
#define _CLC3SEL2_LC3D3S4_POSITION                          0x4
#define _CLC3SEL2_LC3D3S4_SIZE                              0x1
#define _CLC3SEL2_LC3D3S4_LENGTH                            0x1
#define _CLC3SEL2_LC3D3S4_MASK                              0x10
#define _CLC3SEL2_LC3D3S5_POSN                              0x5
#define _CLC3SEL2_LC3D3S5_POSITION                          0x5
#define _CLC3SEL2_LC3D3S5_SIZE                              0x1
#define _CLC3SEL2_LC3D3S5_LENGTH                            0x1
#define _CLC3SEL2_LC3D3S5_MASK                              0x20
#define _CLC3SEL2_LC3D3S6_POSN                              0x6
#define _CLC3SEL2_LC3D3S6_POSITION                          0x6
#define _CLC3SEL2_LC3D3S6_SIZE                              0x1
#define _CLC3SEL2_LC3D3S6_LENGTH                            0x1
#define _CLC3SEL2_LC3D3S6_MASK                              0x40
#define _CLC3SEL2_LC3D3S7_POSN                              0x7
#define _CLC3SEL2_LC3D3S7_POSITION                          0x7
#define _CLC3SEL2_LC3D3S7_SIZE                              0x1
#define _CLC3SEL2_LC3D3S7_LENGTH                            0x1
#define _CLC3SEL2_LC3D3S7_MASK                              0x80

// Register: CLC3SEL3
#define CLC3SEL3 CLC3SEL3
extern volatile unsigned char           CLC3SEL3            __at(0x3C65);
#ifndef _LIB_BUILD
asm("CLC3SEL3 equ 03C65h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned D4S                    :8;
    };
    struct {
        unsigned LC3D4S                 :8;
    };
    struct {
        unsigned D4S0                   :1;
        unsigned D4S1                   :1;
        unsigned D4S2                   :1;
        unsigned D4S3                   :1;
        unsigned D4S4                   :1;
        unsigned D4S5                   :1;
        unsigned D4S6                   :1;
        unsigned D4S7                   :1;
    };
    struct {
        unsigned LC3D4S0                :1;
        unsigned LC3D4S1                :1;
        unsigned LC3D4S2                :1;
        unsigned LC3D4S3                :1;
        unsigned LC3D4S4                :1;
        unsigned LC3D4S5                :1;
        unsigned LC3D4S6                :1;
        unsigned LC3D4S7                :1;
    };
} CLC3SEL3bits_t;
extern volatile CLC3SEL3bits_t CLC3SEL3bits __at(0x3C65);
// bitfield macros
#define _CLC3SEL3_D4S_POSN                                  0x0
#define _CLC3SEL3_D4S_POSITION                              0x0
#define _CLC3SEL3_D4S_SIZE                                  0x8
#define _CLC3SEL3_D4S_LENGTH                                0x8
#define _CLC3SEL3_D4S_MASK                                  0xFF
#define _CLC3SEL3_LC3D4S_POSN                               0x0
#define _CLC3SEL3_LC3D4S_POSITION                           0x0
#define _CLC3SEL3_LC3D4S_SIZE                               0x8
#define _CLC3SEL3_LC3D4S_LENGTH                             0x8
#define _CLC3SEL3_LC3D4S_MASK                               0xFF
#define _CLC3SEL3_D4S0_POSN                                 0x0
#define _CLC3SEL3_D4S0_POSITION                             0x0
#define _CLC3SEL3_D4S0_SIZE                                 0x1
#define _CLC3SEL3_D4S0_LENGTH                               0x1
#define _CLC3SEL3_D4S0_MASK                                 0x1
#define _CLC3SEL3_D4S1_POSN                                 0x1
#define _CLC3SEL3_D4S1_POSITION                             0x1
#define _CLC3SEL3_D4S1_SIZE                                 0x1
#define _CLC3SEL3_D4S1_LENGTH                               0x1
#define _CLC3SEL3_D4S1_MASK                                 0x2
#define _CLC3SEL3_D4S2_POSN                                 0x2
#define _CLC3SEL3_D4S2_POSITION                             0x2
#define _CLC3SEL3_D4S2_SIZE                                 0x1
#define _CLC3SEL3_D4S2_LENGTH                               0x1
#define _CLC3SEL3_D4S2_MASK                                 0x4
#define _CLC3SEL3_D4S3_POSN                                 0x3
#define _CLC3SEL3_D4S3_POSITION                             0x3
#define _CLC3SEL3_D4S3_SIZE                                 0x1
#define _CLC3SEL3_D4S3_LENGTH                               0x1
#define _CLC3SEL3_D4S3_MASK                                 0x8
#define _CLC3SEL3_D4S4_POSN                                 0x4
#define _CLC3SEL3_D4S4_POSITION                             0x4
#define _CLC3SEL3_D4S4_SIZE                                 0x1
#define _CLC3SEL3_D4S4_LENGTH                               0x1
#define _CLC3SEL3_D4S4_MASK                                 0x10
#define _CLC3SEL3_D4S5_POSN                                 0x5
#define _CLC3SEL3_D4S5_POSITION                             0x5
#define _CLC3SEL3_D4S5_SIZE                                 0x1
#define _CLC3SEL3_D4S5_LENGTH                               0x1
#define _CLC3SEL3_D4S5_MASK                                 0x20
#define _CLC3SEL3_D4S6_POSN                                 0x6
#define _CLC3SEL3_D4S6_POSITION                             0x6
#define _CLC3SEL3_D4S6_SIZE                                 0x1
#define _CLC3SEL3_D4S6_LENGTH                               0x1
#define _CLC3SEL3_D4S6_MASK                                 0x40
#define _CLC3SEL3_D4S7_POSN                                 0x7
#define _CLC3SEL3_D4S7_POSITION                             0x7
#define _CLC3SEL3_D4S7_SIZE                                 0x1
#define _CLC3SEL3_D4S7_LENGTH                               0x1
#define _CLC3SEL3_D4S7_MASK                                 0x80
#define _CLC3SEL3_LC3D4S0_POSN                              0x0
#define _CLC3SEL3_LC3D4S0_POSITION                          0x0
#define _CLC3SEL3_LC3D4S0_SIZE                              0x1
#define _CLC3SEL3_LC3D4S0_LENGTH                            0x1
#define _CLC3SEL3_LC3D4S0_MASK                              0x1
#define _CLC3SEL3_LC3D4S1_POSN                              0x1
#define _CLC3SEL3_LC3D4S1_POSITION                          0x1
#define _CLC3SEL3_LC3D4S1_SIZE                              0x1
#define _CLC3SEL3_LC3D4S1_LENGTH                            0x1
#define _CLC3SEL3_LC3D4S1_MASK                              0x2
#define _CLC3SEL3_LC3D4S2_POSN                              0x2
#define _CLC3SEL3_LC3D4S2_POSITION                          0x2
#define _CLC3SEL3_LC3D4S2_SIZE                              0x1
#define _CLC3SEL3_LC3D4S2_LENGTH                            0x1
#define _CLC3SEL3_LC3D4S2_MASK                              0x4
#define _CLC3SEL3_LC3D4S3_POSN                              0x3
#define _CLC3SEL3_LC3D4S3_POSITION                          0x3
#define _CLC3SEL3_LC3D4S3_SIZE                              0x1
#define _CLC3SEL3_LC3D4S3_LENGTH                            0x1
#define _CLC3SEL3_LC3D4S3_MASK                              0x8
#define _CLC3SEL3_LC3D4S4_POSN                              0x4
#define _CLC3SEL3_LC3D4S4_POSITION                          0x4
#define _CLC3SEL3_LC3D4S4_SIZE                              0x1
#define _CLC3SEL3_LC3D4S4_LENGTH                            0x1
#define _CLC3SEL3_LC3D4S4_MASK                              0x10
#define _CLC3SEL3_LC3D4S5_POSN                              0x5
#define _CLC3SEL3_LC3D4S5_POSITION                          0x5
#define _CLC3SEL3_LC3D4S5_SIZE                              0x1
#define _CLC3SEL3_LC3D4S5_LENGTH                            0x1
#define _CLC3SEL3_LC3D4S5_MASK                              0x20
#define _CLC3SEL3_LC3D4S6_POSN                              0x6
#define _CLC3SEL3_LC3D4S6_POSITION                          0x6
#define _CLC3SEL3_LC3D4S6_SIZE                              0x1
#define _CLC3SEL3_LC3D4S6_LENGTH                            0x1
#define _CLC3SEL3_LC3D4S6_MASK                              0x40
#define _CLC3SEL3_LC3D4S7_POSN                              0x7
#define _CLC3SEL3_LC3D4S7_POSITION                          0x7
#define _CLC3SEL3_LC3D4S7_SIZE                              0x1
#define _CLC3SEL3_LC3D4S7_LENGTH                            0x1
#define _CLC3SEL3_LC3D4S7_MASK                              0x80

// Register: CLC3GLS0
#define CLC3GLS0 CLC3GLS0
extern volatile unsigned char           CLC3GLS0            __at(0x3C66);
#ifndef _LIB_BUILD
asm("CLC3GLS0 equ 03C66h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned G1D1N                  :1;
        unsigned G1D1T                  :1;
        unsigned G1D2N                  :1;
        unsigned G1D2T                  :1;
        unsigned G1D3N                  :1;
        unsigned G1D3T                  :1;
        unsigned G1D4N                  :1;
        unsigned G1D4T                  :1;
    };
    struct {
        unsigned LC3G1D1N               :1;
        unsigned LC3G1D1T               :1;
        unsigned LC3G1D2N               :1;
        unsigned LC3G1D2T               :1;
        unsigned LC3G1D3N               :1;
        unsigned LC3G1D3T               :1;
        unsigned LC3G1D4N               :1;
        unsigned LC3G1D4T               :1;
    };
} CLC3GLS0bits_t;
extern volatile CLC3GLS0bits_t CLC3GLS0bits __at(0x3C66);
// bitfield macros
#define _CLC3GLS0_G1D1N_POSN                                0x0
#define _CLC3GLS0_G1D1N_POSITION                            0x0
#define _CLC3GLS0_G1D1N_SIZE                                0x1
#define _CLC3GLS0_G1D1N_LENGTH                              0x1
#define _CLC3GLS0_G1D1N_MASK                                0x1
#define _CLC3GLS0_G1D1T_POSN                                0x1
#define _CLC3GLS0_G1D1T_POSITION                            0x1
#define _CLC3GLS0_G1D1T_SIZE                                0x1
#define _CLC3GLS0_G1D1T_LENGTH                              0x1
#define _CLC3GLS0_G1D1T_MASK                                0x2
#define _CLC3GLS0_G1D2N_POSN                                0x2
#define _CLC3GLS0_G1D2N_POSITION                            0x2
#define _CLC3GLS0_G1D2N_SIZE                                0x1
#define _CLC3GLS0_G1D2N_LENGTH                              0x1
#define _CLC3GLS0_G1D2N_MASK                                0x4
#define _CLC3GLS0_G1D2T_POSN                                0x3
#define _CLC3GLS0_G1D2T_POSITION                            0x3
#define _CLC3GLS0_G1D2T_SIZE                                0x1
#define _CLC3GLS0_G1D2T_LENGTH                              0x1
#define _CLC3GLS0_G1D2T_MASK                                0x8
#define _CLC3GLS0_G1D3N_POSN                                0x4
#define _CLC3GLS0_G1D3N_POSITION                            0x4
#define _CLC3GLS0_G1D3N_SIZE                                0x1
#define _CLC3GLS0_G1D3N_LENGTH                              0x1
#define _CLC3GLS0_G1D3N_MASK                                0x10
#define _CLC3GLS0_G1D3T_POSN                                0x5
#define _CLC3GLS0_G1D3T_POSITION                            0x5
#define _CLC3GLS0_G1D3T_SIZE                                0x1
#define _CLC3GLS0_G1D3T_LENGTH                              0x1
#define _CLC3GLS0_G1D3T_MASK                                0x20
#define _CLC3GLS0_G1D4N_POSN                                0x6
#define _CLC3GLS0_G1D4N_POSITION                            0x6
#define _CLC3GLS0_G1D4N_SIZE                                0x1
#define _CLC3GLS0_G1D4N_LENGTH                              0x1
#define _CLC3GLS0_G1D4N_MASK                                0x40
#define _CLC3GLS0_G1D4T_POSN                                0x7
#define _CLC3GLS0_G1D4T_POSITION                            0x7
#define _CLC3GLS0_G1D4T_SIZE                                0x1
#define _CLC3GLS0_G1D4T_LENGTH                              0x1
#define _CLC3GLS0_G1D4T_MASK                                0x80
#define _CLC3GLS0_LC3G1D1N_POSN                             0x0
#define _CLC3GLS0_LC3G1D1N_POSITION                         0x0
#define _CLC3GLS0_LC3G1D1N_SIZE                             0x1
#define _CLC3GLS0_LC3G1D1N_LENGTH                           0x1
#define _CLC3GLS0_LC3G1D1N_MASK                             0x1
#define _CLC3GLS0_LC3G1D1T_POSN                             0x1
#define _CLC3GLS0_LC3G1D1T_POSITION                         0x1
#define _CLC3GLS0_LC3G1D1T_SIZE                             0x1
#define _CLC3GLS0_LC3G1D1T_LENGTH                           0x1
#define _CLC3GLS0_LC3G1D1T_MASK                             0x2
#define _CLC3GLS0_LC3G1D2N_POSN                             0x2
#define _CLC3GLS0_LC3G1D2N_POSITION                         0x2
#define _CLC3GLS0_LC3G1D2N_SIZE                             0x1
#define _CLC3GLS0_LC3G1D2N_LENGTH                           0x1
#define _CLC3GLS0_LC3G1D2N_MASK                             0x4
#define _CLC3GLS0_LC3G1D2T_POSN                             0x3
#define _CLC3GLS0_LC3G1D2T_POSITION                         0x3
#define _CLC3GLS0_LC3G1D2T_SIZE                             0x1
#define _CLC3GLS0_LC3G1D2T_LENGTH                           0x1
#define _CLC3GLS0_LC3G1D2T_MASK                             0x8
#define _CLC3GLS0_LC3G1D3N_POSN                             0x4
#define _CLC3GLS0_LC3G1D3N_POSITION                         0x4
#define _CLC3GLS0_LC3G1D3N_SIZE                             0x1
#define _CLC3GLS0_LC3G1D3N_LENGTH                           0x1
#define _CLC3GLS0_LC3G1D3N_MASK                             0x10
#define _CLC3GLS0_LC3G1D3T_POSN                             0x5
#define _CLC3GLS0_LC3G1D3T_POSITION                         0x5
#define _CLC3GLS0_LC3G1D3T_SIZE                             0x1
#define _CLC3GLS0_LC3G1D3T_LENGTH                           0x1
#define _CLC3GLS0_LC3G1D3T_MASK                             0x20
#define _CLC3GLS0_LC3G1D4N_POSN                             0x6
#define _CLC3GLS0_LC3G1D4N_POSITION                         0x6
#define _CLC3GLS0_LC3G1D4N_SIZE                             0x1
#define _CLC3GLS0_LC3G1D4N_LENGTH                           0x1
#define _CLC3GLS0_LC3G1D4N_MASK                             0x40
#define _CLC3GLS0_LC3G1D4T_POSN                             0x7
#define _CLC3GLS0_LC3G1D4T_POSITION                         0x7
#define _CLC3GLS0_LC3G1D4T_SIZE                             0x1
#define _CLC3GLS0_LC3G1D4T_LENGTH                           0x1
#define _CLC3GLS0_LC3G1D4T_MASK                             0x80

// Register: CLC3GLS1
#define CLC3GLS1 CLC3GLS1
extern volatile unsigned char           CLC3GLS1            __at(0x3C67);
#ifndef _LIB_BUILD
asm("CLC3GLS1 equ 03C67h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned G2D1N                  :1;
        unsigned G2D1T                  :1;
        unsigned G2D2N                  :1;
        unsigned G2D2T                  :1;
        unsigned G2D3N                  :1;
        unsigned G2D3T                  :1;
        unsigned G2D4N                  :1;
        unsigned G2D4T                  :1;
    };
    struct {
        unsigned LC3G2D1N               :1;
        unsigned LC3G2D1T               :1;
        unsigned LC3G2D2N               :1;
        unsigned LC3G2D2T               :1;
        unsigned LC3G2D3N               :1;
        unsigned LC3G2D3T               :1;
        unsigned LC3G2D4N               :1;
        unsigned LC3G2D4T               :1;
    };
} CLC3GLS1bits_t;
extern volatile CLC3GLS1bits_t CLC3GLS1bits __at(0x3C67);
// bitfield macros
#define _CLC3GLS1_G2D1N_POSN                                0x0
#define _CLC3GLS1_G2D1N_POSITION                            0x0
#define _CLC3GLS1_G2D1N_SIZE                                0x1
#define _CLC3GLS1_G2D1N_LENGTH                              0x1
#define _CLC3GLS1_G2D1N_MASK                                0x1
#define _CLC3GLS1_G2D1T_POSN                                0x1
#define _CLC3GLS1_G2D1T_POSITION                            0x1
#define _CLC3GLS1_G2D1T_SIZE                                0x1
#define _CLC3GLS1_G2D1T_LENGTH                              0x1
#define _CLC3GLS1_G2D1T_MASK                                0x2
#define _CLC3GLS1_G2D2N_POSN                                0x2
#define _CLC3GLS1_G2D2N_POSITION                            0x2
#define _CLC3GLS1_G2D2N_SIZE                                0x1
#define _CLC3GLS1_G2D2N_LENGTH                              0x1
#define _CLC3GLS1_G2D2N_MASK                                0x4
#define _CLC3GLS1_G2D2T_POSN                                0x3
#define _CLC3GLS1_G2D2T_POSITION                            0x3
#define _CLC3GLS1_G2D2T_SIZE                                0x1
#define _CLC3GLS1_G2D2T_LENGTH                              0x1
#define _CLC3GLS1_G2D2T_MASK                                0x8
#define _CLC3GLS1_G2D3N_POSN                                0x4
#define _CLC3GLS1_G2D3N_POSITION                            0x4
#define _CLC3GLS1_G2D3N_SIZE                                0x1
#define _CLC3GLS1_G2D3N_LENGTH                              0x1
#define _CLC3GLS1_G2D3N_MASK                                0x10
#define _CLC3GLS1_G2D3T_POSN                                0x5
#define _CLC3GLS1_G2D3T_POSITION                            0x5
#define _CLC3GLS1_G2D3T_SIZE                                0x1
#define _CLC3GLS1_G2D3T_LENGTH                              0x1
#define _CLC3GLS1_G2D3T_MASK                                0x20
#define _CLC3GLS1_G2D4N_POSN                                0x6
#define _CLC3GLS1_G2D4N_POSITION                            0x6
#define _CLC3GLS1_G2D4N_SIZE                                0x1
#define _CLC3GLS1_G2D4N_LENGTH                              0x1
#define _CLC3GLS1_G2D4N_MASK                                0x40
#define _CLC3GLS1_G2D4T_POSN                                0x7
#define _CLC3GLS1_G2D4T_POSITION                            0x7
#define _CLC3GLS1_G2D4T_SIZE                                0x1
#define _CLC3GLS1_G2D4T_LENGTH                              0x1
#define _CLC3GLS1_G2D4T_MASK                                0x80
#define _CLC3GLS1_LC3G2D1N_POSN                             0x0
#define _CLC3GLS1_LC3G2D1N_POSITION                         0x0
#define _CLC3GLS1_LC3G2D1N_SIZE                             0x1
#define _CLC3GLS1_LC3G2D1N_LENGTH                           0x1
#define _CLC3GLS1_LC3G2D1N_MASK                             0x1
#define _CLC3GLS1_LC3G2D1T_POSN                             0x1
#define _CLC3GLS1_LC3G2D1T_POSITION                         0x1
#define _CLC3GLS1_LC3G2D1T_SIZE                             0x1
#define _CLC3GLS1_LC3G2D1T_LENGTH                           0x1
#define _CLC3GLS1_LC3G2D1T_MASK                             0x2
#define _CLC3GLS1_LC3G2D2N_POSN                             0x2
#define _CLC3GLS1_LC3G2D2N_POSITION                         0x2
#define _CLC3GLS1_LC3G2D2N_SIZE                             0x1
#define _CLC3GLS1_LC3G2D2N_LENGTH                           0x1
#define _CLC3GLS1_LC3G2D2N_MASK                             0x4
#define _CLC3GLS1_LC3G2D2T_POSN                             0x3
#define _CLC3GLS1_LC3G2D2T_POSITION                         0x3
#define _CLC3GLS1_LC3G2D2T_SIZE                             0x1
#define _CLC3GLS1_LC3G2D2T_LENGTH                           0x1
#define _CLC3GLS1_LC3G2D2T_MASK                             0x8
#define _CLC3GLS1_LC3G2D3N_POSN                             0x4
#define _CLC3GLS1_LC3G2D3N_POSITION                         0x4
#define _CLC3GLS1_LC3G2D3N_SIZE                             0x1
#define _CLC3GLS1_LC3G2D3N_LENGTH                           0x1
#define _CLC3GLS1_LC3G2D3N_MASK                             0x10
#define _CLC3GLS1_LC3G2D3T_POSN                             0x5
#define _CLC3GLS1_LC3G2D3T_POSITION                         0x5
#define _CLC3GLS1_LC3G2D3T_SIZE                             0x1
#define _CLC3GLS1_LC3G2D3T_LENGTH                           0x1
#define _CLC3GLS1_LC3G2D3T_MASK                             0x20
#define _CLC3GLS1_LC3G2D4N_POSN                             0x6
#define _CLC3GLS1_LC3G2D4N_POSITION                         0x6
#define _CLC3GLS1_LC3G2D4N_SIZE                             0x1
#define _CLC3GLS1_LC3G2D4N_LENGTH                           0x1
#define _CLC3GLS1_LC3G2D4N_MASK                             0x40
#define _CLC3GLS1_LC3G2D4T_POSN                             0x7
#define _CLC3GLS1_LC3G2D4T_POSITION                         0x7
#define _CLC3GLS1_LC3G2D4T_SIZE                             0x1
#define _CLC3GLS1_LC3G2D4T_LENGTH                           0x1
#define _CLC3GLS1_LC3G2D4T_MASK                             0x80

// Register: CLC3GLS2
#define CLC3GLS2 CLC3GLS2
extern volatile unsigned char           CLC3GLS2            __at(0x3C68);
#ifndef _LIB_BUILD
asm("CLC3GLS2 equ 03C68h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned G3D1N                  :1;
        unsigned G3D1T                  :1;
        unsigned G3D2N                  :1;
        unsigned G3D2T                  :1;
        unsigned G3D3N                  :1;
        unsigned G3D3T                  :1;
        unsigned G3D4N                  :1;
        unsigned G3D4T                  :1;
    };
    struct {
        unsigned LC3G3D1N               :1;
        unsigned LC3G3D1T               :1;
        unsigned LC3G3D2N               :1;
        unsigned LC3G3D2T               :1;
        unsigned LC3G3D3N               :1;
        unsigned LC3G3D3T               :1;
        unsigned LC3G3D4N               :1;
        unsigned LC3G3D4T               :1;
    };
} CLC3GLS2bits_t;
extern volatile CLC3GLS2bits_t CLC3GLS2bits __at(0x3C68);
// bitfield macros
#define _CLC3GLS2_G3D1N_POSN                                0x0
#define _CLC3GLS2_G3D1N_POSITION                            0x0
#define _CLC3GLS2_G3D1N_SIZE                                0x1
#define _CLC3GLS2_G3D1N_LENGTH                              0x1
#define _CLC3GLS2_G3D1N_MASK                                0x1
#define _CLC3GLS2_G3D1T_POSN                                0x1
#define _CLC3GLS2_G3D1T_POSITION                            0x1
#define _CLC3GLS2_G3D1T_SIZE                                0x1
#define _CLC3GLS2_G3D1T_LENGTH                              0x1
#define _CLC3GLS2_G3D1T_MASK                                0x2
#define _CLC3GLS2_G3D2N_POSN                                0x2
#define _CLC3GLS2_G3D2N_POSITION                            0x2
#define _CLC3GLS2_G3D2N_SIZE                                0x1
#define _CLC3GLS2_G3D2N_LENGTH                              0x1
#define _CLC3GLS2_G3D2N_MASK                                0x4
#define _CLC3GLS2_G3D2T_POSN                                0x3
#define _CLC3GLS2_G3D2T_POSITION                            0x3
#define _CLC3GLS2_G3D2T_SIZE                                0x1
#define _CLC3GLS2_G3D2T_LENGTH                              0x1
#define _CLC3GLS2_G3D2T_MASK                                0x8
#define _CLC3GLS2_G3D3N_POSN                                0x4
#define _CLC3GLS2_G3D3N_POSITION                            0x4
#define _CLC3GLS2_G3D3N_SIZE                                0x1
#define _CLC3GLS2_G3D3N_LENGTH                              0x1
#define _CLC3GLS2_G3D3N_MASK                                0x10
#define _CLC3GLS2_G3D3T_POSN                                0x5
#define _CLC3GLS2_G3D3T_POSITION                            0x5
#define _CLC3GLS2_G3D3T_SIZE                                0x1
#define _CLC3GLS2_G3D3T_LENGTH                              0x1
#define _CLC3GLS2_G3D3T_MASK                                0x20
#define _CLC3GLS2_G3D4N_POSN                                0x6
#define _CLC3GLS2_G3D4N_POSITION                            0x6
#define _CLC3GLS2_G3D4N_SIZE                                0x1
#define _CLC3GLS2_G3D4N_LENGTH                              0x1
#define _CLC3GLS2_G3D4N_MASK                                0x40
#define _CLC3GLS2_G3D4T_POSN                                0x7
#define _CLC3GLS2_G3D4T_POSITION                            0x7
#define _CLC3GLS2_G3D4T_SIZE                                0x1
#define _CLC3GLS2_G3D4T_LENGTH                              0x1
#define _CLC3GLS2_G3D4T_MASK                                0x80
#define _CLC3GLS2_LC3G3D1N_POSN                             0x0
#define _CLC3GLS2_LC3G3D1N_POSITION                         0x0
#define _CLC3GLS2_LC3G3D1N_SIZE                             0x1
#define _CLC3GLS2_LC3G3D1N_LENGTH                           0x1
#define _CLC3GLS2_LC3G3D1N_MASK                             0x1
#define _CLC3GLS2_LC3G3D1T_POSN                             0x1
#define _CLC3GLS2_LC3G3D1T_POSITION                         0x1
#define _CLC3GLS2_LC3G3D1T_SIZE                             0x1
#define _CLC3GLS2_LC3G3D1T_LENGTH                           0x1
#define _CLC3GLS2_LC3G3D1T_MASK                             0x2
#define _CLC3GLS2_LC3G3D2N_POSN                             0x2
#define _CLC3GLS2_LC3G3D2N_POSITION                         0x2
#define _CLC3GLS2_LC3G3D2N_SIZE                             0x1
#define _CLC3GLS2_LC3G3D2N_LENGTH                           0x1
#define _CLC3GLS2_LC3G3D2N_MASK                             0x4
#define _CLC3GLS2_LC3G3D2T_POSN                             0x3
#define _CLC3GLS2_LC3G3D2T_POSITION                         0x3
#define _CLC3GLS2_LC3G3D2T_SIZE                             0x1
#define _CLC3GLS2_LC3G3D2T_LENGTH                           0x1
#define _CLC3GLS2_LC3G3D2T_MASK                             0x8
#define _CLC3GLS2_LC3G3D3N_POSN                             0x4
#define _CLC3GLS2_LC3G3D3N_POSITION                         0x4
#define _CLC3GLS2_LC3G3D3N_SIZE                             0x1
#define _CLC3GLS2_LC3G3D3N_LENGTH                           0x1
#define _CLC3GLS2_LC3G3D3N_MASK                             0x10
#define _CLC3GLS2_LC3G3D3T_POSN                             0x5
#define _CLC3GLS2_LC3G3D3T_POSITION                         0x5
#define _CLC3GLS2_LC3G3D3T_SIZE                             0x1
#define _CLC3GLS2_LC3G3D3T_LENGTH                           0x1
#define _CLC3GLS2_LC3G3D3T_MASK                             0x20
#define _CLC3GLS2_LC3G3D4N_POSN                             0x6
#define _CLC3GLS2_LC3G3D4N_POSITION                         0x6
#define _CLC3GLS2_LC3G3D4N_SIZE                             0x1
#define _CLC3GLS2_LC3G3D4N_LENGTH                           0x1
#define _CLC3GLS2_LC3G3D4N_MASK                             0x40
#define _CLC3GLS2_LC3G3D4T_POSN                             0x7
#define _CLC3GLS2_LC3G3D4T_POSITION                         0x7
#define _CLC3GLS2_LC3G3D4T_SIZE                             0x1
#define _CLC3GLS2_LC3G3D4T_LENGTH                           0x1
#define _CLC3GLS2_LC3G3D4T_MASK                             0x80

// Register: CLC3GLS3
#define CLC3GLS3 CLC3GLS3
extern volatile unsigned char           CLC3GLS3            __at(0x3C69);
#ifndef _LIB_BUILD
asm("CLC3GLS3 equ 03C69h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned G4D1N                  :1;
        unsigned G4D1T                  :1;
        unsigned G4D2N                  :1;
        unsigned G4D2T                  :1;
        unsigned G4D3N                  :1;
        unsigned G4D3T                  :1;
        unsigned G4D4N                  :1;
        unsigned G4D4T                  :1;
    };
    struct {
        unsigned LC3G4D1N               :1;
        unsigned LC3G4D1T               :1;
        unsigned LC3G4D2N               :1;
        unsigned LC3G4D2T               :1;
        unsigned LC3G4D3N               :1;
        unsigned LC3G4D3T               :1;
        unsigned LC3G4D4N               :1;
        unsigned LC3G4D4T               :1;
    };
} CLC3GLS3bits_t;
extern volatile CLC3GLS3bits_t CLC3GLS3bits __at(0x3C69);
// bitfield macros
#define _CLC3GLS3_G4D1N_POSN                                0x0
#define _CLC3GLS3_G4D1N_POSITION                            0x0
#define _CLC3GLS3_G4D1N_SIZE                                0x1
#define _CLC3GLS3_G4D1N_LENGTH                              0x1
#define _CLC3GLS3_G4D1N_MASK                                0x1
#define _CLC3GLS3_G4D1T_POSN                                0x1
#define _CLC3GLS3_G4D1T_POSITION                            0x1
#define _CLC3GLS3_G4D1T_SIZE                                0x1
#define _CLC3GLS3_G4D1T_LENGTH                              0x1
#define _CLC3GLS3_G4D1T_MASK                                0x2
#define _CLC3GLS3_G4D2N_POSN                                0x2
#define _CLC3GLS3_G4D2N_POSITION                            0x2
#define _CLC3GLS3_G4D2N_SIZE                                0x1
#define _CLC3GLS3_G4D2N_LENGTH                              0x1
#define _CLC3GLS3_G4D2N_MASK                                0x4
#define _CLC3GLS3_G4D2T_POSN                                0x3
#define _CLC3GLS3_G4D2T_POSITION                            0x3
#define _CLC3GLS3_G4D2T_SIZE                                0x1
#define _CLC3GLS3_G4D2T_LENGTH                              0x1
#define _CLC3GLS3_G4D2T_MASK                                0x8
#define _CLC3GLS3_G4D3N_POSN                                0x4
#define _CLC3GLS3_G4D3N_POSITION                            0x4
#define _CLC3GLS3_G4D3N_SIZE                                0x1
#define _CLC3GLS3_G4D3N_LENGTH                              0x1
#define _CLC3GLS3_G4D3N_MASK                                0x10
#define _CLC3GLS3_G4D3T_POSN                                0x5
#define _CLC3GLS3_G4D3T_POSITION                            0x5
#define _CLC3GLS3_G4D3T_SIZE                                0x1
#define _CLC3GLS3_G4D3T_LENGTH                              0x1
#define _CLC3GLS3_G4D3T_MASK                                0x20
#define _CLC3GLS3_G4D4N_POSN                                0x6
#define _CLC3GLS3_G4D4N_POSITION                            0x6
#define _CLC3GLS3_G4D4N_SIZE                                0x1
#define _CLC3GLS3_G4D4N_LENGTH                              0x1
#define _CLC3GLS3_G4D4N_MASK                                0x40
#define _CLC3GLS3_G4D4T_POSN                                0x7
#define _CLC3GLS3_G4D4T_POSITION                            0x7
#define _CLC3GLS3_G4D4T_SIZE                                0x1
#define _CLC3GLS3_G4D4T_LENGTH                              0x1
#define _CLC3GLS3_G4D4T_MASK                                0x80
#define _CLC3GLS3_LC3G4D1N_POSN                             0x0
#define _CLC3GLS3_LC3G4D1N_POSITION                         0x0
#define _CLC3GLS3_LC3G4D1N_SIZE                             0x1
#define _CLC3GLS3_LC3G4D1N_LENGTH                           0x1
#define _CLC3GLS3_LC3G4D1N_MASK                             0x1
#define _CLC3GLS3_LC3G4D1T_POSN                             0x1
#define _CLC3GLS3_LC3G4D1T_POSITION                         0x1
#define _CLC3GLS3_LC3G4D1T_SIZE                             0x1
#define _CLC3GLS3_LC3G4D1T_LENGTH                           0x1
#define _CLC3GLS3_LC3G4D1T_MASK                             0x2
#define _CLC3GLS3_LC3G4D2N_POSN                             0x2
#define _CLC3GLS3_LC3G4D2N_POSITION                         0x2
#define _CLC3GLS3_LC3G4D2N_SIZE                             0x1
#define _CLC3GLS3_LC3G4D2N_LENGTH                           0x1
#define _CLC3GLS3_LC3G4D2N_MASK                             0x4
#define _CLC3GLS3_LC3G4D2T_POSN                             0x3
#define _CLC3GLS3_LC3G4D2T_POSITION                         0x3
#define _CLC3GLS3_LC3G4D2T_SIZE                             0x1
#define _CLC3GLS3_LC3G4D2T_LENGTH                           0x1
#define _CLC3GLS3_LC3G4D2T_MASK                             0x8
#define _CLC3GLS3_LC3G4D3N_POSN                             0x4
#define _CLC3GLS3_LC3G4D3N_POSITION                         0x4
#define _CLC3GLS3_LC3G4D3N_SIZE                             0x1
#define _CLC3GLS3_LC3G4D3N_LENGTH                           0x1
#define _CLC3GLS3_LC3G4D3N_MASK                             0x10
#define _CLC3GLS3_LC3G4D3T_POSN                             0x5
#define _CLC3GLS3_LC3G4D3T_POSITION                         0x5
#define _CLC3GLS3_LC3G4D3T_SIZE                             0x1
#define _CLC3GLS3_LC3G4D3T_LENGTH                           0x1
#define _CLC3GLS3_LC3G4D3T_MASK                             0x20
#define _CLC3GLS3_LC3G4D4N_POSN                             0x6
#define _CLC3GLS3_LC3G4D4N_POSITION                         0x6
#define _CLC3GLS3_LC3G4D4N_SIZE                             0x1
#define _CLC3GLS3_LC3G4D4N_LENGTH                           0x1
#define _CLC3GLS3_LC3G4D4N_MASK                             0x40
#define _CLC3GLS3_LC3G4D4T_POSN                             0x7
#define _CLC3GLS3_LC3G4D4T_POSITION                         0x7
#define _CLC3GLS3_LC3G4D4T_SIZE                             0x1
#define _CLC3GLS3_LC3G4D4T_LENGTH                           0x1
#define _CLC3GLS3_LC3G4D4T_MASK                             0x80

// Register: CLC2CON
#define CLC2CON CLC2CON
extern volatile unsigned char           CLC2CON             __at(0x3C6A);
#ifndef _LIB_BUILD
asm("CLC2CON equ 03C6Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :3;
        unsigned INTN                   :1;
        unsigned INTP                   :1;
        unsigned OUT                    :1;
        unsigned OE                     :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
    };
    struct {
        unsigned LC2MODE                :3;
        unsigned LC2INTN                :1;
        unsigned LC2INTP                :1;
        unsigned LC2OUT                 :1;
        unsigned LC2OE                  :1;
        unsigned LC2EN                  :1;
    };
    struct {
        unsigned LC2MODE0               :1;
        unsigned LC2MODE1               :1;
        unsigned LC2MODE2               :1;
    };
} CLC2CONbits_t;
extern volatile CLC2CONbits_t CLC2CONbits __at(0x3C6A);
// bitfield macros
#define _CLC2CON_MODE_POSN                                  0x0
#define _CLC2CON_MODE_POSITION                              0x0
#define _CLC2CON_MODE_SIZE                                  0x3
#define _CLC2CON_MODE_LENGTH                                0x3
#define _CLC2CON_MODE_MASK                                  0x7
#define _CLC2CON_INTN_POSN                                  0x3
#define _CLC2CON_INTN_POSITION                              0x3
#define _CLC2CON_INTN_SIZE                                  0x1
#define _CLC2CON_INTN_LENGTH                                0x1
#define _CLC2CON_INTN_MASK                                  0x8
#define _CLC2CON_INTP_POSN                                  0x4
#define _CLC2CON_INTP_POSITION                              0x4
#define _CLC2CON_INTP_SIZE                                  0x1
#define _CLC2CON_INTP_LENGTH                                0x1
#define _CLC2CON_INTP_MASK                                  0x10
#define _CLC2CON_OUT_POSN                                   0x5
#define _CLC2CON_OUT_POSITION                               0x5
#define _CLC2CON_OUT_SIZE                                   0x1
#define _CLC2CON_OUT_LENGTH                                 0x1
#define _CLC2CON_OUT_MASK                                   0x20
#define _CLC2CON_OE_POSN                                    0x6
#define _CLC2CON_OE_POSITION                                0x6
#define _CLC2CON_OE_SIZE                                    0x1
#define _CLC2CON_OE_LENGTH                                  0x1
#define _CLC2CON_OE_MASK                                    0x40
#define _CLC2CON_EN_POSN                                    0x7
#define _CLC2CON_EN_POSITION                                0x7
#define _CLC2CON_EN_SIZE                                    0x1
#define _CLC2CON_EN_LENGTH                                  0x1
#define _CLC2CON_EN_MASK                                    0x80
#define _CLC2CON_MODE0_POSN                                 0x0
#define _CLC2CON_MODE0_POSITION                             0x0
#define _CLC2CON_MODE0_SIZE                                 0x1
#define _CLC2CON_MODE0_LENGTH                               0x1
#define _CLC2CON_MODE0_MASK                                 0x1
#define _CLC2CON_MODE1_POSN                                 0x1
#define _CLC2CON_MODE1_POSITION                             0x1
#define _CLC2CON_MODE1_SIZE                                 0x1
#define _CLC2CON_MODE1_LENGTH                               0x1
#define _CLC2CON_MODE1_MASK                                 0x2
#define _CLC2CON_MODE2_POSN                                 0x2
#define _CLC2CON_MODE2_POSITION                             0x2
#define _CLC2CON_MODE2_SIZE                                 0x1
#define _CLC2CON_MODE2_LENGTH                               0x1
#define _CLC2CON_MODE2_MASK                                 0x4
#define _CLC2CON_LC2MODE_POSN                               0x0
#define _CLC2CON_LC2MODE_POSITION                           0x0
#define _CLC2CON_LC2MODE_SIZE                               0x3
#define _CLC2CON_LC2MODE_LENGTH                             0x3
#define _CLC2CON_LC2MODE_MASK                               0x7
#define _CLC2CON_LC2INTN_POSN                               0x3
#define _CLC2CON_LC2INTN_POSITION                           0x3
#define _CLC2CON_LC2INTN_SIZE                               0x1
#define _CLC2CON_LC2INTN_LENGTH                             0x1
#define _CLC2CON_LC2INTN_MASK                               0x8
#define _CLC2CON_LC2INTP_POSN                               0x4
#define _CLC2CON_LC2INTP_POSITION                           0x4
#define _CLC2CON_LC2INTP_SIZE                               0x1
#define _CLC2CON_LC2INTP_LENGTH                             0x1
#define _CLC2CON_LC2INTP_MASK                               0x10
#define _CLC2CON_LC2OUT_POSN                                0x5
#define _CLC2CON_LC2OUT_POSITION                            0x5
#define _CLC2CON_LC2OUT_SIZE                                0x1
#define _CLC2CON_LC2OUT_LENGTH                              0x1
#define _CLC2CON_LC2OUT_MASK                                0x20
#define _CLC2CON_LC2OE_POSN                                 0x6
#define _CLC2CON_LC2OE_POSITION                             0x6
#define _CLC2CON_LC2OE_SIZE                                 0x1
#define _CLC2CON_LC2OE_LENGTH                               0x1
#define _CLC2CON_LC2OE_MASK                                 0x40
#define _CLC2CON_LC2EN_POSN                                 0x7
#define _CLC2CON_LC2EN_POSITION                             0x7
#define _CLC2CON_LC2EN_SIZE                                 0x1
#define _CLC2CON_LC2EN_LENGTH                               0x1
#define _CLC2CON_LC2EN_MASK                                 0x80
#define _CLC2CON_LC2MODE0_POSN                              0x0
#define _CLC2CON_LC2MODE0_POSITION                          0x0
#define _CLC2CON_LC2MODE0_SIZE                              0x1
#define _CLC2CON_LC2MODE0_LENGTH                            0x1
#define _CLC2CON_LC2MODE0_MASK                              0x1
#define _CLC2CON_LC2MODE1_POSN                              0x1
#define _CLC2CON_LC2MODE1_POSITION                          0x1
#define _CLC2CON_LC2MODE1_SIZE                              0x1
#define _CLC2CON_LC2MODE1_LENGTH                            0x1
#define _CLC2CON_LC2MODE1_MASK                              0x2
#define _CLC2CON_LC2MODE2_POSN                              0x2
#define _CLC2CON_LC2MODE2_POSITION                          0x2
#define _CLC2CON_LC2MODE2_SIZE                              0x1
#define _CLC2CON_LC2MODE2_LENGTH                            0x1
#define _CLC2CON_LC2MODE2_MASK                              0x4

// Register: CLC2POL
#define CLC2POL CLC2POL
extern volatile unsigned char           CLC2POL             __at(0x3C6B);
#ifndef _LIB_BUILD
asm("CLC2POL equ 03C6Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned G1POL                  :1;
        unsigned G2POL                  :1;
        unsigned G3POL                  :1;
        unsigned G4POL                  :1;
        unsigned                        :3;
        unsigned POL                    :1;
    };
    struct {
        unsigned LC2G1POL               :1;
        unsigned LC2G2POL               :1;
        unsigned LC2G3POL               :1;
        unsigned LC2G4POL               :1;
        unsigned                        :3;
        unsigned LC2POL                 :1;
    };
} CLC2POLbits_t;
extern volatile CLC2POLbits_t CLC2POLbits __at(0x3C6B);
// bitfield macros
#define _CLC2POL_G1POL_POSN                                 0x0
#define _CLC2POL_G1POL_POSITION                             0x0
#define _CLC2POL_G1POL_SIZE                                 0x1
#define _CLC2POL_G1POL_LENGTH                               0x1
#define _CLC2POL_G1POL_MASK                                 0x1
#define _CLC2POL_G2POL_POSN                                 0x1
#define _CLC2POL_G2POL_POSITION                             0x1
#define _CLC2POL_G2POL_SIZE                                 0x1
#define _CLC2POL_G2POL_LENGTH                               0x1
#define _CLC2POL_G2POL_MASK                                 0x2
#define _CLC2POL_G3POL_POSN                                 0x2
#define _CLC2POL_G3POL_POSITION                             0x2
#define _CLC2POL_G3POL_SIZE                                 0x1
#define _CLC2POL_G3POL_LENGTH                               0x1
#define _CLC2POL_G3POL_MASK                                 0x4
#define _CLC2POL_G4POL_POSN                                 0x3
#define _CLC2POL_G4POL_POSITION                             0x3
#define _CLC2POL_G4POL_SIZE                                 0x1
#define _CLC2POL_G4POL_LENGTH                               0x1
#define _CLC2POL_G4POL_MASK                                 0x8
#define _CLC2POL_POL_POSN                                   0x7
#define _CLC2POL_POL_POSITION                               0x7
#define _CLC2POL_POL_SIZE                                   0x1
#define _CLC2POL_POL_LENGTH                                 0x1
#define _CLC2POL_POL_MASK                                   0x80
#define _CLC2POL_LC2G1POL_POSN                              0x0
#define _CLC2POL_LC2G1POL_POSITION                          0x0
#define _CLC2POL_LC2G1POL_SIZE                              0x1
#define _CLC2POL_LC2G1POL_LENGTH                            0x1
#define _CLC2POL_LC2G1POL_MASK                              0x1
#define _CLC2POL_LC2G2POL_POSN                              0x1
#define _CLC2POL_LC2G2POL_POSITION                          0x1
#define _CLC2POL_LC2G2POL_SIZE                              0x1
#define _CLC2POL_LC2G2POL_LENGTH                            0x1
#define _CLC2POL_LC2G2POL_MASK                              0x2
#define _CLC2POL_LC2G3POL_POSN                              0x2
#define _CLC2POL_LC2G3POL_POSITION                          0x2
#define _CLC2POL_LC2G3POL_SIZE                              0x1
#define _CLC2POL_LC2G3POL_LENGTH                            0x1
#define _CLC2POL_LC2G3POL_MASK                              0x4
#define _CLC2POL_LC2G4POL_POSN                              0x3
#define _CLC2POL_LC2G4POL_POSITION                          0x3
#define _CLC2POL_LC2G4POL_SIZE                              0x1
#define _CLC2POL_LC2G4POL_LENGTH                            0x1
#define _CLC2POL_LC2G4POL_MASK                              0x8
#define _CLC2POL_LC2POL_POSN                                0x7
#define _CLC2POL_LC2POL_POSITION                            0x7
#define _CLC2POL_LC2POL_SIZE                                0x1
#define _CLC2POL_LC2POL_LENGTH                              0x1
#define _CLC2POL_LC2POL_MASK                                0x80

// Register: CLC2SEL0
#define CLC2SEL0 CLC2SEL0
extern volatile unsigned char           CLC2SEL0            __at(0x3C6C);
#ifndef _LIB_BUILD
asm("CLC2SEL0 equ 03C6Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned D1S                    :8;
    };
    struct {
        unsigned LC2D1S                 :8;
    };
    struct {
        unsigned D1S0                   :1;
        unsigned D1S1                   :1;
        unsigned D1S2                   :1;
        unsigned D1S3                   :1;
        unsigned D1S4                   :1;
        unsigned D1S5                   :1;
        unsigned D1S6                   :1;
        unsigned D1S7                   :1;
    };
    struct {
        unsigned LC2D1S0                :1;
        unsigned LC2D1S1                :1;
        unsigned LC2D1S2                :1;
        unsigned LC2D1S3                :1;
        unsigned LC2D1S4                :1;
        unsigned LC2D1S5                :1;
        unsigned LC2D1S6                :1;
        unsigned LC2D1S7                :1;
    };
} CLC2SEL0bits_t;
extern volatile CLC2SEL0bits_t CLC2SEL0bits __at(0x3C6C);
// bitfield macros
#define _CLC2SEL0_D1S_POSN                                  0x0
#define _CLC2SEL0_D1S_POSITION                              0x0
#define _CLC2SEL0_D1S_SIZE                                  0x8
#define _CLC2SEL0_D1S_LENGTH                                0x8
#define _CLC2SEL0_D1S_MASK                                  0xFF
#define _CLC2SEL0_LC2D1S_POSN                               0x0
#define _CLC2SEL0_LC2D1S_POSITION                           0x0
#define _CLC2SEL0_LC2D1S_SIZE                               0x8
#define _CLC2SEL0_LC2D1S_LENGTH                             0x8
#define _CLC2SEL0_LC2D1S_MASK                               0xFF
#define _CLC2SEL0_D1S0_POSN                                 0x0
#define _CLC2SEL0_D1S0_POSITION                             0x0
#define _CLC2SEL0_D1S0_SIZE                                 0x1
#define _CLC2SEL0_D1S0_LENGTH                               0x1
#define _CLC2SEL0_D1S0_MASK                                 0x1
#define _CLC2SEL0_D1S1_POSN                                 0x1
#define _CLC2SEL0_D1S1_POSITION                             0x1
#define _CLC2SEL0_D1S1_SIZE                                 0x1
#define _CLC2SEL0_D1S1_LENGTH                               0x1
#define _CLC2SEL0_D1S1_MASK                                 0x2
#define _CLC2SEL0_D1S2_POSN                                 0x2
#define _CLC2SEL0_D1S2_POSITION                             0x2
#define _CLC2SEL0_D1S2_SIZE                                 0x1
#define _CLC2SEL0_D1S2_LENGTH                               0x1
#define _CLC2SEL0_D1S2_MASK                                 0x4
#define _CLC2SEL0_D1S3_POSN                                 0x3
#define _CLC2SEL0_D1S3_POSITION                             0x3
#define _CLC2SEL0_D1S3_SIZE                                 0x1
#define _CLC2SEL0_D1S3_LENGTH                               0x1
#define _CLC2SEL0_D1S3_MASK                                 0x8
#define _CLC2SEL0_D1S4_POSN                                 0x4
#define _CLC2SEL0_D1S4_POSITION                             0x4
#define _CLC2SEL0_D1S4_SIZE                                 0x1
#define _CLC2SEL0_D1S4_LENGTH                               0x1
#define _CLC2SEL0_D1S4_MASK                                 0x10
#define _CLC2SEL0_D1S5_POSN                                 0x5
#define _CLC2SEL0_D1S5_POSITION                             0x5
#define _CLC2SEL0_D1S5_SIZE                                 0x1
#define _CLC2SEL0_D1S5_LENGTH                               0x1
#define _CLC2SEL0_D1S5_MASK                                 0x20
#define _CLC2SEL0_D1S6_POSN                                 0x6
#define _CLC2SEL0_D1S6_POSITION                             0x6
#define _CLC2SEL0_D1S6_SIZE                                 0x1
#define _CLC2SEL0_D1S6_LENGTH                               0x1
#define _CLC2SEL0_D1S6_MASK                                 0x40
#define _CLC2SEL0_D1S7_POSN                                 0x7
#define _CLC2SEL0_D1S7_POSITION                             0x7
#define _CLC2SEL0_D1S7_SIZE                                 0x1
#define _CLC2SEL0_D1S7_LENGTH                               0x1
#define _CLC2SEL0_D1S7_MASK                                 0x80
#define _CLC2SEL0_LC2D1S0_POSN                              0x0
#define _CLC2SEL0_LC2D1S0_POSITION                          0x0
#define _CLC2SEL0_LC2D1S0_SIZE                              0x1
#define _CLC2SEL0_LC2D1S0_LENGTH                            0x1
#define _CLC2SEL0_LC2D1S0_MASK                              0x1
#define _CLC2SEL0_LC2D1S1_POSN                              0x1
#define _CLC2SEL0_LC2D1S1_POSITION                          0x1
#define _CLC2SEL0_LC2D1S1_SIZE                              0x1
#define _CLC2SEL0_LC2D1S1_LENGTH                            0x1
#define _CLC2SEL0_LC2D1S1_MASK                              0x2
#define _CLC2SEL0_LC2D1S2_POSN                              0x2
#define _CLC2SEL0_LC2D1S2_POSITION                          0x2
#define _CLC2SEL0_LC2D1S2_SIZE                              0x1
#define _CLC2SEL0_LC2D1S2_LENGTH                            0x1
#define _CLC2SEL0_LC2D1S2_MASK                              0x4
#define _CLC2SEL0_LC2D1S3_POSN                              0x3
#define _CLC2SEL0_LC2D1S3_POSITION                          0x3
#define _CLC2SEL0_LC2D1S3_SIZE                              0x1
#define _CLC2SEL0_LC2D1S3_LENGTH                            0x1
#define _CLC2SEL0_LC2D1S3_MASK                              0x8
#define _CLC2SEL0_LC2D1S4_POSN                              0x4
#define _CLC2SEL0_LC2D1S4_POSITION                          0x4
#define _CLC2SEL0_LC2D1S4_SIZE                              0x1
#define _CLC2SEL0_LC2D1S4_LENGTH                            0x1
#define _CLC2SEL0_LC2D1S4_MASK                              0x10
#define _CLC2SEL0_LC2D1S5_POSN                              0x5
#define _CLC2SEL0_LC2D1S5_POSITION                          0x5
#define _CLC2SEL0_LC2D1S5_SIZE                              0x1
#define _CLC2SEL0_LC2D1S5_LENGTH                            0x1
#define _CLC2SEL0_LC2D1S5_MASK                              0x20
#define _CLC2SEL0_LC2D1S6_POSN                              0x6
#define _CLC2SEL0_LC2D1S6_POSITION                          0x6
#define _CLC2SEL0_LC2D1S6_SIZE                              0x1
#define _CLC2SEL0_LC2D1S6_LENGTH                            0x1
#define _CLC2SEL0_LC2D1S6_MASK                              0x40
#define _CLC2SEL0_LC2D1S7_POSN                              0x7
#define _CLC2SEL0_LC2D1S7_POSITION                          0x7
#define _CLC2SEL0_LC2D1S7_SIZE                              0x1
#define _CLC2SEL0_LC2D1S7_LENGTH                            0x1
#define _CLC2SEL0_LC2D1S7_MASK                              0x80

// Register: CLC2SEL1
#define CLC2SEL1 CLC2SEL1
extern volatile unsigned char           CLC2SEL1            __at(0x3C6D);
#ifndef _LIB_BUILD
asm("CLC2SEL1 equ 03C6Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned D2S                    :8;
    };
    struct {
        unsigned LC2D2S                 :8;
    };
    struct {
        unsigned D2S0                   :1;
        unsigned D2S1                   :1;
        unsigned D2S2                   :1;
        unsigned D2S3                   :1;
        unsigned D2S4                   :1;
        unsigned D2S5                   :1;
        unsigned D2S6                   :1;
        unsigned D2S7                   :1;
    };
    struct {
        unsigned LC2D2S0                :1;
        unsigned LC2D2S1                :1;
        unsigned LC2D2S2                :1;
        unsigned LC2D2S3                :1;
        unsigned LC2D2S4                :1;
        unsigned LC2D2S5                :1;
        unsigned LC2D2S6                :1;
        unsigned LC2D2S7                :1;
    };
} CLC2SEL1bits_t;
extern volatile CLC2SEL1bits_t CLC2SEL1bits __at(0x3C6D);
// bitfield macros
#define _CLC2SEL1_D2S_POSN                                  0x0
#define _CLC2SEL1_D2S_POSITION                              0x0
#define _CLC2SEL1_D2S_SIZE                                  0x8
#define _CLC2SEL1_D2S_LENGTH                                0x8
#define _CLC2SEL1_D2S_MASK                                  0xFF
#define _CLC2SEL1_LC2D2S_POSN                               0x0
#define _CLC2SEL1_LC2D2S_POSITION                           0x0
#define _CLC2SEL1_LC2D2S_SIZE                               0x8
#define _CLC2SEL1_LC2D2S_LENGTH                             0x8
#define _CLC2SEL1_LC2D2S_MASK                               0xFF
#define _CLC2SEL1_D2S0_POSN                                 0x0
#define _CLC2SEL1_D2S0_POSITION                             0x0
#define _CLC2SEL1_D2S0_SIZE                                 0x1
#define _CLC2SEL1_D2S0_LENGTH                               0x1
#define _CLC2SEL1_D2S0_MASK                                 0x1
#define _CLC2SEL1_D2S1_POSN                                 0x1
#define _CLC2SEL1_D2S1_POSITION                             0x1
#define _CLC2SEL1_D2S1_SIZE                                 0x1
#define _CLC2SEL1_D2S1_LENGTH                               0x1
#define _CLC2SEL1_D2S1_MASK                                 0x2
#define _CLC2SEL1_D2S2_POSN                                 0x2
#define _CLC2SEL1_D2S2_POSITION                             0x2
#define _CLC2SEL1_D2S2_SIZE                                 0x1
#define _CLC2SEL1_D2S2_LENGTH                               0x1
#define _CLC2SEL1_D2S2_MASK                                 0x4
#define _CLC2SEL1_D2S3_POSN                                 0x3
#define _CLC2SEL1_D2S3_POSITION                             0x3
#define _CLC2SEL1_D2S3_SIZE                                 0x1
#define _CLC2SEL1_D2S3_LENGTH                               0x1
#define _CLC2SEL1_D2S3_MASK                                 0x8
#define _CLC2SEL1_D2S4_POSN                                 0x4
#define _CLC2SEL1_D2S4_POSITION                             0x4
#define _CLC2SEL1_D2S4_SIZE                                 0x1
#define _CLC2SEL1_D2S4_LENGTH                               0x1
#define _CLC2SEL1_D2S4_MASK                                 0x10
#define _CLC2SEL1_D2S5_POSN                                 0x5
#define _CLC2SEL1_D2S5_POSITION                             0x5
#define _CLC2SEL1_D2S5_SIZE                                 0x1
#define _CLC2SEL1_D2S5_LENGTH                               0x1
#define _CLC2SEL1_D2S5_MASK                                 0x20
#define _CLC2SEL1_D2S6_POSN                                 0x6
#define _CLC2SEL1_D2S6_POSITION                             0x6
#define _CLC2SEL1_D2S6_SIZE                                 0x1
#define _CLC2SEL1_D2S6_LENGTH                               0x1
#define _CLC2SEL1_D2S6_MASK                                 0x40
#define _CLC2SEL1_D2S7_POSN                                 0x7
#define _CLC2SEL1_D2S7_POSITION                             0x7
#define _CLC2SEL1_D2S7_SIZE                                 0x1
#define _CLC2SEL1_D2S7_LENGTH                               0x1
#define _CLC2SEL1_D2S7_MASK                                 0x80
#define _CLC2SEL1_LC2D2S0_POSN                              0x0
#define _CLC2SEL1_LC2D2S0_POSITION                          0x0
#define _CLC2SEL1_LC2D2S0_SIZE                              0x1
#define _CLC2SEL1_LC2D2S0_LENGTH                            0x1
#define _CLC2SEL1_LC2D2S0_MASK                              0x1
#define _CLC2SEL1_LC2D2S1_POSN                              0x1
#define _CLC2SEL1_LC2D2S1_POSITION                          0x1
#define _CLC2SEL1_LC2D2S1_SIZE                              0x1
#define _CLC2SEL1_LC2D2S1_LENGTH                            0x1
#define _CLC2SEL1_LC2D2S1_MASK                              0x2
#define _CLC2SEL1_LC2D2S2_POSN                              0x2
#define _CLC2SEL1_LC2D2S2_POSITION                          0x2
#define _CLC2SEL1_LC2D2S2_SIZE                              0x1
#define _CLC2SEL1_LC2D2S2_LENGTH                            0x1
#define _CLC2SEL1_LC2D2S2_MASK                              0x4
#define _CLC2SEL1_LC2D2S3_POSN                              0x3
#define _CLC2SEL1_LC2D2S3_POSITION                          0x3
#define _CLC2SEL1_LC2D2S3_SIZE                              0x1
#define _CLC2SEL1_LC2D2S3_LENGTH                            0x1
#define _CLC2SEL1_LC2D2S3_MASK                              0x8
#define _CLC2SEL1_LC2D2S4_POSN                              0x4
#define _CLC2SEL1_LC2D2S4_POSITION                          0x4
#define _CLC2SEL1_LC2D2S4_SIZE                              0x1
#define _CLC2SEL1_LC2D2S4_LENGTH                            0x1
#define _CLC2SEL1_LC2D2S4_MASK                              0x10
#define _CLC2SEL1_LC2D2S5_POSN                              0x5
#define _CLC2SEL1_LC2D2S5_POSITION                          0x5
#define _CLC2SEL1_LC2D2S5_SIZE                              0x1
#define _CLC2SEL1_LC2D2S5_LENGTH                            0x1
#define _CLC2SEL1_LC2D2S5_MASK                              0x20
#define _CLC2SEL1_LC2D2S6_POSN                              0x6
#define _CLC2SEL1_LC2D2S6_POSITION                          0x6
#define _CLC2SEL1_LC2D2S6_SIZE                              0x1
#define _CLC2SEL1_LC2D2S6_LENGTH                            0x1
#define _CLC2SEL1_LC2D2S6_MASK                              0x40
#define _CLC2SEL1_LC2D2S7_POSN                              0x7
#define _CLC2SEL1_LC2D2S7_POSITION                          0x7
#define _CLC2SEL1_LC2D2S7_SIZE                              0x1
#define _CLC2SEL1_LC2D2S7_LENGTH                            0x1
#define _CLC2SEL1_LC2D2S7_MASK                              0x80

// Register: CLC2SEL2
#define CLC2SEL2 CLC2SEL2
extern volatile unsigned char           CLC2SEL2            __at(0x3C6E);
#ifndef _LIB_BUILD
asm("CLC2SEL2 equ 03C6Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned D3S                    :8;
    };
    struct {
        unsigned LC2D3S                 :8;
    };
    struct {
        unsigned D3S0                   :1;
        unsigned D3S1                   :1;
        unsigned D3S2                   :1;
        unsigned D3S3                   :1;
        unsigned D3S4                   :1;
        unsigned D3S5                   :1;
        unsigned D3S6                   :1;
        unsigned D3S7                   :1;
    };
    struct {
        unsigned LC2D3S0                :1;
        unsigned LC2D3S1                :1;
        unsigned LC2D3S2                :1;
        unsigned LC2D3S3                :1;
        unsigned LC2D3S4                :1;
        unsigned LC2D3S5                :1;
        unsigned LC2D3S6                :1;
        unsigned LC2D3S7                :1;
    };
} CLC2SEL2bits_t;
extern volatile CLC2SEL2bits_t CLC2SEL2bits __at(0x3C6E);
// bitfield macros
#define _CLC2SEL2_D3S_POSN                                  0x0
#define _CLC2SEL2_D3S_POSITION                              0x0
#define _CLC2SEL2_D3S_SIZE                                  0x8
#define _CLC2SEL2_D3S_LENGTH                                0x8
#define _CLC2SEL2_D3S_MASK                                  0xFF
#define _CLC2SEL2_LC2D3S_POSN                               0x0
#define _CLC2SEL2_LC2D3S_POSITION                           0x0
#define _CLC2SEL2_LC2D3S_SIZE                               0x8
#define _CLC2SEL2_LC2D3S_LENGTH                             0x8
#define _CLC2SEL2_LC2D3S_MASK                               0xFF
#define _CLC2SEL2_D3S0_POSN                                 0x0
#define _CLC2SEL2_D3S0_POSITION                             0x0
#define _CLC2SEL2_D3S0_SIZE                                 0x1
#define _CLC2SEL2_D3S0_LENGTH                               0x1
#define _CLC2SEL2_D3S0_MASK                                 0x1
#define _CLC2SEL2_D3S1_POSN                                 0x1
#define _CLC2SEL2_D3S1_POSITION                             0x1
#define _CLC2SEL2_D3S1_SIZE                                 0x1
#define _CLC2SEL2_D3S1_LENGTH                               0x1
#define _CLC2SEL2_D3S1_MASK                                 0x2
#define _CLC2SEL2_D3S2_POSN                                 0x2
#define _CLC2SEL2_D3S2_POSITION                             0x2
#define _CLC2SEL2_D3S2_SIZE                                 0x1
#define _CLC2SEL2_D3S2_LENGTH                               0x1
#define _CLC2SEL2_D3S2_MASK                                 0x4
#define _CLC2SEL2_D3S3_POSN                                 0x3
#define _CLC2SEL2_D3S3_POSITION                             0x3
#define _CLC2SEL2_D3S3_SIZE                                 0x1
#define _CLC2SEL2_D3S3_LENGTH                               0x1
#define _CLC2SEL2_D3S3_MASK                                 0x8
#define _CLC2SEL2_D3S4_POSN                                 0x4
#define _CLC2SEL2_D3S4_POSITION                             0x4
#define _CLC2SEL2_D3S4_SIZE                                 0x1
#define _CLC2SEL2_D3S4_LENGTH                               0x1
#define _CLC2SEL2_D3S4_MASK                                 0x10
#define _CLC2SEL2_D3S5_POSN                                 0x5
#define _CLC2SEL2_D3S5_POSITION                             0x5
#define _CLC2SEL2_D3S5_SIZE                                 0x1
#define _CLC2SEL2_D3S5_LENGTH                               0x1
#define _CLC2SEL2_D3S5_MASK                                 0x20
#define _CLC2SEL2_D3S6_POSN                                 0x6
#define _CLC2SEL2_D3S6_POSITION                             0x6
#define _CLC2SEL2_D3S6_SIZE                                 0x1
#define _CLC2SEL2_D3S6_LENGTH                               0x1
#define _CLC2SEL2_D3S6_MASK                                 0x40
#define _CLC2SEL2_D3S7_POSN                                 0x7
#define _CLC2SEL2_D3S7_POSITION                             0x7
#define _CLC2SEL2_D3S7_SIZE                                 0x1
#define _CLC2SEL2_D3S7_LENGTH                               0x1
#define _CLC2SEL2_D3S7_MASK                                 0x80
#define _CLC2SEL2_LC2D3S0_POSN                              0x0
#define _CLC2SEL2_LC2D3S0_POSITION                          0x0
#define _CLC2SEL2_LC2D3S0_SIZE                              0x1
#define _CLC2SEL2_LC2D3S0_LENGTH                            0x1
#define _CLC2SEL2_LC2D3S0_MASK                              0x1
#define _CLC2SEL2_LC2D3S1_POSN                              0x1
#define _CLC2SEL2_LC2D3S1_POSITION                          0x1
#define _CLC2SEL2_LC2D3S1_SIZE                              0x1
#define _CLC2SEL2_LC2D3S1_LENGTH                            0x1
#define _CLC2SEL2_LC2D3S1_MASK                              0x2
#define _CLC2SEL2_LC2D3S2_POSN                              0x2
#define _CLC2SEL2_LC2D3S2_POSITION                          0x2
#define _CLC2SEL2_LC2D3S2_SIZE                              0x1
#define _CLC2SEL2_LC2D3S2_LENGTH                            0x1
#define _CLC2SEL2_LC2D3S2_MASK                              0x4
#define _CLC2SEL2_LC2D3S3_POSN                              0x3
#define _CLC2SEL2_LC2D3S3_POSITION                          0x3
#define _CLC2SEL2_LC2D3S3_SIZE                              0x1
#define _CLC2SEL2_LC2D3S3_LENGTH                            0x1
#define _CLC2SEL2_LC2D3S3_MASK                              0x8
#define _CLC2SEL2_LC2D3S4_POSN                              0x4
#define _CLC2SEL2_LC2D3S4_POSITION                          0x4
#define _CLC2SEL2_LC2D3S4_SIZE                              0x1
#define _CLC2SEL2_LC2D3S4_LENGTH                            0x1
#define _CLC2SEL2_LC2D3S4_MASK                              0x10
#define _CLC2SEL2_LC2D3S5_POSN                              0x5
#define _CLC2SEL2_LC2D3S5_POSITION                          0x5
#define _CLC2SEL2_LC2D3S5_SIZE                              0x1
#define _CLC2SEL2_LC2D3S5_LENGTH                            0x1
#define _CLC2SEL2_LC2D3S5_MASK                              0x20
#define _CLC2SEL2_LC2D3S6_POSN                              0x6
#define _CLC2SEL2_LC2D3S6_POSITION                          0x6
#define _CLC2SEL2_LC2D3S6_SIZE                              0x1
#define _CLC2SEL2_LC2D3S6_LENGTH                            0x1
#define _CLC2SEL2_LC2D3S6_MASK                              0x40
#define _CLC2SEL2_LC2D3S7_POSN                              0x7
#define _CLC2SEL2_LC2D3S7_POSITION                          0x7
#define _CLC2SEL2_LC2D3S7_SIZE                              0x1
#define _CLC2SEL2_LC2D3S7_LENGTH                            0x1
#define _CLC2SEL2_LC2D3S7_MASK                              0x80

// Register: CLC2SEL3
#define CLC2SEL3 CLC2SEL3
extern volatile unsigned char           CLC2SEL3            __at(0x3C6F);
#ifndef _LIB_BUILD
asm("CLC2SEL3 equ 03C6Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned D4S                    :8;
    };
    struct {
        unsigned LC2D4S                 :8;
    };
    struct {
        unsigned D4S0                   :1;
        unsigned D4S1                   :1;
        unsigned D4S2                   :1;
        unsigned D4S3                   :1;
        unsigned D4S4                   :1;
        unsigned D4S5                   :1;
        unsigned D4S6                   :1;
        unsigned D4S7                   :1;
    };
    struct {
        unsigned LC2D4S0                :1;
        unsigned LC2D4S1                :1;
        unsigned LC2D4S2                :1;
        unsigned LC2D4S3                :1;
        unsigned LC2D4S4                :1;
        unsigned LC2D4S5                :1;
        unsigned LC2D4S6                :1;
        unsigned LC2D4S7                :1;
    };
} CLC2SEL3bits_t;
extern volatile CLC2SEL3bits_t CLC2SEL3bits __at(0x3C6F);
// bitfield macros
#define _CLC2SEL3_D4S_POSN                                  0x0
#define _CLC2SEL3_D4S_POSITION                              0x0
#define _CLC2SEL3_D4S_SIZE                                  0x8
#define _CLC2SEL3_D4S_LENGTH                                0x8
#define _CLC2SEL3_D4S_MASK                                  0xFF
#define _CLC2SEL3_LC2D4S_POSN                               0x0
#define _CLC2SEL3_LC2D4S_POSITION                           0x0
#define _CLC2SEL3_LC2D4S_SIZE                               0x8
#define _CLC2SEL3_LC2D4S_LENGTH                             0x8
#define _CLC2SEL3_LC2D4S_MASK                               0xFF
#define _CLC2SEL3_D4S0_POSN                                 0x0
#define _CLC2SEL3_D4S0_POSITION                             0x0
#define _CLC2SEL3_D4S0_SIZE                                 0x1
#define _CLC2SEL3_D4S0_LENGTH                               0x1
#define _CLC2SEL3_D4S0_MASK                                 0x1
#define _CLC2SEL3_D4S1_POSN                                 0x1
#define _CLC2SEL3_D4S1_POSITION                             0x1
#define _CLC2SEL3_D4S1_SIZE                                 0x1
#define _CLC2SEL3_D4S1_LENGTH                               0x1
#define _CLC2SEL3_D4S1_MASK                                 0x2
#define _CLC2SEL3_D4S2_POSN                                 0x2
#define _CLC2SEL3_D4S2_POSITION                             0x2
#define _CLC2SEL3_D4S2_SIZE                                 0x1
#define _CLC2SEL3_D4S2_LENGTH                               0x1
#define _CLC2SEL3_D4S2_MASK                                 0x4
#define _CLC2SEL3_D4S3_POSN                                 0x3
#define _CLC2SEL3_D4S3_POSITION                             0x3
#define _CLC2SEL3_D4S3_SIZE                                 0x1
#define _CLC2SEL3_D4S3_LENGTH                               0x1
#define _CLC2SEL3_D4S3_MASK                                 0x8
#define _CLC2SEL3_D4S4_POSN                                 0x4
#define _CLC2SEL3_D4S4_POSITION                             0x4
#define _CLC2SEL3_D4S4_SIZE                                 0x1
#define _CLC2SEL3_D4S4_LENGTH                               0x1
#define _CLC2SEL3_D4S4_MASK                                 0x10
#define _CLC2SEL3_D4S5_POSN                                 0x5
#define _CLC2SEL3_D4S5_POSITION                             0x5
#define _CLC2SEL3_D4S5_SIZE                                 0x1
#define _CLC2SEL3_D4S5_LENGTH                               0x1
#define _CLC2SEL3_D4S5_MASK                                 0x20
#define _CLC2SEL3_D4S6_POSN                                 0x6
#define _CLC2SEL3_D4S6_POSITION                             0x6
#define _CLC2SEL3_D4S6_SIZE                                 0x1
#define _CLC2SEL3_D4S6_LENGTH                               0x1
#define _CLC2SEL3_D4S6_MASK                                 0x40
#define _CLC2SEL3_D4S7_POSN                                 0x7
#define _CLC2SEL3_D4S7_POSITION                             0x7
#define _CLC2SEL3_D4S7_SIZE                                 0x1
#define _CLC2SEL3_D4S7_LENGTH                               0x1
#define _CLC2SEL3_D4S7_MASK                                 0x80
#define _CLC2SEL3_LC2D4S0_POSN                              0x0
#define _CLC2SEL3_LC2D4S0_POSITION                          0x0
#define _CLC2SEL3_LC2D4S0_SIZE                              0x1
#define _CLC2SEL3_LC2D4S0_LENGTH                            0x1
#define _CLC2SEL3_LC2D4S0_MASK                              0x1
#define _CLC2SEL3_LC2D4S1_POSN                              0x1
#define _CLC2SEL3_LC2D4S1_POSITION                          0x1
#define _CLC2SEL3_LC2D4S1_SIZE                              0x1
#define _CLC2SEL3_LC2D4S1_LENGTH                            0x1
#define _CLC2SEL3_LC2D4S1_MASK                              0x2
#define _CLC2SEL3_LC2D4S2_POSN                              0x2
#define _CLC2SEL3_LC2D4S2_POSITION                          0x2
#define _CLC2SEL3_LC2D4S2_SIZE                              0x1
#define _CLC2SEL3_LC2D4S2_LENGTH                            0x1
#define _CLC2SEL3_LC2D4S2_MASK                              0x4
#define _CLC2SEL3_LC2D4S3_POSN                              0x3
#define _CLC2SEL3_LC2D4S3_POSITION                          0x3
#define _CLC2SEL3_LC2D4S3_SIZE                              0x1
#define _CLC2SEL3_LC2D4S3_LENGTH                            0x1
#define _CLC2SEL3_LC2D4S3_MASK                              0x8
#define _CLC2SEL3_LC2D4S4_POSN                              0x4
#define _CLC2SEL3_LC2D4S4_POSITION                          0x4
#define _CLC2SEL3_LC2D4S4_SIZE                              0x1
#define _CLC2SEL3_LC2D4S4_LENGTH                            0x1
#define _CLC2SEL3_LC2D4S4_MASK                              0x10
#define _CLC2SEL3_LC2D4S5_POSN                              0x5
#define _CLC2SEL3_LC2D4S5_POSITION                          0x5
#define _CLC2SEL3_LC2D4S5_SIZE                              0x1
#define _CLC2SEL3_LC2D4S5_LENGTH                            0x1
#define _CLC2SEL3_LC2D4S5_MASK                              0x20
#define _CLC2SEL3_LC2D4S6_POSN                              0x6
#define _CLC2SEL3_LC2D4S6_POSITION                          0x6
#define _CLC2SEL3_LC2D4S6_SIZE                              0x1
#define _CLC2SEL3_LC2D4S6_LENGTH                            0x1
#define _CLC2SEL3_LC2D4S6_MASK                              0x40
#define _CLC2SEL3_LC2D4S7_POSN                              0x7
#define _CLC2SEL3_LC2D4S7_POSITION                          0x7
#define _CLC2SEL3_LC2D4S7_SIZE                              0x1
#define _CLC2SEL3_LC2D4S7_LENGTH                            0x1
#define _CLC2SEL3_LC2D4S7_MASK                              0x80

// Register: CLC2GLS0
#define CLC2GLS0 CLC2GLS0
extern volatile unsigned char           CLC2GLS0            __at(0x3C70);
#ifndef _LIB_BUILD
asm("CLC2GLS0 equ 03C70h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned G1D1N                  :1;
        unsigned G1D1T                  :1;
        unsigned G1D2N                  :1;
        unsigned G1D2T                  :1;
        unsigned G1D3N                  :1;
        unsigned G1D3T                  :1;
        unsigned G1D4N                  :1;
        unsigned G1D4T                  :1;
    };
    struct {
        unsigned LC2G1D1N               :1;
        unsigned LC2G1D1T               :1;
        unsigned LC2G1D2N               :1;
        unsigned LC2G1D2T               :1;
        unsigned LC2G1D3N               :1;
        unsigned LC2G1D3T               :1;
        unsigned LC2G1D4N               :1;
        unsigned LC2G1D4T               :1;
    };
} CLC2GLS0bits_t;
extern volatile CLC2GLS0bits_t CLC2GLS0bits __at(0x3C70);
// bitfield macros
#define _CLC2GLS0_G1D1N_POSN                                0x0
#define _CLC2GLS0_G1D1N_POSITION                            0x0
#define _CLC2GLS0_G1D1N_SIZE                                0x1
#define _CLC2GLS0_G1D1N_LENGTH                              0x1
#define _CLC2GLS0_G1D1N_MASK                                0x1
#define _CLC2GLS0_G1D1T_POSN                                0x1
#define _CLC2GLS0_G1D1T_POSITION                            0x1
#define _CLC2GLS0_G1D1T_SIZE                                0x1
#define _CLC2GLS0_G1D1T_LENGTH                              0x1
#define _CLC2GLS0_G1D1T_MASK                                0x2
#define _CLC2GLS0_G1D2N_POSN                                0x2
#define _CLC2GLS0_G1D2N_POSITION                            0x2
#define _CLC2GLS0_G1D2N_SIZE                                0x1
#define _CLC2GLS0_G1D2N_LENGTH                              0x1
#define _CLC2GLS0_G1D2N_MASK                                0x4
#define _CLC2GLS0_G1D2T_POSN                                0x3
#define _CLC2GLS0_G1D2T_POSITION                            0x3
#define _CLC2GLS0_G1D2T_SIZE                                0x1
#define _CLC2GLS0_G1D2T_LENGTH                              0x1
#define _CLC2GLS0_G1D2T_MASK                                0x8
#define _CLC2GLS0_G1D3N_POSN                                0x4
#define _CLC2GLS0_G1D3N_POSITION                            0x4
#define _CLC2GLS0_G1D3N_SIZE                                0x1
#define _CLC2GLS0_G1D3N_LENGTH                              0x1
#define _CLC2GLS0_G1D3N_MASK                                0x10
#define _CLC2GLS0_G1D3T_POSN                                0x5
#define _CLC2GLS0_G1D3T_POSITION                            0x5
#define _CLC2GLS0_G1D3T_SIZE                                0x1
#define _CLC2GLS0_G1D3T_LENGTH                              0x1
#define _CLC2GLS0_G1D3T_MASK                                0x20
#define _CLC2GLS0_G1D4N_POSN                                0x6
#define _CLC2GLS0_G1D4N_POSITION                            0x6
#define _CLC2GLS0_G1D4N_SIZE                                0x1
#define _CLC2GLS0_G1D4N_LENGTH                              0x1
#define _CLC2GLS0_G1D4N_MASK                                0x40
#define _CLC2GLS0_G1D4T_POSN                                0x7
#define _CLC2GLS0_G1D4T_POSITION                            0x7
#define _CLC2GLS0_G1D4T_SIZE                                0x1
#define _CLC2GLS0_G1D4T_LENGTH                              0x1
#define _CLC2GLS0_G1D4T_MASK                                0x80
#define _CLC2GLS0_LC2G1D1N_POSN                             0x0
#define _CLC2GLS0_LC2G1D1N_POSITION                         0x0
#define _CLC2GLS0_LC2G1D1N_SIZE                             0x1
#define _CLC2GLS0_LC2G1D1N_LENGTH                           0x1
#define _CLC2GLS0_LC2G1D1N_MASK                             0x1
#define _CLC2GLS0_LC2G1D1T_POSN                             0x1
#define _CLC2GLS0_LC2G1D1T_POSITION                         0x1
#define _CLC2GLS0_LC2G1D1T_SIZE                             0x1
#define _CLC2GLS0_LC2G1D1T_LENGTH                           0x1
#define _CLC2GLS0_LC2G1D1T_MASK                             0x2
#define _CLC2GLS0_LC2G1D2N_POSN                             0x2
#define _CLC2GLS0_LC2G1D2N_POSITION                         0x2
#define _CLC2GLS0_LC2G1D2N_SIZE                             0x1
#define _CLC2GLS0_LC2G1D2N_LENGTH                           0x1
#define _CLC2GLS0_LC2G1D2N_MASK                             0x4
#define _CLC2GLS0_LC2G1D2T_POSN                             0x3
#define _CLC2GLS0_LC2G1D2T_POSITION                         0x3
#define _CLC2GLS0_LC2G1D2T_SIZE                             0x1
#define _CLC2GLS0_LC2G1D2T_LENGTH                           0x1
#define _CLC2GLS0_LC2G1D2T_MASK                             0x8
#define _CLC2GLS0_LC2G1D3N_POSN                             0x4
#define _CLC2GLS0_LC2G1D3N_POSITION                         0x4
#define _CLC2GLS0_LC2G1D3N_SIZE                             0x1
#define _CLC2GLS0_LC2G1D3N_LENGTH                           0x1
#define _CLC2GLS0_LC2G1D3N_MASK                             0x10
#define _CLC2GLS0_LC2G1D3T_POSN                             0x5
#define _CLC2GLS0_LC2G1D3T_POSITION                         0x5
#define _CLC2GLS0_LC2G1D3T_SIZE                             0x1
#define _CLC2GLS0_LC2G1D3T_LENGTH                           0x1
#define _CLC2GLS0_LC2G1D3T_MASK                             0x20
#define _CLC2GLS0_LC2G1D4N_POSN                             0x6
#define _CLC2GLS0_LC2G1D4N_POSITION                         0x6
#define _CLC2GLS0_LC2G1D4N_SIZE                             0x1
#define _CLC2GLS0_LC2G1D4N_LENGTH                           0x1
#define _CLC2GLS0_LC2G1D4N_MASK                             0x40
#define _CLC2GLS0_LC2G1D4T_POSN                             0x7
#define _CLC2GLS0_LC2G1D4T_POSITION                         0x7
#define _CLC2GLS0_LC2G1D4T_SIZE                             0x1
#define _CLC2GLS0_LC2G1D4T_LENGTH                           0x1
#define _CLC2GLS0_LC2G1D4T_MASK                             0x80

// Register: CLC2GLS1
#define CLC2GLS1 CLC2GLS1
extern volatile unsigned char           CLC2GLS1            __at(0x3C71);
#ifndef _LIB_BUILD
asm("CLC2GLS1 equ 03C71h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned G2D1N                  :1;
        unsigned G2D1T                  :1;
        unsigned G2D2N                  :1;
        unsigned G2D2T                  :1;
        unsigned G2D3N                  :1;
        unsigned G2D3T                  :1;
        unsigned G2D4N                  :1;
        unsigned G2D4T                  :1;
    };
    struct {
        unsigned LC2G2D1N               :1;
        unsigned LC2G2D1T               :1;
        unsigned LC2G2D2N               :1;
        unsigned LC2G2D2T               :1;
        unsigned LC2G2D3N               :1;
        unsigned LC2G2D3T               :1;
        unsigned LC2G2D4N               :1;
        unsigned LC2G2D4T               :1;
    };
} CLC2GLS1bits_t;
extern volatile CLC2GLS1bits_t CLC2GLS1bits __at(0x3C71);
// bitfield macros
#define _CLC2GLS1_G2D1N_POSN                                0x0
#define _CLC2GLS1_G2D1N_POSITION                            0x0
#define _CLC2GLS1_G2D1N_SIZE                                0x1
#define _CLC2GLS1_G2D1N_LENGTH                              0x1
#define _CLC2GLS1_G2D1N_MASK                                0x1
#define _CLC2GLS1_G2D1T_POSN                                0x1
#define _CLC2GLS1_G2D1T_POSITION                            0x1
#define _CLC2GLS1_G2D1T_SIZE                                0x1
#define _CLC2GLS1_G2D1T_LENGTH                              0x1
#define _CLC2GLS1_G2D1T_MASK                                0x2
#define _CLC2GLS1_G2D2N_POSN                                0x2
#define _CLC2GLS1_G2D2N_POSITION                            0x2
#define _CLC2GLS1_G2D2N_SIZE                                0x1
#define _CLC2GLS1_G2D2N_LENGTH                              0x1
#define _CLC2GLS1_G2D2N_MASK                                0x4
#define _CLC2GLS1_G2D2T_POSN                                0x3
#define _CLC2GLS1_G2D2T_POSITION                            0x3
#define _CLC2GLS1_G2D2T_SIZE                                0x1
#define _CLC2GLS1_G2D2T_LENGTH                              0x1
#define _CLC2GLS1_G2D2T_MASK                                0x8
#define _CLC2GLS1_G2D3N_POSN                                0x4
#define _CLC2GLS1_G2D3N_POSITION                            0x4
#define _CLC2GLS1_G2D3N_SIZE                                0x1
#define _CLC2GLS1_G2D3N_LENGTH                              0x1
#define _CLC2GLS1_G2D3N_MASK                                0x10
#define _CLC2GLS1_G2D3T_POSN                                0x5
#define _CLC2GLS1_G2D3T_POSITION                            0x5
#define _CLC2GLS1_G2D3T_SIZE                                0x1
#define _CLC2GLS1_G2D3T_LENGTH                              0x1
#define _CLC2GLS1_G2D3T_MASK                                0x20
#define _CLC2GLS1_G2D4N_POSN                                0x6
#define _CLC2GLS1_G2D4N_POSITION                            0x6
#define _CLC2GLS1_G2D4N_SIZE                                0x1
#define _CLC2GLS1_G2D4N_LENGTH                              0x1
#define _CLC2GLS1_G2D4N_MASK                                0x40
#define _CLC2GLS1_G2D4T_POSN                                0x7
#define _CLC2GLS1_G2D4T_POSITION                            0x7
#define _CLC2GLS1_G2D4T_SIZE                                0x1
#define _CLC2GLS1_G2D4T_LENGTH                              0x1
#define _CLC2GLS1_G2D4T_MASK                                0x80
#define _CLC2GLS1_LC2G2D1N_POSN                             0x0
#define _CLC2GLS1_LC2G2D1N_POSITION                         0x0
#define _CLC2GLS1_LC2G2D1N_SIZE                             0x1
#define _CLC2GLS1_LC2G2D1N_LENGTH                           0x1
#define _CLC2GLS1_LC2G2D1N_MASK                             0x1
#define _CLC2GLS1_LC2G2D1T_POSN                             0x1
#define _CLC2GLS1_LC2G2D1T_POSITION                         0x1
#define _CLC2GLS1_LC2G2D1T_SIZE                             0x1
#define _CLC2GLS1_LC2G2D1T_LENGTH                           0x1
#define _CLC2GLS1_LC2G2D1T_MASK                             0x2
#define _CLC2GLS1_LC2G2D2N_POSN                             0x2
#define _CLC2GLS1_LC2G2D2N_POSITION                         0x2
#define _CLC2GLS1_LC2G2D2N_SIZE                             0x1
#define _CLC2GLS1_LC2G2D2N_LENGTH                           0x1
#define _CLC2GLS1_LC2G2D2N_MASK                             0x4
#define _CLC2GLS1_LC2G2D2T_POSN                             0x3
#define _CLC2GLS1_LC2G2D2T_POSITION                         0x3
#define _CLC2GLS1_LC2G2D2T_SIZE                             0x1
#define _CLC2GLS1_LC2G2D2T_LENGTH                           0x1
#define _CLC2GLS1_LC2G2D2T_MASK                             0x8
#define _CLC2GLS1_LC2G2D3N_POSN                             0x4
#define _CLC2GLS1_LC2G2D3N_POSITION                         0x4
#define _CLC2GLS1_LC2G2D3N_SIZE                             0x1
#define _CLC2GLS1_LC2G2D3N_LENGTH                           0x1
#define _CLC2GLS1_LC2G2D3N_MASK                             0x10
#define _CLC2GLS1_LC2G2D3T_POSN                             0x5
#define _CLC2GLS1_LC2G2D3T_POSITION                         0x5
#define _CLC2GLS1_LC2G2D3T_SIZE                             0x1
#define _CLC2GLS1_LC2G2D3T_LENGTH                           0x1
#define _CLC2GLS1_LC2G2D3T_MASK                             0x20
#define _CLC2GLS1_LC2G2D4N_POSN                             0x6
#define _CLC2GLS1_LC2G2D4N_POSITION                         0x6
#define _CLC2GLS1_LC2G2D4N_SIZE                             0x1
#define _CLC2GLS1_LC2G2D4N_LENGTH                           0x1
#define _CLC2GLS1_LC2G2D4N_MASK                             0x40
#define _CLC2GLS1_LC2G2D4T_POSN                             0x7
#define _CLC2GLS1_LC2G2D4T_POSITION                         0x7
#define _CLC2GLS1_LC2G2D4T_SIZE                             0x1
#define _CLC2GLS1_LC2G2D4T_LENGTH                           0x1
#define _CLC2GLS1_LC2G2D4T_MASK                             0x80

// Register: CLC2GLS2
#define CLC2GLS2 CLC2GLS2
extern volatile unsigned char           CLC2GLS2            __at(0x3C72);
#ifndef _LIB_BUILD
asm("CLC2GLS2 equ 03C72h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned G3D1N                  :1;
        unsigned G3D1T                  :1;
        unsigned G3D2N                  :1;
        unsigned G3D2T                  :1;
        unsigned G3D3N                  :1;
        unsigned G3D3T                  :1;
        unsigned G3D4N                  :1;
        unsigned G3D4T                  :1;
    };
    struct {
        unsigned LC2G3D1N               :1;
        unsigned LC2G3D1T               :1;
        unsigned LC2G3D2N               :1;
        unsigned LC2G3D2T               :1;
        unsigned LC2G3D3N               :1;
        unsigned LC2G3D3T               :1;
        unsigned LC2G3D4N               :1;
        unsigned LC2G3D4T               :1;
    };
} CLC2GLS2bits_t;
extern volatile CLC2GLS2bits_t CLC2GLS2bits __at(0x3C72);
// bitfield macros
#define _CLC2GLS2_G3D1N_POSN                                0x0
#define _CLC2GLS2_G3D1N_POSITION                            0x0
#define _CLC2GLS2_G3D1N_SIZE                                0x1
#define _CLC2GLS2_G3D1N_LENGTH                              0x1
#define _CLC2GLS2_G3D1N_MASK                                0x1
#define _CLC2GLS2_G3D1T_POSN                                0x1
#define _CLC2GLS2_G3D1T_POSITION                            0x1
#define _CLC2GLS2_G3D1T_SIZE                                0x1
#define _CLC2GLS2_G3D1T_LENGTH                              0x1
#define _CLC2GLS2_G3D1T_MASK                                0x2
#define _CLC2GLS2_G3D2N_POSN                                0x2
#define _CLC2GLS2_G3D2N_POSITION                            0x2
#define _CLC2GLS2_G3D2N_SIZE                                0x1
#define _CLC2GLS2_G3D2N_LENGTH                              0x1
#define _CLC2GLS2_G3D2N_MASK                                0x4
#define _CLC2GLS2_G3D2T_POSN                                0x3
#define _CLC2GLS2_G3D2T_POSITION                            0x3
#define _CLC2GLS2_G3D2T_SIZE                                0x1
#define _CLC2GLS2_G3D2T_LENGTH                              0x1
#define _CLC2GLS2_G3D2T_MASK                                0x8
#define _CLC2GLS2_G3D3N_POSN                                0x4
#define _CLC2GLS2_G3D3N_POSITION                            0x4
#define _CLC2GLS2_G3D3N_SIZE                                0x1
#define _CLC2GLS2_G3D3N_LENGTH                              0x1
#define _CLC2GLS2_G3D3N_MASK                                0x10
#define _CLC2GLS2_G3D3T_POSN                                0x5
#define _CLC2GLS2_G3D3T_POSITION                            0x5
#define _CLC2GLS2_G3D3T_SIZE                                0x1
#define _CLC2GLS2_G3D3T_LENGTH                              0x1
#define _CLC2GLS2_G3D3T_MASK                                0x20
#define _CLC2GLS2_G3D4N_POSN                                0x6
#define _CLC2GLS2_G3D4N_POSITION                            0x6
#define _CLC2GLS2_G3D4N_SIZE                                0x1
#define _CLC2GLS2_G3D4N_LENGTH                              0x1
#define _CLC2GLS2_G3D4N_MASK                                0x40
#define _CLC2GLS2_G3D4T_POSN                                0x7
#define _CLC2GLS2_G3D4T_POSITION                            0x7
#define _CLC2GLS2_G3D4T_SIZE                                0x1
#define _CLC2GLS2_G3D4T_LENGTH                              0x1
#define _CLC2GLS2_G3D4T_MASK                                0x80
#define _CLC2GLS2_LC2G3D1N_POSN                             0x0
#define _CLC2GLS2_LC2G3D1N_POSITION                         0x0
#define _CLC2GLS2_LC2G3D1N_SIZE                             0x1
#define _CLC2GLS2_LC2G3D1N_LENGTH                           0x1
#define _CLC2GLS2_LC2G3D1N_MASK                             0x1
#define _CLC2GLS2_LC2G3D1T_POSN                             0x1
#define _CLC2GLS2_LC2G3D1T_POSITION                         0x1
#define _CLC2GLS2_LC2G3D1T_SIZE                             0x1
#define _CLC2GLS2_LC2G3D1T_LENGTH                           0x1
#define _CLC2GLS2_LC2G3D1T_MASK                             0x2
#define _CLC2GLS2_LC2G3D2N_POSN                             0x2
#define _CLC2GLS2_LC2G3D2N_POSITION                         0x2
#define _CLC2GLS2_LC2G3D2N_SIZE                             0x1
#define _CLC2GLS2_LC2G3D2N_LENGTH                           0x1
#define _CLC2GLS2_LC2G3D2N_MASK                             0x4
#define _CLC2GLS2_LC2G3D2T_POSN                             0x3
#define _CLC2GLS2_LC2G3D2T_POSITION                         0x3
#define _CLC2GLS2_LC2G3D2T_SIZE                             0x1
#define _CLC2GLS2_LC2G3D2T_LENGTH                           0x1
#define _CLC2GLS2_LC2G3D2T_MASK                             0x8
#define _CLC2GLS2_LC2G3D3N_POSN                             0x4
#define _CLC2GLS2_LC2G3D3N_POSITION                         0x4
#define _CLC2GLS2_LC2G3D3N_SIZE                             0x1
#define _CLC2GLS2_LC2G3D3N_LENGTH                           0x1
#define _CLC2GLS2_LC2G3D3N_MASK                             0x10
#define _CLC2GLS2_LC2G3D3T_POSN                             0x5
#define _CLC2GLS2_LC2G3D3T_POSITION                         0x5
#define _CLC2GLS2_LC2G3D3T_SIZE                             0x1
#define _CLC2GLS2_LC2G3D3T_LENGTH                           0x1
#define _CLC2GLS2_LC2G3D3T_MASK                             0x20
#define _CLC2GLS2_LC2G3D4N_POSN                             0x6
#define _CLC2GLS2_LC2G3D4N_POSITION                         0x6
#define _CLC2GLS2_LC2G3D4N_SIZE                             0x1
#define _CLC2GLS2_LC2G3D4N_LENGTH                           0x1
#define _CLC2GLS2_LC2G3D4N_MASK                             0x40
#define _CLC2GLS2_LC2G3D4T_POSN                             0x7
#define _CLC2GLS2_LC2G3D4T_POSITION                         0x7
#define _CLC2GLS2_LC2G3D4T_SIZE                             0x1
#define _CLC2GLS2_LC2G3D4T_LENGTH                           0x1
#define _CLC2GLS2_LC2G3D4T_MASK                             0x80

// Register: CLC2GLS3
#define CLC2GLS3 CLC2GLS3
extern volatile unsigned char           CLC2GLS3            __at(0x3C73);
#ifndef _LIB_BUILD
asm("CLC2GLS3 equ 03C73h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned G4D1N                  :1;
        unsigned G4D1T                  :1;
        unsigned G4D2N                  :1;
        unsigned G4D2T                  :1;
        unsigned G4D3N                  :1;
        unsigned G4D3T                  :1;
        unsigned G4D4N                  :1;
        unsigned G4D4T                  :1;
    };
    struct {
        unsigned LC2G4D1N               :1;
        unsigned LC2G4D1T               :1;
        unsigned LC2G4D2N               :1;
        unsigned LC2G4D2T               :1;
        unsigned LC2G4D3N               :1;
        unsigned LC2G4D3T               :1;
        unsigned LC2G4D4N               :1;
        unsigned LC2G4D4T               :1;
    };
} CLC2GLS3bits_t;
extern volatile CLC2GLS3bits_t CLC2GLS3bits __at(0x3C73);
// bitfield macros
#define _CLC2GLS3_G4D1N_POSN                                0x0
#define _CLC2GLS3_G4D1N_POSITION                            0x0
#define _CLC2GLS3_G4D1N_SIZE                                0x1
#define _CLC2GLS3_G4D1N_LENGTH                              0x1
#define _CLC2GLS3_G4D1N_MASK                                0x1
#define _CLC2GLS3_G4D1T_POSN                                0x1
#define _CLC2GLS3_G4D1T_POSITION                            0x1
#define _CLC2GLS3_G4D1T_SIZE                                0x1
#define _CLC2GLS3_G4D1T_LENGTH                              0x1
#define _CLC2GLS3_G4D1T_MASK                                0x2
#define _CLC2GLS3_G4D2N_POSN                                0x2
#define _CLC2GLS3_G4D2N_POSITION                            0x2
#define _CLC2GLS3_G4D2N_SIZE                                0x1
#define _CLC2GLS3_G4D2N_LENGTH                              0x1
#define _CLC2GLS3_G4D2N_MASK                                0x4
#define _CLC2GLS3_G4D2T_POSN                                0x3
#define _CLC2GLS3_G4D2T_POSITION                            0x3
#define _CLC2GLS3_G4D2T_SIZE                                0x1
#define _CLC2GLS3_G4D2T_LENGTH                              0x1
#define _CLC2GLS3_G4D2T_MASK                                0x8
#define _CLC2GLS3_G4D3N_POSN                                0x4
#define _CLC2GLS3_G4D3N_POSITION                            0x4
#define _CLC2GLS3_G4D3N_SIZE                                0x1
#define _CLC2GLS3_G4D3N_LENGTH                              0x1
#define _CLC2GLS3_G4D3N_MASK                                0x10
#define _CLC2GLS3_G4D3T_POSN                                0x5
#define _CLC2GLS3_G4D3T_POSITION                            0x5
#define _CLC2GLS3_G4D3T_SIZE                                0x1
#define _CLC2GLS3_G4D3T_LENGTH                              0x1
#define _CLC2GLS3_G4D3T_MASK                                0x20
#define _CLC2GLS3_G4D4N_POSN                                0x6
#define _CLC2GLS3_G4D4N_POSITION                            0x6
#define _CLC2GLS3_G4D4N_SIZE                                0x1
#define _CLC2GLS3_G4D4N_LENGTH                              0x1
#define _CLC2GLS3_G4D4N_MASK                                0x40
#define _CLC2GLS3_G4D4T_POSN                                0x7
#define _CLC2GLS3_G4D4T_POSITION                            0x7
#define _CLC2GLS3_G4D4T_SIZE                                0x1
#define _CLC2GLS3_G4D4T_LENGTH                              0x1
#define _CLC2GLS3_G4D4T_MASK                                0x80
#define _CLC2GLS3_LC2G4D1N_POSN                             0x0
#define _CLC2GLS3_LC2G4D1N_POSITION                         0x0
#define _CLC2GLS3_LC2G4D1N_SIZE                             0x1
#define _CLC2GLS3_LC2G4D1N_LENGTH                           0x1
#define _CLC2GLS3_LC2G4D1N_MASK                             0x1
#define _CLC2GLS3_LC2G4D1T_POSN                             0x1
#define _CLC2GLS3_LC2G4D1T_POSITION                         0x1
#define _CLC2GLS3_LC2G4D1T_SIZE                             0x1
#define _CLC2GLS3_LC2G4D1T_LENGTH                           0x1
#define _CLC2GLS3_LC2G4D1T_MASK                             0x2
#define _CLC2GLS3_LC2G4D2N_POSN                             0x2
#define _CLC2GLS3_LC2G4D2N_POSITION                         0x2
#define _CLC2GLS3_LC2G4D2N_SIZE                             0x1
#define _CLC2GLS3_LC2G4D2N_LENGTH                           0x1
#define _CLC2GLS3_LC2G4D2N_MASK                             0x4
#define _CLC2GLS3_LC2G4D2T_POSN                             0x3
#define _CLC2GLS3_LC2G4D2T_POSITION                         0x3
#define _CLC2GLS3_LC2G4D2T_SIZE                             0x1
#define _CLC2GLS3_LC2G4D2T_LENGTH                           0x1
#define _CLC2GLS3_LC2G4D2T_MASK                             0x8
#define _CLC2GLS3_LC2G4D3N_POSN                             0x4
#define _CLC2GLS3_LC2G4D3N_POSITION                         0x4
#define _CLC2GLS3_LC2G4D3N_SIZE                             0x1
#define _CLC2GLS3_LC2G4D3N_LENGTH                           0x1
#define _CLC2GLS3_LC2G4D3N_MASK                             0x10
#define _CLC2GLS3_LC2G4D3T_POSN                             0x5
#define _CLC2GLS3_LC2G4D3T_POSITION                         0x5
#define _CLC2GLS3_LC2G4D3T_SIZE                             0x1
#define _CLC2GLS3_LC2G4D3T_LENGTH                           0x1
#define _CLC2GLS3_LC2G4D3T_MASK                             0x20
#define _CLC2GLS3_LC2G4D4N_POSN                             0x6
#define _CLC2GLS3_LC2G4D4N_POSITION                         0x6
#define _CLC2GLS3_LC2G4D4N_SIZE                             0x1
#define _CLC2GLS3_LC2G4D4N_LENGTH                           0x1
#define _CLC2GLS3_LC2G4D4N_MASK                             0x40
#define _CLC2GLS3_LC2G4D4T_POSN                             0x7
#define _CLC2GLS3_LC2G4D4T_POSITION                         0x7
#define _CLC2GLS3_LC2G4D4T_SIZE                             0x1
#define _CLC2GLS3_LC2G4D4T_LENGTH                           0x1
#define _CLC2GLS3_LC2G4D4T_MASK                             0x80

// Register: CLC1CON
#define CLC1CON CLC1CON
extern volatile unsigned char           CLC1CON             __at(0x3C74);
#ifndef _LIB_BUILD
asm("CLC1CON equ 03C74h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :3;
        unsigned INTN                   :1;
        unsigned INTP                   :1;
        unsigned OUT                    :1;
        unsigned OE                     :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
    };
    struct {
        unsigned LC1MODE                :3;
        unsigned LC1INTN                :1;
        unsigned LC1INTP                :1;
        unsigned LC1OUT                 :1;
        unsigned LC1OE                  :1;
        unsigned LC1EN                  :1;
    };
    struct {
        unsigned LC1MODE0               :1;
        unsigned LC1MODE1               :1;
        unsigned LC1MODE2               :1;
    };
} CLC1CONbits_t;
extern volatile CLC1CONbits_t CLC1CONbits __at(0x3C74);
// bitfield macros
#define _CLC1CON_MODE_POSN                                  0x0
#define _CLC1CON_MODE_POSITION                              0x0
#define _CLC1CON_MODE_SIZE                                  0x3
#define _CLC1CON_MODE_LENGTH                                0x3
#define _CLC1CON_MODE_MASK                                  0x7
#define _CLC1CON_INTN_POSN                                  0x3
#define _CLC1CON_INTN_POSITION                              0x3
#define _CLC1CON_INTN_SIZE                                  0x1
#define _CLC1CON_INTN_LENGTH                                0x1
#define _CLC1CON_INTN_MASK                                  0x8
#define _CLC1CON_INTP_POSN                                  0x4
#define _CLC1CON_INTP_POSITION                              0x4
#define _CLC1CON_INTP_SIZE                                  0x1
#define _CLC1CON_INTP_LENGTH                                0x1
#define _CLC1CON_INTP_MASK                                  0x10
#define _CLC1CON_OUT_POSN                                   0x5
#define _CLC1CON_OUT_POSITION                               0x5
#define _CLC1CON_OUT_SIZE                                   0x1
#define _CLC1CON_OUT_LENGTH                                 0x1
#define _CLC1CON_OUT_MASK                                   0x20
#define _CLC1CON_OE_POSN                                    0x6
#define _CLC1CON_OE_POSITION                                0x6
#define _CLC1CON_OE_SIZE                                    0x1
#define _CLC1CON_OE_LENGTH                                  0x1
#define _CLC1CON_OE_MASK                                    0x40
#define _CLC1CON_EN_POSN                                    0x7
#define _CLC1CON_EN_POSITION                                0x7
#define _CLC1CON_EN_SIZE                                    0x1
#define _CLC1CON_EN_LENGTH                                  0x1
#define _CLC1CON_EN_MASK                                    0x80
#define _CLC1CON_MODE0_POSN                                 0x0
#define _CLC1CON_MODE0_POSITION                             0x0
#define _CLC1CON_MODE0_SIZE                                 0x1
#define _CLC1CON_MODE0_LENGTH                               0x1
#define _CLC1CON_MODE0_MASK                                 0x1
#define _CLC1CON_MODE1_POSN                                 0x1
#define _CLC1CON_MODE1_POSITION                             0x1
#define _CLC1CON_MODE1_SIZE                                 0x1
#define _CLC1CON_MODE1_LENGTH                               0x1
#define _CLC1CON_MODE1_MASK                                 0x2
#define _CLC1CON_MODE2_POSN                                 0x2
#define _CLC1CON_MODE2_POSITION                             0x2
#define _CLC1CON_MODE2_SIZE                                 0x1
#define _CLC1CON_MODE2_LENGTH                               0x1
#define _CLC1CON_MODE2_MASK                                 0x4
#define _CLC1CON_LC1MODE_POSN                               0x0
#define _CLC1CON_LC1MODE_POSITION                           0x0
#define _CLC1CON_LC1MODE_SIZE                               0x3
#define _CLC1CON_LC1MODE_LENGTH                             0x3
#define _CLC1CON_LC1MODE_MASK                               0x7
#define _CLC1CON_LC1INTN_POSN                               0x3
#define _CLC1CON_LC1INTN_POSITION                           0x3
#define _CLC1CON_LC1INTN_SIZE                               0x1
#define _CLC1CON_LC1INTN_LENGTH                             0x1
#define _CLC1CON_LC1INTN_MASK                               0x8
#define _CLC1CON_LC1INTP_POSN                               0x4
#define _CLC1CON_LC1INTP_POSITION                           0x4
#define _CLC1CON_LC1INTP_SIZE                               0x1
#define _CLC1CON_LC1INTP_LENGTH                             0x1
#define _CLC1CON_LC1INTP_MASK                               0x10
#define _CLC1CON_LC1OUT_POSN                                0x5
#define _CLC1CON_LC1OUT_POSITION                            0x5
#define _CLC1CON_LC1OUT_SIZE                                0x1
#define _CLC1CON_LC1OUT_LENGTH                              0x1
#define _CLC1CON_LC1OUT_MASK                                0x20
#define _CLC1CON_LC1OE_POSN                                 0x6
#define _CLC1CON_LC1OE_POSITION                             0x6
#define _CLC1CON_LC1OE_SIZE                                 0x1
#define _CLC1CON_LC1OE_LENGTH                               0x1
#define _CLC1CON_LC1OE_MASK                                 0x40
#define _CLC1CON_LC1EN_POSN                                 0x7
#define _CLC1CON_LC1EN_POSITION                             0x7
#define _CLC1CON_LC1EN_SIZE                                 0x1
#define _CLC1CON_LC1EN_LENGTH                               0x1
#define _CLC1CON_LC1EN_MASK                                 0x80
#define _CLC1CON_LC1MODE0_POSN                              0x0
#define _CLC1CON_LC1MODE0_POSITION                          0x0
#define _CLC1CON_LC1MODE0_SIZE                              0x1
#define _CLC1CON_LC1MODE0_LENGTH                            0x1
#define _CLC1CON_LC1MODE0_MASK                              0x1
#define _CLC1CON_LC1MODE1_POSN                              0x1
#define _CLC1CON_LC1MODE1_POSITION                          0x1
#define _CLC1CON_LC1MODE1_SIZE                              0x1
#define _CLC1CON_LC1MODE1_LENGTH                            0x1
#define _CLC1CON_LC1MODE1_MASK                              0x2
#define _CLC1CON_LC1MODE2_POSN                              0x2
#define _CLC1CON_LC1MODE2_POSITION                          0x2
#define _CLC1CON_LC1MODE2_SIZE                              0x1
#define _CLC1CON_LC1MODE2_LENGTH                            0x1
#define _CLC1CON_LC1MODE2_MASK                              0x4

// Register: CLC1POL
#define CLC1POL CLC1POL
extern volatile unsigned char           CLC1POL             __at(0x3C75);
#ifndef _LIB_BUILD
asm("CLC1POL equ 03C75h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned G1POL                  :1;
        unsigned G2POL                  :1;
        unsigned G3POL                  :1;
        unsigned G4POL                  :1;
        unsigned                        :3;
        unsigned POL                    :1;
    };
    struct {
        unsigned LC1G1POL               :1;
        unsigned LC1G2POL               :1;
        unsigned LC1G3POL               :1;
        unsigned LC1G4POL               :1;
        unsigned                        :3;
        unsigned LC1POL                 :1;
    };
} CLC1POLbits_t;
extern volatile CLC1POLbits_t CLC1POLbits __at(0x3C75);
// bitfield macros
#define _CLC1POL_G1POL_POSN                                 0x0
#define _CLC1POL_G1POL_POSITION                             0x0
#define _CLC1POL_G1POL_SIZE                                 0x1
#define _CLC1POL_G1POL_LENGTH                               0x1
#define _CLC1POL_G1POL_MASK                                 0x1
#define _CLC1POL_G2POL_POSN                                 0x1
#define _CLC1POL_G2POL_POSITION                             0x1
#define _CLC1POL_G2POL_SIZE                                 0x1
#define _CLC1POL_G2POL_LENGTH                               0x1
#define _CLC1POL_G2POL_MASK                                 0x2
#define _CLC1POL_G3POL_POSN                                 0x2
#define _CLC1POL_G3POL_POSITION                             0x2
#define _CLC1POL_G3POL_SIZE                                 0x1
#define _CLC1POL_G3POL_LENGTH                               0x1
#define _CLC1POL_G3POL_MASK                                 0x4
#define _CLC1POL_G4POL_POSN                                 0x3
#define _CLC1POL_G4POL_POSITION                             0x3
#define _CLC1POL_G4POL_SIZE                                 0x1
#define _CLC1POL_G4POL_LENGTH                               0x1
#define _CLC1POL_G4POL_MASK                                 0x8
#define _CLC1POL_POL_POSN                                   0x7
#define _CLC1POL_POL_POSITION                               0x7
#define _CLC1POL_POL_SIZE                                   0x1
#define _CLC1POL_POL_LENGTH                                 0x1
#define _CLC1POL_POL_MASK                                   0x80
#define _CLC1POL_LC1G1POL_POSN                              0x0
#define _CLC1POL_LC1G1POL_POSITION                          0x0
#define _CLC1POL_LC1G1POL_SIZE                              0x1
#define _CLC1POL_LC1G1POL_LENGTH                            0x1
#define _CLC1POL_LC1G1POL_MASK                              0x1
#define _CLC1POL_LC1G2POL_POSN                              0x1
#define _CLC1POL_LC1G2POL_POSITION                          0x1
#define _CLC1POL_LC1G2POL_SIZE                              0x1
#define _CLC1POL_LC1G2POL_LENGTH                            0x1
#define _CLC1POL_LC1G2POL_MASK                              0x2
#define _CLC1POL_LC1G3POL_POSN                              0x2
#define _CLC1POL_LC1G3POL_POSITION                          0x2
#define _CLC1POL_LC1G3POL_SIZE                              0x1
#define _CLC1POL_LC1G3POL_LENGTH                            0x1
#define _CLC1POL_LC1G3POL_MASK                              0x4
#define _CLC1POL_LC1G4POL_POSN                              0x3
#define _CLC1POL_LC1G4POL_POSITION                          0x3
#define _CLC1POL_LC1G4POL_SIZE                              0x1
#define _CLC1POL_LC1G4POL_LENGTH                            0x1
#define _CLC1POL_LC1G4POL_MASK                              0x8
#define _CLC1POL_LC1POL_POSN                                0x7
#define _CLC1POL_LC1POL_POSITION                            0x7
#define _CLC1POL_LC1POL_SIZE                                0x1
#define _CLC1POL_LC1POL_LENGTH                              0x1
#define _CLC1POL_LC1POL_MASK                                0x80

// Register: CLC1SEL0
#define CLC1SEL0 CLC1SEL0
extern volatile unsigned char           CLC1SEL0            __at(0x3C76);
#ifndef _LIB_BUILD
asm("CLC1SEL0 equ 03C76h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned D1S                    :8;
    };
    struct {
        unsigned LC1D1S                 :8;
    };
    struct {
        unsigned D1S0                   :1;
        unsigned D1S1                   :1;
        unsigned D1S2                   :1;
        unsigned D1S3                   :1;
        unsigned D1S4                   :1;
        unsigned D1S5                   :1;
        unsigned D1S6                   :1;
        unsigned D1S7                   :1;
    };
    struct {
        unsigned LC1D1S0                :1;
        unsigned LC1D1S1                :1;
        unsigned LC1D1S2                :1;
        unsigned LC1D1S3                :1;
        unsigned LC1D1S4                :1;
        unsigned LC1D1S5                :1;
        unsigned LC1D1S6                :1;
        unsigned LC1D1S7                :1;
    };
} CLC1SEL0bits_t;
extern volatile CLC1SEL0bits_t CLC1SEL0bits __at(0x3C76);
// bitfield macros
#define _CLC1SEL0_D1S_POSN                                  0x0
#define _CLC1SEL0_D1S_POSITION                              0x0
#define _CLC1SEL0_D1S_SIZE                                  0x8
#define _CLC1SEL0_D1S_LENGTH                                0x8
#define _CLC1SEL0_D1S_MASK                                  0xFF
#define _CLC1SEL0_LC1D1S_POSN                               0x0
#define _CLC1SEL0_LC1D1S_POSITION                           0x0
#define _CLC1SEL0_LC1D1S_SIZE                               0x8
#define _CLC1SEL0_LC1D1S_LENGTH                             0x8
#define _CLC1SEL0_LC1D1S_MASK                               0xFF
#define _CLC1SEL0_D1S0_POSN                                 0x0
#define _CLC1SEL0_D1S0_POSITION                             0x0
#define _CLC1SEL0_D1S0_SIZE                                 0x1
#define _CLC1SEL0_D1S0_LENGTH                               0x1
#define _CLC1SEL0_D1S0_MASK                                 0x1
#define _CLC1SEL0_D1S1_POSN                                 0x1
#define _CLC1SEL0_D1S1_POSITION                             0x1
#define _CLC1SEL0_D1S1_SIZE                                 0x1
#define _CLC1SEL0_D1S1_LENGTH                               0x1
#define _CLC1SEL0_D1S1_MASK                                 0x2
#define _CLC1SEL0_D1S2_POSN                                 0x2
#define _CLC1SEL0_D1S2_POSITION                             0x2
#define _CLC1SEL0_D1S2_SIZE                                 0x1
#define _CLC1SEL0_D1S2_LENGTH                               0x1
#define _CLC1SEL0_D1S2_MASK                                 0x4
#define _CLC1SEL0_D1S3_POSN                                 0x3
#define _CLC1SEL0_D1S3_POSITION                             0x3
#define _CLC1SEL0_D1S3_SIZE                                 0x1
#define _CLC1SEL0_D1S3_LENGTH                               0x1
#define _CLC1SEL0_D1S3_MASK                                 0x8
#define _CLC1SEL0_D1S4_POSN                                 0x4
#define _CLC1SEL0_D1S4_POSITION                             0x4
#define _CLC1SEL0_D1S4_SIZE                                 0x1
#define _CLC1SEL0_D1S4_LENGTH                               0x1
#define _CLC1SEL0_D1S4_MASK                                 0x10
#define _CLC1SEL0_D1S5_POSN                                 0x5
#define _CLC1SEL0_D1S5_POSITION                             0x5
#define _CLC1SEL0_D1S5_SIZE                                 0x1
#define _CLC1SEL0_D1S5_LENGTH                               0x1
#define _CLC1SEL0_D1S5_MASK                                 0x20
#define _CLC1SEL0_D1S6_POSN                                 0x6
#define _CLC1SEL0_D1S6_POSITION                             0x6
#define _CLC1SEL0_D1S6_SIZE                                 0x1
#define _CLC1SEL0_D1S6_LENGTH                               0x1
#define _CLC1SEL0_D1S6_MASK                                 0x40
#define _CLC1SEL0_D1S7_POSN                                 0x7
#define _CLC1SEL0_D1S7_POSITION                             0x7
#define _CLC1SEL0_D1S7_SIZE                                 0x1
#define _CLC1SEL0_D1S7_LENGTH                               0x1
#define _CLC1SEL0_D1S7_MASK                                 0x80
#define _CLC1SEL0_LC1D1S0_POSN                              0x0
#define _CLC1SEL0_LC1D1S0_POSITION                          0x0
#define _CLC1SEL0_LC1D1S0_SIZE                              0x1
#define _CLC1SEL0_LC1D1S0_LENGTH                            0x1
#define _CLC1SEL0_LC1D1S0_MASK                              0x1
#define _CLC1SEL0_LC1D1S1_POSN                              0x1
#define _CLC1SEL0_LC1D1S1_POSITION                          0x1
#define _CLC1SEL0_LC1D1S1_SIZE                              0x1
#define _CLC1SEL0_LC1D1S1_LENGTH                            0x1
#define _CLC1SEL0_LC1D1S1_MASK                              0x2
#define _CLC1SEL0_LC1D1S2_POSN                              0x2
#define _CLC1SEL0_LC1D1S2_POSITION                          0x2
#define _CLC1SEL0_LC1D1S2_SIZE                              0x1
#define _CLC1SEL0_LC1D1S2_LENGTH                            0x1
#define _CLC1SEL0_LC1D1S2_MASK                              0x4
#define _CLC1SEL0_LC1D1S3_POSN                              0x3
#define _CLC1SEL0_LC1D1S3_POSITION                          0x3
#define _CLC1SEL0_LC1D1S3_SIZE                              0x1
#define _CLC1SEL0_LC1D1S3_LENGTH                            0x1
#define _CLC1SEL0_LC1D1S3_MASK                              0x8
#define _CLC1SEL0_LC1D1S4_POSN                              0x4
#define _CLC1SEL0_LC1D1S4_POSITION                          0x4
#define _CLC1SEL0_LC1D1S4_SIZE                              0x1
#define _CLC1SEL0_LC1D1S4_LENGTH                            0x1
#define _CLC1SEL0_LC1D1S4_MASK                              0x10
#define _CLC1SEL0_LC1D1S5_POSN                              0x5
#define _CLC1SEL0_LC1D1S5_POSITION                          0x5
#define _CLC1SEL0_LC1D1S5_SIZE                              0x1
#define _CLC1SEL0_LC1D1S5_LENGTH                            0x1
#define _CLC1SEL0_LC1D1S5_MASK                              0x20
#define _CLC1SEL0_LC1D1S6_POSN                              0x6
#define _CLC1SEL0_LC1D1S6_POSITION                          0x6
#define _CLC1SEL0_LC1D1S6_SIZE                              0x1
#define _CLC1SEL0_LC1D1S6_LENGTH                            0x1
#define _CLC1SEL0_LC1D1S6_MASK                              0x40
#define _CLC1SEL0_LC1D1S7_POSN                              0x7
#define _CLC1SEL0_LC1D1S7_POSITION                          0x7
#define _CLC1SEL0_LC1D1S7_SIZE                              0x1
#define _CLC1SEL0_LC1D1S7_LENGTH                            0x1
#define _CLC1SEL0_LC1D1S7_MASK                              0x80

// Register: CLC1SEL1
#define CLC1SEL1 CLC1SEL1
extern volatile unsigned char           CLC1SEL1            __at(0x3C77);
#ifndef _LIB_BUILD
asm("CLC1SEL1 equ 03C77h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned D2S                    :8;
    };
    struct {
        unsigned LC1D2S                 :8;
    };
    struct {
        unsigned D2S0                   :1;
        unsigned D2S1                   :1;
        unsigned D2S2                   :1;
        unsigned D2S3                   :1;
        unsigned D2S4                   :1;
        unsigned D2S5                   :1;
        unsigned D2S6                   :1;
        unsigned D2S7                   :1;
    };
    struct {
        unsigned LC1D2S0                :1;
        unsigned LC1D2S1                :1;
        unsigned LC1D2S2                :1;
        unsigned LC1D2S3                :1;
        unsigned LC1D2S4                :1;
        unsigned LC1D2S5                :1;
        unsigned LC1D2S6                :1;
        unsigned LC1D2S7                :1;
    };
} CLC1SEL1bits_t;
extern volatile CLC1SEL1bits_t CLC1SEL1bits __at(0x3C77);
// bitfield macros
#define _CLC1SEL1_D2S_POSN                                  0x0
#define _CLC1SEL1_D2S_POSITION                              0x0
#define _CLC1SEL1_D2S_SIZE                                  0x8
#define _CLC1SEL1_D2S_LENGTH                                0x8
#define _CLC1SEL1_D2S_MASK                                  0xFF
#define _CLC1SEL1_LC1D2S_POSN                               0x0
#define _CLC1SEL1_LC1D2S_POSITION                           0x0
#define _CLC1SEL1_LC1D2S_SIZE                               0x8
#define _CLC1SEL1_LC1D2S_LENGTH                             0x8
#define _CLC1SEL1_LC1D2S_MASK                               0xFF
#define _CLC1SEL1_D2S0_POSN                                 0x0
#define _CLC1SEL1_D2S0_POSITION                             0x0
#define _CLC1SEL1_D2S0_SIZE                                 0x1
#define _CLC1SEL1_D2S0_LENGTH                               0x1
#define _CLC1SEL1_D2S0_MASK                                 0x1
#define _CLC1SEL1_D2S1_POSN                                 0x1
#define _CLC1SEL1_D2S1_POSITION                             0x1
#define _CLC1SEL1_D2S1_SIZE                                 0x1
#define _CLC1SEL1_D2S1_LENGTH                               0x1
#define _CLC1SEL1_D2S1_MASK                                 0x2
#define _CLC1SEL1_D2S2_POSN                                 0x2
#define _CLC1SEL1_D2S2_POSITION                             0x2
#define _CLC1SEL1_D2S2_SIZE                                 0x1
#define _CLC1SEL1_D2S2_LENGTH                               0x1
#define _CLC1SEL1_D2S2_MASK                                 0x4
#define _CLC1SEL1_D2S3_POSN                                 0x3
#define _CLC1SEL1_D2S3_POSITION                             0x3
#define _CLC1SEL1_D2S3_SIZE                                 0x1
#define _CLC1SEL1_D2S3_LENGTH                               0x1
#define _CLC1SEL1_D2S3_MASK                                 0x8
#define _CLC1SEL1_D2S4_POSN                                 0x4
#define _CLC1SEL1_D2S4_POSITION                             0x4
#define _CLC1SEL1_D2S4_SIZE                                 0x1
#define _CLC1SEL1_D2S4_LENGTH                               0x1
#define _CLC1SEL1_D2S4_MASK                                 0x10
#define _CLC1SEL1_D2S5_POSN                                 0x5
#define _CLC1SEL1_D2S5_POSITION                             0x5
#define _CLC1SEL1_D2S5_SIZE                                 0x1
#define _CLC1SEL1_D2S5_LENGTH                               0x1
#define _CLC1SEL1_D2S5_MASK                                 0x20
#define _CLC1SEL1_D2S6_POSN                                 0x6
#define _CLC1SEL1_D2S6_POSITION                             0x6
#define _CLC1SEL1_D2S6_SIZE                                 0x1
#define _CLC1SEL1_D2S6_LENGTH                               0x1
#define _CLC1SEL1_D2S6_MASK                                 0x40
#define _CLC1SEL1_D2S7_POSN                                 0x7
#define _CLC1SEL1_D2S7_POSITION                             0x7
#define _CLC1SEL1_D2S7_SIZE                                 0x1
#define _CLC1SEL1_D2S7_LENGTH                               0x1
#define _CLC1SEL1_D2S7_MASK                                 0x80
#define _CLC1SEL1_LC1D2S0_POSN                              0x0
#define _CLC1SEL1_LC1D2S0_POSITION                          0x0
#define _CLC1SEL1_LC1D2S0_SIZE                              0x1
#define _CLC1SEL1_LC1D2S0_LENGTH                            0x1
#define _CLC1SEL1_LC1D2S0_MASK                              0x1
#define _CLC1SEL1_LC1D2S1_POSN                              0x1
#define _CLC1SEL1_LC1D2S1_POSITION                          0x1
#define _CLC1SEL1_LC1D2S1_SIZE                              0x1
#define _CLC1SEL1_LC1D2S1_LENGTH                            0x1
#define _CLC1SEL1_LC1D2S1_MASK                              0x2
#define _CLC1SEL1_LC1D2S2_POSN                              0x2
#define _CLC1SEL1_LC1D2S2_POSITION                          0x2
#define _CLC1SEL1_LC1D2S2_SIZE                              0x1
#define _CLC1SEL1_LC1D2S2_LENGTH                            0x1
#define _CLC1SEL1_LC1D2S2_MASK                              0x4
#define _CLC1SEL1_LC1D2S3_POSN                              0x3
#define _CLC1SEL1_LC1D2S3_POSITION                          0x3
#define _CLC1SEL1_LC1D2S3_SIZE                              0x1
#define _CLC1SEL1_LC1D2S3_LENGTH                            0x1
#define _CLC1SEL1_LC1D2S3_MASK                              0x8
#define _CLC1SEL1_LC1D2S4_POSN                              0x4
#define _CLC1SEL1_LC1D2S4_POSITION                          0x4
#define _CLC1SEL1_LC1D2S4_SIZE                              0x1
#define _CLC1SEL1_LC1D2S4_LENGTH                            0x1
#define _CLC1SEL1_LC1D2S4_MASK                              0x10
#define _CLC1SEL1_LC1D2S5_POSN                              0x5
#define _CLC1SEL1_LC1D2S5_POSITION                          0x5
#define _CLC1SEL1_LC1D2S5_SIZE                              0x1
#define _CLC1SEL1_LC1D2S5_LENGTH                            0x1
#define _CLC1SEL1_LC1D2S5_MASK                              0x20
#define _CLC1SEL1_LC1D2S6_POSN                              0x6
#define _CLC1SEL1_LC1D2S6_POSITION                          0x6
#define _CLC1SEL1_LC1D2S6_SIZE                              0x1
#define _CLC1SEL1_LC1D2S6_LENGTH                            0x1
#define _CLC1SEL1_LC1D2S6_MASK                              0x40
#define _CLC1SEL1_LC1D2S7_POSN                              0x7
#define _CLC1SEL1_LC1D2S7_POSITION                          0x7
#define _CLC1SEL1_LC1D2S7_SIZE                              0x1
#define _CLC1SEL1_LC1D2S7_LENGTH                            0x1
#define _CLC1SEL1_LC1D2S7_MASK                              0x80

// Register: CLC1SEL2
#define CLC1SEL2 CLC1SEL2
extern volatile unsigned char           CLC1SEL2            __at(0x3C78);
#ifndef _LIB_BUILD
asm("CLC1SEL2 equ 03C78h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned D3S                    :8;
    };
    struct {
        unsigned LC1D3S                 :8;
    };
    struct {
        unsigned D3S0                   :1;
        unsigned D3S1                   :1;
        unsigned D3S2                   :1;
        unsigned D3S3                   :1;
        unsigned D3S4                   :1;
        unsigned D3S5                   :1;
        unsigned D3S6                   :1;
        unsigned D3S7                   :1;
    };
    struct {
        unsigned LC1D3S0                :1;
        unsigned LC1D3S1                :1;
        unsigned LC1D3S2                :1;
        unsigned LC1D3S3                :1;
        unsigned LC1D3S4                :1;
        unsigned LC1D3S5                :1;
        unsigned LC1D3S6                :1;
        unsigned LC1D3S7                :1;
    };
} CLC1SEL2bits_t;
extern volatile CLC1SEL2bits_t CLC1SEL2bits __at(0x3C78);
// bitfield macros
#define _CLC1SEL2_D3S_POSN                                  0x0
#define _CLC1SEL2_D3S_POSITION                              0x0
#define _CLC1SEL2_D3S_SIZE                                  0x8
#define _CLC1SEL2_D3S_LENGTH                                0x8
#define _CLC1SEL2_D3S_MASK                                  0xFF
#define _CLC1SEL2_LC1D3S_POSN                               0x0
#define _CLC1SEL2_LC1D3S_POSITION                           0x0
#define _CLC1SEL2_LC1D3S_SIZE                               0x8
#define _CLC1SEL2_LC1D3S_LENGTH                             0x8
#define _CLC1SEL2_LC1D3S_MASK                               0xFF
#define _CLC1SEL2_D3S0_POSN                                 0x0
#define _CLC1SEL2_D3S0_POSITION                             0x0
#define _CLC1SEL2_D3S0_SIZE                                 0x1
#define _CLC1SEL2_D3S0_LENGTH                               0x1
#define _CLC1SEL2_D3S0_MASK                                 0x1
#define _CLC1SEL2_D3S1_POSN                                 0x1
#define _CLC1SEL2_D3S1_POSITION                             0x1
#define _CLC1SEL2_D3S1_SIZE                                 0x1
#define _CLC1SEL2_D3S1_LENGTH                               0x1
#define _CLC1SEL2_D3S1_MASK                                 0x2
#define _CLC1SEL2_D3S2_POSN                                 0x2
#define _CLC1SEL2_D3S2_POSITION                             0x2
#define _CLC1SEL2_D3S2_SIZE                                 0x1
#define _CLC1SEL2_D3S2_LENGTH                               0x1
#define _CLC1SEL2_D3S2_MASK                                 0x4
#define _CLC1SEL2_D3S3_POSN                                 0x3
#define _CLC1SEL2_D3S3_POSITION                             0x3
#define _CLC1SEL2_D3S3_SIZE                                 0x1
#define _CLC1SEL2_D3S3_LENGTH                               0x1
#define _CLC1SEL2_D3S3_MASK                                 0x8
#define _CLC1SEL2_D3S4_POSN                                 0x4
#define _CLC1SEL2_D3S4_POSITION                             0x4
#define _CLC1SEL2_D3S4_SIZE                                 0x1
#define _CLC1SEL2_D3S4_LENGTH                               0x1
#define _CLC1SEL2_D3S4_MASK                                 0x10
#define _CLC1SEL2_D3S5_POSN                                 0x5
#define _CLC1SEL2_D3S5_POSITION                             0x5
#define _CLC1SEL2_D3S5_SIZE                                 0x1
#define _CLC1SEL2_D3S5_LENGTH                               0x1
#define _CLC1SEL2_D3S5_MASK                                 0x20
#define _CLC1SEL2_D3S6_POSN                                 0x6
#define _CLC1SEL2_D3S6_POSITION                             0x6
#define _CLC1SEL2_D3S6_SIZE                                 0x1
#define _CLC1SEL2_D3S6_LENGTH                               0x1
#define _CLC1SEL2_D3S6_MASK                                 0x40
#define _CLC1SEL2_D3S7_POSN                                 0x7
#define _CLC1SEL2_D3S7_POSITION                             0x7
#define _CLC1SEL2_D3S7_SIZE                                 0x1
#define _CLC1SEL2_D3S7_LENGTH                               0x1
#define _CLC1SEL2_D3S7_MASK                                 0x80
#define _CLC1SEL2_LC1D3S0_POSN                              0x0
#define _CLC1SEL2_LC1D3S0_POSITION                          0x0
#define _CLC1SEL2_LC1D3S0_SIZE                              0x1
#define _CLC1SEL2_LC1D3S0_LENGTH                            0x1
#define _CLC1SEL2_LC1D3S0_MASK                              0x1
#define _CLC1SEL2_LC1D3S1_POSN                              0x1
#define _CLC1SEL2_LC1D3S1_POSITION                          0x1
#define _CLC1SEL2_LC1D3S1_SIZE                              0x1
#define _CLC1SEL2_LC1D3S1_LENGTH                            0x1
#define _CLC1SEL2_LC1D3S1_MASK                              0x2
#define _CLC1SEL2_LC1D3S2_POSN                              0x2
#define _CLC1SEL2_LC1D3S2_POSITION                          0x2
#define _CLC1SEL2_LC1D3S2_SIZE                              0x1
#define _CLC1SEL2_LC1D3S2_LENGTH                            0x1
#define _CLC1SEL2_LC1D3S2_MASK                              0x4
#define _CLC1SEL2_LC1D3S3_POSN                              0x3
#define _CLC1SEL2_LC1D3S3_POSITION                          0x3
#define _CLC1SEL2_LC1D3S3_SIZE                              0x1
#define _CLC1SEL2_LC1D3S3_LENGTH                            0x1
#define _CLC1SEL2_LC1D3S3_MASK                              0x8
#define _CLC1SEL2_LC1D3S4_POSN                              0x4
#define _CLC1SEL2_LC1D3S4_POSITION                          0x4
#define _CLC1SEL2_LC1D3S4_SIZE                              0x1
#define _CLC1SEL2_LC1D3S4_LENGTH                            0x1
#define _CLC1SEL2_LC1D3S4_MASK                              0x10
#define _CLC1SEL2_LC1D3S5_POSN                              0x5
#define _CLC1SEL2_LC1D3S5_POSITION                          0x5
#define _CLC1SEL2_LC1D3S5_SIZE                              0x1
#define _CLC1SEL2_LC1D3S5_LENGTH                            0x1
#define _CLC1SEL2_LC1D3S5_MASK                              0x20
#define _CLC1SEL2_LC1D3S6_POSN                              0x6
#define _CLC1SEL2_LC1D3S6_POSITION                          0x6
#define _CLC1SEL2_LC1D3S6_SIZE                              0x1
#define _CLC1SEL2_LC1D3S6_LENGTH                            0x1
#define _CLC1SEL2_LC1D3S6_MASK                              0x40
#define _CLC1SEL2_LC1D3S7_POSN                              0x7
#define _CLC1SEL2_LC1D3S7_POSITION                          0x7
#define _CLC1SEL2_LC1D3S7_SIZE                              0x1
#define _CLC1SEL2_LC1D3S7_LENGTH                            0x1
#define _CLC1SEL2_LC1D3S7_MASK                              0x80

// Register: CLC1SEL3
#define CLC1SEL3 CLC1SEL3
extern volatile unsigned char           CLC1SEL3            __at(0x3C79);
#ifndef _LIB_BUILD
asm("CLC1SEL3 equ 03C79h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned D4S                    :8;
    };
    struct {
        unsigned LC1D4S                 :8;
    };
    struct {
        unsigned D4S0                   :1;
        unsigned D4S1                   :1;
        unsigned D4S2                   :1;
        unsigned D4S3                   :1;
        unsigned D4S4                   :1;
        unsigned D4S5                   :1;
        unsigned D4S6                   :1;
        unsigned D4S7                   :1;
    };
    struct {
        unsigned LC1D4S0                :1;
        unsigned LC1D4S1                :1;
        unsigned LC1D4S2                :1;
        unsigned LC1D4S3                :1;
        unsigned LC1D4S4                :1;
        unsigned LC1D4S5                :1;
        unsigned LC1D4S6                :1;
        unsigned LC1D4S7                :1;
    };
} CLC1SEL3bits_t;
extern volatile CLC1SEL3bits_t CLC1SEL3bits __at(0x3C79);
// bitfield macros
#define _CLC1SEL3_D4S_POSN                                  0x0
#define _CLC1SEL3_D4S_POSITION                              0x0
#define _CLC1SEL3_D4S_SIZE                                  0x8
#define _CLC1SEL3_D4S_LENGTH                                0x8
#define _CLC1SEL3_D4S_MASK                                  0xFF
#define _CLC1SEL3_LC1D4S_POSN                               0x0
#define _CLC1SEL3_LC1D4S_POSITION                           0x0
#define _CLC1SEL3_LC1D4S_SIZE                               0x8
#define _CLC1SEL3_LC1D4S_LENGTH                             0x8
#define _CLC1SEL3_LC1D4S_MASK                               0xFF
#define _CLC1SEL3_D4S0_POSN                                 0x0
#define _CLC1SEL3_D4S0_POSITION                             0x0
#define _CLC1SEL3_D4S0_SIZE                                 0x1
#define _CLC1SEL3_D4S0_LENGTH                               0x1
#define _CLC1SEL3_D4S0_MASK                                 0x1
#define _CLC1SEL3_D4S1_POSN                                 0x1
#define _CLC1SEL3_D4S1_POSITION                             0x1
#define _CLC1SEL3_D4S1_SIZE                                 0x1
#define _CLC1SEL3_D4S1_LENGTH                               0x1
#define _CLC1SEL3_D4S1_MASK                                 0x2
#define _CLC1SEL3_D4S2_POSN                                 0x2
#define _CLC1SEL3_D4S2_POSITION                             0x2
#define _CLC1SEL3_D4S2_SIZE                                 0x1
#define _CLC1SEL3_D4S2_LENGTH                               0x1
#define _CLC1SEL3_D4S2_MASK                                 0x4
#define _CLC1SEL3_D4S3_POSN                                 0x3
#define _CLC1SEL3_D4S3_POSITION                             0x3
#define _CLC1SEL3_D4S3_SIZE                                 0x1
#define _CLC1SEL3_D4S3_LENGTH                               0x1
#define _CLC1SEL3_D4S3_MASK                                 0x8
#define _CLC1SEL3_D4S4_POSN                                 0x4
#define _CLC1SEL3_D4S4_POSITION                             0x4
#define _CLC1SEL3_D4S4_SIZE                                 0x1
#define _CLC1SEL3_D4S4_LENGTH                               0x1
#define _CLC1SEL3_D4S4_MASK                                 0x10
#define _CLC1SEL3_D4S5_POSN                                 0x5
#define _CLC1SEL3_D4S5_POSITION                             0x5
#define _CLC1SEL3_D4S5_SIZE                                 0x1
#define _CLC1SEL3_D4S5_LENGTH                               0x1
#define _CLC1SEL3_D4S5_MASK                                 0x20
#define _CLC1SEL3_D4S6_POSN                                 0x6
#define _CLC1SEL3_D4S6_POSITION                             0x6
#define _CLC1SEL3_D4S6_SIZE                                 0x1
#define _CLC1SEL3_D4S6_LENGTH                               0x1
#define _CLC1SEL3_D4S6_MASK                                 0x40
#define _CLC1SEL3_D4S7_POSN                                 0x7
#define _CLC1SEL3_D4S7_POSITION                             0x7
#define _CLC1SEL3_D4S7_SIZE                                 0x1
#define _CLC1SEL3_D4S7_LENGTH                               0x1
#define _CLC1SEL3_D4S7_MASK                                 0x80
#define _CLC1SEL3_LC1D4S0_POSN                              0x0
#define _CLC1SEL3_LC1D4S0_POSITION                          0x0
#define _CLC1SEL3_LC1D4S0_SIZE                              0x1
#define _CLC1SEL3_LC1D4S0_LENGTH                            0x1
#define _CLC1SEL3_LC1D4S0_MASK                              0x1
#define _CLC1SEL3_LC1D4S1_POSN                              0x1
#define _CLC1SEL3_LC1D4S1_POSITION                          0x1
#define _CLC1SEL3_LC1D4S1_SIZE                              0x1
#define _CLC1SEL3_LC1D4S1_LENGTH                            0x1
#define _CLC1SEL3_LC1D4S1_MASK                              0x2
#define _CLC1SEL3_LC1D4S2_POSN                              0x2
#define _CLC1SEL3_LC1D4S2_POSITION                          0x2
#define _CLC1SEL3_LC1D4S2_SIZE                              0x1
#define _CLC1SEL3_LC1D4S2_LENGTH                            0x1
#define _CLC1SEL3_LC1D4S2_MASK                              0x4
#define _CLC1SEL3_LC1D4S3_POSN                              0x3
#define _CLC1SEL3_LC1D4S3_POSITION                          0x3
#define _CLC1SEL3_LC1D4S3_SIZE                              0x1
#define _CLC1SEL3_LC1D4S3_LENGTH                            0x1
#define _CLC1SEL3_LC1D4S3_MASK                              0x8
#define _CLC1SEL3_LC1D4S4_POSN                              0x4
#define _CLC1SEL3_LC1D4S4_POSITION                          0x4
#define _CLC1SEL3_LC1D4S4_SIZE                              0x1
#define _CLC1SEL3_LC1D4S4_LENGTH                            0x1
#define _CLC1SEL3_LC1D4S4_MASK                              0x10
#define _CLC1SEL3_LC1D4S5_POSN                              0x5
#define _CLC1SEL3_LC1D4S5_POSITION                          0x5
#define _CLC1SEL3_LC1D4S5_SIZE                              0x1
#define _CLC1SEL3_LC1D4S5_LENGTH                            0x1
#define _CLC1SEL3_LC1D4S5_MASK                              0x20
#define _CLC1SEL3_LC1D4S6_POSN                              0x6
#define _CLC1SEL3_LC1D4S6_POSITION                          0x6
#define _CLC1SEL3_LC1D4S6_SIZE                              0x1
#define _CLC1SEL3_LC1D4S6_LENGTH                            0x1
#define _CLC1SEL3_LC1D4S6_MASK                              0x40
#define _CLC1SEL3_LC1D4S7_POSN                              0x7
#define _CLC1SEL3_LC1D4S7_POSITION                          0x7
#define _CLC1SEL3_LC1D4S7_SIZE                              0x1
#define _CLC1SEL3_LC1D4S7_LENGTH                            0x1
#define _CLC1SEL3_LC1D4S7_MASK                              0x80

// Register: CLC1GLS0
#define CLC1GLS0 CLC1GLS0
extern volatile unsigned char           CLC1GLS0            __at(0x3C7A);
#ifndef _LIB_BUILD
asm("CLC1GLS0 equ 03C7Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned G1D1N                  :1;
        unsigned G1D1T                  :1;
        unsigned G1D2N                  :1;
        unsigned G1D2T                  :1;
        unsigned G1D3N                  :1;
        unsigned G1D3T                  :1;
        unsigned G1D4N                  :1;
        unsigned G1D4T                  :1;
    };
    struct {
        unsigned LC1G1D1N               :1;
        unsigned LC1G1D1T               :1;
        unsigned LC1G1D2N               :1;
        unsigned LC1G1D2T               :1;
        unsigned LC1G1D3N               :1;
        unsigned LC1G1D3T               :1;
        unsigned LC1G1D4N               :1;
        unsigned LC1G1D4T               :1;
    };
} CLC1GLS0bits_t;
extern volatile CLC1GLS0bits_t CLC1GLS0bits __at(0x3C7A);
// bitfield macros
#define _CLC1GLS0_G1D1N_POSN                                0x0
#define _CLC1GLS0_G1D1N_POSITION                            0x0
#define _CLC1GLS0_G1D1N_SIZE                                0x1
#define _CLC1GLS0_G1D1N_LENGTH                              0x1
#define _CLC1GLS0_G1D1N_MASK                                0x1
#define _CLC1GLS0_G1D1T_POSN                                0x1
#define _CLC1GLS0_G1D1T_POSITION                            0x1
#define _CLC1GLS0_G1D1T_SIZE                                0x1
#define _CLC1GLS0_G1D1T_LENGTH                              0x1
#define _CLC1GLS0_G1D1T_MASK                                0x2
#define _CLC1GLS0_G1D2N_POSN                                0x2
#define _CLC1GLS0_G1D2N_POSITION                            0x2
#define _CLC1GLS0_G1D2N_SIZE                                0x1
#define _CLC1GLS0_G1D2N_LENGTH                              0x1
#define _CLC1GLS0_G1D2N_MASK                                0x4
#define _CLC1GLS0_G1D2T_POSN                                0x3
#define _CLC1GLS0_G1D2T_POSITION                            0x3
#define _CLC1GLS0_G1D2T_SIZE                                0x1
#define _CLC1GLS0_G1D2T_LENGTH                              0x1
#define _CLC1GLS0_G1D2T_MASK                                0x8
#define _CLC1GLS0_G1D3N_POSN                                0x4
#define _CLC1GLS0_G1D3N_POSITION                            0x4
#define _CLC1GLS0_G1D3N_SIZE                                0x1
#define _CLC1GLS0_G1D3N_LENGTH                              0x1
#define _CLC1GLS0_G1D3N_MASK                                0x10
#define _CLC1GLS0_G1D3T_POSN                                0x5
#define _CLC1GLS0_G1D3T_POSITION                            0x5
#define _CLC1GLS0_G1D3T_SIZE                                0x1
#define _CLC1GLS0_G1D3T_LENGTH                              0x1
#define _CLC1GLS0_G1D3T_MASK                                0x20
#define _CLC1GLS0_G1D4N_POSN                                0x6
#define _CLC1GLS0_G1D4N_POSITION                            0x6
#define _CLC1GLS0_G1D4N_SIZE                                0x1
#define _CLC1GLS0_G1D4N_LENGTH                              0x1
#define _CLC1GLS0_G1D4N_MASK                                0x40
#define _CLC1GLS0_G1D4T_POSN                                0x7
#define _CLC1GLS0_G1D4T_POSITION                            0x7
#define _CLC1GLS0_G1D4T_SIZE                                0x1
#define _CLC1GLS0_G1D4T_LENGTH                              0x1
#define _CLC1GLS0_G1D4T_MASK                                0x80
#define _CLC1GLS0_LC1G1D1N_POSN                             0x0
#define _CLC1GLS0_LC1G1D1N_POSITION                         0x0
#define _CLC1GLS0_LC1G1D1N_SIZE                             0x1
#define _CLC1GLS0_LC1G1D1N_LENGTH                           0x1
#define _CLC1GLS0_LC1G1D1N_MASK                             0x1
#define _CLC1GLS0_LC1G1D1T_POSN                             0x1
#define _CLC1GLS0_LC1G1D1T_POSITION                         0x1
#define _CLC1GLS0_LC1G1D1T_SIZE                             0x1
#define _CLC1GLS0_LC1G1D1T_LENGTH                           0x1
#define _CLC1GLS0_LC1G1D1T_MASK                             0x2
#define _CLC1GLS0_LC1G1D2N_POSN                             0x2
#define _CLC1GLS0_LC1G1D2N_POSITION                         0x2
#define _CLC1GLS0_LC1G1D2N_SIZE                             0x1
#define _CLC1GLS0_LC1G1D2N_LENGTH                           0x1
#define _CLC1GLS0_LC1G1D2N_MASK                             0x4
#define _CLC1GLS0_LC1G1D2T_POSN                             0x3
#define _CLC1GLS0_LC1G1D2T_POSITION                         0x3
#define _CLC1GLS0_LC1G1D2T_SIZE                             0x1
#define _CLC1GLS0_LC1G1D2T_LENGTH                           0x1
#define _CLC1GLS0_LC1G1D2T_MASK                             0x8
#define _CLC1GLS0_LC1G1D3N_POSN                             0x4
#define _CLC1GLS0_LC1G1D3N_POSITION                         0x4
#define _CLC1GLS0_LC1G1D3N_SIZE                             0x1
#define _CLC1GLS0_LC1G1D3N_LENGTH                           0x1
#define _CLC1GLS0_LC1G1D3N_MASK                             0x10
#define _CLC1GLS0_LC1G1D3T_POSN                             0x5
#define _CLC1GLS0_LC1G1D3T_POSITION                         0x5
#define _CLC1GLS0_LC1G1D3T_SIZE                             0x1
#define _CLC1GLS0_LC1G1D3T_LENGTH                           0x1
#define _CLC1GLS0_LC1G1D3T_MASK                             0x20
#define _CLC1GLS0_LC1G1D4N_POSN                             0x6
#define _CLC1GLS0_LC1G1D4N_POSITION                         0x6
#define _CLC1GLS0_LC1G1D4N_SIZE                             0x1
#define _CLC1GLS0_LC1G1D4N_LENGTH                           0x1
#define _CLC1GLS0_LC1G1D4N_MASK                             0x40
#define _CLC1GLS0_LC1G1D4T_POSN                             0x7
#define _CLC1GLS0_LC1G1D4T_POSITION                         0x7
#define _CLC1GLS0_LC1G1D4T_SIZE                             0x1
#define _CLC1GLS0_LC1G1D4T_LENGTH                           0x1
#define _CLC1GLS0_LC1G1D4T_MASK                             0x80

// Register: CLC1GLS1
#define CLC1GLS1 CLC1GLS1
extern volatile unsigned char           CLC1GLS1            __at(0x3C7B);
#ifndef _LIB_BUILD
asm("CLC1GLS1 equ 03C7Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned G2D1N                  :1;
        unsigned G2D1T                  :1;
        unsigned G2D2N                  :1;
        unsigned G2D2T                  :1;
        unsigned G2D3N                  :1;
        unsigned G2D3T                  :1;
        unsigned G2D4N                  :1;
        unsigned G2D4T                  :1;
    };
    struct {
        unsigned LC1G2D1N               :1;
        unsigned LC1G2D1T               :1;
        unsigned LC1G2D2N               :1;
        unsigned LC1G2D2T               :1;
        unsigned LC1G2D3N               :1;
        unsigned LC1G2D3T               :1;
        unsigned LC1G2D4N               :1;
        unsigned LC1G2D4T               :1;
    };
} CLC1GLS1bits_t;
extern volatile CLC1GLS1bits_t CLC1GLS1bits __at(0x3C7B);
// bitfield macros
#define _CLC1GLS1_G2D1N_POSN                                0x0
#define _CLC1GLS1_G2D1N_POSITION                            0x0
#define _CLC1GLS1_G2D1N_SIZE                                0x1
#define _CLC1GLS1_G2D1N_LENGTH                              0x1
#define _CLC1GLS1_G2D1N_MASK                                0x1
#define _CLC1GLS1_G2D1T_POSN                                0x1
#define _CLC1GLS1_G2D1T_POSITION                            0x1
#define _CLC1GLS1_G2D1T_SIZE                                0x1
#define _CLC1GLS1_G2D1T_LENGTH                              0x1
#define _CLC1GLS1_G2D1T_MASK                                0x2
#define _CLC1GLS1_G2D2N_POSN                                0x2
#define _CLC1GLS1_G2D2N_POSITION                            0x2
#define _CLC1GLS1_G2D2N_SIZE                                0x1
#define _CLC1GLS1_G2D2N_LENGTH                              0x1
#define _CLC1GLS1_G2D2N_MASK                                0x4
#define _CLC1GLS1_G2D2T_POSN                                0x3
#define _CLC1GLS1_G2D2T_POSITION                            0x3
#define _CLC1GLS1_G2D2T_SIZE                                0x1
#define _CLC1GLS1_G2D2T_LENGTH                              0x1
#define _CLC1GLS1_G2D2T_MASK                                0x8
#define _CLC1GLS1_G2D3N_POSN                                0x4
#define _CLC1GLS1_G2D3N_POSITION                            0x4
#define _CLC1GLS1_G2D3N_SIZE                                0x1
#define _CLC1GLS1_G2D3N_LENGTH                              0x1
#define _CLC1GLS1_G2D3N_MASK                                0x10
#define _CLC1GLS1_G2D3T_POSN                                0x5
#define _CLC1GLS1_G2D3T_POSITION                            0x5
#define _CLC1GLS1_G2D3T_SIZE                                0x1
#define _CLC1GLS1_G2D3T_LENGTH                              0x1
#define _CLC1GLS1_G2D3T_MASK                                0x20
#define _CLC1GLS1_G2D4N_POSN                                0x6
#define _CLC1GLS1_G2D4N_POSITION                            0x6
#define _CLC1GLS1_G2D4N_SIZE                                0x1
#define _CLC1GLS1_G2D4N_LENGTH                              0x1
#define _CLC1GLS1_G2D4N_MASK                                0x40
#define _CLC1GLS1_G2D4T_POSN                                0x7
#define _CLC1GLS1_G2D4T_POSITION                            0x7
#define _CLC1GLS1_G2D4T_SIZE                                0x1
#define _CLC1GLS1_G2D4T_LENGTH                              0x1
#define _CLC1GLS1_G2D4T_MASK                                0x80
#define _CLC1GLS1_LC1G2D1N_POSN                             0x0
#define _CLC1GLS1_LC1G2D1N_POSITION                         0x0
#define _CLC1GLS1_LC1G2D1N_SIZE                             0x1
#define _CLC1GLS1_LC1G2D1N_LENGTH                           0x1
#define _CLC1GLS1_LC1G2D1N_MASK                             0x1
#define _CLC1GLS1_LC1G2D1T_POSN                             0x1
#define _CLC1GLS1_LC1G2D1T_POSITION                         0x1
#define _CLC1GLS1_LC1G2D1T_SIZE                             0x1
#define _CLC1GLS1_LC1G2D1T_LENGTH                           0x1
#define _CLC1GLS1_LC1G2D1T_MASK                             0x2
#define _CLC1GLS1_LC1G2D2N_POSN                             0x2
#define _CLC1GLS1_LC1G2D2N_POSITION                         0x2
#define _CLC1GLS1_LC1G2D2N_SIZE                             0x1
#define _CLC1GLS1_LC1G2D2N_LENGTH                           0x1
#define _CLC1GLS1_LC1G2D2N_MASK                             0x4
#define _CLC1GLS1_LC1G2D2T_POSN                             0x3
#define _CLC1GLS1_LC1G2D2T_POSITION                         0x3
#define _CLC1GLS1_LC1G2D2T_SIZE                             0x1
#define _CLC1GLS1_LC1G2D2T_LENGTH                           0x1
#define _CLC1GLS1_LC1G2D2T_MASK                             0x8
#define _CLC1GLS1_LC1G2D3N_POSN                             0x4
#define _CLC1GLS1_LC1G2D3N_POSITION                         0x4
#define _CLC1GLS1_LC1G2D3N_SIZE                             0x1
#define _CLC1GLS1_LC1G2D3N_LENGTH                           0x1
#define _CLC1GLS1_LC1G2D3N_MASK                             0x10
#define _CLC1GLS1_LC1G2D3T_POSN                             0x5
#define _CLC1GLS1_LC1G2D3T_POSITION                         0x5
#define _CLC1GLS1_LC1G2D3T_SIZE                             0x1
#define _CLC1GLS1_LC1G2D3T_LENGTH                           0x1
#define _CLC1GLS1_LC1G2D3T_MASK                             0x20
#define _CLC1GLS1_LC1G2D4N_POSN                             0x6
#define _CLC1GLS1_LC1G2D4N_POSITION                         0x6
#define _CLC1GLS1_LC1G2D4N_SIZE                             0x1
#define _CLC1GLS1_LC1G2D4N_LENGTH                           0x1
#define _CLC1GLS1_LC1G2D4N_MASK                             0x40
#define _CLC1GLS1_LC1G2D4T_POSN                             0x7
#define _CLC1GLS1_LC1G2D4T_POSITION                         0x7
#define _CLC1GLS1_LC1G2D4T_SIZE                             0x1
#define _CLC1GLS1_LC1G2D4T_LENGTH                           0x1
#define _CLC1GLS1_LC1G2D4T_MASK                             0x80

// Register: CLC1GLS2
#define CLC1GLS2 CLC1GLS2
extern volatile unsigned char           CLC1GLS2            __at(0x3C7C);
#ifndef _LIB_BUILD
asm("CLC1GLS2 equ 03C7Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned G3D1N                  :1;
        unsigned G3D1T                  :1;
        unsigned G3D2N                  :1;
        unsigned G3D2T                  :1;
        unsigned G3D3N                  :1;
        unsigned G3D3T                  :1;
        unsigned G3D4N                  :1;
        unsigned G3D4T                  :1;
    };
    struct {
        unsigned LC1G3D1N               :1;
        unsigned LC1G3D1T               :1;
        unsigned LC1G3D2N               :1;
        unsigned LC1G3D2T               :1;
        unsigned LC1G3D3N               :1;
        unsigned LC1G3D3T               :1;
        unsigned LC1G3D4N               :1;
        unsigned LC1G3D4T               :1;
    };
} CLC1GLS2bits_t;
extern volatile CLC1GLS2bits_t CLC1GLS2bits __at(0x3C7C);
// bitfield macros
#define _CLC1GLS2_G3D1N_POSN                                0x0
#define _CLC1GLS2_G3D1N_POSITION                            0x0
#define _CLC1GLS2_G3D1N_SIZE                                0x1
#define _CLC1GLS2_G3D1N_LENGTH                              0x1
#define _CLC1GLS2_G3D1N_MASK                                0x1
#define _CLC1GLS2_G3D1T_POSN                                0x1
#define _CLC1GLS2_G3D1T_POSITION                            0x1
#define _CLC1GLS2_G3D1T_SIZE                                0x1
#define _CLC1GLS2_G3D1T_LENGTH                              0x1
#define _CLC1GLS2_G3D1T_MASK                                0x2
#define _CLC1GLS2_G3D2N_POSN                                0x2
#define _CLC1GLS2_G3D2N_POSITION                            0x2
#define _CLC1GLS2_G3D2N_SIZE                                0x1
#define _CLC1GLS2_G3D2N_LENGTH                              0x1
#define _CLC1GLS2_G3D2N_MASK                                0x4
#define _CLC1GLS2_G3D2T_POSN                                0x3
#define _CLC1GLS2_G3D2T_POSITION                            0x3
#define _CLC1GLS2_G3D2T_SIZE                                0x1
#define _CLC1GLS2_G3D2T_LENGTH                              0x1
#define _CLC1GLS2_G3D2T_MASK                                0x8
#define _CLC1GLS2_G3D3N_POSN                                0x4
#define _CLC1GLS2_G3D3N_POSITION                            0x4
#define _CLC1GLS2_G3D3N_SIZE                                0x1
#define _CLC1GLS2_G3D3N_LENGTH                              0x1
#define _CLC1GLS2_G3D3N_MASK                                0x10
#define _CLC1GLS2_G3D3T_POSN                                0x5
#define _CLC1GLS2_G3D3T_POSITION                            0x5
#define _CLC1GLS2_G3D3T_SIZE                                0x1
#define _CLC1GLS2_G3D3T_LENGTH                              0x1
#define _CLC1GLS2_G3D3T_MASK                                0x20
#define _CLC1GLS2_G3D4N_POSN                                0x6
#define _CLC1GLS2_G3D4N_POSITION                            0x6
#define _CLC1GLS2_G3D4N_SIZE                                0x1
#define _CLC1GLS2_G3D4N_LENGTH                              0x1
#define _CLC1GLS2_G3D4N_MASK                                0x40
#define _CLC1GLS2_G3D4T_POSN                                0x7
#define _CLC1GLS2_G3D4T_POSITION                            0x7
#define _CLC1GLS2_G3D4T_SIZE                                0x1
#define _CLC1GLS2_G3D4T_LENGTH                              0x1
#define _CLC1GLS2_G3D4T_MASK                                0x80
#define _CLC1GLS2_LC1G3D1N_POSN                             0x0
#define _CLC1GLS2_LC1G3D1N_POSITION                         0x0
#define _CLC1GLS2_LC1G3D1N_SIZE                             0x1
#define _CLC1GLS2_LC1G3D1N_LENGTH                           0x1
#define _CLC1GLS2_LC1G3D1N_MASK                             0x1
#define _CLC1GLS2_LC1G3D1T_POSN                             0x1
#define _CLC1GLS2_LC1G3D1T_POSITION                         0x1
#define _CLC1GLS2_LC1G3D1T_SIZE                             0x1
#define _CLC1GLS2_LC1G3D1T_LENGTH                           0x1
#define _CLC1GLS2_LC1G3D1T_MASK                             0x2
#define _CLC1GLS2_LC1G3D2N_POSN                             0x2
#define _CLC1GLS2_LC1G3D2N_POSITION                         0x2
#define _CLC1GLS2_LC1G3D2N_SIZE                             0x1
#define _CLC1GLS2_LC1G3D2N_LENGTH                           0x1
#define _CLC1GLS2_LC1G3D2N_MASK                             0x4
#define _CLC1GLS2_LC1G3D2T_POSN                             0x3
#define _CLC1GLS2_LC1G3D2T_POSITION                         0x3
#define _CLC1GLS2_LC1G3D2T_SIZE                             0x1
#define _CLC1GLS2_LC1G3D2T_LENGTH                           0x1
#define _CLC1GLS2_LC1G3D2T_MASK                             0x8
#define _CLC1GLS2_LC1G3D3N_POSN                             0x4
#define _CLC1GLS2_LC1G3D3N_POSITION                         0x4
#define _CLC1GLS2_LC1G3D3N_SIZE                             0x1
#define _CLC1GLS2_LC1G3D3N_LENGTH                           0x1
#define _CLC1GLS2_LC1G3D3N_MASK                             0x10
#define _CLC1GLS2_LC1G3D3T_POSN                             0x5
#define _CLC1GLS2_LC1G3D3T_POSITION                         0x5
#define _CLC1GLS2_LC1G3D3T_SIZE                             0x1
#define _CLC1GLS2_LC1G3D3T_LENGTH                           0x1
#define _CLC1GLS2_LC1G3D3T_MASK                             0x20
#define _CLC1GLS2_LC1G3D4N_POSN                             0x6
#define _CLC1GLS2_LC1G3D4N_POSITION                         0x6
#define _CLC1GLS2_LC1G3D4N_SIZE                             0x1
#define _CLC1GLS2_LC1G3D4N_LENGTH                           0x1
#define _CLC1GLS2_LC1G3D4N_MASK                             0x40
#define _CLC1GLS2_LC1G3D4T_POSN                             0x7
#define _CLC1GLS2_LC1G3D4T_POSITION                         0x7
#define _CLC1GLS2_LC1G3D4T_SIZE                             0x1
#define _CLC1GLS2_LC1G3D4T_LENGTH                           0x1
#define _CLC1GLS2_LC1G3D4T_MASK                             0x80

// Register: CLC1GLS3
#define CLC1GLS3 CLC1GLS3
extern volatile unsigned char           CLC1GLS3            __at(0x3C7D);
#ifndef _LIB_BUILD
asm("CLC1GLS3 equ 03C7Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned G4D1N                  :1;
        unsigned G4D1T                  :1;
        unsigned G4D2N                  :1;
        unsigned G4D2T                  :1;
        unsigned G4D3N                  :1;
        unsigned G4D3T                  :1;
        unsigned G4D4N                  :1;
        unsigned G4D4T                  :1;
    };
    struct {
        unsigned LC1G4D1N               :1;
        unsigned LC1G4D1T               :1;
        unsigned LC1G4D2N               :1;
        unsigned LC1G4D2T               :1;
        unsigned LC1G4D3N               :1;
        unsigned LC1G4D3T               :1;
        unsigned LC1G4D4N               :1;
        unsigned LC1G4D4T               :1;
    };
} CLC1GLS3bits_t;
extern volatile CLC1GLS3bits_t CLC1GLS3bits __at(0x3C7D);
// bitfield macros
#define _CLC1GLS3_G4D1N_POSN                                0x0
#define _CLC1GLS3_G4D1N_POSITION                            0x0
#define _CLC1GLS3_G4D1N_SIZE                                0x1
#define _CLC1GLS3_G4D1N_LENGTH                              0x1
#define _CLC1GLS3_G4D1N_MASK                                0x1
#define _CLC1GLS3_G4D1T_POSN                                0x1
#define _CLC1GLS3_G4D1T_POSITION                            0x1
#define _CLC1GLS3_G4D1T_SIZE                                0x1
#define _CLC1GLS3_G4D1T_LENGTH                              0x1
#define _CLC1GLS3_G4D1T_MASK                                0x2
#define _CLC1GLS3_G4D2N_POSN                                0x2
#define _CLC1GLS3_G4D2N_POSITION                            0x2
#define _CLC1GLS3_G4D2N_SIZE                                0x1
#define _CLC1GLS3_G4D2N_LENGTH                              0x1
#define _CLC1GLS3_G4D2N_MASK                                0x4
#define _CLC1GLS3_G4D2T_POSN                                0x3
#define _CLC1GLS3_G4D2T_POSITION                            0x3
#define _CLC1GLS3_G4D2T_SIZE                                0x1
#define _CLC1GLS3_G4D2T_LENGTH                              0x1
#define _CLC1GLS3_G4D2T_MASK                                0x8
#define _CLC1GLS3_G4D3N_POSN                                0x4
#define _CLC1GLS3_G4D3N_POSITION                            0x4
#define _CLC1GLS3_G4D3N_SIZE                                0x1
#define _CLC1GLS3_G4D3N_LENGTH                              0x1
#define _CLC1GLS3_G4D3N_MASK                                0x10
#define _CLC1GLS3_G4D3T_POSN                                0x5
#define _CLC1GLS3_G4D3T_POSITION                            0x5
#define _CLC1GLS3_G4D3T_SIZE                                0x1
#define _CLC1GLS3_G4D3T_LENGTH                              0x1
#define _CLC1GLS3_G4D3T_MASK                                0x20
#define _CLC1GLS3_G4D4N_POSN                                0x6
#define _CLC1GLS3_G4D4N_POSITION                            0x6
#define _CLC1GLS3_G4D4N_SIZE                                0x1
#define _CLC1GLS3_G4D4N_LENGTH                              0x1
#define _CLC1GLS3_G4D4N_MASK                                0x40
#define _CLC1GLS3_G4D4T_POSN                                0x7
#define _CLC1GLS3_G4D4T_POSITION                            0x7
#define _CLC1GLS3_G4D4T_SIZE                                0x1
#define _CLC1GLS3_G4D4T_LENGTH                              0x1
#define _CLC1GLS3_G4D4T_MASK                                0x80
#define _CLC1GLS3_LC1G4D1N_POSN                             0x0
#define _CLC1GLS3_LC1G4D1N_POSITION                         0x0
#define _CLC1GLS3_LC1G4D1N_SIZE                             0x1
#define _CLC1GLS3_LC1G4D1N_LENGTH                           0x1
#define _CLC1GLS3_LC1G4D1N_MASK                             0x1
#define _CLC1GLS3_LC1G4D1T_POSN                             0x1
#define _CLC1GLS3_LC1G4D1T_POSITION                         0x1
#define _CLC1GLS3_LC1G4D1T_SIZE                             0x1
#define _CLC1GLS3_LC1G4D1T_LENGTH                           0x1
#define _CLC1GLS3_LC1G4D1T_MASK                             0x2
#define _CLC1GLS3_LC1G4D2N_POSN                             0x2
#define _CLC1GLS3_LC1G4D2N_POSITION                         0x2
#define _CLC1GLS3_LC1G4D2N_SIZE                             0x1
#define _CLC1GLS3_LC1G4D2N_LENGTH                           0x1
#define _CLC1GLS3_LC1G4D2N_MASK                             0x4
#define _CLC1GLS3_LC1G4D2T_POSN                             0x3
#define _CLC1GLS3_LC1G4D2T_POSITION                         0x3
#define _CLC1GLS3_LC1G4D2T_SIZE                             0x1
#define _CLC1GLS3_LC1G4D2T_LENGTH                           0x1
#define _CLC1GLS3_LC1G4D2T_MASK                             0x8
#define _CLC1GLS3_LC1G4D3N_POSN                             0x4
#define _CLC1GLS3_LC1G4D3N_POSITION                         0x4
#define _CLC1GLS3_LC1G4D3N_SIZE                             0x1
#define _CLC1GLS3_LC1G4D3N_LENGTH                           0x1
#define _CLC1GLS3_LC1G4D3N_MASK                             0x10
#define _CLC1GLS3_LC1G4D3T_POSN                             0x5
#define _CLC1GLS3_LC1G4D3T_POSITION                         0x5
#define _CLC1GLS3_LC1G4D3T_SIZE                             0x1
#define _CLC1GLS3_LC1G4D3T_LENGTH                           0x1
#define _CLC1GLS3_LC1G4D3T_MASK                             0x20
#define _CLC1GLS3_LC1G4D4N_POSN                             0x6
#define _CLC1GLS3_LC1G4D4N_POSITION                         0x6
#define _CLC1GLS3_LC1G4D4N_SIZE                             0x1
#define _CLC1GLS3_LC1G4D4N_LENGTH                           0x1
#define _CLC1GLS3_LC1G4D4N_MASK                             0x40
#define _CLC1GLS3_LC1G4D4T_POSN                             0x7
#define _CLC1GLS3_LC1G4D4T_POSITION                         0x7
#define _CLC1GLS3_LC1G4D4T_SIZE                             0x1
#define _CLC1GLS3_LC1G4D4T_LENGTH                           0x1
#define _CLC1GLS3_LC1G4D4T_MASK                             0x80

// Register: CLCDATA0
#define CLCDATA0 CLCDATA0
extern volatile unsigned char           CLCDATA0            __at(0x3C7E);
#ifndef _LIB_BUILD
asm("CLCDATA0 equ 03C7Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLC1OUT                :1;
        unsigned CLC2OUT                :1;
        unsigned CLC3OUT                :1;
        unsigned CLC4OUT                :1;
    };
} CLCDATA0bits_t;
extern volatile CLCDATA0bits_t CLCDATA0bits __at(0x3C7E);
// bitfield macros
#define _CLCDATA0_CLC1OUT_POSN                              0x0
#define _CLCDATA0_CLC1OUT_POSITION                          0x0
#define _CLCDATA0_CLC1OUT_SIZE                              0x1
#define _CLCDATA0_CLC1OUT_LENGTH                            0x1
#define _CLCDATA0_CLC1OUT_MASK                              0x1
#define _CLCDATA0_CLC2OUT_POSN                              0x1
#define _CLCDATA0_CLC2OUT_POSITION                          0x1
#define _CLCDATA0_CLC2OUT_SIZE                              0x1
#define _CLCDATA0_CLC2OUT_LENGTH                            0x1
#define _CLCDATA0_CLC2OUT_MASK                              0x2
#define _CLCDATA0_CLC3OUT_POSN                              0x2
#define _CLCDATA0_CLC3OUT_POSITION                          0x2
#define _CLCDATA0_CLC3OUT_SIZE                              0x1
#define _CLCDATA0_CLC3OUT_LENGTH                            0x1
#define _CLCDATA0_CLC3OUT_MASK                              0x4
#define _CLCDATA0_CLC4OUT_POSN                              0x3
#define _CLCDATA0_CLC4OUT_POSITION                          0x3
#define _CLCDATA0_CLC4OUT_SIZE                              0x1
#define _CLCDATA0_CLC4OUT_LENGTH                            0x1
#define _CLCDATA0_CLC4OUT_MASK                              0x8

// Register: CLKRCON
#define CLKRCON CLKRCON
extern volatile unsigned char           CLKRCON             __at(0x3CE5);
#ifndef _LIB_BUILD
asm("CLKRCON equ 03CE5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DIV                    :3;
        unsigned DC                     :2;
        unsigned                        :2;
        unsigned EN                     :1;
    };
    struct {
        unsigned CLKRDIV0               :1;
        unsigned CLKRDIV1               :1;
        unsigned CLKRDIV2               :1;
        unsigned CLKRDC0                :1;
        unsigned CLKRDC1                :1;
        unsigned                        :2;
        unsigned CLKREN                 :1;
    };
    struct {
        unsigned CLKRDIV                :3;
        unsigned CLKRDC                 :2;
    };
} CLKRCONbits_t;
extern volatile CLKRCONbits_t CLKRCONbits __at(0x3CE5);
// bitfield macros
#define _CLKRCON_DIV_POSN                                   0x0
#define _CLKRCON_DIV_POSITION                               0x0
#define _CLKRCON_DIV_SIZE                                   0x3
#define _CLKRCON_DIV_LENGTH                                 0x3
#define _CLKRCON_DIV_MASK                                   0x7
#define _CLKRCON_DC_POSN                                    0x3
#define _CLKRCON_DC_POSITION                                0x3
#define _CLKRCON_DC_SIZE                                    0x2
#define _CLKRCON_DC_LENGTH                                  0x2
#define _CLKRCON_DC_MASK                                    0x18
#define _CLKRCON_EN_POSN                                    0x7
#define _CLKRCON_EN_POSITION                                0x7
#define _CLKRCON_EN_SIZE                                    0x1
#define _CLKRCON_EN_LENGTH                                  0x1
#define _CLKRCON_EN_MASK                                    0x80
#define _CLKRCON_CLKRDIV0_POSN                              0x0
#define _CLKRCON_CLKRDIV0_POSITION                          0x0
#define _CLKRCON_CLKRDIV0_SIZE                              0x1
#define _CLKRCON_CLKRDIV0_LENGTH                            0x1
#define _CLKRCON_CLKRDIV0_MASK                              0x1
#define _CLKRCON_CLKRDIV1_POSN                              0x1
#define _CLKRCON_CLKRDIV1_POSITION                          0x1
#define _CLKRCON_CLKRDIV1_SIZE                              0x1
#define _CLKRCON_CLKRDIV1_LENGTH                            0x1
#define _CLKRCON_CLKRDIV1_MASK                              0x2
#define _CLKRCON_CLKRDIV2_POSN                              0x2
#define _CLKRCON_CLKRDIV2_POSITION                          0x2
#define _CLKRCON_CLKRDIV2_SIZE                              0x1
#define _CLKRCON_CLKRDIV2_LENGTH                            0x1
#define _CLKRCON_CLKRDIV2_MASK                              0x4
#define _CLKRCON_CLKRDC0_POSN                               0x3
#define _CLKRCON_CLKRDC0_POSITION                           0x3
#define _CLKRCON_CLKRDC0_SIZE                               0x1
#define _CLKRCON_CLKRDC0_LENGTH                             0x1
#define _CLKRCON_CLKRDC0_MASK                               0x8
#define _CLKRCON_CLKRDC1_POSN                               0x4
#define _CLKRCON_CLKRDC1_POSITION                           0x4
#define _CLKRCON_CLKRDC1_SIZE                               0x1
#define _CLKRCON_CLKRDC1_LENGTH                             0x1
#define _CLKRCON_CLKRDC1_MASK                               0x10
#define _CLKRCON_CLKREN_POSN                                0x7
#define _CLKRCON_CLKREN_POSITION                            0x7
#define _CLKRCON_CLKREN_SIZE                                0x1
#define _CLKRCON_CLKREN_LENGTH                              0x1
#define _CLKRCON_CLKREN_MASK                                0x80
#define _CLKRCON_CLKRDIV_POSN                               0x0
#define _CLKRCON_CLKRDIV_POSITION                           0x0
#define _CLKRCON_CLKRDIV_SIZE                               0x3
#define _CLKRCON_CLKRDIV_LENGTH                             0x3
#define _CLKRCON_CLKRDIV_MASK                               0x7
#define _CLKRCON_CLKRDC_POSN                                0x3
#define _CLKRCON_CLKRDC_POSITION                            0x3
#define _CLKRCON_CLKRDC_SIZE                                0x2
#define _CLKRCON_CLKRDC_LENGTH                              0x2
#define _CLKRCON_CLKRDC_MASK                                0x18

// Register: CLKRCLK
#define CLKRCLK CLKRCLK
extern volatile unsigned char           CLKRCLK             __at(0x3CE6);
#ifndef _LIB_BUILD
asm("CLKRCLK equ 03CE6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLK                    :4;
    };
    struct {
        unsigned CLKRCLK                :4;
    };
    struct {
        unsigned CLK0                   :1;
        unsigned CLK1                   :1;
        unsigned CLK2                   :1;
        unsigned CLK3                   :1;
    };
    struct {
        unsigned CLKRCLK0               :1;
        unsigned CLKRCLK1               :1;
        unsigned CLKRCLK2               :1;
        unsigned CLKRCLK3               :1;
    };
} CLKRCLKbits_t;
extern volatile CLKRCLKbits_t CLKRCLKbits __at(0x3CE6);
// bitfield macros
#define _CLKRCLK_CLK_POSN                                   0x0
#define _CLKRCLK_CLK_POSITION                               0x0
#define _CLKRCLK_CLK_SIZE                                   0x4
#define _CLKRCLK_CLK_LENGTH                                 0x4
#define _CLKRCLK_CLK_MASK                                   0xF
#define _CLKRCLK_CLKRCLK_POSN                               0x0
#define _CLKRCLK_CLKRCLK_POSITION                           0x0
#define _CLKRCLK_CLKRCLK_SIZE                               0x4
#define _CLKRCLK_CLKRCLK_LENGTH                             0x4
#define _CLKRCLK_CLKRCLK_MASK                               0xF
#define _CLKRCLK_CLK0_POSN                                  0x0
#define _CLKRCLK_CLK0_POSITION                              0x0
#define _CLKRCLK_CLK0_SIZE                                  0x1
#define _CLKRCLK_CLK0_LENGTH                                0x1
#define _CLKRCLK_CLK0_MASK                                  0x1
#define _CLKRCLK_CLK1_POSN                                  0x1
#define _CLKRCLK_CLK1_POSITION                              0x1
#define _CLKRCLK_CLK1_SIZE                                  0x1
#define _CLKRCLK_CLK1_LENGTH                                0x1
#define _CLKRCLK_CLK1_MASK                                  0x2
#define _CLKRCLK_CLK2_POSN                                  0x2
#define _CLKRCLK_CLK2_POSITION                              0x2
#define _CLKRCLK_CLK2_SIZE                                  0x1
#define _CLKRCLK_CLK2_LENGTH                                0x1
#define _CLKRCLK_CLK2_MASK                                  0x4
#define _CLKRCLK_CLK3_POSN                                  0x3
#define _CLKRCLK_CLK3_POSITION                              0x3
#define _CLKRCLK_CLK3_SIZE                                  0x1
#define _CLKRCLK_CLK3_LENGTH                                0x1
#define _CLKRCLK_CLK3_MASK                                  0x8
#define _CLKRCLK_CLKRCLK0_POSN                              0x0
#define _CLKRCLK_CLKRCLK0_POSITION                          0x0
#define _CLKRCLK_CLKRCLK0_SIZE                              0x1
#define _CLKRCLK_CLKRCLK0_LENGTH                            0x1
#define _CLKRCLK_CLKRCLK0_MASK                              0x1
#define _CLKRCLK_CLKRCLK1_POSN                              0x1
#define _CLKRCLK_CLKRCLK1_POSITION                          0x1
#define _CLKRCLK_CLKRCLK1_SIZE                              0x1
#define _CLKRCLK_CLKRCLK1_LENGTH                            0x1
#define _CLKRCLK_CLKRCLK1_MASK                              0x2
#define _CLKRCLK_CLKRCLK2_POSN                              0x2
#define _CLKRCLK_CLKRCLK2_POSITION                          0x2
#define _CLKRCLK_CLKRCLK2_SIZE                              0x1
#define _CLKRCLK_CLKRCLK2_LENGTH                            0x1
#define _CLKRCLK_CLKRCLK2_MASK                              0x4
#define _CLKRCLK_CLKRCLK3_POSN                              0x3
#define _CLKRCLK_CLKRCLK3_POSITION                          0x3
#define _CLKRCLK_CLKRCLK3_SIZE                              0x1
#define _CLKRCLK_CLKRCLK3_LENGTH                            0x1
#define _CLKRCLK_CLKRCLK3_MASK                              0x8

// Register: MD1CON0
#define MD1CON0 MD1CON0
extern volatile unsigned char           MD1CON0             __at(0x3CFA);
#ifndef _LIB_BUILD
asm("MD1CON0 equ 03CFAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BIT                    :1;
        unsigned                        :3;
        unsigned OPOL                   :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MD1BIT                 :1;
        unsigned                        :3;
        unsigned MD1OPOL                :1;
        unsigned MD1OUT                 :1;
        unsigned                        :1;
        unsigned MD1EN                  :1;
    };
} MD1CON0bits_t;
extern volatile MD1CON0bits_t MD1CON0bits __at(0x3CFA);
// bitfield macros
#define _MD1CON0_BIT_POSN                                   0x0
#define _MD1CON0_BIT_POSITION                               0x0
#define _MD1CON0_BIT_SIZE                                   0x1
#define _MD1CON0_BIT_LENGTH                                 0x1
#define _MD1CON0_BIT_MASK                                   0x1
#define _MD1CON0_OPOL_POSN                                  0x4
#define _MD1CON0_OPOL_POSITION                              0x4
#define _MD1CON0_OPOL_SIZE                                  0x1
#define _MD1CON0_OPOL_LENGTH                                0x1
#define _MD1CON0_OPOL_MASK                                  0x10
#define _MD1CON0_OUT_POSN                                   0x5
#define _MD1CON0_OUT_POSITION                               0x5
#define _MD1CON0_OUT_SIZE                                   0x1
#define _MD1CON0_OUT_LENGTH                                 0x1
#define _MD1CON0_OUT_MASK                                   0x20
#define _MD1CON0_EN_POSN                                    0x7
#define _MD1CON0_EN_POSITION                                0x7
#define _MD1CON0_EN_SIZE                                    0x1
#define _MD1CON0_EN_LENGTH                                  0x1
#define _MD1CON0_EN_MASK                                    0x80
#define _MD1CON0_MD1BIT_POSN                                0x0
#define _MD1CON0_MD1BIT_POSITION                            0x0
#define _MD1CON0_MD1BIT_SIZE                                0x1
#define _MD1CON0_MD1BIT_LENGTH                              0x1
#define _MD1CON0_MD1BIT_MASK                                0x1
#define _MD1CON0_MD1OPOL_POSN                               0x4
#define _MD1CON0_MD1OPOL_POSITION                           0x4
#define _MD1CON0_MD1OPOL_SIZE                               0x1
#define _MD1CON0_MD1OPOL_LENGTH                             0x1
#define _MD1CON0_MD1OPOL_MASK                               0x10
#define _MD1CON0_MD1OUT_POSN                                0x5
#define _MD1CON0_MD1OUT_POSITION                            0x5
#define _MD1CON0_MD1OUT_SIZE                                0x1
#define _MD1CON0_MD1OUT_LENGTH                              0x1
#define _MD1CON0_MD1OUT_MASK                                0x20
#define _MD1CON0_MD1EN_POSN                                 0x7
#define _MD1CON0_MD1EN_POSITION                             0x7
#define _MD1CON0_MD1EN_SIZE                                 0x1
#define _MD1CON0_MD1EN_LENGTH                               0x1
#define _MD1CON0_MD1EN_MASK                                 0x80

// Register: MD1CON1
#define MD1CON1 MD1CON1
extern volatile unsigned char           MD1CON1             __at(0x3CFB);
#ifndef _LIB_BUILD
asm("MD1CON1 equ 03CFBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLSYNC                 :1;
        unsigned CLPOL                  :1;
        unsigned                        :2;
        unsigned CHSYNC                 :1;
        unsigned CHPOL                  :1;
    };
    struct {
        unsigned MD1CLSYNC              :1;
        unsigned MD1CLPOL               :1;
        unsigned                        :2;
        unsigned MD1CHSYNC              :1;
        unsigned MD1CHPOL               :1;
    };
} MD1CON1bits_t;
extern volatile MD1CON1bits_t MD1CON1bits __at(0x3CFB);
// bitfield macros
#define _MD1CON1_CLSYNC_POSN                                0x0
#define _MD1CON1_CLSYNC_POSITION                            0x0
#define _MD1CON1_CLSYNC_SIZE                                0x1
#define _MD1CON1_CLSYNC_LENGTH                              0x1
#define _MD1CON1_CLSYNC_MASK                                0x1
#define _MD1CON1_CLPOL_POSN                                 0x1
#define _MD1CON1_CLPOL_POSITION                             0x1
#define _MD1CON1_CLPOL_SIZE                                 0x1
#define _MD1CON1_CLPOL_LENGTH                               0x1
#define _MD1CON1_CLPOL_MASK                                 0x2
#define _MD1CON1_CHSYNC_POSN                                0x4
#define _MD1CON1_CHSYNC_POSITION                            0x4
#define _MD1CON1_CHSYNC_SIZE                                0x1
#define _MD1CON1_CHSYNC_LENGTH                              0x1
#define _MD1CON1_CHSYNC_MASK                                0x10
#define _MD1CON1_CHPOL_POSN                                 0x5
#define _MD1CON1_CHPOL_POSITION                             0x5
#define _MD1CON1_CHPOL_SIZE                                 0x1
#define _MD1CON1_CHPOL_LENGTH                               0x1
#define _MD1CON1_CHPOL_MASK                                 0x20
#define _MD1CON1_MD1CLSYNC_POSN                             0x0
#define _MD1CON1_MD1CLSYNC_POSITION                         0x0
#define _MD1CON1_MD1CLSYNC_SIZE                             0x1
#define _MD1CON1_MD1CLSYNC_LENGTH                           0x1
#define _MD1CON1_MD1CLSYNC_MASK                             0x1
#define _MD1CON1_MD1CLPOL_POSN                              0x1
#define _MD1CON1_MD1CLPOL_POSITION                          0x1
#define _MD1CON1_MD1CLPOL_SIZE                              0x1
#define _MD1CON1_MD1CLPOL_LENGTH                            0x1
#define _MD1CON1_MD1CLPOL_MASK                              0x2
#define _MD1CON1_MD1CHSYNC_POSN                             0x4
#define _MD1CON1_MD1CHSYNC_POSITION                         0x4
#define _MD1CON1_MD1CHSYNC_SIZE                             0x1
#define _MD1CON1_MD1CHSYNC_LENGTH                           0x1
#define _MD1CON1_MD1CHSYNC_MASK                             0x10
#define _MD1CON1_MD1CHPOL_POSN                              0x5
#define _MD1CON1_MD1CHPOL_POSITION                          0x5
#define _MD1CON1_MD1CHPOL_SIZE                              0x1
#define _MD1CON1_MD1CHPOL_LENGTH                            0x1
#define _MD1CON1_MD1CHPOL_MASK                              0x20

// Register: MD1SRC
#define MD1SRC MD1SRC
extern volatile unsigned char           MD1SRC              __at(0x3CFC);
#ifndef _LIB_BUILD
asm("MD1SRC equ 03CFCh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MS                     :5;
    };
    struct {
        unsigned MS0                    :1;
        unsigned MS1                    :1;
        unsigned MS2                    :1;
        unsigned MS3                    :1;
        unsigned MS4                    :1;
    };
    struct {
        unsigned MD1MS                  :5;
    };
    struct {
        unsigned MD1MS0                 :1;
        unsigned MD1MS1                 :1;
        unsigned MD1MS2                 :1;
        unsigned MD1MS3                 :1;
        unsigned MD1MS4                 :1;
    };
} MD1SRCbits_t;
extern volatile MD1SRCbits_t MD1SRCbits __at(0x3CFC);
// bitfield macros
#define _MD1SRC_MS_POSN                                     0x0
#define _MD1SRC_MS_POSITION                                 0x0
#define _MD1SRC_MS_SIZE                                     0x5
#define _MD1SRC_MS_LENGTH                                   0x5
#define _MD1SRC_MS_MASK                                     0x1F
#define _MD1SRC_MS0_POSN                                    0x0
#define _MD1SRC_MS0_POSITION                                0x0
#define _MD1SRC_MS0_SIZE                                    0x1
#define _MD1SRC_MS0_LENGTH                                  0x1
#define _MD1SRC_MS0_MASK                                    0x1
#define _MD1SRC_MS1_POSN                                    0x1
#define _MD1SRC_MS1_POSITION                                0x1
#define _MD1SRC_MS1_SIZE                                    0x1
#define _MD1SRC_MS1_LENGTH                                  0x1
#define _MD1SRC_MS1_MASK                                    0x2
#define _MD1SRC_MS2_POSN                                    0x2
#define _MD1SRC_MS2_POSITION                                0x2
#define _MD1SRC_MS2_SIZE                                    0x1
#define _MD1SRC_MS2_LENGTH                                  0x1
#define _MD1SRC_MS2_MASK                                    0x4
#define _MD1SRC_MS3_POSN                                    0x3
#define _MD1SRC_MS3_POSITION                                0x3
#define _MD1SRC_MS3_SIZE                                    0x1
#define _MD1SRC_MS3_LENGTH                                  0x1
#define _MD1SRC_MS3_MASK                                    0x8
#define _MD1SRC_MS4_POSN                                    0x4
#define _MD1SRC_MS4_POSITION                                0x4
#define _MD1SRC_MS4_SIZE                                    0x1
#define _MD1SRC_MS4_LENGTH                                  0x1
#define _MD1SRC_MS4_MASK                                    0x10
#define _MD1SRC_MD1MS_POSN                                  0x0
#define _MD1SRC_MD1MS_POSITION                              0x0
#define _MD1SRC_MD1MS_SIZE                                  0x5
#define _MD1SRC_MD1MS_LENGTH                                0x5
#define _MD1SRC_MD1MS_MASK                                  0x1F
#define _MD1SRC_MD1MS0_POSN                                 0x0
#define _MD1SRC_MD1MS0_POSITION                             0x0
#define _MD1SRC_MD1MS0_SIZE                                 0x1
#define _MD1SRC_MD1MS0_LENGTH                               0x1
#define _MD1SRC_MD1MS0_MASK                                 0x1
#define _MD1SRC_MD1MS1_POSN                                 0x1
#define _MD1SRC_MD1MS1_POSITION                             0x1
#define _MD1SRC_MD1MS1_SIZE                                 0x1
#define _MD1SRC_MD1MS1_LENGTH                               0x1
#define _MD1SRC_MD1MS1_MASK                                 0x2
#define _MD1SRC_MD1MS2_POSN                                 0x2
#define _MD1SRC_MD1MS2_POSITION                             0x2
#define _MD1SRC_MD1MS2_SIZE                                 0x1
#define _MD1SRC_MD1MS2_LENGTH                               0x1
#define _MD1SRC_MD1MS2_MASK                                 0x4
#define _MD1SRC_MD1MS3_POSN                                 0x3
#define _MD1SRC_MD1MS3_POSITION                             0x3
#define _MD1SRC_MD1MS3_SIZE                                 0x1
#define _MD1SRC_MD1MS3_LENGTH                               0x1
#define _MD1SRC_MD1MS3_MASK                                 0x8
#define _MD1SRC_MD1MS4_POSN                                 0x4
#define _MD1SRC_MD1MS4_POSITION                             0x4
#define _MD1SRC_MD1MS4_SIZE                                 0x1
#define _MD1SRC_MD1MS4_LENGTH                               0x1
#define _MD1SRC_MD1MS4_MASK                                 0x10

// Register: MD1CARL
#define MD1CARL MD1CARL
extern volatile unsigned char           MD1CARL             __at(0x3CFD);
#ifndef _LIB_BUILD
asm("MD1CARL equ 03CFDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CL                     :5;
    };
    struct {
        unsigned CL0                    :1;
        unsigned CL1                    :1;
        unsigned CL2                    :1;
        unsigned CL3                    :1;
        unsigned CL4                    :1;
    };
    struct {
        unsigned MD1CL                  :5;
    };
    struct {
        unsigned MD1CL0                 :1;
        unsigned MD1CL1                 :1;
        unsigned MD1CL2                 :1;
        unsigned MD1CL3                 :1;
        unsigned MD1CL4                 :1;
    };
} MD1CARLbits_t;
extern volatile MD1CARLbits_t MD1CARLbits __at(0x3CFD);
// bitfield macros
#define _MD1CARL_CL_POSN                                    0x0
#define _MD1CARL_CL_POSITION                                0x0
#define _MD1CARL_CL_SIZE                                    0x5
#define _MD1CARL_CL_LENGTH                                  0x5
#define _MD1CARL_CL_MASK                                    0x1F
#define _MD1CARL_CL0_POSN                                   0x0
#define _MD1CARL_CL0_POSITION                               0x0
#define _MD1CARL_CL0_SIZE                                   0x1
#define _MD1CARL_CL0_LENGTH                                 0x1
#define _MD1CARL_CL0_MASK                                   0x1
#define _MD1CARL_CL1_POSN                                   0x1
#define _MD1CARL_CL1_POSITION                               0x1
#define _MD1CARL_CL1_SIZE                                   0x1
#define _MD1CARL_CL1_LENGTH                                 0x1
#define _MD1CARL_CL1_MASK                                   0x2
#define _MD1CARL_CL2_POSN                                   0x2
#define _MD1CARL_CL2_POSITION                               0x2
#define _MD1CARL_CL2_SIZE                                   0x1
#define _MD1CARL_CL2_LENGTH                                 0x1
#define _MD1CARL_CL2_MASK                                   0x4
#define _MD1CARL_CL3_POSN                                   0x3
#define _MD1CARL_CL3_POSITION                               0x3
#define _MD1CARL_CL3_SIZE                                   0x1
#define _MD1CARL_CL3_LENGTH                                 0x1
#define _MD1CARL_CL3_MASK                                   0x8
#define _MD1CARL_CL4_POSN                                   0x4
#define _MD1CARL_CL4_POSITION                               0x4
#define _MD1CARL_CL4_SIZE                                   0x1
#define _MD1CARL_CL4_LENGTH                                 0x1
#define _MD1CARL_CL4_MASK                                   0x10
#define _MD1CARL_MD1CL_POSN                                 0x0
#define _MD1CARL_MD1CL_POSITION                             0x0
#define _MD1CARL_MD1CL_SIZE                                 0x5
#define _MD1CARL_MD1CL_LENGTH                               0x5
#define _MD1CARL_MD1CL_MASK                                 0x1F
#define _MD1CARL_MD1CL0_POSN                                0x0
#define _MD1CARL_MD1CL0_POSITION                            0x0
#define _MD1CARL_MD1CL0_SIZE                                0x1
#define _MD1CARL_MD1CL0_LENGTH                              0x1
#define _MD1CARL_MD1CL0_MASK                                0x1
#define _MD1CARL_MD1CL1_POSN                                0x1
#define _MD1CARL_MD1CL1_POSITION                            0x1
#define _MD1CARL_MD1CL1_SIZE                                0x1
#define _MD1CARL_MD1CL1_LENGTH                              0x1
#define _MD1CARL_MD1CL1_MASK                                0x2
#define _MD1CARL_MD1CL2_POSN                                0x2
#define _MD1CARL_MD1CL2_POSITION                            0x2
#define _MD1CARL_MD1CL2_SIZE                                0x1
#define _MD1CARL_MD1CL2_LENGTH                              0x1
#define _MD1CARL_MD1CL2_MASK                                0x4
#define _MD1CARL_MD1CL3_POSN                                0x3
#define _MD1CARL_MD1CL3_POSITION                            0x3
#define _MD1CARL_MD1CL3_SIZE                                0x1
#define _MD1CARL_MD1CL3_LENGTH                              0x1
#define _MD1CARL_MD1CL3_MASK                                0x8
#define _MD1CARL_MD1CL4_POSN                                0x4
#define _MD1CARL_MD1CL4_POSITION                            0x4
#define _MD1CARL_MD1CL4_SIZE                                0x1
#define _MD1CARL_MD1CL4_LENGTH                              0x1
#define _MD1CARL_MD1CL4_MASK                                0x10

// Register: MD1CARH
#define MD1CARH MD1CARH
extern volatile unsigned char           MD1CARH             __at(0x3CFE);
#ifndef _LIB_BUILD
asm("MD1CARH equ 03CFEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CH                     :5;
    };
    struct {
        unsigned CH0                    :1;
        unsigned CH1                    :1;
        unsigned CH2                    :1;
        unsigned CH3                    :1;
        unsigned CH4                    :1;
    };
    struct {
        unsigned MD1CH                  :5;
    };
    struct {
        unsigned MD1CH0                 :1;
        unsigned MD1CH1                 :1;
        unsigned MD1CH2                 :1;
        unsigned MD1CH3                 :1;
        unsigned MD1CH4                 :1;
    };
} MD1CARHbits_t;
extern volatile MD1CARHbits_t MD1CARHbits __at(0x3CFE);
// bitfield macros
#define _MD1CARH_CH_POSN                                    0x0
#define _MD1CARH_CH_POSITION                                0x0
#define _MD1CARH_CH_SIZE                                    0x5
#define _MD1CARH_CH_LENGTH                                  0x5
#define _MD1CARH_CH_MASK                                    0x1F
#define _MD1CARH_CH0_POSN                                   0x0
#define _MD1CARH_CH0_POSITION                               0x0
#define _MD1CARH_CH0_SIZE                                   0x1
#define _MD1CARH_CH0_LENGTH                                 0x1
#define _MD1CARH_CH0_MASK                                   0x1
#define _MD1CARH_CH1_POSN                                   0x1
#define _MD1CARH_CH1_POSITION                               0x1
#define _MD1CARH_CH1_SIZE                                   0x1
#define _MD1CARH_CH1_LENGTH                                 0x1
#define _MD1CARH_CH1_MASK                                   0x2
#define _MD1CARH_CH2_POSN                                   0x2
#define _MD1CARH_CH2_POSITION                               0x2
#define _MD1CARH_CH2_SIZE                                   0x1
#define _MD1CARH_CH2_LENGTH                                 0x1
#define _MD1CARH_CH2_MASK                                   0x4
#define _MD1CARH_CH3_POSN                                   0x3
#define _MD1CARH_CH3_POSITION                               0x3
#define _MD1CARH_CH3_SIZE                                   0x1
#define _MD1CARH_CH3_LENGTH                                 0x1
#define _MD1CARH_CH3_MASK                                   0x8
#define _MD1CARH_CH4_POSN                                   0x4
#define _MD1CARH_CH4_POSITION                               0x4
#define _MD1CARH_CH4_SIZE                                   0x1
#define _MD1CARH_CH4_LENGTH                                 0x1
#define _MD1CARH_CH4_MASK                                   0x10
#define _MD1CARH_MD1CH_POSN                                 0x0
#define _MD1CARH_MD1CH_POSITION                             0x0
#define _MD1CARH_MD1CH_SIZE                                 0x5
#define _MD1CARH_MD1CH_LENGTH                               0x5
#define _MD1CARH_MD1CH_MASK                                 0x1F
#define _MD1CARH_MD1CH0_POSN                                0x0
#define _MD1CARH_MD1CH0_POSITION                            0x0
#define _MD1CARH_MD1CH0_SIZE                                0x1
#define _MD1CARH_MD1CH0_LENGTH                              0x1
#define _MD1CARH_MD1CH0_MASK                                0x1
#define _MD1CARH_MD1CH1_POSN                                0x1
#define _MD1CARH_MD1CH1_POSITION                            0x1
#define _MD1CARH_MD1CH1_SIZE                                0x1
#define _MD1CARH_MD1CH1_LENGTH                              0x1
#define _MD1CARH_MD1CH1_MASK                                0x2
#define _MD1CARH_MD1CH2_POSN                                0x2
#define _MD1CARH_MD1CH2_POSITION                            0x2
#define _MD1CARH_MD1CH2_SIZE                                0x1
#define _MD1CARH_MD1CH2_LENGTH                              0x1
#define _MD1CARH_MD1CH2_MASK                                0x4
#define _MD1CARH_MD1CH3_POSN                                0x3
#define _MD1CARH_MD1CH3_POSITION                            0x3
#define _MD1CARH_MD1CH3_SIZE                                0x1
#define _MD1CARH_MD1CH3_LENGTH                              0x1
#define _MD1CARH_MD1CH3_MASK                                0x8
#define _MD1CARH_MD1CH4_POSN                                0x4
#define _MD1CARH_MD1CH4_POSITION                            0x4
#define _MD1CARH_MD1CH4_SIZE                                0x1
#define _MD1CARH_MD1CH4_LENGTH                              0x1
#define _MD1CARH_MD1CH4_MASK                                0x10

// Register: SPI1RXB
#define SPI1RXB SPI1RXB
extern volatile unsigned char           SPI1RXB             __at(0x3D10);
#ifndef _LIB_BUILD
asm("SPI1RXB equ 03D10h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RXB                    :8;
    };
    struct {
        unsigned RXB0                   :1;
        unsigned RXB1                   :1;
        unsigned RXB2                   :1;
        unsigned RXB3                   :1;
        unsigned RXB4                   :1;
        unsigned RXB5                   :1;
        unsigned RXB6                   :1;
        unsigned RXB7                   :1;
    };
} SPI1RXBbits_t;
extern volatile SPI1RXBbits_t SPI1RXBbits __at(0x3D10);
// bitfield macros
#define _SPI1RXB_RXB_POSN                                   0x0
#define _SPI1RXB_RXB_POSITION                               0x0
#define _SPI1RXB_RXB_SIZE                                   0x8
#define _SPI1RXB_RXB_LENGTH                                 0x8
#define _SPI1RXB_RXB_MASK                                   0xFF
#define _SPI1RXB_RXB0_POSN                                  0x0
#define _SPI1RXB_RXB0_POSITION                              0x0
#define _SPI1RXB_RXB0_SIZE                                  0x1
#define _SPI1RXB_RXB0_LENGTH                                0x1
#define _SPI1RXB_RXB0_MASK                                  0x1
#define _SPI1RXB_RXB1_POSN                                  0x1
#define _SPI1RXB_RXB1_POSITION                              0x1
#define _SPI1RXB_RXB1_SIZE                                  0x1
#define _SPI1RXB_RXB1_LENGTH                                0x1
#define _SPI1RXB_RXB1_MASK                                  0x2
#define _SPI1RXB_RXB2_POSN                                  0x2
#define _SPI1RXB_RXB2_POSITION                              0x2
#define _SPI1RXB_RXB2_SIZE                                  0x1
#define _SPI1RXB_RXB2_LENGTH                                0x1
#define _SPI1RXB_RXB2_MASK                                  0x4
#define _SPI1RXB_RXB3_POSN                                  0x3
#define _SPI1RXB_RXB3_POSITION                              0x3
#define _SPI1RXB_RXB3_SIZE                                  0x1
#define _SPI1RXB_RXB3_LENGTH                                0x1
#define _SPI1RXB_RXB3_MASK                                  0x8
#define _SPI1RXB_RXB4_POSN                                  0x4
#define _SPI1RXB_RXB4_POSITION                              0x4
#define _SPI1RXB_RXB4_SIZE                                  0x1
#define _SPI1RXB_RXB4_LENGTH                                0x1
#define _SPI1RXB_RXB4_MASK                                  0x10
#define _SPI1RXB_RXB5_POSN                                  0x5
#define _SPI1RXB_RXB5_POSITION                              0x5
#define _SPI1RXB_RXB5_SIZE                                  0x1
#define _SPI1RXB_RXB5_LENGTH                                0x1
#define _SPI1RXB_RXB5_MASK                                  0x20
#define _SPI1RXB_RXB6_POSN                                  0x6
#define _SPI1RXB_RXB6_POSITION                              0x6
#define _SPI1RXB_RXB6_SIZE                                  0x1
#define _SPI1RXB_RXB6_LENGTH                                0x1
#define _SPI1RXB_RXB6_MASK                                  0x40
#define _SPI1RXB_RXB7_POSN                                  0x7
#define _SPI1RXB_RXB7_POSITION                              0x7
#define _SPI1RXB_RXB7_SIZE                                  0x1
#define _SPI1RXB_RXB7_LENGTH                                0x1
#define _SPI1RXB_RXB7_MASK                                  0x80

// Register: SPI1TXB
#define SPI1TXB SPI1TXB
extern volatile unsigned char           SPI1TXB             __at(0x3D11);
#ifndef _LIB_BUILD
asm("SPI1TXB equ 03D11h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TXB                    :8;
    };
    struct {
        unsigned TXB0                   :1;
        unsigned TXB1                   :1;
        unsigned TXB2                   :1;
        unsigned TXB3                   :1;
        unsigned TXB4                   :1;
        unsigned TXB5                   :1;
        unsigned TXB6                   :1;
        unsigned TXB7                   :1;
    };
} SPI1TXBbits_t;
extern volatile SPI1TXBbits_t SPI1TXBbits __at(0x3D11);
// bitfield macros
#define _SPI1TXB_TXB_POSN                                   0x0
#define _SPI1TXB_TXB_POSITION                               0x0
#define _SPI1TXB_TXB_SIZE                                   0x8
#define _SPI1TXB_TXB_LENGTH                                 0x8
#define _SPI1TXB_TXB_MASK                                   0xFF
#define _SPI1TXB_TXB0_POSN                                  0x0
#define _SPI1TXB_TXB0_POSITION                              0x0
#define _SPI1TXB_TXB0_SIZE                                  0x1
#define _SPI1TXB_TXB0_LENGTH                                0x1
#define _SPI1TXB_TXB0_MASK                                  0x1
#define _SPI1TXB_TXB1_POSN                                  0x1
#define _SPI1TXB_TXB1_POSITION                              0x1
#define _SPI1TXB_TXB1_SIZE                                  0x1
#define _SPI1TXB_TXB1_LENGTH                                0x1
#define _SPI1TXB_TXB1_MASK                                  0x2
#define _SPI1TXB_TXB2_POSN                                  0x2
#define _SPI1TXB_TXB2_POSITION                              0x2
#define _SPI1TXB_TXB2_SIZE                                  0x1
#define _SPI1TXB_TXB2_LENGTH                                0x1
#define _SPI1TXB_TXB2_MASK                                  0x4
#define _SPI1TXB_TXB3_POSN                                  0x3
#define _SPI1TXB_TXB3_POSITION                              0x3
#define _SPI1TXB_TXB3_SIZE                                  0x1
#define _SPI1TXB_TXB3_LENGTH                                0x1
#define _SPI1TXB_TXB3_MASK                                  0x8
#define _SPI1TXB_TXB4_POSN                                  0x4
#define _SPI1TXB_TXB4_POSITION                              0x4
#define _SPI1TXB_TXB4_SIZE                                  0x1
#define _SPI1TXB_TXB4_LENGTH                                0x1
#define _SPI1TXB_TXB4_MASK                                  0x10
#define _SPI1TXB_TXB5_POSN                                  0x5
#define _SPI1TXB_TXB5_POSITION                              0x5
#define _SPI1TXB_TXB5_SIZE                                  0x1
#define _SPI1TXB_TXB5_LENGTH                                0x1
#define _SPI1TXB_TXB5_MASK                                  0x20
#define _SPI1TXB_TXB6_POSN                                  0x6
#define _SPI1TXB_TXB6_POSITION                              0x6
#define _SPI1TXB_TXB6_SIZE                                  0x1
#define _SPI1TXB_TXB6_LENGTH                                0x1
#define _SPI1TXB_TXB6_MASK                                  0x40
#define _SPI1TXB_TXB7_POSN                                  0x7
#define _SPI1TXB_TXB7_POSITION                              0x7
#define _SPI1TXB_TXB7_SIZE                                  0x1
#define _SPI1TXB_TXB7_LENGTH                                0x1
#define _SPI1TXB_TXB7_MASK                                  0x80

// Register: SPI1TCNT
#define SPI1TCNT SPI1TCNT
extern volatile unsigned short          SPI1TCNT            __at(0x3D12);
#ifndef _LIB_BUILD
asm("SPI1TCNT equ 03D12h");
#endif

// Register: SPI1TCNTL
#define SPI1TCNTL SPI1TCNTL
extern volatile unsigned char           SPI1TCNTL           __at(0x3D12);
#ifndef _LIB_BUILD
asm("SPI1TCNTL equ 03D12h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TCNTL                  :8;
    };
} SPI1TCNTLbits_t;
extern volatile SPI1TCNTLbits_t SPI1TCNTLbits __at(0x3D12);
// bitfield macros
#define _SPI1TCNTL_TCNTL_POSN                               0x0
#define _SPI1TCNTL_TCNTL_POSITION                           0x0
#define _SPI1TCNTL_TCNTL_SIZE                               0x8
#define _SPI1TCNTL_TCNTL_LENGTH                             0x8
#define _SPI1TCNTL_TCNTL_MASK                               0xFF

// Register: SPI1TCNTH
#define SPI1TCNTH SPI1TCNTH
extern volatile unsigned char           SPI1TCNTH           __at(0x3D13);
#ifndef _LIB_BUILD
asm("SPI1TCNTH equ 03D13h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TCNTH                  :3;
    };
} SPI1TCNTHbits_t;
extern volatile SPI1TCNTHbits_t SPI1TCNTHbits __at(0x3D13);
// bitfield macros
#define _SPI1TCNTH_TCNTH_POSN                               0x0
#define _SPI1TCNTH_TCNTH_POSITION                           0x0
#define _SPI1TCNTH_TCNTH_SIZE                               0x3
#define _SPI1TCNTH_TCNTH_LENGTH                             0x3
#define _SPI1TCNTH_TCNTH_MASK                               0x7

// Register: SPI1CON0
#define SPI1CON0 SPI1CON0
extern volatile unsigned char           SPI1CON0            __at(0x3D14);
#ifndef _LIB_BUILD
asm("SPI1CON0 equ 03D14h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BMODE                  :1;
        unsigned MST                    :1;
        unsigned LSBF                   :1;
        unsigned                        :4;
        unsigned EN                     :1;
    };
    struct {
        unsigned SPI1BMODE              :1;
        unsigned SPI1MST                :1;
        unsigned SPI1LSBF               :1;
        unsigned                        :4;
        unsigned SPI1SPIEN              :1;
    };
} SPI1CON0bits_t;
extern volatile SPI1CON0bits_t SPI1CON0bits __at(0x3D14);
// bitfield macros
#define _SPI1CON0_BMODE_POSN                                0x0
#define _SPI1CON0_BMODE_POSITION                            0x0
#define _SPI1CON0_BMODE_SIZE                                0x1
#define _SPI1CON0_BMODE_LENGTH                              0x1
#define _SPI1CON0_BMODE_MASK                                0x1
#define _SPI1CON0_MST_POSN                                  0x1
#define _SPI1CON0_MST_POSITION                              0x1
#define _SPI1CON0_MST_SIZE                                  0x1
#define _SPI1CON0_MST_LENGTH                                0x1
#define _SPI1CON0_MST_MASK                                  0x2
#define _SPI1CON0_LSBF_POSN                                 0x2
#define _SPI1CON0_LSBF_POSITION                             0x2
#define _SPI1CON0_LSBF_SIZE                                 0x1
#define _SPI1CON0_LSBF_LENGTH                               0x1
#define _SPI1CON0_LSBF_MASK                                 0x4
#define _SPI1CON0_EN_POSN                                   0x7
#define _SPI1CON0_EN_POSITION                               0x7
#define _SPI1CON0_EN_SIZE                                   0x1
#define _SPI1CON0_EN_LENGTH                                 0x1
#define _SPI1CON0_EN_MASK                                   0x80
#define _SPI1CON0_SPI1BMODE_POSN                            0x0
#define _SPI1CON0_SPI1BMODE_POSITION                        0x0
#define _SPI1CON0_SPI1BMODE_SIZE                            0x1
#define _SPI1CON0_SPI1BMODE_LENGTH                          0x1
#define _SPI1CON0_SPI1BMODE_MASK                            0x1
#define _SPI1CON0_SPI1MST_POSN                              0x1
#define _SPI1CON0_SPI1MST_POSITION                          0x1
#define _SPI1CON0_SPI1MST_SIZE                              0x1
#define _SPI1CON0_SPI1MST_LENGTH                            0x1
#define _SPI1CON0_SPI1MST_MASK                              0x2
#define _SPI1CON0_SPI1LSBF_POSN                             0x2
#define _SPI1CON0_SPI1LSBF_POSITION                         0x2
#define _SPI1CON0_SPI1LSBF_SIZE                             0x1
#define _SPI1CON0_SPI1LSBF_LENGTH                           0x1
#define _SPI1CON0_SPI1LSBF_MASK                             0x4
#define _SPI1CON0_SPI1SPIEN_POSN                            0x7
#define _SPI1CON0_SPI1SPIEN_POSITION                        0x7
#define _SPI1CON0_SPI1SPIEN_SIZE                            0x1
#define _SPI1CON0_SPI1SPIEN_LENGTH                          0x1
#define _SPI1CON0_SPI1SPIEN_MASK                            0x80

// Register: SPI1CON1
#define SPI1CON1 SPI1CON1
extern volatile unsigned char           SPI1CON1            __at(0x3D15);
#ifndef _LIB_BUILD
asm("SPI1CON1 equ 03D15h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SDOP                   :1;
        unsigned SDIP                   :1;
        unsigned SSP                    :1;
        unsigned                        :1;
        unsigned FST                    :1;
        unsigned CKP                    :1;
        unsigned CKE                    :1;
        unsigned SMP                    :1;
    };
    struct {
        unsigned SPI1SDOP               :1;
        unsigned SPI1SDIP               :1;
        unsigned SPI1SSP                :1;
        unsigned                        :1;
        unsigned SPI1FST                :1;
        unsigned SPI1CKP                :1;
        unsigned SPI1CKE                :1;
        unsigned SPI1SMP                :1;
    };
} SPI1CON1bits_t;
extern volatile SPI1CON1bits_t SPI1CON1bits __at(0x3D15);
// bitfield macros
#define _SPI1CON1_SDOP_POSN                                 0x0
#define _SPI1CON1_SDOP_POSITION                             0x0
#define _SPI1CON1_SDOP_SIZE                                 0x1
#define _SPI1CON1_SDOP_LENGTH                               0x1
#define _SPI1CON1_SDOP_MASK                                 0x1
#define _SPI1CON1_SDIP_POSN                                 0x1
#define _SPI1CON1_SDIP_POSITION                             0x1
#define _SPI1CON1_SDIP_SIZE                                 0x1
#define _SPI1CON1_SDIP_LENGTH                               0x1
#define _SPI1CON1_SDIP_MASK                                 0x2
#define _SPI1CON1_SSP_POSN                                  0x2
#define _SPI1CON1_SSP_POSITION                              0x2
#define _SPI1CON1_SSP_SIZE                                  0x1
#define _SPI1CON1_SSP_LENGTH                                0x1
#define _SPI1CON1_SSP_MASK                                  0x4
#define _SPI1CON1_FST_POSN                                  0x4
#define _SPI1CON1_FST_POSITION                              0x4
#define _SPI1CON1_FST_SIZE                                  0x1
#define _SPI1CON1_FST_LENGTH                                0x1
#define _SPI1CON1_FST_MASK                                  0x10
#define _SPI1CON1_CKP_POSN                                  0x5
#define _SPI1CON1_CKP_POSITION                              0x5
#define _SPI1CON1_CKP_SIZE                                  0x1
#define _SPI1CON1_CKP_LENGTH                                0x1
#define _SPI1CON1_CKP_MASK                                  0x20
#define _SPI1CON1_CKE_POSN                                  0x6
#define _SPI1CON1_CKE_POSITION                              0x6
#define _SPI1CON1_CKE_SIZE                                  0x1
#define _SPI1CON1_CKE_LENGTH                                0x1
#define _SPI1CON1_CKE_MASK                                  0x40
#define _SPI1CON1_SMP_POSN                                  0x7
#define _SPI1CON1_SMP_POSITION                              0x7
#define _SPI1CON1_SMP_SIZE                                  0x1
#define _SPI1CON1_SMP_LENGTH                                0x1
#define _SPI1CON1_SMP_MASK                                  0x80
#define _SPI1CON1_SPI1SDOP_POSN                             0x0
#define _SPI1CON1_SPI1SDOP_POSITION                         0x0
#define _SPI1CON1_SPI1SDOP_SIZE                             0x1
#define _SPI1CON1_SPI1SDOP_LENGTH                           0x1
#define _SPI1CON1_SPI1SDOP_MASK                             0x1
#define _SPI1CON1_SPI1SDIP_POSN                             0x1
#define _SPI1CON1_SPI1SDIP_POSITION                         0x1
#define _SPI1CON1_SPI1SDIP_SIZE                             0x1
#define _SPI1CON1_SPI1SDIP_LENGTH                           0x1
#define _SPI1CON1_SPI1SDIP_MASK                             0x2
#define _SPI1CON1_SPI1SSP_POSN                              0x2
#define _SPI1CON1_SPI1SSP_POSITION                          0x2
#define _SPI1CON1_SPI1SSP_SIZE                              0x1
#define _SPI1CON1_SPI1SSP_LENGTH                            0x1
#define _SPI1CON1_SPI1SSP_MASK                              0x4
#define _SPI1CON1_SPI1FST_POSN                              0x4
#define _SPI1CON1_SPI1FST_POSITION                          0x4
#define _SPI1CON1_SPI1FST_SIZE                              0x1
#define _SPI1CON1_SPI1FST_LENGTH                            0x1
#define _SPI1CON1_SPI1FST_MASK                              0x10
#define _SPI1CON1_SPI1CKP_POSN                              0x5
#define _SPI1CON1_SPI1CKP_POSITION                          0x5
#define _SPI1CON1_SPI1CKP_SIZE                              0x1
#define _SPI1CON1_SPI1CKP_LENGTH                            0x1
#define _SPI1CON1_SPI1CKP_MASK                              0x20
#define _SPI1CON1_SPI1CKE_POSN                              0x6
#define _SPI1CON1_SPI1CKE_POSITION                          0x6
#define _SPI1CON1_SPI1CKE_SIZE                              0x1
#define _SPI1CON1_SPI1CKE_LENGTH                            0x1
#define _SPI1CON1_SPI1CKE_MASK                              0x40
#define _SPI1CON1_SPI1SMP_POSN                              0x7
#define _SPI1CON1_SPI1SMP_POSITION                          0x7
#define _SPI1CON1_SPI1SMP_SIZE                              0x1
#define _SPI1CON1_SPI1SMP_LENGTH                            0x1
#define _SPI1CON1_SPI1SMP_MASK                              0x80

// Register: SPI1CON2
#define SPI1CON2 SPI1CON2
extern volatile unsigned char           SPI1CON2            __at(0x3D16);
#ifndef _LIB_BUILD
asm("SPI1CON2 equ 03D16h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RXR                    :1;
        unsigned TXR                    :1;
        unsigned SSET                   :1;
        unsigned                        :3;
        unsigned SSFLT                  :1;
        unsigned BUSY                   :1;
    };
    struct {
        unsigned SPI1RXR                :1;
        unsigned SPI1TXR                :1;
        unsigned SPI1SSET               :1;
        unsigned                        :3;
        unsigned SPI1SSFLT              :1;
        unsigned SPI1BUSY               :1;
    };
} SPI1CON2bits_t;
extern volatile SPI1CON2bits_t SPI1CON2bits __at(0x3D16);
// bitfield macros
#define _SPI1CON2_RXR_POSN                                  0x0
#define _SPI1CON2_RXR_POSITION                              0x0
#define _SPI1CON2_RXR_SIZE                                  0x1
#define _SPI1CON2_RXR_LENGTH                                0x1
#define _SPI1CON2_RXR_MASK                                  0x1
#define _SPI1CON2_TXR_POSN                                  0x1
#define _SPI1CON2_TXR_POSITION                              0x1
#define _SPI1CON2_TXR_SIZE                                  0x1
#define _SPI1CON2_TXR_LENGTH                                0x1
#define _SPI1CON2_TXR_MASK                                  0x2
#define _SPI1CON2_SSET_POSN                                 0x2
#define _SPI1CON2_SSET_POSITION                             0x2
#define _SPI1CON2_SSET_SIZE                                 0x1
#define _SPI1CON2_SSET_LENGTH                               0x1
#define _SPI1CON2_SSET_MASK                                 0x4
#define _SPI1CON2_SSFLT_POSN                                0x6
#define _SPI1CON2_SSFLT_POSITION                            0x6
#define _SPI1CON2_SSFLT_SIZE                                0x1
#define _SPI1CON2_SSFLT_LENGTH                              0x1
#define _SPI1CON2_SSFLT_MASK                                0x40
#define _SPI1CON2_BUSY_POSN                                 0x7
#define _SPI1CON2_BUSY_POSITION                             0x7
#define _SPI1CON2_BUSY_SIZE                                 0x1
#define _SPI1CON2_BUSY_LENGTH                               0x1
#define _SPI1CON2_BUSY_MASK                                 0x80
#define _SPI1CON2_SPI1RXR_POSN                              0x0
#define _SPI1CON2_SPI1RXR_POSITION                          0x0
#define _SPI1CON2_SPI1RXR_SIZE                              0x1
#define _SPI1CON2_SPI1RXR_LENGTH                            0x1
#define _SPI1CON2_SPI1RXR_MASK                              0x1
#define _SPI1CON2_SPI1TXR_POSN                              0x1
#define _SPI1CON2_SPI1TXR_POSITION                          0x1
#define _SPI1CON2_SPI1TXR_SIZE                              0x1
#define _SPI1CON2_SPI1TXR_LENGTH                            0x1
#define _SPI1CON2_SPI1TXR_MASK                              0x2
#define _SPI1CON2_SPI1SSET_POSN                             0x2
#define _SPI1CON2_SPI1SSET_POSITION                         0x2
#define _SPI1CON2_SPI1SSET_SIZE                             0x1
#define _SPI1CON2_SPI1SSET_LENGTH                           0x1
#define _SPI1CON2_SPI1SSET_MASK                             0x4
#define _SPI1CON2_SPI1SSFLT_POSN                            0x6
#define _SPI1CON2_SPI1SSFLT_POSITION                        0x6
#define _SPI1CON2_SPI1SSFLT_SIZE                            0x1
#define _SPI1CON2_SPI1SSFLT_LENGTH                          0x1
#define _SPI1CON2_SPI1SSFLT_MASK                            0x40
#define _SPI1CON2_SPI1BUSY_POSN                             0x7
#define _SPI1CON2_SPI1BUSY_POSITION                         0x7
#define _SPI1CON2_SPI1BUSY_SIZE                             0x1
#define _SPI1CON2_SPI1BUSY_LENGTH                           0x1
#define _SPI1CON2_SPI1BUSY_MASK                             0x80

// Register: SPI1STATUS
#define SPI1STATUS SPI1STATUS
extern volatile unsigned char           SPI1STATUS          __at(0x3D17);
#ifndef _LIB_BUILD
asm("SPI1STATUS equ 03D17h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RXBF                   :1;
        unsigned                        :1;
        unsigned CLRBF                  :1;
        unsigned RXRE                   :1;
        unsigned                        :1;
        unsigned TXBE                   :1;
        unsigned                        :1;
        unsigned TXWE                   :1;
    };
    struct {
        unsigned SPI1RXBF               :1;
        unsigned                        :1;
        unsigned SPI1CLRBF              :1;
        unsigned SPI1RXRE               :1;
        unsigned                        :1;
        unsigned SPI1TXBE               :1;
        unsigned                        :1;
        unsigned SPI1TXWE               :1;
    };
} SPI1STATUSbits_t;
extern volatile SPI1STATUSbits_t SPI1STATUSbits __at(0x3D17);
// bitfield macros
#define _SPI1STATUS_RXBF_POSN                               0x0
#define _SPI1STATUS_RXBF_POSITION                           0x0
#define _SPI1STATUS_RXBF_SIZE                               0x1
#define _SPI1STATUS_RXBF_LENGTH                             0x1
#define _SPI1STATUS_RXBF_MASK                               0x1
#define _SPI1STATUS_CLRBF_POSN                              0x2
#define _SPI1STATUS_CLRBF_POSITION                          0x2
#define _SPI1STATUS_CLRBF_SIZE                              0x1
#define _SPI1STATUS_CLRBF_LENGTH                            0x1
#define _SPI1STATUS_CLRBF_MASK                              0x4
#define _SPI1STATUS_RXRE_POSN                               0x3
#define _SPI1STATUS_RXRE_POSITION                           0x3
#define _SPI1STATUS_RXRE_SIZE                               0x1
#define _SPI1STATUS_RXRE_LENGTH                             0x1
#define _SPI1STATUS_RXRE_MASK                               0x8
#define _SPI1STATUS_TXBE_POSN                               0x5
#define _SPI1STATUS_TXBE_POSITION                           0x5
#define _SPI1STATUS_TXBE_SIZE                               0x1
#define _SPI1STATUS_TXBE_LENGTH                             0x1
#define _SPI1STATUS_TXBE_MASK                               0x20
#define _SPI1STATUS_TXWE_POSN                               0x7
#define _SPI1STATUS_TXWE_POSITION                           0x7
#define _SPI1STATUS_TXWE_SIZE                               0x1
#define _SPI1STATUS_TXWE_LENGTH                             0x1
#define _SPI1STATUS_TXWE_MASK                               0x80
#define _SPI1STATUS_SPI1RXBF_POSN                           0x0
#define _SPI1STATUS_SPI1RXBF_POSITION                       0x0
#define _SPI1STATUS_SPI1RXBF_SIZE                           0x1
#define _SPI1STATUS_SPI1RXBF_LENGTH                         0x1
#define _SPI1STATUS_SPI1RXBF_MASK                           0x1
#define _SPI1STATUS_SPI1CLRBF_POSN                          0x2
#define _SPI1STATUS_SPI1CLRBF_POSITION                      0x2
#define _SPI1STATUS_SPI1CLRBF_SIZE                          0x1
#define _SPI1STATUS_SPI1CLRBF_LENGTH                        0x1
#define _SPI1STATUS_SPI1CLRBF_MASK                          0x4
#define _SPI1STATUS_SPI1RXRE_POSN                           0x3
#define _SPI1STATUS_SPI1RXRE_POSITION                       0x3
#define _SPI1STATUS_SPI1RXRE_SIZE                           0x1
#define _SPI1STATUS_SPI1RXRE_LENGTH                         0x1
#define _SPI1STATUS_SPI1RXRE_MASK                           0x8
#define _SPI1STATUS_SPI1TXBE_POSN                           0x5
#define _SPI1STATUS_SPI1TXBE_POSITION                       0x5
#define _SPI1STATUS_SPI1TXBE_SIZE                           0x1
#define _SPI1STATUS_SPI1TXBE_LENGTH                         0x1
#define _SPI1STATUS_SPI1TXBE_MASK                           0x20
#define _SPI1STATUS_SPI1TXWE_POSN                           0x7
#define _SPI1STATUS_SPI1TXWE_POSITION                       0x7
#define _SPI1STATUS_SPI1TXWE_SIZE                           0x1
#define _SPI1STATUS_SPI1TXWE_LENGTH                         0x1
#define _SPI1STATUS_SPI1TXWE_MASK                           0x80

// Register: SPI1TWIDTH
#define SPI1TWIDTH SPI1TWIDTH
extern volatile unsigned char           SPI1TWIDTH          __at(0x3D18);
#ifndef _LIB_BUILD
asm("SPI1TWIDTH equ 03D18h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TWIDTH                 :3;
    };
    struct {
        unsigned TWIDTH0                :1;
        unsigned TWIDTH1                :1;
        unsigned TWIDTH2                :1;
    };
} SPI1TWIDTHbits_t;
extern volatile SPI1TWIDTHbits_t SPI1TWIDTHbits __at(0x3D18);
// bitfield macros
#define _SPI1TWIDTH_TWIDTH_POSN                             0x0
#define _SPI1TWIDTH_TWIDTH_POSITION                         0x0
#define _SPI1TWIDTH_TWIDTH_SIZE                             0x3
#define _SPI1TWIDTH_TWIDTH_LENGTH                           0x3
#define _SPI1TWIDTH_TWIDTH_MASK                             0x7
#define _SPI1TWIDTH_TWIDTH0_POSN                            0x0
#define _SPI1TWIDTH_TWIDTH0_POSITION                        0x0
#define _SPI1TWIDTH_TWIDTH0_SIZE                            0x1
#define _SPI1TWIDTH_TWIDTH0_LENGTH                          0x1
#define _SPI1TWIDTH_TWIDTH0_MASK                            0x1
#define _SPI1TWIDTH_TWIDTH1_POSN                            0x1
#define _SPI1TWIDTH_TWIDTH1_POSITION                        0x1
#define _SPI1TWIDTH_TWIDTH1_SIZE                            0x1
#define _SPI1TWIDTH_TWIDTH1_LENGTH                          0x1
#define _SPI1TWIDTH_TWIDTH1_MASK                            0x2
#define _SPI1TWIDTH_TWIDTH2_POSN                            0x2
#define _SPI1TWIDTH_TWIDTH2_POSITION                        0x2
#define _SPI1TWIDTH_TWIDTH2_SIZE                            0x1
#define _SPI1TWIDTH_TWIDTH2_LENGTH                          0x1
#define _SPI1TWIDTH_TWIDTH2_MASK                            0x4

// Register: SPI1BAUD
#define SPI1BAUD SPI1BAUD
extern volatile unsigned char           SPI1BAUD            __at(0x3D19);
#ifndef _LIB_BUILD
asm("SPI1BAUD equ 03D19h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BAUD                   :8;
    };
    struct {
        unsigned BAUD0                  :1;
        unsigned BAUD1                  :1;
        unsigned BAUD2                  :1;
        unsigned BAUD3                  :1;
        unsigned BAUD4                  :1;
        unsigned BAUD5                  :1;
        unsigned BAUD6                  :1;
        unsigned BAUD7                  :1;
    };
} SPI1BAUDbits_t;
extern volatile SPI1BAUDbits_t SPI1BAUDbits __at(0x3D19);
// bitfield macros
#define _SPI1BAUD_BAUD_POSN                                 0x0
#define _SPI1BAUD_BAUD_POSITION                             0x0
#define _SPI1BAUD_BAUD_SIZE                                 0x8
#define _SPI1BAUD_BAUD_LENGTH                               0x8
#define _SPI1BAUD_BAUD_MASK                                 0xFF
#define _SPI1BAUD_BAUD0_POSN                                0x0
#define _SPI1BAUD_BAUD0_POSITION                            0x0
#define _SPI1BAUD_BAUD0_SIZE                                0x1
#define _SPI1BAUD_BAUD0_LENGTH                              0x1
#define _SPI1BAUD_BAUD0_MASK                                0x1
#define _SPI1BAUD_BAUD1_POSN                                0x1
#define _SPI1BAUD_BAUD1_POSITION                            0x1
#define _SPI1BAUD_BAUD1_SIZE                                0x1
#define _SPI1BAUD_BAUD1_LENGTH                              0x1
#define _SPI1BAUD_BAUD1_MASK                                0x2
#define _SPI1BAUD_BAUD2_POSN                                0x2
#define _SPI1BAUD_BAUD2_POSITION                            0x2
#define _SPI1BAUD_BAUD2_SIZE                                0x1
#define _SPI1BAUD_BAUD2_LENGTH                              0x1
#define _SPI1BAUD_BAUD2_MASK                                0x4
#define _SPI1BAUD_BAUD3_POSN                                0x3
#define _SPI1BAUD_BAUD3_POSITION                            0x3
#define _SPI1BAUD_BAUD3_SIZE                                0x1
#define _SPI1BAUD_BAUD3_LENGTH                              0x1
#define _SPI1BAUD_BAUD3_MASK                                0x8
#define _SPI1BAUD_BAUD4_POSN                                0x4
#define _SPI1BAUD_BAUD4_POSITION                            0x4
#define _SPI1BAUD_BAUD4_SIZE                                0x1
#define _SPI1BAUD_BAUD4_LENGTH                              0x1
#define _SPI1BAUD_BAUD4_MASK                                0x10
#define _SPI1BAUD_BAUD5_POSN                                0x5
#define _SPI1BAUD_BAUD5_POSITION                            0x5
#define _SPI1BAUD_BAUD5_SIZE                                0x1
#define _SPI1BAUD_BAUD5_LENGTH                              0x1
#define _SPI1BAUD_BAUD5_MASK                                0x20
#define _SPI1BAUD_BAUD6_POSN                                0x6
#define _SPI1BAUD_BAUD6_POSITION                            0x6
#define _SPI1BAUD_BAUD6_SIZE                                0x1
#define _SPI1BAUD_BAUD6_LENGTH                              0x1
#define _SPI1BAUD_BAUD6_MASK                                0x40
#define _SPI1BAUD_BAUD7_POSN                                0x7
#define _SPI1BAUD_BAUD7_POSITION                            0x7
#define _SPI1BAUD_BAUD7_SIZE                                0x1
#define _SPI1BAUD_BAUD7_LENGTH                              0x1
#define _SPI1BAUD_BAUD7_MASK                                0x80

// Register: SPI1INTF
#define SPI1INTF SPI1INTF
extern volatile unsigned char           SPI1INTF            __at(0x3D1A);
#ifndef _LIB_BUILD
asm("SPI1INTF equ 03D1Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :1;
        unsigned TXUIF                  :1;
        unsigned RXOIF                  :1;
        unsigned                        :1;
        unsigned EOSIF                  :1;
        unsigned SOSIF                  :1;
        unsigned TCZIF                  :1;
        unsigned SRMTIF                 :1;
    };
    struct {
        unsigned                        :1;
        unsigned SPI1TXUIF              :1;
        unsigned SPI1RXOIF              :1;
        unsigned                        :1;
        unsigned SPI1EOSIF              :1;
        unsigned SPI1SOSIF              :1;
        unsigned SPI1TCZIF              :1;
        unsigned SPI1SRMTIF             :1;
    };
} SPI1INTFbits_t;
extern volatile SPI1INTFbits_t SPI1INTFbits __at(0x3D1A);
// bitfield macros
#define _SPI1INTF_TXUIF_POSN                                0x1
#define _SPI1INTF_TXUIF_POSITION                            0x1
#define _SPI1INTF_TXUIF_SIZE                                0x1
#define _SPI1INTF_TXUIF_LENGTH                              0x1
#define _SPI1INTF_TXUIF_MASK                                0x2
#define _SPI1INTF_RXOIF_POSN                                0x2
#define _SPI1INTF_RXOIF_POSITION                            0x2
#define _SPI1INTF_RXOIF_SIZE                                0x1
#define _SPI1INTF_RXOIF_LENGTH                              0x1
#define _SPI1INTF_RXOIF_MASK                                0x4
#define _SPI1INTF_EOSIF_POSN                                0x4
#define _SPI1INTF_EOSIF_POSITION                            0x4
#define _SPI1INTF_EOSIF_SIZE                                0x1
#define _SPI1INTF_EOSIF_LENGTH                              0x1
#define _SPI1INTF_EOSIF_MASK                                0x10
#define _SPI1INTF_SOSIF_POSN                                0x5
#define _SPI1INTF_SOSIF_POSITION                            0x5
#define _SPI1INTF_SOSIF_SIZE                                0x1
#define _SPI1INTF_SOSIF_LENGTH                              0x1
#define _SPI1INTF_SOSIF_MASK                                0x20
#define _SPI1INTF_TCZIF_POSN                                0x6
#define _SPI1INTF_TCZIF_POSITION                            0x6
#define _SPI1INTF_TCZIF_SIZE                                0x1
#define _SPI1INTF_TCZIF_LENGTH                              0x1
#define _SPI1INTF_TCZIF_MASK                                0x40
#define _SPI1INTF_SRMTIF_POSN                               0x7
#define _SPI1INTF_SRMTIF_POSITION                           0x7
#define _SPI1INTF_SRMTIF_SIZE                               0x1
#define _SPI1INTF_SRMTIF_LENGTH                             0x1
#define _SPI1INTF_SRMTIF_MASK                               0x80
#define _SPI1INTF_SPI1TXUIF_POSN                            0x1
#define _SPI1INTF_SPI1TXUIF_POSITION                        0x1
#define _SPI1INTF_SPI1TXUIF_SIZE                            0x1
#define _SPI1INTF_SPI1TXUIF_LENGTH                          0x1
#define _SPI1INTF_SPI1TXUIF_MASK                            0x2
#define _SPI1INTF_SPI1RXOIF_POSN                            0x2
#define _SPI1INTF_SPI1RXOIF_POSITION                        0x2
#define _SPI1INTF_SPI1RXOIF_SIZE                            0x1
#define _SPI1INTF_SPI1RXOIF_LENGTH                          0x1
#define _SPI1INTF_SPI1RXOIF_MASK                            0x4
#define _SPI1INTF_SPI1EOSIF_POSN                            0x4
#define _SPI1INTF_SPI1EOSIF_POSITION                        0x4
#define _SPI1INTF_SPI1EOSIF_SIZE                            0x1
#define _SPI1INTF_SPI1EOSIF_LENGTH                          0x1
#define _SPI1INTF_SPI1EOSIF_MASK                            0x10
#define _SPI1INTF_SPI1SOSIF_POSN                            0x5
#define _SPI1INTF_SPI1SOSIF_POSITION                        0x5
#define _SPI1INTF_SPI1SOSIF_SIZE                            0x1
#define _SPI1INTF_SPI1SOSIF_LENGTH                          0x1
#define _SPI1INTF_SPI1SOSIF_MASK                            0x20
#define _SPI1INTF_SPI1TCZIF_POSN                            0x6
#define _SPI1INTF_SPI1TCZIF_POSITION                        0x6
#define _SPI1INTF_SPI1TCZIF_SIZE                            0x1
#define _SPI1INTF_SPI1TCZIF_LENGTH                          0x1
#define _SPI1INTF_SPI1TCZIF_MASK                            0x40
#define _SPI1INTF_SPI1SRMTIF_POSN                           0x7
#define _SPI1INTF_SPI1SRMTIF_POSITION                       0x7
#define _SPI1INTF_SPI1SRMTIF_SIZE                           0x1
#define _SPI1INTF_SPI1SRMTIF_LENGTH                         0x1
#define _SPI1INTF_SPI1SRMTIF_MASK                           0x80

// Register: SPI1INTE
#define SPI1INTE SPI1INTE
extern volatile unsigned char           SPI1INTE            __at(0x3D1B);
#ifndef _LIB_BUILD
asm("SPI1INTE equ 03D1Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :1;
        unsigned TXUIE                  :1;
        unsigned RXOIE                  :1;
        unsigned                        :1;
        unsigned EOSIE                  :1;
        unsigned SOSIE                  :1;
        unsigned TCZIE                  :1;
        unsigned SRMTIE                 :1;
    };
    struct {
        unsigned                        :1;
        unsigned SPI1TXUIE              :1;
        unsigned SPI1RXOIE              :1;
        unsigned                        :1;
        unsigned SPI1EOSIE              :1;
        unsigned SPI1SOSIE              :1;
        unsigned SPI1TCZIE              :1;
        unsigned SPI1SRMTIE             :1;
    };
} SPI1INTEbits_t;
extern volatile SPI1INTEbits_t SPI1INTEbits __at(0x3D1B);
// bitfield macros
#define _SPI1INTE_TXUIE_POSN                                0x1
#define _SPI1INTE_TXUIE_POSITION                            0x1
#define _SPI1INTE_TXUIE_SIZE                                0x1
#define _SPI1INTE_TXUIE_LENGTH                              0x1
#define _SPI1INTE_TXUIE_MASK                                0x2
#define _SPI1INTE_RXOIE_POSN                                0x2
#define _SPI1INTE_RXOIE_POSITION                            0x2
#define _SPI1INTE_RXOIE_SIZE                                0x1
#define _SPI1INTE_RXOIE_LENGTH                              0x1
#define _SPI1INTE_RXOIE_MASK                                0x4
#define _SPI1INTE_EOSIE_POSN                                0x4
#define _SPI1INTE_EOSIE_POSITION                            0x4
#define _SPI1INTE_EOSIE_SIZE                                0x1
#define _SPI1INTE_EOSIE_LENGTH                              0x1
#define _SPI1INTE_EOSIE_MASK                                0x10
#define _SPI1INTE_SOSIE_POSN                                0x5
#define _SPI1INTE_SOSIE_POSITION                            0x5
#define _SPI1INTE_SOSIE_SIZE                                0x1
#define _SPI1INTE_SOSIE_LENGTH                              0x1
#define _SPI1INTE_SOSIE_MASK                                0x20
#define _SPI1INTE_TCZIE_POSN                                0x6
#define _SPI1INTE_TCZIE_POSITION                            0x6
#define _SPI1INTE_TCZIE_SIZE                                0x1
#define _SPI1INTE_TCZIE_LENGTH                              0x1
#define _SPI1INTE_TCZIE_MASK                                0x40
#define _SPI1INTE_SRMTIE_POSN                               0x7
#define _SPI1INTE_SRMTIE_POSITION                           0x7
#define _SPI1INTE_SRMTIE_SIZE                               0x1
#define _SPI1INTE_SRMTIE_LENGTH                             0x1
#define _SPI1INTE_SRMTIE_MASK                               0x80
#define _SPI1INTE_SPI1TXUIE_POSN                            0x1
#define _SPI1INTE_SPI1TXUIE_POSITION                        0x1
#define _SPI1INTE_SPI1TXUIE_SIZE                            0x1
#define _SPI1INTE_SPI1TXUIE_LENGTH                          0x1
#define _SPI1INTE_SPI1TXUIE_MASK                            0x2
#define _SPI1INTE_SPI1RXOIE_POSN                            0x2
#define _SPI1INTE_SPI1RXOIE_POSITION                        0x2
#define _SPI1INTE_SPI1RXOIE_SIZE                            0x1
#define _SPI1INTE_SPI1RXOIE_LENGTH                          0x1
#define _SPI1INTE_SPI1RXOIE_MASK                            0x4
#define _SPI1INTE_SPI1EOSIE_POSN                            0x4
#define _SPI1INTE_SPI1EOSIE_POSITION                        0x4
#define _SPI1INTE_SPI1EOSIE_SIZE                            0x1
#define _SPI1INTE_SPI1EOSIE_LENGTH                          0x1
#define _SPI1INTE_SPI1EOSIE_MASK                            0x10
#define _SPI1INTE_SPI1SOSIE_POSN                            0x5
#define _SPI1INTE_SPI1SOSIE_POSITION                        0x5
#define _SPI1INTE_SPI1SOSIE_SIZE                            0x1
#define _SPI1INTE_SPI1SOSIE_LENGTH                          0x1
#define _SPI1INTE_SPI1SOSIE_MASK                            0x20
#define _SPI1INTE_SPI1TCZIE_POSN                            0x6
#define _SPI1INTE_SPI1TCZIE_POSITION                        0x6
#define _SPI1INTE_SPI1TCZIE_SIZE                            0x1
#define _SPI1INTE_SPI1TCZIE_LENGTH                          0x1
#define _SPI1INTE_SPI1TCZIE_MASK                            0x40
#define _SPI1INTE_SPI1SRMTIE_POSN                           0x7
#define _SPI1INTE_SPI1SRMTIE_POSITION                       0x7
#define _SPI1INTE_SPI1SRMTIE_SIZE                           0x1
#define _SPI1INTE_SPI1SRMTIE_LENGTH                         0x1
#define _SPI1INTE_SPI1SRMTIE_MASK                           0x80

// Register: SPI1CLK
#define SPI1CLK SPI1CLK
extern volatile unsigned char           SPI1CLK             __at(0x3D1C);
#ifndef _LIB_BUILD
asm("SPI1CLK equ 03D1Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLKSEL                 :8;
    };
    struct {
        unsigned CLKSEL0                :1;
        unsigned CLKSEL1                :1;
        unsigned CLKSEL2                :1;
        unsigned CLKSEL3                :1;
    };
    struct {
        unsigned SPI1CLKSEL             :8;
    };
    struct {
        unsigned SPI1CLKSEL0            :1;
        unsigned SPI1CLKSEL1            :1;
        unsigned SPI1CLKSEL2            :1;
        unsigned SPI1CLKSEL3            :1;
    };
} SPI1CLKbits_t;
extern volatile SPI1CLKbits_t SPI1CLKbits __at(0x3D1C);
// bitfield macros
#define _SPI1CLK_CLKSEL_POSN                                0x0
#define _SPI1CLK_CLKSEL_POSITION                            0x0
#define _SPI1CLK_CLKSEL_SIZE                                0x8
#define _SPI1CLK_CLKSEL_LENGTH                              0x8
#define _SPI1CLK_CLKSEL_MASK                                0xFF
#define _SPI1CLK_CLKSEL0_POSN                               0x0
#define _SPI1CLK_CLKSEL0_POSITION                           0x0
#define _SPI1CLK_CLKSEL0_SIZE                               0x1
#define _SPI1CLK_CLKSEL0_LENGTH                             0x1
#define _SPI1CLK_CLKSEL0_MASK                               0x1
#define _SPI1CLK_CLKSEL1_POSN                               0x1
#define _SPI1CLK_CLKSEL1_POSITION                           0x1
#define _SPI1CLK_CLKSEL1_SIZE                               0x1
#define _SPI1CLK_CLKSEL1_LENGTH                             0x1
#define _SPI1CLK_CLKSEL1_MASK                               0x2
#define _SPI1CLK_CLKSEL2_POSN                               0x2
#define _SPI1CLK_CLKSEL2_POSITION                           0x2
#define _SPI1CLK_CLKSEL2_SIZE                               0x1
#define _SPI1CLK_CLKSEL2_LENGTH                             0x1
#define _SPI1CLK_CLKSEL2_MASK                               0x4
#define _SPI1CLK_CLKSEL3_POSN                               0x3
#define _SPI1CLK_CLKSEL3_POSITION                           0x3
#define _SPI1CLK_CLKSEL3_SIZE                               0x1
#define _SPI1CLK_CLKSEL3_LENGTH                             0x1
#define _SPI1CLK_CLKSEL3_MASK                               0x8
#define _SPI1CLK_SPI1CLKSEL_POSN                            0x0
#define _SPI1CLK_SPI1CLKSEL_POSITION                        0x0
#define _SPI1CLK_SPI1CLKSEL_SIZE                            0x8
#define _SPI1CLK_SPI1CLKSEL_LENGTH                          0x8
#define _SPI1CLK_SPI1CLKSEL_MASK                            0xFF
#define _SPI1CLK_SPI1CLKSEL0_POSN                           0x0
#define _SPI1CLK_SPI1CLKSEL0_POSITION                       0x0
#define _SPI1CLK_SPI1CLKSEL0_SIZE                           0x1
#define _SPI1CLK_SPI1CLKSEL0_LENGTH                         0x1
#define _SPI1CLK_SPI1CLKSEL0_MASK                           0x1
#define _SPI1CLK_SPI1CLKSEL1_POSN                           0x1
#define _SPI1CLK_SPI1CLKSEL1_POSITION                       0x1
#define _SPI1CLK_SPI1CLKSEL1_SIZE                           0x1
#define _SPI1CLK_SPI1CLKSEL1_LENGTH                         0x1
#define _SPI1CLK_SPI1CLKSEL1_MASK                           0x2
#define _SPI1CLK_SPI1CLKSEL2_POSN                           0x2
#define _SPI1CLK_SPI1CLKSEL2_POSITION                       0x2
#define _SPI1CLK_SPI1CLKSEL2_SIZE                           0x1
#define _SPI1CLK_SPI1CLKSEL2_LENGTH                         0x1
#define _SPI1CLK_SPI1CLKSEL2_MASK                           0x4
#define _SPI1CLK_SPI1CLKSEL3_POSN                           0x3
#define _SPI1CLK_SPI1CLKSEL3_POSITION                       0x3
#define _SPI1CLK_SPI1CLKSEL3_SIZE                           0x1
#define _SPI1CLK_SPI1CLKSEL3_LENGTH                         0x1
#define _SPI1CLK_SPI1CLKSEL3_MASK                           0x8

// Register: I2C2RXB
#define I2C2RXB I2C2RXB
extern volatile unsigned char           I2C2RXB             __at(0x3D54);
#ifndef _LIB_BUILD
asm("I2C2RXB equ 03D54h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RXB                    :8;
    };
} I2C2RXBbits_t;
extern volatile I2C2RXBbits_t I2C2RXBbits __at(0x3D54);
// bitfield macros
#define _I2C2RXB_RXB_POSN                                   0x0
#define _I2C2RXB_RXB_POSITION                               0x0
#define _I2C2RXB_RXB_SIZE                                   0x8
#define _I2C2RXB_RXB_LENGTH                                 0x8
#define _I2C2RXB_RXB_MASK                                   0xFF

// Register: I2C2TXB
#define I2C2TXB I2C2TXB
extern volatile unsigned char           I2C2TXB             __at(0x3D55);
#ifndef _LIB_BUILD
asm("I2C2TXB equ 03D55h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TXB                    :8;
    };
} I2C2TXBbits_t;
extern volatile I2C2TXBbits_t I2C2TXBbits __at(0x3D55);
// bitfield macros
#define _I2C2TXB_TXB_POSN                                   0x0
#define _I2C2TXB_TXB_POSITION                               0x0
#define _I2C2TXB_TXB_SIZE                                   0x8
#define _I2C2TXB_TXB_LENGTH                                 0x8
#define _I2C2TXB_TXB_MASK                                   0xFF

// Register: I2C2CNT
#define I2C2CNT I2C2CNT
extern volatile unsigned char           I2C2CNT             __at(0x3D56);
#ifndef _LIB_BUILD
asm("I2C2CNT equ 03D56h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CNT                    :8;
    };
    struct {
        unsigned CNT0                   :1;
        unsigned CNT1                   :1;
        unsigned CNT2                   :1;
        unsigned CNT3                   :1;
        unsigned CNT4                   :1;
        unsigned CNT5                   :1;
        unsigned CNT6                   :1;
        unsigned CNT7                   :1;
    };
} I2C2CNTbits_t;
extern volatile I2C2CNTbits_t I2C2CNTbits __at(0x3D56);
// bitfield macros
#define _I2C2CNT_CNT_POSN                                   0x0
#define _I2C2CNT_CNT_POSITION                               0x0
#define _I2C2CNT_CNT_SIZE                                   0x8
#define _I2C2CNT_CNT_LENGTH                                 0x8
#define _I2C2CNT_CNT_MASK                                   0xFF
#define _I2C2CNT_CNT0_POSN                                  0x0
#define _I2C2CNT_CNT0_POSITION                              0x0
#define _I2C2CNT_CNT0_SIZE                                  0x1
#define _I2C2CNT_CNT0_LENGTH                                0x1
#define _I2C2CNT_CNT0_MASK                                  0x1
#define _I2C2CNT_CNT1_POSN                                  0x1
#define _I2C2CNT_CNT1_POSITION                              0x1
#define _I2C2CNT_CNT1_SIZE                                  0x1
#define _I2C2CNT_CNT1_LENGTH                                0x1
#define _I2C2CNT_CNT1_MASK                                  0x2
#define _I2C2CNT_CNT2_POSN                                  0x2
#define _I2C2CNT_CNT2_POSITION                              0x2
#define _I2C2CNT_CNT2_SIZE                                  0x1
#define _I2C2CNT_CNT2_LENGTH                                0x1
#define _I2C2CNT_CNT2_MASK                                  0x4
#define _I2C2CNT_CNT3_POSN                                  0x3
#define _I2C2CNT_CNT3_POSITION                              0x3
#define _I2C2CNT_CNT3_SIZE                                  0x1
#define _I2C2CNT_CNT3_LENGTH                                0x1
#define _I2C2CNT_CNT3_MASK                                  0x8
#define _I2C2CNT_CNT4_POSN                                  0x4
#define _I2C2CNT_CNT4_POSITION                              0x4
#define _I2C2CNT_CNT4_SIZE                                  0x1
#define _I2C2CNT_CNT4_LENGTH                                0x1
#define _I2C2CNT_CNT4_MASK                                  0x10
#define _I2C2CNT_CNT5_POSN                                  0x5
#define _I2C2CNT_CNT5_POSITION                              0x5
#define _I2C2CNT_CNT5_SIZE                                  0x1
#define _I2C2CNT_CNT5_LENGTH                                0x1
#define _I2C2CNT_CNT5_MASK                                  0x20
#define _I2C2CNT_CNT6_POSN                                  0x6
#define _I2C2CNT_CNT6_POSITION                              0x6
#define _I2C2CNT_CNT6_SIZE                                  0x1
#define _I2C2CNT_CNT6_LENGTH                                0x1
#define _I2C2CNT_CNT6_MASK                                  0x40
#define _I2C2CNT_CNT7_POSN                                  0x7
#define _I2C2CNT_CNT7_POSITION                              0x7
#define _I2C2CNT_CNT7_SIZE                                  0x1
#define _I2C2CNT_CNT7_LENGTH                                0x1
#define _I2C2CNT_CNT7_MASK                                  0x80

// Register: I2C2ADB0
#define I2C2ADB0 I2C2ADB0
extern volatile unsigned char           I2C2ADB0            __at(0x3D57);
#ifndef _LIB_BUILD
asm("I2C2ADB0 equ 03D57h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADB                    :8;
    };
} I2C2ADB0bits_t;
extern volatile I2C2ADB0bits_t I2C2ADB0bits __at(0x3D57);
// bitfield macros
#define _I2C2ADB0_ADB_POSN                                  0x0
#define _I2C2ADB0_ADB_POSITION                              0x0
#define _I2C2ADB0_ADB_SIZE                                  0x8
#define _I2C2ADB0_ADB_LENGTH                                0x8
#define _I2C2ADB0_ADB_MASK                                  0xFF

// Register: I2C2ADB1
#define I2C2ADB1 I2C2ADB1
extern volatile unsigned char           I2C2ADB1            __at(0x3D58);
#ifndef _LIB_BUILD
asm("I2C2ADB1 equ 03D58h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADB                    :8;
    };
} I2C2ADB1bits_t;
extern volatile I2C2ADB1bits_t I2C2ADB1bits __at(0x3D58);
// bitfield macros
#define _I2C2ADB1_ADB_POSN                                  0x0
#define _I2C2ADB1_ADB_POSITION                              0x0
#define _I2C2ADB1_ADB_SIZE                                  0x8
#define _I2C2ADB1_ADB_LENGTH                                0x8
#define _I2C2ADB1_ADB_MASK                                  0xFF

// Register: I2C2ADR0
#define I2C2ADR0 I2C2ADR0
extern volatile unsigned char           I2C2ADR0            __at(0x3D59);
#ifndef _LIB_BUILD
asm("I2C2ADR0 equ 03D59h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADR                    :8;
    };
} I2C2ADR0bits_t;
extern volatile I2C2ADR0bits_t I2C2ADR0bits __at(0x3D59);
// bitfield macros
#define _I2C2ADR0_ADR_POSN                                  0x0
#define _I2C2ADR0_ADR_POSITION                              0x0
#define _I2C2ADR0_ADR_SIZE                                  0x8
#define _I2C2ADR0_ADR_LENGTH                                0x8
#define _I2C2ADR0_ADR_MASK                                  0xFF

// Register: I2C2ADR1
#define I2C2ADR1 I2C2ADR1
extern volatile unsigned char           I2C2ADR1            __at(0x3D5A);
#ifndef _LIB_BUILD
asm("I2C2ADR1 equ 03D5Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :1;
        unsigned ADR                    :7;
    };
} I2C2ADR1bits_t;
extern volatile I2C2ADR1bits_t I2C2ADR1bits __at(0x3D5A);
// bitfield macros
#define _I2C2ADR1_ADR_POSN                                  0x1
#define _I2C2ADR1_ADR_POSITION                              0x1
#define _I2C2ADR1_ADR_SIZE                                  0x7
#define _I2C2ADR1_ADR_LENGTH                                0x7
#define _I2C2ADR1_ADR_MASK                                  0xFE

// Register: I2C2ADR2
#define I2C2ADR2 I2C2ADR2
extern volatile unsigned char           I2C2ADR2            __at(0x3D5B);
#ifndef _LIB_BUILD
asm("I2C2ADR2 equ 03D5Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADR                    :8;
    };
} I2C2ADR2bits_t;
extern volatile I2C2ADR2bits_t I2C2ADR2bits __at(0x3D5B);
// bitfield macros
#define _I2C2ADR2_ADR_POSN                                  0x0
#define _I2C2ADR2_ADR_POSITION                              0x0
#define _I2C2ADR2_ADR_SIZE                                  0x8
#define _I2C2ADR2_ADR_LENGTH                                0x8
#define _I2C2ADR2_ADR_MASK                                  0xFF

// Register: I2C2ADR3
#define I2C2ADR3 I2C2ADR3
extern volatile unsigned char           I2C2ADR3            __at(0x3D5C);
#ifndef _LIB_BUILD
asm("I2C2ADR3 equ 03D5Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :1;
        unsigned ADR                    :7;
    };
} I2C2ADR3bits_t;
extern volatile I2C2ADR3bits_t I2C2ADR3bits __at(0x3D5C);
// bitfield macros
#define _I2C2ADR3_ADR_POSN                                  0x1
#define _I2C2ADR3_ADR_POSITION                              0x1
#define _I2C2ADR3_ADR_SIZE                                  0x7
#define _I2C2ADR3_ADR_LENGTH                                0x7
#define _I2C2ADR3_ADR_MASK                                  0xFE

// Register: I2C2CON0
#define I2C2CON0 I2C2CON0
extern volatile unsigned char           I2C2CON0            __at(0x3D5D);
#ifndef _LIB_BUILD
asm("I2C2CON0 equ 03D5Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :3;
        unsigned MDR                    :1;
        unsigned CSTR                   :1;
        unsigned S                      :1;
        unsigned RSEN                   :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned                        :4;
        unsigned I2CEN                  :1;
    };
} I2C2CON0bits_t;
extern volatile I2C2CON0bits_t I2C2CON0bits __at(0x3D5D);
// bitfield macros
#define _I2C2CON0_MODE_POSN                                 0x0
#define _I2C2CON0_MODE_POSITION                             0x0
#define _I2C2CON0_MODE_SIZE                                 0x3
#define _I2C2CON0_MODE_LENGTH                               0x3
#define _I2C2CON0_MODE_MASK                                 0x7
#define _I2C2CON0_MDR_POSN                                  0x3
#define _I2C2CON0_MDR_POSITION                              0x3
#define _I2C2CON0_MDR_SIZE                                  0x1
#define _I2C2CON0_MDR_LENGTH                                0x1
#define _I2C2CON0_MDR_MASK                                  0x8
#define _I2C2CON0_CSTR_POSN                                 0x4
#define _I2C2CON0_CSTR_POSITION                             0x4
#define _I2C2CON0_CSTR_SIZE                                 0x1
#define _I2C2CON0_CSTR_LENGTH                               0x1
#define _I2C2CON0_CSTR_MASK                                 0x10
#define _I2C2CON0_S_POSN                                    0x5
#define _I2C2CON0_S_POSITION                                0x5
#define _I2C2CON0_S_SIZE                                    0x1
#define _I2C2CON0_S_LENGTH                                  0x1
#define _I2C2CON0_S_MASK                                    0x20
#define _I2C2CON0_RSEN_POSN                                 0x6
#define _I2C2CON0_RSEN_POSITION                             0x6
#define _I2C2CON0_RSEN_SIZE                                 0x1
#define _I2C2CON0_RSEN_LENGTH                               0x1
#define _I2C2CON0_RSEN_MASK                                 0x40
#define _I2C2CON0_EN_POSN                                   0x7
#define _I2C2CON0_EN_POSITION                               0x7
#define _I2C2CON0_EN_SIZE                                   0x1
#define _I2C2CON0_EN_LENGTH                                 0x1
#define _I2C2CON0_EN_MASK                                   0x80
#define _I2C2CON0_MODE0_POSN                                0x0
#define _I2C2CON0_MODE0_POSITION                            0x0
#define _I2C2CON0_MODE0_SIZE                                0x1
#define _I2C2CON0_MODE0_LENGTH                              0x1
#define _I2C2CON0_MODE0_MASK                                0x1
#define _I2C2CON0_MODE1_POSN                                0x1
#define _I2C2CON0_MODE1_POSITION                            0x1
#define _I2C2CON0_MODE1_SIZE                                0x1
#define _I2C2CON0_MODE1_LENGTH                              0x1
#define _I2C2CON0_MODE1_MASK                                0x2
#define _I2C2CON0_MODE2_POSN                                0x2
#define _I2C2CON0_MODE2_POSITION                            0x2
#define _I2C2CON0_MODE2_SIZE                                0x1
#define _I2C2CON0_MODE2_LENGTH                              0x1
#define _I2C2CON0_MODE2_MASK                                0x4
#define _I2C2CON0_I2CEN_POSN                                0x7
#define _I2C2CON0_I2CEN_POSITION                            0x7
#define _I2C2CON0_I2CEN_SIZE                                0x1
#define _I2C2CON0_I2CEN_LENGTH                              0x1
#define _I2C2CON0_I2CEN_MASK                                0x80

// Register: I2C2CON1
#define I2C2CON1 I2C2CON1
extern volatile unsigned char           I2C2CON1            __at(0x3D5E);
#ifndef _LIB_BUILD
asm("I2C2CON1 equ 03D5Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CSD                    :1;
        unsigned TXU                    :1;
        unsigned RXO                    :1;
        unsigned                        :1;
        unsigned ACKT                   :1;
        unsigned ACKSTAT                :1;
        unsigned ACKDT                  :1;
        unsigned ACKCNT                 :1;
    };
} I2C2CON1bits_t;
extern volatile I2C2CON1bits_t I2C2CON1bits __at(0x3D5E);
// bitfield macros
#define _I2C2CON1_CSD_POSN                                  0x0
#define _I2C2CON1_CSD_POSITION                              0x0
#define _I2C2CON1_CSD_SIZE                                  0x1
#define _I2C2CON1_CSD_LENGTH                                0x1
#define _I2C2CON1_CSD_MASK                                  0x1
#define _I2C2CON1_TXU_POSN                                  0x1
#define _I2C2CON1_TXU_POSITION                              0x1
#define _I2C2CON1_TXU_SIZE                                  0x1
#define _I2C2CON1_TXU_LENGTH                                0x1
#define _I2C2CON1_TXU_MASK                                  0x2
#define _I2C2CON1_RXO_POSN                                  0x2
#define _I2C2CON1_RXO_POSITION                              0x2
#define _I2C2CON1_RXO_SIZE                                  0x1
#define _I2C2CON1_RXO_LENGTH                                0x1
#define _I2C2CON1_RXO_MASK                                  0x4
#define _I2C2CON1_ACKT_POSN                                 0x4
#define _I2C2CON1_ACKT_POSITION                             0x4
#define _I2C2CON1_ACKT_SIZE                                 0x1
#define _I2C2CON1_ACKT_LENGTH                               0x1
#define _I2C2CON1_ACKT_MASK                                 0x10
#define _I2C2CON1_ACKSTAT_POSN                              0x5
#define _I2C2CON1_ACKSTAT_POSITION                          0x5
#define _I2C2CON1_ACKSTAT_SIZE                              0x1
#define _I2C2CON1_ACKSTAT_LENGTH                            0x1
#define _I2C2CON1_ACKSTAT_MASK                              0x20
#define _I2C2CON1_ACKDT_POSN                                0x6
#define _I2C2CON1_ACKDT_POSITION                            0x6
#define _I2C2CON1_ACKDT_SIZE                                0x1
#define _I2C2CON1_ACKDT_LENGTH                              0x1
#define _I2C2CON1_ACKDT_MASK                                0x40
#define _I2C2CON1_ACKCNT_POSN                               0x7
#define _I2C2CON1_ACKCNT_POSITION                           0x7
#define _I2C2CON1_ACKCNT_SIZE                               0x1
#define _I2C2CON1_ACKCNT_LENGTH                             0x1
#define _I2C2CON1_ACKCNT_MASK                               0x80

// Register: I2C2CON2
#define I2C2CON2 I2C2CON2
extern volatile unsigned char           I2C2CON2            __at(0x3D5F);
#ifndef _LIB_BUILD
asm("I2C2CON2 equ 03D5Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BFRET                  :2;
        unsigned SDAHT                  :2;
        unsigned ABD                    :1;
        unsigned FME                    :1;
        unsigned GCEN                   :1;
        unsigned ACNT                   :1;
    };
    struct {
        unsigned BFRET0                 :1;
        unsigned BFRET1                 :1;
        unsigned SDAHT0                 :1;
        unsigned SDAHT1                 :1;
    };
} I2C2CON2bits_t;
extern volatile I2C2CON2bits_t I2C2CON2bits __at(0x3D5F);
// bitfield macros
#define _I2C2CON2_BFRET_POSN                                0x0
#define _I2C2CON2_BFRET_POSITION                            0x0
#define _I2C2CON2_BFRET_SIZE                                0x2
#define _I2C2CON2_BFRET_LENGTH                              0x2
#define _I2C2CON2_BFRET_MASK                                0x3
#define _I2C2CON2_SDAHT_POSN                                0x2
#define _I2C2CON2_SDAHT_POSITION                            0x2
#define _I2C2CON2_SDAHT_SIZE                                0x2
#define _I2C2CON2_SDAHT_LENGTH                              0x2
#define _I2C2CON2_SDAHT_MASK                                0xC
#define _I2C2CON2_ABD_POSN                                  0x4
#define _I2C2CON2_ABD_POSITION                              0x4
#define _I2C2CON2_ABD_SIZE                                  0x1
#define _I2C2CON2_ABD_LENGTH                                0x1
#define _I2C2CON2_ABD_MASK                                  0x10
#define _I2C2CON2_FME_POSN                                  0x5
#define _I2C2CON2_FME_POSITION                              0x5
#define _I2C2CON2_FME_SIZE                                  0x1
#define _I2C2CON2_FME_LENGTH                                0x1
#define _I2C2CON2_FME_MASK                                  0x20
#define _I2C2CON2_GCEN_POSN                                 0x6
#define _I2C2CON2_GCEN_POSITION                             0x6
#define _I2C2CON2_GCEN_SIZE                                 0x1
#define _I2C2CON2_GCEN_LENGTH                               0x1
#define _I2C2CON2_GCEN_MASK                                 0x40
#define _I2C2CON2_ACNT_POSN                                 0x7
#define _I2C2CON2_ACNT_POSITION                             0x7
#define _I2C2CON2_ACNT_SIZE                                 0x1
#define _I2C2CON2_ACNT_LENGTH                               0x1
#define _I2C2CON2_ACNT_MASK                                 0x80
#define _I2C2CON2_BFRET0_POSN                               0x0
#define _I2C2CON2_BFRET0_POSITION                           0x0
#define _I2C2CON2_BFRET0_SIZE                               0x1
#define _I2C2CON2_BFRET0_LENGTH                             0x1
#define _I2C2CON2_BFRET0_MASK                               0x1
#define _I2C2CON2_BFRET1_POSN                               0x1
#define _I2C2CON2_BFRET1_POSITION                           0x1
#define _I2C2CON2_BFRET1_SIZE                               0x1
#define _I2C2CON2_BFRET1_LENGTH                             0x1
#define _I2C2CON2_BFRET1_MASK                               0x2
#define _I2C2CON2_SDAHT0_POSN                               0x2
#define _I2C2CON2_SDAHT0_POSITION                           0x2
#define _I2C2CON2_SDAHT0_SIZE                               0x1
#define _I2C2CON2_SDAHT0_LENGTH                             0x1
#define _I2C2CON2_SDAHT0_MASK                               0x4
#define _I2C2CON2_SDAHT1_POSN                               0x3
#define _I2C2CON2_SDAHT1_POSITION                           0x3
#define _I2C2CON2_SDAHT1_SIZE                               0x1
#define _I2C2CON2_SDAHT1_LENGTH                             0x1
#define _I2C2CON2_SDAHT1_MASK                               0x8

// Register: I2C2ERR
#define I2C2ERR I2C2ERR
extern volatile unsigned char           I2C2ERR             __at(0x3D60);
#ifndef _LIB_BUILD
asm("I2C2ERR equ 03D60h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NACKIE                 :1;
        unsigned BCLIE                  :1;
        unsigned BTOIE                  :1;
        unsigned                        :1;
        unsigned NACKIF                 :1;
        unsigned BCLIF                  :1;
        unsigned BTOIF                  :1;
    };
    struct {
        unsigned NACK2IE                :1;
        unsigned BCL2IE                 :1;
        unsigned BTO2IE                 :1;
        unsigned                        :1;
        unsigned NACK2IF                :1;
        unsigned BCL2IF                 :1;
        unsigned BTO2IF                 :1;
    };
} I2C2ERRbits_t;
extern volatile I2C2ERRbits_t I2C2ERRbits __at(0x3D60);
// bitfield macros
#define _I2C2ERR_NACKIE_POSN                                0x0
#define _I2C2ERR_NACKIE_POSITION                            0x0
#define _I2C2ERR_NACKIE_SIZE                                0x1
#define _I2C2ERR_NACKIE_LENGTH                              0x1
#define _I2C2ERR_NACKIE_MASK                                0x1
#define _I2C2ERR_BCLIE_POSN                                 0x1
#define _I2C2ERR_BCLIE_POSITION                             0x1
#define _I2C2ERR_BCLIE_SIZE                                 0x1
#define _I2C2ERR_BCLIE_LENGTH                               0x1
#define _I2C2ERR_BCLIE_MASK                                 0x2
#define _I2C2ERR_BTOIE_POSN                                 0x2
#define _I2C2ERR_BTOIE_POSITION                             0x2
#define _I2C2ERR_BTOIE_SIZE                                 0x1
#define _I2C2ERR_BTOIE_LENGTH                               0x1
#define _I2C2ERR_BTOIE_MASK                                 0x4
#define _I2C2ERR_NACKIF_POSN                                0x4
#define _I2C2ERR_NACKIF_POSITION                            0x4
#define _I2C2ERR_NACKIF_SIZE                                0x1
#define _I2C2ERR_NACKIF_LENGTH                              0x1
#define _I2C2ERR_NACKIF_MASK                                0x10
#define _I2C2ERR_BCLIF_POSN                                 0x5
#define _I2C2ERR_BCLIF_POSITION                             0x5
#define _I2C2ERR_BCLIF_SIZE                                 0x1
#define _I2C2ERR_BCLIF_LENGTH                               0x1
#define _I2C2ERR_BCLIF_MASK                                 0x20
#define _I2C2ERR_BTOIF_POSN                                 0x6
#define _I2C2ERR_BTOIF_POSITION                             0x6
#define _I2C2ERR_BTOIF_SIZE                                 0x1
#define _I2C2ERR_BTOIF_LENGTH                               0x1
#define _I2C2ERR_BTOIF_MASK                                 0x40
#define _I2C2ERR_NACK2IE_POSN                               0x0
#define _I2C2ERR_NACK2IE_POSITION                           0x0
#define _I2C2ERR_NACK2IE_SIZE                               0x1
#define _I2C2ERR_NACK2IE_LENGTH                             0x1
#define _I2C2ERR_NACK2IE_MASK                               0x1
#define _I2C2ERR_BCL2IE_POSN                                0x1
#define _I2C2ERR_BCL2IE_POSITION                            0x1
#define _I2C2ERR_BCL2IE_SIZE                                0x1
#define _I2C2ERR_BCL2IE_LENGTH                              0x1
#define _I2C2ERR_BCL2IE_MASK                                0x2
#define _I2C2ERR_BTO2IE_POSN                                0x2
#define _I2C2ERR_BTO2IE_POSITION                            0x2
#define _I2C2ERR_BTO2IE_SIZE                                0x1
#define _I2C2ERR_BTO2IE_LENGTH                              0x1
#define _I2C2ERR_BTO2IE_MASK                                0x4
#define _I2C2ERR_NACK2IF_POSN                               0x4
#define _I2C2ERR_NACK2IF_POSITION                           0x4
#define _I2C2ERR_NACK2IF_SIZE                               0x1
#define _I2C2ERR_NACK2IF_LENGTH                             0x1
#define _I2C2ERR_NACK2IF_MASK                               0x10
#define _I2C2ERR_BCL2IF_POSN                                0x5
#define _I2C2ERR_BCL2IF_POSITION                            0x5
#define _I2C2ERR_BCL2IF_SIZE                                0x1
#define _I2C2ERR_BCL2IF_LENGTH                              0x1
#define _I2C2ERR_BCL2IF_MASK                                0x20
#define _I2C2ERR_BTO2IF_POSN                                0x6
#define _I2C2ERR_BTO2IF_POSITION                            0x6
#define _I2C2ERR_BTO2IF_SIZE                                0x1
#define _I2C2ERR_BTO2IF_LENGTH                              0x1
#define _I2C2ERR_BTO2IF_MASK                                0x40

// Register: I2C2STAT0
#define I2C2STAT0 I2C2STAT0
extern volatile unsigned char           I2C2STAT0           __at(0x3D61);
#ifndef _LIB_BUILD
asm("I2C2STAT0 equ 03D61h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :3;
        unsigned D                      :1;
        unsigned R                      :1;
        unsigned MMA                    :1;
        unsigned SMA                    :1;
        unsigned BFRE                   :1;
    };
    struct {
        unsigned                        :3;
        unsigned DATA                   :1;
        unsigned READ                   :1;
    };
    struct {
        unsigned                        :3;
        unsigned NOT_ADDRESS            :1;
        unsigned NOT_WRITE              :1;
    };
    struct {
        unsigned                        :3;
        unsigned NOT_A                  :1;
        unsigned NOT_W                  :1;
    };
} I2C2STAT0bits_t;
extern volatile I2C2STAT0bits_t I2C2STAT0bits __at(0x3D61);
// bitfield macros
#define _I2C2STAT0_D_POSN                                   0x3
#define _I2C2STAT0_D_POSITION                               0x3
#define _I2C2STAT0_D_SIZE                                   0x1
#define _I2C2STAT0_D_LENGTH                                 0x1
#define _I2C2STAT0_D_MASK                                   0x8
#define _I2C2STAT0_R_POSN                                   0x4
#define _I2C2STAT0_R_POSITION                               0x4
#define _I2C2STAT0_R_SIZE                                   0x1
#define _I2C2STAT0_R_LENGTH                                 0x1
#define _I2C2STAT0_R_MASK                                   0x10
#define _I2C2STAT0_MMA_POSN                                 0x5
#define _I2C2STAT0_MMA_POSITION                             0x5
#define _I2C2STAT0_MMA_SIZE                                 0x1
#define _I2C2STAT0_MMA_LENGTH                               0x1
#define _I2C2STAT0_MMA_MASK                                 0x20
#define _I2C2STAT0_SMA_POSN                                 0x6
#define _I2C2STAT0_SMA_POSITION                             0x6
#define _I2C2STAT0_SMA_SIZE                                 0x1
#define _I2C2STAT0_SMA_LENGTH                               0x1
#define _I2C2STAT0_SMA_MASK                                 0x40
#define _I2C2STAT0_BFRE_POSN                                0x7
#define _I2C2STAT0_BFRE_POSITION                            0x7
#define _I2C2STAT0_BFRE_SIZE                                0x1
#define _I2C2STAT0_BFRE_LENGTH                              0x1
#define _I2C2STAT0_BFRE_MASK                                0x80
#define _I2C2STAT0_DATA_POSN                                0x3
#define _I2C2STAT0_DATA_POSITION                            0x3
#define _I2C2STAT0_DATA_SIZE                                0x1
#define _I2C2STAT0_DATA_LENGTH                              0x1
#define _I2C2STAT0_DATA_MASK                                0x8
#define _I2C2STAT0_READ_POSN                                0x4
#define _I2C2STAT0_READ_POSITION                            0x4
#define _I2C2STAT0_READ_SIZE                                0x1
#define _I2C2STAT0_READ_LENGTH                              0x1
#define _I2C2STAT0_READ_MASK                                0x10
#define _I2C2STAT0_NOT_ADDRESS_POSN                         0x3
#define _I2C2STAT0_NOT_ADDRESS_POSITION                     0x3
#define _I2C2STAT0_NOT_ADDRESS_SIZE                         0x1
#define _I2C2STAT0_NOT_ADDRESS_LENGTH                       0x1
#define _I2C2STAT0_NOT_ADDRESS_MASK                         0x8
#define _I2C2STAT0_NOT_WRITE_POSN                           0x4
#define _I2C2STAT0_NOT_WRITE_POSITION                       0x4
#define _I2C2STAT0_NOT_WRITE_SIZE                           0x1
#define _I2C2STAT0_NOT_WRITE_LENGTH                         0x1
#define _I2C2STAT0_NOT_WRITE_MASK                           0x10
#define _I2C2STAT0_NOT_A_POSN                               0x3
#define _I2C2STAT0_NOT_A_POSITION                           0x3
#define _I2C2STAT0_NOT_A_SIZE                               0x1
#define _I2C2STAT0_NOT_A_LENGTH                             0x1
#define _I2C2STAT0_NOT_A_MASK                               0x8
#define _I2C2STAT0_NOT_W_POSN                               0x4
#define _I2C2STAT0_NOT_W_POSITION                           0x4
#define _I2C2STAT0_NOT_W_SIZE                               0x1
#define _I2C2STAT0_NOT_W_LENGTH                             0x1
#define _I2C2STAT0_NOT_W_MASK                               0x10

// Register: I2C2STAT1
#define I2C2STAT1 I2C2STAT1
extern volatile unsigned char           I2C2STAT1           __at(0x3D62);
#ifndef _LIB_BUILD
asm("I2C2STAT1 equ 03D62h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RXBF                   :1;
        unsigned                        :1;
        unsigned CLRBF                  :1;
        unsigned RXRE                   :1;
        unsigned                        :1;
        unsigned TXBE                   :1;
        unsigned                        :1;
        unsigned TXWE                   :1;
    };
} I2C2STAT1bits_t;
extern volatile I2C2STAT1bits_t I2C2STAT1bits __at(0x3D62);
// bitfield macros
#define _I2C2STAT1_RXBF_POSN                                0x0
#define _I2C2STAT1_RXBF_POSITION                            0x0
#define _I2C2STAT1_RXBF_SIZE                                0x1
#define _I2C2STAT1_RXBF_LENGTH                              0x1
#define _I2C2STAT1_RXBF_MASK                                0x1
#define _I2C2STAT1_CLRBF_POSN                               0x2
#define _I2C2STAT1_CLRBF_POSITION                           0x2
#define _I2C2STAT1_CLRBF_SIZE                               0x1
#define _I2C2STAT1_CLRBF_LENGTH                             0x1
#define _I2C2STAT1_CLRBF_MASK                               0x4
#define _I2C2STAT1_RXRE_POSN                                0x3
#define _I2C2STAT1_RXRE_POSITION                            0x3
#define _I2C2STAT1_RXRE_SIZE                                0x1
#define _I2C2STAT1_RXRE_LENGTH                              0x1
#define _I2C2STAT1_RXRE_MASK                                0x8
#define _I2C2STAT1_TXBE_POSN                                0x5
#define _I2C2STAT1_TXBE_POSITION                            0x5
#define _I2C2STAT1_TXBE_SIZE                                0x1
#define _I2C2STAT1_TXBE_LENGTH                              0x1
#define _I2C2STAT1_TXBE_MASK                                0x20
#define _I2C2STAT1_TXWE_POSN                                0x7
#define _I2C2STAT1_TXWE_POSITION                            0x7
#define _I2C2STAT1_TXWE_SIZE                                0x1
#define _I2C2STAT1_TXWE_LENGTH                              0x1
#define _I2C2STAT1_TXWE_MASK                                0x80

// Register: I2C2PIR
#define I2C2PIR I2C2PIR
extern volatile unsigned char           I2C2PIR             __at(0x3D63);
#ifndef _LIB_BUILD
asm("I2C2PIR equ 03D63h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SCIF                   :1;
        unsigned RSCIF                  :1;
        unsigned PCIF                   :1;
        unsigned ADRIF                  :1;
        unsigned WRIF                   :1;
        unsigned                        :1;
        unsigned ACKTIF                 :1;
        unsigned CNTIF                  :1;
    };
    struct {
        unsigned SC2IF                  :1;
        unsigned RSC2IF                 :1;
        unsigned PC2IF                  :1;
        unsigned ADR2IF                 :1;
        unsigned WR2IF                  :1;
        unsigned                        :1;
        unsigned ACKT2IF                :1;
        unsigned CNT2IF                 :1;
    };
} I2C2PIRbits_t;
extern volatile I2C2PIRbits_t I2C2PIRbits __at(0x3D63);
// bitfield macros
#define _I2C2PIR_SCIF_POSN                                  0x0
#define _I2C2PIR_SCIF_POSITION                              0x0
#define _I2C2PIR_SCIF_SIZE                                  0x1
#define _I2C2PIR_SCIF_LENGTH                                0x1
#define _I2C2PIR_SCIF_MASK                                  0x1
#define _I2C2PIR_RSCIF_POSN                                 0x1
#define _I2C2PIR_RSCIF_POSITION                             0x1
#define _I2C2PIR_RSCIF_SIZE                                 0x1
#define _I2C2PIR_RSCIF_LENGTH                               0x1
#define _I2C2PIR_RSCIF_MASK                                 0x2
#define _I2C2PIR_PCIF_POSN                                  0x2
#define _I2C2PIR_PCIF_POSITION                              0x2
#define _I2C2PIR_PCIF_SIZE                                  0x1
#define _I2C2PIR_PCIF_LENGTH                                0x1
#define _I2C2PIR_PCIF_MASK                                  0x4
#define _I2C2PIR_ADRIF_POSN                                 0x3
#define _I2C2PIR_ADRIF_POSITION                             0x3
#define _I2C2PIR_ADRIF_SIZE                                 0x1
#define _I2C2PIR_ADRIF_LENGTH                               0x1
#define _I2C2PIR_ADRIF_MASK                                 0x8
#define _I2C2PIR_WRIF_POSN                                  0x4
#define _I2C2PIR_WRIF_POSITION                              0x4
#define _I2C2PIR_WRIF_SIZE                                  0x1
#define _I2C2PIR_WRIF_LENGTH                                0x1
#define _I2C2PIR_WRIF_MASK                                  0x10
#define _I2C2PIR_ACKTIF_POSN                                0x6
#define _I2C2PIR_ACKTIF_POSITION                            0x6
#define _I2C2PIR_ACKTIF_SIZE                                0x1
#define _I2C2PIR_ACKTIF_LENGTH                              0x1
#define _I2C2PIR_ACKTIF_MASK                                0x40
#define _I2C2PIR_CNTIF_POSN                                 0x7
#define _I2C2PIR_CNTIF_POSITION                             0x7
#define _I2C2PIR_CNTIF_SIZE                                 0x1
#define _I2C2PIR_CNTIF_LENGTH                               0x1
#define _I2C2PIR_CNTIF_MASK                                 0x80
#define _I2C2PIR_SC2IF_POSN                                 0x0
#define _I2C2PIR_SC2IF_POSITION                             0x0
#define _I2C2PIR_SC2IF_SIZE                                 0x1
#define _I2C2PIR_SC2IF_LENGTH                               0x1
#define _I2C2PIR_SC2IF_MASK                                 0x1
#define _I2C2PIR_RSC2IF_POSN                                0x1
#define _I2C2PIR_RSC2IF_POSITION                            0x1
#define _I2C2PIR_RSC2IF_SIZE                                0x1
#define _I2C2PIR_RSC2IF_LENGTH                              0x1
#define _I2C2PIR_RSC2IF_MASK                                0x2
#define _I2C2PIR_PC2IF_POSN                                 0x2
#define _I2C2PIR_PC2IF_POSITION                             0x2
#define _I2C2PIR_PC2IF_SIZE                                 0x1
#define _I2C2PIR_PC2IF_LENGTH                               0x1
#define _I2C2PIR_PC2IF_MASK                                 0x4
#define _I2C2PIR_ADR2IF_POSN                                0x3
#define _I2C2PIR_ADR2IF_POSITION                            0x3
#define _I2C2PIR_ADR2IF_SIZE                                0x1
#define _I2C2PIR_ADR2IF_LENGTH                              0x1
#define _I2C2PIR_ADR2IF_MASK                                0x8
#define _I2C2PIR_WR2IF_POSN                                 0x4
#define _I2C2PIR_WR2IF_POSITION                             0x4
#define _I2C2PIR_WR2IF_SIZE                                 0x1
#define _I2C2PIR_WR2IF_LENGTH                               0x1
#define _I2C2PIR_WR2IF_MASK                                 0x10
#define _I2C2PIR_ACKT2IF_POSN                               0x6
#define _I2C2PIR_ACKT2IF_POSITION                           0x6
#define _I2C2PIR_ACKT2IF_SIZE                               0x1
#define _I2C2PIR_ACKT2IF_LENGTH                             0x1
#define _I2C2PIR_ACKT2IF_MASK                               0x40
#define _I2C2PIR_CNT2IF_POSN                                0x7
#define _I2C2PIR_CNT2IF_POSITION                            0x7
#define _I2C2PIR_CNT2IF_SIZE                                0x1
#define _I2C2PIR_CNT2IF_LENGTH                              0x1
#define _I2C2PIR_CNT2IF_MASK                                0x80

// Register: I2C2PIE
#define I2C2PIE I2C2PIE
extern volatile unsigned char           I2C2PIE             __at(0x3D64);
#ifndef _LIB_BUILD
asm("I2C2PIE equ 03D64h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SCIE                   :1;
        unsigned RSCIE                  :1;
        unsigned PCIE                   :1;
        unsigned ADRIE                  :1;
        unsigned WRIE                   :1;
        unsigned                        :1;
        unsigned ACKTIE                 :1;
        unsigned CNTIE                  :1;
    };
    struct {
        unsigned SC2IE                  :1;
        unsigned RSC2IE                 :1;
        unsigned PC2IE                  :1;
        unsigned ADR2IE                 :1;
        unsigned WR2IE                  :1;
        unsigned                        :1;
        unsigned ACKT2IE                :1;
        unsigned CNT2IE                 :1;
    };
} I2C2PIEbits_t;
extern volatile I2C2PIEbits_t I2C2PIEbits __at(0x3D64);
// bitfield macros
#define _I2C2PIE_SCIE_POSN                                  0x0
#define _I2C2PIE_SCIE_POSITION                              0x0
#define _I2C2PIE_SCIE_SIZE                                  0x1
#define _I2C2PIE_SCIE_LENGTH                                0x1
#define _I2C2PIE_SCIE_MASK                                  0x1
#define _I2C2PIE_RSCIE_POSN                                 0x1
#define _I2C2PIE_RSCIE_POSITION                             0x1
#define _I2C2PIE_RSCIE_SIZE                                 0x1
#define _I2C2PIE_RSCIE_LENGTH                               0x1
#define _I2C2PIE_RSCIE_MASK                                 0x2
#define _I2C2PIE_PCIE_POSN                                  0x2
#define _I2C2PIE_PCIE_POSITION                              0x2
#define _I2C2PIE_PCIE_SIZE                                  0x1
#define _I2C2PIE_PCIE_LENGTH                                0x1
#define _I2C2PIE_PCIE_MASK                                  0x4
#define _I2C2PIE_ADRIE_POSN                                 0x3
#define _I2C2PIE_ADRIE_POSITION                             0x3
#define _I2C2PIE_ADRIE_SIZE                                 0x1
#define _I2C2PIE_ADRIE_LENGTH                               0x1
#define _I2C2PIE_ADRIE_MASK                                 0x8
#define _I2C2PIE_WRIE_POSN                                  0x4
#define _I2C2PIE_WRIE_POSITION                              0x4
#define _I2C2PIE_WRIE_SIZE                                  0x1
#define _I2C2PIE_WRIE_LENGTH                                0x1
#define _I2C2PIE_WRIE_MASK                                  0x10
#define _I2C2PIE_ACKTIE_POSN                                0x6
#define _I2C2PIE_ACKTIE_POSITION                            0x6
#define _I2C2PIE_ACKTIE_SIZE                                0x1
#define _I2C2PIE_ACKTIE_LENGTH                              0x1
#define _I2C2PIE_ACKTIE_MASK                                0x40
#define _I2C2PIE_CNTIE_POSN                                 0x7
#define _I2C2PIE_CNTIE_POSITION                             0x7
#define _I2C2PIE_CNTIE_SIZE                                 0x1
#define _I2C2PIE_CNTIE_LENGTH                               0x1
#define _I2C2PIE_CNTIE_MASK                                 0x80
#define _I2C2PIE_SC2IE_POSN                                 0x0
#define _I2C2PIE_SC2IE_POSITION                             0x0
#define _I2C2PIE_SC2IE_SIZE                                 0x1
#define _I2C2PIE_SC2IE_LENGTH                               0x1
#define _I2C2PIE_SC2IE_MASK                                 0x1
#define _I2C2PIE_RSC2IE_POSN                                0x1
#define _I2C2PIE_RSC2IE_POSITION                            0x1
#define _I2C2PIE_RSC2IE_SIZE                                0x1
#define _I2C2PIE_RSC2IE_LENGTH                              0x1
#define _I2C2PIE_RSC2IE_MASK                                0x2
#define _I2C2PIE_PC2IE_POSN                                 0x2
#define _I2C2PIE_PC2IE_POSITION                             0x2
#define _I2C2PIE_PC2IE_SIZE                                 0x1
#define _I2C2PIE_PC2IE_LENGTH                               0x1
#define _I2C2PIE_PC2IE_MASK                                 0x4
#define _I2C2PIE_ADR2IE_POSN                                0x3
#define _I2C2PIE_ADR2IE_POSITION                            0x3
#define _I2C2PIE_ADR2IE_SIZE                                0x1
#define _I2C2PIE_ADR2IE_LENGTH                              0x1
#define _I2C2PIE_ADR2IE_MASK                                0x8
#define _I2C2PIE_WR2IE_POSN                                 0x4
#define _I2C2PIE_WR2IE_POSITION                             0x4
#define _I2C2PIE_WR2IE_SIZE                                 0x1
#define _I2C2PIE_WR2IE_LENGTH                               0x1
#define _I2C2PIE_WR2IE_MASK                                 0x10
#define _I2C2PIE_ACKT2IE_POSN                               0x6
#define _I2C2PIE_ACKT2IE_POSITION                           0x6
#define _I2C2PIE_ACKT2IE_SIZE                               0x1
#define _I2C2PIE_ACKT2IE_LENGTH                             0x1
#define _I2C2PIE_ACKT2IE_MASK                               0x40
#define _I2C2PIE_CNT2IE_POSN                                0x7
#define _I2C2PIE_CNT2IE_POSITION                            0x7
#define _I2C2PIE_CNT2IE_SIZE                                0x1
#define _I2C2PIE_CNT2IE_LENGTH                              0x1
#define _I2C2PIE_CNT2IE_MASK                                0x80

// Register: I2C2CLK
#define I2C2CLK I2C2CLK
extern volatile unsigned char           I2C2CLK             __at(0x3D65);
#ifndef _LIB_BUILD
asm("I2C2CLK equ 03D65h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLK                    :8;
    };
    struct {
        unsigned I2CCLK                 :8;
    };
    struct {
        unsigned CLK0                   :1;
        unsigned CLK1                   :1;
        unsigned CLK2                   :1;
        unsigned CLK3                   :1;
    };
    struct {
        unsigned I2CCLK0                :1;
        unsigned I2CCLK1                :1;
        unsigned I2CCLK2                :1;
        unsigned I2CCLK3                :1;
    };
} I2C2CLKbits_t;
extern volatile I2C2CLKbits_t I2C2CLKbits __at(0x3D65);
// bitfield macros
#define _I2C2CLK_CLK_POSN                                   0x0
#define _I2C2CLK_CLK_POSITION                               0x0
#define _I2C2CLK_CLK_SIZE                                   0x8
#define _I2C2CLK_CLK_LENGTH                                 0x8
#define _I2C2CLK_CLK_MASK                                   0xFF
#define _I2C2CLK_I2CCLK_POSN                                0x0
#define _I2C2CLK_I2CCLK_POSITION                            0x0
#define _I2C2CLK_I2CCLK_SIZE                                0x8
#define _I2C2CLK_I2CCLK_LENGTH                              0x8
#define _I2C2CLK_I2CCLK_MASK                                0xFF
#define _I2C2CLK_CLK0_POSN                                  0x0
#define _I2C2CLK_CLK0_POSITION                              0x0
#define _I2C2CLK_CLK0_SIZE                                  0x1
#define _I2C2CLK_CLK0_LENGTH                                0x1
#define _I2C2CLK_CLK0_MASK                                  0x1
#define _I2C2CLK_CLK1_POSN                                  0x1
#define _I2C2CLK_CLK1_POSITION                              0x1
#define _I2C2CLK_CLK1_SIZE                                  0x1
#define _I2C2CLK_CLK1_LENGTH                                0x1
#define _I2C2CLK_CLK1_MASK                                  0x2
#define _I2C2CLK_CLK2_POSN                                  0x2
#define _I2C2CLK_CLK2_POSITION                              0x2
#define _I2C2CLK_CLK2_SIZE                                  0x1
#define _I2C2CLK_CLK2_LENGTH                                0x1
#define _I2C2CLK_CLK2_MASK                                  0x4
#define _I2C2CLK_CLK3_POSN                                  0x3
#define _I2C2CLK_CLK3_POSITION                              0x3
#define _I2C2CLK_CLK3_SIZE                                  0x1
#define _I2C2CLK_CLK3_LENGTH                                0x1
#define _I2C2CLK_CLK3_MASK                                  0x8
#define _I2C2CLK_I2CCLK0_POSN                               0x0
#define _I2C2CLK_I2CCLK0_POSITION                           0x0
#define _I2C2CLK_I2CCLK0_SIZE                               0x1
#define _I2C2CLK_I2CCLK0_LENGTH                             0x1
#define _I2C2CLK_I2CCLK0_MASK                               0x1
#define _I2C2CLK_I2CCLK1_POSN                               0x1
#define _I2C2CLK_I2CCLK1_POSITION                           0x1
#define _I2C2CLK_I2CCLK1_SIZE                               0x1
#define _I2C2CLK_I2CCLK1_LENGTH                             0x1
#define _I2C2CLK_I2CCLK1_MASK                               0x2
#define _I2C2CLK_I2CCLK2_POSN                               0x2
#define _I2C2CLK_I2CCLK2_POSITION                           0x2
#define _I2C2CLK_I2CCLK2_SIZE                               0x1
#define _I2C2CLK_I2CCLK2_LENGTH                             0x1
#define _I2C2CLK_I2CCLK2_MASK                               0x4
#define _I2C2CLK_I2CCLK3_POSN                               0x3
#define _I2C2CLK_I2CCLK3_POSITION                           0x3
#define _I2C2CLK_I2CCLK3_SIZE                               0x1
#define _I2C2CLK_I2CCLK3_LENGTH                             0x1
#define _I2C2CLK_I2CCLK3_MASK                               0x8

// Register: I2C2BTO
#define I2C2BTO I2C2BTO
extern volatile unsigned char           I2C2BTO             __at(0x3D66);
#ifndef _LIB_BUILD
asm("I2C2BTO equ 03D66h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BTO                    :8;
    };
    struct {
        unsigned I2CBTO                 :8;
    };
    struct {
        unsigned BTO0                   :1;
        unsigned BTO1                   :1;
        unsigned BTO2                   :1;
    };
    struct {
        unsigned I2CBTO0                :1;
        unsigned I2CBTO1                :1;
        unsigned I2CBTO2                :1;
    };
} I2C2BTObits_t;
extern volatile I2C2BTObits_t I2C2BTObits __at(0x3D66);
// bitfield macros
#define _I2C2BTO_BTO_POSN                                   0x0
#define _I2C2BTO_BTO_POSITION                               0x0
#define _I2C2BTO_BTO_SIZE                                   0x8
#define _I2C2BTO_BTO_LENGTH                                 0x8
#define _I2C2BTO_BTO_MASK                                   0xFF
#define _I2C2BTO_I2CBTO_POSN                                0x0
#define _I2C2BTO_I2CBTO_POSITION                            0x0
#define _I2C2BTO_I2CBTO_SIZE                                0x8
#define _I2C2BTO_I2CBTO_LENGTH                              0x8
#define _I2C2BTO_I2CBTO_MASK                                0xFF
#define _I2C2BTO_BTO0_POSN                                  0x0
#define _I2C2BTO_BTO0_POSITION                              0x0
#define _I2C2BTO_BTO0_SIZE                                  0x1
#define _I2C2BTO_BTO0_LENGTH                                0x1
#define _I2C2BTO_BTO0_MASK                                  0x1
#define _I2C2BTO_BTO1_POSN                                  0x1
#define _I2C2BTO_BTO1_POSITION                              0x1
#define _I2C2BTO_BTO1_SIZE                                  0x1
#define _I2C2BTO_BTO1_LENGTH                                0x1
#define _I2C2BTO_BTO1_MASK                                  0x2
#define _I2C2BTO_BTO2_POSN                                  0x2
#define _I2C2BTO_BTO2_POSITION                              0x2
#define _I2C2BTO_BTO2_SIZE                                  0x1
#define _I2C2BTO_BTO2_LENGTH                                0x1
#define _I2C2BTO_BTO2_MASK                                  0x4
#define _I2C2BTO_I2CBTO0_POSN                               0x0
#define _I2C2BTO_I2CBTO0_POSITION                           0x0
#define _I2C2BTO_I2CBTO0_SIZE                               0x1
#define _I2C2BTO_I2CBTO0_LENGTH                             0x1
#define _I2C2BTO_I2CBTO0_MASK                               0x1
#define _I2C2BTO_I2CBTO1_POSN                               0x1
#define _I2C2BTO_I2CBTO1_POSITION                           0x1
#define _I2C2BTO_I2CBTO1_SIZE                               0x1
#define _I2C2BTO_I2CBTO1_LENGTH                             0x1
#define _I2C2BTO_I2CBTO1_MASK                               0x2
#define _I2C2BTO_I2CBTO2_POSN                               0x2
#define _I2C2BTO_I2CBTO2_POSITION                           0x2
#define _I2C2BTO_I2CBTO2_SIZE                               0x1
#define _I2C2BTO_I2CBTO2_LENGTH                             0x1
#define _I2C2BTO_I2CBTO2_MASK                               0x4

// Register: I2C1RXB
#define I2C1RXB I2C1RXB
extern volatile unsigned char           I2C1RXB             __at(0x3D6A);
#ifndef _LIB_BUILD
asm("I2C1RXB equ 03D6Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RXB                    :8;
    };
} I2C1RXBbits_t;
extern volatile I2C1RXBbits_t I2C1RXBbits __at(0x3D6A);
// bitfield macros
#define _I2C1RXB_RXB_POSN                                   0x0
#define _I2C1RXB_RXB_POSITION                               0x0
#define _I2C1RXB_RXB_SIZE                                   0x8
#define _I2C1RXB_RXB_LENGTH                                 0x8
#define _I2C1RXB_RXB_MASK                                   0xFF

// Register: I2C1TXB
#define I2C1TXB I2C1TXB
extern volatile unsigned char           I2C1TXB             __at(0x3D6B);
#ifndef _LIB_BUILD
asm("I2C1TXB equ 03D6Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TXB                    :8;
    };
} I2C1TXBbits_t;
extern volatile I2C1TXBbits_t I2C1TXBbits __at(0x3D6B);
// bitfield macros
#define _I2C1TXB_TXB_POSN                                   0x0
#define _I2C1TXB_TXB_POSITION                               0x0
#define _I2C1TXB_TXB_SIZE                                   0x8
#define _I2C1TXB_TXB_LENGTH                                 0x8
#define _I2C1TXB_TXB_MASK                                   0xFF

// Register: I2C1CNT
#define I2C1CNT I2C1CNT
extern volatile unsigned char           I2C1CNT             __at(0x3D6C);
#ifndef _LIB_BUILD
asm("I2C1CNT equ 03D6Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CNT                    :8;
    };
    struct {
        unsigned CNT0                   :1;
        unsigned CNT1                   :1;
        unsigned CNT2                   :1;
        unsigned CNT3                   :1;
        unsigned CNT4                   :1;
        unsigned CNT5                   :1;
        unsigned CNT6                   :1;
        unsigned CNT7                   :1;
    };
} I2C1CNTbits_t;
extern volatile I2C1CNTbits_t I2C1CNTbits __at(0x3D6C);
// bitfield macros
#define _I2C1CNT_CNT_POSN                                   0x0
#define _I2C1CNT_CNT_POSITION                               0x0
#define _I2C1CNT_CNT_SIZE                                   0x8
#define _I2C1CNT_CNT_LENGTH                                 0x8
#define _I2C1CNT_CNT_MASK                                   0xFF
#define _I2C1CNT_CNT0_POSN                                  0x0
#define _I2C1CNT_CNT0_POSITION                              0x0
#define _I2C1CNT_CNT0_SIZE                                  0x1
#define _I2C1CNT_CNT0_LENGTH                                0x1
#define _I2C1CNT_CNT0_MASK                                  0x1
#define _I2C1CNT_CNT1_POSN                                  0x1
#define _I2C1CNT_CNT1_POSITION                              0x1
#define _I2C1CNT_CNT1_SIZE                                  0x1
#define _I2C1CNT_CNT1_LENGTH                                0x1
#define _I2C1CNT_CNT1_MASK                                  0x2
#define _I2C1CNT_CNT2_POSN                                  0x2
#define _I2C1CNT_CNT2_POSITION                              0x2
#define _I2C1CNT_CNT2_SIZE                                  0x1
#define _I2C1CNT_CNT2_LENGTH                                0x1
#define _I2C1CNT_CNT2_MASK                                  0x4
#define _I2C1CNT_CNT3_POSN                                  0x3
#define _I2C1CNT_CNT3_POSITION                              0x3
#define _I2C1CNT_CNT3_SIZE                                  0x1
#define _I2C1CNT_CNT3_LENGTH                                0x1
#define _I2C1CNT_CNT3_MASK                                  0x8
#define _I2C1CNT_CNT4_POSN                                  0x4
#define _I2C1CNT_CNT4_POSITION                              0x4
#define _I2C1CNT_CNT4_SIZE                                  0x1
#define _I2C1CNT_CNT4_LENGTH                                0x1
#define _I2C1CNT_CNT4_MASK                                  0x10
#define _I2C1CNT_CNT5_POSN                                  0x5
#define _I2C1CNT_CNT5_POSITION                              0x5
#define _I2C1CNT_CNT5_SIZE                                  0x1
#define _I2C1CNT_CNT5_LENGTH                                0x1
#define _I2C1CNT_CNT5_MASK                                  0x20
#define _I2C1CNT_CNT6_POSN                                  0x6
#define _I2C1CNT_CNT6_POSITION                              0x6
#define _I2C1CNT_CNT6_SIZE                                  0x1
#define _I2C1CNT_CNT6_LENGTH                                0x1
#define _I2C1CNT_CNT6_MASK                                  0x40
#define _I2C1CNT_CNT7_POSN                                  0x7
#define _I2C1CNT_CNT7_POSITION                              0x7
#define _I2C1CNT_CNT7_SIZE                                  0x1
#define _I2C1CNT_CNT7_LENGTH                                0x1
#define _I2C1CNT_CNT7_MASK                                  0x80

// Register: I2C1ADB0
#define I2C1ADB0 I2C1ADB0
extern volatile unsigned char           I2C1ADB0            __at(0x3D6D);
#ifndef _LIB_BUILD
asm("I2C1ADB0 equ 03D6Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADB                    :8;
    };
} I2C1ADB0bits_t;
extern volatile I2C1ADB0bits_t I2C1ADB0bits __at(0x3D6D);
// bitfield macros
#define _I2C1ADB0_ADB_POSN                                  0x0
#define _I2C1ADB0_ADB_POSITION                              0x0
#define _I2C1ADB0_ADB_SIZE                                  0x8
#define _I2C1ADB0_ADB_LENGTH                                0x8
#define _I2C1ADB0_ADB_MASK                                  0xFF

// Register: I2C1ADB1
#define I2C1ADB1 I2C1ADB1
extern volatile unsigned char           I2C1ADB1            __at(0x3D6E);
#ifndef _LIB_BUILD
asm("I2C1ADB1 equ 03D6Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADB                    :8;
    };
} I2C1ADB1bits_t;
extern volatile I2C1ADB1bits_t I2C1ADB1bits __at(0x3D6E);
// bitfield macros
#define _I2C1ADB1_ADB_POSN                                  0x0
#define _I2C1ADB1_ADB_POSITION                              0x0
#define _I2C1ADB1_ADB_SIZE                                  0x8
#define _I2C1ADB1_ADB_LENGTH                                0x8
#define _I2C1ADB1_ADB_MASK                                  0xFF

// Register: I2C1ADR0
#define I2C1ADR0 I2C1ADR0
extern volatile unsigned char           I2C1ADR0            __at(0x3D6F);
#ifndef _LIB_BUILD
asm("I2C1ADR0 equ 03D6Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADR                    :8;
    };
} I2C1ADR0bits_t;
extern volatile I2C1ADR0bits_t I2C1ADR0bits __at(0x3D6F);
// bitfield macros
#define _I2C1ADR0_ADR_POSN                                  0x0
#define _I2C1ADR0_ADR_POSITION                              0x0
#define _I2C1ADR0_ADR_SIZE                                  0x8
#define _I2C1ADR0_ADR_LENGTH                                0x8
#define _I2C1ADR0_ADR_MASK                                  0xFF

// Register: I2C1ADR1
#define I2C1ADR1 I2C1ADR1
extern volatile unsigned char           I2C1ADR1            __at(0x3D70);
#ifndef _LIB_BUILD
asm("I2C1ADR1 equ 03D70h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :1;
        unsigned ADR                    :7;
    };
} I2C1ADR1bits_t;
extern volatile I2C1ADR1bits_t I2C1ADR1bits __at(0x3D70);
// bitfield macros
#define _I2C1ADR1_ADR_POSN                                  0x1
#define _I2C1ADR1_ADR_POSITION                              0x1
#define _I2C1ADR1_ADR_SIZE                                  0x7
#define _I2C1ADR1_ADR_LENGTH                                0x7
#define _I2C1ADR1_ADR_MASK                                  0xFE

// Register: I2C1ADR2
#define I2C1ADR2 I2C1ADR2
extern volatile unsigned char           I2C1ADR2            __at(0x3D71);
#ifndef _LIB_BUILD
asm("I2C1ADR2 equ 03D71h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADR                    :8;
    };
} I2C1ADR2bits_t;
extern volatile I2C1ADR2bits_t I2C1ADR2bits __at(0x3D71);
// bitfield macros
#define _I2C1ADR2_ADR_POSN                                  0x0
#define _I2C1ADR2_ADR_POSITION                              0x0
#define _I2C1ADR2_ADR_SIZE                                  0x8
#define _I2C1ADR2_ADR_LENGTH                                0x8
#define _I2C1ADR2_ADR_MASK                                  0xFF

// Register: I2C1ADR3
#define I2C1ADR3 I2C1ADR3
extern volatile unsigned char           I2C1ADR3            __at(0x3D72);
#ifndef _LIB_BUILD
asm("I2C1ADR3 equ 03D72h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :1;
        unsigned ADR                    :7;
    };
} I2C1ADR3bits_t;
extern volatile I2C1ADR3bits_t I2C1ADR3bits __at(0x3D72);
// bitfield macros
#define _I2C1ADR3_ADR_POSN                                  0x1
#define _I2C1ADR3_ADR_POSITION                              0x1
#define _I2C1ADR3_ADR_SIZE                                  0x7
#define _I2C1ADR3_ADR_LENGTH                                0x7
#define _I2C1ADR3_ADR_MASK                                  0xFE

// Register: I2C1CON0
#define I2C1CON0 I2C1CON0
extern volatile unsigned char           I2C1CON0            __at(0x3D73);
#ifndef _LIB_BUILD
asm("I2C1CON0 equ 03D73h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :3;
        unsigned MDR                    :1;
        unsigned CSTR                   :1;
        unsigned S                      :1;
        unsigned RSEN                   :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned                        :4;
        unsigned I2CEN                  :1;
    };
} I2C1CON0bits_t;
extern volatile I2C1CON0bits_t I2C1CON0bits __at(0x3D73);
// bitfield macros
#define _I2C1CON0_MODE_POSN                                 0x0
#define _I2C1CON0_MODE_POSITION                             0x0
#define _I2C1CON0_MODE_SIZE                                 0x3
#define _I2C1CON0_MODE_LENGTH                               0x3
#define _I2C1CON0_MODE_MASK                                 0x7
#define _I2C1CON0_MDR_POSN                                  0x3
#define _I2C1CON0_MDR_POSITION                              0x3
#define _I2C1CON0_MDR_SIZE                                  0x1
#define _I2C1CON0_MDR_LENGTH                                0x1
#define _I2C1CON0_MDR_MASK                                  0x8
#define _I2C1CON0_CSTR_POSN                                 0x4
#define _I2C1CON0_CSTR_POSITION                             0x4
#define _I2C1CON0_CSTR_SIZE                                 0x1
#define _I2C1CON0_CSTR_LENGTH                               0x1
#define _I2C1CON0_CSTR_MASK                                 0x10
#define _I2C1CON0_S_POSN                                    0x5
#define _I2C1CON0_S_POSITION                                0x5
#define _I2C1CON0_S_SIZE                                    0x1
#define _I2C1CON0_S_LENGTH                                  0x1
#define _I2C1CON0_S_MASK                                    0x20
#define _I2C1CON0_RSEN_POSN                                 0x6
#define _I2C1CON0_RSEN_POSITION                             0x6
#define _I2C1CON0_RSEN_SIZE                                 0x1
#define _I2C1CON0_RSEN_LENGTH                               0x1
#define _I2C1CON0_RSEN_MASK                                 0x40
#define _I2C1CON0_EN_POSN                                   0x7
#define _I2C1CON0_EN_POSITION                               0x7
#define _I2C1CON0_EN_SIZE                                   0x1
#define _I2C1CON0_EN_LENGTH                                 0x1
#define _I2C1CON0_EN_MASK                                   0x80
#define _I2C1CON0_MODE0_POSN                                0x0
#define _I2C1CON0_MODE0_POSITION                            0x0
#define _I2C1CON0_MODE0_SIZE                                0x1
#define _I2C1CON0_MODE0_LENGTH                              0x1
#define _I2C1CON0_MODE0_MASK                                0x1
#define _I2C1CON0_MODE1_POSN                                0x1
#define _I2C1CON0_MODE1_POSITION                            0x1
#define _I2C1CON0_MODE1_SIZE                                0x1
#define _I2C1CON0_MODE1_LENGTH                              0x1
#define _I2C1CON0_MODE1_MASK                                0x2
#define _I2C1CON0_MODE2_POSN                                0x2
#define _I2C1CON0_MODE2_POSITION                            0x2
#define _I2C1CON0_MODE2_SIZE                                0x1
#define _I2C1CON0_MODE2_LENGTH                              0x1
#define _I2C1CON0_MODE2_MASK                                0x4
#define _I2C1CON0_I2CEN_POSN                                0x7
#define _I2C1CON0_I2CEN_POSITION                            0x7
#define _I2C1CON0_I2CEN_SIZE                                0x1
#define _I2C1CON0_I2CEN_LENGTH                              0x1
#define _I2C1CON0_I2CEN_MASK                                0x80

// Register: I2C1CON1
#define I2C1CON1 I2C1CON1
extern volatile unsigned char           I2C1CON1            __at(0x3D74);
#ifndef _LIB_BUILD
asm("I2C1CON1 equ 03D74h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CSD                    :1;
        unsigned TXU                    :1;
        unsigned RXO                    :1;
        unsigned                        :1;
        unsigned ACKT                   :1;
        unsigned ACKSTAT                :1;
        unsigned ACKDT                  :1;
        unsigned ACKCNT                 :1;
    };
} I2C1CON1bits_t;
extern volatile I2C1CON1bits_t I2C1CON1bits __at(0x3D74);
// bitfield macros
#define _I2C1CON1_CSD_POSN                                  0x0
#define _I2C1CON1_CSD_POSITION                              0x0
#define _I2C1CON1_CSD_SIZE                                  0x1
#define _I2C1CON1_CSD_LENGTH                                0x1
#define _I2C1CON1_CSD_MASK                                  0x1
#define _I2C1CON1_TXU_POSN                                  0x1
#define _I2C1CON1_TXU_POSITION                              0x1
#define _I2C1CON1_TXU_SIZE                                  0x1
#define _I2C1CON1_TXU_LENGTH                                0x1
#define _I2C1CON1_TXU_MASK                                  0x2
#define _I2C1CON1_RXO_POSN                                  0x2
#define _I2C1CON1_RXO_POSITION                              0x2
#define _I2C1CON1_RXO_SIZE                                  0x1
#define _I2C1CON1_RXO_LENGTH                                0x1
#define _I2C1CON1_RXO_MASK                                  0x4
#define _I2C1CON1_ACKT_POSN                                 0x4
#define _I2C1CON1_ACKT_POSITION                             0x4
#define _I2C1CON1_ACKT_SIZE                                 0x1
#define _I2C1CON1_ACKT_LENGTH                               0x1
#define _I2C1CON1_ACKT_MASK                                 0x10
#define _I2C1CON1_ACKSTAT_POSN                              0x5
#define _I2C1CON1_ACKSTAT_POSITION                          0x5
#define _I2C1CON1_ACKSTAT_SIZE                              0x1
#define _I2C1CON1_ACKSTAT_LENGTH                            0x1
#define _I2C1CON1_ACKSTAT_MASK                              0x20
#define _I2C1CON1_ACKDT_POSN                                0x6
#define _I2C1CON1_ACKDT_POSITION                            0x6
#define _I2C1CON1_ACKDT_SIZE                                0x1
#define _I2C1CON1_ACKDT_LENGTH                              0x1
#define _I2C1CON1_ACKDT_MASK                                0x40
#define _I2C1CON1_ACKCNT_POSN                               0x7
#define _I2C1CON1_ACKCNT_POSITION                           0x7
#define _I2C1CON1_ACKCNT_SIZE                               0x1
#define _I2C1CON1_ACKCNT_LENGTH                             0x1
#define _I2C1CON1_ACKCNT_MASK                               0x80

// Register: I2C1CON2
#define I2C1CON2 I2C1CON2
extern volatile unsigned char           I2C1CON2            __at(0x3D75);
#ifndef _LIB_BUILD
asm("I2C1CON2 equ 03D75h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BFRET                  :2;
        unsigned SDAHT                  :2;
        unsigned ABD                    :1;
        unsigned FME                    :1;
        unsigned GCEN                   :1;
        unsigned ACNT                   :1;
    };
    struct {
        unsigned BFRET0                 :1;
        unsigned BFRET1                 :1;
        unsigned SDAHT0                 :1;
        unsigned SDAHT1                 :1;
    };
} I2C1CON2bits_t;
extern volatile I2C1CON2bits_t I2C1CON2bits __at(0x3D75);
// bitfield macros
#define _I2C1CON2_BFRET_POSN                                0x0
#define _I2C1CON2_BFRET_POSITION                            0x0
#define _I2C1CON2_BFRET_SIZE                                0x2
#define _I2C1CON2_BFRET_LENGTH                              0x2
#define _I2C1CON2_BFRET_MASK                                0x3
#define _I2C1CON2_SDAHT_POSN                                0x2
#define _I2C1CON2_SDAHT_POSITION                            0x2
#define _I2C1CON2_SDAHT_SIZE                                0x2
#define _I2C1CON2_SDAHT_LENGTH                              0x2
#define _I2C1CON2_SDAHT_MASK                                0xC
#define _I2C1CON2_ABD_POSN                                  0x4
#define _I2C1CON2_ABD_POSITION                              0x4
#define _I2C1CON2_ABD_SIZE                                  0x1
#define _I2C1CON2_ABD_LENGTH                                0x1
#define _I2C1CON2_ABD_MASK                                  0x10
#define _I2C1CON2_FME_POSN                                  0x5
#define _I2C1CON2_FME_POSITION                              0x5
#define _I2C1CON2_FME_SIZE                                  0x1
#define _I2C1CON2_FME_LENGTH                                0x1
#define _I2C1CON2_FME_MASK                                  0x20
#define _I2C1CON2_GCEN_POSN                                 0x6
#define _I2C1CON2_GCEN_POSITION                             0x6
#define _I2C1CON2_GCEN_SIZE                                 0x1
#define _I2C1CON2_GCEN_LENGTH                               0x1
#define _I2C1CON2_GCEN_MASK                                 0x40
#define _I2C1CON2_ACNT_POSN                                 0x7
#define _I2C1CON2_ACNT_POSITION                             0x7
#define _I2C1CON2_ACNT_SIZE                                 0x1
#define _I2C1CON2_ACNT_LENGTH                               0x1
#define _I2C1CON2_ACNT_MASK                                 0x80
#define _I2C1CON2_BFRET0_POSN                               0x0
#define _I2C1CON2_BFRET0_POSITION                           0x0
#define _I2C1CON2_BFRET0_SIZE                               0x1
#define _I2C1CON2_BFRET0_LENGTH                             0x1
#define _I2C1CON2_BFRET0_MASK                               0x1
#define _I2C1CON2_BFRET1_POSN                               0x1
#define _I2C1CON2_BFRET1_POSITION                           0x1
#define _I2C1CON2_BFRET1_SIZE                               0x1
#define _I2C1CON2_BFRET1_LENGTH                             0x1
#define _I2C1CON2_BFRET1_MASK                               0x2
#define _I2C1CON2_SDAHT0_POSN                               0x2
#define _I2C1CON2_SDAHT0_POSITION                           0x2
#define _I2C1CON2_SDAHT0_SIZE                               0x1
#define _I2C1CON2_SDAHT0_LENGTH                             0x1
#define _I2C1CON2_SDAHT0_MASK                               0x4
#define _I2C1CON2_SDAHT1_POSN                               0x3
#define _I2C1CON2_SDAHT1_POSITION                           0x3
#define _I2C1CON2_SDAHT1_SIZE                               0x1
#define _I2C1CON2_SDAHT1_LENGTH                             0x1
#define _I2C1CON2_SDAHT1_MASK                               0x8

// Register: I2C1ERR
#define I2C1ERR I2C1ERR
extern volatile unsigned char           I2C1ERR             __at(0x3D76);
#ifndef _LIB_BUILD
asm("I2C1ERR equ 03D76h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NACKIE                 :1;
        unsigned BCLIE                  :1;
        unsigned BTOIE                  :1;
        unsigned                        :1;
        unsigned NACKIF                 :1;
        unsigned BCLIF                  :1;
        unsigned BTOIF                  :1;
    };
    struct {
        unsigned NACK1IE                :1;
        unsigned BCL1IE                 :1;
        unsigned BTO1IE                 :1;
        unsigned                        :1;
        unsigned NACK1IF                :1;
        unsigned BCL1IF                 :1;
        unsigned BTO1IF                 :1;
    };
} I2C1ERRbits_t;
extern volatile I2C1ERRbits_t I2C1ERRbits __at(0x3D76);
// bitfield macros
#define _I2C1ERR_NACKIE_POSN                                0x0
#define _I2C1ERR_NACKIE_POSITION                            0x0
#define _I2C1ERR_NACKIE_SIZE                                0x1
#define _I2C1ERR_NACKIE_LENGTH                              0x1
#define _I2C1ERR_NACKIE_MASK                                0x1
#define _I2C1ERR_BCLIE_POSN                                 0x1
#define _I2C1ERR_BCLIE_POSITION                             0x1
#define _I2C1ERR_BCLIE_SIZE                                 0x1
#define _I2C1ERR_BCLIE_LENGTH                               0x1
#define _I2C1ERR_BCLIE_MASK                                 0x2
#define _I2C1ERR_BTOIE_POSN                                 0x2
#define _I2C1ERR_BTOIE_POSITION                             0x2
#define _I2C1ERR_BTOIE_SIZE                                 0x1
#define _I2C1ERR_BTOIE_LENGTH                               0x1
#define _I2C1ERR_BTOIE_MASK                                 0x4
#define _I2C1ERR_NACKIF_POSN                                0x4
#define _I2C1ERR_NACKIF_POSITION                            0x4
#define _I2C1ERR_NACKIF_SIZE                                0x1
#define _I2C1ERR_NACKIF_LENGTH                              0x1
#define _I2C1ERR_NACKIF_MASK                                0x10
#define _I2C1ERR_BCLIF_POSN                                 0x5
#define _I2C1ERR_BCLIF_POSITION                             0x5
#define _I2C1ERR_BCLIF_SIZE                                 0x1
#define _I2C1ERR_BCLIF_LENGTH                               0x1
#define _I2C1ERR_BCLIF_MASK                                 0x20
#define _I2C1ERR_BTOIF_POSN                                 0x6
#define _I2C1ERR_BTOIF_POSITION                             0x6
#define _I2C1ERR_BTOIF_SIZE                                 0x1
#define _I2C1ERR_BTOIF_LENGTH                               0x1
#define _I2C1ERR_BTOIF_MASK                                 0x40
#define _I2C1ERR_NACK1IE_POSN                               0x0
#define _I2C1ERR_NACK1IE_POSITION                           0x0
#define _I2C1ERR_NACK1IE_SIZE                               0x1
#define _I2C1ERR_NACK1IE_LENGTH                             0x1
#define _I2C1ERR_NACK1IE_MASK                               0x1
#define _I2C1ERR_BCL1IE_POSN                                0x1
#define _I2C1ERR_BCL1IE_POSITION                            0x1
#define _I2C1ERR_BCL1IE_SIZE                                0x1
#define _I2C1ERR_BCL1IE_LENGTH                              0x1
#define _I2C1ERR_BCL1IE_MASK                                0x2
#define _I2C1ERR_BTO1IE_POSN                                0x2
#define _I2C1ERR_BTO1IE_POSITION                            0x2
#define _I2C1ERR_BTO1IE_SIZE                                0x1
#define _I2C1ERR_BTO1IE_LENGTH                              0x1
#define _I2C1ERR_BTO1IE_MASK                                0x4
#define _I2C1ERR_NACK1IF_POSN                               0x4
#define _I2C1ERR_NACK1IF_POSITION                           0x4
#define _I2C1ERR_NACK1IF_SIZE                               0x1
#define _I2C1ERR_NACK1IF_LENGTH                             0x1
#define _I2C1ERR_NACK1IF_MASK                               0x10
#define _I2C1ERR_BCL1IF_POSN                                0x5
#define _I2C1ERR_BCL1IF_POSITION                            0x5
#define _I2C1ERR_BCL1IF_SIZE                                0x1
#define _I2C1ERR_BCL1IF_LENGTH                              0x1
#define _I2C1ERR_BCL1IF_MASK                                0x20
#define _I2C1ERR_BTO1IF_POSN                                0x6
#define _I2C1ERR_BTO1IF_POSITION                            0x6
#define _I2C1ERR_BTO1IF_SIZE                                0x1
#define _I2C1ERR_BTO1IF_LENGTH                              0x1
#define _I2C1ERR_BTO1IF_MASK                                0x40

// Register: I2C1STAT0
#define I2C1STAT0 I2C1STAT0
extern volatile unsigned char           I2C1STAT0           __at(0x3D77);
#ifndef _LIB_BUILD
asm("I2C1STAT0 equ 03D77h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :3;
        unsigned D                      :1;
        unsigned R                      :1;
        unsigned MMA                    :1;
        unsigned SMA                    :1;
        unsigned BFRE                   :1;
    };
    struct {
        unsigned                        :3;
        unsigned DATA                   :1;
        unsigned READ                   :1;
    };
    struct {
        unsigned                        :3;
        unsigned NOT_ADDRESS            :1;
        unsigned NOT_WRITE              :1;
    };
    struct {
        unsigned                        :3;
        unsigned NOT_A                  :1;
        unsigned NOT_W                  :1;
    };
} I2C1STAT0bits_t;
extern volatile I2C1STAT0bits_t I2C1STAT0bits __at(0x3D77);
// bitfield macros
#define _I2C1STAT0_D_POSN                                   0x3
#define _I2C1STAT0_D_POSITION                               0x3
#define _I2C1STAT0_D_SIZE                                   0x1
#define _I2C1STAT0_D_LENGTH                                 0x1
#define _I2C1STAT0_D_MASK                                   0x8
#define _I2C1STAT0_R_POSN                                   0x4
#define _I2C1STAT0_R_POSITION                               0x4
#define _I2C1STAT0_R_SIZE                                   0x1
#define _I2C1STAT0_R_LENGTH                                 0x1
#define _I2C1STAT0_R_MASK                                   0x10
#define _I2C1STAT0_MMA_POSN                                 0x5
#define _I2C1STAT0_MMA_POSITION                             0x5
#define _I2C1STAT0_MMA_SIZE                                 0x1
#define _I2C1STAT0_MMA_LENGTH                               0x1
#define _I2C1STAT0_MMA_MASK                                 0x20
#define _I2C1STAT0_SMA_POSN                                 0x6
#define _I2C1STAT0_SMA_POSITION                             0x6
#define _I2C1STAT0_SMA_SIZE                                 0x1
#define _I2C1STAT0_SMA_LENGTH                               0x1
#define _I2C1STAT0_SMA_MASK                                 0x40
#define _I2C1STAT0_BFRE_POSN                                0x7
#define _I2C1STAT0_BFRE_POSITION                            0x7
#define _I2C1STAT0_BFRE_SIZE                                0x1
#define _I2C1STAT0_BFRE_LENGTH                              0x1
#define _I2C1STAT0_BFRE_MASK                                0x80
#define _I2C1STAT0_DATA_POSN                                0x3
#define _I2C1STAT0_DATA_POSITION                            0x3
#define _I2C1STAT0_DATA_SIZE                                0x1
#define _I2C1STAT0_DATA_LENGTH                              0x1
#define _I2C1STAT0_DATA_MASK                                0x8
#define _I2C1STAT0_READ_POSN                                0x4
#define _I2C1STAT0_READ_POSITION                            0x4
#define _I2C1STAT0_READ_SIZE                                0x1
#define _I2C1STAT0_READ_LENGTH                              0x1
#define _I2C1STAT0_READ_MASK                                0x10
#define _I2C1STAT0_NOT_ADDRESS_POSN                         0x3
#define _I2C1STAT0_NOT_ADDRESS_POSITION                     0x3
#define _I2C1STAT0_NOT_ADDRESS_SIZE                         0x1
#define _I2C1STAT0_NOT_ADDRESS_LENGTH                       0x1
#define _I2C1STAT0_NOT_ADDRESS_MASK                         0x8
#define _I2C1STAT0_NOT_WRITE_POSN                           0x4
#define _I2C1STAT0_NOT_WRITE_POSITION                       0x4
#define _I2C1STAT0_NOT_WRITE_SIZE                           0x1
#define _I2C1STAT0_NOT_WRITE_LENGTH                         0x1
#define _I2C1STAT0_NOT_WRITE_MASK                           0x10
#define _I2C1STAT0_NOT_A_POSN                               0x3
#define _I2C1STAT0_NOT_A_POSITION                           0x3
#define _I2C1STAT0_NOT_A_SIZE                               0x1
#define _I2C1STAT0_NOT_A_LENGTH                             0x1
#define _I2C1STAT0_NOT_A_MASK                               0x8
#define _I2C1STAT0_NOT_W_POSN                               0x4
#define _I2C1STAT0_NOT_W_POSITION                           0x4
#define _I2C1STAT0_NOT_W_SIZE                               0x1
#define _I2C1STAT0_NOT_W_LENGTH                             0x1
#define _I2C1STAT0_NOT_W_MASK                               0x10

// Register: I2C1STAT1
#define I2C1STAT1 I2C1STAT1
extern volatile unsigned char           I2C1STAT1           __at(0x3D78);
#ifndef _LIB_BUILD
asm("I2C1STAT1 equ 03D78h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RXBF                   :1;
        unsigned                        :1;
        unsigned CLRBF                  :1;
        unsigned RXRE                   :1;
        unsigned                        :1;
        unsigned TXBE                   :1;
        unsigned                        :1;
        unsigned TXWE                   :1;
    };
} I2C1STAT1bits_t;
extern volatile I2C1STAT1bits_t I2C1STAT1bits __at(0x3D78);
// bitfield macros
#define _I2C1STAT1_RXBF_POSN                                0x0
#define _I2C1STAT1_RXBF_POSITION                            0x0
#define _I2C1STAT1_RXBF_SIZE                                0x1
#define _I2C1STAT1_RXBF_LENGTH                              0x1
#define _I2C1STAT1_RXBF_MASK                                0x1
#define _I2C1STAT1_CLRBF_POSN                               0x2
#define _I2C1STAT1_CLRBF_POSITION                           0x2
#define _I2C1STAT1_CLRBF_SIZE                               0x1
#define _I2C1STAT1_CLRBF_LENGTH                             0x1
#define _I2C1STAT1_CLRBF_MASK                               0x4
#define _I2C1STAT1_RXRE_POSN                                0x3
#define _I2C1STAT1_RXRE_POSITION                            0x3
#define _I2C1STAT1_RXRE_SIZE                                0x1
#define _I2C1STAT1_RXRE_LENGTH                              0x1
#define _I2C1STAT1_RXRE_MASK                                0x8
#define _I2C1STAT1_TXBE_POSN                                0x5
#define _I2C1STAT1_TXBE_POSITION                            0x5
#define _I2C1STAT1_TXBE_SIZE                                0x1
#define _I2C1STAT1_TXBE_LENGTH                              0x1
#define _I2C1STAT1_TXBE_MASK                                0x20
#define _I2C1STAT1_TXWE_POSN                                0x7
#define _I2C1STAT1_TXWE_POSITION                            0x7
#define _I2C1STAT1_TXWE_SIZE                                0x1
#define _I2C1STAT1_TXWE_LENGTH                              0x1
#define _I2C1STAT1_TXWE_MASK                                0x80

// Register: I2C1PIR
#define I2C1PIR I2C1PIR
extern volatile unsigned char           I2C1PIR             __at(0x3D79);
#ifndef _LIB_BUILD
asm("I2C1PIR equ 03D79h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SCIF                   :1;
        unsigned RSCIF                  :1;
        unsigned PCIF                   :1;
        unsigned ADRIF                  :1;
        unsigned WRIF                   :1;
        unsigned                        :1;
        unsigned ACKTIF                 :1;
        unsigned CNTIF                  :1;
    };
    struct {
        unsigned SC1IF                  :1;
        unsigned RSC1IF                 :1;
        unsigned PC1IF                  :1;
        unsigned ADR1IF                 :1;
        unsigned WR1IF                  :1;
        unsigned                        :1;
        unsigned ACKT1IF                :1;
        unsigned CNT1IF                 :1;
    };
} I2C1PIRbits_t;
extern volatile I2C1PIRbits_t I2C1PIRbits __at(0x3D79);
// bitfield macros
#define _I2C1PIR_SCIF_POSN                                  0x0
#define _I2C1PIR_SCIF_POSITION                              0x0
#define _I2C1PIR_SCIF_SIZE                                  0x1
#define _I2C1PIR_SCIF_LENGTH                                0x1
#define _I2C1PIR_SCIF_MASK                                  0x1
#define _I2C1PIR_RSCIF_POSN                                 0x1
#define _I2C1PIR_RSCIF_POSITION                             0x1
#define _I2C1PIR_RSCIF_SIZE                                 0x1
#define _I2C1PIR_RSCIF_LENGTH                               0x1
#define _I2C1PIR_RSCIF_MASK                                 0x2
#define _I2C1PIR_PCIF_POSN                                  0x2
#define _I2C1PIR_PCIF_POSITION                              0x2
#define _I2C1PIR_PCIF_SIZE                                  0x1
#define _I2C1PIR_PCIF_LENGTH                                0x1
#define _I2C1PIR_PCIF_MASK                                  0x4
#define _I2C1PIR_ADRIF_POSN                                 0x3
#define _I2C1PIR_ADRIF_POSITION                             0x3
#define _I2C1PIR_ADRIF_SIZE                                 0x1
#define _I2C1PIR_ADRIF_LENGTH                               0x1
#define _I2C1PIR_ADRIF_MASK                                 0x8
#define _I2C1PIR_WRIF_POSN                                  0x4
#define _I2C1PIR_WRIF_POSITION                              0x4
#define _I2C1PIR_WRIF_SIZE                                  0x1
#define _I2C1PIR_WRIF_LENGTH                                0x1
#define _I2C1PIR_WRIF_MASK                                  0x10
#define _I2C1PIR_ACKTIF_POSN                                0x6
#define _I2C1PIR_ACKTIF_POSITION                            0x6
#define _I2C1PIR_ACKTIF_SIZE                                0x1
#define _I2C1PIR_ACKTIF_LENGTH                              0x1
#define _I2C1PIR_ACKTIF_MASK                                0x40
#define _I2C1PIR_CNTIF_POSN                                 0x7
#define _I2C1PIR_CNTIF_POSITION                             0x7
#define _I2C1PIR_CNTIF_SIZE                                 0x1
#define _I2C1PIR_CNTIF_LENGTH                               0x1
#define _I2C1PIR_CNTIF_MASK                                 0x80
#define _I2C1PIR_SC1IF_POSN                                 0x0
#define _I2C1PIR_SC1IF_POSITION                             0x0
#define _I2C1PIR_SC1IF_SIZE                                 0x1
#define _I2C1PIR_SC1IF_LENGTH                               0x1
#define _I2C1PIR_SC1IF_MASK                                 0x1
#define _I2C1PIR_RSC1IF_POSN                                0x1
#define _I2C1PIR_RSC1IF_POSITION                            0x1
#define _I2C1PIR_RSC1IF_SIZE                                0x1
#define _I2C1PIR_RSC1IF_LENGTH                              0x1
#define _I2C1PIR_RSC1IF_MASK                                0x2
#define _I2C1PIR_PC1IF_POSN                                 0x2
#define _I2C1PIR_PC1IF_POSITION                             0x2
#define _I2C1PIR_PC1IF_SIZE                                 0x1
#define _I2C1PIR_PC1IF_LENGTH                               0x1
#define _I2C1PIR_PC1IF_MASK                                 0x4
#define _I2C1PIR_ADR1IF_POSN                                0x3
#define _I2C1PIR_ADR1IF_POSITION                            0x3
#define _I2C1PIR_ADR1IF_SIZE                                0x1
#define _I2C1PIR_ADR1IF_LENGTH                              0x1
#define _I2C1PIR_ADR1IF_MASK                                0x8
#define _I2C1PIR_WR1IF_POSN                                 0x4
#define _I2C1PIR_WR1IF_POSITION                             0x4
#define _I2C1PIR_WR1IF_SIZE                                 0x1
#define _I2C1PIR_WR1IF_LENGTH                               0x1
#define _I2C1PIR_WR1IF_MASK                                 0x10
#define _I2C1PIR_ACKT1IF_POSN                               0x6
#define _I2C1PIR_ACKT1IF_POSITION                           0x6
#define _I2C1PIR_ACKT1IF_SIZE                               0x1
#define _I2C1PIR_ACKT1IF_LENGTH                             0x1
#define _I2C1PIR_ACKT1IF_MASK                               0x40
#define _I2C1PIR_CNT1IF_POSN                                0x7
#define _I2C1PIR_CNT1IF_POSITION                            0x7
#define _I2C1PIR_CNT1IF_SIZE                                0x1
#define _I2C1PIR_CNT1IF_LENGTH                              0x1
#define _I2C1PIR_CNT1IF_MASK                                0x80

// Register: I2C1PIE
#define I2C1PIE I2C1PIE
extern volatile unsigned char           I2C1PIE             __at(0x3D7A);
#ifndef _LIB_BUILD
asm("I2C1PIE equ 03D7Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SCIE                   :1;
        unsigned RSCIE                  :1;
        unsigned PCIE                   :1;
        unsigned ADRIE                  :1;
        unsigned WRIE                   :1;
        unsigned                        :1;
        unsigned ACKTIE                 :1;
        unsigned CNTIE                  :1;
    };
    struct {
        unsigned SC1IE                  :1;
        unsigned RSC1IE                 :1;
        unsigned PC1IE                  :1;
        unsigned ADR1IE                 :1;
        unsigned WR1IE                  :1;
        unsigned                        :1;
        unsigned ACKT1IE                :1;
        unsigned CNT1IE                 :1;
    };
} I2C1PIEbits_t;
extern volatile I2C1PIEbits_t I2C1PIEbits __at(0x3D7A);
// bitfield macros
#define _I2C1PIE_SCIE_POSN                                  0x0
#define _I2C1PIE_SCIE_POSITION                              0x0
#define _I2C1PIE_SCIE_SIZE                                  0x1
#define _I2C1PIE_SCIE_LENGTH                                0x1
#define _I2C1PIE_SCIE_MASK                                  0x1
#define _I2C1PIE_RSCIE_POSN                                 0x1
#define _I2C1PIE_RSCIE_POSITION                             0x1
#define _I2C1PIE_RSCIE_SIZE                                 0x1
#define _I2C1PIE_RSCIE_LENGTH                               0x1
#define _I2C1PIE_RSCIE_MASK                                 0x2
#define _I2C1PIE_PCIE_POSN                                  0x2
#define _I2C1PIE_PCIE_POSITION                              0x2
#define _I2C1PIE_PCIE_SIZE                                  0x1
#define _I2C1PIE_PCIE_LENGTH                                0x1
#define _I2C1PIE_PCIE_MASK                                  0x4
#define _I2C1PIE_ADRIE_POSN                                 0x3
#define _I2C1PIE_ADRIE_POSITION                             0x3
#define _I2C1PIE_ADRIE_SIZE                                 0x1
#define _I2C1PIE_ADRIE_LENGTH                               0x1
#define _I2C1PIE_ADRIE_MASK                                 0x8
#define _I2C1PIE_WRIE_POSN                                  0x4
#define _I2C1PIE_WRIE_POSITION                              0x4
#define _I2C1PIE_WRIE_SIZE                                  0x1
#define _I2C1PIE_WRIE_LENGTH                                0x1
#define _I2C1PIE_WRIE_MASK                                  0x10
#define _I2C1PIE_ACKTIE_POSN                                0x6
#define _I2C1PIE_ACKTIE_POSITION                            0x6
#define _I2C1PIE_ACKTIE_SIZE                                0x1
#define _I2C1PIE_ACKTIE_LENGTH                              0x1
#define _I2C1PIE_ACKTIE_MASK                                0x40
#define _I2C1PIE_CNTIE_POSN                                 0x7
#define _I2C1PIE_CNTIE_POSITION                             0x7
#define _I2C1PIE_CNTIE_SIZE                                 0x1
#define _I2C1PIE_CNTIE_LENGTH                               0x1
#define _I2C1PIE_CNTIE_MASK                                 0x80
#define _I2C1PIE_SC1IE_POSN                                 0x0
#define _I2C1PIE_SC1IE_POSITION                             0x0
#define _I2C1PIE_SC1IE_SIZE                                 0x1
#define _I2C1PIE_SC1IE_LENGTH                               0x1
#define _I2C1PIE_SC1IE_MASK                                 0x1
#define _I2C1PIE_RSC1IE_POSN                                0x1
#define _I2C1PIE_RSC1IE_POSITION                            0x1
#define _I2C1PIE_RSC1IE_SIZE                                0x1
#define _I2C1PIE_RSC1IE_LENGTH                              0x1
#define _I2C1PIE_RSC1IE_MASK                                0x2
#define _I2C1PIE_PC1IE_POSN                                 0x2
#define _I2C1PIE_PC1IE_POSITION                             0x2
#define _I2C1PIE_PC1IE_SIZE                                 0x1
#define _I2C1PIE_PC1IE_LENGTH                               0x1
#define _I2C1PIE_PC1IE_MASK                                 0x4
#define _I2C1PIE_ADR1IE_POSN                                0x3
#define _I2C1PIE_ADR1IE_POSITION                            0x3
#define _I2C1PIE_ADR1IE_SIZE                                0x1
#define _I2C1PIE_ADR1IE_LENGTH                              0x1
#define _I2C1PIE_ADR1IE_MASK                                0x8
#define _I2C1PIE_WR1IE_POSN                                 0x4
#define _I2C1PIE_WR1IE_POSITION                             0x4
#define _I2C1PIE_WR1IE_SIZE                                 0x1
#define _I2C1PIE_WR1IE_LENGTH                               0x1
#define _I2C1PIE_WR1IE_MASK                                 0x10
#define _I2C1PIE_ACKT1IE_POSN                               0x6
#define _I2C1PIE_ACKT1IE_POSITION                           0x6
#define _I2C1PIE_ACKT1IE_SIZE                               0x1
#define _I2C1PIE_ACKT1IE_LENGTH                             0x1
#define _I2C1PIE_ACKT1IE_MASK                               0x40
#define _I2C1PIE_CNT1IE_POSN                                0x7
#define _I2C1PIE_CNT1IE_POSITION                            0x7
#define _I2C1PIE_CNT1IE_SIZE                                0x1
#define _I2C1PIE_CNT1IE_LENGTH                              0x1
#define _I2C1PIE_CNT1IE_MASK                                0x80

// Register: I2C1CLK
#define I2C1CLK I2C1CLK
extern volatile unsigned char           I2C1CLK             __at(0x3D7B);
#ifndef _LIB_BUILD
asm("I2C1CLK equ 03D7Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLK                    :8;
    };
    struct {
        unsigned I2CCLK                 :8;
    };
    struct {
        unsigned CLK0                   :1;
        unsigned CLK1                   :1;
        unsigned CLK2                   :1;
        unsigned CLK3                   :1;
    };
    struct {
        unsigned I2CCLK0                :1;
        unsigned I2CCLK1                :1;
        unsigned I2CCLK2                :1;
        unsigned I2CCLK3                :1;
    };
} I2C1CLKbits_t;
extern volatile I2C1CLKbits_t I2C1CLKbits __at(0x3D7B);
// bitfield macros
#define _I2C1CLK_CLK_POSN                                   0x0
#define _I2C1CLK_CLK_POSITION                               0x0
#define _I2C1CLK_CLK_SIZE                                   0x8
#define _I2C1CLK_CLK_LENGTH                                 0x8
#define _I2C1CLK_CLK_MASK                                   0xFF
#define _I2C1CLK_I2CCLK_POSN                                0x0
#define _I2C1CLK_I2CCLK_POSITION                            0x0
#define _I2C1CLK_I2CCLK_SIZE                                0x8
#define _I2C1CLK_I2CCLK_LENGTH                              0x8
#define _I2C1CLK_I2CCLK_MASK                                0xFF
#define _I2C1CLK_CLK0_POSN                                  0x0
#define _I2C1CLK_CLK0_POSITION                              0x0
#define _I2C1CLK_CLK0_SIZE                                  0x1
#define _I2C1CLK_CLK0_LENGTH                                0x1
#define _I2C1CLK_CLK0_MASK                                  0x1
#define _I2C1CLK_CLK1_POSN                                  0x1
#define _I2C1CLK_CLK1_POSITION                              0x1
#define _I2C1CLK_CLK1_SIZE                                  0x1
#define _I2C1CLK_CLK1_LENGTH                                0x1
#define _I2C1CLK_CLK1_MASK                                  0x2
#define _I2C1CLK_CLK2_POSN                                  0x2
#define _I2C1CLK_CLK2_POSITION                              0x2
#define _I2C1CLK_CLK2_SIZE                                  0x1
#define _I2C1CLK_CLK2_LENGTH                                0x1
#define _I2C1CLK_CLK2_MASK                                  0x4
#define _I2C1CLK_CLK3_POSN                                  0x3
#define _I2C1CLK_CLK3_POSITION                              0x3
#define _I2C1CLK_CLK3_SIZE                                  0x1
#define _I2C1CLK_CLK3_LENGTH                                0x1
#define _I2C1CLK_CLK3_MASK                                  0x8
#define _I2C1CLK_I2CCLK0_POSN                               0x0
#define _I2C1CLK_I2CCLK0_POSITION                           0x0
#define _I2C1CLK_I2CCLK0_SIZE                               0x1
#define _I2C1CLK_I2CCLK0_LENGTH                             0x1
#define _I2C1CLK_I2CCLK0_MASK                               0x1
#define _I2C1CLK_I2CCLK1_POSN                               0x1
#define _I2C1CLK_I2CCLK1_POSITION                           0x1
#define _I2C1CLK_I2CCLK1_SIZE                               0x1
#define _I2C1CLK_I2CCLK1_LENGTH                             0x1
#define _I2C1CLK_I2CCLK1_MASK                               0x2
#define _I2C1CLK_I2CCLK2_POSN                               0x2
#define _I2C1CLK_I2CCLK2_POSITION                           0x2
#define _I2C1CLK_I2CCLK2_SIZE                               0x1
#define _I2C1CLK_I2CCLK2_LENGTH                             0x1
#define _I2C1CLK_I2CCLK2_MASK                               0x4
#define _I2C1CLK_I2CCLK3_POSN                               0x3
#define _I2C1CLK_I2CCLK3_POSITION                           0x3
#define _I2C1CLK_I2CCLK3_SIZE                               0x1
#define _I2C1CLK_I2CCLK3_LENGTH                             0x1
#define _I2C1CLK_I2CCLK3_MASK                               0x8

// Register: I2C1BTO
#define I2C1BTO I2C1BTO
extern volatile unsigned char           I2C1BTO             __at(0x3D7C);
#ifndef _LIB_BUILD
asm("I2C1BTO equ 03D7Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BTO                    :8;
    };
    struct {
        unsigned I2CBTO                 :8;
    };
    struct {
        unsigned BTO0                   :1;
        unsigned BTO1                   :1;
        unsigned BTO2                   :1;
    };
    struct {
        unsigned I2CBTO0                :1;
        unsigned I2CBTO1                :1;
        unsigned I2CBTO2                :1;
    };
} I2C1BTObits_t;
extern volatile I2C1BTObits_t I2C1BTObits __at(0x3D7C);
// bitfield macros
#define _I2C1BTO_BTO_POSN                                   0x0
#define _I2C1BTO_BTO_POSITION                               0x0
#define _I2C1BTO_BTO_SIZE                                   0x8
#define _I2C1BTO_BTO_LENGTH                                 0x8
#define _I2C1BTO_BTO_MASK                                   0xFF
#define _I2C1BTO_I2CBTO_POSN                                0x0
#define _I2C1BTO_I2CBTO_POSITION                            0x0
#define _I2C1BTO_I2CBTO_SIZE                                0x8
#define _I2C1BTO_I2CBTO_LENGTH                              0x8
#define _I2C1BTO_I2CBTO_MASK                                0xFF
#define _I2C1BTO_BTO0_POSN                                  0x0
#define _I2C1BTO_BTO0_POSITION                              0x0
#define _I2C1BTO_BTO0_SIZE                                  0x1
#define _I2C1BTO_BTO0_LENGTH                                0x1
#define _I2C1BTO_BTO0_MASK                                  0x1
#define _I2C1BTO_BTO1_POSN                                  0x1
#define _I2C1BTO_BTO1_POSITION                              0x1
#define _I2C1BTO_BTO1_SIZE                                  0x1
#define _I2C1BTO_BTO1_LENGTH                                0x1
#define _I2C1BTO_BTO1_MASK                                  0x2
#define _I2C1BTO_BTO2_POSN                                  0x2
#define _I2C1BTO_BTO2_POSITION                              0x2
#define _I2C1BTO_BTO2_SIZE                                  0x1
#define _I2C1BTO_BTO2_LENGTH                                0x1
#define _I2C1BTO_BTO2_MASK                                  0x4
#define _I2C1BTO_I2CBTO0_POSN                               0x0
#define _I2C1BTO_I2CBTO0_POSITION                           0x0
#define _I2C1BTO_I2CBTO0_SIZE                               0x1
#define _I2C1BTO_I2CBTO0_LENGTH                             0x1
#define _I2C1BTO_I2CBTO0_MASK                               0x1
#define _I2C1BTO_I2CBTO1_POSN                               0x1
#define _I2C1BTO_I2CBTO1_POSITION                           0x1
#define _I2C1BTO_I2CBTO1_SIZE                               0x1
#define _I2C1BTO_I2CBTO1_LENGTH                             0x1
#define _I2C1BTO_I2CBTO1_MASK                               0x2
#define _I2C1BTO_I2CBTO2_POSN                               0x2
#define _I2C1BTO_I2CBTO2_POSITION                           0x2
#define _I2C1BTO_I2CBTO2_SIZE                               0x1
#define _I2C1BTO_I2CBTO2_LENGTH                             0x1
#define _I2C1BTO_I2CBTO2_MASK                               0x4

// Register: U2RXB
#define U2RXB U2RXB
extern volatile unsigned char           U2RXB               __at(0x3DD0);
#ifndef _LIB_BUILD
asm("U2RXB equ 03DD0h");
#endif
// aliases
extern volatile unsigned char           U2RXBL              __at(0x3DD0);
#ifndef _LIB_BUILD
asm("U2RXBL equ 03DD0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RXB                    :8;
    };
} U2RXBbits_t;
extern volatile U2RXBbits_t U2RXBbits __at(0x3DD0);
// bitfield macros
#define _U2RXB_RXB_POSN                                     0x0
#define _U2RXB_RXB_POSITION                                 0x0
#define _U2RXB_RXB_SIZE                                     0x8
#define _U2RXB_RXB_LENGTH                                   0x8
#define _U2RXB_RXB_MASK                                     0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned RXB                    :8;
    };
} U2RXBLbits_t;
extern volatile U2RXBLbits_t U2RXBLbits __at(0x3DD0);
// bitfield macros
#define _U2RXBL_RXB_POSN                                    0x0
#define _U2RXBL_RXB_POSITION                                0x0
#define _U2RXBL_RXB_SIZE                                    0x8
#define _U2RXBL_RXB_LENGTH                                  0x8
#define _U2RXBL_RXB_MASK                                    0xFF

// Register: U2TXB
#define U2TXB U2TXB
extern volatile unsigned char           U2TXB               __at(0x3DD2);
#ifndef _LIB_BUILD
asm("U2TXB equ 03DD2h");
#endif
// aliases
extern volatile unsigned char           U2TXBL              __at(0x3DD2);
#ifndef _LIB_BUILD
asm("U2TXBL equ 03DD2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TXB                    :8;
    };
} U2TXBbits_t;
extern volatile U2TXBbits_t U2TXBbits __at(0x3DD2);
// bitfield macros
#define _U2TXB_TXB_POSN                                     0x0
#define _U2TXB_TXB_POSITION                                 0x0
#define _U2TXB_TXB_SIZE                                     0x8
#define _U2TXB_TXB_LENGTH                                   0x8
#define _U2TXB_TXB_MASK                                     0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned TXB                    :8;
    };
} U2TXBLbits_t;
extern volatile U2TXBLbits_t U2TXBLbits __at(0x3DD2);
// bitfield macros
#define _U2TXBL_TXB_POSN                                    0x0
#define _U2TXBL_TXB_POSITION                                0x0
#define _U2TXBL_TXB_SIZE                                    0x8
#define _U2TXBL_TXB_LENGTH                                  0x8
#define _U2TXBL_TXB_MASK                                    0xFF

// Register: U2P1
#define U2P1 U2P1
extern volatile unsigned char           U2P1                __at(0x3DD4);
#ifndef _LIB_BUILD
asm("U2P1 equ 03DD4h");
#endif

// Register: U2P1L
#define U2P1L U2P1L
extern volatile unsigned char           U2P1L               __at(0x3DD4);
#ifndef _LIB_BUILD
asm("U2P1L equ 03DD4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned P1L                    :8;
    };
} U2P1Lbits_t;
extern volatile U2P1Lbits_t U2P1Lbits __at(0x3DD4);
// bitfield macros
#define _U2P1L_P1L_POSN                                     0x0
#define _U2P1L_P1L_POSITION                                 0x0
#define _U2P1L_P1L_SIZE                                     0x8
#define _U2P1L_P1L_LENGTH                                   0x8
#define _U2P1L_P1L_MASK                                     0xFF

// Register: U2P2
#define U2P2 U2P2
extern volatile unsigned char           U2P2                __at(0x3DD6);
#ifndef _LIB_BUILD
asm("U2P2 equ 03DD6h");
#endif

// Register: U2P2L
#define U2P2L U2P2L
extern volatile unsigned char           U2P2L               __at(0x3DD6);
#ifndef _LIB_BUILD
asm("U2P2L equ 03DD6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned P2L                    :8;
    };
} U2P2Lbits_t;
extern volatile U2P2Lbits_t U2P2Lbits __at(0x3DD6);
// bitfield macros
#define _U2P2L_P2L_POSN                                     0x0
#define _U2P2L_P2L_POSITION                                 0x0
#define _U2P2L_P2L_SIZE                                     0x8
#define _U2P2L_P2L_LENGTH                                   0x8
#define _U2P2L_P2L_MASK                                     0xFF

// Register: U2P3
#define U2P3 U2P3
extern volatile unsigned char           U2P3                __at(0x3DD8);
#ifndef _LIB_BUILD
asm("U2P3 equ 03DD8h");
#endif

// Register: U2P3L
#define U2P3L U2P3L
extern volatile unsigned char           U2P3L               __at(0x3DD8);
#ifndef _LIB_BUILD
asm("U2P3L equ 03DD8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned P3L                    :8;
    };
} U2P3Lbits_t;
extern volatile U2P3Lbits_t U2P3Lbits __at(0x3DD8);
// bitfield macros
#define _U2P3L_P3L_POSN                                     0x0
#define _U2P3L_P3L_POSITION                                 0x0
#define _U2P3L_P3L_SIZE                                     0x8
#define _U2P3L_P3L_LENGTH                                   0x8
#define _U2P3L_P3L_MASK                                     0xFF

// Register: U2CON0
#define U2CON0 U2CON0
extern volatile unsigned char           U2CON0              __at(0x3DDA);
#ifndef _LIB_BUILD
asm("U2CON0 equ 03DDAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
    };
    struct {
        unsigned U2MODE                 :4;
        unsigned U2RXEN                 :1;
        unsigned U2TXEN                 :1;
        unsigned U2ABDEN                :1;
        unsigned U2BRGS                 :1;
    };
    struct {
        unsigned U2MODE0                :1;
        unsigned U2MODE1                :1;
        unsigned U2MODE2                :1;
    };
    struct {
        unsigned MODE                   :4;
        unsigned RXEN                   :1;
        unsigned TXEN                   :1;
        unsigned ABDEN                  :1;
        unsigned BRGS                   :1;
    };
} U2CON0bits_t;
extern volatile U2CON0bits_t U2CON0bits __at(0x3DDA);
// bitfield macros
#define _U2CON0_MODE0_POSN                                  0x0
#define _U2CON0_MODE0_POSITION                              0x0
#define _U2CON0_MODE0_SIZE                                  0x1
#define _U2CON0_MODE0_LENGTH                                0x1
#define _U2CON0_MODE0_MASK                                  0x1
#define _U2CON0_MODE1_POSN                                  0x1
#define _U2CON0_MODE1_POSITION                              0x1
#define _U2CON0_MODE1_SIZE                                  0x1
#define _U2CON0_MODE1_LENGTH                                0x1
#define _U2CON0_MODE1_MASK                                  0x2
#define _U2CON0_MODE2_POSN                                  0x2
#define _U2CON0_MODE2_POSITION                              0x2
#define _U2CON0_MODE2_SIZE                                  0x1
#define _U2CON0_MODE2_LENGTH                                0x1
#define _U2CON0_MODE2_MASK                                  0x4
#define _U2CON0_U2MODE_POSN                                 0x0
#define _U2CON0_U2MODE_POSITION                             0x0
#define _U2CON0_U2MODE_SIZE                                 0x4
#define _U2CON0_U2MODE_LENGTH                               0x4
#define _U2CON0_U2MODE_MASK                                 0xF
#define _U2CON0_U2RXEN_POSN                                 0x4
#define _U2CON0_U2RXEN_POSITION                             0x4
#define _U2CON0_U2RXEN_SIZE                                 0x1
#define _U2CON0_U2RXEN_LENGTH                               0x1
#define _U2CON0_U2RXEN_MASK                                 0x10
#define _U2CON0_U2TXEN_POSN                                 0x5
#define _U2CON0_U2TXEN_POSITION                             0x5
#define _U2CON0_U2TXEN_SIZE                                 0x1
#define _U2CON0_U2TXEN_LENGTH                               0x1
#define _U2CON0_U2TXEN_MASK                                 0x20
#define _U2CON0_U2ABDEN_POSN                                0x6
#define _U2CON0_U2ABDEN_POSITION                            0x6
#define _U2CON0_U2ABDEN_SIZE                                0x1
#define _U2CON0_U2ABDEN_LENGTH                              0x1
#define _U2CON0_U2ABDEN_MASK                                0x40
#define _U2CON0_U2BRGS_POSN                                 0x7
#define _U2CON0_U2BRGS_POSITION                             0x7
#define _U2CON0_U2BRGS_SIZE                                 0x1
#define _U2CON0_U2BRGS_LENGTH                               0x1
#define _U2CON0_U2BRGS_MASK                                 0x80
#define _U2CON0_U2MODE0_POSN                                0x0
#define _U2CON0_U2MODE0_POSITION                            0x0
#define _U2CON0_U2MODE0_SIZE                                0x1
#define _U2CON0_U2MODE0_LENGTH                              0x1
#define _U2CON0_U2MODE0_MASK                                0x1
#define _U2CON0_U2MODE1_POSN                                0x1
#define _U2CON0_U2MODE1_POSITION                            0x1
#define _U2CON0_U2MODE1_SIZE                                0x1
#define _U2CON0_U2MODE1_LENGTH                              0x1
#define _U2CON0_U2MODE1_MASK                                0x2
#define _U2CON0_U2MODE2_POSN                                0x2
#define _U2CON0_U2MODE2_POSITION                            0x2
#define _U2CON0_U2MODE2_SIZE                                0x1
#define _U2CON0_U2MODE2_LENGTH                              0x1
#define _U2CON0_U2MODE2_MASK                                0x4
#define _U2CON0_MODE_POSN                                   0x0
#define _U2CON0_MODE_POSITION                               0x0
#define _U2CON0_MODE_SIZE                                   0x4
#define _U2CON0_MODE_LENGTH                                 0x4
#define _U2CON0_MODE_MASK                                   0xF
#define _U2CON0_RXEN_POSN                                   0x4
#define _U2CON0_RXEN_POSITION                               0x4
#define _U2CON0_RXEN_SIZE                                   0x1
#define _U2CON0_RXEN_LENGTH                                 0x1
#define _U2CON0_RXEN_MASK                                   0x10
#define _U2CON0_TXEN_POSN                                   0x5
#define _U2CON0_TXEN_POSITION                               0x5
#define _U2CON0_TXEN_SIZE                                   0x1
#define _U2CON0_TXEN_LENGTH                                 0x1
#define _U2CON0_TXEN_MASK                                   0x20
#define _U2CON0_ABDEN_POSN                                  0x6
#define _U2CON0_ABDEN_POSITION                              0x6
#define _U2CON0_ABDEN_SIZE                                  0x1
#define _U2CON0_ABDEN_LENGTH                                0x1
#define _U2CON0_ABDEN_MASK                                  0x40
#define _U2CON0_BRGS_POSN                                   0x7
#define _U2CON0_BRGS_POSITION                               0x7
#define _U2CON0_BRGS_SIZE                                   0x1
#define _U2CON0_BRGS_LENGTH                                 0x1
#define _U2CON0_BRGS_MASK                                   0x80

// Register: U2CON1
#define U2CON1 U2CON1
extern volatile unsigned char           U2CON1              __at(0x3DDB);
#ifndef _LIB_BUILD
asm("U2CON1 equ 03DDBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SENDB                  :1;
        unsigned BRKOVR                 :1;
        unsigned                        :1;
        unsigned RXBIMD                 :1;
        unsigned WUE                    :1;
        unsigned                        :2;
        unsigned ON                     :1;
    };
    struct {
        unsigned U2SENDB                :1;
        unsigned U2BRKOVR               :1;
        unsigned                        :1;
        unsigned U2RXBIMD               :1;
        unsigned U2WUE                  :1;
        unsigned                        :2;
        unsigned U2ON                   :1;
    };
} U2CON1bits_t;
extern volatile U2CON1bits_t U2CON1bits __at(0x3DDB);
// bitfield macros
#define _U2CON1_SENDB_POSN                                  0x0
#define _U2CON1_SENDB_POSITION                              0x0
#define _U2CON1_SENDB_SIZE                                  0x1
#define _U2CON1_SENDB_LENGTH                                0x1
#define _U2CON1_SENDB_MASK                                  0x1
#define _U2CON1_BRKOVR_POSN                                 0x1
#define _U2CON1_BRKOVR_POSITION                             0x1
#define _U2CON1_BRKOVR_SIZE                                 0x1
#define _U2CON1_BRKOVR_LENGTH                               0x1
#define _U2CON1_BRKOVR_MASK                                 0x2
#define _U2CON1_RXBIMD_POSN                                 0x3
#define _U2CON1_RXBIMD_POSITION                             0x3
#define _U2CON1_RXBIMD_SIZE                                 0x1
#define _U2CON1_RXBIMD_LENGTH                               0x1
#define _U2CON1_RXBIMD_MASK                                 0x8
#define _U2CON1_WUE_POSN                                    0x4
#define _U2CON1_WUE_POSITION                                0x4
#define _U2CON1_WUE_SIZE                                    0x1
#define _U2CON1_WUE_LENGTH                                  0x1
#define _U2CON1_WUE_MASK                                    0x10
#define _U2CON1_ON_POSN                                     0x7
#define _U2CON1_ON_POSITION                                 0x7
#define _U2CON1_ON_SIZE                                     0x1
#define _U2CON1_ON_LENGTH                                   0x1
#define _U2CON1_ON_MASK                                     0x80
#define _U2CON1_U2SENDB_POSN                                0x0
#define _U2CON1_U2SENDB_POSITION                            0x0
#define _U2CON1_U2SENDB_SIZE                                0x1
#define _U2CON1_U2SENDB_LENGTH                              0x1
#define _U2CON1_U2SENDB_MASK                                0x1
#define _U2CON1_U2BRKOVR_POSN                               0x1
#define _U2CON1_U2BRKOVR_POSITION                           0x1
#define _U2CON1_U2BRKOVR_SIZE                               0x1
#define _U2CON1_U2BRKOVR_LENGTH                             0x1
#define _U2CON1_U2BRKOVR_MASK                               0x2
#define _U2CON1_U2RXBIMD_POSN                               0x3
#define _U2CON1_U2RXBIMD_POSITION                           0x3
#define _U2CON1_U2RXBIMD_SIZE                               0x1
#define _U2CON1_U2RXBIMD_LENGTH                             0x1
#define _U2CON1_U2RXBIMD_MASK                               0x8
#define _U2CON1_U2WUE_POSN                                  0x4
#define _U2CON1_U2WUE_POSITION                              0x4
#define _U2CON1_U2WUE_SIZE                                  0x1
#define _U2CON1_U2WUE_LENGTH                                0x1
#define _U2CON1_U2WUE_MASK                                  0x10
#define _U2CON1_U2ON_POSN                                   0x7
#define _U2CON1_U2ON_POSITION                               0x7
#define _U2CON1_U2ON_SIZE                                   0x1
#define _U2CON1_U2ON_LENGTH                                 0x1
#define _U2CON1_U2ON_MASK                                   0x80

// Register: U2CON2
#define U2CON2 U2CON2
extern volatile unsigned char           U2CON2              __at(0x3DDC);
#ifndef _LIB_BUILD
asm("U2CON2 equ 03DDCh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FLO                    :2;
        unsigned TXPOL                  :1;
        unsigned                        :1;
        unsigned STP                    :2;
        unsigned RXPOL                  :1;
        unsigned RUNOVF                 :1;
    };
    struct {
        unsigned FLO0                   :1;
        unsigned FLO1                   :1;
        unsigned                        :2;
        unsigned STP0                   :1;
        unsigned STP1                   :1;
    };
    struct {
        unsigned U2FLO                  :2;
        unsigned U2TXPOL                :1;
        unsigned                        :1;
        unsigned U2STP                  :2;
        unsigned U2RXPOL                :1;
        unsigned U2RUNOVF               :1;
    };
    struct {
        unsigned U2FLO0                 :1;
        unsigned U2FLO1                 :1;
        unsigned                        :2;
        unsigned U2STP0                 :1;
        unsigned U2STP1                 :1;
    };
} U2CON2bits_t;
extern volatile U2CON2bits_t U2CON2bits __at(0x3DDC);
// bitfield macros
#define _U2CON2_FLO_POSN                                    0x0
#define _U2CON2_FLO_POSITION                                0x0
#define _U2CON2_FLO_SIZE                                    0x2
#define _U2CON2_FLO_LENGTH                                  0x2
#define _U2CON2_FLO_MASK                                    0x3
#define _U2CON2_TXPOL_POSN                                  0x2
#define _U2CON2_TXPOL_POSITION                              0x2
#define _U2CON2_TXPOL_SIZE                                  0x1
#define _U2CON2_TXPOL_LENGTH                                0x1
#define _U2CON2_TXPOL_MASK                                  0x4
#define _U2CON2_STP_POSN                                    0x4
#define _U2CON2_STP_POSITION                                0x4
#define _U2CON2_STP_SIZE                                    0x2
#define _U2CON2_STP_LENGTH                                  0x2
#define _U2CON2_STP_MASK                                    0x30
#define _U2CON2_RXPOL_POSN                                  0x6
#define _U2CON2_RXPOL_POSITION                              0x6
#define _U2CON2_RXPOL_SIZE                                  0x1
#define _U2CON2_RXPOL_LENGTH                                0x1
#define _U2CON2_RXPOL_MASK                                  0x40
#define _U2CON2_RUNOVF_POSN                                 0x7
#define _U2CON2_RUNOVF_POSITION                             0x7
#define _U2CON2_RUNOVF_SIZE                                 0x1
#define _U2CON2_RUNOVF_LENGTH                               0x1
#define _U2CON2_RUNOVF_MASK                                 0x80
#define _U2CON2_FLO0_POSN                                   0x0
#define _U2CON2_FLO0_POSITION                               0x0
#define _U2CON2_FLO0_SIZE                                   0x1
#define _U2CON2_FLO0_LENGTH                                 0x1
#define _U2CON2_FLO0_MASK                                   0x1
#define _U2CON2_FLO1_POSN                                   0x1
#define _U2CON2_FLO1_POSITION                               0x1
#define _U2CON2_FLO1_SIZE                                   0x1
#define _U2CON2_FLO1_LENGTH                                 0x1
#define _U2CON2_FLO1_MASK                                   0x2
#define _U2CON2_STP0_POSN                                   0x4
#define _U2CON2_STP0_POSITION                               0x4
#define _U2CON2_STP0_SIZE                                   0x1
#define _U2CON2_STP0_LENGTH                                 0x1
#define _U2CON2_STP0_MASK                                   0x10
#define _U2CON2_STP1_POSN                                   0x5
#define _U2CON2_STP1_POSITION                               0x5
#define _U2CON2_STP1_SIZE                                   0x1
#define _U2CON2_STP1_LENGTH                                 0x1
#define _U2CON2_STP1_MASK                                   0x20
#define _U2CON2_U2FLO_POSN                                  0x0
#define _U2CON2_U2FLO_POSITION                              0x0
#define _U2CON2_U2FLO_SIZE                                  0x2
#define _U2CON2_U2FLO_LENGTH                                0x2
#define _U2CON2_U2FLO_MASK                                  0x3
#define _U2CON2_U2TXPOL_POSN                                0x2
#define _U2CON2_U2TXPOL_POSITION                            0x2
#define _U2CON2_U2TXPOL_SIZE                                0x1
#define _U2CON2_U2TXPOL_LENGTH                              0x1
#define _U2CON2_U2TXPOL_MASK                                0x4
#define _U2CON2_U2STP_POSN                                  0x4
#define _U2CON2_U2STP_POSITION                              0x4
#define _U2CON2_U2STP_SIZE                                  0x2
#define _U2CON2_U2STP_LENGTH                                0x2
#define _U2CON2_U2STP_MASK                                  0x30
#define _U2CON2_U2RXPOL_POSN                                0x6
#define _U2CON2_U2RXPOL_POSITION                            0x6
#define _U2CON2_U2RXPOL_SIZE                                0x1
#define _U2CON2_U2RXPOL_LENGTH                              0x1
#define _U2CON2_U2RXPOL_MASK                                0x40
#define _U2CON2_U2RUNOVF_POSN                               0x7
#define _U2CON2_U2RUNOVF_POSITION                           0x7
#define _U2CON2_U2RUNOVF_SIZE                               0x1
#define _U2CON2_U2RUNOVF_LENGTH                             0x1
#define _U2CON2_U2RUNOVF_MASK                               0x80
#define _U2CON2_U2FLO0_POSN                                 0x0
#define _U2CON2_U2FLO0_POSITION                             0x0
#define _U2CON2_U2FLO0_SIZE                                 0x1
#define _U2CON2_U2FLO0_LENGTH                               0x1
#define _U2CON2_U2FLO0_MASK                                 0x1
#define _U2CON2_U2FLO1_POSN                                 0x1
#define _U2CON2_U2FLO1_POSITION                             0x1
#define _U2CON2_U2FLO1_SIZE                                 0x1
#define _U2CON2_U2FLO1_LENGTH                               0x1
#define _U2CON2_U2FLO1_MASK                                 0x2
#define _U2CON2_U2STP0_POSN                                 0x4
#define _U2CON2_U2STP0_POSITION                             0x4
#define _U2CON2_U2STP0_SIZE                                 0x1
#define _U2CON2_U2STP0_LENGTH                               0x1
#define _U2CON2_U2STP0_MASK                                 0x10
#define _U2CON2_U2STP1_POSN                                 0x5
#define _U2CON2_U2STP1_POSITION                             0x5
#define _U2CON2_U2STP1_SIZE                                 0x1
#define _U2CON2_U2STP1_LENGTH                               0x1
#define _U2CON2_U2STP1_MASK                                 0x20

// Register: U2BRG
#define U2BRG U2BRG
extern volatile unsigned short          U2BRG               __at(0x3DDD);
#ifndef _LIB_BUILD
asm("U2BRG equ 03DDDh");
#endif

// Register: U2BRGL
#define U2BRGL U2BRGL
extern volatile unsigned char           U2BRGL              __at(0x3DDD);
#ifndef _LIB_BUILD
asm("U2BRGL equ 03DDDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BRGL                   :8;
    };
} U2BRGLbits_t;
extern volatile U2BRGLbits_t U2BRGLbits __at(0x3DDD);
// bitfield macros
#define _U2BRGL_BRGL_POSN                                   0x0
#define _U2BRGL_BRGL_POSITION                               0x0
#define _U2BRGL_BRGL_SIZE                                   0x8
#define _U2BRGL_BRGL_LENGTH                                 0x8
#define _U2BRGL_BRGL_MASK                                   0xFF

// Register: U2BRGH
#define U2BRGH U2BRGH
extern volatile unsigned char           U2BRGH              __at(0x3DDE);
#ifndef _LIB_BUILD
asm("U2BRGH equ 03DDEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BRGH                   :8;
    };
} U2BRGHbits_t;
extern volatile U2BRGHbits_t U2BRGHbits __at(0x3DDE);
// bitfield macros
#define _U2BRGH_BRGH_POSN                                   0x0
#define _U2BRGH_BRGH_POSITION                               0x0
#define _U2BRGH_BRGH_SIZE                                   0x8
#define _U2BRGH_BRGH_LENGTH                                 0x8
#define _U2BRGH_BRGH_MASK                                   0xFF

// Register: U2FIFO
#define U2FIFO U2FIFO
extern volatile unsigned char           U2FIFO              __at(0x3DDF);
#ifndef _LIB_BUILD
asm("U2FIFO equ 03DDFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RXBF                   :1;
        unsigned RXBE                   :1;
        unsigned XON                    :1;
        unsigned RXIDL                  :1;
        unsigned TXBF                   :1;
        unsigned TXBE                   :1;
        unsigned STPMD                  :1;
        unsigned TXWRE                  :1;
    };
    struct {
        unsigned U2RXBF                 :1;
        unsigned U2RXBE                 :1;
        unsigned U2XON                  :1;
        unsigned U2RXIDL                :1;
        unsigned U2TXBF                 :1;
        unsigned U2TXBE                 :1;
        unsigned U2STPMD                :1;
        unsigned U2TXWRE                :1;
    };
    struct {
        unsigned                        :3;
        unsigned U2RCIDL                :1;
    };
    struct {
        unsigned                        :3;
        unsigned RCIDL                  :1;
    };
} U2FIFObits_t;
extern volatile U2FIFObits_t U2FIFObits __at(0x3DDF);
// bitfield macros
#define _U2FIFO_RXBF_POSN                                   0x0
#define _U2FIFO_RXBF_POSITION                               0x0
#define _U2FIFO_RXBF_SIZE                                   0x1
#define _U2FIFO_RXBF_LENGTH                                 0x1
#define _U2FIFO_RXBF_MASK                                   0x1
#define _U2FIFO_RXBE_POSN                                   0x1
#define _U2FIFO_RXBE_POSITION                               0x1
#define _U2FIFO_RXBE_SIZE                                   0x1
#define _U2FIFO_RXBE_LENGTH                                 0x1
#define _U2FIFO_RXBE_MASK                                   0x2
#define _U2FIFO_XON_POSN                                    0x2
#define _U2FIFO_XON_POSITION                                0x2
#define _U2FIFO_XON_SIZE                                    0x1
#define _U2FIFO_XON_LENGTH                                  0x1
#define _U2FIFO_XON_MASK                                    0x4
#define _U2FIFO_RXIDL_POSN                                  0x3
#define _U2FIFO_RXIDL_POSITION                              0x3
#define _U2FIFO_RXIDL_SIZE                                  0x1
#define _U2FIFO_RXIDL_LENGTH                                0x1
#define _U2FIFO_RXIDL_MASK                                  0x8
#define _U2FIFO_TXBF_POSN                                   0x4
#define _U2FIFO_TXBF_POSITION                               0x4
#define _U2FIFO_TXBF_SIZE                                   0x1
#define _U2FIFO_TXBF_LENGTH                                 0x1
#define _U2FIFO_TXBF_MASK                                   0x10
#define _U2FIFO_TXBE_POSN                                   0x5
#define _U2FIFO_TXBE_POSITION                               0x5
#define _U2FIFO_TXBE_SIZE                                   0x1
#define _U2FIFO_TXBE_LENGTH                                 0x1
#define _U2FIFO_TXBE_MASK                                   0x20
#define _U2FIFO_STPMD_POSN                                  0x6
#define _U2FIFO_STPMD_POSITION                              0x6
#define _U2FIFO_STPMD_SIZE                                  0x1
#define _U2FIFO_STPMD_LENGTH                                0x1
#define _U2FIFO_STPMD_MASK                                  0x40
#define _U2FIFO_TXWRE_POSN                                  0x7
#define _U2FIFO_TXWRE_POSITION                              0x7
#define _U2FIFO_TXWRE_SIZE                                  0x1
#define _U2FIFO_TXWRE_LENGTH                                0x1
#define _U2FIFO_TXWRE_MASK                                  0x80
#define _U2FIFO_U2RXBF_POSN                                 0x0
#define _U2FIFO_U2RXBF_POSITION                             0x0
#define _U2FIFO_U2RXBF_SIZE                                 0x1
#define _U2FIFO_U2RXBF_LENGTH                               0x1
#define _U2FIFO_U2RXBF_MASK                                 0x1
#define _U2FIFO_U2RXBE_POSN                                 0x1
#define _U2FIFO_U2RXBE_POSITION                             0x1
#define _U2FIFO_U2RXBE_SIZE                                 0x1
#define _U2FIFO_U2RXBE_LENGTH                               0x1
#define _U2FIFO_U2RXBE_MASK                                 0x2
#define _U2FIFO_U2XON_POSN                                  0x2
#define _U2FIFO_U2XON_POSITION                              0x2
#define _U2FIFO_U2XON_SIZE                                  0x1
#define _U2FIFO_U2XON_LENGTH                                0x1
#define _U2FIFO_U2XON_MASK                                  0x4
#define _U2FIFO_U2RXIDL_POSN                                0x3
#define _U2FIFO_U2RXIDL_POSITION                            0x3
#define _U2FIFO_U2RXIDL_SIZE                                0x1
#define _U2FIFO_U2RXIDL_LENGTH                              0x1
#define _U2FIFO_U2RXIDL_MASK                                0x8
#define _U2FIFO_U2TXBF_POSN                                 0x4
#define _U2FIFO_U2TXBF_POSITION                             0x4
#define _U2FIFO_U2TXBF_SIZE                                 0x1
#define _U2FIFO_U2TXBF_LENGTH                               0x1
#define _U2FIFO_U2TXBF_MASK                                 0x10
#define _U2FIFO_U2TXBE_POSN                                 0x5
#define _U2FIFO_U2TXBE_POSITION                             0x5
#define _U2FIFO_U2TXBE_SIZE                                 0x1
#define _U2FIFO_U2TXBE_LENGTH                               0x1
#define _U2FIFO_U2TXBE_MASK                                 0x20
#define _U2FIFO_U2STPMD_POSN                                0x6
#define _U2FIFO_U2STPMD_POSITION                            0x6
#define _U2FIFO_U2STPMD_SIZE                                0x1
#define _U2FIFO_U2STPMD_LENGTH                              0x1
#define _U2FIFO_U2STPMD_MASK                                0x40
#define _U2FIFO_U2TXWRE_POSN                                0x7
#define _U2FIFO_U2TXWRE_POSITION                            0x7
#define _U2FIFO_U2TXWRE_SIZE                                0x1
#define _U2FIFO_U2TXWRE_LENGTH                              0x1
#define _U2FIFO_U2TXWRE_MASK                                0x80
#define _U2FIFO_U2RCIDL_POSN                                0x3
#define _U2FIFO_U2RCIDL_POSITION                            0x3
#define _U2FIFO_U2RCIDL_SIZE                                0x1
#define _U2FIFO_U2RCIDL_LENGTH                              0x1
#define _U2FIFO_U2RCIDL_MASK                                0x8
#define _U2FIFO_RCIDL_POSN                                  0x3
#define _U2FIFO_RCIDL_POSITION                              0x3
#define _U2FIFO_RCIDL_SIZE                                  0x1
#define _U2FIFO_RCIDL_LENGTH                                0x1
#define _U2FIFO_RCIDL_MASK                                  0x8

// Register: U2UIR
#define U2UIR U2UIR
extern volatile unsigned char           U2UIR               __at(0x3DE0);
#ifndef _LIB_BUILD
asm("U2UIR equ 03DE0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned ABDIE                  :1;
        unsigned                        :3;
        unsigned ABDIF                  :1;
        unsigned WUIF                   :1;
    };
    struct {
        unsigned                        :2;
        unsigned U2ABDIE                :1;
        unsigned                        :3;
        unsigned U2ABDIF                :1;
        unsigned U2WUIF                 :1;
    };
} U2UIRbits_t;
extern volatile U2UIRbits_t U2UIRbits __at(0x3DE0);
// bitfield macros
#define _U2UIR_ABDIE_POSN                                   0x2
#define _U2UIR_ABDIE_POSITION                               0x2
#define _U2UIR_ABDIE_SIZE                                   0x1
#define _U2UIR_ABDIE_LENGTH                                 0x1
#define _U2UIR_ABDIE_MASK                                   0x4
#define _U2UIR_ABDIF_POSN                                   0x6
#define _U2UIR_ABDIF_POSITION                               0x6
#define _U2UIR_ABDIF_SIZE                                   0x1
#define _U2UIR_ABDIF_LENGTH                                 0x1
#define _U2UIR_ABDIF_MASK                                   0x40
#define _U2UIR_WUIF_POSN                                    0x7
#define _U2UIR_WUIF_POSITION                                0x7
#define _U2UIR_WUIF_SIZE                                    0x1
#define _U2UIR_WUIF_LENGTH                                  0x1
#define _U2UIR_WUIF_MASK                                    0x80
#define _U2UIR_U2ABDIE_POSN                                 0x2
#define _U2UIR_U2ABDIE_POSITION                             0x2
#define _U2UIR_U2ABDIE_SIZE                                 0x1
#define _U2UIR_U2ABDIE_LENGTH                               0x1
#define _U2UIR_U2ABDIE_MASK                                 0x4
#define _U2UIR_U2ABDIF_POSN                                 0x6
#define _U2UIR_U2ABDIF_POSITION                             0x6
#define _U2UIR_U2ABDIF_SIZE                                 0x1
#define _U2UIR_U2ABDIF_LENGTH                               0x1
#define _U2UIR_U2ABDIF_MASK                                 0x40
#define _U2UIR_U2WUIF_POSN                                  0x7
#define _U2UIR_U2WUIF_POSITION                              0x7
#define _U2UIR_U2WUIF_SIZE                                  0x1
#define _U2UIR_U2WUIF_LENGTH                                0x1
#define _U2UIR_U2WUIF_MASK                                  0x80

// Register: U2ERRIR
#define U2ERRIR U2ERRIR
extern volatile unsigned char           U2ERRIR             __at(0x3DE1);
#ifndef _LIB_BUILD
asm("U2ERRIR equ 03DE1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TXCIF                  :1;
        unsigned RXFOIF                 :1;
        unsigned RXBKIF                 :1;
        unsigned FERIF                  :1;
        unsigned CERIF                  :1;
        unsigned ABDOVF                 :1;
        unsigned PERIF                  :1;
        unsigned TXMTIF                 :1;
    };
    struct {
        unsigned U2TXCIF                :1;
        unsigned U2RXFOIF               :1;
        unsigned U2RXBKIF               :1;
        unsigned U2FERIF                :1;
        unsigned U2CERIF                :1;
        unsigned U2ABDOVF               :1;
        unsigned U2PERIF                :1;
        unsigned U2TXMTIF               :1;
    };
} U2ERRIRbits_t;
extern volatile U2ERRIRbits_t U2ERRIRbits __at(0x3DE1);
// bitfield macros
#define _U2ERRIR_TXCIF_POSN                                 0x0
#define _U2ERRIR_TXCIF_POSITION                             0x0
#define _U2ERRIR_TXCIF_SIZE                                 0x1
#define _U2ERRIR_TXCIF_LENGTH                               0x1
#define _U2ERRIR_TXCIF_MASK                                 0x1
#define _U2ERRIR_RXFOIF_POSN                                0x1
#define _U2ERRIR_RXFOIF_POSITION                            0x1
#define _U2ERRIR_RXFOIF_SIZE                                0x1
#define _U2ERRIR_RXFOIF_LENGTH                              0x1
#define _U2ERRIR_RXFOIF_MASK                                0x2
#define _U2ERRIR_RXBKIF_POSN                                0x2
#define _U2ERRIR_RXBKIF_POSITION                            0x2
#define _U2ERRIR_RXBKIF_SIZE                                0x1
#define _U2ERRIR_RXBKIF_LENGTH                              0x1
#define _U2ERRIR_RXBKIF_MASK                                0x4
#define _U2ERRIR_FERIF_POSN                                 0x3
#define _U2ERRIR_FERIF_POSITION                             0x3
#define _U2ERRIR_FERIF_SIZE                                 0x1
#define _U2ERRIR_FERIF_LENGTH                               0x1
#define _U2ERRIR_FERIF_MASK                                 0x8
#define _U2ERRIR_CERIF_POSN                                 0x4
#define _U2ERRIR_CERIF_POSITION                             0x4
#define _U2ERRIR_CERIF_SIZE                                 0x1
#define _U2ERRIR_CERIF_LENGTH                               0x1
#define _U2ERRIR_CERIF_MASK                                 0x10
#define _U2ERRIR_ABDOVF_POSN                                0x5
#define _U2ERRIR_ABDOVF_POSITION                            0x5
#define _U2ERRIR_ABDOVF_SIZE                                0x1
#define _U2ERRIR_ABDOVF_LENGTH                              0x1
#define _U2ERRIR_ABDOVF_MASK                                0x20
#define _U2ERRIR_PERIF_POSN                                 0x6
#define _U2ERRIR_PERIF_POSITION                             0x6
#define _U2ERRIR_PERIF_SIZE                                 0x1
#define _U2ERRIR_PERIF_LENGTH                               0x1
#define _U2ERRIR_PERIF_MASK                                 0x40
#define _U2ERRIR_TXMTIF_POSN                                0x7
#define _U2ERRIR_TXMTIF_POSITION                            0x7
#define _U2ERRIR_TXMTIF_SIZE                                0x1
#define _U2ERRIR_TXMTIF_LENGTH                              0x1
#define _U2ERRIR_TXMTIF_MASK                                0x80
#define _U2ERRIR_U2TXCIF_POSN                               0x0
#define _U2ERRIR_U2TXCIF_POSITION                           0x0
#define _U2ERRIR_U2TXCIF_SIZE                               0x1
#define _U2ERRIR_U2TXCIF_LENGTH                             0x1
#define _U2ERRIR_U2TXCIF_MASK                               0x1
#define _U2ERRIR_U2RXFOIF_POSN                              0x1
#define _U2ERRIR_U2RXFOIF_POSITION                          0x1
#define _U2ERRIR_U2RXFOIF_SIZE                              0x1
#define _U2ERRIR_U2RXFOIF_LENGTH                            0x1
#define _U2ERRIR_U2RXFOIF_MASK                              0x2
#define _U2ERRIR_U2RXBKIF_POSN                              0x2
#define _U2ERRIR_U2RXBKIF_POSITION                          0x2
#define _U2ERRIR_U2RXBKIF_SIZE                              0x1
#define _U2ERRIR_U2RXBKIF_LENGTH                            0x1
#define _U2ERRIR_U2RXBKIF_MASK                              0x4
#define _U2ERRIR_U2FERIF_POSN                               0x3
#define _U2ERRIR_U2FERIF_POSITION                           0x3
#define _U2ERRIR_U2FERIF_SIZE                               0x1
#define _U2ERRIR_U2FERIF_LENGTH                             0x1
#define _U2ERRIR_U2FERIF_MASK                               0x8
#define _U2ERRIR_U2CERIF_POSN                               0x4
#define _U2ERRIR_U2CERIF_POSITION                           0x4
#define _U2ERRIR_U2CERIF_SIZE                               0x1
#define _U2ERRIR_U2CERIF_LENGTH                             0x1
#define _U2ERRIR_U2CERIF_MASK                               0x10
#define _U2ERRIR_U2ABDOVF_POSN                              0x5
#define _U2ERRIR_U2ABDOVF_POSITION                          0x5
#define _U2ERRIR_U2ABDOVF_SIZE                              0x1
#define _U2ERRIR_U2ABDOVF_LENGTH                            0x1
#define _U2ERRIR_U2ABDOVF_MASK                              0x20
#define _U2ERRIR_U2PERIF_POSN                               0x6
#define _U2ERRIR_U2PERIF_POSITION                           0x6
#define _U2ERRIR_U2PERIF_SIZE                               0x1
#define _U2ERRIR_U2PERIF_LENGTH                             0x1
#define _U2ERRIR_U2PERIF_MASK                               0x40
#define _U2ERRIR_U2TXMTIF_POSN                              0x7
#define _U2ERRIR_U2TXMTIF_POSITION                          0x7
#define _U2ERRIR_U2TXMTIF_SIZE                              0x1
#define _U2ERRIR_U2TXMTIF_LENGTH                            0x1
#define _U2ERRIR_U2TXMTIF_MASK                              0x80

// Register: U2ERRIE
#define U2ERRIE U2ERRIE
extern volatile unsigned char           U2ERRIE             __at(0x3DE2);
#ifndef _LIB_BUILD
asm("U2ERRIE equ 03DE2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TXCIE                  :1;
        unsigned RXFOIE                 :1;
        unsigned RXBKIE                 :1;
        unsigned FERIE                  :1;
        unsigned CERIE                  :1;
        unsigned ABDOVE                 :1;
        unsigned PERIE                  :1;
        unsigned TXMTIE                 :1;
    };
    struct {
        unsigned U2TXCIE                :1;
        unsigned U2RXFOIE               :1;
        unsigned U2RXBKIE               :1;
        unsigned U2FERIE                :1;
        unsigned U2CERIE                :1;
        unsigned U2ABDOVE               :1;
        unsigned U2PERIE                :1;
        unsigned U2TXMTIE               :1;
    };
} U2ERRIEbits_t;
extern volatile U2ERRIEbits_t U2ERRIEbits __at(0x3DE2);
// bitfield macros
#define _U2ERRIE_TXCIE_POSN                                 0x0
#define _U2ERRIE_TXCIE_POSITION                             0x0
#define _U2ERRIE_TXCIE_SIZE                                 0x1
#define _U2ERRIE_TXCIE_LENGTH                               0x1
#define _U2ERRIE_TXCIE_MASK                                 0x1
#define _U2ERRIE_RXFOIE_POSN                                0x1
#define _U2ERRIE_RXFOIE_POSITION                            0x1
#define _U2ERRIE_RXFOIE_SIZE                                0x1
#define _U2ERRIE_RXFOIE_LENGTH                              0x1
#define _U2ERRIE_RXFOIE_MASK                                0x2
#define _U2ERRIE_RXBKIE_POSN                                0x2
#define _U2ERRIE_RXBKIE_POSITION                            0x2
#define _U2ERRIE_RXBKIE_SIZE                                0x1
#define _U2ERRIE_RXBKIE_LENGTH                              0x1
#define _U2ERRIE_RXBKIE_MASK                                0x4
#define _U2ERRIE_FERIE_POSN                                 0x3
#define _U2ERRIE_FERIE_POSITION                             0x3
#define _U2ERRIE_FERIE_SIZE                                 0x1
#define _U2ERRIE_FERIE_LENGTH                               0x1
#define _U2ERRIE_FERIE_MASK                                 0x8
#define _U2ERRIE_CERIE_POSN                                 0x4
#define _U2ERRIE_CERIE_POSITION                             0x4
#define _U2ERRIE_CERIE_SIZE                                 0x1
#define _U2ERRIE_CERIE_LENGTH                               0x1
#define _U2ERRIE_CERIE_MASK                                 0x10
#define _U2ERRIE_ABDOVE_POSN                                0x5
#define _U2ERRIE_ABDOVE_POSITION                            0x5
#define _U2ERRIE_ABDOVE_SIZE                                0x1
#define _U2ERRIE_ABDOVE_LENGTH                              0x1
#define _U2ERRIE_ABDOVE_MASK                                0x20
#define _U2ERRIE_PERIE_POSN                                 0x6
#define _U2ERRIE_PERIE_POSITION                             0x6
#define _U2ERRIE_PERIE_SIZE                                 0x1
#define _U2ERRIE_PERIE_LENGTH                               0x1
#define _U2ERRIE_PERIE_MASK                                 0x40
#define _U2ERRIE_TXMTIE_POSN                                0x7
#define _U2ERRIE_TXMTIE_POSITION                            0x7
#define _U2ERRIE_TXMTIE_SIZE                                0x1
#define _U2ERRIE_TXMTIE_LENGTH                              0x1
#define _U2ERRIE_TXMTIE_MASK                                0x80
#define _U2ERRIE_U2TXCIE_POSN                               0x0
#define _U2ERRIE_U2TXCIE_POSITION                           0x0
#define _U2ERRIE_U2TXCIE_SIZE                               0x1
#define _U2ERRIE_U2TXCIE_LENGTH                             0x1
#define _U2ERRIE_U2TXCIE_MASK                               0x1
#define _U2ERRIE_U2RXFOIE_POSN                              0x1
#define _U2ERRIE_U2RXFOIE_POSITION                          0x1
#define _U2ERRIE_U2RXFOIE_SIZE                              0x1
#define _U2ERRIE_U2RXFOIE_LENGTH                            0x1
#define _U2ERRIE_U2RXFOIE_MASK                              0x2
#define _U2ERRIE_U2RXBKIE_POSN                              0x2
#define _U2ERRIE_U2RXBKIE_POSITION                          0x2
#define _U2ERRIE_U2RXBKIE_SIZE                              0x1
#define _U2ERRIE_U2RXBKIE_LENGTH                            0x1
#define _U2ERRIE_U2RXBKIE_MASK                              0x4
#define _U2ERRIE_U2FERIE_POSN                               0x3
#define _U2ERRIE_U2FERIE_POSITION                           0x3
#define _U2ERRIE_U2FERIE_SIZE                               0x1
#define _U2ERRIE_U2FERIE_LENGTH                             0x1
#define _U2ERRIE_U2FERIE_MASK                               0x8
#define _U2ERRIE_U2CERIE_POSN                               0x4
#define _U2ERRIE_U2CERIE_POSITION                           0x4
#define _U2ERRIE_U2CERIE_SIZE                               0x1
#define _U2ERRIE_U2CERIE_LENGTH                             0x1
#define _U2ERRIE_U2CERIE_MASK                               0x10
#define _U2ERRIE_U2ABDOVE_POSN                              0x5
#define _U2ERRIE_U2ABDOVE_POSITION                          0x5
#define _U2ERRIE_U2ABDOVE_SIZE                              0x1
#define _U2ERRIE_U2ABDOVE_LENGTH                            0x1
#define _U2ERRIE_U2ABDOVE_MASK                              0x20
#define _U2ERRIE_U2PERIE_POSN                               0x6
#define _U2ERRIE_U2PERIE_POSITION                           0x6
#define _U2ERRIE_U2PERIE_SIZE                               0x1
#define _U2ERRIE_U2PERIE_LENGTH                             0x1
#define _U2ERRIE_U2PERIE_MASK                               0x40
#define _U2ERRIE_U2TXMTIE_POSN                              0x7
#define _U2ERRIE_U2TXMTIE_POSITION                          0x7
#define _U2ERRIE_U2TXMTIE_SIZE                              0x1
#define _U2ERRIE_U2TXMTIE_LENGTH                            0x1
#define _U2ERRIE_U2TXMTIE_MASK                              0x80

// Register: U1RXB
#define U1RXB U1RXB
extern volatile unsigned char           U1RXB               __at(0x3DE8);
#ifndef _LIB_BUILD
asm("U1RXB equ 03DE8h");
#endif
// aliases
extern volatile unsigned char           U1RXBL              __at(0x3DE8);
#ifndef _LIB_BUILD
asm("U1RXBL equ 03DE8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RXB                    :8;
    };
} U1RXBbits_t;
extern volatile U1RXBbits_t U1RXBbits __at(0x3DE8);
// bitfield macros
#define _U1RXB_RXB_POSN                                     0x0
#define _U1RXB_RXB_POSITION                                 0x0
#define _U1RXB_RXB_SIZE                                     0x8
#define _U1RXB_RXB_LENGTH                                   0x8
#define _U1RXB_RXB_MASK                                     0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned RXB                    :8;
    };
} U1RXBLbits_t;
extern volatile U1RXBLbits_t U1RXBLbits __at(0x3DE8);
// bitfield macros
#define _U1RXBL_RXB_POSN                                    0x0
#define _U1RXBL_RXB_POSITION                                0x0
#define _U1RXBL_RXB_SIZE                                    0x8
#define _U1RXBL_RXB_LENGTH                                  0x8
#define _U1RXBL_RXB_MASK                                    0xFF

// Register: U1RXCHK
#define U1RXCHK U1RXCHK
extern volatile unsigned char           U1RXCHK             __at(0x3DE9);
#ifndef _LIB_BUILD
asm("U1RXCHK equ 03DE9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RXCHK                  :8;
    };
} U1RXCHKbits_t;
extern volatile U1RXCHKbits_t U1RXCHKbits __at(0x3DE9);
// bitfield macros
#define _U1RXCHK_RXCHK_POSN                                 0x0
#define _U1RXCHK_RXCHK_POSITION                             0x0
#define _U1RXCHK_RXCHK_SIZE                                 0x8
#define _U1RXCHK_RXCHK_LENGTH                               0x8
#define _U1RXCHK_RXCHK_MASK                                 0xFF

// Register: U1TXB
#define U1TXB U1TXB
extern volatile unsigned char           U1TXB               __at(0x3DEA);
#ifndef _LIB_BUILD
asm("U1TXB equ 03DEAh");
#endif
// aliases
extern volatile unsigned char           U1TXBL              __at(0x3DEA);
#ifndef _LIB_BUILD
asm("U1TXBL equ 03DEAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TXB                    :8;
    };
} U1TXBbits_t;
extern volatile U1TXBbits_t U1TXBbits __at(0x3DEA);
// bitfield macros
#define _U1TXB_TXB_POSN                                     0x0
#define _U1TXB_TXB_POSITION                                 0x0
#define _U1TXB_TXB_SIZE                                     0x8
#define _U1TXB_TXB_LENGTH                                   0x8
#define _U1TXB_TXB_MASK                                     0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned TXB                    :8;
    };
} U1TXBLbits_t;
extern volatile U1TXBLbits_t U1TXBLbits __at(0x3DEA);
// bitfield macros
#define _U1TXBL_TXB_POSN                                    0x0
#define _U1TXBL_TXB_POSITION                                0x0
#define _U1TXBL_TXB_SIZE                                    0x8
#define _U1TXBL_TXB_LENGTH                                  0x8
#define _U1TXBL_TXB_MASK                                    0xFF

// Register: U1TXCHK
#define U1TXCHK U1TXCHK
extern volatile unsigned char           U1TXCHK             __at(0x3DEB);
#ifndef _LIB_BUILD
asm("U1TXCHK equ 03DEBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TXCHK                  :8;
    };
} U1TXCHKbits_t;
extern volatile U1TXCHKbits_t U1TXCHKbits __at(0x3DEB);
// bitfield macros
#define _U1TXCHK_TXCHK_POSN                                 0x0
#define _U1TXCHK_TXCHK_POSITION                             0x0
#define _U1TXCHK_TXCHK_SIZE                                 0x8
#define _U1TXCHK_TXCHK_LENGTH                               0x8
#define _U1TXCHK_TXCHK_MASK                                 0xFF

// Register: U1P1
#define U1P1 U1P1
extern volatile unsigned short          U1P1                __at(0x3DEC);
#ifndef _LIB_BUILD
asm("U1P1 equ 03DECh");
#endif

// Register: U1P1L
#define U1P1L U1P1L
extern volatile unsigned char           U1P1L               __at(0x3DEC);
#ifndef _LIB_BUILD
asm("U1P1L equ 03DECh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned P1L                    :8;
    };
} U1P1Lbits_t;
extern volatile U1P1Lbits_t U1P1Lbits __at(0x3DEC);
// bitfield macros
#define _U1P1L_P1L_POSN                                     0x0
#define _U1P1L_P1L_POSITION                                 0x0
#define _U1P1L_P1L_SIZE                                     0x8
#define _U1P1L_P1L_LENGTH                                   0x8
#define _U1P1L_P1L_MASK                                     0xFF

// Register: U1P1H
#define U1P1H U1P1H
extern volatile unsigned char           U1P1H               __at(0x3DED);
#ifndef _LIB_BUILD
asm("U1P1H equ 03DEDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned P1H                    :1;
    };
} U1P1Hbits_t;
extern volatile U1P1Hbits_t U1P1Hbits __at(0x3DED);
// bitfield macros
#define _U1P1H_P1H_POSN                                     0x0
#define _U1P1H_P1H_POSITION                                 0x0
#define _U1P1H_P1H_SIZE                                     0x1
#define _U1P1H_P1H_LENGTH                                   0x1
#define _U1P1H_P1H_MASK                                     0x1

// Register: U1P2
#define U1P2 U1P2
extern volatile unsigned short          U1P2                __at(0x3DEE);
#ifndef _LIB_BUILD
asm("U1P2 equ 03DEEh");
#endif

// Register: U1P2L
#define U1P2L U1P2L
extern volatile unsigned char           U1P2L               __at(0x3DEE);
#ifndef _LIB_BUILD
asm("U1P2L equ 03DEEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned P2L                    :8;
    };
} U1P2Lbits_t;
extern volatile U1P2Lbits_t U1P2Lbits __at(0x3DEE);
// bitfield macros
#define _U1P2L_P2L_POSN                                     0x0
#define _U1P2L_P2L_POSITION                                 0x0
#define _U1P2L_P2L_SIZE                                     0x8
#define _U1P2L_P2L_LENGTH                                   0x8
#define _U1P2L_P2L_MASK                                     0xFF

// Register: U1P2H
#define U1P2H U1P2H
extern volatile unsigned char           U1P2H               __at(0x3DEF);
#ifndef _LIB_BUILD
asm("U1P2H equ 03DEFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned P2H                    :1;
    };
} U1P2Hbits_t;
extern volatile U1P2Hbits_t U1P2Hbits __at(0x3DEF);
// bitfield macros
#define _U1P2H_P2H_POSN                                     0x0
#define _U1P2H_P2H_POSITION                                 0x0
#define _U1P2H_P2H_SIZE                                     0x1
#define _U1P2H_P2H_LENGTH                                   0x1
#define _U1P2H_P2H_MASK                                     0x1

// Register: U1P3
#define U1P3 U1P3
extern volatile unsigned short          U1P3                __at(0x3DF0);
#ifndef _LIB_BUILD
asm("U1P3 equ 03DF0h");
#endif

// Register: U1P3L
#define U1P3L U1P3L
extern volatile unsigned char           U1P3L               __at(0x3DF0);
#ifndef _LIB_BUILD
asm("U1P3L equ 03DF0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned P3L                    :8;
    };
} U1P3Lbits_t;
extern volatile U1P3Lbits_t U1P3Lbits __at(0x3DF0);
// bitfield macros
#define _U1P3L_P3L_POSN                                     0x0
#define _U1P3L_P3L_POSITION                                 0x0
#define _U1P3L_P3L_SIZE                                     0x8
#define _U1P3L_P3L_LENGTH                                   0x8
#define _U1P3L_P3L_MASK                                     0xFF

// Register: U1P3H
#define U1P3H U1P3H
extern volatile unsigned char           U1P3H               __at(0x3DF1);
#ifndef _LIB_BUILD
asm("U1P3H equ 03DF1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned P3H                    :1;
    };
} U1P3Hbits_t;
extern volatile U1P3Hbits_t U1P3Hbits __at(0x3DF1);
// bitfield macros
#define _U1P3H_P3H_POSN                                     0x0
#define _U1P3H_P3H_POSITION                                 0x0
#define _U1P3H_P3H_SIZE                                     0x1
#define _U1P3H_P3H_LENGTH                                   0x1
#define _U1P3H_P3H_MASK                                     0x1

// Register: U1CON0
#define U1CON0 U1CON0
extern volatile unsigned char           U1CON0              __at(0x3DF2);
#ifndef _LIB_BUILD
asm("U1CON0 equ 03DF2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned MODE3                  :1;
    };
    struct {
        unsigned U1MODE                 :4;
        unsigned U1RXEN                 :1;
        unsigned U1TXEN                 :1;
        unsigned U1ABDEN                :1;
        unsigned U1BRGS                 :1;
    };
    struct {
        unsigned U1MODE0                :1;
        unsigned U1MODE1                :1;
        unsigned U1MODE2                :1;
        unsigned U1MODE3                :1;
    };
    struct {
        unsigned MODE                   :4;
        unsigned RXEN                   :1;
        unsigned TXEN                   :1;
        unsigned ABDEN                  :1;
        unsigned BRGS                   :1;
    };
} U1CON0bits_t;
extern volatile U1CON0bits_t U1CON0bits __at(0x3DF2);
// bitfield macros
#define _U1CON0_MODE0_POSN                                  0x0
#define _U1CON0_MODE0_POSITION                              0x0
#define _U1CON0_MODE0_SIZE                                  0x1
#define _U1CON0_MODE0_LENGTH                                0x1
#define _U1CON0_MODE0_MASK                                  0x1
#define _U1CON0_MODE1_POSN                                  0x1
#define _U1CON0_MODE1_POSITION                              0x1
#define _U1CON0_MODE1_SIZE                                  0x1
#define _U1CON0_MODE1_LENGTH                                0x1
#define _U1CON0_MODE1_MASK                                  0x2
#define _U1CON0_MODE2_POSN                                  0x2
#define _U1CON0_MODE2_POSITION                              0x2
#define _U1CON0_MODE2_SIZE                                  0x1
#define _U1CON0_MODE2_LENGTH                                0x1
#define _U1CON0_MODE2_MASK                                  0x4
#define _U1CON0_MODE3_POSN                                  0x3
#define _U1CON0_MODE3_POSITION                              0x3
#define _U1CON0_MODE3_SIZE                                  0x1
#define _U1CON0_MODE3_LENGTH                                0x1
#define _U1CON0_MODE3_MASK                                  0x8
#define _U1CON0_U1MODE_POSN                                 0x0
#define _U1CON0_U1MODE_POSITION                             0x0
#define _U1CON0_U1MODE_SIZE                                 0x4
#define _U1CON0_U1MODE_LENGTH                               0x4
#define _U1CON0_U1MODE_MASK                                 0xF
#define _U1CON0_U1RXEN_POSN                                 0x4
#define _U1CON0_U1RXEN_POSITION                             0x4
#define _U1CON0_U1RXEN_SIZE                                 0x1
#define _U1CON0_U1RXEN_LENGTH                               0x1
#define _U1CON0_U1RXEN_MASK                                 0x10
#define _U1CON0_U1TXEN_POSN                                 0x5
#define _U1CON0_U1TXEN_POSITION                             0x5
#define _U1CON0_U1TXEN_SIZE                                 0x1
#define _U1CON0_U1TXEN_LENGTH                               0x1
#define _U1CON0_U1TXEN_MASK                                 0x20
#define _U1CON0_U1ABDEN_POSN                                0x6
#define _U1CON0_U1ABDEN_POSITION                            0x6
#define _U1CON0_U1ABDEN_SIZE                                0x1
#define _U1CON0_U1ABDEN_LENGTH                              0x1
#define _U1CON0_U1ABDEN_MASK                                0x40
#define _U1CON0_U1BRGS_POSN                                 0x7
#define _U1CON0_U1BRGS_POSITION                             0x7
#define _U1CON0_U1BRGS_SIZE                                 0x1
#define _U1CON0_U1BRGS_LENGTH                               0x1
#define _U1CON0_U1BRGS_MASK                                 0x80
#define _U1CON0_U1MODE0_POSN                                0x0
#define _U1CON0_U1MODE0_POSITION                            0x0
#define _U1CON0_U1MODE0_SIZE                                0x1
#define _U1CON0_U1MODE0_LENGTH                              0x1
#define _U1CON0_U1MODE0_MASK                                0x1
#define _U1CON0_U1MODE1_POSN                                0x1
#define _U1CON0_U1MODE1_POSITION                            0x1
#define _U1CON0_U1MODE1_SIZE                                0x1
#define _U1CON0_U1MODE1_LENGTH                              0x1
#define _U1CON0_U1MODE1_MASK                                0x2
#define _U1CON0_U1MODE2_POSN                                0x2
#define _U1CON0_U1MODE2_POSITION                            0x2
#define _U1CON0_U1MODE2_SIZE                                0x1
#define _U1CON0_U1MODE2_LENGTH                              0x1
#define _U1CON0_U1MODE2_MASK                                0x4
#define _U1CON0_U1MODE3_POSN                                0x3
#define _U1CON0_U1MODE3_POSITION                            0x3
#define _U1CON0_U1MODE3_SIZE                                0x1
#define _U1CON0_U1MODE3_LENGTH                              0x1
#define _U1CON0_U1MODE3_MASK                                0x8
#define _U1CON0_MODE_POSN                                   0x0
#define _U1CON0_MODE_POSITION                               0x0
#define _U1CON0_MODE_SIZE                                   0x4
#define _U1CON0_MODE_LENGTH                                 0x4
#define _U1CON0_MODE_MASK                                   0xF
#define _U1CON0_RXEN_POSN                                   0x4
#define _U1CON0_RXEN_POSITION                               0x4
#define _U1CON0_RXEN_SIZE                                   0x1
#define _U1CON0_RXEN_LENGTH                                 0x1
#define _U1CON0_RXEN_MASK                                   0x10
#define _U1CON0_TXEN_POSN                                   0x5
#define _U1CON0_TXEN_POSITION                               0x5
#define _U1CON0_TXEN_SIZE                                   0x1
#define _U1CON0_TXEN_LENGTH                                 0x1
#define _U1CON0_TXEN_MASK                                   0x20
#define _U1CON0_ABDEN_POSN                                  0x6
#define _U1CON0_ABDEN_POSITION                              0x6
#define _U1CON0_ABDEN_SIZE                                  0x1
#define _U1CON0_ABDEN_LENGTH                                0x1
#define _U1CON0_ABDEN_MASK                                  0x40
#define _U1CON0_BRGS_POSN                                   0x7
#define _U1CON0_BRGS_POSITION                               0x7
#define _U1CON0_BRGS_SIZE                                   0x1
#define _U1CON0_BRGS_LENGTH                                 0x1
#define _U1CON0_BRGS_MASK                                   0x80

// Register: U1CON1
#define U1CON1 U1CON1
extern volatile unsigned char           U1CON1              __at(0x3DF3);
#ifndef _LIB_BUILD
asm("U1CON1 equ 03DF3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SENDB                  :1;
        unsigned BRKOVR                 :1;
        unsigned                        :1;
        unsigned RXBIMD                 :1;
        unsigned WUE                    :1;
        unsigned                        :2;
        unsigned ON                     :1;
    };
    struct {
        unsigned U1SENDB                :1;
        unsigned U1BRKOVR               :1;
        unsigned                        :1;
        unsigned U1RXBIMD               :1;
        unsigned U1WUE                  :1;
        unsigned                        :2;
        unsigned U1ON                   :1;
    };
} U1CON1bits_t;
extern volatile U1CON1bits_t U1CON1bits __at(0x3DF3);
// bitfield macros
#define _U1CON1_SENDB_POSN                                  0x0
#define _U1CON1_SENDB_POSITION                              0x0
#define _U1CON1_SENDB_SIZE                                  0x1
#define _U1CON1_SENDB_LENGTH                                0x1
#define _U1CON1_SENDB_MASK                                  0x1
#define _U1CON1_BRKOVR_POSN                                 0x1
#define _U1CON1_BRKOVR_POSITION                             0x1
#define _U1CON1_BRKOVR_SIZE                                 0x1
#define _U1CON1_BRKOVR_LENGTH                               0x1
#define _U1CON1_BRKOVR_MASK                                 0x2
#define _U1CON1_RXBIMD_POSN                                 0x3
#define _U1CON1_RXBIMD_POSITION                             0x3
#define _U1CON1_RXBIMD_SIZE                                 0x1
#define _U1CON1_RXBIMD_LENGTH                               0x1
#define _U1CON1_RXBIMD_MASK                                 0x8
#define _U1CON1_WUE_POSN                                    0x4
#define _U1CON1_WUE_POSITION                                0x4
#define _U1CON1_WUE_SIZE                                    0x1
#define _U1CON1_WUE_LENGTH                                  0x1
#define _U1CON1_WUE_MASK                                    0x10
#define _U1CON1_ON_POSN                                     0x7
#define _U1CON1_ON_POSITION                                 0x7
#define _U1CON1_ON_SIZE                                     0x1
#define _U1CON1_ON_LENGTH                                   0x1
#define _U1CON1_ON_MASK                                     0x80
#define _U1CON1_U1SENDB_POSN                                0x0
#define _U1CON1_U1SENDB_POSITION                            0x0
#define _U1CON1_U1SENDB_SIZE                                0x1
#define _U1CON1_U1SENDB_LENGTH                              0x1
#define _U1CON1_U1SENDB_MASK                                0x1
#define _U1CON1_U1BRKOVR_POSN                               0x1
#define _U1CON1_U1BRKOVR_POSITION                           0x1
#define _U1CON1_U1BRKOVR_SIZE                               0x1
#define _U1CON1_U1BRKOVR_LENGTH                             0x1
#define _U1CON1_U1BRKOVR_MASK                               0x2
#define _U1CON1_U1RXBIMD_POSN                               0x3
#define _U1CON1_U1RXBIMD_POSITION                           0x3
#define _U1CON1_U1RXBIMD_SIZE                               0x1
#define _U1CON1_U1RXBIMD_LENGTH                             0x1
#define _U1CON1_U1RXBIMD_MASK                               0x8
#define _U1CON1_U1WUE_POSN                                  0x4
#define _U1CON1_U1WUE_POSITION                              0x4
#define _U1CON1_U1WUE_SIZE                                  0x1
#define _U1CON1_U1WUE_LENGTH                                0x1
#define _U1CON1_U1WUE_MASK                                  0x10
#define _U1CON1_U1ON_POSN                                   0x7
#define _U1CON1_U1ON_POSITION                               0x7
#define _U1CON1_U1ON_SIZE                                   0x1
#define _U1CON1_U1ON_LENGTH                                 0x1
#define _U1CON1_U1ON_MASK                                   0x80

// Register: U1CON2
#define U1CON2 U1CON2
extern volatile unsigned char           U1CON2              __at(0x3DF4);
#ifndef _LIB_BUILD
asm("U1CON2 equ 03DF4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FLO                    :2;
        unsigned TXPOL                  :1;
        unsigned C0EN                   :1;
        unsigned STP                    :2;
        unsigned RXPOL                  :1;
        unsigned RUNOVF                 :1;
    };
    struct {
        unsigned FLO0                   :1;
        unsigned FLO1                   :1;
        unsigned                        :2;
        unsigned STP0                   :1;
        unsigned STP1                   :1;
    };
    struct {
        unsigned U1FLO                  :2;
        unsigned U1TXPOL                :1;
        unsigned U1C0EN                 :1;
        unsigned U1STP                  :2;
        unsigned U1RXPOL                :1;
        unsigned U1RUNOVF               :1;
    };
    struct {
        unsigned U1FLO0                 :1;
        unsigned U1FLO1                 :1;
        unsigned                        :2;
        unsigned U1STP0                 :1;
        unsigned U1STP1                 :1;
    };
} U1CON2bits_t;
extern volatile U1CON2bits_t U1CON2bits __at(0x3DF4);
// bitfield macros
#define _U1CON2_FLO_POSN                                    0x0
#define _U1CON2_FLO_POSITION                                0x0
#define _U1CON2_FLO_SIZE                                    0x2
#define _U1CON2_FLO_LENGTH                                  0x2
#define _U1CON2_FLO_MASK                                    0x3
#define _U1CON2_TXPOL_POSN                                  0x2
#define _U1CON2_TXPOL_POSITION                              0x2
#define _U1CON2_TXPOL_SIZE                                  0x1
#define _U1CON2_TXPOL_LENGTH                                0x1
#define _U1CON2_TXPOL_MASK                                  0x4
#define _U1CON2_C0EN_POSN                                   0x3
#define _U1CON2_C0EN_POSITION                               0x3
#define _U1CON2_C0EN_SIZE                                   0x1
#define _U1CON2_C0EN_LENGTH                                 0x1
#define _U1CON2_C0EN_MASK                                   0x8
#define _U1CON2_STP_POSN                                    0x4
#define _U1CON2_STP_POSITION                                0x4
#define _U1CON2_STP_SIZE                                    0x2
#define _U1CON2_STP_LENGTH                                  0x2
#define _U1CON2_STP_MASK                                    0x30
#define _U1CON2_RXPOL_POSN                                  0x6
#define _U1CON2_RXPOL_POSITION                              0x6
#define _U1CON2_RXPOL_SIZE                                  0x1
#define _U1CON2_RXPOL_LENGTH                                0x1
#define _U1CON2_RXPOL_MASK                                  0x40
#define _U1CON2_RUNOVF_POSN                                 0x7
#define _U1CON2_RUNOVF_POSITION                             0x7
#define _U1CON2_RUNOVF_SIZE                                 0x1
#define _U1CON2_RUNOVF_LENGTH                               0x1
#define _U1CON2_RUNOVF_MASK                                 0x80
#define _U1CON2_FLO0_POSN                                   0x0
#define _U1CON2_FLO0_POSITION                               0x0
#define _U1CON2_FLO0_SIZE                                   0x1
#define _U1CON2_FLO0_LENGTH                                 0x1
#define _U1CON2_FLO0_MASK                                   0x1
#define _U1CON2_FLO1_POSN                                   0x1
#define _U1CON2_FLO1_POSITION                               0x1
#define _U1CON2_FLO1_SIZE                                   0x1
#define _U1CON2_FLO1_LENGTH                                 0x1
#define _U1CON2_FLO1_MASK                                   0x2
#define _U1CON2_STP0_POSN                                   0x4
#define _U1CON2_STP0_POSITION                               0x4
#define _U1CON2_STP0_SIZE                                   0x1
#define _U1CON2_STP0_LENGTH                                 0x1
#define _U1CON2_STP0_MASK                                   0x10
#define _U1CON2_STP1_POSN                                   0x5
#define _U1CON2_STP1_POSITION                               0x5
#define _U1CON2_STP1_SIZE                                   0x1
#define _U1CON2_STP1_LENGTH                                 0x1
#define _U1CON2_STP1_MASK                                   0x20
#define _U1CON2_U1FLO_POSN                                  0x0
#define _U1CON2_U1FLO_POSITION                              0x0
#define _U1CON2_U1FLO_SIZE                                  0x2
#define _U1CON2_U1FLO_LENGTH                                0x2
#define _U1CON2_U1FLO_MASK                                  0x3
#define _U1CON2_U1TXPOL_POSN                                0x2
#define _U1CON2_U1TXPOL_POSITION                            0x2
#define _U1CON2_U1TXPOL_SIZE                                0x1
#define _U1CON2_U1TXPOL_LENGTH                              0x1
#define _U1CON2_U1TXPOL_MASK                                0x4
#define _U1CON2_U1C0EN_POSN                                 0x3
#define _U1CON2_U1C0EN_POSITION                             0x3
#define _U1CON2_U1C0EN_SIZE                                 0x1
#define _U1CON2_U1C0EN_LENGTH                               0x1
#define _U1CON2_U1C0EN_MASK                                 0x8
#define _U1CON2_U1STP_POSN                                  0x4
#define _U1CON2_U1STP_POSITION                              0x4
#define _U1CON2_U1STP_SIZE                                  0x2
#define _U1CON2_U1STP_LENGTH                                0x2
#define _U1CON2_U1STP_MASK                                  0x30
#define _U1CON2_U1RXPOL_POSN                                0x6
#define _U1CON2_U1RXPOL_POSITION                            0x6
#define _U1CON2_U1RXPOL_SIZE                                0x1
#define _U1CON2_U1RXPOL_LENGTH                              0x1
#define _U1CON2_U1RXPOL_MASK                                0x40
#define _U1CON2_U1RUNOVF_POSN                               0x7
#define _U1CON2_U1RUNOVF_POSITION                           0x7
#define _U1CON2_U1RUNOVF_SIZE                               0x1
#define _U1CON2_U1RUNOVF_LENGTH                             0x1
#define _U1CON2_U1RUNOVF_MASK                               0x80
#define _U1CON2_U1FLO0_POSN                                 0x0
#define _U1CON2_U1FLO0_POSITION                             0x0
#define _U1CON2_U1FLO0_SIZE                                 0x1
#define _U1CON2_U1FLO0_LENGTH                               0x1
#define _U1CON2_U1FLO0_MASK                                 0x1
#define _U1CON2_U1FLO1_POSN                                 0x1
#define _U1CON2_U1FLO1_POSITION                             0x1
#define _U1CON2_U1FLO1_SIZE                                 0x1
#define _U1CON2_U1FLO1_LENGTH                               0x1
#define _U1CON2_U1FLO1_MASK                                 0x2
#define _U1CON2_U1STP0_POSN                                 0x4
#define _U1CON2_U1STP0_POSITION                             0x4
#define _U1CON2_U1STP0_SIZE                                 0x1
#define _U1CON2_U1STP0_LENGTH                               0x1
#define _U1CON2_U1STP0_MASK                                 0x10
#define _U1CON2_U1STP1_POSN                                 0x5
#define _U1CON2_U1STP1_POSITION                             0x5
#define _U1CON2_U1STP1_SIZE                                 0x1
#define _U1CON2_U1STP1_LENGTH                               0x1
#define _U1CON2_U1STP1_MASK                                 0x20

// Register: U1BRG
#define U1BRG U1BRG
extern volatile unsigned short          U1BRG               __at(0x3DF5);
#ifndef _LIB_BUILD
asm("U1BRG equ 03DF5h");
#endif

// Register: U1BRGL
#define U1BRGL U1BRGL
extern volatile unsigned char           U1BRGL              __at(0x3DF5);
#ifndef _LIB_BUILD
asm("U1BRGL equ 03DF5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BRGL                   :8;
    };
} U1BRGLbits_t;
extern volatile U1BRGLbits_t U1BRGLbits __at(0x3DF5);
// bitfield macros
#define _U1BRGL_BRGL_POSN                                   0x0
#define _U1BRGL_BRGL_POSITION                               0x0
#define _U1BRGL_BRGL_SIZE                                   0x8
#define _U1BRGL_BRGL_LENGTH                                 0x8
#define _U1BRGL_BRGL_MASK                                   0xFF

// Register: U1BRGH
#define U1BRGH U1BRGH
extern volatile unsigned char           U1BRGH              __at(0x3DF6);
#ifndef _LIB_BUILD
asm("U1BRGH equ 03DF6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BRGH                   :8;
    };
} U1BRGHbits_t;
extern volatile U1BRGHbits_t U1BRGHbits __at(0x3DF6);
// bitfield macros
#define _U1BRGH_BRGH_POSN                                   0x0
#define _U1BRGH_BRGH_POSITION                               0x0
#define _U1BRGH_BRGH_SIZE                                   0x8
#define _U1BRGH_BRGH_LENGTH                                 0x8
#define _U1BRGH_BRGH_MASK                                   0xFF

// Register: U1FIFO
#define U1FIFO U1FIFO
extern volatile unsigned char           U1FIFO              __at(0x3DF7);
#ifndef _LIB_BUILD
asm("U1FIFO equ 03DF7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RXBF                   :1;
        unsigned RXBE                   :1;
        unsigned XON                    :1;
        unsigned RXIDL                  :1;
        unsigned TXBF                   :1;
        unsigned TXBE                   :1;
        unsigned STPMD                  :1;
        unsigned TXWRE                  :1;
    };
    struct {
        unsigned U1RXBF                 :1;
        unsigned U1RXBE                 :1;
        unsigned U1XON                  :1;
        unsigned U1RXIDL                :1;
        unsigned U1TXBF                 :1;
        unsigned U1TXBE                 :1;
        unsigned U1STPMD                :1;
        unsigned U1TXWRE                :1;
    };
    struct {
        unsigned                        :3;
        unsigned U1RCIDL                :1;
    };
    struct {
        unsigned                        :3;
        unsigned RCIDL                  :1;
    };
} U1FIFObits_t;
extern volatile U1FIFObits_t U1FIFObits __at(0x3DF7);
// bitfield macros
#define _U1FIFO_RXBF_POSN                                   0x0
#define _U1FIFO_RXBF_POSITION                               0x0
#define _U1FIFO_RXBF_SIZE                                   0x1
#define _U1FIFO_RXBF_LENGTH                                 0x1
#define _U1FIFO_RXBF_MASK                                   0x1
#define _U1FIFO_RXBE_POSN                                   0x1
#define _U1FIFO_RXBE_POSITION                               0x1
#define _U1FIFO_RXBE_SIZE                                   0x1
#define _U1FIFO_RXBE_LENGTH                                 0x1
#define _U1FIFO_RXBE_MASK                                   0x2
#define _U1FIFO_XON_POSN                                    0x2
#define _U1FIFO_XON_POSITION                                0x2
#define _U1FIFO_XON_SIZE                                    0x1
#define _U1FIFO_XON_LENGTH                                  0x1
#define _U1FIFO_XON_MASK                                    0x4
#define _U1FIFO_RXIDL_POSN                                  0x3
#define _U1FIFO_RXIDL_POSITION                              0x3
#define _U1FIFO_RXIDL_SIZE                                  0x1
#define _U1FIFO_RXIDL_LENGTH                                0x1
#define _U1FIFO_RXIDL_MASK                                  0x8
#define _U1FIFO_TXBF_POSN                                   0x4
#define _U1FIFO_TXBF_POSITION                               0x4
#define _U1FIFO_TXBF_SIZE                                   0x1
#define _U1FIFO_TXBF_LENGTH                                 0x1
#define _U1FIFO_TXBF_MASK                                   0x10
#define _U1FIFO_TXBE_POSN                                   0x5
#define _U1FIFO_TXBE_POSITION                               0x5
#define _U1FIFO_TXBE_SIZE                                   0x1
#define _U1FIFO_TXBE_LENGTH                                 0x1
#define _U1FIFO_TXBE_MASK                                   0x20
#define _U1FIFO_STPMD_POSN                                  0x6
#define _U1FIFO_STPMD_POSITION                              0x6
#define _U1FIFO_STPMD_SIZE                                  0x1
#define _U1FIFO_STPMD_LENGTH                                0x1
#define _U1FIFO_STPMD_MASK                                  0x40
#define _U1FIFO_TXWRE_POSN                                  0x7
#define _U1FIFO_TXWRE_POSITION                              0x7
#define _U1FIFO_TXWRE_SIZE                                  0x1
#define _U1FIFO_TXWRE_LENGTH                                0x1
#define _U1FIFO_TXWRE_MASK                                  0x80
#define _U1FIFO_U1RXBF_POSN                                 0x0
#define _U1FIFO_U1RXBF_POSITION                             0x0
#define _U1FIFO_U1RXBF_SIZE                                 0x1
#define _U1FIFO_U1RXBF_LENGTH                               0x1
#define _U1FIFO_U1RXBF_MASK                                 0x1
#define _U1FIFO_U1RXBE_POSN                                 0x1
#define _U1FIFO_U1RXBE_POSITION                             0x1
#define _U1FIFO_U1RXBE_SIZE                                 0x1
#define _U1FIFO_U1RXBE_LENGTH                               0x1
#define _U1FIFO_U1RXBE_MASK                                 0x2
#define _U1FIFO_U1XON_POSN                                  0x2
#define _U1FIFO_U1XON_POSITION                              0x2
#define _U1FIFO_U1XON_SIZE                                  0x1
#define _U1FIFO_U1XON_LENGTH                                0x1
#define _U1FIFO_U1XON_MASK                                  0x4
#define _U1FIFO_U1RXIDL_POSN                                0x3
#define _U1FIFO_U1RXIDL_POSITION                            0x3
#define _U1FIFO_U1RXIDL_SIZE                                0x1
#define _U1FIFO_U1RXIDL_LENGTH                              0x1
#define _U1FIFO_U1RXIDL_MASK                                0x8
#define _U1FIFO_U1TXBF_POSN                                 0x4
#define _U1FIFO_U1TXBF_POSITION                             0x4
#define _U1FIFO_U1TXBF_SIZE                                 0x1
#define _U1FIFO_U1TXBF_LENGTH                               0x1
#define _U1FIFO_U1TXBF_MASK                                 0x10
#define _U1FIFO_U1TXBE_POSN                                 0x5
#define _U1FIFO_U1TXBE_POSITION                             0x5
#define _U1FIFO_U1TXBE_SIZE                                 0x1
#define _U1FIFO_U1TXBE_LENGTH                               0x1
#define _U1FIFO_U1TXBE_MASK                                 0x20
#define _U1FIFO_U1STPMD_POSN                                0x6
#define _U1FIFO_U1STPMD_POSITION                            0x6
#define _U1FIFO_U1STPMD_SIZE                                0x1
#define _U1FIFO_U1STPMD_LENGTH                              0x1
#define _U1FIFO_U1STPMD_MASK                                0x40
#define _U1FIFO_U1TXWRE_POSN                                0x7
#define _U1FIFO_U1TXWRE_POSITION                            0x7
#define _U1FIFO_U1TXWRE_SIZE                                0x1
#define _U1FIFO_U1TXWRE_LENGTH                              0x1
#define _U1FIFO_U1TXWRE_MASK                                0x80
#define _U1FIFO_U1RCIDL_POSN                                0x3
#define _U1FIFO_U1RCIDL_POSITION                            0x3
#define _U1FIFO_U1RCIDL_SIZE                                0x1
#define _U1FIFO_U1RCIDL_LENGTH                              0x1
#define _U1FIFO_U1RCIDL_MASK                                0x8
#define _U1FIFO_RCIDL_POSN                                  0x3
#define _U1FIFO_RCIDL_POSITION                              0x3
#define _U1FIFO_RCIDL_SIZE                                  0x1
#define _U1FIFO_RCIDL_LENGTH                                0x1
#define _U1FIFO_RCIDL_MASK                                  0x8

// Register: U1UIR
#define U1UIR U1UIR
extern volatile unsigned char           U1UIR               __at(0x3DF8);
#ifndef _LIB_BUILD
asm("U1UIR equ 03DF8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned ABDIE                  :1;
        unsigned                        :3;
        unsigned ABDIF                  :1;
        unsigned WUIF                   :1;
    };
    struct {
        unsigned                        :2;
        unsigned U1ABDIE                :1;
        unsigned                        :3;
        unsigned U1ABDIF                :1;
        unsigned U1WUIF                 :1;
    };
} U1UIRbits_t;
extern volatile U1UIRbits_t U1UIRbits __at(0x3DF8);
// bitfield macros
#define _U1UIR_ABDIE_POSN                                   0x2
#define _U1UIR_ABDIE_POSITION                               0x2
#define _U1UIR_ABDIE_SIZE                                   0x1
#define _U1UIR_ABDIE_LENGTH                                 0x1
#define _U1UIR_ABDIE_MASK                                   0x4
#define _U1UIR_ABDIF_POSN                                   0x6
#define _U1UIR_ABDIF_POSITION                               0x6
#define _U1UIR_ABDIF_SIZE                                   0x1
#define _U1UIR_ABDIF_LENGTH                                 0x1
#define _U1UIR_ABDIF_MASK                                   0x40
#define _U1UIR_WUIF_POSN                                    0x7
#define _U1UIR_WUIF_POSITION                                0x7
#define _U1UIR_WUIF_SIZE                                    0x1
#define _U1UIR_WUIF_LENGTH                                  0x1
#define _U1UIR_WUIF_MASK                                    0x80
#define _U1UIR_U1ABDIE_POSN                                 0x2
#define _U1UIR_U1ABDIE_POSITION                             0x2
#define _U1UIR_U1ABDIE_SIZE                                 0x1
#define _U1UIR_U1ABDIE_LENGTH                               0x1
#define _U1UIR_U1ABDIE_MASK                                 0x4
#define _U1UIR_U1ABDIF_POSN                                 0x6
#define _U1UIR_U1ABDIF_POSITION                             0x6
#define _U1UIR_U1ABDIF_SIZE                                 0x1
#define _U1UIR_U1ABDIF_LENGTH                               0x1
#define _U1UIR_U1ABDIF_MASK                                 0x40
#define _U1UIR_U1WUIF_POSN                                  0x7
#define _U1UIR_U1WUIF_POSITION                              0x7
#define _U1UIR_U1WUIF_SIZE                                  0x1
#define _U1UIR_U1WUIF_LENGTH                                0x1
#define _U1UIR_U1WUIF_MASK                                  0x80

// Register: U1ERRIR
#define U1ERRIR U1ERRIR
extern volatile unsigned char           U1ERRIR             __at(0x3DF9);
#ifndef _LIB_BUILD
asm("U1ERRIR equ 03DF9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TXCIF                  :1;
        unsigned RXFOIF                 :1;
        unsigned RXBKIF                 :1;
        unsigned FERIF                  :1;
        unsigned CERIF                  :1;
        unsigned ABDOVF                 :1;
        unsigned PERIF                  :1;
        unsigned TXMTIF                 :1;
    };
    struct {
        unsigned U1TXCIF                :1;
        unsigned U1RXFOIF               :1;
        unsigned U1RXBKIF               :1;
        unsigned U1FERIF                :1;
        unsigned U1CERIF                :1;
        unsigned U1ABDOVF               :1;
        unsigned U1PERIF                :1;
        unsigned U1TXMTIF               :1;
    };
} U1ERRIRbits_t;
extern volatile U1ERRIRbits_t U1ERRIRbits __at(0x3DF9);
// bitfield macros
#define _U1ERRIR_TXCIF_POSN                                 0x0
#define _U1ERRIR_TXCIF_POSITION                             0x0
#define _U1ERRIR_TXCIF_SIZE                                 0x1
#define _U1ERRIR_TXCIF_LENGTH                               0x1
#define _U1ERRIR_TXCIF_MASK                                 0x1
#define _U1ERRIR_RXFOIF_POSN                                0x1
#define _U1ERRIR_RXFOIF_POSITION                            0x1
#define _U1ERRIR_RXFOIF_SIZE                                0x1
#define _U1ERRIR_RXFOIF_LENGTH                              0x1
#define _U1ERRIR_RXFOIF_MASK                                0x2
#define _U1ERRIR_RXBKIF_POSN                                0x2
#define _U1ERRIR_RXBKIF_POSITION                            0x2
#define _U1ERRIR_RXBKIF_SIZE                                0x1
#define _U1ERRIR_RXBKIF_LENGTH                              0x1
#define _U1ERRIR_RXBKIF_MASK                                0x4
#define _U1ERRIR_FERIF_POSN                                 0x3
#define _U1ERRIR_FERIF_POSITION                             0x3
#define _U1ERRIR_FERIF_SIZE                                 0x1
#define _U1ERRIR_FERIF_LENGTH                               0x1
#define _U1ERRIR_FERIF_MASK                                 0x8
#define _U1ERRIR_CERIF_POSN                                 0x4
#define _U1ERRIR_CERIF_POSITION                             0x4
#define _U1ERRIR_CERIF_SIZE                                 0x1
#define _U1ERRIR_CERIF_LENGTH                               0x1
#define _U1ERRIR_CERIF_MASK                                 0x10
#define _U1ERRIR_ABDOVF_POSN                                0x5
#define _U1ERRIR_ABDOVF_POSITION                            0x5
#define _U1ERRIR_ABDOVF_SIZE                                0x1
#define _U1ERRIR_ABDOVF_LENGTH                              0x1
#define _U1ERRIR_ABDOVF_MASK                                0x20
#define _U1ERRIR_PERIF_POSN                                 0x6
#define _U1ERRIR_PERIF_POSITION                             0x6
#define _U1ERRIR_PERIF_SIZE                                 0x1
#define _U1ERRIR_PERIF_LENGTH                               0x1
#define _U1ERRIR_PERIF_MASK                                 0x40
#define _U1ERRIR_TXMTIF_POSN                                0x7
#define _U1ERRIR_TXMTIF_POSITION                            0x7
#define _U1ERRIR_TXMTIF_SIZE                                0x1
#define _U1ERRIR_TXMTIF_LENGTH                              0x1
#define _U1ERRIR_TXMTIF_MASK                                0x80
#define _U1ERRIR_U1TXCIF_POSN                               0x0
#define _U1ERRIR_U1TXCIF_POSITION                           0x0
#define _U1ERRIR_U1TXCIF_SIZE                               0x1
#define _U1ERRIR_U1TXCIF_LENGTH                             0x1
#define _U1ERRIR_U1TXCIF_MASK                               0x1
#define _U1ERRIR_U1RXFOIF_POSN                              0x1
#define _U1ERRIR_U1RXFOIF_POSITION                          0x1
#define _U1ERRIR_U1RXFOIF_SIZE                              0x1
#define _U1ERRIR_U1RXFOIF_LENGTH                            0x1
#define _U1ERRIR_U1RXFOIF_MASK                              0x2
#define _U1ERRIR_U1RXBKIF_POSN                              0x2
#define _U1ERRIR_U1RXBKIF_POSITION                          0x2
#define _U1ERRIR_U1RXBKIF_SIZE                              0x1
#define _U1ERRIR_U1RXBKIF_LENGTH                            0x1
#define _U1ERRIR_U1RXBKIF_MASK                              0x4
#define _U1ERRIR_U1FERIF_POSN                               0x3
#define _U1ERRIR_U1FERIF_POSITION                           0x3
#define _U1ERRIR_U1FERIF_SIZE                               0x1
#define _U1ERRIR_U1FERIF_LENGTH                             0x1
#define _U1ERRIR_U1FERIF_MASK                               0x8
#define _U1ERRIR_U1CERIF_POSN                               0x4
#define _U1ERRIR_U1CERIF_POSITION                           0x4
#define _U1ERRIR_U1CERIF_SIZE                               0x1
#define _U1ERRIR_U1CERIF_LENGTH                             0x1
#define _U1ERRIR_U1CERIF_MASK                               0x10
#define _U1ERRIR_U1ABDOVF_POSN                              0x5
#define _U1ERRIR_U1ABDOVF_POSITION                          0x5
#define _U1ERRIR_U1ABDOVF_SIZE                              0x1
#define _U1ERRIR_U1ABDOVF_LENGTH                            0x1
#define _U1ERRIR_U1ABDOVF_MASK                              0x20
#define _U1ERRIR_U1PERIF_POSN                               0x6
#define _U1ERRIR_U1PERIF_POSITION                           0x6
#define _U1ERRIR_U1PERIF_SIZE                               0x1
#define _U1ERRIR_U1PERIF_LENGTH                             0x1
#define _U1ERRIR_U1PERIF_MASK                               0x40
#define _U1ERRIR_U1TXMTIF_POSN                              0x7
#define _U1ERRIR_U1TXMTIF_POSITION                          0x7
#define _U1ERRIR_U1TXMTIF_SIZE                              0x1
#define _U1ERRIR_U1TXMTIF_LENGTH                            0x1
#define _U1ERRIR_U1TXMTIF_MASK                              0x80

// Register: U1ERRIE
#define U1ERRIE U1ERRIE
extern volatile unsigned char           U1ERRIE             __at(0x3DFA);
#ifndef _LIB_BUILD
asm("U1ERRIE equ 03DFAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TXCIE                  :1;
        unsigned RXFOIE                 :1;
        unsigned RXBKIE                 :1;
        unsigned FERIE                  :1;
        unsigned CERIE                  :1;
        unsigned ABDOVE                 :1;
        unsigned PERIE                  :1;
        unsigned TXMTIE                 :1;
    };
    struct {
        unsigned U1TXCIE                :1;
        unsigned U1RXFOIE               :1;
        unsigned U1RXBKIE               :1;
        unsigned U1FERIE                :1;
        unsigned U1CERIE                :1;
        unsigned U1ABDOVE               :1;
        unsigned U1PERIE                :1;
        unsigned U1TXMTIE               :1;
    };
} U1ERRIEbits_t;
extern volatile U1ERRIEbits_t U1ERRIEbits __at(0x3DFA);
// bitfield macros
#define _U1ERRIE_TXCIE_POSN                                 0x0
#define _U1ERRIE_TXCIE_POSITION                             0x0
#define _U1ERRIE_TXCIE_SIZE                                 0x1
#define _U1ERRIE_TXCIE_LENGTH                               0x1
#define _U1ERRIE_TXCIE_MASK                                 0x1
#define _U1ERRIE_RXFOIE_POSN                                0x1
#define _U1ERRIE_RXFOIE_POSITION                            0x1
#define _U1ERRIE_RXFOIE_SIZE                                0x1
#define _U1ERRIE_RXFOIE_LENGTH                              0x1
#define _U1ERRIE_RXFOIE_MASK                                0x2
#define _U1ERRIE_RXBKIE_POSN                                0x2
#define _U1ERRIE_RXBKIE_POSITION                            0x2
#define _U1ERRIE_RXBKIE_SIZE                                0x1
#define _U1ERRIE_RXBKIE_LENGTH                              0x1
#define _U1ERRIE_RXBKIE_MASK                                0x4
#define _U1ERRIE_FERIE_POSN                                 0x3
#define _U1ERRIE_FERIE_POSITION                             0x3
#define _U1ERRIE_FERIE_SIZE                                 0x1
#define _U1ERRIE_FERIE_LENGTH                               0x1
#define _U1ERRIE_FERIE_MASK                                 0x8
#define _U1ERRIE_CERIE_POSN                                 0x4
#define _U1ERRIE_CERIE_POSITION                             0x4
#define _U1ERRIE_CERIE_SIZE                                 0x1
#define _U1ERRIE_CERIE_LENGTH                               0x1
#define _U1ERRIE_CERIE_MASK                                 0x10
#define _U1ERRIE_ABDOVE_POSN                                0x5
#define _U1ERRIE_ABDOVE_POSITION                            0x5
#define _U1ERRIE_ABDOVE_SIZE                                0x1
#define _U1ERRIE_ABDOVE_LENGTH                              0x1
#define _U1ERRIE_ABDOVE_MASK                                0x20
#define _U1ERRIE_PERIE_POSN                                 0x6
#define _U1ERRIE_PERIE_POSITION                             0x6
#define _U1ERRIE_PERIE_SIZE                                 0x1
#define _U1ERRIE_PERIE_LENGTH                               0x1
#define _U1ERRIE_PERIE_MASK                                 0x40
#define _U1ERRIE_TXMTIE_POSN                                0x7
#define _U1ERRIE_TXMTIE_POSITION                            0x7
#define _U1ERRIE_TXMTIE_SIZE                                0x1
#define _U1ERRIE_TXMTIE_LENGTH                              0x1
#define _U1ERRIE_TXMTIE_MASK                                0x80
#define _U1ERRIE_U1TXCIE_POSN                               0x0
#define _U1ERRIE_U1TXCIE_POSITION                           0x0
#define _U1ERRIE_U1TXCIE_SIZE                               0x1
#define _U1ERRIE_U1TXCIE_LENGTH                             0x1
#define _U1ERRIE_U1TXCIE_MASK                               0x1
#define _U1ERRIE_U1RXFOIE_POSN                              0x1
#define _U1ERRIE_U1RXFOIE_POSITION                          0x1
#define _U1ERRIE_U1RXFOIE_SIZE                              0x1
#define _U1ERRIE_U1RXFOIE_LENGTH                            0x1
#define _U1ERRIE_U1RXFOIE_MASK                              0x2
#define _U1ERRIE_U1RXBKIE_POSN                              0x2
#define _U1ERRIE_U1RXBKIE_POSITION                          0x2
#define _U1ERRIE_U1RXBKIE_SIZE                              0x1
#define _U1ERRIE_U1RXBKIE_LENGTH                            0x1
#define _U1ERRIE_U1RXBKIE_MASK                              0x4
#define _U1ERRIE_U1FERIE_POSN                               0x3
#define _U1ERRIE_U1FERIE_POSITION                           0x3
#define _U1ERRIE_U1FERIE_SIZE                               0x1
#define _U1ERRIE_U1FERIE_LENGTH                             0x1
#define _U1ERRIE_U1FERIE_MASK                               0x8
#define _U1ERRIE_U1CERIE_POSN                               0x4
#define _U1ERRIE_U1CERIE_POSITION                           0x4
#define _U1ERRIE_U1CERIE_SIZE                               0x1
#define _U1ERRIE_U1CERIE_LENGTH                             0x1
#define _U1ERRIE_U1CERIE_MASK                               0x10
#define _U1ERRIE_U1ABDOVE_POSN                              0x5
#define _U1ERRIE_U1ABDOVE_POSITION                          0x5
#define _U1ERRIE_U1ABDOVE_SIZE                              0x1
#define _U1ERRIE_U1ABDOVE_LENGTH                            0x1
#define _U1ERRIE_U1ABDOVE_MASK                              0x20
#define _U1ERRIE_U1PERIE_POSN                               0x6
#define _U1ERRIE_U1PERIE_POSITION                           0x6
#define _U1ERRIE_U1PERIE_SIZE                               0x1
#define _U1ERRIE_U1PERIE_LENGTH                             0x1
#define _U1ERRIE_U1PERIE_MASK                               0x40
#define _U1ERRIE_U1TXMTIE_POSN                              0x7
#define _U1ERRIE_U1TXMTIE_POSITION                          0x7
#define _U1ERRIE_U1TXMTIE_SIZE                              0x1
#define _U1ERRIE_U1TXMTIE_LENGTH                            0x1
#define _U1ERRIE_U1TXMTIE_MASK                              0x80

// Register: DAC1CON1
#define DAC1CON1 DAC1CON1
extern volatile unsigned char           DAC1CON1            __at(0x3E9C);
#ifndef _LIB_BUILD
asm("DAC1CON1 equ 03E9Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DATA                   :5;
    };
    struct {
        unsigned DAC1R0                 :1;
        unsigned DAC1R1                 :1;
        unsigned DAC1R2                 :1;
        unsigned DAC1R3                 :1;
        unsigned DAC1R4                 :1;
    };
    struct {
        unsigned DAC1R                  :5;
    };
} DAC1CON1bits_t;
extern volatile DAC1CON1bits_t DAC1CON1bits __at(0x3E9C);
// bitfield macros
#define _DAC1CON1_DATA_POSN                                 0x0
#define _DAC1CON1_DATA_POSITION                             0x0
#define _DAC1CON1_DATA_SIZE                                 0x5
#define _DAC1CON1_DATA_LENGTH                               0x5
#define _DAC1CON1_DATA_MASK                                 0x1F
#define _DAC1CON1_DAC1R0_POSN                               0x0
#define _DAC1CON1_DAC1R0_POSITION                           0x0
#define _DAC1CON1_DAC1R0_SIZE                               0x1
#define _DAC1CON1_DAC1R0_LENGTH                             0x1
#define _DAC1CON1_DAC1R0_MASK                               0x1
#define _DAC1CON1_DAC1R1_POSN                               0x1
#define _DAC1CON1_DAC1R1_POSITION                           0x1
#define _DAC1CON1_DAC1R1_SIZE                               0x1
#define _DAC1CON1_DAC1R1_LENGTH                             0x1
#define _DAC1CON1_DAC1R1_MASK                               0x2
#define _DAC1CON1_DAC1R2_POSN                               0x2
#define _DAC1CON1_DAC1R2_POSITION                           0x2
#define _DAC1CON1_DAC1R2_SIZE                               0x1
#define _DAC1CON1_DAC1R2_LENGTH                             0x1
#define _DAC1CON1_DAC1R2_MASK                               0x4
#define _DAC1CON1_DAC1R3_POSN                               0x3
#define _DAC1CON1_DAC1R3_POSITION                           0x3
#define _DAC1CON1_DAC1R3_SIZE                               0x1
#define _DAC1CON1_DAC1R3_LENGTH                             0x1
#define _DAC1CON1_DAC1R3_MASK                               0x8
#define _DAC1CON1_DAC1R4_POSN                               0x4
#define _DAC1CON1_DAC1R4_POSITION                           0x4
#define _DAC1CON1_DAC1R4_SIZE                               0x1
#define _DAC1CON1_DAC1R4_LENGTH                             0x1
#define _DAC1CON1_DAC1R4_MASK                               0x10
#define _DAC1CON1_DAC1R_POSN                                0x0
#define _DAC1CON1_DAC1R_POSITION                            0x0
#define _DAC1CON1_DAC1R_SIZE                                0x5
#define _DAC1CON1_DAC1R_LENGTH                              0x5
#define _DAC1CON1_DAC1R_MASK                                0x1F

// Register: DAC1CON0
#define DAC1CON0 DAC1CON0
extern volatile unsigned char           DAC1CON0            __at(0x3E9E);
#ifndef _LIB_BUILD
asm("DAC1CON0 equ 03E9Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NSS                    :1;
        unsigned                        :1;
        unsigned PSS                    :2;
        unsigned OE2                    :1;
        unsigned OE1                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned DAC1NSS                :1;
        unsigned                        :1;
        unsigned DAC1PSS0               :1;
        unsigned DAC1PSS1               :1;
        unsigned DAC1OE2                :1;
        unsigned DAC1OE1                :1;
        unsigned                        :1;
        unsigned DAC1EN                 :1;
    };
    struct {
        unsigned                        :2;
        unsigned PSS0                   :1;
        unsigned PSS1                   :1;
    };
} DAC1CON0bits_t;
extern volatile DAC1CON0bits_t DAC1CON0bits __at(0x3E9E);
// bitfield macros
#define _DAC1CON0_NSS_POSN                                  0x0
#define _DAC1CON0_NSS_POSITION                              0x0
#define _DAC1CON0_NSS_SIZE                                  0x1
#define _DAC1CON0_NSS_LENGTH                                0x1
#define _DAC1CON0_NSS_MASK                                  0x1
#define _DAC1CON0_PSS_POSN                                  0x2
#define _DAC1CON0_PSS_POSITION                              0x2
#define _DAC1CON0_PSS_SIZE                                  0x2
#define _DAC1CON0_PSS_LENGTH                                0x2
#define _DAC1CON0_PSS_MASK                                  0xC
#define _DAC1CON0_OE2_POSN                                  0x4
#define _DAC1CON0_OE2_POSITION                              0x4
#define _DAC1CON0_OE2_SIZE                                  0x1
#define _DAC1CON0_OE2_LENGTH                                0x1
#define _DAC1CON0_OE2_MASK                                  0x10
#define _DAC1CON0_OE1_POSN                                  0x5
#define _DAC1CON0_OE1_POSITION                              0x5
#define _DAC1CON0_OE1_SIZE                                  0x1
#define _DAC1CON0_OE1_LENGTH                                0x1
#define _DAC1CON0_OE1_MASK                                  0x20
#define _DAC1CON0_EN_POSN                                   0x7
#define _DAC1CON0_EN_POSITION                               0x7
#define _DAC1CON0_EN_SIZE                                   0x1
#define _DAC1CON0_EN_LENGTH                                 0x1
#define _DAC1CON0_EN_MASK                                   0x80
#define _DAC1CON0_DAC1NSS_POSN                              0x0
#define _DAC1CON0_DAC1NSS_POSITION                          0x0
#define _DAC1CON0_DAC1NSS_SIZE                              0x1
#define _DAC1CON0_DAC1NSS_LENGTH                            0x1
#define _DAC1CON0_DAC1NSS_MASK                              0x1
#define _DAC1CON0_DAC1PSS0_POSN                             0x2
#define _DAC1CON0_DAC1PSS0_POSITION                         0x2
#define _DAC1CON0_DAC1PSS0_SIZE                             0x1
#define _DAC1CON0_DAC1PSS0_LENGTH                           0x1
#define _DAC1CON0_DAC1PSS0_MASK                             0x4
#define _DAC1CON0_DAC1PSS1_POSN                             0x3
#define _DAC1CON0_DAC1PSS1_POSITION                         0x3
#define _DAC1CON0_DAC1PSS1_SIZE                             0x1
#define _DAC1CON0_DAC1PSS1_LENGTH                           0x1
#define _DAC1CON0_DAC1PSS1_MASK                             0x8
#define _DAC1CON0_DAC1OE2_POSN                              0x4
#define _DAC1CON0_DAC1OE2_POSITION                          0x4
#define _DAC1CON0_DAC1OE2_SIZE                              0x1
#define _DAC1CON0_DAC1OE2_LENGTH                            0x1
#define _DAC1CON0_DAC1OE2_MASK                              0x10
#define _DAC1CON0_DAC1OE1_POSN                              0x5
#define _DAC1CON0_DAC1OE1_POSITION                          0x5
#define _DAC1CON0_DAC1OE1_SIZE                              0x1
#define _DAC1CON0_DAC1OE1_LENGTH                            0x1
#define _DAC1CON0_DAC1OE1_MASK                              0x20
#define _DAC1CON0_DAC1EN_POSN                               0x7
#define _DAC1CON0_DAC1EN_POSITION                           0x7
#define _DAC1CON0_DAC1EN_SIZE                               0x1
#define _DAC1CON0_DAC1EN_LENGTH                             0x1
#define _DAC1CON0_DAC1EN_MASK                               0x80
#define _DAC1CON0_PSS0_POSN                                 0x2
#define _DAC1CON0_PSS0_POSITION                             0x2
#define _DAC1CON0_PSS0_SIZE                                 0x1
#define _DAC1CON0_PSS0_LENGTH                               0x1
#define _DAC1CON0_PSS0_MASK                                 0x4
#define _DAC1CON0_PSS1_POSN                                 0x3
#define _DAC1CON0_PSS1_POSITION                             0x3
#define _DAC1CON0_PSS1_SIZE                                 0x1
#define _DAC1CON0_PSS1_LENGTH                               0x1
#define _DAC1CON0_PSS1_MASK                                 0x8

// Register: CM2CON0
#define CM2CON0 CM2CON0
extern volatile unsigned char           CM2CON0             __at(0x3EB8);
#ifndef _LIB_BUILD
asm("CM2CON0 equ 03EB8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SYNC                   :1;
        unsigned HYS                    :1;
        unsigned                        :2;
        unsigned POL                    :1;
        unsigned                        :1;
        unsigned OUT                    :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned C2SYNC                 :1;
        unsigned C2HYS                  :1;
        unsigned                        :2;
        unsigned C2POL                  :1;
        unsigned                        :1;
        unsigned C2OUT                  :1;
        unsigned C2EN                   :1;
    };
} CM2CON0bits_t;
extern volatile CM2CON0bits_t CM2CON0bits __at(0x3EB8);
// bitfield macros
#define _CM2CON0_SYNC_POSN                                  0x0
#define _CM2CON0_SYNC_POSITION                              0x0
#define _CM2CON0_SYNC_SIZE                                  0x1
#define _CM2CON0_SYNC_LENGTH                                0x1
#define _CM2CON0_SYNC_MASK                                  0x1
#define _CM2CON0_HYS_POSN                                   0x1
#define _CM2CON0_HYS_POSITION                               0x1
#define _CM2CON0_HYS_SIZE                                   0x1
#define _CM2CON0_HYS_LENGTH                                 0x1
#define _CM2CON0_HYS_MASK                                   0x2
#define _CM2CON0_POL_POSN                                   0x4
#define _CM2CON0_POL_POSITION                               0x4
#define _CM2CON0_POL_SIZE                                   0x1
#define _CM2CON0_POL_LENGTH                                 0x1
#define _CM2CON0_POL_MASK                                   0x10
#define _CM2CON0_OUT_POSN                                   0x6
#define _CM2CON0_OUT_POSITION                               0x6
#define _CM2CON0_OUT_SIZE                                   0x1
#define _CM2CON0_OUT_LENGTH                                 0x1
#define _CM2CON0_OUT_MASK                                   0x40
#define _CM2CON0_EN_POSN                                    0x7
#define _CM2CON0_EN_POSITION                                0x7
#define _CM2CON0_EN_SIZE                                    0x1
#define _CM2CON0_EN_LENGTH                                  0x1
#define _CM2CON0_EN_MASK                                    0x80
#define _CM2CON0_C2SYNC_POSN                                0x0
#define _CM2CON0_C2SYNC_POSITION                            0x0
#define _CM2CON0_C2SYNC_SIZE                                0x1
#define _CM2CON0_C2SYNC_LENGTH                              0x1
#define _CM2CON0_C2SYNC_MASK                                0x1
#define _CM2CON0_C2HYS_POSN                                 0x1
#define _CM2CON0_C2HYS_POSITION                             0x1
#define _CM2CON0_C2HYS_SIZE                                 0x1
#define _CM2CON0_C2HYS_LENGTH                               0x1
#define _CM2CON0_C2HYS_MASK                                 0x2
#define _CM2CON0_C2POL_POSN                                 0x4
#define _CM2CON0_C2POL_POSITION                             0x4
#define _CM2CON0_C2POL_SIZE                                 0x1
#define _CM2CON0_C2POL_LENGTH                               0x1
#define _CM2CON0_C2POL_MASK                                 0x10
#define _CM2CON0_C2OUT_POSN                                 0x6
#define _CM2CON0_C2OUT_POSITION                             0x6
#define _CM2CON0_C2OUT_SIZE                                 0x1
#define _CM2CON0_C2OUT_LENGTH                               0x1
#define _CM2CON0_C2OUT_MASK                                 0x40
#define _CM2CON0_C2EN_POSN                                  0x7
#define _CM2CON0_C2EN_POSITION                              0x7
#define _CM2CON0_C2EN_SIZE                                  0x1
#define _CM2CON0_C2EN_LENGTH                                0x1
#define _CM2CON0_C2EN_MASK                                  0x80

// Register: CM2CON1
#define CM2CON1 CM2CON1
extern volatile unsigned char           CM2CON1             __at(0x3EB9);
#ifndef _LIB_BUILD
asm("CM2CON1 equ 03EB9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INTN                   :1;
        unsigned INTP                   :1;
    };
    struct {
        unsigned C2INTN                 :1;
        unsigned C2INTP                 :1;
    };
} CM2CON1bits_t;
extern volatile CM2CON1bits_t CM2CON1bits __at(0x3EB9);
// bitfield macros
#define _CM2CON1_INTN_POSN                                  0x0
#define _CM2CON1_INTN_POSITION                              0x0
#define _CM2CON1_INTN_SIZE                                  0x1
#define _CM2CON1_INTN_LENGTH                                0x1
#define _CM2CON1_INTN_MASK                                  0x1
#define _CM2CON1_INTP_POSN                                  0x1
#define _CM2CON1_INTP_POSITION                              0x1
#define _CM2CON1_INTP_SIZE                                  0x1
#define _CM2CON1_INTP_LENGTH                                0x1
#define _CM2CON1_INTP_MASK                                  0x2
#define _CM2CON1_C2INTN_POSN                                0x0
#define _CM2CON1_C2INTN_POSITION                            0x0
#define _CM2CON1_C2INTN_SIZE                                0x1
#define _CM2CON1_C2INTN_LENGTH                              0x1
#define _CM2CON1_C2INTN_MASK                                0x1
#define _CM2CON1_C2INTP_POSN                                0x1
#define _CM2CON1_C2INTP_POSITION                            0x1
#define _CM2CON1_C2INTP_SIZE                                0x1
#define _CM2CON1_C2INTP_LENGTH                              0x1
#define _CM2CON1_C2INTP_MASK                                0x2

// Register: CM2NCH
#define CM2NCH CM2NCH
extern volatile unsigned char           CM2NCH              __at(0x3EBA);
#ifndef _LIB_BUILD
asm("CM2NCH equ 03EBAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NCH                    :3;
    };
    struct {
        unsigned NCH0                   :1;
        unsigned NCH1                   :1;
        unsigned NCH2                   :1;
    };
    struct {
        unsigned C2NCH0                 :1;
        unsigned C2NCH1                 :1;
        unsigned C2NCH2                 :1;
    };
} CM2NCHbits_t;
extern volatile CM2NCHbits_t CM2NCHbits __at(0x3EBA);
// bitfield macros
#define _CM2NCH_NCH_POSN                                    0x0
#define _CM2NCH_NCH_POSITION                                0x0
#define _CM2NCH_NCH_SIZE                                    0x3
#define _CM2NCH_NCH_LENGTH                                  0x3
#define _CM2NCH_NCH_MASK                                    0x7
#define _CM2NCH_NCH0_POSN                                   0x0
#define _CM2NCH_NCH0_POSITION                               0x0
#define _CM2NCH_NCH0_SIZE                                   0x1
#define _CM2NCH_NCH0_LENGTH                                 0x1
#define _CM2NCH_NCH0_MASK                                   0x1
#define _CM2NCH_NCH1_POSN                                   0x1
#define _CM2NCH_NCH1_POSITION                               0x1
#define _CM2NCH_NCH1_SIZE                                   0x1
#define _CM2NCH_NCH1_LENGTH                                 0x1
#define _CM2NCH_NCH1_MASK                                   0x2
#define _CM2NCH_NCH2_POSN                                   0x2
#define _CM2NCH_NCH2_POSITION                               0x2
#define _CM2NCH_NCH2_SIZE                                   0x1
#define _CM2NCH_NCH2_LENGTH                                 0x1
#define _CM2NCH_NCH2_MASK                                   0x4
#define _CM2NCH_C2NCH0_POSN                                 0x0
#define _CM2NCH_C2NCH0_POSITION                             0x0
#define _CM2NCH_C2NCH0_SIZE                                 0x1
#define _CM2NCH_C2NCH0_LENGTH                               0x1
#define _CM2NCH_C2NCH0_MASK                                 0x1
#define _CM2NCH_C2NCH1_POSN                                 0x1
#define _CM2NCH_C2NCH1_POSITION                             0x1
#define _CM2NCH_C2NCH1_SIZE                                 0x1
#define _CM2NCH_C2NCH1_LENGTH                               0x1
#define _CM2NCH_C2NCH1_MASK                                 0x2
#define _CM2NCH_C2NCH2_POSN                                 0x2
#define _CM2NCH_C2NCH2_POSITION                             0x2
#define _CM2NCH_C2NCH2_SIZE                                 0x1
#define _CM2NCH_C2NCH2_LENGTH                               0x1
#define _CM2NCH_C2NCH2_MASK                                 0x4

// Register: CM2PCH
#define CM2PCH CM2PCH
extern volatile unsigned char           CM2PCH              __at(0x3EBB);
#ifndef _LIB_BUILD
asm("CM2PCH equ 03EBBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PCH                    :3;
    };
    struct {
        unsigned PCH0                   :1;
        unsigned PCH1                   :1;
        unsigned PCH2                   :1;
    };
    struct {
        unsigned C2PCH0                 :1;
        unsigned C2PCH1                 :1;
        unsigned C2PCH2                 :1;
    };
} CM2PCHbits_t;
extern volatile CM2PCHbits_t CM2PCHbits __at(0x3EBB);
// bitfield macros
#define _CM2PCH_PCH_POSN                                    0x0
#define _CM2PCH_PCH_POSITION                                0x0
#define _CM2PCH_PCH_SIZE                                    0x3
#define _CM2PCH_PCH_LENGTH                                  0x3
#define _CM2PCH_PCH_MASK                                    0x7
#define _CM2PCH_PCH0_POSN                                   0x0
#define _CM2PCH_PCH0_POSITION                               0x0
#define _CM2PCH_PCH0_SIZE                                   0x1
#define _CM2PCH_PCH0_LENGTH                                 0x1
#define _CM2PCH_PCH0_MASK                                   0x1
#define _CM2PCH_PCH1_POSN                                   0x1
#define _CM2PCH_PCH1_POSITION                               0x1
#define _CM2PCH_PCH1_SIZE                                   0x1
#define _CM2PCH_PCH1_LENGTH                                 0x1
#define _CM2PCH_PCH1_MASK                                   0x2
#define _CM2PCH_PCH2_POSN                                   0x2
#define _CM2PCH_PCH2_POSITION                               0x2
#define _CM2PCH_PCH2_SIZE                                   0x1
#define _CM2PCH_PCH2_LENGTH                                 0x1
#define _CM2PCH_PCH2_MASK                                   0x4
#define _CM2PCH_C2PCH0_POSN                                 0x0
#define _CM2PCH_C2PCH0_POSITION                             0x0
#define _CM2PCH_C2PCH0_SIZE                                 0x1
#define _CM2PCH_C2PCH0_LENGTH                               0x1
#define _CM2PCH_C2PCH0_MASK                                 0x1
#define _CM2PCH_C2PCH1_POSN                                 0x1
#define _CM2PCH_C2PCH1_POSITION                             0x1
#define _CM2PCH_C2PCH1_SIZE                                 0x1
#define _CM2PCH_C2PCH1_LENGTH                               0x1
#define _CM2PCH_C2PCH1_MASK                                 0x2
#define _CM2PCH_C2PCH2_POSN                                 0x2
#define _CM2PCH_C2PCH2_POSITION                             0x2
#define _CM2PCH_C2PCH2_SIZE                                 0x1
#define _CM2PCH_C2PCH2_LENGTH                               0x1
#define _CM2PCH_C2PCH2_MASK                                 0x4

// Register: CM1CON0
#define CM1CON0 CM1CON0
extern volatile unsigned char           CM1CON0             __at(0x3EBC);
#ifndef _LIB_BUILD
asm("CM1CON0 equ 03EBCh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SYNC                   :1;
        unsigned HYS                    :1;
        unsigned                        :2;
        unsigned POL                    :1;
        unsigned                        :1;
        unsigned OUT                    :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned C1SYNC                 :1;
        unsigned C1HYS                  :1;
        unsigned                        :2;
        unsigned C1POL                  :1;
        unsigned                        :1;
        unsigned C1OUT                  :1;
        unsigned C1EN                   :1;
    };
} CM1CON0bits_t;
extern volatile CM1CON0bits_t CM1CON0bits __at(0x3EBC);
// bitfield macros
#define _CM1CON0_SYNC_POSN                                  0x0
#define _CM1CON0_SYNC_POSITION                              0x0
#define _CM1CON0_SYNC_SIZE                                  0x1
#define _CM1CON0_SYNC_LENGTH                                0x1
#define _CM1CON0_SYNC_MASK                                  0x1
#define _CM1CON0_HYS_POSN                                   0x1
#define _CM1CON0_HYS_POSITION                               0x1
#define _CM1CON0_HYS_SIZE                                   0x1
#define _CM1CON0_HYS_LENGTH                                 0x1
#define _CM1CON0_HYS_MASK                                   0x2
#define _CM1CON0_POL_POSN                                   0x4
#define _CM1CON0_POL_POSITION                               0x4
#define _CM1CON0_POL_SIZE                                   0x1
#define _CM1CON0_POL_LENGTH                                 0x1
#define _CM1CON0_POL_MASK                                   0x10
#define _CM1CON0_OUT_POSN                                   0x6
#define _CM1CON0_OUT_POSITION                               0x6
#define _CM1CON0_OUT_SIZE                                   0x1
#define _CM1CON0_OUT_LENGTH                                 0x1
#define _CM1CON0_OUT_MASK                                   0x40
#define _CM1CON0_EN_POSN                                    0x7
#define _CM1CON0_EN_POSITION                                0x7
#define _CM1CON0_EN_SIZE                                    0x1
#define _CM1CON0_EN_LENGTH                                  0x1
#define _CM1CON0_EN_MASK                                    0x80
#define _CM1CON0_C1SYNC_POSN                                0x0
#define _CM1CON0_C1SYNC_POSITION                            0x0
#define _CM1CON0_C1SYNC_SIZE                                0x1
#define _CM1CON0_C1SYNC_LENGTH                              0x1
#define _CM1CON0_C1SYNC_MASK                                0x1
#define _CM1CON0_C1HYS_POSN                                 0x1
#define _CM1CON0_C1HYS_POSITION                             0x1
#define _CM1CON0_C1HYS_SIZE                                 0x1
#define _CM1CON0_C1HYS_LENGTH                               0x1
#define _CM1CON0_C1HYS_MASK                                 0x2
#define _CM1CON0_C1POL_POSN                                 0x4
#define _CM1CON0_C1POL_POSITION                             0x4
#define _CM1CON0_C1POL_SIZE                                 0x1
#define _CM1CON0_C1POL_LENGTH                               0x1
#define _CM1CON0_C1POL_MASK                                 0x10
#define _CM1CON0_C1OUT_POSN                                 0x6
#define _CM1CON0_C1OUT_POSITION                             0x6
#define _CM1CON0_C1OUT_SIZE                                 0x1
#define _CM1CON0_C1OUT_LENGTH                               0x1
#define _CM1CON0_C1OUT_MASK                                 0x40
#define _CM1CON0_C1EN_POSN                                  0x7
#define _CM1CON0_C1EN_POSITION                              0x7
#define _CM1CON0_C1EN_SIZE                                  0x1
#define _CM1CON0_C1EN_LENGTH                                0x1
#define _CM1CON0_C1EN_MASK                                  0x80

// Register: CM1CON1
#define CM1CON1 CM1CON1
extern volatile unsigned char           CM1CON1             __at(0x3EBD);
#ifndef _LIB_BUILD
asm("CM1CON1 equ 03EBDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INTN                   :1;
        unsigned INTP                   :1;
    };
    struct {
        unsigned C1INTN                 :1;
        unsigned C1INTP                 :1;
    };
} CM1CON1bits_t;
extern volatile CM1CON1bits_t CM1CON1bits __at(0x3EBD);
// bitfield macros
#define _CM1CON1_INTN_POSN                                  0x0
#define _CM1CON1_INTN_POSITION                              0x0
#define _CM1CON1_INTN_SIZE                                  0x1
#define _CM1CON1_INTN_LENGTH                                0x1
#define _CM1CON1_INTN_MASK                                  0x1
#define _CM1CON1_INTP_POSN                                  0x1
#define _CM1CON1_INTP_POSITION                              0x1
#define _CM1CON1_INTP_SIZE                                  0x1
#define _CM1CON1_INTP_LENGTH                                0x1
#define _CM1CON1_INTP_MASK                                  0x2
#define _CM1CON1_C1INTN_POSN                                0x0
#define _CM1CON1_C1INTN_POSITION                            0x0
#define _CM1CON1_C1INTN_SIZE                                0x1
#define _CM1CON1_C1INTN_LENGTH                              0x1
#define _CM1CON1_C1INTN_MASK                                0x1
#define _CM1CON1_C1INTP_POSN                                0x1
#define _CM1CON1_C1INTP_POSITION                            0x1
#define _CM1CON1_C1INTP_SIZE                                0x1
#define _CM1CON1_C1INTP_LENGTH                              0x1
#define _CM1CON1_C1INTP_MASK                                0x2

// Register: CM1NCH
#define CM1NCH CM1NCH
extern volatile unsigned char           CM1NCH              __at(0x3EBE);
#ifndef _LIB_BUILD
asm("CM1NCH equ 03EBEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NCH                    :3;
    };
    struct {
        unsigned NCH0                   :1;
        unsigned NCH1                   :1;
        unsigned NCH2                   :1;
    };
    struct {
        unsigned C1NCH0                 :1;
        unsigned C1NCH1                 :1;
        unsigned C1NCH2                 :1;
    };
} CM1NCHbits_t;
extern volatile CM1NCHbits_t CM1NCHbits __at(0x3EBE);
// bitfield macros
#define _CM1NCH_NCH_POSN                                    0x0
#define _CM1NCH_NCH_POSITION                                0x0
#define _CM1NCH_NCH_SIZE                                    0x3
#define _CM1NCH_NCH_LENGTH                                  0x3
#define _CM1NCH_NCH_MASK                                    0x7
#define _CM1NCH_NCH0_POSN                                   0x0
#define _CM1NCH_NCH0_POSITION                               0x0
#define _CM1NCH_NCH0_SIZE                                   0x1
#define _CM1NCH_NCH0_LENGTH                                 0x1
#define _CM1NCH_NCH0_MASK                                   0x1
#define _CM1NCH_NCH1_POSN                                   0x1
#define _CM1NCH_NCH1_POSITION                               0x1
#define _CM1NCH_NCH1_SIZE                                   0x1
#define _CM1NCH_NCH1_LENGTH                                 0x1
#define _CM1NCH_NCH1_MASK                                   0x2
#define _CM1NCH_NCH2_POSN                                   0x2
#define _CM1NCH_NCH2_POSITION                               0x2
#define _CM1NCH_NCH2_SIZE                                   0x1
#define _CM1NCH_NCH2_LENGTH                                 0x1
#define _CM1NCH_NCH2_MASK                                   0x4
#define _CM1NCH_C1NCH0_POSN                                 0x0
#define _CM1NCH_C1NCH0_POSITION                             0x0
#define _CM1NCH_C1NCH0_SIZE                                 0x1
#define _CM1NCH_C1NCH0_LENGTH                               0x1
#define _CM1NCH_C1NCH0_MASK                                 0x1
#define _CM1NCH_C1NCH1_POSN                                 0x1
#define _CM1NCH_C1NCH1_POSITION                             0x1
#define _CM1NCH_C1NCH1_SIZE                                 0x1
#define _CM1NCH_C1NCH1_LENGTH                               0x1
#define _CM1NCH_C1NCH1_MASK                                 0x2
#define _CM1NCH_C1NCH2_POSN                                 0x2
#define _CM1NCH_C1NCH2_POSITION                             0x2
#define _CM1NCH_C1NCH2_SIZE                                 0x1
#define _CM1NCH_C1NCH2_LENGTH                               0x1
#define _CM1NCH_C1NCH2_MASK                                 0x4

// Register: CM1PCH
#define CM1PCH CM1PCH
extern volatile unsigned char           CM1PCH              __at(0x3EBF);
#ifndef _LIB_BUILD
asm("CM1PCH equ 03EBFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PCH                    :3;
    };
    struct {
        unsigned PCH0                   :1;
        unsigned PCH1                   :1;
        unsigned PCH2                   :1;
    };
    struct {
        unsigned C1PCH0                 :1;
        unsigned C1PCH1                 :1;
        unsigned C1PCH2                 :1;
    };
} CM1PCHbits_t;
extern volatile CM1PCHbits_t CM1PCHbits __at(0x3EBF);
// bitfield macros
#define _CM1PCH_PCH_POSN                                    0x0
#define _CM1PCH_PCH_POSITION                                0x0
#define _CM1PCH_PCH_SIZE                                    0x3
#define _CM1PCH_PCH_LENGTH                                  0x3
#define _CM1PCH_PCH_MASK                                    0x7
#define _CM1PCH_PCH0_POSN                                   0x0
#define _CM1PCH_PCH0_POSITION                               0x0
#define _CM1PCH_PCH0_SIZE                                   0x1
#define _CM1PCH_PCH0_LENGTH                                 0x1
#define _CM1PCH_PCH0_MASK                                   0x1
#define _CM1PCH_PCH1_POSN                                   0x1
#define _CM1PCH_PCH1_POSITION                               0x1
#define _CM1PCH_PCH1_SIZE                                   0x1
#define _CM1PCH_PCH1_LENGTH                                 0x1
#define _CM1PCH_PCH1_MASK                                   0x2
#define _CM1PCH_PCH2_POSN                                   0x2
#define _CM1PCH_PCH2_POSITION                               0x2
#define _CM1PCH_PCH2_SIZE                                   0x1
#define _CM1PCH_PCH2_LENGTH                                 0x1
#define _CM1PCH_PCH2_MASK                                   0x4
#define _CM1PCH_C1PCH0_POSN                                 0x0
#define _CM1PCH_C1PCH0_POSITION                             0x0
#define _CM1PCH_C1PCH0_SIZE                                 0x1
#define _CM1PCH_C1PCH0_LENGTH                               0x1
#define _CM1PCH_C1PCH0_MASK                                 0x1
#define _CM1PCH_C1PCH1_POSN                                 0x1
#define _CM1PCH_C1PCH1_POSITION                             0x1
#define _CM1PCH_C1PCH1_SIZE                                 0x1
#define _CM1PCH_C1PCH1_LENGTH                               0x1
#define _CM1PCH_C1PCH1_MASK                                 0x2
#define _CM1PCH_C1PCH2_POSN                                 0x2
#define _CM1PCH_C1PCH2_POSITION                             0x2
#define _CM1PCH_C1PCH2_SIZE                                 0x1
#define _CM1PCH_C1PCH2_LENGTH                               0x1
#define _CM1PCH_C1PCH2_MASK                                 0x4

// Register: CMOUT
#define CMOUT CMOUT
extern volatile unsigned char           CMOUT               __at(0x3EC0);
#ifndef _LIB_BUILD
asm("CMOUT equ 03EC0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned C1OUT                  :1;
        unsigned C2OUT                  :1;
    };
} CMOUTbits_t;
extern volatile CMOUTbits_t CMOUTbits __at(0x3EC0);
// bitfield macros
#define _CMOUT_C1OUT_POSN                                   0x0
#define _CMOUT_C1OUT_POSITION                               0x0
#define _CMOUT_C1OUT_SIZE                                   0x1
#define _CMOUT_C1OUT_LENGTH                                 0x1
#define _CMOUT_C1OUT_MASK                                   0x1
#define _CMOUT_C2OUT_POSN                                   0x1
#define _CMOUT_C2OUT_POSITION                               0x1
#define _CMOUT_C2OUT_SIZE                                   0x1
#define _CMOUT_C2OUT_LENGTH                                 0x1
#define _CMOUT_C2OUT_MASK                                   0x2

// Register: FVRCON
#define FVRCON FVRCON
extern volatile unsigned char           FVRCON              __at(0x3EC1);
#ifndef _LIB_BUILD
asm("FVRCON equ 03EC1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADFVR                  :2;
        unsigned CDAFVR                 :2;
        unsigned TSRNG                  :1;
        unsigned TSEN                   :1;
        unsigned RDY                    :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned ADFVR0                 :1;
        unsigned ADFVR1                 :1;
        unsigned CDAFVR0                :1;
        unsigned CDAFVR1                :1;
        unsigned                        :2;
        unsigned FVRRDY                 :1;
        unsigned FVREN                  :1;
    };
} FVRCONbits_t;
extern volatile FVRCONbits_t FVRCONbits __at(0x3EC1);
// bitfield macros
#define _FVRCON_ADFVR_POSN                                  0x0
#define _FVRCON_ADFVR_POSITION                              0x0
#define _FVRCON_ADFVR_SIZE                                  0x2
#define _FVRCON_ADFVR_LENGTH                                0x2
#define _FVRCON_ADFVR_MASK                                  0x3
#define _FVRCON_CDAFVR_POSN                                 0x2
#define _FVRCON_CDAFVR_POSITION                             0x2
#define _FVRCON_CDAFVR_SIZE                                 0x2
#define _FVRCON_CDAFVR_LENGTH                               0x2
#define _FVRCON_CDAFVR_MASK                                 0xC
#define _FVRCON_TSRNG_POSN                                  0x4
#define _FVRCON_TSRNG_POSITION                              0x4
#define _FVRCON_TSRNG_SIZE                                  0x1
#define _FVRCON_TSRNG_LENGTH                                0x1
#define _FVRCON_TSRNG_MASK                                  0x10
#define _FVRCON_TSEN_POSN                                   0x5
#define _FVRCON_TSEN_POSITION                               0x5
#define _FVRCON_TSEN_SIZE                                   0x1
#define _FVRCON_TSEN_LENGTH                                 0x1
#define _FVRCON_TSEN_MASK                                   0x20
#define _FVRCON_RDY_POSN                                    0x6
#define _FVRCON_RDY_POSITION                                0x6
#define _FVRCON_RDY_SIZE                                    0x1
#define _FVRCON_RDY_LENGTH                                  0x1
#define _FVRCON_RDY_MASK                                    0x40
#define _FVRCON_EN_POSN                                     0x7
#define _FVRCON_EN_POSITION                                 0x7
#define _FVRCON_EN_SIZE                                     0x1
#define _FVRCON_EN_LENGTH                                   0x1
#define _FVRCON_EN_MASK                                     0x80
#define _FVRCON_ADFVR0_POSN                                 0x0
#define _FVRCON_ADFVR0_POSITION                             0x0
#define _FVRCON_ADFVR0_SIZE                                 0x1
#define _FVRCON_ADFVR0_LENGTH                               0x1
#define _FVRCON_ADFVR0_MASK                                 0x1
#define _FVRCON_ADFVR1_POSN                                 0x1
#define _FVRCON_ADFVR1_POSITION                             0x1
#define _FVRCON_ADFVR1_SIZE                                 0x1
#define _FVRCON_ADFVR1_LENGTH                               0x1
#define _FVRCON_ADFVR1_MASK                                 0x2
#define _FVRCON_CDAFVR0_POSN                                0x2
#define _FVRCON_CDAFVR0_POSITION                            0x2
#define _FVRCON_CDAFVR0_SIZE                                0x1
#define _FVRCON_CDAFVR0_LENGTH                              0x1
#define _FVRCON_CDAFVR0_MASK                                0x4
#define _FVRCON_CDAFVR1_POSN                                0x3
#define _FVRCON_CDAFVR1_POSITION                            0x3
#define _FVRCON_CDAFVR1_SIZE                                0x1
#define _FVRCON_CDAFVR1_LENGTH                              0x1
#define _FVRCON_CDAFVR1_MASK                                0x8
#define _FVRCON_FVRRDY_POSN                                 0x6
#define _FVRCON_FVRRDY_POSITION                             0x6
#define _FVRCON_FVRRDY_SIZE                                 0x1
#define _FVRCON_FVRRDY_LENGTH                               0x1
#define _FVRCON_FVRRDY_MASK                                 0x40
#define _FVRCON_FVREN_POSN                                  0x7
#define _FVRCON_FVREN_POSITION                              0x7
#define _FVRCON_FVREN_SIZE                                  0x1
#define _FVRCON_FVREN_LENGTH                                0x1
#define _FVRCON_FVREN_MASK                                  0x80

// Register: ZCDCON
#define ZCDCON ZCDCON
extern volatile unsigned char           ZCDCON              __at(0x3EC3);
#ifndef _LIB_BUILD
asm("ZCDCON equ 03EC3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INTN                   :1;
        unsigned INTP                   :1;
        unsigned                        :2;
        unsigned POL                    :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned SEN                    :1;
    };
    struct {
        unsigned ZCDINTN                :1;
        unsigned ZCDINTP                :1;
        unsigned                        :2;
        unsigned ZCDPOL                 :1;
        unsigned ZCDOUT                 :1;
        unsigned                        :1;
        unsigned ZCDSEN                 :1;
    };
} ZCDCONbits_t;
extern volatile ZCDCONbits_t ZCDCONbits __at(0x3EC3);
// bitfield macros
#define _ZCDCON_INTN_POSN                                   0x0
#define _ZCDCON_INTN_POSITION                               0x0
#define _ZCDCON_INTN_SIZE                                   0x1
#define _ZCDCON_INTN_LENGTH                                 0x1
#define _ZCDCON_INTN_MASK                                   0x1
#define _ZCDCON_INTP_POSN                                   0x1
#define _ZCDCON_INTP_POSITION                               0x1
#define _ZCDCON_INTP_SIZE                                   0x1
#define _ZCDCON_INTP_LENGTH                                 0x1
#define _ZCDCON_INTP_MASK                                   0x2
#define _ZCDCON_POL_POSN                                    0x4
#define _ZCDCON_POL_POSITION                                0x4
#define _ZCDCON_POL_SIZE                                    0x1
#define _ZCDCON_POL_LENGTH                                  0x1
#define _ZCDCON_POL_MASK                                    0x10
#define _ZCDCON_OUT_POSN                                    0x5
#define _ZCDCON_OUT_POSITION                                0x5
#define _ZCDCON_OUT_SIZE                                    0x1
#define _ZCDCON_OUT_LENGTH                                  0x1
#define _ZCDCON_OUT_MASK                                    0x20
#define _ZCDCON_SEN_POSN                                    0x7
#define _ZCDCON_SEN_POSITION                                0x7
#define _ZCDCON_SEN_SIZE                                    0x1
#define _ZCDCON_SEN_LENGTH                                  0x1
#define _ZCDCON_SEN_MASK                                    0x80
#define _ZCDCON_ZCDINTN_POSN                                0x0
#define _ZCDCON_ZCDINTN_POSITION                            0x0
#define _ZCDCON_ZCDINTN_SIZE                                0x1
#define _ZCDCON_ZCDINTN_LENGTH                              0x1
#define _ZCDCON_ZCDINTN_MASK                                0x1
#define _ZCDCON_ZCDINTP_POSN                                0x1
#define _ZCDCON_ZCDINTP_POSITION                            0x1
#define _ZCDCON_ZCDINTP_SIZE                                0x1
#define _ZCDCON_ZCDINTP_LENGTH                              0x1
#define _ZCDCON_ZCDINTP_MASK                                0x2
#define _ZCDCON_ZCDPOL_POSN                                 0x4
#define _ZCDCON_ZCDPOL_POSITION                             0x4
#define _ZCDCON_ZCDPOL_SIZE                                 0x1
#define _ZCDCON_ZCDPOL_LENGTH                               0x1
#define _ZCDCON_ZCDPOL_MASK                                 0x10
#define _ZCDCON_ZCDOUT_POSN                                 0x5
#define _ZCDCON_ZCDOUT_POSITION                             0x5
#define _ZCDCON_ZCDOUT_SIZE                                 0x1
#define _ZCDCON_ZCDOUT_LENGTH                               0x1
#define _ZCDCON_ZCDOUT_MASK                                 0x20
#define _ZCDCON_ZCDSEN_POSN                                 0x7
#define _ZCDCON_ZCDSEN_POSITION                             0x7
#define _ZCDCON_ZCDSEN_SIZE                                 0x1
#define _ZCDCON_ZCDSEN_LENGTH                               0x1
#define _ZCDCON_ZCDSEN_MASK                                 0x80

// Register: HLVDCON0
#define HLVDCON0 HLVDCON0
extern volatile unsigned char           HLVDCON0            __at(0x3EC9);
#ifndef _LIB_BUILD
asm("HLVDCON0 equ 03EC9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INTL                   :1;
        unsigned INTH                   :1;
        unsigned                        :2;
        unsigned RDY                    :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned HLVDINTL               :1;
        unsigned HLVDINTH               :1;
        unsigned                        :2;
        unsigned HLVDRDY                :1;
        unsigned HLVDOUT                :1;
        unsigned                        :1;
        unsigned HLVDEN                 :1;
    };
} HLVDCON0bits_t;
extern volatile HLVDCON0bits_t HLVDCON0bits __at(0x3EC9);
// bitfield macros
#define _HLVDCON0_INTL_POSN                                 0x0
#define _HLVDCON0_INTL_POSITION                             0x0
#define _HLVDCON0_INTL_SIZE                                 0x1
#define _HLVDCON0_INTL_LENGTH                               0x1
#define _HLVDCON0_INTL_MASK                                 0x1
#define _HLVDCON0_INTH_POSN                                 0x1
#define _HLVDCON0_INTH_POSITION                             0x1
#define _HLVDCON0_INTH_SIZE                                 0x1
#define _HLVDCON0_INTH_LENGTH                               0x1
#define _HLVDCON0_INTH_MASK                                 0x2
#define _HLVDCON0_RDY_POSN                                  0x4
#define _HLVDCON0_RDY_POSITION                              0x4
#define _HLVDCON0_RDY_SIZE                                  0x1
#define _HLVDCON0_RDY_LENGTH                                0x1
#define _HLVDCON0_RDY_MASK                                  0x10
#define _HLVDCON0_OUT_POSN                                  0x5
#define _HLVDCON0_OUT_POSITION                              0x5
#define _HLVDCON0_OUT_SIZE                                  0x1
#define _HLVDCON0_OUT_LENGTH                                0x1
#define _HLVDCON0_OUT_MASK                                  0x20
#define _HLVDCON0_EN_POSN                                   0x7
#define _HLVDCON0_EN_POSITION                               0x7
#define _HLVDCON0_EN_SIZE                                   0x1
#define _HLVDCON0_EN_LENGTH                                 0x1
#define _HLVDCON0_EN_MASK                                   0x80
#define _HLVDCON0_HLVDINTL_POSN                             0x0
#define _HLVDCON0_HLVDINTL_POSITION                         0x0
#define _HLVDCON0_HLVDINTL_SIZE                             0x1
#define _HLVDCON0_HLVDINTL_LENGTH                           0x1
#define _HLVDCON0_HLVDINTL_MASK                             0x1
#define _HLVDCON0_HLVDINTH_POSN                             0x1
#define _HLVDCON0_HLVDINTH_POSITION                         0x1
#define _HLVDCON0_HLVDINTH_SIZE                             0x1
#define _HLVDCON0_HLVDINTH_LENGTH                           0x1
#define _HLVDCON0_HLVDINTH_MASK                             0x2
#define _HLVDCON0_HLVDRDY_POSN                              0x4
#define _HLVDCON0_HLVDRDY_POSITION                          0x4
#define _HLVDCON0_HLVDRDY_SIZE                              0x1
#define _HLVDCON0_HLVDRDY_LENGTH                            0x1
#define _HLVDCON0_HLVDRDY_MASK                              0x10
#define _HLVDCON0_HLVDOUT_POSN                              0x5
#define _HLVDCON0_HLVDOUT_POSITION                          0x5
#define _HLVDCON0_HLVDOUT_SIZE                              0x1
#define _HLVDCON0_HLVDOUT_LENGTH                            0x1
#define _HLVDCON0_HLVDOUT_MASK                              0x20
#define _HLVDCON0_HLVDEN_POSN                               0x7
#define _HLVDCON0_HLVDEN_POSITION                           0x7
#define _HLVDCON0_HLVDEN_SIZE                               0x1
#define _HLVDCON0_HLVDEN_LENGTH                             0x1
#define _HLVDCON0_HLVDEN_MASK                               0x80

// Register: HLVDCON1
#define HLVDCON1 HLVDCON1
extern volatile unsigned char           HLVDCON1            __at(0x3ECA);
#ifndef _LIB_BUILD
asm("HLVDCON1 equ 03ECAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SEL                    :4;
    };
    struct {
        unsigned SEL0                   :1;
        unsigned SEL1                   :1;
        unsigned SEL2                   :1;
        unsigned SEL3                   :1;
    };
    struct {
        unsigned HLVDSEL0               :1;
        unsigned HLVDSEL1               :1;
        unsigned HLVDSEL2               :1;
        unsigned HLVDSEL3               :1;
    };
} HLVDCON1bits_t;
extern volatile HLVDCON1bits_t HLVDCON1bits __at(0x3ECA);
// bitfield macros
#define _HLVDCON1_SEL_POSN                                  0x0
#define _HLVDCON1_SEL_POSITION                              0x0
#define _HLVDCON1_SEL_SIZE                                  0x4
#define _HLVDCON1_SEL_LENGTH                                0x4
#define _HLVDCON1_SEL_MASK                                  0xF
#define _HLVDCON1_SEL0_POSN                                 0x0
#define _HLVDCON1_SEL0_POSITION                             0x0
#define _HLVDCON1_SEL0_SIZE                                 0x1
#define _HLVDCON1_SEL0_LENGTH                               0x1
#define _HLVDCON1_SEL0_MASK                                 0x1
#define _HLVDCON1_SEL1_POSN                                 0x1
#define _HLVDCON1_SEL1_POSITION                             0x1
#define _HLVDCON1_SEL1_SIZE                                 0x1
#define _HLVDCON1_SEL1_LENGTH                               0x1
#define _HLVDCON1_SEL1_MASK                                 0x2
#define _HLVDCON1_SEL2_POSN                                 0x2
#define _HLVDCON1_SEL2_POSITION                             0x2
#define _HLVDCON1_SEL2_SIZE                                 0x1
#define _HLVDCON1_SEL2_LENGTH                               0x1
#define _HLVDCON1_SEL2_MASK                                 0x4
#define _HLVDCON1_SEL3_POSN                                 0x3
#define _HLVDCON1_SEL3_POSITION                             0x3
#define _HLVDCON1_SEL3_SIZE                                 0x1
#define _HLVDCON1_SEL3_LENGTH                               0x1
#define _HLVDCON1_SEL3_MASK                                 0x8
#define _HLVDCON1_HLVDSEL0_POSN                             0x0
#define _HLVDCON1_HLVDSEL0_POSITION                         0x0
#define _HLVDCON1_HLVDSEL0_SIZE                             0x1
#define _HLVDCON1_HLVDSEL0_LENGTH                           0x1
#define _HLVDCON1_HLVDSEL0_MASK                             0x1
#define _HLVDCON1_HLVDSEL1_POSN                             0x1
#define _HLVDCON1_HLVDSEL1_POSITION                         0x1
#define _HLVDCON1_HLVDSEL1_SIZE                             0x1
#define _HLVDCON1_HLVDSEL1_LENGTH                           0x1
#define _HLVDCON1_HLVDSEL1_MASK                             0x2
#define _HLVDCON1_HLVDSEL2_POSN                             0x2
#define _HLVDCON1_HLVDSEL2_POSITION                         0x2
#define _HLVDCON1_HLVDSEL2_SIZE                             0x1
#define _HLVDCON1_HLVDSEL2_LENGTH                           0x1
#define _HLVDCON1_HLVDSEL2_MASK                             0x4
#define _HLVDCON1_HLVDSEL3_POSN                             0x3
#define _HLVDCON1_HLVDSEL3_POSITION                         0x3
#define _HLVDCON1_HLVDSEL3_SIZE                             0x1
#define _HLVDCON1_HLVDSEL3_LENGTH                           0x1
#define _HLVDCON1_HLVDSEL3_MASK                             0x8

// Register: ADCP
#define ADCP ADCP
extern volatile unsigned char           ADCP                __at(0x3ED7);
#ifndef _LIB_BUILD
asm("ADCP equ 03ED7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CPRDY                  :1;
        unsigned                        :6;
        unsigned ON                     :1;
    };
    struct {
        unsigned ADCPRDY                :1;
        unsigned                        :6;
        unsigned CPON                   :1;
    };
    struct {
        unsigned                        :7;
        unsigned ADCPON                 :1;
    };
} ADCPbits_t;
extern volatile ADCPbits_t ADCPbits __at(0x3ED7);
// bitfield macros
#define _ADCP_CPRDY_POSN                                    0x0
#define _ADCP_CPRDY_POSITION                                0x0
#define _ADCP_CPRDY_SIZE                                    0x1
#define _ADCP_CPRDY_LENGTH                                  0x1
#define _ADCP_CPRDY_MASK                                    0x1
#define _ADCP_ON_POSN                                       0x7
#define _ADCP_ON_POSITION                                   0x7
#define _ADCP_ON_SIZE                                       0x1
#define _ADCP_ON_LENGTH                                     0x1
#define _ADCP_ON_MASK                                       0x80
#define _ADCP_ADCPRDY_POSN                                  0x0
#define _ADCP_ADCPRDY_POSITION                              0x0
#define _ADCP_ADCPRDY_SIZE                                  0x1
#define _ADCP_ADCPRDY_LENGTH                                0x1
#define _ADCP_ADCPRDY_MASK                                  0x1
#define _ADCP_CPON_POSN                                     0x7
#define _ADCP_CPON_POSITION                                 0x7
#define _ADCP_CPON_SIZE                                     0x1
#define _ADCP_CPON_LENGTH                                   0x1
#define _ADCP_CPON_MASK                                     0x80
#define _ADCP_ADCPON_POSN                                   0x7
#define _ADCP_ADCPON_POSITION                               0x7
#define _ADCP_ADCPON_SIZE                                   0x1
#define _ADCP_ADCPON_LENGTH                                 0x1
#define _ADCP_ADCPON_MASK                                   0x80

// Register: ADLTH
#define ADLTH ADLTH
extern volatile unsigned short          ADLTH               __at(0x3EDE);
#ifndef _LIB_BUILD
asm("ADLTH equ 03EDEh");
#endif

// Register: ADLTHL
#define ADLTHL ADLTHL
extern volatile unsigned char           ADLTHL              __at(0x3EDE);
#ifndef _LIB_BUILD
asm("ADLTHL equ 03EDEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LTH                    :8;
    };
    struct {
        unsigned ADLTH0                 :1;
        unsigned ADLTH1                 :1;
        unsigned ADLTH2                 :1;
        unsigned ADLTH3                 :1;
        unsigned ADLTH4                 :1;
        unsigned ADLTH5                 :1;
        unsigned ADLTH6                 :1;
        unsigned ADLTH7                 :1;
    };
    struct {
        unsigned ADLTH                  :8;
    };
    struct {
        unsigned LTH0                   :1;
        unsigned LTH1                   :1;
        unsigned LTH2                   :1;
        unsigned LTH3                   :1;
        unsigned LTH4                   :1;
        unsigned LTH5                   :1;
        unsigned LTH6                   :1;
        unsigned LTH7                   :1;
    };
} ADLTHLbits_t;
extern volatile ADLTHLbits_t ADLTHLbits __at(0x3EDE);
// bitfield macros
#define _ADLTHL_LTH_POSN                                    0x0
#define _ADLTHL_LTH_POSITION                                0x0
#define _ADLTHL_LTH_SIZE                                    0x8
#define _ADLTHL_LTH_LENGTH                                  0x8
#define _ADLTHL_LTH_MASK                                    0xFF
#define _ADLTHL_ADLTH0_POSN                                 0x0
#define _ADLTHL_ADLTH0_POSITION                             0x0
#define _ADLTHL_ADLTH0_SIZE                                 0x1
#define _ADLTHL_ADLTH0_LENGTH                               0x1
#define _ADLTHL_ADLTH0_MASK                                 0x1
#define _ADLTHL_ADLTH1_POSN                                 0x1
#define _ADLTHL_ADLTH1_POSITION                             0x1
#define _ADLTHL_ADLTH1_SIZE                                 0x1
#define _ADLTHL_ADLTH1_LENGTH                               0x1
#define _ADLTHL_ADLTH1_MASK                                 0x2
#define _ADLTHL_ADLTH2_POSN                                 0x2
#define _ADLTHL_ADLTH2_POSITION                             0x2
#define _ADLTHL_ADLTH2_SIZE                                 0x1
#define _ADLTHL_ADLTH2_LENGTH                               0x1
#define _ADLTHL_ADLTH2_MASK                                 0x4
#define _ADLTHL_ADLTH3_POSN                                 0x3
#define _ADLTHL_ADLTH3_POSITION                             0x3
#define _ADLTHL_ADLTH3_SIZE                                 0x1
#define _ADLTHL_ADLTH3_LENGTH                               0x1
#define _ADLTHL_ADLTH3_MASK                                 0x8
#define _ADLTHL_ADLTH4_POSN                                 0x4
#define _ADLTHL_ADLTH4_POSITION                             0x4
#define _ADLTHL_ADLTH4_SIZE                                 0x1
#define _ADLTHL_ADLTH4_LENGTH                               0x1
#define _ADLTHL_ADLTH4_MASK                                 0x10
#define _ADLTHL_ADLTH5_POSN                                 0x5
#define _ADLTHL_ADLTH5_POSITION                             0x5
#define _ADLTHL_ADLTH5_SIZE                                 0x1
#define _ADLTHL_ADLTH5_LENGTH                               0x1
#define _ADLTHL_ADLTH5_MASK                                 0x20
#define _ADLTHL_ADLTH6_POSN                                 0x6
#define _ADLTHL_ADLTH6_POSITION                             0x6
#define _ADLTHL_ADLTH6_SIZE                                 0x1
#define _ADLTHL_ADLTH6_LENGTH                               0x1
#define _ADLTHL_ADLTH6_MASK                                 0x40
#define _ADLTHL_ADLTH7_POSN                                 0x7
#define _ADLTHL_ADLTH7_POSITION                             0x7
#define _ADLTHL_ADLTH7_SIZE                                 0x1
#define _ADLTHL_ADLTH7_LENGTH                               0x1
#define _ADLTHL_ADLTH7_MASK                                 0x80
#define _ADLTHL_ADLTH_POSN                                  0x0
#define _ADLTHL_ADLTH_POSITION                              0x0
#define _ADLTHL_ADLTH_SIZE                                  0x8
#define _ADLTHL_ADLTH_LENGTH                                0x8
#define _ADLTHL_ADLTH_MASK                                  0xFF
#define _ADLTHL_LTH0_POSN                                   0x0
#define _ADLTHL_LTH0_POSITION                               0x0
#define _ADLTHL_LTH0_SIZE                                   0x1
#define _ADLTHL_LTH0_LENGTH                                 0x1
#define _ADLTHL_LTH0_MASK                                   0x1
#define _ADLTHL_LTH1_POSN                                   0x1
#define _ADLTHL_LTH1_POSITION                               0x1
#define _ADLTHL_LTH1_SIZE                                   0x1
#define _ADLTHL_LTH1_LENGTH                                 0x1
#define _ADLTHL_LTH1_MASK                                   0x2
#define _ADLTHL_LTH2_POSN                                   0x2
#define _ADLTHL_LTH2_POSITION                               0x2
#define _ADLTHL_LTH2_SIZE                                   0x1
#define _ADLTHL_LTH2_LENGTH                                 0x1
#define _ADLTHL_LTH2_MASK                                   0x4
#define _ADLTHL_LTH3_POSN                                   0x3
#define _ADLTHL_LTH3_POSITION                               0x3
#define _ADLTHL_LTH3_SIZE                                   0x1
#define _ADLTHL_LTH3_LENGTH                                 0x1
#define _ADLTHL_LTH3_MASK                                   0x8
#define _ADLTHL_LTH4_POSN                                   0x4
#define _ADLTHL_LTH4_POSITION                               0x4
#define _ADLTHL_LTH4_SIZE                                   0x1
#define _ADLTHL_LTH4_LENGTH                                 0x1
#define _ADLTHL_LTH4_MASK                                   0x10
#define _ADLTHL_LTH5_POSN                                   0x5
#define _ADLTHL_LTH5_POSITION                               0x5
#define _ADLTHL_LTH5_SIZE                                   0x1
#define _ADLTHL_LTH5_LENGTH                                 0x1
#define _ADLTHL_LTH5_MASK                                   0x20
#define _ADLTHL_LTH6_POSN                                   0x6
#define _ADLTHL_LTH6_POSITION                               0x6
#define _ADLTHL_LTH6_SIZE                                   0x1
#define _ADLTHL_LTH6_LENGTH                                 0x1
#define _ADLTHL_LTH6_MASK                                   0x40
#define _ADLTHL_LTH7_POSN                                   0x7
#define _ADLTHL_LTH7_POSITION                               0x7
#define _ADLTHL_LTH7_SIZE                                   0x1
#define _ADLTHL_LTH7_LENGTH                                 0x1
#define _ADLTHL_LTH7_MASK                                   0x80

// Register: ADLTHH
#define ADLTHH ADLTHH
extern volatile unsigned char           ADLTHH              __at(0x3EDF);
#ifndef _LIB_BUILD
asm("ADLTHH equ 03EDFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LTH                    :8;
    };
    struct {
        unsigned ADLTH8                 :1;
        unsigned ADLTH9                 :1;
        unsigned ADLTH10                :1;
        unsigned ADLTH11                :1;
        unsigned ADLTH12                :1;
        unsigned ADLTH13                :1;
        unsigned ADLTH14                :1;
        unsigned ADLTH15                :1;
    };
    struct {
        unsigned ADLTH                  :8;
    };
    struct {
        unsigned LTH8                   :1;
        unsigned LTH9                   :1;
        unsigned LTH10                  :1;
        unsigned LTH11                  :1;
        unsigned LTH12                  :1;
        unsigned LTH13                  :1;
        unsigned LTH14                  :1;
        unsigned LTH15                  :1;
    };
} ADLTHHbits_t;
extern volatile ADLTHHbits_t ADLTHHbits __at(0x3EDF);
// bitfield macros
#define _ADLTHH_LTH_POSN                                    0x0
#define _ADLTHH_LTH_POSITION                                0x0
#define _ADLTHH_LTH_SIZE                                    0x8
#define _ADLTHH_LTH_LENGTH                                  0x8
#define _ADLTHH_LTH_MASK                                    0xFF
#define _ADLTHH_ADLTH8_POSN                                 0x0
#define _ADLTHH_ADLTH8_POSITION                             0x0
#define _ADLTHH_ADLTH8_SIZE                                 0x1
#define _ADLTHH_ADLTH8_LENGTH                               0x1
#define _ADLTHH_ADLTH8_MASK                                 0x1
#define _ADLTHH_ADLTH9_POSN                                 0x1
#define _ADLTHH_ADLTH9_POSITION                             0x1
#define _ADLTHH_ADLTH9_SIZE                                 0x1
#define _ADLTHH_ADLTH9_LENGTH                               0x1
#define _ADLTHH_ADLTH9_MASK                                 0x2
#define _ADLTHH_ADLTH10_POSN                                0x2
#define _ADLTHH_ADLTH10_POSITION                            0x2
#define _ADLTHH_ADLTH10_SIZE                                0x1
#define _ADLTHH_ADLTH10_LENGTH                              0x1
#define _ADLTHH_ADLTH10_MASK                                0x4
#define _ADLTHH_ADLTH11_POSN                                0x3
#define _ADLTHH_ADLTH11_POSITION                            0x3
#define _ADLTHH_ADLTH11_SIZE                                0x1
#define _ADLTHH_ADLTH11_LENGTH                              0x1
#define _ADLTHH_ADLTH11_MASK                                0x8
#define _ADLTHH_ADLTH12_POSN                                0x4
#define _ADLTHH_ADLTH12_POSITION                            0x4
#define _ADLTHH_ADLTH12_SIZE                                0x1
#define _ADLTHH_ADLTH12_LENGTH                              0x1
#define _ADLTHH_ADLTH12_MASK                                0x10
#define _ADLTHH_ADLTH13_POSN                                0x5
#define _ADLTHH_ADLTH13_POSITION                            0x5
#define _ADLTHH_ADLTH13_SIZE                                0x1
#define _ADLTHH_ADLTH13_LENGTH                              0x1
#define _ADLTHH_ADLTH13_MASK                                0x20
#define _ADLTHH_ADLTH14_POSN                                0x6
#define _ADLTHH_ADLTH14_POSITION                            0x6
#define _ADLTHH_ADLTH14_SIZE                                0x1
#define _ADLTHH_ADLTH14_LENGTH                              0x1
#define _ADLTHH_ADLTH14_MASK                                0x40
#define _ADLTHH_ADLTH15_POSN                                0x7
#define _ADLTHH_ADLTH15_POSITION                            0x7
#define _ADLTHH_ADLTH15_SIZE                                0x1
#define _ADLTHH_ADLTH15_LENGTH                              0x1
#define _ADLTHH_ADLTH15_MASK                                0x80
#define _ADLTHH_ADLTH_POSN                                  0x0
#define _ADLTHH_ADLTH_POSITION                              0x0
#define _ADLTHH_ADLTH_SIZE                                  0x8
#define _ADLTHH_ADLTH_LENGTH                                0x8
#define _ADLTHH_ADLTH_MASK                                  0xFF
#define _ADLTHH_LTH8_POSN                                   0x0
#define _ADLTHH_LTH8_POSITION                               0x0
#define _ADLTHH_LTH8_SIZE                                   0x1
#define _ADLTHH_LTH8_LENGTH                                 0x1
#define _ADLTHH_LTH8_MASK                                   0x1
#define _ADLTHH_LTH9_POSN                                   0x1
#define _ADLTHH_LTH9_POSITION                               0x1
#define _ADLTHH_LTH9_SIZE                                   0x1
#define _ADLTHH_LTH9_LENGTH                                 0x1
#define _ADLTHH_LTH9_MASK                                   0x2
#define _ADLTHH_LTH10_POSN                                  0x2
#define _ADLTHH_LTH10_POSITION                              0x2
#define _ADLTHH_LTH10_SIZE                                  0x1
#define _ADLTHH_LTH10_LENGTH                                0x1
#define _ADLTHH_LTH10_MASK                                  0x4
#define _ADLTHH_LTH11_POSN                                  0x3
#define _ADLTHH_LTH11_POSITION                              0x3
#define _ADLTHH_LTH11_SIZE                                  0x1
#define _ADLTHH_LTH11_LENGTH                                0x1
#define _ADLTHH_LTH11_MASK                                  0x8
#define _ADLTHH_LTH12_POSN                                  0x4
#define _ADLTHH_LTH12_POSITION                              0x4
#define _ADLTHH_LTH12_SIZE                                  0x1
#define _ADLTHH_LTH12_LENGTH                                0x1
#define _ADLTHH_LTH12_MASK                                  0x10
#define _ADLTHH_LTH13_POSN                                  0x5
#define _ADLTHH_LTH13_POSITION                              0x5
#define _ADLTHH_LTH13_SIZE                                  0x1
#define _ADLTHH_LTH13_LENGTH                                0x1
#define _ADLTHH_LTH13_MASK                                  0x20
#define _ADLTHH_LTH14_POSN                                  0x6
#define _ADLTHH_LTH14_POSITION                              0x6
#define _ADLTHH_LTH14_SIZE                                  0x1
#define _ADLTHH_LTH14_LENGTH                                0x1
#define _ADLTHH_LTH14_MASK                                  0x40
#define _ADLTHH_LTH15_POSN                                  0x7
#define _ADLTHH_LTH15_POSITION                              0x7
#define _ADLTHH_LTH15_SIZE                                  0x1
#define _ADLTHH_LTH15_LENGTH                                0x1
#define _ADLTHH_LTH15_MASK                                  0x80

// Register: ADUTH
#define ADUTH ADUTH
extern volatile unsigned short          ADUTH               __at(0x3EE0);
#ifndef _LIB_BUILD
asm("ADUTH equ 03EE0h");
#endif

// Register: ADUTHL
#define ADUTHL ADUTHL
extern volatile unsigned char           ADUTHL              __at(0x3EE0);
#ifndef _LIB_BUILD
asm("ADUTHL equ 03EE0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned UTH                    :8;
    };
    struct {
        unsigned ADUTH0                 :1;
        unsigned ADUTH1                 :1;
        unsigned ADUTH2                 :1;
        unsigned ADUTH3                 :1;
        unsigned ADUTH4                 :1;
        unsigned ADUTH5                 :1;
        unsigned ADUTH6                 :1;
        unsigned ADUTH7                 :1;
    };
    struct {
        unsigned ADUTH                  :8;
    };
    struct {
        unsigned UTH0                   :1;
        unsigned UTH1                   :1;
        unsigned UTH2                   :1;
        unsigned UTH3                   :1;
        unsigned UTH4                   :1;
        unsigned UTH5                   :1;
        unsigned UTH6                   :1;
        unsigned UTH7                   :1;
    };
} ADUTHLbits_t;
extern volatile ADUTHLbits_t ADUTHLbits __at(0x3EE0);
// bitfield macros
#define _ADUTHL_UTH_POSN                                    0x0
#define _ADUTHL_UTH_POSITION                                0x0
#define _ADUTHL_UTH_SIZE                                    0x8
#define _ADUTHL_UTH_LENGTH                                  0x8
#define _ADUTHL_UTH_MASK                                    0xFF
#define _ADUTHL_ADUTH0_POSN                                 0x0
#define _ADUTHL_ADUTH0_POSITION                             0x0
#define _ADUTHL_ADUTH0_SIZE                                 0x1
#define _ADUTHL_ADUTH0_LENGTH                               0x1
#define _ADUTHL_ADUTH0_MASK                                 0x1
#define _ADUTHL_ADUTH1_POSN                                 0x1
#define _ADUTHL_ADUTH1_POSITION                             0x1
#define _ADUTHL_ADUTH1_SIZE                                 0x1
#define _ADUTHL_ADUTH1_LENGTH                               0x1
#define _ADUTHL_ADUTH1_MASK                                 0x2
#define _ADUTHL_ADUTH2_POSN                                 0x2
#define _ADUTHL_ADUTH2_POSITION                             0x2
#define _ADUTHL_ADUTH2_SIZE                                 0x1
#define _ADUTHL_ADUTH2_LENGTH                               0x1
#define _ADUTHL_ADUTH2_MASK                                 0x4
#define _ADUTHL_ADUTH3_POSN                                 0x3
#define _ADUTHL_ADUTH3_POSITION                             0x3
#define _ADUTHL_ADUTH3_SIZE                                 0x1
#define _ADUTHL_ADUTH3_LENGTH                               0x1
#define _ADUTHL_ADUTH3_MASK                                 0x8
#define _ADUTHL_ADUTH4_POSN                                 0x4
#define _ADUTHL_ADUTH4_POSITION                             0x4
#define _ADUTHL_ADUTH4_SIZE                                 0x1
#define _ADUTHL_ADUTH4_LENGTH                               0x1
#define _ADUTHL_ADUTH4_MASK                                 0x10
#define _ADUTHL_ADUTH5_POSN                                 0x5
#define _ADUTHL_ADUTH5_POSITION                             0x5
#define _ADUTHL_ADUTH5_SIZE                                 0x1
#define _ADUTHL_ADUTH5_LENGTH                               0x1
#define _ADUTHL_ADUTH5_MASK                                 0x20
#define _ADUTHL_ADUTH6_POSN                                 0x6
#define _ADUTHL_ADUTH6_POSITION                             0x6
#define _ADUTHL_ADUTH6_SIZE                                 0x1
#define _ADUTHL_ADUTH6_LENGTH                               0x1
#define _ADUTHL_ADUTH6_MASK                                 0x40
#define _ADUTHL_ADUTH7_POSN                                 0x7
#define _ADUTHL_ADUTH7_POSITION                             0x7
#define _ADUTHL_ADUTH7_SIZE                                 0x1
#define _ADUTHL_ADUTH7_LENGTH                               0x1
#define _ADUTHL_ADUTH7_MASK                                 0x80
#define _ADUTHL_ADUTH_POSN                                  0x0
#define _ADUTHL_ADUTH_POSITION                              0x0
#define _ADUTHL_ADUTH_SIZE                                  0x8
#define _ADUTHL_ADUTH_LENGTH                                0x8
#define _ADUTHL_ADUTH_MASK                                  0xFF
#define _ADUTHL_UTH0_POSN                                   0x0
#define _ADUTHL_UTH0_POSITION                               0x0
#define _ADUTHL_UTH0_SIZE                                   0x1
#define _ADUTHL_UTH0_LENGTH                                 0x1
#define _ADUTHL_UTH0_MASK                                   0x1
#define _ADUTHL_UTH1_POSN                                   0x1
#define _ADUTHL_UTH1_POSITION                               0x1
#define _ADUTHL_UTH1_SIZE                                   0x1
#define _ADUTHL_UTH1_LENGTH                                 0x1
#define _ADUTHL_UTH1_MASK                                   0x2
#define _ADUTHL_UTH2_POSN                                   0x2
#define _ADUTHL_UTH2_POSITION                               0x2
#define _ADUTHL_UTH2_SIZE                                   0x1
#define _ADUTHL_UTH2_LENGTH                                 0x1
#define _ADUTHL_UTH2_MASK                                   0x4
#define _ADUTHL_UTH3_POSN                                   0x3
#define _ADUTHL_UTH3_POSITION                               0x3
#define _ADUTHL_UTH3_SIZE                                   0x1
#define _ADUTHL_UTH3_LENGTH                                 0x1
#define _ADUTHL_UTH3_MASK                                   0x8
#define _ADUTHL_UTH4_POSN                                   0x4
#define _ADUTHL_UTH4_POSITION                               0x4
#define _ADUTHL_UTH4_SIZE                                   0x1
#define _ADUTHL_UTH4_LENGTH                                 0x1
#define _ADUTHL_UTH4_MASK                                   0x10
#define _ADUTHL_UTH5_POSN                                   0x5
#define _ADUTHL_UTH5_POSITION                               0x5
#define _ADUTHL_UTH5_SIZE                                   0x1
#define _ADUTHL_UTH5_LENGTH                                 0x1
#define _ADUTHL_UTH5_MASK                                   0x20
#define _ADUTHL_UTH6_POSN                                   0x6
#define _ADUTHL_UTH6_POSITION                               0x6
#define _ADUTHL_UTH6_SIZE                                   0x1
#define _ADUTHL_UTH6_LENGTH                                 0x1
#define _ADUTHL_UTH6_MASK                                   0x40
#define _ADUTHL_UTH7_POSN                                   0x7
#define _ADUTHL_UTH7_POSITION                               0x7
#define _ADUTHL_UTH7_SIZE                                   0x1
#define _ADUTHL_UTH7_LENGTH                                 0x1
#define _ADUTHL_UTH7_MASK                                   0x80

// Register: ADUTHH
#define ADUTHH ADUTHH
extern volatile unsigned char           ADUTHH              __at(0x3EE1);
#ifndef _LIB_BUILD
asm("ADUTHH equ 03EE1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned UTH                    :8;
    };
    struct {
        unsigned ADUTH8                 :1;
        unsigned ADUTH9                 :1;
        unsigned ADUTH10                :1;
        unsigned ADUTH11                :1;
        unsigned ADUTH12                :1;
        unsigned ADUTH13                :1;
        unsigned ADUTH14                :1;
        unsigned ADUTH15                :1;
    };
    struct {
        unsigned ADUTH                  :8;
    };
    struct {
        unsigned UTH8                   :1;
        unsigned UTH9                   :1;
        unsigned UTH10                  :1;
        unsigned UTH11                  :1;
        unsigned UTH12                  :1;
        unsigned UTH13                  :1;
        unsigned UTH14                  :1;
        unsigned UTH15                  :1;
    };
} ADUTHHbits_t;
extern volatile ADUTHHbits_t ADUTHHbits __at(0x3EE1);
// bitfield macros
#define _ADUTHH_UTH_POSN                                    0x0
#define _ADUTHH_UTH_POSITION                                0x0
#define _ADUTHH_UTH_SIZE                                    0x8
#define _ADUTHH_UTH_LENGTH                                  0x8
#define _ADUTHH_UTH_MASK                                    0xFF
#define _ADUTHH_ADUTH8_POSN                                 0x0
#define _ADUTHH_ADUTH8_POSITION                             0x0
#define _ADUTHH_ADUTH8_SIZE                                 0x1
#define _ADUTHH_ADUTH8_LENGTH                               0x1
#define _ADUTHH_ADUTH8_MASK                                 0x1
#define _ADUTHH_ADUTH9_POSN                                 0x1
#define _ADUTHH_ADUTH9_POSITION                             0x1
#define _ADUTHH_ADUTH9_SIZE                                 0x1
#define _ADUTHH_ADUTH9_LENGTH                               0x1
#define _ADUTHH_ADUTH9_MASK                                 0x2
#define _ADUTHH_ADUTH10_POSN                                0x2
#define _ADUTHH_ADUTH10_POSITION                            0x2
#define _ADUTHH_ADUTH10_SIZE                                0x1
#define _ADUTHH_ADUTH10_LENGTH                              0x1
#define _ADUTHH_ADUTH10_MASK                                0x4
#define _ADUTHH_ADUTH11_POSN                                0x3
#define _ADUTHH_ADUTH11_POSITION                            0x3
#define _ADUTHH_ADUTH11_SIZE                                0x1
#define _ADUTHH_ADUTH11_LENGTH                              0x1
#define _ADUTHH_ADUTH11_MASK                                0x8
#define _ADUTHH_ADUTH12_POSN                                0x4
#define _ADUTHH_ADUTH12_POSITION                            0x4
#define _ADUTHH_ADUTH12_SIZE                                0x1
#define _ADUTHH_ADUTH12_LENGTH                              0x1
#define _ADUTHH_ADUTH12_MASK                                0x10
#define _ADUTHH_ADUTH13_POSN                                0x5
#define _ADUTHH_ADUTH13_POSITION                            0x5
#define _ADUTHH_ADUTH13_SIZE                                0x1
#define _ADUTHH_ADUTH13_LENGTH                              0x1
#define _ADUTHH_ADUTH13_MASK                                0x20
#define _ADUTHH_ADUTH14_POSN                                0x6
#define _ADUTHH_ADUTH14_POSITION                            0x6
#define _ADUTHH_ADUTH14_SIZE                                0x1
#define _ADUTHH_ADUTH14_LENGTH                              0x1
#define _ADUTHH_ADUTH14_MASK                                0x40
#define _ADUTHH_ADUTH15_POSN                                0x7
#define _ADUTHH_ADUTH15_POSITION                            0x7
#define _ADUTHH_ADUTH15_SIZE                                0x1
#define _ADUTHH_ADUTH15_LENGTH                              0x1
#define _ADUTHH_ADUTH15_MASK                                0x80
#define _ADUTHH_ADUTH_POSN                                  0x0
#define _ADUTHH_ADUTH_POSITION                              0x0
#define _ADUTHH_ADUTH_SIZE                                  0x8
#define _ADUTHH_ADUTH_LENGTH                                0x8
#define _ADUTHH_ADUTH_MASK                                  0xFF
#define _ADUTHH_UTH8_POSN                                   0x0
#define _ADUTHH_UTH8_POSITION                               0x0
#define _ADUTHH_UTH8_SIZE                                   0x1
#define _ADUTHH_UTH8_LENGTH                                 0x1
#define _ADUTHH_UTH8_MASK                                   0x1
#define _ADUTHH_UTH9_POSN                                   0x1
#define _ADUTHH_UTH9_POSITION                               0x1
#define _ADUTHH_UTH9_SIZE                                   0x1
#define _ADUTHH_UTH9_LENGTH                                 0x1
#define _ADUTHH_UTH9_MASK                                   0x2
#define _ADUTHH_UTH10_POSN                                  0x2
#define _ADUTHH_UTH10_POSITION                              0x2
#define _ADUTHH_UTH10_SIZE                                  0x1
#define _ADUTHH_UTH10_LENGTH                                0x1
#define _ADUTHH_UTH10_MASK                                  0x4
#define _ADUTHH_UTH11_POSN                                  0x3
#define _ADUTHH_UTH11_POSITION                              0x3
#define _ADUTHH_UTH11_SIZE                                  0x1
#define _ADUTHH_UTH11_LENGTH                                0x1
#define _ADUTHH_UTH11_MASK                                  0x8
#define _ADUTHH_UTH12_POSN                                  0x4
#define _ADUTHH_UTH12_POSITION                              0x4
#define _ADUTHH_UTH12_SIZE                                  0x1
#define _ADUTHH_UTH12_LENGTH                                0x1
#define _ADUTHH_UTH12_MASK                                  0x10
#define _ADUTHH_UTH13_POSN                                  0x5
#define _ADUTHH_UTH13_POSITION                              0x5
#define _ADUTHH_UTH13_SIZE                                  0x1
#define _ADUTHH_UTH13_LENGTH                                0x1
#define _ADUTHH_UTH13_MASK                                  0x20
#define _ADUTHH_UTH14_POSN                                  0x6
#define _ADUTHH_UTH14_POSITION                              0x6
#define _ADUTHH_UTH14_SIZE                                  0x1
#define _ADUTHH_UTH14_LENGTH                                0x1
#define _ADUTHH_UTH14_MASK                                  0x40
#define _ADUTHH_UTH15_POSN                                  0x7
#define _ADUTHH_UTH15_POSITION                              0x7
#define _ADUTHH_UTH15_SIZE                                  0x1
#define _ADUTHH_UTH15_LENGTH                                0x1
#define _ADUTHH_UTH15_MASK                                  0x80

// Register: ADERR
#define ADERR ADERR
extern volatile unsigned short          ADERR               __at(0x3EE2);
#ifndef _LIB_BUILD
asm("ADERR equ 03EE2h");
#endif

// Register: ADERRL
#define ADERRL ADERRL
extern volatile unsigned char           ADERRL              __at(0x3EE2);
#ifndef _LIB_BUILD
asm("ADERRL equ 03EE2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ERR                    :8;
    };
    struct {
        unsigned ADERR0                 :1;
        unsigned ADERR1                 :1;
        unsigned ADERR2                 :1;
        unsigned ADERR3                 :1;
        unsigned ADERR4                 :1;
        unsigned ADERR5                 :1;
        unsigned ADERR6                 :1;
        unsigned ADERR7                 :1;
    };
    struct {
        unsigned ADERR                  :8;
    };
    struct {
        unsigned ERR0                   :1;
        unsigned ERR1                   :1;
        unsigned ERR2                   :1;
        unsigned ERR3                   :1;
        unsigned ERR4                   :1;
        unsigned ERR5                   :1;
        unsigned ERR6                   :1;
        unsigned ERR7                   :1;
    };
} ADERRLbits_t;
extern volatile ADERRLbits_t ADERRLbits __at(0x3EE2);
// bitfield macros
#define _ADERRL_ERR_POSN                                    0x0
#define _ADERRL_ERR_POSITION                                0x0
#define _ADERRL_ERR_SIZE                                    0x8
#define _ADERRL_ERR_LENGTH                                  0x8
#define _ADERRL_ERR_MASK                                    0xFF
#define _ADERRL_ADERR0_POSN                                 0x0
#define _ADERRL_ADERR0_POSITION                             0x0
#define _ADERRL_ADERR0_SIZE                                 0x1
#define _ADERRL_ADERR0_LENGTH                               0x1
#define _ADERRL_ADERR0_MASK                                 0x1
#define _ADERRL_ADERR1_POSN                                 0x1
#define _ADERRL_ADERR1_POSITION                             0x1
#define _ADERRL_ADERR1_SIZE                                 0x1
#define _ADERRL_ADERR1_LENGTH                               0x1
#define _ADERRL_ADERR1_MASK                                 0x2
#define _ADERRL_ADERR2_POSN                                 0x2
#define _ADERRL_ADERR2_POSITION                             0x2
#define _ADERRL_ADERR2_SIZE                                 0x1
#define _ADERRL_ADERR2_LENGTH                               0x1
#define _ADERRL_ADERR2_MASK                                 0x4
#define _ADERRL_ADERR3_POSN                                 0x3
#define _ADERRL_ADERR3_POSITION                             0x3
#define _ADERRL_ADERR3_SIZE                                 0x1
#define _ADERRL_ADERR3_LENGTH                               0x1
#define _ADERRL_ADERR3_MASK                                 0x8
#define _ADERRL_ADERR4_POSN                                 0x4
#define _ADERRL_ADERR4_POSITION                             0x4
#define _ADERRL_ADERR4_SIZE                                 0x1
#define _ADERRL_ADERR4_LENGTH                               0x1
#define _ADERRL_ADERR4_MASK                                 0x10
#define _ADERRL_ADERR5_POSN                                 0x5
#define _ADERRL_ADERR5_POSITION                             0x5
#define _ADERRL_ADERR5_SIZE                                 0x1
#define _ADERRL_ADERR5_LENGTH                               0x1
#define _ADERRL_ADERR5_MASK                                 0x20
#define _ADERRL_ADERR6_POSN                                 0x6
#define _ADERRL_ADERR6_POSITION                             0x6
#define _ADERRL_ADERR6_SIZE                                 0x1
#define _ADERRL_ADERR6_LENGTH                               0x1
#define _ADERRL_ADERR6_MASK                                 0x40
#define _ADERRL_ADERR7_POSN                                 0x7
#define _ADERRL_ADERR7_POSITION                             0x7
#define _ADERRL_ADERR7_SIZE                                 0x1
#define _ADERRL_ADERR7_LENGTH                               0x1
#define _ADERRL_ADERR7_MASK                                 0x80
#define _ADERRL_ADERR_POSN                                  0x0
#define _ADERRL_ADERR_POSITION                              0x0
#define _ADERRL_ADERR_SIZE                                  0x8
#define _ADERRL_ADERR_LENGTH                                0x8
#define _ADERRL_ADERR_MASK                                  0xFF
#define _ADERRL_ERR0_POSN                                   0x0
#define _ADERRL_ERR0_POSITION                               0x0
#define _ADERRL_ERR0_SIZE                                   0x1
#define _ADERRL_ERR0_LENGTH                                 0x1
#define _ADERRL_ERR0_MASK                                   0x1
#define _ADERRL_ERR1_POSN                                   0x1
#define _ADERRL_ERR1_POSITION                               0x1
#define _ADERRL_ERR1_SIZE                                   0x1
#define _ADERRL_ERR1_LENGTH                                 0x1
#define _ADERRL_ERR1_MASK                                   0x2
#define _ADERRL_ERR2_POSN                                   0x2
#define _ADERRL_ERR2_POSITION                               0x2
#define _ADERRL_ERR2_SIZE                                   0x1
#define _ADERRL_ERR2_LENGTH                                 0x1
#define _ADERRL_ERR2_MASK                                   0x4
#define _ADERRL_ERR3_POSN                                   0x3
#define _ADERRL_ERR3_POSITION                               0x3
#define _ADERRL_ERR3_SIZE                                   0x1
#define _ADERRL_ERR3_LENGTH                                 0x1
#define _ADERRL_ERR3_MASK                                   0x8
#define _ADERRL_ERR4_POSN                                   0x4
#define _ADERRL_ERR4_POSITION                               0x4
#define _ADERRL_ERR4_SIZE                                   0x1
#define _ADERRL_ERR4_LENGTH                                 0x1
#define _ADERRL_ERR4_MASK                                   0x10
#define _ADERRL_ERR5_POSN                                   0x5
#define _ADERRL_ERR5_POSITION                               0x5
#define _ADERRL_ERR5_SIZE                                   0x1
#define _ADERRL_ERR5_LENGTH                                 0x1
#define _ADERRL_ERR5_MASK                                   0x20
#define _ADERRL_ERR6_POSN                                   0x6
#define _ADERRL_ERR6_POSITION                               0x6
#define _ADERRL_ERR6_SIZE                                   0x1
#define _ADERRL_ERR6_LENGTH                                 0x1
#define _ADERRL_ERR6_MASK                                   0x40
#define _ADERRL_ERR7_POSN                                   0x7
#define _ADERRL_ERR7_POSITION                               0x7
#define _ADERRL_ERR7_SIZE                                   0x1
#define _ADERRL_ERR7_LENGTH                                 0x1
#define _ADERRL_ERR7_MASK                                   0x80

// Register: ADERRH
#define ADERRH ADERRH
extern volatile unsigned char           ADERRH              __at(0x3EE3);
#ifndef _LIB_BUILD
asm("ADERRH equ 03EE3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ERR                    :8;
    };
    struct {
        unsigned ADERR8                 :1;
        unsigned ADERR9                 :1;
        unsigned ADERR10                :1;
        unsigned ADERR11                :1;
        unsigned ADERR12                :1;
        unsigned ADERR13                :1;
        unsigned ADERR14                :1;
        unsigned ADERR15                :1;
    };
    struct {
        unsigned ADERR                  :8;
    };
    struct {
        unsigned ERR8                   :1;
        unsigned ERR9                   :1;
        unsigned ERR10                  :1;
        unsigned ERR11                  :1;
        unsigned ERR12                  :1;
        unsigned ERR13                  :1;
        unsigned ERR14                  :1;
        unsigned ERR15                  :1;
    };
} ADERRHbits_t;
extern volatile ADERRHbits_t ADERRHbits __at(0x3EE3);
// bitfield macros
#define _ADERRH_ERR_POSN                                    0x0
#define _ADERRH_ERR_POSITION                                0x0
#define _ADERRH_ERR_SIZE                                    0x8
#define _ADERRH_ERR_LENGTH                                  0x8
#define _ADERRH_ERR_MASK                                    0xFF
#define _ADERRH_ADERR8_POSN                                 0x0
#define _ADERRH_ADERR8_POSITION                             0x0
#define _ADERRH_ADERR8_SIZE                                 0x1
#define _ADERRH_ADERR8_LENGTH                               0x1
#define _ADERRH_ADERR8_MASK                                 0x1
#define _ADERRH_ADERR9_POSN                                 0x1
#define _ADERRH_ADERR9_POSITION                             0x1
#define _ADERRH_ADERR9_SIZE                                 0x1
#define _ADERRH_ADERR9_LENGTH                               0x1
#define _ADERRH_ADERR9_MASK                                 0x2
#define _ADERRH_ADERR10_POSN                                0x2
#define _ADERRH_ADERR10_POSITION                            0x2
#define _ADERRH_ADERR10_SIZE                                0x1
#define _ADERRH_ADERR10_LENGTH                              0x1
#define _ADERRH_ADERR10_MASK                                0x4
#define _ADERRH_ADERR11_POSN                                0x3
#define _ADERRH_ADERR11_POSITION                            0x3
#define _ADERRH_ADERR11_SIZE                                0x1
#define _ADERRH_ADERR11_LENGTH                              0x1
#define _ADERRH_ADERR11_MASK                                0x8
#define _ADERRH_ADERR12_POSN                                0x4
#define _ADERRH_ADERR12_POSITION                            0x4
#define _ADERRH_ADERR12_SIZE                                0x1
#define _ADERRH_ADERR12_LENGTH                              0x1
#define _ADERRH_ADERR12_MASK                                0x10
#define _ADERRH_ADERR13_POSN                                0x5
#define _ADERRH_ADERR13_POSITION                            0x5
#define _ADERRH_ADERR13_SIZE                                0x1
#define _ADERRH_ADERR13_LENGTH                              0x1
#define _ADERRH_ADERR13_MASK                                0x20
#define _ADERRH_ADERR14_POSN                                0x6
#define _ADERRH_ADERR14_POSITION                            0x6
#define _ADERRH_ADERR14_SIZE                                0x1
#define _ADERRH_ADERR14_LENGTH                              0x1
#define _ADERRH_ADERR14_MASK                                0x40
#define _ADERRH_ADERR15_POSN                                0x7
#define _ADERRH_ADERR15_POSITION                            0x7
#define _ADERRH_ADERR15_SIZE                                0x1
#define _ADERRH_ADERR15_LENGTH                              0x1
#define _ADERRH_ADERR15_MASK                                0x80
#define _ADERRH_ADERR_POSN                                  0x0
#define _ADERRH_ADERR_POSITION                              0x0
#define _ADERRH_ADERR_SIZE                                  0x8
#define _ADERRH_ADERR_LENGTH                                0x8
#define _ADERRH_ADERR_MASK                                  0xFF
#define _ADERRH_ERR8_POSN                                   0x0
#define _ADERRH_ERR8_POSITION                               0x0
#define _ADERRH_ERR8_SIZE                                   0x1
#define _ADERRH_ERR8_LENGTH                                 0x1
#define _ADERRH_ERR8_MASK                                   0x1
#define _ADERRH_ERR9_POSN                                   0x1
#define _ADERRH_ERR9_POSITION                               0x1
#define _ADERRH_ERR9_SIZE                                   0x1
#define _ADERRH_ERR9_LENGTH                                 0x1
#define _ADERRH_ERR9_MASK                                   0x2
#define _ADERRH_ERR10_POSN                                  0x2
#define _ADERRH_ERR10_POSITION                              0x2
#define _ADERRH_ERR10_SIZE                                  0x1
#define _ADERRH_ERR10_LENGTH                                0x1
#define _ADERRH_ERR10_MASK                                  0x4
#define _ADERRH_ERR11_POSN                                  0x3
#define _ADERRH_ERR11_POSITION                              0x3
#define _ADERRH_ERR11_SIZE                                  0x1
#define _ADERRH_ERR11_LENGTH                                0x1
#define _ADERRH_ERR11_MASK                                  0x8
#define _ADERRH_ERR12_POSN                                  0x4
#define _ADERRH_ERR12_POSITION                              0x4
#define _ADERRH_ERR12_SIZE                                  0x1
#define _ADERRH_ERR12_LENGTH                                0x1
#define _ADERRH_ERR12_MASK                                  0x10
#define _ADERRH_ERR13_POSN                                  0x5
#define _ADERRH_ERR13_POSITION                              0x5
#define _ADERRH_ERR13_SIZE                                  0x1
#define _ADERRH_ERR13_LENGTH                                0x1
#define _ADERRH_ERR13_MASK                                  0x20
#define _ADERRH_ERR14_POSN                                  0x6
#define _ADERRH_ERR14_POSITION                              0x6
#define _ADERRH_ERR14_SIZE                                  0x1
#define _ADERRH_ERR14_LENGTH                                0x1
#define _ADERRH_ERR14_MASK                                  0x40
#define _ADERRH_ERR15_POSN                                  0x7
#define _ADERRH_ERR15_POSITION                              0x7
#define _ADERRH_ERR15_SIZE                                  0x1
#define _ADERRH_ERR15_LENGTH                                0x1
#define _ADERRH_ERR15_MASK                                  0x80

// Register: ADSTPT
#define ADSTPT ADSTPT
extern volatile unsigned short          ADSTPT              __at(0x3EE4);
#ifndef _LIB_BUILD
asm("ADSTPT equ 03EE4h");
#endif

// Register: ADSTPTL
#define ADSTPTL ADSTPTL
extern volatile unsigned char           ADSTPTL             __at(0x3EE4);
#ifndef _LIB_BUILD
asm("ADSTPTL equ 03EE4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned STPT                   :8;
    };
    struct {
        unsigned ADSTPT0                :1;
        unsigned ADSTPT1                :1;
        unsigned ADSTPT2                :1;
        unsigned ADSTPT3                :1;
        unsigned ADSTPT4                :1;
        unsigned ADSTPT5                :1;
        unsigned ADSTPT6                :1;
        unsigned ADSTPT7                :1;
    };
    struct {
        unsigned ADSTPT                 :8;
    };
    struct {
        unsigned STPT0                  :1;
        unsigned STPT1                  :1;
        unsigned STPT2                  :1;
        unsigned STPT3                  :1;
        unsigned STPT4                  :1;
        unsigned STPT5                  :1;
        unsigned STPT6                  :1;
        unsigned STPT7                  :1;
    };
} ADSTPTLbits_t;
extern volatile ADSTPTLbits_t ADSTPTLbits __at(0x3EE4);
// bitfield macros
#define _ADSTPTL_STPT_POSN                                  0x0
#define _ADSTPTL_STPT_POSITION                              0x0
#define _ADSTPTL_STPT_SIZE                                  0x8
#define _ADSTPTL_STPT_LENGTH                                0x8
#define _ADSTPTL_STPT_MASK                                  0xFF
#define _ADSTPTL_ADSTPT0_POSN                               0x0
#define _ADSTPTL_ADSTPT0_POSITION                           0x0
#define _ADSTPTL_ADSTPT0_SIZE                               0x1
#define _ADSTPTL_ADSTPT0_LENGTH                             0x1
#define _ADSTPTL_ADSTPT0_MASK                               0x1
#define _ADSTPTL_ADSTPT1_POSN                               0x1
#define _ADSTPTL_ADSTPT1_POSITION                           0x1
#define _ADSTPTL_ADSTPT1_SIZE                               0x1
#define _ADSTPTL_ADSTPT1_LENGTH                             0x1
#define _ADSTPTL_ADSTPT1_MASK                               0x2
#define _ADSTPTL_ADSTPT2_POSN                               0x2
#define _ADSTPTL_ADSTPT2_POSITION                           0x2
#define _ADSTPTL_ADSTPT2_SIZE                               0x1
#define _ADSTPTL_ADSTPT2_LENGTH                             0x1
#define _ADSTPTL_ADSTPT2_MASK                               0x4
#define _ADSTPTL_ADSTPT3_POSN                               0x3
#define _ADSTPTL_ADSTPT3_POSITION                           0x3
#define _ADSTPTL_ADSTPT3_SIZE                               0x1
#define _ADSTPTL_ADSTPT3_LENGTH                             0x1
#define _ADSTPTL_ADSTPT3_MASK                               0x8
#define _ADSTPTL_ADSTPT4_POSN                               0x4
#define _ADSTPTL_ADSTPT4_POSITION                           0x4
#define _ADSTPTL_ADSTPT4_SIZE                               0x1
#define _ADSTPTL_ADSTPT4_LENGTH                             0x1
#define _ADSTPTL_ADSTPT4_MASK                               0x10
#define _ADSTPTL_ADSTPT5_POSN                               0x5
#define _ADSTPTL_ADSTPT5_POSITION                           0x5
#define _ADSTPTL_ADSTPT5_SIZE                               0x1
#define _ADSTPTL_ADSTPT5_LENGTH                             0x1
#define _ADSTPTL_ADSTPT5_MASK                               0x20
#define _ADSTPTL_ADSTPT6_POSN                               0x6
#define _ADSTPTL_ADSTPT6_POSITION                           0x6
#define _ADSTPTL_ADSTPT6_SIZE                               0x1
#define _ADSTPTL_ADSTPT6_LENGTH                             0x1
#define _ADSTPTL_ADSTPT6_MASK                               0x40
#define _ADSTPTL_ADSTPT7_POSN                               0x7
#define _ADSTPTL_ADSTPT7_POSITION                           0x7
#define _ADSTPTL_ADSTPT7_SIZE                               0x1
#define _ADSTPTL_ADSTPT7_LENGTH                             0x1
#define _ADSTPTL_ADSTPT7_MASK                               0x80
#define _ADSTPTL_ADSTPT_POSN                                0x0
#define _ADSTPTL_ADSTPT_POSITION                            0x0
#define _ADSTPTL_ADSTPT_SIZE                                0x8
#define _ADSTPTL_ADSTPT_LENGTH                              0x8
#define _ADSTPTL_ADSTPT_MASK                                0xFF
#define _ADSTPTL_STPT0_POSN                                 0x0
#define _ADSTPTL_STPT0_POSITION                             0x0
#define _ADSTPTL_STPT0_SIZE                                 0x1
#define _ADSTPTL_STPT0_LENGTH                               0x1
#define _ADSTPTL_STPT0_MASK                                 0x1
#define _ADSTPTL_STPT1_POSN                                 0x1
#define _ADSTPTL_STPT1_POSITION                             0x1
#define _ADSTPTL_STPT1_SIZE                                 0x1
#define _ADSTPTL_STPT1_LENGTH                               0x1
#define _ADSTPTL_STPT1_MASK                                 0x2
#define _ADSTPTL_STPT2_POSN                                 0x2
#define _ADSTPTL_STPT2_POSITION                             0x2
#define _ADSTPTL_STPT2_SIZE                                 0x1
#define _ADSTPTL_STPT2_LENGTH                               0x1
#define _ADSTPTL_STPT2_MASK                                 0x4
#define _ADSTPTL_STPT3_POSN                                 0x3
#define _ADSTPTL_STPT3_POSITION                             0x3
#define _ADSTPTL_STPT3_SIZE                                 0x1
#define _ADSTPTL_STPT3_LENGTH                               0x1
#define _ADSTPTL_STPT3_MASK                                 0x8
#define _ADSTPTL_STPT4_POSN                                 0x4
#define _ADSTPTL_STPT4_POSITION                             0x4
#define _ADSTPTL_STPT4_SIZE                                 0x1
#define _ADSTPTL_STPT4_LENGTH                               0x1
#define _ADSTPTL_STPT4_MASK                                 0x10
#define _ADSTPTL_STPT5_POSN                                 0x5
#define _ADSTPTL_STPT5_POSITION                             0x5
#define _ADSTPTL_STPT5_SIZE                                 0x1
#define _ADSTPTL_STPT5_LENGTH                               0x1
#define _ADSTPTL_STPT5_MASK                                 0x20
#define _ADSTPTL_STPT6_POSN                                 0x6
#define _ADSTPTL_STPT6_POSITION                             0x6
#define _ADSTPTL_STPT6_SIZE                                 0x1
#define _ADSTPTL_STPT6_LENGTH                               0x1
#define _ADSTPTL_STPT6_MASK                                 0x40
#define _ADSTPTL_STPT7_POSN                                 0x7
#define _ADSTPTL_STPT7_POSITION                             0x7
#define _ADSTPTL_STPT7_SIZE                                 0x1
#define _ADSTPTL_STPT7_LENGTH                               0x1
#define _ADSTPTL_STPT7_MASK                                 0x80

// Register: ADSTPTH
#define ADSTPTH ADSTPTH
extern volatile unsigned char           ADSTPTH             __at(0x3EE5);
#ifndef _LIB_BUILD
asm("ADSTPTH equ 03EE5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned STPT                   :8;
    };
    struct {
        unsigned ADSTPT8                :1;
        unsigned ADSTPT9                :1;
        unsigned ADSTPT10               :1;
        unsigned ADSTPT11               :1;
        unsigned ADSTPT12               :1;
        unsigned ADSTPT13               :1;
        unsigned ADSTPT14               :1;
        unsigned ADSTPT15               :1;
    };
    struct {
        unsigned ADSTPT                 :8;
    };
    struct {
        unsigned STPT8                  :1;
        unsigned STPT9                  :1;
        unsigned STPT10                 :1;
        unsigned STPT11                 :1;
        unsigned STPT12                 :1;
        unsigned STPT13                 :1;
        unsigned STPT15                 :1;
        unsigned STPT16                 :1;
    };
} ADSTPTHbits_t;
extern volatile ADSTPTHbits_t ADSTPTHbits __at(0x3EE5);
// bitfield macros
#define _ADSTPTH_STPT_POSN                                  0x0
#define _ADSTPTH_STPT_POSITION                              0x0
#define _ADSTPTH_STPT_SIZE                                  0x8
#define _ADSTPTH_STPT_LENGTH                                0x8
#define _ADSTPTH_STPT_MASK                                  0xFF
#define _ADSTPTH_ADSTPT8_POSN                               0x0
#define _ADSTPTH_ADSTPT8_POSITION                           0x0
#define _ADSTPTH_ADSTPT8_SIZE                               0x1
#define _ADSTPTH_ADSTPT8_LENGTH                             0x1
#define _ADSTPTH_ADSTPT8_MASK                               0x1
#define _ADSTPTH_ADSTPT9_POSN                               0x1
#define _ADSTPTH_ADSTPT9_POSITION                           0x1
#define _ADSTPTH_ADSTPT9_SIZE                               0x1
#define _ADSTPTH_ADSTPT9_LENGTH                             0x1
#define _ADSTPTH_ADSTPT9_MASK                               0x2
#define _ADSTPTH_ADSTPT10_POSN                              0x2
#define _ADSTPTH_ADSTPT10_POSITION                          0x2
#define _ADSTPTH_ADSTPT10_SIZE                              0x1
#define _ADSTPTH_ADSTPT10_LENGTH                            0x1
#define _ADSTPTH_ADSTPT10_MASK                              0x4
#define _ADSTPTH_ADSTPT11_POSN                              0x3
#define _ADSTPTH_ADSTPT11_POSITION                          0x3
#define _ADSTPTH_ADSTPT11_SIZE                              0x1
#define _ADSTPTH_ADSTPT11_LENGTH                            0x1
#define _ADSTPTH_ADSTPT11_MASK                              0x8
#define _ADSTPTH_ADSTPT12_POSN                              0x4
#define _ADSTPTH_ADSTPT12_POSITION                          0x4
#define _ADSTPTH_ADSTPT12_SIZE                              0x1
#define _ADSTPTH_ADSTPT12_LENGTH                            0x1
#define _ADSTPTH_ADSTPT12_MASK                              0x10
#define _ADSTPTH_ADSTPT13_POSN                              0x5
#define _ADSTPTH_ADSTPT13_POSITION                          0x5
#define _ADSTPTH_ADSTPT13_SIZE                              0x1
#define _ADSTPTH_ADSTPT13_LENGTH                            0x1
#define _ADSTPTH_ADSTPT13_MASK                              0x20
#define _ADSTPTH_ADSTPT14_POSN                              0x6
#define _ADSTPTH_ADSTPT14_POSITION                          0x6
#define _ADSTPTH_ADSTPT14_SIZE                              0x1
#define _ADSTPTH_ADSTPT14_LENGTH                            0x1
#define _ADSTPTH_ADSTPT14_MASK                              0x40
#define _ADSTPTH_ADSTPT15_POSN                              0x7
#define _ADSTPTH_ADSTPT15_POSITION                          0x7
#define _ADSTPTH_ADSTPT15_SIZE                              0x1
#define _ADSTPTH_ADSTPT15_LENGTH                            0x1
#define _ADSTPTH_ADSTPT15_MASK                              0x80
#define _ADSTPTH_ADSTPT_POSN                                0x0
#define _ADSTPTH_ADSTPT_POSITION                            0x0
#define _ADSTPTH_ADSTPT_SIZE                                0x8
#define _ADSTPTH_ADSTPT_LENGTH                              0x8
#define _ADSTPTH_ADSTPT_MASK                                0xFF
#define _ADSTPTH_STPT8_POSN                                 0x0
#define _ADSTPTH_STPT8_POSITION                             0x0
#define _ADSTPTH_STPT8_SIZE                                 0x1
#define _ADSTPTH_STPT8_LENGTH                               0x1
#define _ADSTPTH_STPT8_MASK                                 0x1
#define _ADSTPTH_STPT9_POSN                                 0x1
#define _ADSTPTH_STPT9_POSITION                             0x1
#define _ADSTPTH_STPT9_SIZE                                 0x1
#define _ADSTPTH_STPT9_LENGTH                               0x1
#define _ADSTPTH_STPT9_MASK                                 0x2
#define _ADSTPTH_STPT10_POSN                                0x2
#define _ADSTPTH_STPT10_POSITION                            0x2
#define _ADSTPTH_STPT10_SIZE                                0x1
#define _ADSTPTH_STPT10_LENGTH                              0x1
#define _ADSTPTH_STPT10_MASK                                0x4
#define _ADSTPTH_STPT11_POSN                                0x3
#define _ADSTPTH_STPT11_POSITION                            0x3
#define _ADSTPTH_STPT11_SIZE                                0x1
#define _ADSTPTH_STPT11_LENGTH                              0x1
#define _ADSTPTH_STPT11_MASK                                0x8
#define _ADSTPTH_STPT12_POSN                                0x4
#define _ADSTPTH_STPT12_POSITION                            0x4
#define _ADSTPTH_STPT12_SIZE                                0x1
#define _ADSTPTH_STPT12_LENGTH                              0x1
#define _ADSTPTH_STPT12_MASK                                0x10
#define _ADSTPTH_STPT13_POSN                                0x5
#define _ADSTPTH_STPT13_POSITION                            0x5
#define _ADSTPTH_STPT13_SIZE                                0x1
#define _ADSTPTH_STPT13_LENGTH                              0x1
#define _ADSTPTH_STPT13_MASK                                0x20
#define _ADSTPTH_STPT15_POSN                                0x6
#define _ADSTPTH_STPT15_POSITION                            0x6
#define _ADSTPTH_STPT15_SIZE                                0x1
#define _ADSTPTH_STPT15_LENGTH                              0x1
#define _ADSTPTH_STPT15_MASK                                0x40
#define _ADSTPTH_STPT16_POSN                                0x7
#define _ADSTPTH_STPT16_POSITION                            0x7
#define _ADSTPTH_STPT16_SIZE                                0x1
#define _ADSTPTH_STPT16_LENGTH                              0x1
#define _ADSTPTH_STPT16_MASK                                0x80

// Register: ADFLTR
#define ADFLTR ADFLTR
extern volatile unsigned short          ADFLTR              __at(0x3EE6);
#ifndef _LIB_BUILD
asm("ADFLTR equ 03EE6h");
#endif

// Register: ADFLTRL
#define ADFLTRL ADFLTRL
extern volatile unsigned char           ADFLTRL             __at(0x3EE6);
#ifndef _LIB_BUILD
asm("ADFLTRL equ 03EE6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FLTR                   :8;
    };
    struct {
        unsigned ADFLTR0                :1;
        unsigned ADFLTR1                :1;
        unsigned ADFLTR2                :1;
        unsigned ADFLTR3                :1;
        unsigned ADFLTR4                :1;
        unsigned ADFLTR5                :1;
        unsigned ADFLTR6                :1;
        unsigned ADFLTR7                :1;
    };
    struct {
        unsigned ADFLTR                 :8;
    };
    struct {
        unsigned FLTR0                  :1;
        unsigned FLTR1                  :1;
        unsigned FLTR2                  :1;
        unsigned FLTR3                  :1;
        unsigned FLTR4                  :1;
        unsigned FLTR5                  :1;
        unsigned FLTR6                  :1;
        unsigned FLTR7                  :1;
    };
} ADFLTRLbits_t;
extern volatile ADFLTRLbits_t ADFLTRLbits __at(0x3EE6);
// bitfield macros
#define _ADFLTRL_FLTR_POSN                                  0x0
#define _ADFLTRL_FLTR_POSITION                              0x0
#define _ADFLTRL_FLTR_SIZE                                  0x8
#define _ADFLTRL_FLTR_LENGTH                                0x8
#define _ADFLTRL_FLTR_MASK                                  0xFF
#define _ADFLTRL_ADFLTR0_POSN                               0x0
#define _ADFLTRL_ADFLTR0_POSITION                           0x0
#define _ADFLTRL_ADFLTR0_SIZE                               0x1
#define _ADFLTRL_ADFLTR0_LENGTH                             0x1
#define _ADFLTRL_ADFLTR0_MASK                               0x1
#define _ADFLTRL_ADFLTR1_POSN                               0x1
#define _ADFLTRL_ADFLTR1_POSITION                           0x1
#define _ADFLTRL_ADFLTR1_SIZE                               0x1
#define _ADFLTRL_ADFLTR1_LENGTH                             0x1
#define _ADFLTRL_ADFLTR1_MASK                               0x2
#define _ADFLTRL_ADFLTR2_POSN                               0x2
#define _ADFLTRL_ADFLTR2_POSITION                           0x2
#define _ADFLTRL_ADFLTR2_SIZE                               0x1
#define _ADFLTRL_ADFLTR2_LENGTH                             0x1
#define _ADFLTRL_ADFLTR2_MASK                               0x4
#define _ADFLTRL_ADFLTR3_POSN                               0x3
#define _ADFLTRL_ADFLTR3_POSITION                           0x3
#define _ADFLTRL_ADFLTR3_SIZE                               0x1
#define _ADFLTRL_ADFLTR3_LENGTH                             0x1
#define _ADFLTRL_ADFLTR3_MASK                               0x8
#define _ADFLTRL_ADFLTR4_POSN                               0x4
#define _ADFLTRL_ADFLTR4_POSITION                           0x4
#define _ADFLTRL_ADFLTR4_SIZE                               0x1
#define _ADFLTRL_ADFLTR4_LENGTH                             0x1
#define _ADFLTRL_ADFLTR4_MASK                               0x10
#define _ADFLTRL_ADFLTR5_POSN                               0x5
#define _ADFLTRL_ADFLTR5_POSITION                           0x5
#define _ADFLTRL_ADFLTR5_SIZE                               0x1
#define _ADFLTRL_ADFLTR5_LENGTH                             0x1
#define _ADFLTRL_ADFLTR5_MASK                               0x20
#define _ADFLTRL_ADFLTR6_POSN                               0x6
#define _ADFLTRL_ADFLTR6_POSITION                           0x6
#define _ADFLTRL_ADFLTR6_SIZE                               0x1
#define _ADFLTRL_ADFLTR6_LENGTH                             0x1
#define _ADFLTRL_ADFLTR6_MASK                               0x40
#define _ADFLTRL_ADFLTR7_POSN                               0x7
#define _ADFLTRL_ADFLTR7_POSITION                           0x7
#define _ADFLTRL_ADFLTR7_SIZE                               0x1
#define _ADFLTRL_ADFLTR7_LENGTH                             0x1
#define _ADFLTRL_ADFLTR7_MASK                               0x80
#define _ADFLTRL_ADFLTR_POSN                                0x0
#define _ADFLTRL_ADFLTR_POSITION                            0x0
#define _ADFLTRL_ADFLTR_SIZE                                0x8
#define _ADFLTRL_ADFLTR_LENGTH                              0x8
#define _ADFLTRL_ADFLTR_MASK                                0xFF
#define _ADFLTRL_FLTR0_POSN                                 0x0
#define _ADFLTRL_FLTR0_POSITION                             0x0
#define _ADFLTRL_FLTR0_SIZE                                 0x1
#define _ADFLTRL_FLTR0_LENGTH                               0x1
#define _ADFLTRL_FLTR0_MASK                                 0x1
#define _ADFLTRL_FLTR1_POSN                                 0x1
#define _ADFLTRL_FLTR1_POSITION                             0x1
#define _ADFLTRL_FLTR1_SIZE                                 0x1
#define _ADFLTRL_FLTR1_LENGTH                               0x1
#define _ADFLTRL_FLTR1_MASK                                 0x2
#define _ADFLTRL_FLTR2_POSN                                 0x2
#define _ADFLTRL_FLTR2_POSITION                             0x2
#define _ADFLTRL_FLTR2_SIZE                                 0x1
#define _ADFLTRL_FLTR2_LENGTH                               0x1
#define _ADFLTRL_FLTR2_MASK                                 0x4
#define _ADFLTRL_FLTR3_POSN                                 0x3
#define _ADFLTRL_FLTR3_POSITION                             0x3
#define _ADFLTRL_FLTR3_SIZE                                 0x1
#define _ADFLTRL_FLTR3_LENGTH                               0x1
#define _ADFLTRL_FLTR3_MASK                                 0x8
#define _ADFLTRL_FLTR4_POSN                                 0x4
#define _ADFLTRL_FLTR4_POSITION                             0x4
#define _ADFLTRL_FLTR4_SIZE                                 0x1
#define _ADFLTRL_FLTR4_LENGTH                               0x1
#define _ADFLTRL_FLTR4_MASK                                 0x10
#define _ADFLTRL_FLTR5_POSN                                 0x5
#define _ADFLTRL_FLTR5_POSITION                             0x5
#define _ADFLTRL_FLTR5_SIZE                                 0x1
#define _ADFLTRL_FLTR5_LENGTH                               0x1
#define _ADFLTRL_FLTR5_MASK                                 0x20
#define _ADFLTRL_FLTR6_POSN                                 0x6
#define _ADFLTRL_FLTR6_POSITION                             0x6
#define _ADFLTRL_FLTR6_SIZE                                 0x1
#define _ADFLTRL_FLTR6_LENGTH                               0x1
#define _ADFLTRL_FLTR6_MASK                                 0x40
#define _ADFLTRL_FLTR7_POSN                                 0x7
#define _ADFLTRL_FLTR7_POSITION                             0x7
#define _ADFLTRL_FLTR7_SIZE                                 0x1
#define _ADFLTRL_FLTR7_LENGTH                               0x1
#define _ADFLTRL_FLTR7_MASK                                 0x80

// Register: ADFLTRH
#define ADFLTRH ADFLTRH
extern volatile unsigned char           ADFLTRH             __at(0x3EE7);
#ifndef _LIB_BUILD
asm("ADFLTRH equ 03EE7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FLTR                   :8;
    };
    struct {
        unsigned ADFLTR8                :1;
        unsigned ADFLTR9                :1;
        unsigned ADFLTR10               :1;
        unsigned ADFLTR11               :1;
        unsigned ADFLTR12               :1;
        unsigned ADFLTR13               :1;
        unsigned ADFLTR14               :1;
        unsigned ADFLTR15               :1;
    };
    struct {
        unsigned ADFLTR                 :8;
    };
    struct {
        unsigned FLTR8                  :1;
        unsigned FLTR9                  :1;
        unsigned FLTR10                 :1;
        unsigned FLTR11                 :1;
        unsigned FLTR12                 :1;
        unsigned FLTR13                 :1;
        unsigned FLTR14                 :1;
        unsigned FLTR15                 :1;
    };
} ADFLTRHbits_t;
extern volatile ADFLTRHbits_t ADFLTRHbits __at(0x3EE7);
// bitfield macros
#define _ADFLTRH_FLTR_POSN                                  0x0
#define _ADFLTRH_FLTR_POSITION                              0x0
#define _ADFLTRH_FLTR_SIZE                                  0x8
#define _ADFLTRH_FLTR_LENGTH                                0x8
#define _ADFLTRH_FLTR_MASK                                  0xFF
#define _ADFLTRH_ADFLTR8_POSN                               0x0
#define _ADFLTRH_ADFLTR8_POSITION                           0x0
#define _ADFLTRH_ADFLTR8_SIZE                               0x1
#define _ADFLTRH_ADFLTR8_LENGTH                             0x1
#define _ADFLTRH_ADFLTR8_MASK                               0x1
#define _ADFLTRH_ADFLTR9_POSN                               0x1
#define _ADFLTRH_ADFLTR9_POSITION                           0x1
#define _ADFLTRH_ADFLTR9_SIZE                               0x1
#define _ADFLTRH_ADFLTR9_LENGTH                             0x1
#define _ADFLTRH_ADFLTR9_MASK                               0x2
#define _ADFLTRH_ADFLTR10_POSN                              0x2
#define _ADFLTRH_ADFLTR10_POSITION                          0x2
#define _ADFLTRH_ADFLTR10_SIZE                              0x1
#define _ADFLTRH_ADFLTR10_LENGTH                            0x1
#define _ADFLTRH_ADFLTR10_MASK                              0x4
#define _ADFLTRH_ADFLTR11_POSN                              0x3
#define _ADFLTRH_ADFLTR11_POSITION                          0x3
#define _ADFLTRH_ADFLTR11_SIZE                              0x1
#define _ADFLTRH_ADFLTR11_LENGTH                            0x1
#define _ADFLTRH_ADFLTR11_MASK                              0x8
#define _ADFLTRH_ADFLTR12_POSN                              0x4
#define _ADFLTRH_ADFLTR12_POSITION                          0x4
#define _ADFLTRH_ADFLTR12_SIZE                              0x1
#define _ADFLTRH_ADFLTR12_LENGTH                            0x1
#define _ADFLTRH_ADFLTR12_MASK                              0x10
#define _ADFLTRH_ADFLTR13_POSN                              0x5
#define _ADFLTRH_ADFLTR13_POSITION                          0x5
#define _ADFLTRH_ADFLTR13_SIZE                              0x1
#define _ADFLTRH_ADFLTR13_LENGTH                            0x1
#define _ADFLTRH_ADFLTR13_MASK                              0x20
#define _ADFLTRH_ADFLTR14_POSN                              0x6
#define _ADFLTRH_ADFLTR14_POSITION                          0x6
#define _ADFLTRH_ADFLTR14_SIZE                              0x1
#define _ADFLTRH_ADFLTR14_LENGTH                            0x1
#define _ADFLTRH_ADFLTR14_MASK                              0x40
#define _ADFLTRH_ADFLTR15_POSN                              0x7
#define _ADFLTRH_ADFLTR15_POSITION                          0x7
#define _ADFLTRH_ADFLTR15_SIZE                              0x1
#define _ADFLTRH_ADFLTR15_LENGTH                            0x1
#define _ADFLTRH_ADFLTR15_MASK                              0x80
#define _ADFLTRH_ADFLTR_POSN                                0x0
#define _ADFLTRH_ADFLTR_POSITION                            0x0
#define _ADFLTRH_ADFLTR_SIZE                                0x8
#define _ADFLTRH_ADFLTR_LENGTH                              0x8
#define _ADFLTRH_ADFLTR_MASK                                0xFF
#define _ADFLTRH_FLTR8_POSN                                 0x0
#define _ADFLTRH_FLTR8_POSITION                             0x0
#define _ADFLTRH_FLTR8_SIZE                                 0x1
#define _ADFLTRH_FLTR8_LENGTH                               0x1
#define _ADFLTRH_FLTR8_MASK                                 0x1
#define _ADFLTRH_FLTR9_POSN                                 0x1
#define _ADFLTRH_FLTR9_POSITION                             0x1
#define _ADFLTRH_FLTR9_SIZE                                 0x1
#define _ADFLTRH_FLTR9_LENGTH                               0x1
#define _ADFLTRH_FLTR9_MASK                                 0x2
#define _ADFLTRH_FLTR10_POSN                                0x2
#define _ADFLTRH_FLTR10_POSITION                            0x2
#define _ADFLTRH_FLTR10_SIZE                                0x1
#define _ADFLTRH_FLTR10_LENGTH                              0x1
#define _ADFLTRH_FLTR10_MASK                                0x4
#define _ADFLTRH_FLTR11_POSN                                0x3
#define _ADFLTRH_FLTR11_POSITION                            0x3
#define _ADFLTRH_FLTR11_SIZE                                0x1
#define _ADFLTRH_FLTR11_LENGTH                              0x1
#define _ADFLTRH_FLTR11_MASK                                0x8
#define _ADFLTRH_FLTR12_POSN                                0x4
#define _ADFLTRH_FLTR12_POSITION                            0x4
#define _ADFLTRH_FLTR12_SIZE                                0x1
#define _ADFLTRH_FLTR12_LENGTH                              0x1
#define _ADFLTRH_FLTR12_MASK                                0x10
#define _ADFLTRH_FLTR13_POSN                                0x5
#define _ADFLTRH_FLTR13_POSITION                            0x5
#define _ADFLTRH_FLTR13_SIZE                                0x1
#define _ADFLTRH_FLTR13_LENGTH                              0x1
#define _ADFLTRH_FLTR13_MASK                                0x20
#define _ADFLTRH_FLTR14_POSN                                0x6
#define _ADFLTRH_FLTR14_POSITION                            0x6
#define _ADFLTRH_FLTR14_SIZE                                0x1
#define _ADFLTRH_FLTR14_LENGTH                              0x1
#define _ADFLTRH_FLTR14_MASK                                0x40
#define _ADFLTRH_FLTR15_POSN                                0x7
#define _ADFLTRH_FLTR15_POSITION                            0x7
#define _ADFLTRH_FLTR15_SIZE                                0x1
#define _ADFLTRH_FLTR15_LENGTH                              0x1
#define _ADFLTRH_FLTR15_MASK                                0x80

// Register: ADACC
#define ADACC ADACC
#ifndef __CCI__
extern volatile __uint24                ADACC               __at(0x3EE8);
#endif
#ifndef _LIB_BUILD
asm("ADACC equ 03EE8h");
#endif

// Register: ADACCL
#define ADACCL ADACCL
extern volatile unsigned char           ADACCL              __at(0x3EE8);
#ifndef _LIB_BUILD
asm("ADACCL equ 03EE8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ACC                    :8;
    };
    struct {
        unsigned ADACC0                 :1;
        unsigned ADACC1                 :1;
        unsigned ADACC2                 :1;
        unsigned ADACC3                 :1;
        unsigned ADACC4                 :1;
        unsigned ADACC5                 :1;
        unsigned ADACC6                 :1;
        unsigned ADACC7                 :1;
    };
    struct {
        unsigned ADACC                  :8;
    };
    struct {
        unsigned ACC0                   :1;
        unsigned ACC1                   :1;
        unsigned ACC2                   :1;
        unsigned ACC3                   :1;
        unsigned ACC4                   :1;
        unsigned ACC5                   :1;
        unsigned ACC6                   :1;
        unsigned ACC7                   :1;
    };
} ADACCLbits_t;
extern volatile ADACCLbits_t ADACCLbits __at(0x3EE8);
// bitfield macros
#define _ADACCL_ACC_POSN                                    0x0
#define _ADACCL_ACC_POSITION                                0x0
#define _ADACCL_ACC_SIZE                                    0x8
#define _ADACCL_ACC_LENGTH                                  0x8
#define _ADACCL_ACC_MASK                                    0xFF
#define _ADACCL_ADACC0_POSN                                 0x0
#define _ADACCL_ADACC0_POSITION                             0x0
#define _ADACCL_ADACC0_SIZE                                 0x1
#define _ADACCL_ADACC0_LENGTH                               0x1
#define _ADACCL_ADACC0_MASK                                 0x1
#define _ADACCL_ADACC1_POSN                                 0x1
#define _ADACCL_ADACC1_POSITION                             0x1
#define _ADACCL_ADACC1_SIZE                                 0x1
#define _ADACCL_ADACC1_LENGTH                               0x1
#define _ADACCL_ADACC1_MASK                                 0x2
#define _ADACCL_ADACC2_POSN                                 0x2
#define _ADACCL_ADACC2_POSITION                             0x2
#define _ADACCL_ADACC2_SIZE                                 0x1
#define _ADACCL_ADACC2_LENGTH                               0x1
#define _ADACCL_ADACC2_MASK                                 0x4
#define _ADACCL_ADACC3_POSN                                 0x3
#define _ADACCL_ADACC3_POSITION                             0x3
#define _ADACCL_ADACC3_SIZE                                 0x1
#define _ADACCL_ADACC3_LENGTH                               0x1
#define _ADACCL_ADACC3_MASK                                 0x8
#define _ADACCL_ADACC4_POSN                                 0x4
#define _ADACCL_ADACC4_POSITION                             0x4
#define _ADACCL_ADACC4_SIZE                                 0x1
#define _ADACCL_ADACC4_LENGTH                               0x1
#define _ADACCL_ADACC4_MASK                                 0x10
#define _ADACCL_ADACC5_POSN                                 0x5
#define _ADACCL_ADACC5_POSITION                             0x5
#define _ADACCL_ADACC5_SIZE                                 0x1
#define _ADACCL_ADACC5_LENGTH                               0x1
#define _ADACCL_ADACC5_MASK                                 0x20
#define _ADACCL_ADACC6_POSN                                 0x6
#define _ADACCL_ADACC6_POSITION                             0x6
#define _ADACCL_ADACC6_SIZE                                 0x1
#define _ADACCL_ADACC6_LENGTH                               0x1
#define _ADACCL_ADACC6_MASK                                 0x40
#define _ADACCL_ADACC7_POSN                                 0x7
#define _ADACCL_ADACC7_POSITION                             0x7
#define _ADACCL_ADACC7_SIZE                                 0x1
#define _ADACCL_ADACC7_LENGTH                               0x1
#define _ADACCL_ADACC7_MASK                                 0x80
#define _ADACCL_ADACC_POSN                                  0x0
#define _ADACCL_ADACC_POSITION                              0x0
#define _ADACCL_ADACC_SIZE                                  0x8
#define _ADACCL_ADACC_LENGTH                                0x8
#define _ADACCL_ADACC_MASK                                  0xFF
#define _ADACCL_ACC0_POSN                                   0x0
#define _ADACCL_ACC0_POSITION                               0x0
#define _ADACCL_ACC0_SIZE                                   0x1
#define _ADACCL_ACC0_LENGTH                                 0x1
#define _ADACCL_ACC0_MASK                                   0x1
#define _ADACCL_ACC1_POSN                                   0x1
#define _ADACCL_ACC1_POSITION                               0x1
#define _ADACCL_ACC1_SIZE                                   0x1
#define _ADACCL_ACC1_LENGTH                                 0x1
#define _ADACCL_ACC1_MASK                                   0x2
#define _ADACCL_ACC2_POSN                                   0x2
#define _ADACCL_ACC2_POSITION                               0x2
#define _ADACCL_ACC2_SIZE                                   0x1
#define _ADACCL_ACC2_LENGTH                                 0x1
#define _ADACCL_ACC2_MASK                                   0x4
#define _ADACCL_ACC3_POSN                                   0x3
#define _ADACCL_ACC3_POSITION                               0x3
#define _ADACCL_ACC3_SIZE                                   0x1
#define _ADACCL_ACC3_LENGTH                                 0x1
#define _ADACCL_ACC3_MASK                                   0x8
#define _ADACCL_ACC4_POSN                                   0x4
#define _ADACCL_ACC4_POSITION                               0x4
#define _ADACCL_ACC4_SIZE                                   0x1
#define _ADACCL_ACC4_LENGTH                                 0x1
#define _ADACCL_ACC4_MASK                                   0x10
#define _ADACCL_ACC5_POSN                                   0x5
#define _ADACCL_ACC5_POSITION                               0x5
#define _ADACCL_ACC5_SIZE                                   0x1
#define _ADACCL_ACC5_LENGTH                                 0x1
#define _ADACCL_ACC5_MASK                                   0x20
#define _ADACCL_ACC6_POSN                                   0x6
#define _ADACCL_ACC6_POSITION                               0x6
#define _ADACCL_ACC6_SIZE                                   0x1
#define _ADACCL_ACC6_LENGTH                                 0x1
#define _ADACCL_ACC6_MASK                                   0x40
#define _ADACCL_ACC7_POSN                                   0x7
#define _ADACCL_ACC7_POSITION                               0x7
#define _ADACCL_ACC7_SIZE                                   0x1
#define _ADACCL_ACC7_LENGTH                                 0x1
#define _ADACCL_ACC7_MASK                                   0x80

// Register: ADACCH
#define ADACCH ADACCH
extern volatile unsigned char           ADACCH              __at(0x3EE9);
#ifndef _LIB_BUILD
asm("ADACCH equ 03EE9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ACC                    :8;
    };
    struct {
        unsigned ADACC8                 :1;
        unsigned ADACC9                 :1;
        unsigned ADACC10                :1;
        unsigned ADACC11                :1;
        unsigned ADACC12                :1;
        unsigned ADACC13                :1;
        unsigned ADACC14                :1;
        unsigned ADACC15                :1;
    };
    struct {
        unsigned ADACC                  :8;
    };
    struct {
        unsigned ACC8                   :1;
        unsigned ACC9                   :1;
        unsigned ACC10                  :1;
        unsigned ACC11                  :1;
        unsigned ACC12                  :1;
        unsigned ACC13                  :1;
        unsigned ACC14                  :1;
        unsigned ACC15                  :1;
    };
} ADACCHbits_t;
extern volatile ADACCHbits_t ADACCHbits __at(0x3EE9);
// bitfield macros
#define _ADACCH_ACC_POSN                                    0x0
#define _ADACCH_ACC_POSITION                                0x0
#define _ADACCH_ACC_SIZE                                    0x8
#define _ADACCH_ACC_LENGTH                                  0x8
#define _ADACCH_ACC_MASK                                    0xFF
#define _ADACCH_ADACC8_POSN                                 0x0
#define _ADACCH_ADACC8_POSITION                             0x0
#define _ADACCH_ADACC8_SIZE                                 0x1
#define _ADACCH_ADACC8_LENGTH                               0x1
#define _ADACCH_ADACC8_MASK                                 0x1
#define _ADACCH_ADACC9_POSN                                 0x1
#define _ADACCH_ADACC9_POSITION                             0x1
#define _ADACCH_ADACC9_SIZE                                 0x1
#define _ADACCH_ADACC9_LENGTH                               0x1
#define _ADACCH_ADACC9_MASK                                 0x2
#define _ADACCH_ADACC10_POSN                                0x2
#define _ADACCH_ADACC10_POSITION                            0x2
#define _ADACCH_ADACC10_SIZE                                0x1
#define _ADACCH_ADACC10_LENGTH                              0x1
#define _ADACCH_ADACC10_MASK                                0x4
#define _ADACCH_ADACC11_POSN                                0x3
#define _ADACCH_ADACC11_POSITION                            0x3
#define _ADACCH_ADACC11_SIZE                                0x1
#define _ADACCH_ADACC11_LENGTH                              0x1
#define _ADACCH_ADACC11_MASK                                0x8
#define _ADACCH_ADACC12_POSN                                0x4
#define _ADACCH_ADACC12_POSITION                            0x4
#define _ADACCH_ADACC12_SIZE                                0x1
#define _ADACCH_ADACC12_LENGTH                              0x1
#define _ADACCH_ADACC12_MASK                                0x10
#define _ADACCH_ADACC13_POSN                                0x5
#define _ADACCH_ADACC13_POSITION                            0x5
#define _ADACCH_ADACC13_SIZE                                0x1
#define _ADACCH_ADACC13_LENGTH                              0x1
#define _ADACCH_ADACC13_MASK                                0x20
#define _ADACCH_ADACC14_POSN                                0x6
#define _ADACCH_ADACC14_POSITION                            0x6
#define _ADACCH_ADACC14_SIZE                                0x1
#define _ADACCH_ADACC14_LENGTH                              0x1
#define _ADACCH_ADACC14_MASK                                0x40
#define _ADACCH_ADACC15_POSN                                0x7
#define _ADACCH_ADACC15_POSITION                            0x7
#define _ADACCH_ADACC15_SIZE                                0x1
#define _ADACCH_ADACC15_LENGTH                              0x1
#define _ADACCH_ADACC15_MASK                                0x80
#define _ADACCH_ADACC_POSN                                  0x0
#define _ADACCH_ADACC_POSITION                              0x0
#define _ADACCH_ADACC_SIZE                                  0x8
#define _ADACCH_ADACC_LENGTH                                0x8
#define _ADACCH_ADACC_MASK                                  0xFF
#define _ADACCH_ACC8_POSN                                   0x0
#define _ADACCH_ACC8_POSITION                               0x0
#define _ADACCH_ACC8_SIZE                                   0x1
#define _ADACCH_ACC8_LENGTH                                 0x1
#define _ADACCH_ACC8_MASK                                   0x1
#define _ADACCH_ACC9_POSN                                   0x1
#define _ADACCH_ACC9_POSITION                               0x1
#define _ADACCH_ACC9_SIZE                                   0x1
#define _ADACCH_ACC9_LENGTH                                 0x1
#define _ADACCH_ACC9_MASK                                   0x2
#define _ADACCH_ACC10_POSN                                  0x2
#define _ADACCH_ACC10_POSITION                              0x2
#define _ADACCH_ACC10_SIZE                                  0x1
#define _ADACCH_ACC10_LENGTH                                0x1
#define _ADACCH_ACC10_MASK                                  0x4
#define _ADACCH_ACC11_POSN                                  0x3
#define _ADACCH_ACC11_POSITION                              0x3
#define _ADACCH_ACC11_SIZE                                  0x1
#define _ADACCH_ACC11_LENGTH                                0x1
#define _ADACCH_ACC11_MASK                                  0x8
#define _ADACCH_ACC12_POSN                                  0x4
#define _ADACCH_ACC12_POSITION                              0x4
#define _ADACCH_ACC12_SIZE                                  0x1
#define _ADACCH_ACC12_LENGTH                                0x1
#define _ADACCH_ACC12_MASK                                  0x10
#define _ADACCH_ACC13_POSN                                  0x5
#define _ADACCH_ACC13_POSITION                              0x5
#define _ADACCH_ACC13_SIZE                                  0x1
#define _ADACCH_ACC13_LENGTH                                0x1
#define _ADACCH_ACC13_MASK                                  0x20
#define _ADACCH_ACC14_POSN                                  0x6
#define _ADACCH_ACC14_POSITION                              0x6
#define _ADACCH_ACC14_SIZE                                  0x1
#define _ADACCH_ACC14_LENGTH                                0x1
#define _ADACCH_ACC14_MASK                                  0x40
#define _ADACCH_ACC15_POSN                                  0x7
#define _ADACCH_ACC15_POSITION                              0x7
#define _ADACCH_ACC15_SIZE                                  0x1
#define _ADACCH_ACC15_LENGTH                                0x1
#define _ADACCH_ACC15_MASK                                  0x80

// Register: ADACCU
#define ADACCU ADACCU
extern volatile unsigned char           ADACCU              __at(0x3EEA);
#ifndef _LIB_BUILD
asm("ADACCU equ 03EEAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ACC                    :8;
    };
    struct {
        unsigned ADACC16                :1;
        unsigned ADACC17                :1;
        unsigned ADACC18                :1;
        unsigned ADACC19                :1;
        unsigned ADACC20                :1;
        unsigned ADACC21                :1;
        unsigned ADACC22                :1;
        unsigned ADACC23                :1;
    };
    struct {
        unsigned ADACC                  :8;
    };
    struct {
        unsigned ACC16                  :1;
        unsigned ACC17                  :1;
        unsigned ACC18                  :1;
        unsigned ACC19                  :1;
        unsigned ACC20                  :1;
        unsigned ACC21                  :1;
        unsigned ACC22                  :1;
        unsigned ACC23                  :1;
    };
} ADACCUbits_t;
extern volatile ADACCUbits_t ADACCUbits __at(0x3EEA);
// bitfield macros
#define _ADACCU_ACC_POSN                                    0x0
#define _ADACCU_ACC_POSITION                                0x0
#define _ADACCU_ACC_SIZE                                    0x8
#define _ADACCU_ACC_LENGTH                                  0x8
#define _ADACCU_ACC_MASK                                    0xFF
#define _ADACCU_ADACC16_POSN                                0x0
#define _ADACCU_ADACC16_POSITION                            0x0
#define _ADACCU_ADACC16_SIZE                                0x1
#define _ADACCU_ADACC16_LENGTH                              0x1
#define _ADACCU_ADACC16_MASK                                0x1
#define _ADACCU_ADACC17_POSN                                0x1
#define _ADACCU_ADACC17_POSITION                            0x1
#define _ADACCU_ADACC17_SIZE                                0x1
#define _ADACCU_ADACC17_LENGTH                              0x1
#define _ADACCU_ADACC17_MASK                                0x2
#define _ADACCU_ADACC18_POSN                                0x2
#define _ADACCU_ADACC18_POSITION                            0x2
#define _ADACCU_ADACC18_SIZE                                0x1
#define _ADACCU_ADACC18_LENGTH                              0x1
#define _ADACCU_ADACC18_MASK                                0x4
#define _ADACCU_ADACC19_POSN                                0x3
#define _ADACCU_ADACC19_POSITION                            0x3
#define _ADACCU_ADACC19_SIZE                                0x1
#define _ADACCU_ADACC19_LENGTH                              0x1
#define _ADACCU_ADACC19_MASK                                0x8
#define _ADACCU_ADACC20_POSN                                0x4
#define _ADACCU_ADACC20_POSITION                            0x4
#define _ADACCU_ADACC20_SIZE                                0x1
#define _ADACCU_ADACC20_LENGTH                              0x1
#define _ADACCU_ADACC20_MASK                                0x10
#define _ADACCU_ADACC21_POSN                                0x5
#define _ADACCU_ADACC21_POSITION                            0x5
#define _ADACCU_ADACC21_SIZE                                0x1
#define _ADACCU_ADACC21_LENGTH                              0x1
#define _ADACCU_ADACC21_MASK                                0x20
#define _ADACCU_ADACC22_POSN                                0x6
#define _ADACCU_ADACC22_POSITION                            0x6
#define _ADACCU_ADACC22_SIZE                                0x1
#define _ADACCU_ADACC22_LENGTH                              0x1
#define _ADACCU_ADACC22_MASK                                0x40
#define _ADACCU_ADACC23_POSN                                0x7
#define _ADACCU_ADACC23_POSITION                            0x7
#define _ADACCU_ADACC23_SIZE                                0x1
#define _ADACCU_ADACC23_LENGTH                              0x1
#define _ADACCU_ADACC23_MASK                                0x80
#define _ADACCU_ADACC_POSN                                  0x0
#define _ADACCU_ADACC_POSITION                              0x0
#define _ADACCU_ADACC_SIZE                                  0x8
#define _ADACCU_ADACC_LENGTH                                0x8
#define _ADACCU_ADACC_MASK                                  0xFF
#define _ADACCU_ACC16_POSN                                  0x0
#define _ADACCU_ACC16_POSITION                              0x0
#define _ADACCU_ACC16_SIZE                                  0x1
#define _ADACCU_ACC16_LENGTH                                0x1
#define _ADACCU_ACC16_MASK                                  0x1
#define _ADACCU_ACC17_POSN                                  0x1
#define _ADACCU_ACC17_POSITION                              0x1
#define _ADACCU_ACC17_SIZE                                  0x1
#define _ADACCU_ACC17_LENGTH                                0x1
#define _ADACCU_ACC17_MASK                                  0x2
#define _ADACCU_ACC18_POSN                                  0x2
#define _ADACCU_ACC18_POSITION                              0x2
#define _ADACCU_ACC18_SIZE                                  0x1
#define _ADACCU_ACC18_LENGTH                                0x1
#define _ADACCU_ACC18_MASK                                  0x4
#define _ADACCU_ACC19_POSN                                  0x3
#define _ADACCU_ACC19_POSITION                              0x3
#define _ADACCU_ACC19_SIZE                                  0x1
#define _ADACCU_ACC19_LENGTH                                0x1
#define _ADACCU_ACC19_MASK                                  0x8
#define _ADACCU_ACC20_POSN                                  0x4
#define _ADACCU_ACC20_POSITION                              0x4
#define _ADACCU_ACC20_SIZE                                  0x1
#define _ADACCU_ACC20_LENGTH                                0x1
#define _ADACCU_ACC20_MASK                                  0x10
#define _ADACCU_ACC21_POSN                                  0x5
#define _ADACCU_ACC21_POSITION                              0x5
#define _ADACCU_ACC21_SIZE                                  0x1
#define _ADACCU_ACC21_LENGTH                                0x1
#define _ADACCU_ACC21_MASK                                  0x20
#define _ADACCU_ACC22_POSN                                  0x6
#define _ADACCU_ACC22_POSITION                              0x6
#define _ADACCU_ACC22_SIZE                                  0x1
#define _ADACCU_ACC22_LENGTH                                0x1
#define _ADACCU_ACC22_MASK                                  0x40
#define _ADACCU_ACC23_POSN                                  0x7
#define _ADACCU_ACC23_POSITION                              0x7
#define _ADACCU_ACC23_SIZE                                  0x1
#define _ADACCU_ACC23_LENGTH                                0x1
#define _ADACCU_ACC23_MASK                                  0x80

// Register: ADCNT
#define ADCNT ADCNT
extern volatile unsigned char           ADCNT               __at(0x3EEB);
#ifndef _LIB_BUILD
asm("ADCNT equ 03EEBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CNT                    :8;
    };
    struct {
        unsigned ADCNT0                 :1;
        unsigned ADCNT1                 :1;
        unsigned ADCNT2                 :1;
        unsigned ADCNT3                 :1;
        unsigned ADCNT4                 :1;
        unsigned ADCNT5                 :1;
        unsigned ADCNT6                 :1;
        unsigned ADCNT7                 :1;
    };
    struct {
        unsigned ADCNT                  :8;
    };
    struct {
        unsigned CNT0                   :1;
        unsigned CNT1                   :1;
        unsigned CNT2                   :1;
        unsigned CNT3                   :1;
        unsigned CNT4                   :1;
        unsigned CNT5                   :1;
        unsigned CNT6                   :1;
        unsigned CNT7                   :1;
    };
} ADCNTbits_t;
extern volatile ADCNTbits_t ADCNTbits __at(0x3EEB);
// bitfield macros
#define _ADCNT_CNT_POSN                                     0x0
#define _ADCNT_CNT_POSITION                                 0x0
#define _ADCNT_CNT_SIZE                                     0x8
#define _ADCNT_CNT_LENGTH                                   0x8
#define _ADCNT_CNT_MASK                                     0xFF
#define _ADCNT_ADCNT0_POSN                                  0x0
#define _ADCNT_ADCNT0_POSITION                              0x0
#define _ADCNT_ADCNT0_SIZE                                  0x1
#define _ADCNT_ADCNT0_LENGTH                                0x1
#define _ADCNT_ADCNT0_MASK                                  0x1
#define _ADCNT_ADCNT1_POSN                                  0x1
#define _ADCNT_ADCNT1_POSITION                              0x1
#define _ADCNT_ADCNT1_SIZE                                  0x1
#define _ADCNT_ADCNT1_LENGTH                                0x1
#define _ADCNT_ADCNT1_MASK                                  0x2
#define _ADCNT_ADCNT2_POSN                                  0x2
#define _ADCNT_ADCNT2_POSITION                              0x2
#define _ADCNT_ADCNT2_SIZE                                  0x1
#define _ADCNT_ADCNT2_LENGTH                                0x1
#define _ADCNT_ADCNT2_MASK                                  0x4
#define _ADCNT_ADCNT3_POSN                                  0x3
#define _ADCNT_ADCNT3_POSITION                              0x3
#define _ADCNT_ADCNT3_SIZE                                  0x1
#define _ADCNT_ADCNT3_LENGTH                                0x1
#define _ADCNT_ADCNT3_MASK                                  0x8
#define _ADCNT_ADCNT4_POSN                                  0x4
#define _ADCNT_ADCNT4_POSITION                              0x4
#define _ADCNT_ADCNT4_SIZE                                  0x1
#define _ADCNT_ADCNT4_LENGTH                                0x1
#define _ADCNT_ADCNT4_MASK                                  0x10
#define _ADCNT_ADCNT5_POSN                                  0x5
#define _ADCNT_ADCNT5_POSITION                              0x5
#define _ADCNT_ADCNT5_SIZE                                  0x1
#define _ADCNT_ADCNT5_LENGTH                                0x1
#define _ADCNT_ADCNT5_MASK                                  0x20
#define _ADCNT_ADCNT6_POSN                                  0x6
#define _ADCNT_ADCNT6_POSITION                              0x6
#define _ADCNT_ADCNT6_SIZE                                  0x1
#define _ADCNT_ADCNT6_LENGTH                                0x1
#define _ADCNT_ADCNT6_MASK                                  0x40
#define _ADCNT_ADCNT7_POSN                                  0x7
#define _ADCNT_ADCNT7_POSITION                              0x7
#define _ADCNT_ADCNT7_SIZE                                  0x1
#define _ADCNT_ADCNT7_LENGTH                                0x1
#define _ADCNT_ADCNT7_MASK                                  0x80
#define _ADCNT_ADCNT_POSN                                   0x0
#define _ADCNT_ADCNT_POSITION                               0x0
#define _ADCNT_ADCNT_SIZE                                   0x8
#define _ADCNT_ADCNT_LENGTH                                 0x8
#define _ADCNT_ADCNT_MASK                                   0xFF
#define _ADCNT_CNT0_POSN                                    0x0
#define _ADCNT_CNT0_POSITION                                0x0
#define _ADCNT_CNT0_SIZE                                    0x1
#define _ADCNT_CNT0_LENGTH                                  0x1
#define _ADCNT_CNT0_MASK                                    0x1
#define _ADCNT_CNT1_POSN                                    0x1
#define _ADCNT_CNT1_POSITION                                0x1
#define _ADCNT_CNT1_SIZE                                    0x1
#define _ADCNT_CNT1_LENGTH                                  0x1
#define _ADCNT_CNT1_MASK                                    0x2
#define _ADCNT_CNT2_POSN                                    0x2
#define _ADCNT_CNT2_POSITION                                0x2
#define _ADCNT_CNT2_SIZE                                    0x1
#define _ADCNT_CNT2_LENGTH                                  0x1
#define _ADCNT_CNT2_MASK                                    0x4
#define _ADCNT_CNT3_POSN                                    0x3
#define _ADCNT_CNT3_POSITION                                0x3
#define _ADCNT_CNT3_SIZE                                    0x1
#define _ADCNT_CNT3_LENGTH                                  0x1
#define _ADCNT_CNT3_MASK                                    0x8
#define _ADCNT_CNT4_POSN                                    0x4
#define _ADCNT_CNT4_POSITION                                0x4
#define _ADCNT_CNT4_SIZE                                    0x1
#define _ADCNT_CNT4_LENGTH                                  0x1
#define _ADCNT_CNT4_MASK                                    0x10
#define _ADCNT_CNT5_POSN                                    0x5
#define _ADCNT_CNT5_POSITION                                0x5
#define _ADCNT_CNT5_SIZE                                    0x1
#define _ADCNT_CNT5_LENGTH                                  0x1
#define _ADCNT_CNT5_MASK                                    0x20
#define _ADCNT_CNT6_POSN                                    0x6
#define _ADCNT_CNT6_POSITION                                0x6
#define _ADCNT_CNT6_SIZE                                    0x1
#define _ADCNT_CNT6_LENGTH                                  0x1
#define _ADCNT_CNT6_MASK                                    0x40
#define _ADCNT_CNT7_POSN                                    0x7
#define _ADCNT_CNT7_POSITION                                0x7
#define _ADCNT_CNT7_SIZE                                    0x1
#define _ADCNT_CNT7_LENGTH                                  0x1
#define _ADCNT_CNT7_MASK                                    0x80

// Register: ADRPT
#define ADRPT ADRPT
extern volatile unsigned char           ADRPT               __at(0x3EEC);
#ifndef _LIB_BUILD
asm("ADRPT equ 03EECh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RPT                    :8;
    };
    struct {
        unsigned ADRPT0                 :1;
        unsigned ADRPT1                 :1;
        unsigned ADRPT2                 :1;
        unsigned ADRPT3                 :1;
        unsigned ADRPT4                 :1;
        unsigned ADRPT5                 :1;
        unsigned ADRPT6                 :1;
        unsigned ADRPT7                 :1;
    };
    struct {
        unsigned ADRPT                  :8;
    };
    struct {
        unsigned RPT0                   :1;
        unsigned RPT1                   :1;
        unsigned RPT2                   :1;
        unsigned RPT3                   :1;
        unsigned RPT4                   :1;
        unsigned RPT5                   :1;
        unsigned RPT6                   :1;
        unsigned RPT7                   :1;
    };
} ADRPTbits_t;
extern volatile ADRPTbits_t ADRPTbits __at(0x3EEC);
// bitfield macros
#define _ADRPT_RPT_POSN                                     0x0
#define _ADRPT_RPT_POSITION                                 0x0
#define _ADRPT_RPT_SIZE                                     0x8
#define _ADRPT_RPT_LENGTH                                   0x8
#define _ADRPT_RPT_MASK                                     0xFF
#define _ADRPT_ADRPT0_POSN                                  0x0
#define _ADRPT_ADRPT0_POSITION                              0x0
#define _ADRPT_ADRPT0_SIZE                                  0x1
#define _ADRPT_ADRPT0_LENGTH                                0x1
#define _ADRPT_ADRPT0_MASK                                  0x1
#define _ADRPT_ADRPT1_POSN                                  0x1
#define _ADRPT_ADRPT1_POSITION                              0x1
#define _ADRPT_ADRPT1_SIZE                                  0x1
#define _ADRPT_ADRPT1_LENGTH                                0x1
#define _ADRPT_ADRPT1_MASK                                  0x2
#define _ADRPT_ADRPT2_POSN                                  0x2
#define _ADRPT_ADRPT2_POSITION                              0x2
#define _ADRPT_ADRPT2_SIZE                                  0x1
#define _ADRPT_ADRPT2_LENGTH                                0x1
#define _ADRPT_ADRPT2_MASK                                  0x4
#define _ADRPT_ADRPT3_POSN                                  0x3
#define _ADRPT_ADRPT3_POSITION                              0x3
#define _ADRPT_ADRPT3_SIZE                                  0x1
#define _ADRPT_ADRPT3_LENGTH                                0x1
#define _ADRPT_ADRPT3_MASK                                  0x8
#define _ADRPT_ADRPT4_POSN                                  0x4
#define _ADRPT_ADRPT4_POSITION                              0x4
#define _ADRPT_ADRPT4_SIZE                                  0x1
#define _ADRPT_ADRPT4_LENGTH                                0x1
#define _ADRPT_ADRPT4_MASK                                  0x10
#define _ADRPT_ADRPT5_POSN                                  0x5
#define _ADRPT_ADRPT5_POSITION                              0x5
#define _ADRPT_ADRPT5_SIZE                                  0x1
#define _ADRPT_ADRPT5_LENGTH                                0x1
#define _ADRPT_ADRPT5_MASK                                  0x20
#define _ADRPT_ADRPT6_POSN                                  0x6
#define _ADRPT_ADRPT6_POSITION                              0x6
#define _ADRPT_ADRPT6_SIZE                                  0x1
#define _ADRPT_ADRPT6_LENGTH                                0x1
#define _ADRPT_ADRPT6_MASK                                  0x40
#define _ADRPT_ADRPT7_POSN                                  0x7
#define _ADRPT_ADRPT7_POSITION                              0x7
#define _ADRPT_ADRPT7_SIZE                                  0x1
#define _ADRPT_ADRPT7_LENGTH                                0x1
#define _ADRPT_ADRPT7_MASK                                  0x80
#define _ADRPT_ADRPT_POSN                                   0x0
#define _ADRPT_ADRPT_POSITION                               0x0
#define _ADRPT_ADRPT_SIZE                                   0x8
#define _ADRPT_ADRPT_LENGTH                                 0x8
#define _ADRPT_ADRPT_MASK                                   0xFF
#define _ADRPT_RPT0_POSN                                    0x0
#define _ADRPT_RPT0_POSITION                                0x0
#define _ADRPT_RPT0_SIZE                                    0x1
#define _ADRPT_RPT0_LENGTH                                  0x1
#define _ADRPT_RPT0_MASK                                    0x1
#define _ADRPT_RPT1_POSN                                    0x1
#define _ADRPT_RPT1_POSITION                                0x1
#define _ADRPT_RPT1_SIZE                                    0x1
#define _ADRPT_RPT1_LENGTH                                  0x1
#define _ADRPT_RPT1_MASK                                    0x2
#define _ADRPT_RPT2_POSN                                    0x2
#define _ADRPT_RPT2_POSITION                                0x2
#define _ADRPT_RPT2_SIZE                                    0x1
#define _ADRPT_RPT2_LENGTH                                  0x1
#define _ADRPT_RPT2_MASK                                    0x4
#define _ADRPT_RPT3_POSN                                    0x3
#define _ADRPT_RPT3_POSITION                                0x3
#define _ADRPT_RPT3_SIZE                                    0x1
#define _ADRPT_RPT3_LENGTH                                  0x1
#define _ADRPT_RPT3_MASK                                    0x8
#define _ADRPT_RPT4_POSN                                    0x4
#define _ADRPT_RPT4_POSITION                                0x4
#define _ADRPT_RPT4_SIZE                                    0x1
#define _ADRPT_RPT4_LENGTH                                  0x1
#define _ADRPT_RPT4_MASK                                    0x10
#define _ADRPT_RPT5_POSN                                    0x5
#define _ADRPT_RPT5_POSITION                                0x5
#define _ADRPT_RPT5_SIZE                                    0x1
#define _ADRPT_RPT5_LENGTH                                  0x1
#define _ADRPT_RPT5_MASK                                    0x20
#define _ADRPT_RPT6_POSN                                    0x6
#define _ADRPT_RPT6_POSITION                                0x6
#define _ADRPT_RPT6_SIZE                                    0x1
#define _ADRPT_RPT6_LENGTH                                  0x1
#define _ADRPT_RPT6_MASK                                    0x40
#define _ADRPT_RPT7_POSN                                    0x7
#define _ADRPT_RPT7_POSITION                                0x7
#define _ADRPT_RPT7_SIZE                                    0x1
#define _ADRPT_RPT7_LENGTH                                  0x1
#define _ADRPT_RPT7_MASK                                    0x80

// Register: ADPREV
#define ADPREV ADPREV
extern volatile unsigned short          ADPREV              __at(0x3EED);
#ifndef _LIB_BUILD
asm("ADPREV equ 03EEDh");
#endif

// Register: ADPREVL
#define ADPREVL ADPREVL
extern volatile unsigned char           ADPREVL             __at(0x3EED);
#ifndef _LIB_BUILD
asm("ADPREVL equ 03EEDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PREV                   :8;
    };
    struct {
        unsigned ADPREV0                :1;
        unsigned ADPREV1                :1;
        unsigned ADPREV2                :1;
        unsigned ADPREV3                :1;
        unsigned ADPREV4                :1;
        unsigned ADPREV5                :1;
        unsigned ADPREV6                :1;
        unsigned ADPREV7                :1;
    };
    struct {
        unsigned ADPREV                 :8;
    };
    struct {
        unsigned PREV0                  :1;
        unsigned PREV1                  :1;
        unsigned PREV2                  :1;
        unsigned PREV3                  :1;
        unsigned PREV4                  :1;
        unsigned PREV5                  :1;
        unsigned PREV6                  :1;
        unsigned PREV7                  :1;
    };
} ADPREVLbits_t;
extern volatile ADPREVLbits_t ADPREVLbits __at(0x3EED);
// bitfield macros
#define _ADPREVL_PREV_POSN                                  0x0
#define _ADPREVL_PREV_POSITION                              0x0
#define _ADPREVL_PREV_SIZE                                  0x8
#define _ADPREVL_PREV_LENGTH                                0x8
#define _ADPREVL_PREV_MASK                                  0xFF
#define _ADPREVL_ADPREV0_POSN                               0x0
#define _ADPREVL_ADPREV0_POSITION                           0x0
#define _ADPREVL_ADPREV0_SIZE                               0x1
#define _ADPREVL_ADPREV0_LENGTH                             0x1
#define _ADPREVL_ADPREV0_MASK                               0x1
#define _ADPREVL_ADPREV1_POSN                               0x1
#define _ADPREVL_ADPREV1_POSITION                           0x1
#define _ADPREVL_ADPREV1_SIZE                               0x1
#define _ADPREVL_ADPREV1_LENGTH                             0x1
#define _ADPREVL_ADPREV1_MASK                               0x2
#define _ADPREVL_ADPREV2_POSN                               0x2
#define _ADPREVL_ADPREV2_POSITION                           0x2
#define _ADPREVL_ADPREV2_SIZE                               0x1
#define _ADPREVL_ADPREV2_LENGTH                             0x1
#define _ADPREVL_ADPREV2_MASK                               0x4
#define _ADPREVL_ADPREV3_POSN                               0x3
#define _ADPREVL_ADPREV3_POSITION                           0x3
#define _ADPREVL_ADPREV3_SIZE                               0x1
#define _ADPREVL_ADPREV3_LENGTH                             0x1
#define _ADPREVL_ADPREV3_MASK                               0x8
#define _ADPREVL_ADPREV4_POSN                               0x4
#define _ADPREVL_ADPREV4_POSITION                           0x4
#define _ADPREVL_ADPREV4_SIZE                               0x1
#define _ADPREVL_ADPREV4_LENGTH                             0x1
#define _ADPREVL_ADPREV4_MASK                               0x10
#define _ADPREVL_ADPREV5_POSN                               0x5
#define _ADPREVL_ADPREV5_POSITION                           0x5
#define _ADPREVL_ADPREV5_SIZE                               0x1
#define _ADPREVL_ADPREV5_LENGTH                             0x1
#define _ADPREVL_ADPREV5_MASK                               0x20
#define _ADPREVL_ADPREV6_POSN                               0x6
#define _ADPREVL_ADPREV6_POSITION                           0x6
#define _ADPREVL_ADPREV6_SIZE                               0x1
#define _ADPREVL_ADPREV6_LENGTH                             0x1
#define _ADPREVL_ADPREV6_MASK                               0x40
#define _ADPREVL_ADPREV7_POSN                               0x7
#define _ADPREVL_ADPREV7_POSITION                           0x7
#define _ADPREVL_ADPREV7_SIZE                               0x1
#define _ADPREVL_ADPREV7_LENGTH                             0x1
#define _ADPREVL_ADPREV7_MASK                               0x80
#define _ADPREVL_ADPREV_POSN                                0x0
#define _ADPREVL_ADPREV_POSITION                            0x0
#define _ADPREVL_ADPREV_SIZE                                0x8
#define _ADPREVL_ADPREV_LENGTH                              0x8
#define _ADPREVL_ADPREV_MASK                                0xFF
#define _ADPREVL_PREV0_POSN                                 0x0
#define _ADPREVL_PREV0_POSITION                             0x0
#define _ADPREVL_PREV0_SIZE                                 0x1
#define _ADPREVL_PREV0_LENGTH                               0x1
#define _ADPREVL_PREV0_MASK                                 0x1
#define _ADPREVL_PREV1_POSN                                 0x1
#define _ADPREVL_PREV1_POSITION                             0x1
#define _ADPREVL_PREV1_SIZE                                 0x1
#define _ADPREVL_PREV1_LENGTH                               0x1
#define _ADPREVL_PREV1_MASK                                 0x2
#define _ADPREVL_PREV2_POSN                                 0x2
#define _ADPREVL_PREV2_POSITION                             0x2
#define _ADPREVL_PREV2_SIZE                                 0x1
#define _ADPREVL_PREV2_LENGTH                               0x1
#define _ADPREVL_PREV2_MASK                                 0x4
#define _ADPREVL_PREV3_POSN                                 0x3
#define _ADPREVL_PREV3_POSITION                             0x3
#define _ADPREVL_PREV3_SIZE                                 0x1
#define _ADPREVL_PREV3_LENGTH                               0x1
#define _ADPREVL_PREV3_MASK                                 0x8
#define _ADPREVL_PREV4_POSN                                 0x4
#define _ADPREVL_PREV4_POSITION                             0x4
#define _ADPREVL_PREV4_SIZE                                 0x1
#define _ADPREVL_PREV4_LENGTH                               0x1
#define _ADPREVL_PREV4_MASK                                 0x10
#define _ADPREVL_PREV5_POSN                                 0x5
#define _ADPREVL_PREV5_POSITION                             0x5
#define _ADPREVL_PREV5_SIZE                                 0x1
#define _ADPREVL_PREV5_LENGTH                               0x1
#define _ADPREVL_PREV5_MASK                                 0x20
#define _ADPREVL_PREV6_POSN                                 0x6
#define _ADPREVL_PREV6_POSITION                             0x6
#define _ADPREVL_PREV6_SIZE                                 0x1
#define _ADPREVL_PREV6_LENGTH                               0x1
#define _ADPREVL_PREV6_MASK                                 0x40
#define _ADPREVL_PREV7_POSN                                 0x7
#define _ADPREVL_PREV7_POSITION                             0x7
#define _ADPREVL_PREV7_SIZE                                 0x1
#define _ADPREVL_PREV7_LENGTH                               0x1
#define _ADPREVL_PREV7_MASK                                 0x80

// Register: ADPREVH
#define ADPREVH ADPREVH
extern volatile unsigned char           ADPREVH             __at(0x3EEE);
#ifndef _LIB_BUILD
asm("ADPREVH equ 03EEEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PREV                   :8;
    };
    struct {
        unsigned ADPREV8                :1;
        unsigned ADPREV9                :1;
        unsigned ADPREV10               :1;
        unsigned ADPREV11               :1;
        unsigned ADPREV12               :1;
        unsigned ADPREV13               :1;
        unsigned ADPREV14               :1;
        unsigned ADPREV15               :1;
    };
    struct {
        unsigned ADPREV                 :8;
    };
    struct {
        unsigned PREV8                  :1;
        unsigned PREV9                  :1;
        unsigned PREV10                 :1;
        unsigned PREV11                 :1;
        unsigned PREV12                 :1;
        unsigned PREV13                 :1;
        unsigned PREV14                 :1;
        unsigned PREV15                 :1;
    };
} ADPREVHbits_t;
extern volatile ADPREVHbits_t ADPREVHbits __at(0x3EEE);
// bitfield macros
#define _ADPREVH_PREV_POSN                                  0x0
#define _ADPREVH_PREV_POSITION                              0x0
#define _ADPREVH_PREV_SIZE                                  0x8
#define _ADPREVH_PREV_LENGTH                                0x8
#define _ADPREVH_PREV_MASK                                  0xFF
#define _ADPREVH_ADPREV8_POSN                               0x0
#define _ADPREVH_ADPREV8_POSITION                           0x0
#define _ADPREVH_ADPREV8_SIZE                               0x1
#define _ADPREVH_ADPREV8_LENGTH                             0x1
#define _ADPREVH_ADPREV8_MASK                               0x1
#define _ADPREVH_ADPREV9_POSN                               0x1
#define _ADPREVH_ADPREV9_POSITION                           0x1
#define _ADPREVH_ADPREV9_SIZE                               0x1
#define _ADPREVH_ADPREV9_LENGTH                             0x1
#define _ADPREVH_ADPREV9_MASK                               0x2
#define _ADPREVH_ADPREV10_POSN                              0x2
#define _ADPREVH_ADPREV10_POSITION                          0x2
#define _ADPREVH_ADPREV10_SIZE                              0x1
#define _ADPREVH_ADPREV10_LENGTH                            0x1
#define _ADPREVH_ADPREV10_MASK                              0x4
#define _ADPREVH_ADPREV11_POSN                              0x3
#define _ADPREVH_ADPREV11_POSITION                          0x3
#define _ADPREVH_ADPREV11_SIZE                              0x1
#define _ADPREVH_ADPREV11_LENGTH                            0x1
#define _ADPREVH_ADPREV11_MASK                              0x8
#define _ADPREVH_ADPREV12_POSN                              0x4
#define _ADPREVH_ADPREV12_POSITION                          0x4
#define _ADPREVH_ADPREV12_SIZE                              0x1
#define _ADPREVH_ADPREV12_LENGTH                            0x1
#define _ADPREVH_ADPREV12_MASK                              0x10
#define _ADPREVH_ADPREV13_POSN                              0x5
#define _ADPREVH_ADPREV13_POSITION                          0x5
#define _ADPREVH_ADPREV13_SIZE                              0x1
#define _ADPREVH_ADPREV13_LENGTH                            0x1
#define _ADPREVH_ADPREV13_MASK                              0x20
#define _ADPREVH_ADPREV14_POSN                              0x6
#define _ADPREVH_ADPREV14_POSITION                          0x6
#define _ADPREVH_ADPREV14_SIZE                              0x1
#define _ADPREVH_ADPREV14_LENGTH                            0x1
#define _ADPREVH_ADPREV14_MASK                              0x40
#define _ADPREVH_ADPREV15_POSN                              0x7
#define _ADPREVH_ADPREV15_POSITION                          0x7
#define _ADPREVH_ADPREV15_SIZE                              0x1
#define _ADPREVH_ADPREV15_LENGTH                            0x1
#define _ADPREVH_ADPREV15_MASK                              0x80
#define _ADPREVH_ADPREV_POSN                                0x0
#define _ADPREVH_ADPREV_POSITION                            0x0
#define _ADPREVH_ADPREV_SIZE                                0x8
#define _ADPREVH_ADPREV_LENGTH                              0x8
#define _ADPREVH_ADPREV_MASK                                0xFF
#define _ADPREVH_PREV8_POSN                                 0x0
#define _ADPREVH_PREV8_POSITION                             0x0
#define _ADPREVH_PREV8_SIZE                                 0x1
#define _ADPREVH_PREV8_LENGTH                               0x1
#define _ADPREVH_PREV8_MASK                                 0x1
#define _ADPREVH_PREV9_POSN                                 0x1
#define _ADPREVH_PREV9_POSITION                             0x1
#define _ADPREVH_PREV9_SIZE                                 0x1
#define _ADPREVH_PREV9_LENGTH                               0x1
#define _ADPREVH_PREV9_MASK                                 0x2
#define _ADPREVH_PREV10_POSN                                0x2
#define _ADPREVH_PREV10_POSITION                            0x2
#define _ADPREVH_PREV10_SIZE                                0x1
#define _ADPREVH_PREV10_LENGTH                              0x1
#define _ADPREVH_PREV10_MASK                                0x4
#define _ADPREVH_PREV11_POSN                                0x3
#define _ADPREVH_PREV11_POSITION                            0x3
#define _ADPREVH_PREV11_SIZE                                0x1
#define _ADPREVH_PREV11_LENGTH                              0x1
#define _ADPREVH_PREV11_MASK                                0x8
#define _ADPREVH_PREV12_POSN                                0x4
#define _ADPREVH_PREV12_POSITION                            0x4
#define _ADPREVH_PREV12_SIZE                                0x1
#define _ADPREVH_PREV12_LENGTH                              0x1
#define _ADPREVH_PREV12_MASK                                0x10
#define _ADPREVH_PREV13_POSN                                0x5
#define _ADPREVH_PREV13_POSITION                            0x5
#define _ADPREVH_PREV13_SIZE                                0x1
#define _ADPREVH_PREV13_LENGTH                              0x1
#define _ADPREVH_PREV13_MASK                                0x20
#define _ADPREVH_PREV14_POSN                                0x6
#define _ADPREVH_PREV14_POSITION                            0x6
#define _ADPREVH_PREV14_SIZE                                0x1
#define _ADPREVH_PREV14_LENGTH                              0x1
#define _ADPREVH_PREV14_MASK                                0x40
#define _ADPREVH_PREV15_POSN                                0x7
#define _ADPREVH_PREV15_POSITION                            0x7
#define _ADPREVH_PREV15_SIZE                                0x1
#define _ADPREVH_PREV15_LENGTH                              0x1
#define _ADPREVH_PREV15_MASK                                0x80

// Register: ADRES
#define ADRES ADRES
extern volatile unsigned short          ADRES               __at(0x3EEF);
#ifndef _LIB_BUILD
asm("ADRES equ 03EEFh");
#endif

// Register: ADRESL
#define ADRESL ADRESL
extern volatile unsigned char           ADRESL              __at(0x3EEF);
#ifndef _LIB_BUILD
asm("ADRESL equ 03EEFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RES                    :8;
    };
    struct {
        unsigned ADRES0                 :1;
        unsigned ADRES1                 :1;
        unsigned ADRES2                 :1;
        unsigned ADRES3                 :1;
        unsigned ADRES4                 :1;
        unsigned ADRES5                 :1;
        unsigned ADRES6                 :1;
        unsigned ADRES7                 :1;
    };
    struct {
        unsigned ADRES                  :8;
    };
    struct {
        unsigned RES0                   :1;
        unsigned RES1                   :1;
        unsigned RES2                   :1;
        unsigned RES3                   :1;
        unsigned RES4                   :1;
        unsigned RES5                   :1;
        unsigned RES6                   :1;
        unsigned RES7                   :1;
    };
} ADRESLbits_t;
extern volatile ADRESLbits_t ADRESLbits __at(0x3EEF);
// bitfield macros
#define _ADRESL_RES_POSN                                    0x0
#define _ADRESL_RES_POSITION                                0x0
#define _ADRESL_RES_SIZE                                    0x8
#define _ADRESL_RES_LENGTH                                  0x8
#define _ADRESL_RES_MASK                                    0xFF
#define _ADRESL_ADRES0_POSN                                 0x0
#define _ADRESL_ADRES0_POSITION                             0x0
#define _ADRESL_ADRES0_SIZE                                 0x1
#define _ADRESL_ADRES0_LENGTH                               0x1
#define _ADRESL_ADRES0_MASK                                 0x1
#define _ADRESL_ADRES1_POSN                                 0x1
#define _ADRESL_ADRES1_POSITION                             0x1
#define _ADRESL_ADRES1_SIZE                                 0x1
#define _ADRESL_ADRES1_LENGTH                               0x1
#define _ADRESL_ADRES1_MASK                                 0x2
#define _ADRESL_ADRES2_POSN                                 0x2
#define _ADRESL_ADRES2_POSITION                             0x2
#define _ADRESL_ADRES2_SIZE                                 0x1
#define _ADRESL_ADRES2_LENGTH                               0x1
#define _ADRESL_ADRES2_MASK                                 0x4
#define _ADRESL_ADRES3_POSN                                 0x3
#define _ADRESL_ADRES3_POSITION                             0x3
#define _ADRESL_ADRES3_SIZE                                 0x1
#define _ADRESL_ADRES3_LENGTH                               0x1
#define _ADRESL_ADRES3_MASK                                 0x8
#define _ADRESL_ADRES4_POSN                                 0x4
#define _ADRESL_ADRES4_POSITION                             0x4
#define _ADRESL_ADRES4_SIZE                                 0x1
#define _ADRESL_ADRES4_LENGTH                               0x1
#define _ADRESL_ADRES4_MASK                                 0x10
#define _ADRESL_ADRES5_POSN                                 0x5
#define _ADRESL_ADRES5_POSITION                             0x5
#define _ADRESL_ADRES5_SIZE                                 0x1
#define _ADRESL_ADRES5_LENGTH                               0x1
#define _ADRESL_ADRES5_MASK                                 0x20
#define _ADRESL_ADRES6_POSN                                 0x6
#define _ADRESL_ADRES6_POSITION                             0x6
#define _ADRESL_ADRES6_SIZE                                 0x1
#define _ADRESL_ADRES6_LENGTH                               0x1
#define _ADRESL_ADRES6_MASK                                 0x40
#define _ADRESL_ADRES7_POSN                                 0x7
#define _ADRESL_ADRES7_POSITION                             0x7
#define _ADRESL_ADRES7_SIZE                                 0x1
#define _ADRESL_ADRES7_LENGTH                               0x1
#define _ADRESL_ADRES7_MASK                                 0x80
#define _ADRESL_ADRES_POSN                                  0x0
#define _ADRESL_ADRES_POSITION                              0x0
#define _ADRESL_ADRES_SIZE                                  0x8
#define _ADRESL_ADRES_LENGTH                                0x8
#define _ADRESL_ADRES_MASK                                  0xFF
#define _ADRESL_RES0_POSN                                   0x0
#define _ADRESL_RES0_POSITION                               0x0
#define _ADRESL_RES0_SIZE                                   0x1
#define _ADRESL_RES0_LENGTH                                 0x1
#define _ADRESL_RES0_MASK                                   0x1
#define _ADRESL_RES1_POSN                                   0x1
#define _ADRESL_RES1_POSITION                               0x1
#define _ADRESL_RES1_SIZE                                   0x1
#define _ADRESL_RES1_LENGTH                                 0x1
#define _ADRESL_RES1_MASK                                   0x2
#define _ADRESL_RES2_POSN                                   0x2
#define _ADRESL_RES2_POSITION                               0x2
#define _ADRESL_RES2_SIZE                                   0x1
#define _ADRESL_RES2_LENGTH                                 0x1
#define _ADRESL_RES2_MASK                                   0x4
#define _ADRESL_RES3_POSN                                   0x3
#define _ADRESL_RES3_POSITION                               0x3
#define _ADRESL_RES3_SIZE                                   0x1
#define _ADRESL_RES3_LENGTH                                 0x1
#define _ADRESL_RES3_MASK                                   0x8
#define _ADRESL_RES4_POSN                                   0x4
#define _ADRESL_RES4_POSITION                               0x4
#define _ADRESL_RES4_SIZE                                   0x1
#define _ADRESL_RES4_LENGTH                                 0x1
#define _ADRESL_RES4_MASK                                   0x10
#define _ADRESL_RES5_POSN                                   0x5
#define _ADRESL_RES5_POSITION                               0x5
#define _ADRESL_RES5_SIZE                                   0x1
#define _ADRESL_RES5_LENGTH                                 0x1
#define _ADRESL_RES5_MASK                                   0x20
#define _ADRESL_RES6_POSN                                   0x6
#define _ADRESL_RES6_POSITION                               0x6
#define _ADRESL_RES6_SIZE                                   0x1
#define _ADRESL_RES6_LENGTH                                 0x1
#define _ADRESL_RES6_MASK                                   0x40
#define _ADRESL_RES7_POSN                                   0x7
#define _ADRESL_RES7_POSITION                               0x7
#define _ADRESL_RES7_SIZE                                   0x1
#define _ADRESL_RES7_LENGTH                                 0x1
#define _ADRESL_RES7_MASK                                   0x80

// Register: ADRESH
#define ADRESH ADRESH
extern volatile unsigned char           ADRESH              __at(0x3EF0);
#ifndef _LIB_BUILD
asm("ADRESH equ 03EF0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADRES8                 :1;
        unsigned ADRES9                 :1;
        unsigned ADRES10                :1;
        unsigned ADRES11                :1;
        unsigned ADRES12                :1;
        unsigned ADRES13                :1;
        unsigned ADRES14                :1;
        unsigned ADRES15                :1;
    };
    struct {
        unsigned ADRES                  :8;
    };
    struct {
        unsigned RES8                   :1;
        unsigned RES9                   :1;
        unsigned RES10                  :1;
        unsigned RES11                  :1;
        unsigned RES12                  :1;
        unsigned RES13                  :1;
        unsigned RES14                  :1;
        unsigned RES15                  :1;
    };
} ADRESHbits_t;
extern volatile ADRESHbits_t ADRESHbits __at(0x3EF0);
// bitfield macros
#define _ADRESH_ADRES8_POSN                                 0x0
#define _ADRESH_ADRES8_POSITION                             0x0
#define _ADRESH_ADRES8_SIZE                                 0x1
#define _ADRESH_ADRES8_LENGTH                               0x1
#define _ADRESH_ADRES8_MASK                                 0x1
#define _ADRESH_ADRES9_POSN                                 0x1
#define _ADRESH_ADRES9_POSITION                             0x1
#define _ADRESH_ADRES9_SIZE                                 0x1
#define _ADRESH_ADRES9_LENGTH                               0x1
#define _ADRESH_ADRES9_MASK                                 0x2
#define _ADRESH_ADRES10_POSN                                0x2
#define _ADRESH_ADRES10_POSITION                            0x2
#define _ADRESH_ADRES10_SIZE                                0x1
#define _ADRESH_ADRES10_LENGTH                              0x1
#define _ADRESH_ADRES10_MASK                                0x4
#define _ADRESH_ADRES11_POSN                                0x3
#define _ADRESH_ADRES11_POSITION                            0x3
#define _ADRESH_ADRES11_SIZE                                0x1
#define _ADRESH_ADRES11_LENGTH                              0x1
#define _ADRESH_ADRES11_MASK                                0x8
#define _ADRESH_ADRES12_POSN                                0x4
#define _ADRESH_ADRES12_POSITION                            0x4
#define _ADRESH_ADRES12_SIZE                                0x1
#define _ADRESH_ADRES12_LENGTH                              0x1
#define _ADRESH_ADRES12_MASK                                0x10
#define _ADRESH_ADRES13_POSN                                0x5
#define _ADRESH_ADRES13_POSITION                            0x5
#define _ADRESH_ADRES13_SIZE                                0x1
#define _ADRESH_ADRES13_LENGTH                              0x1
#define _ADRESH_ADRES13_MASK                                0x20
#define _ADRESH_ADRES14_POSN                                0x6
#define _ADRESH_ADRES14_POSITION                            0x6
#define _ADRESH_ADRES14_SIZE                                0x1
#define _ADRESH_ADRES14_LENGTH                              0x1
#define _ADRESH_ADRES14_MASK                                0x40
#define _ADRESH_ADRES15_POSN                                0x7
#define _ADRESH_ADRES15_POSITION                            0x7
#define _ADRESH_ADRES15_SIZE                                0x1
#define _ADRESH_ADRES15_LENGTH                              0x1
#define _ADRESH_ADRES15_MASK                                0x80
#define _ADRESH_ADRES_POSN                                  0x0
#define _ADRESH_ADRES_POSITION                              0x0
#define _ADRESH_ADRES_SIZE                                  0x8
#define _ADRESH_ADRES_LENGTH                                0x8
#define _ADRESH_ADRES_MASK                                  0xFF
#define _ADRESH_RES8_POSN                                   0x0
#define _ADRESH_RES8_POSITION                               0x0
#define _ADRESH_RES8_SIZE                                   0x1
#define _ADRESH_RES8_LENGTH                                 0x1
#define _ADRESH_RES8_MASK                                   0x1
#define _ADRESH_RES9_POSN                                   0x1
#define _ADRESH_RES9_POSITION                               0x1
#define _ADRESH_RES9_SIZE                                   0x1
#define _ADRESH_RES9_LENGTH                                 0x1
#define _ADRESH_RES9_MASK                                   0x2
#define _ADRESH_RES10_POSN                                  0x2
#define _ADRESH_RES10_POSITION                              0x2
#define _ADRESH_RES10_SIZE                                  0x1
#define _ADRESH_RES10_LENGTH                                0x1
#define _ADRESH_RES10_MASK                                  0x4
#define _ADRESH_RES11_POSN                                  0x3
#define _ADRESH_RES11_POSITION                              0x3
#define _ADRESH_RES11_SIZE                                  0x1
#define _ADRESH_RES11_LENGTH                                0x1
#define _ADRESH_RES11_MASK                                  0x8
#define _ADRESH_RES12_POSN                                  0x4
#define _ADRESH_RES12_POSITION                              0x4
#define _ADRESH_RES12_SIZE                                  0x1
#define _ADRESH_RES12_LENGTH                                0x1
#define _ADRESH_RES12_MASK                                  0x10
#define _ADRESH_RES13_POSN                                  0x5
#define _ADRESH_RES13_POSITION                              0x5
#define _ADRESH_RES13_SIZE                                  0x1
#define _ADRESH_RES13_LENGTH                                0x1
#define _ADRESH_RES13_MASK                                  0x20
#define _ADRESH_RES14_POSN                                  0x6
#define _ADRESH_RES14_POSITION                              0x6
#define _ADRESH_RES14_SIZE                                  0x1
#define _ADRESH_RES14_LENGTH                                0x1
#define _ADRESH_RES14_MASK                                  0x40
#define _ADRESH_RES15_POSN                                  0x7
#define _ADRESH_RES15_POSITION                              0x7
#define _ADRESH_RES15_SIZE                                  0x1
#define _ADRESH_RES15_LENGTH                                0x1
#define _ADRESH_RES15_MASK                                  0x80

// Register: ADPCH
#define ADPCH ADPCH
extern volatile unsigned char           ADPCH               __at(0x3EF1);
#ifndef _LIB_BUILD
asm("ADPCH equ 03EF1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADPCH                  :6;
    };
    struct {
        unsigned ADPCH0                 :1;
        unsigned ADPCH1                 :1;
        unsigned ADPCH2                 :1;
        unsigned ADPCH3                 :1;
        unsigned ADPCH4                 :1;
        unsigned ADPCH5                 :1;
    };
    struct {
        unsigned PCH                    :6;
    };
    struct {
        unsigned PCH0                   :1;
        unsigned PCH1                   :1;
        unsigned PCH2                   :1;
        unsigned PCH3                   :1;
        unsigned PCH4                   :1;
        unsigned PCH5                   :1;
    };
} ADPCHbits_t;
extern volatile ADPCHbits_t ADPCHbits __at(0x3EF1);
// bitfield macros
#define _ADPCH_ADPCH_POSN                                   0x0
#define _ADPCH_ADPCH_POSITION                               0x0
#define _ADPCH_ADPCH_SIZE                                   0x6
#define _ADPCH_ADPCH_LENGTH                                 0x6
#define _ADPCH_ADPCH_MASK                                   0x3F
#define _ADPCH_ADPCH0_POSN                                  0x0
#define _ADPCH_ADPCH0_POSITION                              0x0
#define _ADPCH_ADPCH0_SIZE                                  0x1
#define _ADPCH_ADPCH0_LENGTH                                0x1
#define _ADPCH_ADPCH0_MASK                                  0x1
#define _ADPCH_ADPCH1_POSN                                  0x1
#define _ADPCH_ADPCH1_POSITION                              0x1
#define _ADPCH_ADPCH1_SIZE                                  0x1
#define _ADPCH_ADPCH1_LENGTH                                0x1
#define _ADPCH_ADPCH1_MASK                                  0x2
#define _ADPCH_ADPCH2_POSN                                  0x2
#define _ADPCH_ADPCH2_POSITION                              0x2
#define _ADPCH_ADPCH2_SIZE                                  0x1
#define _ADPCH_ADPCH2_LENGTH                                0x1
#define _ADPCH_ADPCH2_MASK                                  0x4
#define _ADPCH_ADPCH3_POSN                                  0x3
#define _ADPCH_ADPCH3_POSITION                              0x3
#define _ADPCH_ADPCH3_SIZE                                  0x1
#define _ADPCH_ADPCH3_LENGTH                                0x1
#define _ADPCH_ADPCH3_MASK                                  0x8
#define _ADPCH_ADPCH4_POSN                                  0x4
#define _ADPCH_ADPCH4_POSITION                              0x4
#define _ADPCH_ADPCH4_SIZE                                  0x1
#define _ADPCH_ADPCH4_LENGTH                                0x1
#define _ADPCH_ADPCH4_MASK                                  0x10
#define _ADPCH_ADPCH5_POSN                                  0x5
#define _ADPCH_ADPCH5_POSITION                              0x5
#define _ADPCH_ADPCH5_SIZE                                  0x1
#define _ADPCH_ADPCH5_LENGTH                                0x1
#define _ADPCH_ADPCH5_MASK                                  0x20
#define _ADPCH_PCH_POSN                                     0x0
#define _ADPCH_PCH_POSITION                                 0x0
#define _ADPCH_PCH_SIZE                                     0x6
#define _ADPCH_PCH_LENGTH                                   0x6
#define _ADPCH_PCH_MASK                                     0x3F
#define _ADPCH_PCH0_POSN                                    0x0
#define _ADPCH_PCH0_POSITION                                0x0
#define _ADPCH_PCH0_SIZE                                    0x1
#define _ADPCH_PCH0_LENGTH                                  0x1
#define _ADPCH_PCH0_MASK                                    0x1
#define _ADPCH_PCH1_POSN                                    0x1
#define _ADPCH_PCH1_POSITION                                0x1
#define _ADPCH_PCH1_SIZE                                    0x1
#define _ADPCH_PCH1_LENGTH                                  0x1
#define _ADPCH_PCH1_MASK                                    0x2
#define _ADPCH_PCH2_POSN                                    0x2
#define _ADPCH_PCH2_POSITION                                0x2
#define _ADPCH_PCH2_SIZE                                    0x1
#define _ADPCH_PCH2_LENGTH                                  0x1
#define _ADPCH_PCH2_MASK                                    0x4
#define _ADPCH_PCH3_POSN                                    0x3
#define _ADPCH_PCH3_POSITION                                0x3
#define _ADPCH_PCH3_SIZE                                    0x1
#define _ADPCH_PCH3_LENGTH                                  0x1
#define _ADPCH_PCH3_MASK                                    0x8
#define _ADPCH_PCH4_POSN                                    0x4
#define _ADPCH_PCH4_POSITION                                0x4
#define _ADPCH_PCH4_SIZE                                    0x1
#define _ADPCH_PCH4_LENGTH                                  0x1
#define _ADPCH_PCH4_MASK                                    0x10
#define _ADPCH_PCH5_POSN                                    0x5
#define _ADPCH_PCH5_POSITION                                0x5
#define _ADPCH_PCH5_SIZE                                    0x1
#define _ADPCH_PCH5_LENGTH                                  0x1
#define _ADPCH_PCH5_MASK                                    0x20

// Register: ADACQ
#define ADACQ ADACQ
extern volatile unsigned short          ADACQ               __at(0x3EF3);
#ifndef _LIB_BUILD
asm("ADACQ equ 03EF3h");
#endif

// Register: ADACQL
#define ADACQL ADACQL
extern volatile unsigned char           ADACQL              __at(0x3EF3);
#ifndef _LIB_BUILD
asm("ADACQL equ 03EF3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ACQ                    :8;
    };
    struct {
        unsigned ADACQ0                 :1;
        unsigned ADACQ1                 :1;
        unsigned ADACQ2                 :1;
        unsigned ADACQ3                 :1;
        unsigned ADACQ4                 :1;
        unsigned ADACQ5                 :1;
        unsigned ADACQ6                 :1;
        unsigned ADACQ7                 :1;
    };
    struct {
        unsigned ADACQ                  :8;
    };
    struct {
        unsigned ACQ0                   :1;
        unsigned ACQ1                   :1;
        unsigned ACQ2                   :1;
        unsigned ACQ3                   :1;
        unsigned ACQ4                   :1;
        unsigned ACQ5                   :1;
        unsigned ACQ6                   :1;
        unsigned ACQ7                   :1;
    };
} ADACQLbits_t;
extern volatile ADACQLbits_t ADACQLbits __at(0x3EF3);
// bitfield macros
#define _ADACQL_ACQ_POSN                                    0x0
#define _ADACQL_ACQ_POSITION                                0x0
#define _ADACQL_ACQ_SIZE                                    0x8
#define _ADACQL_ACQ_LENGTH                                  0x8
#define _ADACQL_ACQ_MASK                                    0xFF
#define _ADACQL_ADACQ0_POSN                                 0x0
#define _ADACQL_ADACQ0_POSITION                             0x0
#define _ADACQL_ADACQ0_SIZE                                 0x1
#define _ADACQL_ADACQ0_LENGTH                               0x1
#define _ADACQL_ADACQ0_MASK                                 0x1
#define _ADACQL_ADACQ1_POSN                                 0x1
#define _ADACQL_ADACQ1_POSITION                             0x1
#define _ADACQL_ADACQ1_SIZE                                 0x1
#define _ADACQL_ADACQ1_LENGTH                               0x1
#define _ADACQL_ADACQ1_MASK                                 0x2
#define _ADACQL_ADACQ2_POSN                                 0x2
#define _ADACQL_ADACQ2_POSITION                             0x2
#define _ADACQL_ADACQ2_SIZE                                 0x1
#define _ADACQL_ADACQ2_LENGTH                               0x1
#define _ADACQL_ADACQ2_MASK                                 0x4
#define _ADACQL_ADACQ3_POSN                                 0x3
#define _ADACQL_ADACQ3_POSITION                             0x3
#define _ADACQL_ADACQ3_SIZE                                 0x1
#define _ADACQL_ADACQ3_LENGTH                               0x1
#define _ADACQL_ADACQ3_MASK                                 0x8
#define _ADACQL_ADACQ4_POSN                                 0x4
#define _ADACQL_ADACQ4_POSITION                             0x4
#define _ADACQL_ADACQ4_SIZE                                 0x1
#define _ADACQL_ADACQ4_LENGTH                               0x1
#define _ADACQL_ADACQ4_MASK                                 0x10
#define _ADACQL_ADACQ5_POSN                                 0x5
#define _ADACQL_ADACQ5_POSITION                             0x5
#define _ADACQL_ADACQ5_SIZE                                 0x1
#define _ADACQL_ADACQ5_LENGTH                               0x1
#define _ADACQL_ADACQ5_MASK                                 0x20
#define _ADACQL_ADACQ6_POSN                                 0x6
#define _ADACQL_ADACQ6_POSITION                             0x6
#define _ADACQL_ADACQ6_SIZE                                 0x1
#define _ADACQL_ADACQ6_LENGTH                               0x1
#define _ADACQL_ADACQ6_MASK                                 0x40
#define _ADACQL_ADACQ7_POSN                                 0x7
#define _ADACQL_ADACQ7_POSITION                             0x7
#define _ADACQL_ADACQ7_SIZE                                 0x1
#define _ADACQL_ADACQ7_LENGTH                               0x1
#define _ADACQL_ADACQ7_MASK                                 0x80
#define _ADACQL_ADACQ_POSN                                  0x0
#define _ADACQL_ADACQ_POSITION                              0x0
#define _ADACQL_ADACQ_SIZE                                  0x8
#define _ADACQL_ADACQ_LENGTH                                0x8
#define _ADACQL_ADACQ_MASK                                  0xFF
#define _ADACQL_ACQ0_POSN                                   0x0
#define _ADACQL_ACQ0_POSITION                               0x0
#define _ADACQL_ACQ0_SIZE                                   0x1
#define _ADACQL_ACQ0_LENGTH                                 0x1
#define _ADACQL_ACQ0_MASK                                   0x1
#define _ADACQL_ACQ1_POSN                                   0x1
#define _ADACQL_ACQ1_POSITION                               0x1
#define _ADACQL_ACQ1_SIZE                                   0x1
#define _ADACQL_ACQ1_LENGTH                                 0x1
#define _ADACQL_ACQ1_MASK                                   0x2
#define _ADACQL_ACQ2_POSN                                   0x2
#define _ADACQL_ACQ2_POSITION                               0x2
#define _ADACQL_ACQ2_SIZE                                   0x1
#define _ADACQL_ACQ2_LENGTH                                 0x1
#define _ADACQL_ACQ2_MASK                                   0x4
#define _ADACQL_ACQ3_POSN                                   0x3
#define _ADACQL_ACQ3_POSITION                               0x3
#define _ADACQL_ACQ3_SIZE                                   0x1
#define _ADACQL_ACQ3_LENGTH                                 0x1
#define _ADACQL_ACQ3_MASK                                   0x8
#define _ADACQL_ACQ4_POSN                                   0x4
#define _ADACQL_ACQ4_POSITION                               0x4
#define _ADACQL_ACQ4_SIZE                                   0x1
#define _ADACQL_ACQ4_LENGTH                                 0x1
#define _ADACQL_ACQ4_MASK                                   0x10
#define _ADACQL_ACQ5_POSN                                   0x5
#define _ADACQL_ACQ5_POSITION                               0x5
#define _ADACQL_ACQ5_SIZE                                   0x1
#define _ADACQL_ACQ5_LENGTH                                 0x1
#define _ADACQL_ACQ5_MASK                                   0x20
#define _ADACQL_ACQ6_POSN                                   0x6
#define _ADACQL_ACQ6_POSITION                               0x6
#define _ADACQL_ACQ6_SIZE                                   0x1
#define _ADACQL_ACQ6_LENGTH                                 0x1
#define _ADACQL_ACQ6_MASK                                   0x40
#define _ADACQL_ACQ7_POSN                                   0x7
#define _ADACQL_ACQ7_POSITION                               0x7
#define _ADACQL_ACQ7_SIZE                                   0x1
#define _ADACQL_ACQ7_LENGTH                                 0x1
#define _ADACQL_ACQ7_MASK                                   0x80

// Register: ADACQH
#define ADACQH ADACQH
extern volatile unsigned char           ADACQH              __at(0x3EF4);
#ifndef _LIB_BUILD
asm("ADACQH equ 03EF4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ACQ                    :5;
    };
    struct {
        unsigned ADACQ8                 :1;
        unsigned ADACQ9                 :1;
        unsigned ADACQ10                :1;
        unsigned ADACQ11                :1;
        unsigned ADACQ12                :1;
    };
    struct {
        unsigned ADACQ                  :5;
    };
    struct {
        unsigned ACQ8                   :1;
        unsigned ACQ9                   :1;
        unsigned ACQ10                  :1;
        unsigned ACQ11                  :1;
        unsigned ACQ12                  :1;
    };
} ADACQHbits_t;
extern volatile ADACQHbits_t ADACQHbits __at(0x3EF4);
// bitfield macros
#define _ADACQH_ACQ_POSN                                    0x0
#define _ADACQH_ACQ_POSITION                                0x0
#define _ADACQH_ACQ_SIZE                                    0x5
#define _ADACQH_ACQ_LENGTH                                  0x5
#define _ADACQH_ACQ_MASK                                    0x1F
#define _ADACQH_ADACQ8_POSN                                 0x0
#define _ADACQH_ADACQ8_POSITION                             0x0
#define _ADACQH_ADACQ8_SIZE                                 0x1
#define _ADACQH_ADACQ8_LENGTH                               0x1
#define _ADACQH_ADACQ8_MASK                                 0x1
#define _ADACQH_ADACQ9_POSN                                 0x1
#define _ADACQH_ADACQ9_POSITION                             0x1
#define _ADACQH_ADACQ9_SIZE                                 0x1
#define _ADACQH_ADACQ9_LENGTH                               0x1
#define _ADACQH_ADACQ9_MASK                                 0x2
#define _ADACQH_ADACQ10_POSN                                0x2
#define _ADACQH_ADACQ10_POSITION                            0x2
#define _ADACQH_ADACQ10_SIZE                                0x1
#define _ADACQH_ADACQ10_LENGTH                              0x1
#define _ADACQH_ADACQ10_MASK                                0x4
#define _ADACQH_ADACQ11_POSN                                0x3
#define _ADACQH_ADACQ11_POSITION                            0x3
#define _ADACQH_ADACQ11_SIZE                                0x1
#define _ADACQH_ADACQ11_LENGTH                              0x1
#define _ADACQH_ADACQ11_MASK                                0x8
#define _ADACQH_ADACQ12_POSN                                0x4
#define _ADACQH_ADACQ12_POSITION                            0x4
#define _ADACQH_ADACQ12_SIZE                                0x1
#define _ADACQH_ADACQ12_LENGTH                              0x1
#define _ADACQH_ADACQ12_MASK                                0x10
#define _ADACQH_ADACQ_POSN                                  0x0
#define _ADACQH_ADACQ_POSITION                              0x0
#define _ADACQH_ADACQ_SIZE                                  0x5
#define _ADACQH_ADACQ_LENGTH                                0x5
#define _ADACQH_ADACQ_MASK                                  0x1F
#define _ADACQH_ACQ8_POSN                                   0x0
#define _ADACQH_ACQ8_POSITION                               0x0
#define _ADACQH_ACQ8_SIZE                                   0x1
#define _ADACQH_ACQ8_LENGTH                                 0x1
#define _ADACQH_ACQ8_MASK                                   0x1
#define _ADACQH_ACQ9_POSN                                   0x1
#define _ADACQH_ACQ9_POSITION                               0x1
#define _ADACQH_ACQ9_SIZE                                   0x1
#define _ADACQH_ACQ9_LENGTH                                 0x1
#define _ADACQH_ACQ9_MASK                                   0x2
#define _ADACQH_ACQ10_POSN                                  0x2
#define _ADACQH_ACQ10_POSITION                              0x2
#define _ADACQH_ACQ10_SIZE                                  0x1
#define _ADACQH_ACQ10_LENGTH                                0x1
#define _ADACQH_ACQ10_MASK                                  0x4
#define _ADACQH_ACQ11_POSN                                  0x3
#define _ADACQH_ACQ11_POSITION                              0x3
#define _ADACQH_ACQ11_SIZE                                  0x1
#define _ADACQH_ACQ11_LENGTH                                0x1
#define _ADACQH_ACQ11_MASK                                  0x8
#define _ADACQH_ACQ12_POSN                                  0x4
#define _ADACQH_ACQ12_POSITION                              0x4
#define _ADACQH_ACQ12_SIZE                                  0x1
#define _ADACQH_ACQ12_LENGTH                                0x1
#define _ADACQH_ACQ12_MASK                                  0x10

// Register: ADCAP
#define ADCAP ADCAP
extern volatile unsigned char           ADCAP               __at(0x3EF5);
#ifndef _LIB_BUILD
asm("ADCAP equ 03EF5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCAP                  :5;
    };
    struct {
        unsigned ADCAP0                 :1;
        unsigned ADCAP1                 :1;
        unsigned ADCAP2                 :1;
        unsigned ADCAP3                 :1;
        unsigned ADCAP4                 :1;
    };
    struct {
        unsigned CAP                    :5;
    };
    struct {
        unsigned CAP0                   :1;
        unsigned CAP1                   :1;
        unsigned CAP2                   :1;
        unsigned CAP3                   :1;
        unsigned CAP4                   :1;
    };
} ADCAPbits_t;
extern volatile ADCAPbits_t ADCAPbits __at(0x3EF5);
// bitfield macros
#define _ADCAP_ADCAP_POSN                                   0x0
#define _ADCAP_ADCAP_POSITION                               0x0
#define _ADCAP_ADCAP_SIZE                                   0x5
#define _ADCAP_ADCAP_LENGTH                                 0x5
#define _ADCAP_ADCAP_MASK                                   0x1F
#define _ADCAP_ADCAP0_POSN                                  0x0
#define _ADCAP_ADCAP0_POSITION                              0x0
#define _ADCAP_ADCAP0_SIZE                                  0x1
#define _ADCAP_ADCAP0_LENGTH                                0x1
#define _ADCAP_ADCAP0_MASK                                  0x1
#define _ADCAP_ADCAP1_POSN                                  0x1
#define _ADCAP_ADCAP1_POSITION                              0x1
#define _ADCAP_ADCAP1_SIZE                                  0x1
#define _ADCAP_ADCAP1_LENGTH                                0x1
#define _ADCAP_ADCAP1_MASK                                  0x2
#define _ADCAP_ADCAP2_POSN                                  0x2
#define _ADCAP_ADCAP2_POSITION                              0x2
#define _ADCAP_ADCAP2_SIZE                                  0x1
#define _ADCAP_ADCAP2_LENGTH                                0x1
#define _ADCAP_ADCAP2_MASK                                  0x4
#define _ADCAP_ADCAP3_POSN                                  0x3
#define _ADCAP_ADCAP3_POSITION                              0x3
#define _ADCAP_ADCAP3_SIZE                                  0x1
#define _ADCAP_ADCAP3_LENGTH                                0x1
#define _ADCAP_ADCAP3_MASK                                  0x8
#define _ADCAP_ADCAP4_POSN                                  0x4
#define _ADCAP_ADCAP4_POSITION                              0x4
#define _ADCAP_ADCAP4_SIZE                                  0x1
#define _ADCAP_ADCAP4_LENGTH                                0x1
#define _ADCAP_ADCAP4_MASK                                  0x10
#define _ADCAP_CAP_POSN                                     0x0
#define _ADCAP_CAP_POSITION                                 0x0
#define _ADCAP_CAP_SIZE                                     0x5
#define _ADCAP_CAP_LENGTH                                   0x5
#define _ADCAP_CAP_MASK                                     0x1F
#define _ADCAP_CAP0_POSN                                    0x0
#define _ADCAP_CAP0_POSITION                                0x0
#define _ADCAP_CAP0_SIZE                                    0x1
#define _ADCAP_CAP0_LENGTH                                  0x1
#define _ADCAP_CAP0_MASK                                    0x1
#define _ADCAP_CAP1_POSN                                    0x1
#define _ADCAP_CAP1_POSITION                                0x1
#define _ADCAP_CAP1_SIZE                                    0x1
#define _ADCAP_CAP1_LENGTH                                  0x1
#define _ADCAP_CAP1_MASK                                    0x2
#define _ADCAP_CAP2_POSN                                    0x2
#define _ADCAP_CAP2_POSITION                                0x2
#define _ADCAP_CAP2_SIZE                                    0x1
#define _ADCAP_CAP2_LENGTH                                  0x1
#define _ADCAP_CAP2_MASK                                    0x4
#define _ADCAP_CAP3_POSN                                    0x3
#define _ADCAP_CAP3_POSITION                                0x3
#define _ADCAP_CAP3_SIZE                                    0x1
#define _ADCAP_CAP3_LENGTH                                  0x1
#define _ADCAP_CAP3_MASK                                    0x8
#define _ADCAP_CAP4_POSN                                    0x4
#define _ADCAP_CAP4_POSITION                                0x4
#define _ADCAP_CAP4_SIZE                                    0x1
#define _ADCAP_CAP4_LENGTH                                  0x1
#define _ADCAP_CAP4_MASK                                    0x10

// Register: ADPRE
#define ADPRE ADPRE
extern volatile unsigned short          ADPRE               __at(0x3EF6);
#ifndef _LIB_BUILD
asm("ADPRE equ 03EF6h");
#endif

// Register: ADPREL
#define ADPREL ADPREL
extern volatile unsigned char           ADPREL              __at(0x3EF6);
#ifndef _LIB_BUILD
asm("ADPREL equ 03EF6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PRE                    :8;
    };
    struct {
        unsigned PRE0                   :1;
        unsigned PRE1                   :1;
        unsigned PRE2                   :1;
        unsigned PRE3                   :1;
        unsigned PRE4                   :1;
        unsigned PRE5                   :1;
        unsigned PRE6                   :1;
        unsigned PRE7                   :1;
    };
    struct {
        unsigned ADPRE                  :8;
    };
    struct {
        unsigned ADPRE0                 :1;
        unsigned ADPRE1                 :1;
        unsigned ADPRE2                 :1;
        unsigned ADPRE3                 :1;
        unsigned ADPRE4                 :1;
        unsigned ADPRE5                 :1;
        unsigned ADPRE6                 :1;
        unsigned ADPRE7                 :1;
    };
} ADPRELbits_t;
extern volatile ADPRELbits_t ADPRELbits __at(0x3EF6);
// bitfield macros
#define _ADPREL_PRE_POSN                                    0x0
#define _ADPREL_PRE_POSITION                                0x0
#define _ADPREL_PRE_SIZE                                    0x8
#define _ADPREL_PRE_LENGTH                                  0x8
#define _ADPREL_PRE_MASK                                    0xFF
#define _ADPREL_PRE0_POSN                                   0x0
#define _ADPREL_PRE0_POSITION                               0x0
#define _ADPREL_PRE0_SIZE                                   0x1
#define _ADPREL_PRE0_LENGTH                                 0x1
#define _ADPREL_PRE0_MASK                                   0x1
#define _ADPREL_PRE1_POSN                                   0x1
#define _ADPREL_PRE1_POSITION                               0x1
#define _ADPREL_PRE1_SIZE                                   0x1
#define _ADPREL_PRE1_LENGTH                                 0x1
#define _ADPREL_PRE1_MASK                                   0x2
#define _ADPREL_PRE2_POSN                                   0x2
#define _ADPREL_PRE2_POSITION                               0x2
#define _ADPREL_PRE2_SIZE                                   0x1
#define _ADPREL_PRE2_LENGTH                                 0x1
#define _ADPREL_PRE2_MASK                                   0x4
#define _ADPREL_PRE3_POSN                                   0x3
#define _ADPREL_PRE3_POSITION                               0x3
#define _ADPREL_PRE3_SIZE                                   0x1
#define _ADPREL_PRE3_LENGTH                                 0x1
#define _ADPREL_PRE3_MASK                                   0x8
#define _ADPREL_PRE4_POSN                                   0x4
#define _ADPREL_PRE4_POSITION                               0x4
#define _ADPREL_PRE4_SIZE                                   0x1
#define _ADPREL_PRE4_LENGTH                                 0x1
#define _ADPREL_PRE4_MASK                                   0x10
#define _ADPREL_PRE5_POSN                                   0x5
#define _ADPREL_PRE5_POSITION                               0x5
#define _ADPREL_PRE5_SIZE                                   0x1
#define _ADPREL_PRE5_LENGTH                                 0x1
#define _ADPREL_PRE5_MASK                                   0x20
#define _ADPREL_PRE6_POSN                                   0x6
#define _ADPREL_PRE6_POSITION                               0x6
#define _ADPREL_PRE6_SIZE                                   0x1
#define _ADPREL_PRE6_LENGTH                                 0x1
#define _ADPREL_PRE6_MASK                                   0x40
#define _ADPREL_PRE7_POSN                                   0x7
#define _ADPREL_PRE7_POSITION                               0x7
#define _ADPREL_PRE7_SIZE                                   0x1
#define _ADPREL_PRE7_LENGTH                                 0x1
#define _ADPREL_PRE7_MASK                                   0x80
#define _ADPREL_ADPRE_POSN                                  0x0
#define _ADPREL_ADPRE_POSITION                              0x0
#define _ADPREL_ADPRE_SIZE                                  0x8
#define _ADPREL_ADPRE_LENGTH                                0x8
#define _ADPREL_ADPRE_MASK                                  0xFF
#define _ADPREL_ADPRE0_POSN                                 0x0
#define _ADPREL_ADPRE0_POSITION                             0x0
#define _ADPREL_ADPRE0_SIZE                                 0x1
#define _ADPREL_ADPRE0_LENGTH                               0x1
#define _ADPREL_ADPRE0_MASK                                 0x1
#define _ADPREL_ADPRE1_POSN                                 0x1
#define _ADPREL_ADPRE1_POSITION                             0x1
#define _ADPREL_ADPRE1_SIZE                                 0x1
#define _ADPREL_ADPRE1_LENGTH                               0x1
#define _ADPREL_ADPRE1_MASK                                 0x2
#define _ADPREL_ADPRE2_POSN                                 0x2
#define _ADPREL_ADPRE2_POSITION                             0x2
#define _ADPREL_ADPRE2_SIZE                                 0x1
#define _ADPREL_ADPRE2_LENGTH                               0x1
#define _ADPREL_ADPRE2_MASK                                 0x4
#define _ADPREL_ADPRE3_POSN                                 0x3
#define _ADPREL_ADPRE3_POSITION                             0x3
#define _ADPREL_ADPRE3_SIZE                                 0x1
#define _ADPREL_ADPRE3_LENGTH                               0x1
#define _ADPREL_ADPRE3_MASK                                 0x8
#define _ADPREL_ADPRE4_POSN                                 0x4
#define _ADPREL_ADPRE4_POSITION                             0x4
#define _ADPREL_ADPRE4_SIZE                                 0x1
#define _ADPREL_ADPRE4_LENGTH                               0x1
#define _ADPREL_ADPRE4_MASK                                 0x10
#define _ADPREL_ADPRE5_POSN                                 0x5
#define _ADPREL_ADPRE5_POSITION                             0x5
#define _ADPREL_ADPRE5_SIZE                                 0x1
#define _ADPREL_ADPRE5_LENGTH                               0x1
#define _ADPREL_ADPRE5_MASK                                 0x20
#define _ADPREL_ADPRE6_POSN                                 0x6
#define _ADPREL_ADPRE6_POSITION                             0x6
#define _ADPREL_ADPRE6_SIZE                                 0x1
#define _ADPREL_ADPRE6_LENGTH                               0x1
#define _ADPREL_ADPRE6_MASK                                 0x40
#define _ADPREL_ADPRE7_POSN                                 0x7
#define _ADPREL_ADPRE7_POSITION                             0x7
#define _ADPREL_ADPRE7_SIZE                                 0x1
#define _ADPREL_ADPRE7_LENGTH                               0x1
#define _ADPREL_ADPRE7_MASK                                 0x80

// Register: ADPREH
#define ADPREH ADPREH
extern volatile unsigned char           ADPREH              __at(0x3EF7);
#ifndef _LIB_BUILD
asm("ADPREH equ 03EF7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PRE                    :5;
    };
    struct {
        unsigned PRE8                   :1;
        unsigned PRE9                   :1;
        unsigned PRE10                  :1;
        unsigned PRE11                  :1;
        unsigned PRE12                  :1;
    };
    struct {
        unsigned ADPRE                  :5;
    };
    struct {
        unsigned ADPRE8                 :1;
        unsigned ADPRE9                 :1;
        unsigned ADPRE10                :1;
        unsigned ADPRE11                :1;
        unsigned ADPRE12                :1;
    };
} ADPREHbits_t;
extern volatile ADPREHbits_t ADPREHbits __at(0x3EF7);
// bitfield macros
#define _ADPREH_PRE_POSN                                    0x0
#define _ADPREH_PRE_POSITION                                0x0
#define _ADPREH_PRE_SIZE                                    0x5
#define _ADPREH_PRE_LENGTH                                  0x5
#define _ADPREH_PRE_MASK                                    0x1F
#define _ADPREH_PRE8_POSN                                   0x0
#define _ADPREH_PRE8_POSITION                               0x0
#define _ADPREH_PRE8_SIZE                                   0x1
#define _ADPREH_PRE8_LENGTH                                 0x1
#define _ADPREH_PRE8_MASK                                   0x1
#define _ADPREH_PRE9_POSN                                   0x1
#define _ADPREH_PRE9_POSITION                               0x1
#define _ADPREH_PRE9_SIZE                                   0x1
#define _ADPREH_PRE9_LENGTH                                 0x1
#define _ADPREH_PRE9_MASK                                   0x2
#define _ADPREH_PRE10_POSN                                  0x2
#define _ADPREH_PRE10_POSITION                              0x2
#define _ADPREH_PRE10_SIZE                                  0x1
#define _ADPREH_PRE10_LENGTH                                0x1
#define _ADPREH_PRE10_MASK                                  0x4
#define _ADPREH_PRE11_POSN                                  0x3
#define _ADPREH_PRE11_POSITION                              0x3
#define _ADPREH_PRE11_SIZE                                  0x1
#define _ADPREH_PRE11_LENGTH                                0x1
#define _ADPREH_PRE11_MASK                                  0x8
#define _ADPREH_PRE12_POSN                                  0x4
#define _ADPREH_PRE12_POSITION                              0x4
#define _ADPREH_PRE12_SIZE                                  0x1
#define _ADPREH_PRE12_LENGTH                                0x1
#define _ADPREH_PRE12_MASK                                  0x10
#define _ADPREH_ADPRE_POSN                                  0x0
#define _ADPREH_ADPRE_POSITION                              0x0
#define _ADPREH_ADPRE_SIZE                                  0x5
#define _ADPREH_ADPRE_LENGTH                                0x5
#define _ADPREH_ADPRE_MASK                                  0x1F
#define _ADPREH_ADPRE8_POSN                                 0x0
#define _ADPREH_ADPRE8_POSITION                             0x0
#define _ADPREH_ADPRE8_SIZE                                 0x1
#define _ADPREH_ADPRE8_LENGTH                               0x1
#define _ADPREH_ADPRE8_MASK                                 0x1
#define _ADPREH_ADPRE9_POSN                                 0x1
#define _ADPREH_ADPRE9_POSITION                             0x1
#define _ADPREH_ADPRE9_SIZE                                 0x1
#define _ADPREH_ADPRE9_LENGTH                               0x1
#define _ADPREH_ADPRE9_MASK                                 0x2
#define _ADPREH_ADPRE10_POSN                                0x2
#define _ADPREH_ADPRE10_POSITION                            0x2
#define _ADPREH_ADPRE10_SIZE                                0x1
#define _ADPREH_ADPRE10_LENGTH                              0x1
#define _ADPREH_ADPRE10_MASK                                0x4
#define _ADPREH_ADPRE11_POSN                                0x3
#define _ADPREH_ADPRE11_POSITION                            0x3
#define _ADPREH_ADPRE11_SIZE                                0x1
#define _ADPREH_ADPRE11_LENGTH                              0x1
#define _ADPREH_ADPRE11_MASK                                0x8
#define _ADPREH_ADPRE12_POSN                                0x4
#define _ADPREH_ADPRE12_POSITION                            0x4
#define _ADPREH_ADPRE12_SIZE                                0x1
#define _ADPREH_ADPRE12_LENGTH                              0x1
#define _ADPREH_ADPRE12_MASK                                0x10

// Register: ADCON0
#define ADCON0 ADCON0
extern volatile unsigned char           ADCON0              __at(0x3EF8);
#ifndef _LIB_BUILD
asm("ADCON0 equ 03EF8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned GO                     :1;
        unsigned                        :1;
        unsigned FM                     :2;
        unsigned CS                     :1;
        unsigned                        :1;
        unsigned CONT                   :1;
        unsigned ON                     :1;
    };
    struct {
        unsigned ADGO                   :1;
        unsigned                        :1;
        unsigned ADFM                   :2;
        unsigned ADCS                   :1;
        unsigned                        :1;
        unsigned ADCONT                 :1;
        unsigned ADON                   :1;
    };
    struct {
        unsigned DONE                   :1;
        unsigned                        :1;
        unsigned FM0                    :1;
    };
    struct {
        unsigned GO_NOT_DONE            :1;
    };
    struct {
        unsigned GO_nDONE               :1;
        unsigned                        :1;
        unsigned ADFM0                  :1;
    };
} ADCON0bits_t;
extern volatile ADCON0bits_t ADCON0bits __at(0x3EF8);
// bitfield macros
#define _ADCON0_GO_POSN                                     0x0
#define _ADCON0_GO_POSITION                                 0x0
#define _ADCON0_GO_SIZE                                     0x1
#define _ADCON0_GO_LENGTH                                   0x1
#define _ADCON0_GO_MASK                                     0x1
#define _ADCON0_FM_POSN                                     0x2
#define _ADCON0_FM_POSITION                                 0x2
#define _ADCON0_FM_SIZE                                     0x2
#define _ADCON0_FM_LENGTH                                   0x2
#define _ADCON0_FM_MASK                                     0xC
#define _ADCON0_CS_POSN                                     0x4
#define _ADCON0_CS_POSITION                                 0x4
#define _ADCON0_CS_SIZE                                     0x1
#define _ADCON0_CS_LENGTH                                   0x1
#define _ADCON0_CS_MASK                                     0x10
#define _ADCON0_CONT_POSN                                   0x6
#define _ADCON0_CONT_POSITION                               0x6
#define _ADCON0_CONT_SIZE                                   0x1
#define _ADCON0_CONT_LENGTH                                 0x1
#define _ADCON0_CONT_MASK                                   0x40
#define _ADCON0_ON_POSN                                     0x7
#define _ADCON0_ON_POSITION                                 0x7
#define _ADCON0_ON_SIZE                                     0x1
#define _ADCON0_ON_LENGTH                                   0x1
#define _ADCON0_ON_MASK                                     0x80
#define _ADCON0_ADGO_POSN                                   0x0
#define _ADCON0_ADGO_POSITION                               0x0
#define _ADCON0_ADGO_SIZE                                   0x1
#define _ADCON0_ADGO_LENGTH                                 0x1
#define _ADCON0_ADGO_MASK                                   0x1
#define _ADCON0_ADFM_POSN                                   0x2
#define _ADCON0_ADFM_POSITION                               0x2
#define _ADCON0_ADFM_SIZE                                   0x2
#define _ADCON0_ADFM_LENGTH                                 0x2
#define _ADCON0_ADFM_MASK                                   0xC
#define _ADCON0_ADCS_POSN                                   0x4
#define _ADCON0_ADCS_POSITION                               0x4
#define _ADCON0_ADCS_SIZE                                   0x1
#define _ADCON0_ADCS_LENGTH                                 0x1
#define _ADCON0_ADCS_MASK                                   0x10
#define _ADCON0_ADCONT_POSN                                 0x6
#define _ADCON0_ADCONT_POSITION                             0x6
#define _ADCON0_ADCONT_SIZE                                 0x1
#define _ADCON0_ADCONT_LENGTH                               0x1
#define _ADCON0_ADCONT_MASK                                 0x40
#define _ADCON0_ADON_POSN                                   0x7
#define _ADCON0_ADON_POSITION                               0x7
#define _ADCON0_ADON_SIZE                                   0x1
#define _ADCON0_ADON_LENGTH                                 0x1
#define _ADCON0_ADON_MASK                                   0x80
#define _ADCON0_DONE_POSN                                   0x0
#define _ADCON0_DONE_POSITION                               0x0
#define _ADCON0_DONE_SIZE                                   0x1
#define _ADCON0_DONE_LENGTH                                 0x1
#define _ADCON0_DONE_MASK                                   0x1
#define _ADCON0_FM0_POSN                                    0x2
#define _ADCON0_FM0_POSITION                                0x2
#define _ADCON0_FM0_SIZE                                    0x1
#define _ADCON0_FM0_LENGTH                                  0x1
#define _ADCON0_FM0_MASK                                    0x4
#define _ADCON0_GO_NOT_DONE_POSN                            0x0
#define _ADCON0_GO_NOT_DONE_POSITION                        0x0
#define _ADCON0_GO_NOT_DONE_SIZE                            0x1
#define _ADCON0_GO_NOT_DONE_LENGTH                          0x1
#define _ADCON0_GO_NOT_DONE_MASK                            0x1
#define _ADCON0_GO_nDONE_POSN                               0x0
#define _ADCON0_GO_nDONE_POSITION                           0x0
#define _ADCON0_GO_nDONE_SIZE                               0x1
#define _ADCON0_GO_nDONE_LENGTH                             0x1
#define _ADCON0_GO_nDONE_MASK                               0x1
#define _ADCON0_ADFM0_POSN                                  0x2
#define _ADCON0_ADFM0_POSITION                              0x2
#define _ADCON0_ADFM0_SIZE                                  0x1
#define _ADCON0_ADFM0_LENGTH                                0x1
#define _ADCON0_ADFM0_MASK                                  0x4

// Register: ADCON1
#define ADCON1 ADCON1
extern volatile unsigned char           ADCON1              __at(0x3EF9);
#ifndef _LIB_BUILD
asm("ADCON1 equ 03EF9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DSEN                   :1;
        unsigned                        :4;
        unsigned GPOL                   :1;
        unsigned IPEN                   :1;
        unsigned PPOL                   :1;
    };
    struct {
        unsigned ADDSEN                 :1;
        unsigned                        :4;
        unsigned ADGPOL                 :1;
        unsigned ADIPEN                 :1;
        unsigned ADPPOL                 :1;
    };
} ADCON1bits_t;
extern volatile ADCON1bits_t ADCON1bits __at(0x3EF9);
// bitfield macros
#define _ADCON1_DSEN_POSN                                   0x0
#define _ADCON1_DSEN_POSITION                               0x0
#define _ADCON1_DSEN_SIZE                                   0x1
#define _ADCON1_DSEN_LENGTH                                 0x1
#define _ADCON1_DSEN_MASK                                   0x1
#define _ADCON1_GPOL_POSN                                   0x5
#define _ADCON1_GPOL_POSITION                               0x5
#define _ADCON1_GPOL_SIZE                                   0x1
#define _ADCON1_GPOL_LENGTH                                 0x1
#define _ADCON1_GPOL_MASK                                   0x20
#define _ADCON1_IPEN_POSN                                   0x6
#define _ADCON1_IPEN_POSITION                               0x6
#define _ADCON1_IPEN_SIZE                                   0x1
#define _ADCON1_IPEN_LENGTH                                 0x1
#define _ADCON1_IPEN_MASK                                   0x40
#define _ADCON1_PPOL_POSN                                   0x7
#define _ADCON1_PPOL_POSITION                               0x7
#define _ADCON1_PPOL_SIZE                                   0x1
#define _ADCON1_PPOL_LENGTH                                 0x1
#define _ADCON1_PPOL_MASK                                   0x80
#define _ADCON1_ADDSEN_POSN                                 0x0
#define _ADCON1_ADDSEN_POSITION                             0x0
#define _ADCON1_ADDSEN_SIZE                                 0x1
#define _ADCON1_ADDSEN_LENGTH                               0x1
#define _ADCON1_ADDSEN_MASK                                 0x1
#define _ADCON1_ADGPOL_POSN                                 0x5
#define _ADCON1_ADGPOL_POSITION                             0x5
#define _ADCON1_ADGPOL_SIZE                                 0x1
#define _ADCON1_ADGPOL_LENGTH                               0x1
#define _ADCON1_ADGPOL_MASK                                 0x20
#define _ADCON1_ADIPEN_POSN                                 0x6
#define _ADCON1_ADIPEN_POSITION                             0x6
#define _ADCON1_ADIPEN_SIZE                                 0x1
#define _ADCON1_ADIPEN_LENGTH                               0x1
#define _ADCON1_ADIPEN_MASK                                 0x40
#define _ADCON1_ADPPOL_POSN                                 0x7
#define _ADCON1_ADPPOL_POSITION                             0x7
#define _ADCON1_ADPPOL_SIZE                                 0x1
#define _ADCON1_ADPPOL_LENGTH                               0x1
#define _ADCON1_ADPPOL_MASK                                 0x80

// Register: ADCON2
#define ADCON2 ADCON2
extern volatile unsigned char           ADCON2              __at(0x3EFA);
#ifndef _LIB_BUILD
asm("ADCON2 equ 03EFAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :3;
        unsigned ACLR                   :1;
        unsigned CRS                    :3;
        unsigned PSIS                   :1;
    };
    struct {
        unsigned ADMD0                  :1;
        unsigned ADMD1                  :1;
        unsigned ADMD2                  :1;
        unsigned ADACLR                 :1;
        unsigned ADCRS0                 :1;
        unsigned ADCRS1                 :1;
        unsigned ADCRS2                 :1;
        unsigned ADPSIS                 :1;
    };
    struct {
        unsigned ADMD                   :3;
        unsigned                        :1;
        unsigned ADCRS                  :3;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned                        :1;
        unsigned CRS0                   :1;
        unsigned CRS1                   :1;
        unsigned CRS2                   :1;
    };
    struct {
        unsigned MD                     :3;
    };
    struct {
        unsigned MD0                    :1;
        unsigned MD1                    :1;
        unsigned MD2                    :1;
    };
    struct {
        unsigned ADMODE                 :3;
    };
} ADCON2bits_t;
extern volatile ADCON2bits_t ADCON2bits __at(0x3EFA);
// bitfield macros
#define _ADCON2_MODE_POSN                                   0x0
#define _ADCON2_MODE_POSITION                               0x0
#define _ADCON2_MODE_SIZE                                   0x3
#define _ADCON2_MODE_LENGTH                                 0x3
#define _ADCON2_MODE_MASK                                   0x7
#define _ADCON2_ACLR_POSN                                   0x3
#define _ADCON2_ACLR_POSITION                               0x3
#define _ADCON2_ACLR_SIZE                                   0x1
#define _ADCON2_ACLR_LENGTH                                 0x1
#define _ADCON2_ACLR_MASK                                   0x8
#define _ADCON2_CRS_POSN                                    0x4
#define _ADCON2_CRS_POSITION                                0x4
#define _ADCON2_CRS_SIZE                                    0x3
#define _ADCON2_CRS_LENGTH                                  0x3
#define _ADCON2_CRS_MASK                                    0x70
#define _ADCON2_PSIS_POSN                                   0x7
#define _ADCON2_PSIS_POSITION                               0x7
#define _ADCON2_PSIS_SIZE                                   0x1
#define _ADCON2_PSIS_LENGTH                                 0x1
#define _ADCON2_PSIS_MASK                                   0x80
#define _ADCON2_ADMD0_POSN                                  0x0
#define _ADCON2_ADMD0_POSITION                              0x0
#define _ADCON2_ADMD0_SIZE                                  0x1
#define _ADCON2_ADMD0_LENGTH                                0x1
#define _ADCON2_ADMD0_MASK                                  0x1
#define _ADCON2_ADMD1_POSN                                  0x1
#define _ADCON2_ADMD1_POSITION                              0x1
#define _ADCON2_ADMD1_SIZE                                  0x1
#define _ADCON2_ADMD1_LENGTH                                0x1
#define _ADCON2_ADMD1_MASK                                  0x2
#define _ADCON2_ADMD2_POSN                                  0x2
#define _ADCON2_ADMD2_POSITION                              0x2
#define _ADCON2_ADMD2_SIZE                                  0x1
#define _ADCON2_ADMD2_LENGTH                                0x1
#define _ADCON2_ADMD2_MASK                                  0x4
#define _ADCON2_ADACLR_POSN                                 0x3
#define _ADCON2_ADACLR_POSITION                             0x3
#define _ADCON2_ADACLR_SIZE                                 0x1
#define _ADCON2_ADACLR_LENGTH                               0x1
#define _ADCON2_ADACLR_MASK                                 0x8
#define _ADCON2_ADCRS0_POSN                                 0x4
#define _ADCON2_ADCRS0_POSITION                             0x4
#define _ADCON2_ADCRS0_SIZE                                 0x1
#define _ADCON2_ADCRS0_LENGTH                               0x1
#define _ADCON2_ADCRS0_MASK                                 0x10
#define _ADCON2_ADCRS1_POSN                                 0x5
#define _ADCON2_ADCRS1_POSITION                             0x5
#define _ADCON2_ADCRS1_SIZE                                 0x1
#define _ADCON2_ADCRS1_LENGTH                               0x1
#define _ADCON2_ADCRS1_MASK                                 0x20
#define _ADCON2_ADCRS2_POSN                                 0x6
#define _ADCON2_ADCRS2_POSITION                             0x6
#define _ADCON2_ADCRS2_SIZE                                 0x1
#define _ADCON2_ADCRS2_LENGTH                               0x1
#define _ADCON2_ADCRS2_MASK                                 0x40
#define _ADCON2_ADPSIS_POSN                                 0x7
#define _ADCON2_ADPSIS_POSITION                             0x7
#define _ADCON2_ADPSIS_SIZE                                 0x1
#define _ADCON2_ADPSIS_LENGTH                               0x1
#define _ADCON2_ADPSIS_MASK                                 0x80
#define _ADCON2_ADMD_POSN                                   0x0
#define _ADCON2_ADMD_POSITION                               0x0
#define _ADCON2_ADMD_SIZE                                   0x3
#define _ADCON2_ADMD_LENGTH                                 0x3
#define _ADCON2_ADMD_MASK                                   0x7
#define _ADCON2_ADCRS_POSN                                  0x4
#define _ADCON2_ADCRS_POSITION                              0x4
#define _ADCON2_ADCRS_SIZE                                  0x3
#define _ADCON2_ADCRS_LENGTH                                0x3
#define _ADCON2_ADCRS_MASK                                  0x70
#define _ADCON2_MODE0_POSN                                  0x0
#define _ADCON2_MODE0_POSITION                              0x0
#define _ADCON2_MODE0_SIZE                                  0x1
#define _ADCON2_MODE0_LENGTH                                0x1
#define _ADCON2_MODE0_MASK                                  0x1
#define _ADCON2_MODE1_POSN                                  0x1
#define _ADCON2_MODE1_POSITION                              0x1
#define _ADCON2_MODE1_SIZE                                  0x1
#define _ADCON2_MODE1_LENGTH                                0x1
#define _ADCON2_MODE1_MASK                                  0x2
#define _ADCON2_MODE2_POSN                                  0x2
#define _ADCON2_MODE2_POSITION                              0x2
#define _ADCON2_MODE2_SIZE                                  0x1
#define _ADCON2_MODE2_LENGTH                                0x1
#define _ADCON2_MODE2_MASK                                  0x4
#define _ADCON2_CRS0_POSN                                   0x4
#define _ADCON2_CRS0_POSITION                               0x4
#define _ADCON2_CRS0_SIZE                                   0x1
#define _ADCON2_CRS0_LENGTH                                 0x1
#define _ADCON2_CRS0_MASK                                   0x10
#define _ADCON2_CRS1_POSN                                   0x5
#define _ADCON2_CRS1_POSITION                               0x5
#define _ADCON2_CRS1_SIZE                                   0x1
#define _ADCON2_CRS1_LENGTH                                 0x1
#define _ADCON2_CRS1_MASK                                   0x20
#define _ADCON2_CRS2_POSN                                   0x6
#define _ADCON2_CRS2_POSITION                               0x6
#define _ADCON2_CRS2_SIZE                                   0x1
#define _ADCON2_CRS2_LENGTH                                 0x1
#define _ADCON2_CRS2_MASK                                   0x40
#define _ADCON2_MD_POSN                                     0x0
#define _ADCON2_MD_POSITION                                 0x0
#define _ADCON2_MD_SIZE                                     0x3
#define _ADCON2_MD_LENGTH                                   0x3
#define _ADCON2_MD_MASK                                     0x7
#define _ADCON2_MD0_POSN                                    0x0
#define _ADCON2_MD0_POSITION                                0x0
#define _ADCON2_MD0_SIZE                                    0x1
#define _ADCON2_MD0_LENGTH                                  0x1
#define _ADCON2_MD0_MASK                                    0x1
#define _ADCON2_MD1_POSN                                    0x1
#define _ADCON2_MD1_POSITION                                0x1
#define _ADCON2_MD1_SIZE                                    0x1
#define _ADCON2_MD1_LENGTH                                  0x1
#define _ADCON2_MD1_MASK                                    0x2
#define _ADCON2_MD2_POSN                                    0x2
#define _ADCON2_MD2_POSITION                                0x2
#define _ADCON2_MD2_SIZE                                    0x1
#define _ADCON2_MD2_LENGTH                                  0x1
#define _ADCON2_MD2_MASK                                    0x4
#define _ADCON2_ADMODE_POSN                                 0x0
#define _ADCON2_ADMODE_POSITION                             0x0
#define _ADCON2_ADMODE_SIZE                                 0x3
#define _ADCON2_ADMODE_LENGTH                               0x3
#define _ADCON2_ADMODE_MASK                                 0x7

// Register: ADCON3
#define ADCON3 ADCON3
extern volatile unsigned char           ADCON3              __at(0x3EFB);
#ifndef _LIB_BUILD
asm("ADCON3 equ 03EFBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMD                    :3;
        unsigned SOI                    :1;
        unsigned CALC                   :3;
    };
    struct {
        unsigned ADTMD0                 :1;
        unsigned ADTMD1                 :1;
        unsigned ADTMD2                 :1;
        unsigned ADSOI                  :1;
        unsigned ADCALC0                :1;
        unsigned ADCALC1                :1;
        unsigned ADCALC2                :1;
    };
    struct {
        unsigned ADTMD                  :3;
        unsigned                        :1;
        unsigned ADCALC                 :3;
    };
    struct {
        unsigned TMD0                   :1;
        unsigned TMD1                   :1;
        unsigned TMD2                   :1;
        unsigned                        :1;
        unsigned CALC0                  :1;
        unsigned CALC1                  :1;
        unsigned CALC2                  :1;
    };
} ADCON3bits_t;
extern volatile ADCON3bits_t ADCON3bits __at(0x3EFB);
// bitfield macros
#define _ADCON3_TMD_POSN                                    0x0
#define _ADCON3_TMD_POSITION                                0x0
#define _ADCON3_TMD_SIZE                                    0x3
#define _ADCON3_TMD_LENGTH                                  0x3
#define _ADCON3_TMD_MASK                                    0x7
#define _ADCON3_SOI_POSN                                    0x3
#define _ADCON3_SOI_POSITION                                0x3
#define _ADCON3_SOI_SIZE                                    0x1
#define _ADCON3_SOI_LENGTH                                  0x1
#define _ADCON3_SOI_MASK                                    0x8
#define _ADCON3_CALC_POSN                                   0x4
#define _ADCON3_CALC_POSITION                               0x4
#define _ADCON3_CALC_SIZE                                   0x3
#define _ADCON3_CALC_LENGTH                                 0x3
#define _ADCON3_CALC_MASK                                   0x70
#define _ADCON3_ADTMD0_POSN                                 0x0
#define _ADCON3_ADTMD0_POSITION                             0x0
#define _ADCON3_ADTMD0_SIZE                                 0x1
#define _ADCON3_ADTMD0_LENGTH                               0x1
#define _ADCON3_ADTMD0_MASK                                 0x1
#define _ADCON3_ADTMD1_POSN                                 0x1
#define _ADCON3_ADTMD1_POSITION                             0x1
#define _ADCON3_ADTMD1_SIZE                                 0x1
#define _ADCON3_ADTMD1_LENGTH                               0x1
#define _ADCON3_ADTMD1_MASK                                 0x2
#define _ADCON3_ADTMD2_POSN                                 0x2
#define _ADCON3_ADTMD2_POSITION                             0x2
#define _ADCON3_ADTMD2_SIZE                                 0x1
#define _ADCON3_ADTMD2_LENGTH                               0x1
#define _ADCON3_ADTMD2_MASK                                 0x4
#define _ADCON3_ADSOI_POSN                                  0x3
#define _ADCON3_ADSOI_POSITION                              0x3
#define _ADCON3_ADSOI_SIZE                                  0x1
#define _ADCON3_ADSOI_LENGTH                                0x1
#define _ADCON3_ADSOI_MASK                                  0x8
#define _ADCON3_ADCALC0_POSN                                0x4
#define _ADCON3_ADCALC0_POSITION                            0x4
#define _ADCON3_ADCALC0_SIZE                                0x1
#define _ADCON3_ADCALC0_LENGTH                              0x1
#define _ADCON3_ADCALC0_MASK                                0x10
#define _ADCON3_ADCALC1_POSN                                0x5
#define _ADCON3_ADCALC1_POSITION                            0x5
#define _ADCON3_ADCALC1_SIZE                                0x1
#define _ADCON3_ADCALC1_LENGTH                              0x1
#define _ADCON3_ADCALC1_MASK                                0x20
#define _ADCON3_ADCALC2_POSN                                0x6
#define _ADCON3_ADCALC2_POSITION                            0x6
#define _ADCON3_ADCALC2_SIZE                                0x1
#define _ADCON3_ADCALC2_LENGTH                              0x1
#define _ADCON3_ADCALC2_MASK                                0x40
#define _ADCON3_ADTMD_POSN                                  0x0
#define _ADCON3_ADTMD_POSITION                              0x0
#define _ADCON3_ADTMD_SIZE                                  0x3
#define _ADCON3_ADTMD_LENGTH                                0x3
#define _ADCON3_ADTMD_MASK                                  0x7
#define _ADCON3_ADCALC_POSN                                 0x4
#define _ADCON3_ADCALC_POSITION                             0x4
#define _ADCON3_ADCALC_SIZE                                 0x3
#define _ADCON3_ADCALC_LENGTH                               0x3
#define _ADCON3_ADCALC_MASK                                 0x70
#define _ADCON3_TMD0_POSN                                   0x0
#define _ADCON3_TMD0_POSITION                               0x0
#define _ADCON3_TMD0_SIZE                                   0x1
#define _ADCON3_TMD0_LENGTH                                 0x1
#define _ADCON3_TMD0_MASK                                   0x1
#define _ADCON3_TMD1_POSN                                   0x1
#define _ADCON3_TMD1_POSITION                               0x1
#define _ADCON3_TMD1_SIZE                                   0x1
#define _ADCON3_TMD1_LENGTH                                 0x1
#define _ADCON3_TMD1_MASK                                   0x2
#define _ADCON3_TMD2_POSN                                   0x2
#define _ADCON3_TMD2_POSITION                               0x2
#define _ADCON3_TMD2_SIZE                                   0x1
#define _ADCON3_TMD2_LENGTH                                 0x1
#define _ADCON3_TMD2_MASK                                   0x4
#define _ADCON3_CALC0_POSN                                  0x4
#define _ADCON3_CALC0_POSITION                              0x4
#define _ADCON3_CALC0_SIZE                                  0x1
#define _ADCON3_CALC0_LENGTH                                0x1
#define _ADCON3_CALC0_MASK                                  0x10
#define _ADCON3_CALC1_POSN                                  0x5
#define _ADCON3_CALC1_POSITION                              0x5
#define _ADCON3_CALC1_SIZE                                  0x1
#define _ADCON3_CALC1_LENGTH                                0x1
#define _ADCON3_CALC1_MASK                                  0x20
#define _ADCON3_CALC2_POSN                                  0x6
#define _ADCON3_CALC2_POSITION                              0x6
#define _ADCON3_CALC2_SIZE                                  0x1
#define _ADCON3_CALC2_LENGTH                                0x1
#define _ADCON3_CALC2_MASK                                  0x40

// Register: ADSTAT
#define ADSTAT ADSTAT
extern volatile unsigned char           ADSTAT              __at(0x3EFC);
#ifndef _LIB_BUILD
asm("ADSTAT equ 03EFCh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned STAT                   :3;
        unsigned                        :1;
        unsigned MATH                   :1;
        unsigned LTHR                   :1;
        unsigned UTHR                   :1;
        unsigned OV                     :1;
    };
    struct {
        unsigned ADSTAT0                :1;
        unsigned ADSTAT1                :1;
        unsigned ADSTAT2                :1;
        unsigned                        :1;
        unsigned ADMATH                 :1;
        unsigned ADLTHR                 :1;
        unsigned ADUTHR                 :1;
        unsigned ADAOV                  :1;
    };
    struct {
        unsigned ADSTAT                 :3;
        unsigned                        :4;
        unsigned ADOV                   :1;
    };
    struct {
        unsigned STAT0                  :1;
        unsigned STAT1                  :1;
        unsigned STAT2                  :1;
    };
} ADSTATbits_t;
extern volatile ADSTATbits_t ADSTATbits __at(0x3EFC);
// bitfield macros
#define _ADSTAT_STAT_POSN                                   0x0
#define _ADSTAT_STAT_POSITION                               0x0
#define _ADSTAT_STAT_SIZE                                   0x3
#define _ADSTAT_STAT_LENGTH                                 0x3
#define _ADSTAT_STAT_MASK                                   0x7
#define _ADSTAT_MATH_POSN                                   0x4
#define _ADSTAT_MATH_POSITION                               0x4
#define _ADSTAT_MATH_SIZE                                   0x1
#define _ADSTAT_MATH_LENGTH                                 0x1
#define _ADSTAT_MATH_MASK                                   0x10
#define _ADSTAT_LTHR_POSN                                   0x5
#define _ADSTAT_LTHR_POSITION                               0x5
#define _ADSTAT_LTHR_SIZE                                   0x1
#define _ADSTAT_LTHR_LENGTH                                 0x1
#define _ADSTAT_LTHR_MASK                                   0x20
#define _ADSTAT_UTHR_POSN                                   0x6
#define _ADSTAT_UTHR_POSITION                               0x6
#define _ADSTAT_UTHR_SIZE                                   0x1
#define _ADSTAT_UTHR_LENGTH                                 0x1
#define _ADSTAT_UTHR_MASK                                   0x40
#define _ADSTAT_OV_POSN                                     0x7
#define _ADSTAT_OV_POSITION                                 0x7
#define _ADSTAT_OV_SIZE                                     0x1
#define _ADSTAT_OV_LENGTH                                   0x1
#define _ADSTAT_OV_MASK                                     0x80
#define _ADSTAT_ADSTAT0_POSN                                0x0
#define _ADSTAT_ADSTAT0_POSITION                            0x0
#define _ADSTAT_ADSTAT0_SIZE                                0x1
#define _ADSTAT_ADSTAT0_LENGTH                              0x1
#define _ADSTAT_ADSTAT0_MASK                                0x1
#define _ADSTAT_ADSTAT1_POSN                                0x1
#define _ADSTAT_ADSTAT1_POSITION                            0x1
#define _ADSTAT_ADSTAT1_SIZE                                0x1
#define _ADSTAT_ADSTAT1_LENGTH                              0x1
#define _ADSTAT_ADSTAT1_MASK                                0x2
#define _ADSTAT_ADSTAT2_POSN                                0x2
#define _ADSTAT_ADSTAT2_POSITION                            0x2
#define _ADSTAT_ADSTAT2_SIZE                                0x1
#define _ADSTAT_ADSTAT2_LENGTH                              0x1
#define _ADSTAT_ADSTAT2_MASK                                0x4
#define _ADSTAT_ADMATH_POSN                                 0x4
#define _ADSTAT_ADMATH_POSITION                             0x4
#define _ADSTAT_ADMATH_SIZE                                 0x1
#define _ADSTAT_ADMATH_LENGTH                               0x1
#define _ADSTAT_ADMATH_MASK                                 0x10
#define _ADSTAT_ADLTHR_POSN                                 0x5
#define _ADSTAT_ADLTHR_POSITION                             0x5
#define _ADSTAT_ADLTHR_SIZE                                 0x1
#define _ADSTAT_ADLTHR_LENGTH                               0x1
#define _ADSTAT_ADLTHR_MASK                                 0x20
#define _ADSTAT_ADUTHR_POSN                                 0x6
#define _ADSTAT_ADUTHR_POSITION                             0x6
#define _ADSTAT_ADUTHR_SIZE                                 0x1
#define _ADSTAT_ADUTHR_LENGTH                               0x1
#define _ADSTAT_ADUTHR_MASK                                 0x40
#define _ADSTAT_ADAOV_POSN                                  0x7
#define _ADSTAT_ADAOV_POSITION                              0x7
#define _ADSTAT_ADAOV_SIZE                                  0x1
#define _ADSTAT_ADAOV_LENGTH                                0x1
#define _ADSTAT_ADAOV_MASK                                  0x80
#define _ADSTAT_ADSTAT_POSN                                 0x0
#define _ADSTAT_ADSTAT_POSITION                             0x0
#define _ADSTAT_ADSTAT_SIZE                                 0x3
#define _ADSTAT_ADSTAT_LENGTH                               0x3
#define _ADSTAT_ADSTAT_MASK                                 0x7
#define _ADSTAT_ADOV_POSN                                   0x7
#define _ADSTAT_ADOV_POSITION                               0x7
#define _ADSTAT_ADOV_SIZE                                   0x1
#define _ADSTAT_ADOV_LENGTH                                 0x1
#define _ADSTAT_ADOV_MASK                                   0x80
#define _ADSTAT_STAT0_POSN                                  0x0
#define _ADSTAT_STAT0_POSITION                              0x0
#define _ADSTAT_STAT0_SIZE                                  0x1
#define _ADSTAT_STAT0_LENGTH                                0x1
#define _ADSTAT_STAT0_MASK                                  0x1
#define _ADSTAT_STAT1_POSN                                  0x1
#define _ADSTAT_STAT1_POSITION                              0x1
#define _ADSTAT_STAT1_SIZE                                  0x1
#define _ADSTAT_STAT1_LENGTH                                0x1
#define _ADSTAT_STAT1_MASK                                  0x2
#define _ADSTAT_STAT2_POSN                                  0x2
#define _ADSTAT_STAT2_POSITION                              0x2
#define _ADSTAT_STAT2_SIZE                                  0x1
#define _ADSTAT_STAT2_LENGTH                                0x1
#define _ADSTAT_STAT2_MASK                                  0x4

// Register: ADREF
#define ADREF ADREF
extern volatile unsigned char           ADREF               __at(0x3EFD);
#ifndef _LIB_BUILD
asm("ADREF equ 03EFDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PREF                   :4;
        unsigned NREF                   :4;
    };
    struct {
        unsigned ADPREF                 :4;
        unsigned ADNREF                 :4;
    };
    struct {
        unsigned PREF0                  :1;
        unsigned PREF1                  :1;
        unsigned                        :2;
        unsigned NREF0                  :1;
    };
    struct {
        unsigned ADPREF0                :1;
        unsigned ADPREF1                :1;
        unsigned                        :2;
        unsigned ADNREF0                :1;
    };
} ADREFbits_t;
extern volatile ADREFbits_t ADREFbits __at(0x3EFD);
// bitfield macros
#define _ADREF_PREF_POSN                                    0x0
#define _ADREF_PREF_POSITION                                0x0
#define _ADREF_PREF_SIZE                                    0x4
#define _ADREF_PREF_LENGTH                                  0x4
#define _ADREF_PREF_MASK                                    0xF
#define _ADREF_NREF_POSN                                    0x4
#define _ADREF_NREF_POSITION                                0x4
#define _ADREF_NREF_SIZE                                    0x4
#define _ADREF_NREF_LENGTH                                  0x4
#define _ADREF_NREF_MASK                                    0xF0
#define _ADREF_ADPREF_POSN                                  0x0
#define _ADREF_ADPREF_POSITION                              0x0
#define _ADREF_ADPREF_SIZE                                  0x4
#define _ADREF_ADPREF_LENGTH                                0x4
#define _ADREF_ADPREF_MASK                                  0xF
#define _ADREF_ADNREF_POSN                                  0x4
#define _ADREF_ADNREF_POSITION                              0x4
#define _ADREF_ADNREF_SIZE                                  0x4
#define _ADREF_ADNREF_LENGTH                                0x4
#define _ADREF_ADNREF_MASK                                  0xF0
#define _ADREF_PREF0_POSN                                   0x0
#define _ADREF_PREF0_POSITION                               0x0
#define _ADREF_PREF0_SIZE                                   0x1
#define _ADREF_PREF0_LENGTH                                 0x1
#define _ADREF_PREF0_MASK                                   0x1
#define _ADREF_PREF1_POSN                                   0x1
#define _ADREF_PREF1_POSITION                               0x1
#define _ADREF_PREF1_SIZE                                   0x1
#define _ADREF_PREF1_LENGTH                                 0x1
#define _ADREF_PREF1_MASK                                   0x2
#define _ADREF_NREF0_POSN                                   0x4
#define _ADREF_NREF0_POSITION                               0x4
#define _ADREF_NREF0_SIZE                                   0x1
#define _ADREF_NREF0_LENGTH                                 0x1
#define _ADREF_NREF0_MASK                                   0x10
#define _ADREF_ADPREF0_POSN                                 0x0
#define _ADREF_ADPREF0_POSITION                             0x0
#define _ADREF_ADPREF0_SIZE                                 0x1
#define _ADREF_ADPREF0_LENGTH                               0x1
#define _ADREF_ADPREF0_MASK                                 0x1
#define _ADREF_ADPREF1_POSN                                 0x1
#define _ADREF_ADPREF1_POSITION                             0x1
#define _ADREF_ADPREF1_SIZE                                 0x1
#define _ADREF_ADPREF1_LENGTH                               0x1
#define _ADREF_ADPREF1_MASK                                 0x2
#define _ADREF_ADNREF0_POSN                                 0x4
#define _ADREF_ADNREF0_POSITION                             0x4
#define _ADREF_ADNREF0_SIZE                                 0x1
#define _ADREF_ADNREF0_LENGTH                               0x1
#define _ADREF_ADNREF0_MASK                                 0x10

// Register: ADACT
#define ADACT ADACT
extern volatile unsigned char           ADACT               __at(0x3EFE);
#ifndef _LIB_BUILD
asm("ADACT equ 03EFEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ACT                    :5;
    };
    struct {
        unsigned ADACT0                 :1;
        unsigned ADACT1                 :1;
        unsigned ADACT2                 :1;
        unsigned ADACT3                 :1;
        unsigned ADACT4                 :1;
    };
    struct {
        unsigned ADACT                  :5;
    };
    struct {
        unsigned ACT0                   :1;
        unsigned ACT1                   :1;
        unsigned ACT2                   :1;
        unsigned ACT3                   :1;
        unsigned ACT4                   :1;
    };
} ADACTbits_t;
extern volatile ADACTbits_t ADACTbits __at(0x3EFE);
// bitfield macros
#define _ADACT_ACT_POSN                                     0x0
#define _ADACT_ACT_POSITION                                 0x0
#define _ADACT_ACT_SIZE                                     0x5
#define _ADACT_ACT_LENGTH                                   0x5
#define _ADACT_ACT_MASK                                     0x1F
#define _ADACT_ADACT0_POSN                                  0x0
#define _ADACT_ADACT0_POSITION                              0x0
#define _ADACT_ADACT0_SIZE                                  0x1
#define _ADACT_ADACT0_LENGTH                                0x1
#define _ADACT_ADACT0_MASK                                  0x1
#define _ADACT_ADACT1_POSN                                  0x1
#define _ADACT_ADACT1_POSITION                              0x1
#define _ADACT_ADACT1_SIZE                                  0x1
#define _ADACT_ADACT1_LENGTH                                0x1
#define _ADACT_ADACT1_MASK                                  0x2
#define _ADACT_ADACT2_POSN                                  0x2
#define _ADACT_ADACT2_POSITION                              0x2
#define _ADACT_ADACT2_SIZE                                  0x1
#define _ADACT_ADACT2_LENGTH                                0x1
#define _ADACT_ADACT2_MASK                                  0x4
#define _ADACT_ADACT3_POSN                                  0x3
#define _ADACT_ADACT3_POSITION                              0x3
#define _ADACT_ADACT3_SIZE                                  0x1
#define _ADACT_ADACT3_LENGTH                                0x1
#define _ADACT_ADACT3_MASK                                  0x8
#define _ADACT_ADACT4_POSN                                  0x4
#define _ADACT_ADACT4_POSITION                              0x4
#define _ADACT_ADACT4_SIZE                                  0x1
#define _ADACT_ADACT4_LENGTH                                0x1
#define _ADACT_ADACT4_MASK                                  0x10
#define _ADACT_ADACT_POSN                                   0x0
#define _ADACT_ADACT_POSITION                               0x0
#define _ADACT_ADACT_SIZE                                   0x5
#define _ADACT_ADACT_LENGTH                                 0x5
#define _ADACT_ADACT_MASK                                   0x1F
#define _ADACT_ACT0_POSN                                    0x0
#define _ADACT_ACT0_POSITION                                0x0
#define _ADACT_ACT0_SIZE                                    0x1
#define _ADACT_ACT0_LENGTH                                  0x1
#define _ADACT_ACT0_MASK                                    0x1
#define _ADACT_ACT1_POSN                                    0x1
#define _ADACT_ACT1_POSITION                                0x1
#define _ADACT_ACT1_SIZE                                    0x1
#define _ADACT_ACT1_LENGTH                                  0x1
#define _ADACT_ACT1_MASK                                    0x2
#define _ADACT_ACT2_POSN                                    0x2
#define _ADACT_ACT2_POSITION                                0x2
#define _ADACT_ACT2_SIZE                                    0x1
#define _ADACT_ACT2_LENGTH                                  0x1
#define _ADACT_ACT2_MASK                                    0x4
#define _ADACT_ACT3_POSN                                    0x3
#define _ADACT_ACT3_POSITION                                0x3
#define _ADACT_ACT3_SIZE                                    0x1
#define _ADACT_ACT3_LENGTH                                  0x1
#define _ADACT_ACT3_MASK                                    0x8
#define _ADACT_ACT4_POSN                                    0x4
#define _ADACT_ACT4_POSITION                                0x4
#define _ADACT_ACT4_SIZE                                    0x1
#define _ADACT_ACT4_LENGTH                                  0x1
#define _ADACT_ACT4_MASK                                    0x10

// Register: ADCLK
#define ADCLK ADCLK
extern volatile unsigned char           ADCLK               __at(0x3EFF);
#ifndef _LIB_BUILD
asm("ADCLK equ 03EFFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CS                     :6;
    };
    struct {
        unsigned ADCS0                  :1;
        unsigned ADCS1                  :1;
        unsigned ADCS2                  :1;
        unsigned ADCS3                  :1;
        unsigned ADCS4                  :1;
        unsigned ADCS5                  :1;
    };
    struct {
        unsigned ADCS                   :6;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
        unsigned CS4                    :1;
        unsigned CS5                    :1;
    };
} ADCLKbits_t;
extern volatile ADCLKbits_t ADCLKbits __at(0x3EFF);
// bitfield macros
#define _ADCLK_CS_POSN                                      0x0
#define _ADCLK_CS_POSITION                                  0x0
#define _ADCLK_CS_SIZE                                      0x6
#define _ADCLK_CS_LENGTH                                    0x6
#define _ADCLK_CS_MASK                                      0x3F
#define _ADCLK_ADCS0_POSN                                   0x0
#define _ADCLK_ADCS0_POSITION                               0x0
#define _ADCLK_ADCS0_SIZE                                   0x1
#define _ADCLK_ADCS0_LENGTH                                 0x1
#define _ADCLK_ADCS0_MASK                                   0x1
#define _ADCLK_ADCS1_POSN                                   0x1
#define _ADCLK_ADCS1_POSITION                               0x1
#define _ADCLK_ADCS1_SIZE                                   0x1
#define _ADCLK_ADCS1_LENGTH                                 0x1
#define _ADCLK_ADCS1_MASK                                   0x2
#define _ADCLK_ADCS2_POSN                                   0x2
#define _ADCLK_ADCS2_POSITION                               0x2
#define _ADCLK_ADCS2_SIZE                                   0x1
#define _ADCLK_ADCS2_LENGTH                                 0x1
#define _ADCLK_ADCS2_MASK                                   0x4
#define _ADCLK_ADCS3_POSN                                   0x3
#define _ADCLK_ADCS3_POSITION                               0x3
#define _ADCLK_ADCS3_SIZE                                   0x1
#define _ADCLK_ADCS3_LENGTH                                 0x1
#define _ADCLK_ADCS3_MASK                                   0x8
#define _ADCLK_ADCS4_POSN                                   0x4
#define _ADCLK_ADCS4_POSITION                               0x4
#define _ADCLK_ADCS4_SIZE                                   0x1
#define _ADCLK_ADCS4_LENGTH                                 0x1
#define _ADCLK_ADCS4_MASK                                   0x10
#define _ADCLK_ADCS5_POSN                                   0x5
#define _ADCLK_ADCS5_POSITION                               0x5
#define _ADCLK_ADCS5_SIZE                                   0x1
#define _ADCLK_ADCS5_LENGTH                                 0x1
#define _ADCLK_ADCS5_MASK                                   0x20
#define _ADCLK_ADCS_POSN                                    0x0
#define _ADCLK_ADCS_POSITION                                0x0
#define _ADCLK_ADCS_SIZE                                    0x6
#define _ADCLK_ADCS_LENGTH                                  0x6
#define _ADCLK_ADCS_MASK                                    0x3F
#define _ADCLK_CS0_POSN                                     0x0
#define _ADCLK_CS0_POSITION                                 0x0
#define _ADCLK_CS0_SIZE                                     0x1
#define _ADCLK_CS0_LENGTH                                   0x1
#define _ADCLK_CS0_MASK                                     0x1
#define _ADCLK_CS1_POSN                                     0x1
#define _ADCLK_CS1_POSITION                                 0x1
#define _ADCLK_CS1_SIZE                                     0x1
#define _ADCLK_CS1_LENGTH                                   0x1
#define _ADCLK_CS1_MASK                                     0x2
#define _ADCLK_CS2_POSN                                     0x2
#define _ADCLK_CS2_POSITION                                 0x2
#define _ADCLK_CS2_SIZE                                     0x1
#define _ADCLK_CS2_LENGTH                                   0x1
#define _ADCLK_CS2_MASK                                     0x4
#define _ADCLK_CS3_POSN                                     0x3
#define _ADCLK_CS3_POSITION                                 0x3
#define _ADCLK_CS3_SIZE                                     0x1
#define _ADCLK_CS3_LENGTH                                   0x1
#define _ADCLK_CS3_MASK                                     0x8
#define _ADCLK_CS4_POSN                                     0x4
#define _ADCLK_CS4_POSITION                                 0x4
#define _ADCLK_CS4_SIZE                                     0x1
#define _ADCLK_CS4_LENGTH                                   0x1
#define _ADCLK_CS4_MASK                                     0x10
#define _ADCLK_CS5_POSN                                     0x5
#define _ADCLK_CS5_POSITION                                 0x5
#define _ADCLK_CS5_SIZE                                     0x1
#define _ADCLK_CS5_LENGTH                                   0x1
#define _ADCLK_CS5_MASK                                     0x20

// Register: SMT1TMR
#define SMT1TMR SMT1TMR
#ifndef __CCI__
extern volatile __uint24                SMT1TMR             __at(0x3F12);
#endif
#ifndef _LIB_BUILD
asm("SMT1TMR equ 03F12h");
#endif

// Register: SMT1TMRL
#define SMT1TMRL SMT1TMRL
extern volatile unsigned char           SMT1TMRL            __at(0x3F12);
#ifndef _LIB_BUILD
asm("SMT1TMRL equ 03F12h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR                    :8;
    };
    struct {
        unsigned TMR0                   :1;
        unsigned TMR1                   :1;
        unsigned TMR2                   :1;
        unsigned TMR3                   :1;
        unsigned TMR4                   :1;
        unsigned TMR5                   :1;
        unsigned TMR6                   :1;
        unsigned TMR7                   :1;
    };
    struct {
        unsigned SMT1TMR                :8;
    };
    struct {
        unsigned SMT1TMR0               :1;
        unsigned SMT1TMR1               :1;
        unsigned SMT1TMR2               :1;
        unsigned SMT1TMR3               :1;
        unsigned SMT1TMR4               :1;
        unsigned SMT1TMR5               :1;
        unsigned SMT1TMR6               :1;
        unsigned SMT1TMR7               :1;
    };
} SMT1TMRLbits_t;
extern volatile SMT1TMRLbits_t SMT1TMRLbits __at(0x3F12);
// bitfield macros
#define _SMT1TMRL_TMR_POSN                                  0x0
#define _SMT1TMRL_TMR_POSITION                              0x0
#define _SMT1TMRL_TMR_SIZE                                  0x8
#define _SMT1TMRL_TMR_LENGTH                                0x8
#define _SMT1TMRL_TMR_MASK                                  0xFF
#define _SMT1TMRL_TMR0_POSN                                 0x0
#define _SMT1TMRL_TMR0_POSITION                             0x0
#define _SMT1TMRL_TMR0_SIZE                                 0x1
#define _SMT1TMRL_TMR0_LENGTH                               0x1
#define _SMT1TMRL_TMR0_MASK                                 0x1
#define _SMT1TMRL_TMR1_POSN                                 0x1
#define _SMT1TMRL_TMR1_POSITION                             0x1
#define _SMT1TMRL_TMR1_SIZE                                 0x1
#define _SMT1TMRL_TMR1_LENGTH                               0x1
#define _SMT1TMRL_TMR1_MASK                                 0x2
#define _SMT1TMRL_TMR2_POSN                                 0x2
#define _SMT1TMRL_TMR2_POSITION                             0x2
#define _SMT1TMRL_TMR2_SIZE                                 0x1
#define _SMT1TMRL_TMR2_LENGTH                               0x1
#define _SMT1TMRL_TMR2_MASK                                 0x4
#define _SMT1TMRL_TMR3_POSN                                 0x3
#define _SMT1TMRL_TMR3_POSITION                             0x3
#define _SMT1TMRL_TMR3_SIZE                                 0x1
#define _SMT1TMRL_TMR3_LENGTH                               0x1
#define _SMT1TMRL_TMR3_MASK                                 0x8
#define _SMT1TMRL_TMR4_POSN                                 0x4
#define _SMT1TMRL_TMR4_POSITION                             0x4
#define _SMT1TMRL_TMR4_SIZE                                 0x1
#define _SMT1TMRL_TMR4_LENGTH                               0x1
#define _SMT1TMRL_TMR4_MASK                                 0x10
#define _SMT1TMRL_TMR5_POSN                                 0x5
#define _SMT1TMRL_TMR5_POSITION                             0x5
#define _SMT1TMRL_TMR5_SIZE                                 0x1
#define _SMT1TMRL_TMR5_LENGTH                               0x1
#define _SMT1TMRL_TMR5_MASK                                 0x20
#define _SMT1TMRL_TMR6_POSN                                 0x6
#define _SMT1TMRL_TMR6_POSITION                             0x6
#define _SMT1TMRL_TMR6_SIZE                                 0x1
#define _SMT1TMRL_TMR6_LENGTH                               0x1
#define _SMT1TMRL_TMR6_MASK                                 0x40
#define _SMT1TMRL_TMR7_POSN                                 0x7
#define _SMT1TMRL_TMR7_POSITION                             0x7
#define _SMT1TMRL_TMR7_SIZE                                 0x1
#define _SMT1TMRL_TMR7_LENGTH                               0x1
#define _SMT1TMRL_TMR7_MASK                                 0x80
#define _SMT1TMRL_SMT1TMR_POSN                              0x0
#define _SMT1TMRL_SMT1TMR_POSITION                          0x0
#define _SMT1TMRL_SMT1TMR_SIZE                              0x8
#define _SMT1TMRL_SMT1TMR_LENGTH                            0x8
#define _SMT1TMRL_SMT1TMR_MASK                              0xFF
#define _SMT1TMRL_SMT1TMR0_POSN                             0x0
#define _SMT1TMRL_SMT1TMR0_POSITION                         0x0
#define _SMT1TMRL_SMT1TMR0_SIZE                             0x1
#define _SMT1TMRL_SMT1TMR0_LENGTH                           0x1
#define _SMT1TMRL_SMT1TMR0_MASK                             0x1
#define _SMT1TMRL_SMT1TMR1_POSN                             0x1
#define _SMT1TMRL_SMT1TMR1_POSITION                         0x1
#define _SMT1TMRL_SMT1TMR1_SIZE                             0x1
#define _SMT1TMRL_SMT1TMR1_LENGTH                           0x1
#define _SMT1TMRL_SMT1TMR1_MASK                             0x2
#define _SMT1TMRL_SMT1TMR2_POSN                             0x2
#define _SMT1TMRL_SMT1TMR2_POSITION                         0x2
#define _SMT1TMRL_SMT1TMR2_SIZE                             0x1
#define _SMT1TMRL_SMT1TMR2_LENGTH                           0x1
#define _SMT1TMRL_SMT1TMR2_MASK                             0x4
#define _SMT1TMRL_SMT1TMR3_POSN                             0x3
#define _SMT1TMRL_SMT1TMR3_POSITION                         0x3
#define _SMT1TMRL_SMT1TMR3_SIZE                             0x1
#define _SMT1TMRL_SMT1TMR3_LENGTH                           0x1
#define _SMT1TMRL_SMT1TMR3_MASK                             0x8
#define _SMT1TMRL_SMT1TMR4_POSN                             0x4
#define _SMT1TMRL_SMT1TMR4_POSITION                         0x4
#define _SMT1TMRL_SMT1TMR4_SIZE                             0x1
#define _SMT1TMRL_SMT1TMR4_LENGTH                           0x1
#define _SMT1TMRL_SMT1TMR4_MASK                             0x10
#define _SMT1TMRL_SMT1TMR5_POSN                             0x5
#define _SMT1TMRL_SMT1TMR5_POSITION                         0x5
#define _SMT1TMRL_SMT1TMR5_SIZE                             0x1
#define _SMT1TMRL_SMT1TMR5_LENGTH                           0x1
#define _SMT1TMRL_SMT1TMR5_MASK                             0x20
#define _SMT1TMRL_SMT1TMR6_POSN                             0x6
#define _SMT1TMRL_SMT1TMR6_POSITION                         0x6
#define _SMT1TMRL_SMT1TMR6_SIZE                             0x1
#define _SMT1TMRL_SMT1TMR6_LENGTH                           0x1
#define _SMT1TMRL_SMT1TMR6_MASK                             0x40
#define _SMT1TMRL_SMT1TMR7_POSN                             0x7
#define _SMT1TMRL_SMT1TMR7_POSITION                         0x7
#define _SMT1TMRL_SMT1TMR7_SIZE                             0x1
#define _SMT1TMRL_SMT1TMR7_LENGTH                           0x1
#define _SMT1TMRL_SMT1TMR7_MASK                             0x80

// Register: SMT1TMRH
#define SMT1TMRH SMT1TMRH
extern volatile unsigned char           SMT1TMRH            __at(0x3F13);
#ifndef _LIB_BUILD
asm("SMT1TMRH equ 03F13h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR                    :8;
    };
    struct {
        unsigned TMR8                   :1;
        unsigned TMR9                   :1;
        unsigned TMR10                  :1;
        unsigned TMR11                  :1;
        unsigned TMR12                  :1;
        unsigned TMR13                  :1;
        unsigned TMR14                  :1;
        unsigned TMR15                  :1;
    };
    struct {
        unsigned SMT1TMR                :8;
    };
    struct {
        unsigned SMT1TMR8               :1;
        unsigned SMT1TMR9               :1;
        unsigned SMT1TMR10              :1;
        unsigned SMT1TMR11              :1;
        unsigned SMT1TMR12              :1;
        unsigned SMT1TMR13              :1;
        unsigned SMT1TMR14              :1;
        unsigned SMT1TMR15              :1;
    };
} SMT1TMRHbits_t;
extern volatile SMT1TMRHbits_t SMT1TMRHbits __at(0x3F13);
// bitfield macros
#define _SMT1TMRH_TMR_POSN                                  0x0
#define _SMT1TMRH_TMR_POSITION                              0x0
#define _SMT1TMRH_TMR_SIZE                                  0x8
#define _SMT1TMRH_TMR_LENGTH                                0x8
#define _SMT1TMRH_TMR_MASK                                  0xFF
#define _SMT1TMRH_TMR8_POSN                                 0x0
#define _SMT1TMRH_TMR8_POSITION                             0x0
#define _SMT1TMRH_TMR8_SIZE                                 0x1
#define _SMT1TMRH_TMR8_LENGTH                               0x1
#define _SMT1TMRH_TMR8_MASK                                 0x1
#define _SMT1TMRH_TMR9_POSN                                 0x1
#define _SMT1TMRH_TMR9_POSITION                             0x1
#define _SMT1TMRH_TMR9_SIZE                                 0x1
#define _SMT1TMRH_TMR9_LENGTH                               0x1
#define _SMT1TMRH_TMR9_MASK                                 0x2
#define _SMT1TMRH_TMR10_POSN                                0x2
#define _SMT1TMRH_TMR10_POSITION                            0x2
#define _SMT1TMRH_TMR10_SIZE                                0x1
#define _SMT1TMRH_TMR10_LENGTH                              0x1
#define _SMT1TMRH_TMR10_MASK                                0x4
#define _SMT1TMRH_TMR11_POSN                                0x3
#define _SMT1TMRH_TMR11_POSITION                            0x3
#define _SMT1TMRH_TMR11_SIZE                                0x1
#define _SMT1TMRH_TMR11_LENGTH                              0x1
#define _SMT1TMRH_TMR11_MASK                                0x8
#define _SMT1TMRH_TMR12_POSN                                0x4
#define _SMT1TMRH_TMR12_POSITION                            0x4
#define _SMT1TMRH_TMR12_SIZE                                0x1
#define _SMT1TMRH_TMR12_LENGTH                              0x1
#define _SMT1TMRH_TMR12_MASK                                0x10
#define _SMT1TMRH_TMR13_POSN                                0x5
#define _SMT1TMRH_TMR13_POSITION                            0x5
#define _SMT1TMRH_TMR13_SIZE                                0x1
#define _SMT1TMRH_TMR13_LENGTH                              0x1
#define _SMT1TMRH_TMR13_MASK                                0x20
#define _SMT1TMRH_TMR14_POSN                                0x6
#define _SMT1TMRH_TMR14_POSITION                            0x6
#define _SMT1TMRH_TMR14_SIZE                                0x1
#define _SMT1TMRH_TMR14_LENGTH                              0x1
#define _SMT1TMRH_TMR14_MASK                                0x40
#define _SMT1TMRH_TMR15_POSN                                0x7
#define _SMT1TMRH_TMR15_POSITION                            0x7
#define _SMT1TMRH_TMR15_SIZE                                0x1
#define _SMT1TMRH_TMR15_LENGTH                              0x1
#define _SMT1TMRH_TMR15_MASK                                0x80
#define _SMT1TMRH_SMT1TMR_POSN                              0x0
#define _SMT1TMRH_SMT1TMR_POSITION                          0x0
#define _SMT1TMRH_SMT1TMR_SIZE                              0x8
#define _SMT1TMRH_SMT1TMR_LENGTH                            0x8
#define _SMT1TMRH_SMT1TMR_MASK                              0xFF
#define _SMT1TMRH_SMT1TMR8_POSN                             0x0
#define _SMT1TMRH_SMT1TMR8_POSITION                         0x0
#define _SMT1TMRH_SMT1TMR8_SIZE                             0x1
#define _SMT1TMRH_SMT1TMR8_LENGTH                           0x1
#define _SMT1TMRH_SMT1TMR8_MASK                             0x1
#define _SMT1TMRH_SMT1TMR9_POSN                             0x1
#define _SMT1TMRH_SMT1TMR9_POSITION                         0x1
#define _SMT1TMRH_SMT1TMR9_SIZE                             0x1
#define _SMT1TMRH_SMT1TMR9_LENGTH                           0x1
#define _SMT1TMRH_SMT1TMR9_MASK                             0x2
#define _SMT1TMRH_SMT1TMR10_POSN                            0x2
#define _SMT1TMRH_SMT1TMR10_POSITION                        0x2
#define _SMT1TMRH_SMT1TMR10_SIZE                            0x1
#define _SMT1TMRH_SMT1TMR10_LENGTH                          0x1
#define _SMT1TMRH_SMT1TMR10_MASK                            0x4
#define _SMT1TMRH_SMT1TMR11_POSN                            0x3
#define _SMT1TMRH_SMT1TMR11_POSITION                        0x3
#define _SMT1TMRH_SMT1TMR11_SIZE                            0x1
#define _SMT1TMRH_SMT1TMR11_LENGTH                          0x1
#define _SMT1TMRH_SMT1TMR11_MASK                            0x8
#define _SMT1TMRH_SMT1TMR12_POSN                            0x4
#define _SMT1TMRH_SMT1TMR12_POSITION                        0x4
#define _SMT1TMRH_SMT1TMR12_SIZE                            0x1
#define _SMT1TMRH_SMT1TMR12_LENGTH                          0x1
#define _SMT1TMRH_SMT1TMR12_MASK                            0x10
#define _SMT1TMRH_SMT1TMR13_POSN                            0x5
#define _SMT1TMRH_SMT1TMR13_POSITION                        0x5
#define _SMT1TMRH_SMT1TMR13_SIZE                            0x1
#define _SMT1TMRH_SMT1TMR13_LENGTH                          0x1
#define _SMT1TMRH_SMT1TMR13_MASK                            0x20
#define _SMT1TMRH_SMT1TMR14_POSN                            0x6
#define _SMT1TMRH_SMT1TMR14_POSITION                        0x6
#define _SMT1TMRH_SMT1TMR14_SIZE                            0x1
#define _SMT1TMRH_SMT1TMR14_LENGTH                          0x1
#define _SMT1TMRH_SMT1TMR14_MASK                            0x40
#define _SMT1TMRH_SMT1TMR15_POSN                            0x7
#define _SMT1TMRH_SMT1TMR15_POSITION                        0x7
#define _SMT1TMRH_SMT1TMR15_SIZE                            0x1
#define _SMT1TMRH_SMT1TMR15_LENGTH                          0x1
#define _SMT1TMRH_SMT1TMR15_MASK                            0x80

// Register: SMT1TMRU
#define SMT1TMRU SMT1TMRU
extern volatile unsigned char           SMT1TMRU            __at(0x3F14);
#ifndef _LIB_BUILD
asm("SMT1TMRU equ 03F14h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR                    :8;
    };
    struct {
        unsigned TMR16                  :1;
        unsigned TMR17                  :1;
        unsigned TMR18                  :1;
        unsigned TMR19                  :1;
        unsigned TMR20                  :1;
        unsigned TMR21                  :1;
        unsigned TMR22                  :1;
        unsigned TMR23                  :1;
    };
    struct {
        unsigned SMT1TMR                :8;
    };
    struct {
        unsigned SMT1TMR16              :1;
        unsigned SMT1TMR17              :1;
        unsigned SMT1TMR18              :1;
        unsigned SMT1TMR19              :1;
        unsigned SMT1TMR20              :1;
        unsigned SMT1TMR21              :1;
        unsigned SMT1TMR22              :1;
        unsigned SMT1TMR23              :1;
    };
} SMT1TMRUbits_t;
extern volatile SMT1TMRUbits_t SMT1TMRUbits __at(0x3F14);
// bitfield macros
#define _SMT1TMRU_TMR_POSN                                  0x0
#define _SMT1TMRU_TMR_POSITION                              0x0
#define _SMT1TMRU_TMR_SIZE                                  0x8
#define _SMT1TMRU_TMR_LENGTH                                0x8
#define _SMT1TMRU_TMR_MASK                                  0xFF
#define _SMT1TMRU_TMR16_POSN                                0x0
#define _SMT1TMRU_TMR16_POSITION                            0x0
#define _SMT1TMRU_TMR16_SIZE                                0x1
#define _SMT1TMRU_TMR16_LENGTH                              0x1
#define _SMT1TMRU_TMR16_MASK                                0x1
#define _SMT1TMRU_TMR17_POSN                                0x1
#define _SMT1TMRU_TMR17_POSITION                            0x1
#define _SMT1TMRU_TMR17_SIZE                                0x1
#define _SMT1TMRU_TMR17_LENGTH                              0x1
#define _SMT1TMRU_TMR17_MASK                                0x2
#define _SMT1TMRU_TMR18_POSN                                0x2
#define _SMT1TMRU_TMR18_POSITION                            0x2
#define _SMT1TMRU_TMR18_SIZE                                0x1
#define _SMT1TMRU_TMR18_LENGTH                              0x1
#define _SMT1TMRU_TMR18_MASK                                0x4
#define _SMT1TMRU_TMR19_POSN                                0x3
#define _SMT1TMRU_TMR19_POSITION                            0x3
#define _SMT1TMRU_TMR19_SIZE                                0x1
#define _SMT1TMRU_TMR19_LENGTH                              0x1
#define _SMT1TMRU_TMR19_MASK                                0x8
#define _SMT1TMRU_TMR20_POSN                                0x4
#define _SMT1TMRU_TMR20_POSITION                            0x4
#define _SMT1TMRU_TMR20_SIZE                                0x1
#define _SMT1TMRU_TMR20_LENGTH                              0x1
#define _SMT1TMRU_TMR20_MASK                                0x10
#define _SMT1TMRU_TMR21_POSN                                0x5
#define _SMT1TMRU_TMR21_POSITION                            0x5
#define _SMT1TMRU_TMR21_SIZE                                0x1
#define _SMT1TMRU_TMR21_LENGTH                              0x1
#define _SMT1TMRU_TMR21_MASK                                0x20
#define _SMT1TMRU_TMR22_POSN                                0x6
#define _SMT1TMRU_TMR22_POSITION                            0x6
#define _SMT1TMRU_TMR22_SIZE                                0x1
#define _SMT1TMRU_TMR22_LENGTH                              0x1
#define _SMT1TMRU_TMR22_MASK                                0x40
#define _SMT1TMRU_TMR23_POSN                                0x7
#define _SMT1TMRU_TMR23_POSITION                            0x7
#define _SMT1TMRU_TMR23_SIZE                                0x1
#define _SMT1TMRU_TMR23_LENGTH                              0x1
#define _SMT1TMRU_TMR23_MASK                                0x80
#define _SMT1TMRU_SMT1TMR_POSN                              0x0
#define _SMT1TMRU_SMT1TMR_POSITION                          0x0
#define _SMT1TMRU_SMT1TMR_SIZE                              0x8
#define _SMT1TMRU_SMT1TMR_LENGTH                            0x8
#define _SMT1TMRU_SMT1TMR_MASK                              0xFF
#define _SMT1TMRU_SMT1TMR16_POSN                            0x0
#define _SMT1TMRU_SMT1TMR16_POSITION                        0x0
#define _SMT1TMRU_SMT1TMR16_SIZE                            0x1
#define _SMT1TMRU_SMT1TMR16_LENGTH                          0x1
#define _SMT1TMRU_SMT1TMR16_MASK                            0x1
#define _SMT1TMRU_SMT1TMR17_POSN                            0x1
#define _SMT1TMRU_SMT1TMR17_POSITION                        0x1
#define _SMT1TMRU_SMT1TMR17_SIZE                            0x1
#define _SMT1TMRU_SMT1TMR17_LENGTH                          0x1
#define _SMT1TMRU_SMT1TMR17_MASK                            0x2
#define _SMT1TMRU_SMT1TMR18_POSN                            0x2
#define _SMT1TMRU_SMT1TMR18_POSITION                        0x2
#define _SMT1TMRU_SMT1TMR18_SIZE                            0x1
#define _SMT1TMRU_SMT1TMR18_LENGTH                          0x1
#define _SMT1TMRU_SMT1TMR18_MASK                            0x4
#define _SMT1TMRU_SMT1TMR19_POSN                            0x3
#define _SMT1TMRU_SMT1TMR19_POSITION                        0x3
#define _SMT1TMRU_SMT1TMR19_SIZE                            0x1
#define _SMT1TMRU_SMT1TMR19_LENGTH                          0x1
#define _SMT1TMRU_SMT1TMR19_MASK                            0x8
#define _SMT1TMRU_SMT1TMR20_POSN                            0x4
#define _SMT1TMRU_SMT1TMR20_POSITION                        0x4
#define _SMT1TMRU_SMT1TMR20_SIZE                            0x1
#define _SMT1TMRU_SMT1TMR20_LENGTH                          0x1
#define _SMT1TMRU_SMT1TMR20_MASK                            0x10
#define _SMT1TMRU_SMT1TMR21_POSN                            0x5
#define _SMT1TMRU_SMT1TMR21_POSITION                        0x5
#define _SMT1TMRU_SMT1TMR21_SIZE                            0x1
#define _SMT1TMRU_SMT1TMR21_LENGTH                          0x1
#define _SMT1TMRU_SMT1TMR21_MASK                            0x20
#define _SMT1TMRU_SMT1TMR22_POSN                            0x6
#define _SMT1TMRU_SMT1TMR22_POSITION                        0x6
#define _SMT1TMRU_SMT1TMR22_SIZE                            0x1
#define _SMT1TMRU_SMT1TMR22_LENGTH                          0x1
#define _SMT1TMRU_SMT1TMR22_MASK                            0x40
#define _SMT1TMRU_SMT1TMR23_POSN                            0x7
#define _SMT1TMRU_SMT1TMR23_POSITION                        0x7
#define _SMT1TMRU_SMT1TMR23_SIZE                            0x1
#define _SMT1TMRU_SMT1TMR23_LENGTH                          0x1
#define _SMT1TMRU_SMT1TMR23_MASK                            0x80

// Register: SMT1CPR
#define SMT1CPR SMT1CPR
#ifndef __CCI__
extern volatile __uint24                SMT1CPR             __at(0x3F15);
#endif
#ifndef _LIB_BUILD
asm("SMT1CPR equ 03F15h");
#endif

// Register: SMT1CPRL
#define SMT1CPRL SMT1CPRL
extern volatile unsigned char           SMT1CPRL            __at(0x3F15);
#ifndef _LIB_BUILD
asm("SMT1CPRL equ 03F15h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CPR                    :8;
    };
    struct {
        unsigned CPR0                   :1;
        unsigned CPR1                   :1;
        unsigned CPR2                   :1;
        unsigned CPR3                   :1;
        unsigned CPR4                   :1;
        unsigned CPR5                   :1;
        unsigned CPR6                   :1;
        unsigned CPR7                   :1;
    };
    struct {
        unsigned SMT1CPR                :8;
    };
    struct {
        unsigned SMT1CPR0               :1;
        unsigned SMT1CPR1               :1;
        unsigned SMT1CPR2               :1;
        unsigned SMT1CPR3               :1;
        unsigned SMT1CPR4               :1;
        unsigned SMT1CPR5               :1;
        unsigned SMT1CPR6               :1;
        unsigned SMT1CPR7               :1;
    };
} SMT1CPRLbits_t;
extern volatile SMT1CPRLbits_t SMT1CPRLbits __at(0x3F15);
// bitfield macros
#define _SMT1CPRL_CPR_POSN                                  0x0
#define _SMT1CPRL_CPR_POSITION                              0x0
#define _SMT1CPRL_CPR_SIZE                                  0x8
#define _SMT1CPRL_CPR_LENGTH                                0x8
#define _SMT1CPRL_CPR_MASK                                  0xFF
#define _SMT1CPRL_CPR0_POSN                                 0x0
#define _SMT1CPRL_CPR0_POSITION                             0x0
#define _SMT1CPRL_CPR0_SIZE                                 0x1
#define _SMT1CPRL_CPR0_LENGTH                               0x1
#define _SMT1CPRL_CPR0_MASK                                 0x1
#define _SMT1CPRL_CPR1_POSN                                 0x1
#define _SMT1CPRL_CPR1_POSITION                             0x1
#define _SMT1CPRL_CPR1_SIZE                                 0x1
#define _SMT1CPRL_CPR1_LENGTH                               0x1
#define _SMT1CPRL_CPR1_MASK                                 0x2
#define _SMT1CPRL_CPR2_POSN                                 0x2
#define _SMT1CPRL_CPR2_POSITION                             0x2
#define _SMT1CPRL_CPR2_SIZE                                 0x1
#define _SMT1CPRL_CPR2_LENGTH                               0x1
#define _SMT1CPRL_CPR2_MASK                                 0x4
#define _SMT1CPRL_CPR3_POSN                                 0x3
#define _SMT1CPRL_CPR3_POSITION                             0x3
#define _SMT1CPRL_CPR3_SIZE                                 0x1
#define _SMT1CPRL_CPR3_LENGTH                               0x1
#define _SMT1CPRL_CPR3_MASK                                 0x8
#define _SMT1CPRL_CPR4_POSN                                 0x4
#define _SMT1CPRL_CPR4_POSITION                             0x4
#define _SMT1CPRL_CPR4_SIZE                                 0x1
#define _SMT1CPRL_CPR4_LENGTH                               0x1
#define _SMT1CPRL_CPR4_MASK                                 0x10
#define _SMT1CPRL_CPR5_POSN                                 0x5
#define _SMT1CPRL_CPR5_POSITION                             0x5
#define _SMT1CPRL_CPR5_SIZE                                 0x1
#define _SMT1CPRL_CPR5_LENGTH                               0x1
#define _SMT1CPRL_CPR5_MASK                                 0x20
#define _SMT1CPRL_CPR6_POSN                                 0x6
#define _SMT1CPRL_CPR6_POSITION                             0x6
#define _SMT1CPRL_CPR6_SIZE                                 0x1
#define _SMT1CPRL_CPR6_LENGTH                               0x1
#define _SMT1CPRL_CPR6_MASK                                 0x40
#define _SMT1CPRL_CPR7_POSN                                 0x7
#define _SMT1CPRL_CPR7_POSITION                             0x7
#define _SMT1CPRL_CPR7_SIZE                                 0x1
#define _SMT1CPRL_CPR7_LENGTH                               0x1
#define _SMT1CPRL_CPR7_MASK                                 0x80
#define _SMT1CPRL_SMT1CPR_POSN                              0x0
#define _SMT1CPRL_SMT1CPR_POSITION                          0x0
#define _SMT1CPRL_SMT1CPR_SIZE                              0x8
#define _SMT1CPRL_SMT1CPR_LENGTH                            0x8
#define _SMT1CPRL_SMT1CPR_MASK                              0xFF
#define _SMT1CPRL_SMT1CPR0_POSN                             0x0
#define _SMT1CPRL_SMT1CPR0_POSITION                         0x0
#define _SMT1CPRL_SMT1CPR0_SIZE                             0x1
#define _SMT1CPRL_SMT1CPR0_LENGTH                           0x1
#define _SMT1CPRL_SMT1CPR0_MASK                             0x1
#define _SMT1CPRL_SMT1CPR1_POSN                             0x1
#define _SMT1CPRL_SMT1CPR1_POSITION                         0x1
#define _SMT1CPRL_SMT1CPR1_SIZE                             0x1
#define _SMT1CPRL_SMT1CPR1_LENGTH                           0x1
#define _SMT1CPRL_SMT1CPR1_MASK                             0x2
#define _SMT1CPRL_SMT1CPR2_POSN                             0x2
#define _SMT1CPRL_SMT1CPR2_POSITION                         0x2
#define _SMT1CPRL_SMT1CPR2_SIZE                             0x1
#define _SMT1CPRL_SMT1CPR2_LENGTH                           0x1
#define _SMT1CPRL_SMT1CPR2_MASK                             0x4
#define _SMT1CPRL_SMT1CPR3_POSN                             0x3
#define _SMT1CPRL_SMT1CPR3_POSITION                         0x3
#define _SMT1CPRL_SMT1CPR3_SIZE                             0x1
#define _SMT1CPRL_SMT1CPR3_LENGTH                           0x1
#define _SMT1CPRL_SMT1CPR3_MASK                             0x8
#define _SMT1CPRL_SMT1CPR4_POSN                             0x4
#define _SMT1CPRL_SMT1CPR4_POSITION                         0x4
#define _SMT1CPRL_SMT1CPR4_SIZE                             0x1
#define _SMT1CPRL_SMT1CPR4_LENGTH                           0x1
#define _SMT1CPRL_SMT1CPR4_MASK                             0x10
#define _SMT1CPRL_SMT1CPR5_POSN                             0x5
#define _SMT1CPRL_SMT1CPR5_POSITION                         0x5
#define _SMT1CPRL_SMT1CPR5_SIZE                             0x1
#define _SMT1CPRL_SMT1CPR5_LENGTH                           0x1
#define _SMT1CPRL_SMT1CPR5_MASK                             0x20
#define _SMT1CPRL_SMT1CPR6_POSN                             0x6
#define _SMT1CPRL_SMT1CPR6_POSITION                         0x6
#define _SMT1CPRL_SMT1CPR6_SIZE                             0x1
#define _SMT1CPRL_SMT1CPR6_LENGTH                           0x1
#define _SMT1CPRL_SMT1CPR6_MASK                             0x40
#define _SMT1CPRL_SMT1CPR7_POSN                             0x7
#define _SMT1CPRL_SMT1CPR7_POSITION                         0x7
#define _SMT1CPRL_SMT1CPR7_SIZE                             0x1
#define _SMT1CPRL_SMT1CPR7_LENGTH                           0x1
#define _SMT1CPRL_SMT1CPR7_MASK                             0x80

// Register: SMT1CPRH
#define SMT1CPRH SMT1CPRH
extern volatile unsigned char           SMT1CPRH            __at(0x3F16);
#ifndef _LIB_BUILD
asm("SMT1CPRH equ 03F16h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CPR                    :8;
    };
    struct {
        unsigned CPR8                   :1;
        unsigned CPR9                   :1;
        unsigned CPR10                  :1;
        unsigned CPR11                  :1;
        unsigned CPR12                  :1;
        unsigned CPR13                  :1;
        unsigned CPR14                  :1;
        unsigned CPR15                  :1;
    };
    struct {
        unsigned SMT1CPR8               :1;
        unsigned SMT1CPR9               :1;
        unsigned SMT1CPR10              :1;
        unsigned SMT1CPR11              :1;
        unsigned SMT1CPR12              :1;
        unsigned SMT1CPR13              :1;
        unsigned SMT1CPR14              :1;
        unsigned SMT1CPR15              :1;
    };
    struct {
        unsigned SMT1CPR                :8;
    };
} SMT1CPRHbits_t;
extern volatile SMT1CPRHbits_t SMT1CPRHbits __at(0x3F16);
// bitfield macros
#define _SMT1CPRH_CPR_POSN                                  0x0
#define _SMT1CPRH_CPR_POSITION                              0x0
#define _SMT1CPRH_CPR_SIZE                                  0x8
#define _SMT1CPRH_CPR_LENGTH                                0x8
#define _SMT1CPRH_CPR_MASK                                  0xFF
#define _SMT1CPRH_CPR8_POSN                                 0x0
#define _SMT1CPRH_CPR8_POSITION                             0x0
#define _SMT1CPRH_CPR8_SIZE                                 0x1
#define _SMT1CPRH_CPR8_LENGTH                               0x1
#define _SMT1CPRH_CPR8_MASK                                 0x1
#define _SMT1CPRH_CPR9_POSN                                 0x1
#define _SMT1CPRH_CPR9_POSITION                             0x1
#define _SMT1CPRH_CPR9_SIZE                                 0x1
#define _SMT1CPRH_CPR9_LENGTH                               0x1
#define _SMT1CPRH_CPR9_MASK                                 0x2
#define _SMT1CPRH_CPR10_POSN                                0x2
#define _SMT1CPRH_CPR10_POSITION                            0x2
#define _SMT1CPRH_CPR10_SIZE                                0x1
#define _SMT1CPRH_CPR10_LENGTH                              0x1
#define _SMT1CPRH_CPR10_MASK                                0x4
#define _SMT1CPRH_CPR11_POSN                                0x3
#define _SMT1CPRH_CPR11_POSITION                            0x3
#define _SMT1CPRH_CPR11_SIZE                                0x1
#define _SMT1CPRH_CPR11_LENGTH                              0x1
#define _SMT1CPRH_CPR11_MASK                                0x8
#define _SMT1CPRH_CPR12_POSN                                0x4
#define _SMT1CPRH_CPR12_POSITION                            0x4
#define _SMT1CPRH_CPR12_SIZE                                0x1
#define _SMT1CPRH_CPR12_LENGTH                              0x1
#define _SMT1CPRH_CPR12_MASK                                0x10
#define _SMT1CPRH_CPR13_POSN                                0x5
#define _SMT1CPRH_CPR13_POSITION                            0x5
#define _SMT1CPRH_CPR13_SIZE                                0x1
#define _SMT1CPRH_CPR13_LENGTH                              0x1
#define _SMT1CPRH_CPR13_MASK                                0x20
#define _SMT1CPRH_CPR14_POSN                                0x6
#define _SMT1CPRH_CPR14_POSITION                            0x6
#define _SMT1CPRH_CPR14_SIZE                                0x1
#define _SMT1CPRH_CPR14_LENGTH                              0x1
#define _SMT1CPRH_CPR14_MASK                                0x40
#define _SMT1CPRH_CPR15_POSN                                0x7
#define _SMT1CPRH_CPR15_POSITION                            0x7
#define _SMT1CPRH_CPR15_SIZE                                0x1
#define _SMT1CPRH_CPR15_LENGTH                              0x1
#define _SMT1CPRH_CPR15_MASK                                0x80
#define _SMT1CPRH_SMT1CPR8_POSN                             0x0
#define _SMT1CPRH_SMT1CPR8_POSITION                         0x0
#define _SMT1CPRH_SMT1CPR8_SIZE                             0x1
#define _SMT1CPRH_SMT1CPR8_LENGTH                           0x1
#define _SMT1CPRH_SMT1CPR8_MASK                             0x1
#define _SMT1CPRH_SMT1CPR9_POSN                             0x1
#define _SMT1CPRH_SMT1CPR9_POSITION                         0x1
#define _SMT1CPRH_SMT1CPR9_SIZE                             0x1
#define _SMT1CPRH_SMT1CPR9_LENGTH                           0x1
#define _SMT1CPRH_SMT1CPR9_MASK                             0x2
#define _SMT1CPRH_SMT1CPR10_POSN                            0x2
#define _SMT1CPRH_SMT1CPR10_POSITION                        0x2
#define _SMT1CPRH_SMT1CPR10_SIZE                            0x1
#define _SMT1CPRH_SMT1CPR10_LENGTH                          0x1
#define _SMT1CPRH_SMT1CPR10_MASK                            0x4
#define _SMT1CPRH_SMT1CPR11_POSN                            0x3
#define _SMT1CPRH_SMT1CPR11_POSITION                        0x3
#define _SMT1CPRH_SMT1CPR11_SIZE                            0x1
#define _SMT1CPRH_SMT1CPR11_LENGTH                          0x1
#define _SMT1CPRH_SMT1CPR11_MASK                            0x8
#define _SMT1CPRH_SMT1CPR12_POSN                            0x4
#define _SMT1CPRH_SMT1CPR12_POSITION                        0x4
#define _SMT1CPRH_SMT1CPR12_SIZE                            0x1
#define _SMT1CPRH_SMT1CPR12_LENGTH                          0x1
#define _SMT1CPRH_SMT1CPR12_MASK                            0x10
#define _SMT1CPRH_SMT1CPR13_POSN                            0x5
#define _SMT1CPRH_SMT1CPR13_POSITION                        0x5
#define _SMT1CPRH_SMT1CPR13_SIZE                            0x1
#define _SMT1CPRH_SMT1CPR13_LENGTH                          0x1
#define _SMT1CPRH_SMT1CPR13_MASK                            0x20
#define _SMT1CPRH_SMT1CPR14_POSN                            0x6
#define _SMT1CPRH_SMT1CPR14_POSITION                        0x6
#define _SMT1CPRH_SMT1CPR14_SIZE                            0x1
#define _SMT1CPRH_SMT1CPR14_LENGTH                          0x1
#define _SMT1CPRH_SMT1CPR14_MASK                            0x40
#define _SMT1CPRH_SMT1CPR15_POSN                            0x7
#define _SMT1CPRH_SMT1CPR15_POSITION                        0x7
#define _SMT1CPRH_SMT1CPR15_SIZE                            0x1
#define _SMT1CPRH_SMT1CPR15_LENGTH                          0x1
#define _SMT1CPRH_SMT1CPR15_MASK                            0x80
#define _SMT1CPRH_SMT1CPR_POSN                              0x0
#define _SMT1CPRH_SMT1CPR_POSITION                          0x0
#define _SMT1CPRH_SMT1CPR_SIZE                              0x8
#define _SMT1CPRH_SMT1CPR_LENGTH                            0x8
#define _SMT1CPRH_SMT1CPR_MASK                              0xFF

// Register: SMT1CPRU
#define SMT1CPRU SMT1CPRU
extern volatile unsigned char           SMT1CPRU            __at(0x3F17);
#ifndef _LIB_BUILD
asm("SMT1CPRU equ 03F17h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CPR                    :8;
    };
    struct {
        unsigned CPR16                  :1;
        unsigned CPR17                  :1;
        unsigned CPR18                  :1;
        unsigned CPR19                  :1;
        unsigned CPR20                  :1;
        unsigned CPR21                  :1;
        unsigned CPR22                  :1;
        unsigned CPR23                  :1;
    };
    struct {
        unsigned SMT1CPR16              :1;
        unsigned SMT1CPR17              :1;
        unsigned SMT1CPR18              :1;
        unsigned SMT1CPR19              :1;
        unsigned SMT1CPR20              :1;
        unsigned SMT1CPR21              :1;
        unsigned SMT1CPR22              :1;
        unsigned SMT1CPR23              :1;
    };
    struct {
        unsigned SMT1CPR                :8;
    };
} SMT1CPRUbits_t;
extern volatile SMT1CPRUbits_t SMT1CPRUbits __at(0x3F17);
// bitfield macros
#define _SMT1CPRU_CPR_POSN                                  0x0
#define _SMT1CPRU_CPR_POSITION                              0x0
#define _SMT1CPRU_CPR_SIZE                                  0x8
#define _SMT1CPRU_CPR_LENGTH                                0x8
#define _SMT1CPRU_CPR_MASK                                  0xFF
#define _SMT1CPRU_CPR16_POSN                                0x0
#define _SMT1CPRU_CPR16_POSITION                            0x0
#define _SMT1CPRU_CPR16_SIZE                                0x1
#define _SMT1CPRU_CPR16_LENGTH                              0x1
#define _SMT1CPRU_CPR16_MASK                                0x1
#define _SMT1CPRU_CPR17_POSN                                0x1
#define _SMT1CPRU_CPR17_POSITION                            0x1
#define _SMT1CPRU_CPR17_SIZE                                0x1
#define _SMT1CPRU_CPR17_LENGTH                              0x1
#define _SMT1CPRU_CPR17_MASK                                0x2
#define _SMT1CPRU_CPR18_POSN                                0x2
#define _SMT1CPRU_CPR18_POSITION                            0x2
#define _SMT1CPRU_CPR18_SIZE                                0x1
#define _SMT1CPRU_CPR18_LENGTH                              0x1
#define _SMT1CPRU_CPR18_MASK                                0x4
#define _SMT1CPRU_CPR19_POSN                                0x3
#define _SMT1CPRU_CPR19_POSITION                            0x3
#define _SMT1CPRU_CPR19_SIZE                                0x1
#define _SMT1CPRU_CPR19_LENGTH                              0x1
#define _SMT1CPRU_CPR19_MASK                                0x8
#define _SMT1CPRU_CPR20_POSN                                0x4
#define _SMT1CPRU_CPR20_POSITION                            0x4
#define _SMT1CPRU_CPR20_SIZE                                0x1
#define _SMT1CPRU_CPR20_LENGTH                              0x1
#define _SMT1CPRU_CPR20_MASK                                0x10
#define _SMT1CPRU_CPR21_POSN                                0x5
#define _SMT1CPRU_CPR21_POSITION                            0x5
#define _SMT1CPRU_CPR21_SIZE                                0x1
#define _SMT1CPRU_CPR21_LENGTH                              0x1
#define _SMT1CPRU_CPR21_MASK                                0x20
#define _SMT1CPRU_CPR22_POSN                                0x6
#define _SMT1CPRU_CPR22_POSITION                            0x6
#define _SMT1CPRU_CPR22_SIZE                                0x1
#define _SMT1CPRU_CPR22_LENGTH                              0x1
#define _SMT1CPRU_CPR22_MASK                                0x40
#define _SMT1CPRU_CPR23_POSN                                0x7
#define _SMT1CPRU_CPR23_POSITION                            0x7
#define _SMT1CPRU_CPR23_SIZE                                0x1
#define _SMT1CPRU_CPR23_LENGTH                              0x1
#define _SMT1CPRU_CPR23_MASK                                0x80
#define _SMT1CPRU_SMT1CPR16_POSN                            0x0
#define _SMT1CPRU_SMT1CPR16_POSITION                        0x0
#define _SMT1CPRU_SMT1CPR16_SIZE                            0x1
#define _SMT1CPRU_SMT1CPR16_LENGTH                          0x1
#define _SMT1CPRU_SMT1CPR16_MASK                            0x1
#define _SMT1CPRU_SMT1CPR17_POSN                            0x1
#define _SMT1CPRU_SMT1CPR17_POSITION                        0x1
#define _SMT1CPRU_SMT1CPR17_SIZE                            0x1
#define _SMT1CPRU_SMT1CPR17_LENGTH                          0x1
#define _SMT1CPRU_SMT1CPR17_MASK                            0x2
#define _SMT1CPRU_SMT1CPR18_POSN                            0x2
#define _SMT1CPRU_SMT1CPR18_POSITION                        0x2
#define _SMT1CPRU_SMT1CPR18_SIZE                            0x1
#define _SMT1CPRU_SMT1CPR18_LENGTH                          0x1
#define _SMT1CPRU_SMT1CPR18_MASK                            0x4
#define _SMT1CPRU_SMT1CPR19_POSN                            0x3
#define _SMT1CPRU_SMT1CPR19_POSITION                        0x3
#define _SMT1CPRU_SMT1CPR19_SIZE                            0x1
#define _SMT1CPRU_SMT1CPR19_LENGTH                          0x1
#define _SMT1CPRU_SMT1CPR19_MASK                            0x8
#define _SMT1CPRU_SMT1CPR20_POSN                            0x4
#define _SMT1CPRU_SMT1CPR20_POSITION                        0x4
#define _SMT1CPRU_SMT1CPR20_SIZE                            0x1
#define _SMT1CPRU_SMT1CPR20_LENGTH                          0x1
#define _SMT1CPRU_SMT1CPR20_MASK                            0x10
#define _SMT1CPRU_SMT1CPR21_POSN                            0x5
#define _SMT1CPRU_SMT1CPR21_POSITION                        0x5
#define _SMT1CPRU_SMT1CPR21_SIZE                            0x1
#define _SMT1CPRU_SMT1CPR21_LENGTH                          0x1
#define _SMT1CPRU_SMT1CPR21_MASK                            0x20
#define _SMT1CPRU_SMT1CPR22_POSN                            0x6
#define _SMT1CPRU_SMT1CPR22_POSITION                        0x6
#define _SMT1CPRU_SMT1CPR22_SIZE                            0x1
#define _SMT1CPRU_SMT1CPR22_LENGTH                          0x1
#define _SMT1CPRU_SMT1CPR22_MASK                            0x40
#define _SMT1CPRU_SMT1CPR23_POSN                            0x7
#define _SMT1CPRU_SMT1CPR23_POSITION                        0x7
#define _SMT1CPRU_SMT1CPR23_SIZE                            0x1
#define _SMT1CPRU_SMT1CPR23_LENGTH                          0x1
#define _SMT1CPRU_SMT1CPR23_MASK                            0x80
#define _SMT1CPRU_SMT1CPR_POSN                              0x0
#define _SMT1CPRU_SMT1CPR_POSITION                          0x0
#define _SMT1CPRU_SMT1CPR_SIZE                              0x8
#define _SMT1CPRU_SMT1CPR_LENGTH                            0x8
#define _SMT1CPRU_SMT1CPR_MASK                              0xFF

// Register: SMT1CPW
#define SMT1CPW SMT1CPW
#ifndef __CCI__
extern volatile __uint24                SMT1CPW             __at(0x3F18);
#endif
#ifndef _LIB_BUILD
asm("SMT1CPW equ 03F18h");
#endif

// Register: SMT1CPWL
#define SMT1CPWL SMT1CPWL
extern volatile unsigned char           SMT1CPWL            __at(0x3F18);
#ifndef _LIB_BUILD
asm("SMT1CPWL equ 03F18h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CPW                    :8;
    };
    struct {
        unsigned CPW0                   :1;
        unsigned CPW1                   :1;
        unsigned CPW2                   :1;
        unsigned CPW3                   :1;
        unsigned CPW4                   :1;
        unsigned CPW5                   :1;
        unsigned CPW6                   :1;
        unsigned CPW7                   :1;
    };
    struct {
        unsigned SMT1CPW                :8;
    };
    struct {
        unsigned SMT1CPW0               :1;
        unsigned SMT1CPW1               :1;
        unsigned SMT1CPW2               :1;
        unsigned SMT1CPW3               :1;
        unsigned SMT1CPW4               :1;
        unsigned SMT1CPW5               :1;
        unsigned SMT1CPW6               :1;
        unsigned SMT1CPW7               :1;
    };
} SMT1CPWLbits_t;
extern volatile SMT1CPWLbits_t SMT1CPWLbits __at(0x3F18);
// bitfield macros
#define _SMT1CPWL_CPW_POSN                                  0x0
#define _SMT1CPWL_CPW_POSITION                              0x0
#define _SMT1CPWL_CPW_SIZE                                  0x8
#define _SMT1CPWL_CPW_LENGTH                                0x8
#define _SMT1CPWL_CPW_MASK                                  0xFF
#define _SMT1CPWL_CPW0_POSN                                 0x0
#define _SMT1CPWL_CPW0_POSITION                             0x0
#define _SMT1CPWL_CPW0_SIZE                                 0x1
#define _SMT1CPWL_CPW0_LENGTH                               0x1
#define _SMT1CPWL_CPW0_MASK                                 0x1
#define _SMT1CPWL_CPW1_POSN                                 0x1
#define _SMT1CPWL_CPW1_POSITION                             0x1
#define _SMT1CPWL_CPW1_SIZE                                 0x1
#define _SMT1CPWL_CPW1_LENGTH                               0x1
#define _SMT1CPWL_CPW1_MASK                                 0x2
#define _SMT1CPWL_CPW2_POSN                                 0x2
#define _SMT1CPWL_CPW2_POSITION                             0x2
#define _SMT1CPWL_CPW2_SIZE                                 0x1
#define _SMT1CPWL_CPW2_LENGTH                               0x1
#define _SMT1CPWL_CPW2_MASK                                 0x4
#define _SMT1CPWL_CPW3_POSN                                 0x3
#define _SMT1CPWL_CPW3_POSITION                             0x3
#define _SMT1CPWL_CPW3_SIZE                                 0x1
#define _SMT1CPWL_CPW3_LENGTH                               0x1
#define _SMT1CPWL_CPW3_MASK                                 0x8
#define _SMT1CPWL_CPW4_POSN                                 0x4
#define _SMT1CPWL_CPW4_POSITION                             0x4
#define _SMT1CPWL_CPW4_SIZE                                 0x1
#define _SMT1CPWL_CPW4_LENGTH                               0x1
#define _SMT1CPWL_CPW4_MASK                                 0x10
#define _SMT1CPWL_CPW5_POSN                                 0x5
#define _SMT1CPWL_CPW5_POSITION                             0x5
#define _SMT1CPWL_CPW5_SIZE                                 0x1
#define _SMT1CPWL_CPW5_LENGTH                               0x1
#define _SMT1CPWL_CPW5_MASK                                 0x20
#define _SMT1CPWL_CPW6_POSN                                 0x6
#define _SMT1CPWL_CPW6_POSITION                             0x6
#define _SMT1CPWL_CPW6_SIZE                                 0x1
#define _SMT1CPWL_CPW6_LENGTH                               0x1
#define _SMT1CPWL_CPW6_MASK                                 0x40
#define _SMT1CPWL_CPW7_POSN                                 0x7
#define _SMT1CPWL_CPW7_POSITION                             0x7
#define _SMT1CPWL_CPW7_SIZE                                 0x1
#define _SMT1CPWL_CPW7_LENGTH                               0x1
#define _SMT1CPWL_CPW7_MASK                                 0x80
#define _SMT1CPWL_SMT1CPW_POSN                              0x0
#define _SMT1CPWL_SMT1CPW_POSITION                          0x0
#define _SMT1CPWL_SMT1CPW_SIZE                              0x8
#define _SMT1CPWL_SMT1CPW_LENGTH                            0x8
#define _SMT1CPWL_SMT1CPW_MASK                              0xFF
#define _SMT1CPWL_SMT1CPW0_POSN                             0x0
#define _SMT1CPWL_SMT1CPW0_POSITION                         0x0
#define _SMT1CPWL_SMT1CPW0_SIZE                             0x1
#define _SMT1CPWL_SMT1CPW0_LENGTH                           0x1
#define _SMT1CPWL_SMT1CPW0_MASK                             0x1
#define _SMT1CPWL_SMT1CPW1_POSN                             0x1
#define _SMT1CPWL_SMT1CPW1_POSITION                         0x1
#define _SMT1CPWL_SMT1CPW1_SIZE                             0x1
#define _SMT1CPWL_SMT1CPW1_LENGTH                           0x1
#define _SMT1CPWL_SMT1CPW1_MASK                             0x2
#define _SMT1CPWL_SMT1CPW2_POSN                             0x2
#define _SMT1CPWL_SMT1CPW2_POSITION                         0x2
#define _SMT1CPWL_SMT1CPW2_SIZE                             0x1
#define _SMT1CPWL_SMT1CPW2_LENGTH                           0x1
#define _SMT1CPWL_SMT1CPW2_MASK                             0x4
#define _SMT1CPWL_SMT1CPW3_POSN                             0x3
#define _SMT1CPWL_SMT1CPW3_POSITION                         0x3
#define _SMT1CPWL_SMT1CPW3_SIZE                             0x1
#define _SMT1CPWL_SMT1CPW3_LENGTH                           0x1
#define _SMT1CPWL_SMT1CPW3_MASK                             0x8
#define _SMT1CPWL_SMT1CPW4_POSN                             0x4
#define _SMT1CPWL_SMT1CPW4_POSITION                         0x4
#define _SMT1CPWL_SMT1CPW4_SIZE                             0x1
#define _SMT1CPWL_SMT1CPW4_LENGTH                           0x1
#define _SMT1CPWL_SMT1CPW4_MASK                             0x10
#define _SMT1CPWL_SMT1CPW5_POSN                             0x5
#define _SMT1CPWL_SMT1CPW5_POSITION                         0x5
#define _SMT1CPWL_SMT1CPW5_SIZE                             0x1
#define _SMT1CPWL_SMT1CPW5_LENGTH                           0x1
#define _SMT1CPWL_SMT1CPW5_MASK                             0x20
#define _SMT1CPWL_SMT1CPW6_POSN                             0x6
#define _SMT1CPWL_SMT1CPW6_POSITION                         0x6
#define _SMT1CPWL_SMT1CPW6_SIZE                             0x1
#define _SMT1CPWL_SMT1CPW6_LENGTH                           0x1
#define _SMT1CPWL_SMT1CPW6_MASK                             0x40
#define _SMT1CPWL_SMT1CPW7_POSN                             0x7
#define _SMT1CPWL_SMT1CPW7_POSITION                         0x7
#define _SMT1CPWL_SMT1CPW7_SIZE                             0x1
#define _SMT1CPWL_SMT1CPW7_LENGTH                           0x1
#define _SMT1CPWL_SMT1CPW7_MASK                             0x80

// Register: SMT1CPWH
#define SMT1CPWH SMT1CPWH
extern volatile unsigned char           SMT1CPWH            __at(0x3F19);
#ifndef _LIB_BUILD
asm("SMT1CPWH equ 03F19h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CPW                    :8;
    };
    struct {
        unsigned CPW8                   :1;
        unsigned CPW9                   :1;
        unsigned CPW10                  :1;
        unsigned CPW11                  :1;
        unsigned CPW12                  :1;
        unsigned CPW13                  :1;
        unsigned CPW14                  :1;
        unsigned CPW15                  :1;
    };
    struct {
        unsigned SMT1CPW                :8;
    };
    struct {
        unsigned SMT1CPW8               :1;
        unsigned SMT1CPW9               :1;
        unsigned SMT1CPW10              :1;
        unsigned SMT1CPW11              :1;
        unsigned SMT1CPW12              :1;
        unsigned SMT1CPW13              :1;
        unsigned SMT1CPW14              :1;
        unsigned SMT1CPW15              :1;
    };
} SMT1CPWHbits_t;
extern volatile SMT1CPWHbits_t SMT1CPWHbits __at(0x3F19);
// bitfield macros
#define _SMT1CPWH_CPW_POSN                                  0x0
#define _SMT1CPWH_CPW_POSITION                              0x0
#define _SMT1CPWH_CPW_SIZE                                  0x8
#define _SMT1CPWH_CPW_LENGTH                                0x8
#define _SMT1CPWH_CPW_MASK                                  0xFF
#define _SMT1CPWH_CPW8_POSN                                 0x0
#define _SMT1CPWH_CPW8_POSITION                             0x0
#define _SMT1CPWH_CPW8_SIZE                                 0x1
#define _SMT1CPWH_CPW8_LENGTH                               0x1
#define _SMT1CPWH_CPW8_MASK                                 0x1
#define _SMT1CPWH_CPW9_POSN                                 0x1
#define _SMT1CPWH_CPW9_POSITION                             0x1
#define _SMT1CPWH_CPW9_SIZE                                 0x1
#define _SMT1CPWH_CPW9_LENGTH                               0x1
#define _SMT1CPWH_CPW9_MASK                                 0x2
#define _SMT1CPWH_CPW10_POSN                                0x2
#define _SMT1CPWH_CPW10_POSITION                            0x2
#define _SMT1CPWH_CPW10_SIZE                                0x1
#define _SMT1CPWH_CPW10_LENGTH                              0x1
#define _SMT1CPWH_CPW10_MASK                                0x4
#define _SMT1CPWH_CPW11_POSN                                0x3
#define _SMT1CPWH_CPW11_POSITION                            0x3
#define _SMT1CPWH_CPW11_SIZE                                0x1
#define _SMT1CPWH_CPW11_LENGTH                              0x1
#define _SMT1CPWH_CPW11_MASK                                0x8
#define _SMT1CPWH_CPW12_POSN                                0x4
#define _SMT1CPWH_CPW12_POSITION                            0x4
#define _SMT1CPWH_CPW12_SIZE                                0x1
#define _SMT1CPWH_CPW12_LENGTH                              0x1
#define _SMT1CPWH_CPW12_MASK                                0x10
#define _SMT1CPWH_CPW13_POSN                                0x5
#define _SMT1CPWH_CPW13_POSITION                            0x5
#define _SMT1CPWH_CPW13_SIZE                                0x1
#define _SMT1CPWH_CPW13_LENGTH                              0x1
#define _SMT1CPWH_CPW13_MASK                                0x20
#define _SMT1CPWH_CPW14_POSN                                0x6
#define _SMT1CPWH_CPW14_POSITION                            0x6
#define _SMT1CPWH_CPW14_SIZE                                0x1
#define _SMT1CPWH_CPW14_LENGTH                              0x1
#define _SMT1CPWH_CPW14_MASK                                0x40
#define _SMT1CPWH_CPW15_POSN                                0x7
#define _SMT1CPWH_CPW15_POSITION                            0x7
#define _SMT1CPWH_CPW15_SIZE                                0x1
#define _SMT1CPWH_CPW15_LENGTH                              0x1
#define _SMT1CPWH_CPW15_MASK                                0x80
#define _SMT1CPWH_SMT1CPW_POSN                              0x0
#define _SMT1CPWH_SMT1CPW_POSITION                          0x0
#define _SMT1CPWH_SMT1CPW_SIZE                              0x8
#define _SMT1CPWH_SMT1CPW_LENGTH                            0x8
#define _SMT1CPWH_SMT1CPW_MASK                              0xFF
#define _SMT1CPWH_SMT1CPW8_POSN                             0x0
#define _SMT1CPWH_SMT1CPW8_POSITION                         0x0
#define _SMT1CPWH_SMT1CPW8_SIZE                             0x1
#define _SMT1CPWH_SMT1CPW8_LENGTH                           0x1
#define _SMT1CPWH_SMT1CPW8_MASK                             0x1
#define _SMT1CPWH_SMT1CPW9_POSN                             0x1
#define _SMT1CPWH_SMT1CPW9_POSITION                         0x1
#define _SMT1CPWH_SMT1CPW9_SIZE                             0x1
#define _SMT1CPWH_SMT1CPW9_LENGTH                           0x1
#define _SMT1CPWH_SMT1CPW9_MASK                             0x2
#define _SMT1CPWH_SMT1CPW10_POSN                            0x2
#define _SMT1CPWH_SMT1CPW10_POSITION                        0x2
#define _SMT1CPWH_SMT1CPW10_SIZE                            0x1
#define _SMT1CPWH_SMT1CPW10_LENGTH                          0x1
#define _SMT1CPWH_SMT1CPW10_MASK                            0x4
#define _SMT1CPWH_SMT1CPW11_POSN                            0x3
#define _SMT1CPWH_SMT1CPW11_POSITION                        0x3
#define _SMT1CPWH_SMT1CPW11_SIZE                            0x1
#define _SMT1CPWH_SMT1CPW11_LENGTH                          0x1
#define _SMT1CPWH_SMT1CPW11_MASK                            0x8
#define _SMT1CPWH_SMT1CPW12_POSN                            0x4
#define _SMT1CPWH_SMT1CPW12_POSITION                        0x4
#define _SMT1CPWH_SMT1CPW12_SIZE                            0x1
#define _SMT1CPWH_SMT1CPW12_LENGTH                          0x1
#define _SMT1CPWH_SMT1CPW12_MASK                            0x10
#define _SMT1CPWH_SMT1CPW13_POSN                            0x5
#define _SMT1CPWH_SMT1CPW13_POSITION                        0x5
#define _SMT1CPWH_SMT1CPW13_SIZE                            0x1
#define _SMT1CPWH_SMT1CPW13_LENGTH                          0x1
#define _SMT1CPWH_SMT1CPW13_MASK                            0x20
#define _SMT1CPWH_SMT1CPW14_POSN                            0x6
#define _SMT1CPWH_SMT1CPW14_POSITION                        0x6
#define _SMT1CPWH_SMT1CPW14_SIZE                            0x1
#define _SMT1CPWH_SMT1CPW14_LENGTH                          0x1
#define _SMT1CPWH_SMT1CPW14_MASK                            0x40
#define _SMT1CPWH_SMT1CPW15_POSN                            0x7
#define _SMT1CPWH_SMT1CPW15_POSITION                        0x7
#define _SMT1CPWH_SMT1CPW15_SIZE                            0x1
#define _SMT1CPWH_SMT1CPW15_LENGTH                          0x1
#define _SMT1CPWH_SMT1CPW15_MASK                            0x80

// Register: SMT1CPWU
#define SMT1CPWU SMT1CPWU
extern volatile unsigned char           SMT1CPWU            __at(0x3F1A);
#ifndef _LIB_BUILD
asm("SMT1CPWU equ 03F1Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CPW                    :8;
    };
    struct {
        unsigned CPW16                  :1;
        unsigned CPW17                  :1;
        unsigned CPW18                  :1;
        unsigned CPW19                  :1;
        unsigned CPW20                  :1;
        unsigned CPW21                  :1;
        unsigned CPW22                  :1;
        unsigned CPW23                  :1;
    };
    struct {
        unsigned SMT1CPW                :8;
    };
    struct {
        unsigned SMT1CPW16              :1;
        unsigned SMT1CPW17              :1;
        unsigned SMT1CPW18              :1;
        unsigned SMT1CPW19              :1;
        unsigned SMT1CPW20              :1;
        unsigned SMT1CPW21              :1;
        unsigned SMT1CPW22              :1;
        unsigned SMT1CPW23              :1;
    };
} SMT1CPWUbits_t;
extern volatile SMT1CPWUbits_t SMT1CPWUbits __at(0x3F1A);
// bitfield macros
#define _SMT1CPWU_CPW_POSN                                  0x0
#define _SMT1CPWU_CPW_POSITION                              0x0
#define _SMT1CPWU_CPW_SIZE                                  0x8
#define _SMT1CPWU_CPW_LENGTH                                0x8
#define _SMT1CPWU_CPW_MASK                                  0xFF
#define _SMT1CPWU_CPW16_POSN                                0x0
#define _SMT1CPWU_CPW16_POSITION                            0x0
#define _SMT1CPWU_CPW16_SIZE                                0x1
#define _SMT1CPWU_CPW16_LENGTH                              0x1
#define _SMT1CPWU_CPW16_MASK                                0x1
#define _SMT1CPWU_CPW17_POSN                                0x1
#define _SMT1CPWU_CPW17_POSITION                            0x1
#define _SMT1CPWU_CPW17_SIZE                                0x1
#define _SMT1CPWU_CPW17_LENGTH                              0x1
#define _SMT1CPWU_CPW17_MASK                                0x2
#define _SMT1CPWU_CPW18_POSN                                0x2
#define _SMT1CPWU_CPW18_POSITION                            0x2
#define _SMT1CPWU_CPW18_SIZE                                0x1
#define _SMT1CPWU_CPW18_LENGTH                              0x1
#define _SMT1CPWU_CPW18_MASK                                0x4
#define _SMT1CPWU_CPW19_POSN                                0x3
#define _SMT1CPWU_CPW19_POSITION                            0x3
#define _SMT1CPWU_CPW19_SIZE                                0x1
#define _SMT1CPWU_CPW19_LENGTH                              0x1
#define _SMT1CPWU_CPW19_MASK                                0x8
#define _SMT1CPWU_CPW20_POSN                                0x4
#define _SMT1CPWU_CPW20_POSITION                            0x4
#define _SMT1CPWU_CPW20_SIZE                                0x1
#define _SMT1CPWU_CPW20_LENGTH                              0x1
#define _SMT1CPWU_CPW20_MASK                                0x10
#define _SMT1CPWU_CPW21_POSN                                0x5
#define _SMT1CPWU_CPW21_POSITION                            0x5
#define _SMT1CPWU_CPW21_SIZE                                0x1
#define _SMT1CPWU_CPW21_LENGTH                              0x1
#define _SMT1CPWU_CPW21_MASK                                0x20
#define _SMT1CPWU_CPW22_POSN                                0x6
#define _SMT1CPWU_CPW22_POSITION                            0x6
#define _SMT1CPWU_CPW22_SIZE                                0x1
#define _SMT1CPWU_CPW22_LENGTH                              0x1
#define _SMT1CPWU_CPW22_MASK                                0x40
#define _SMT1CPWU_CPW23_POSN                                0x7
#define _SMT1CPWU_CPW23_POSITION                            0x7
#define _SMT1CPWU_CPW23_SIZE                                0x1
#define _SMT1CPWU_CPW23_LENGTH                              0x1
#define _SMT1CPWU_CPW23_MASK                                0x80
#define _SMT1CPWU_SMT1CPW_POSN                              0x0
#define _SMT1CPWU_SMT1CPW_POSITION                          0x0
#define _SMT1CPWU_SMT1CPW_SIZE                              0x8
#define _SMT1CPWU_SMT1CPW_LENGTH                            0x8
#define _SMT1CPWU_SMT1CPW_MASK                              0xFF
#define _SMT1CPWU_SMT1CPW16_POSN                            0x0
#define _SMT1CPWU_SMT1CPW16_POSITION                        0x0
#define _SMT1CPWU_SMT1CPW16_SIZE                            0x1
#define _SMT1CPWU_SMT1CPW16_LENGTH                          0x1
#define _SMT1CPWU_SMT1CPW16_MASK                            0x1
#define _SMT1CPWU_SMT1CPW17_POSN                            0x1
#define _SMT1CPWU_SMT1CPW17_POSITION                        0x1
#define _SMT1CPWU_SMT1CPW17_SIZE                            0x1
#define _SMT1CPWU_SMT1CPW17_LENGTH                          0x1
#define _SMT1CPWU_SMT1CPW17_MASK                            0x2
#define _SMT1CPWU_SMT1CPW18_POSN                            0x2
#define _SMT1CPWU_SMT1CPW18_POSITION                        0x2
#define _SMT1CPWU_SMT1CPW18_SIZE                            0x1
#define _SMT1CPWU_SMT1CPW18_LENGTH                          0x1
#define _SMT1CPWU_SMT1CPW18_MASK                            0x4
#define _SMT1CPWU_SMT1CPW19_POSN                            0x3
#define _SMT1CPWU_SMT1CPW19_POSITION                        0x3
#define _SMT1CPWU_SMT1CPW19_SIZE                            0x1
#define _SMT1CPWU_SMT1CPW19_LENGTH                          0x1
#define _SMT1CPWU_SMT1CPW19_MASK                            0x8
#define _SMT1CPWU_SMT1CPW20_POSN                            0x4
#define _SMT1CPWU_SMT1CPW20_POSITION                        0x4
#define _SMT1CPWU_SMT1CPW20_SIZE                            0x1
#define _SMT1CPWU_SMT1CPW20_LENGTH                          0x1
#define _SMT1CPWU_SMT1CPW20_MASK                            0x10
#define _SMT1CPWU_SMT1CPW21_POSN                            0x5
#define _SMT1CPWU_SMT1CPW21_POSITION                        0x5
#define _SMT1CPWU_SMT1CPW21_SIZE                            0x1
#define _SMT1CPWU_SMT1CPW21_LENGTH                          0x1
#define _SMT1CPWU_SMT1CPW21_MASK                            0x20
#define _SMT1CPWU_SMT1CPW22_POSN                            0x6
#define _SMT1CPWU_SMT1CPW22_POSITION                        0x6
#define _SMT1CPWU_SMT1CPW22_SIZE                            0x1
#define _SMT1CPWU_SMT1CPW22_LENGTH                          0x1
#define _SMT1CPWU_SMT1CPW22_MASK                            0x40
#define _SMT1CPWU_SMT1CPW23_POSN                            0x7
#define _SMT1CPWU_SMT1CPW23_POSITION                        0x7
#define _SMT1CPWU_SMT1CPW23_SIZE                            0x1
#define _SMT1CPWU_SMT1CPW23_LENGTH                          0x1
#define _SMT1CPWU_SMT1CPW23_MASK                            0x80

// Register: SMT1PR
#define SMT1PR SMT1PR
#ifndef __CCI__
extern volatile __uint24                SMT1PR              __at(0x3F1B);
#endif
#ifndef _LIB_BUILD
asm("SMT1PR equ 03F1Bh");
#endif

// Register: SMT1PRL
#define SMT1PRL SMT1PRL
extern volatile unsigned char           SMT1PRL             __at(0x3F1B);
#ifndef _LIB_BUILD
asm("SMT1PRL equ 03F1Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PR                     :8;
    };
    struct {
        unsigned PR0                    :1;
        unsigned PR1                    :1;
        unsigned PR2                    :1;
        unsigned PR3                    :1;
        unsigned PR4                    :1;
        unsigned PR5                    :1;
        unsigned PR6                    :1;
        unsigned PR7                    :1;
    };
    struct {
        unsigned SMT1PR                 :8;
    };
    struct {
        unsigned SMT1PR0                :1;
        unsigned SMT1PR1                :1;
        unsigned SMT1PR2                :1;
        unsigned SMT1PR3                :1;
        unsigned SMT1PR4                :1;
        unsigned SMT1PR5                :1;
        unsigned SMT1PR6                :1;
        unsigned SMT1PR7                :1;
    };
} SMT1PRLbits_t;
extern volatile SMT1PRLbits_t SMT1PRLbits __at(0x3F1B);
// bitfield macros
#define _SMT1PRL_PR_POSN                                    0x0
#define _SMT1PRL_PR_POSITION                                0x0
#define _SMT1PRL_PR_SIZE                                    0x8
#define _SMT1PRL_PR_LENGTH                                  0x8
#define _SMT1PRL_PR_MASK                                    0xFF
#define _SMT1PRL_PR0_POSN                                   0x0
#define _SMT1PRL_PR0_POSITION                               0x0
#define _SMT1PRL_PR0_SIZE                                   0x1
#define _SMT1PRL_PR0_LENGTH                                 0x1
#define _SMT1PRL_PR0_MASK                                   0x1
#define _SMT1PRL_PR1_POSN                                   0x1
#define _SMT1PRL_PR1_POSITION                               0x1
#define _SMT1PRL_PR1_SIZE                                   0x1
#define _SMT1PRL_PR1_LENGTH                                 0x1
#define _SMT1PRL_PR1_MASK                                   0x2
#define _SMT1PRL_PR2_POSN                                   0x2
#define _SMT1PRL_PR2_POSITION                               0x2
#define _SMT1PRL_PR2_SIZE                                   0x1
#define _SMT1PRL_PR2_LENGTH                                 0x1
#define _SMT1PRL_PR2_MASK                                   0x4
#define _SMT1PRL_PR3_POSN                                   0x3
#define _SMT1PRL_PR3_POSITION                               0x3
#define _SMT1PRL_PR3_SIZE                                   0x1
#define _SMT1PRL_PR3_LENGTH                                 0x1
#define _SMT1PRL_PR3_MASK                                   0x8
#define _SMT1PRL_PR4_POSN                                   0x4
#define _SMT1PRL_PR4_POSITION                               0x4
#define _SMT1PRL_PR4_SIZE                                   0x1
#define _SMT1PRL_PR4_LENGTH                                 0x1
#define _SMT1PRL_PR4_MASK                                   0x10
#define _SMT1PRL_PR5_POSN                                   0x5
#define _SMT1PRL_PR5_POSITION                               0x5
#define _SMT1PRL_PR5_SIZE                                   0x1
#define _SMT1PRL_PR5_LENGTH                                 0x1
#define _SMT1PRL_PR5_MASK                                   0x20
#define _SMT1PRL_PR6_POSN                                   0x6
#define _SMT1PRL_PR6_POSITION                               0x6
#define _SMT1PRL_PR6_SIZE                                   0x1
#define _SMT1PRL_PR6_LENGTH                                 0x1
#define _SMT1PRL_PR6_MASK                                   0x40
#define _SMT1PRL_PR7_POSN                                   0x7
#define _SMT1PRL_PR7_POSITION                               0x7
#define _SMT1PRL_PR7_SIZE                                   0x1
#define _SMT1PRL_PR7_LENGTH                                 0x1
#define _SMT1PRL_PR7_MASK                                   0x80
#define _SMT1PRL_SMT1PR_POSN                                0x0
#define _SMT1PRL_SMT1PR_POSITION                            0x0
#define _SMT1PRL_SMT1PR_SIZE                                0x8
#define _SMT1PRL_SMT1PR_LENGTH                              0x8
#define _SMT1PRL_SMT1PR_MASK                                0xFF
#define _SMT1PRL_SMT1PR0_POSN                               0x0
#define _SMT1PRL_SMT1PR0_POSITION                           0x0
#define _SMT1PRL_SMT1PR0_SIZE                               0x1
#define _SMT1PRL_SMT1PR0_LENGTH                             0x1
#define _SMT1PRL_SMT1PR0_MASK                               0x1
#define _SMT1PRL_SMT1PR1_POSN                               0x1
#define _SMT1PRL_SMT1PR1_POSITION                           0x1
#define _SMT1PRL_SMT1PR1_SIZE                               0x1
#define _SMT1PRL_SMT1PR1_LENGTH                             0x1
#define _SMT1PRL_SMT1PR1_MASK                               0x2
#define _SMT1PRL_SMT1PR2_POSN                               0x2
#define _SMT1PRL_SMT1PR2_POSITION                           0x2
#define _SMT1PRL_SMT1PR2_SIZE                               0x1
#define _SMT1PRL_SMT1PR2_LENGTH                             0x1
#define _SMT1PRL_SMT1PR2_MASK                               0x4
#define _SMT1PRL_SMT1PR3_POSN                               0x3
#define _SMT1PRL_SMT1PR3_POSITION                           0x3
#define _SMT1PRL_SMT1PR3_SIZE                               0x1
#define _SMT1PRL_SMT1PR3_LENGTH                             0x1
#define _SMT1PRL_SMT1PR3_MASK                               0x8
#define _SMT1PRL_SMT1PR4_POSN                               0x4
#define _SMT1PRL_SMT1PR4_POSITION                           0x4
#define _SMT1PRL_SMT1PR4_SIZE                               0x1
#define _SMT1PRL_SMT1PR4_LENGTH                             0x1
#define _SMT1PRL_SMT1PR4_MASK                               0x10
#define _SMT1PRL_SMT1PR5_POSN                               0x5
#define _SMT1PRL_SMT1PR5_POSITION                           0x5
#define _SMT1PRL_SMT1PR5_SIZE                               0x1
#define _SMT1PRL_SMT1PR5_LENGTH                             0x1
#define _SMT1PRL_SMT1PR5_MASK                               0x20
#define _SMT1PRL_SMT1PR6_POSN                               0x6
#define _SMT1PRL_SMT1PR6_POSITION                           0x6
#define _SMT1PRL_SMT1PR6_SIZE                               0x1
#define _SMT1PRL_SMT1PR6_LENGTH                             0x1
#define _SMT1PRL_SMT1PR6_MASK                               0x40
#define _SMT1PRL_SMT1PR7_POSN                               0x7
#define _SMT1PRL_SMT1PR7_POSITION                           0x7
#define _SMT1PRL_SMT1PR7_SIZE                               0x1
#define _SMT1PRL_SMT1PR7_LENGTH                             0x1
#define _SMT1PRL_SMT1PR7_MASK                               0x80

// Register: SMT1PRH
#define SMT1PRH SMT1PRH
extern volatile unsigned char           SMT1PRH             __at(0x3F1C);
#ifndef _LIB_BUILD
asm("SMT1PRH equ 03F1Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PR                     :8;
    };
    struct {
        unsigned PR8                    :1;
        unsigned PR9                    :1;
        unsigned PR10                   :1;
        unsigned PR11                   :1;
        unsigned PR12                   :1;
        unsigned PR13                   :1;
        unsigned PR14                   :1;
        unsigned PR15                   :1;
    };
    struct {
        unsigned SMT1PR                 :8;
    };
    struct {
        unsigned SMT1PR8                :1;
        unsigned SMT1PR9                :1;
        unsigned SMT1PR10               :1;
        unsigned SMT1PR11               :1;
        unsigned SMT1PR12               :1;
        unsigned SMT1PR13               :1;
        unsigned SMT1PR14               :1;
        unsigned SMT1PR15               :1;
    };
} SMT1PRHbits_t;
extern volatile SMT1PRHbits_t SMT1PRHbits __at(0x3F1C);
// bitfield macros
#define _SMT1PRH_PR_POSN                                    0x0
#define _SMT1PRH_PR_POSITION                                0x0
#define _SMT1PRH_PR_SIZE                                    0x8
#define _SMT1PRH_PR_LENGTH                                  0x8
#define _SMT1PRH_PR_MASK                                    0xFF
#define _SMT1PRH_PR8_POSN                                   0x0
#define _SMT1PRH_PR8_POSITION                               0x0
#define _SMT1PRH_PR8_SIZE                                   0x1
#define _SMT1PRH_PR8_LENGTH                                 0x1
#define _SMT1PRH_PR8_MASK                                   0x1
#define _SMT1PRH_PR9_POSN                                   0x1
#define _SMT1PRH_PR9_POSITION                               0x1
#define _SMT1PRH_PR9_SIZE                                   0x1
#define _SMT1PRH_PR9_LENGTH                                 0x1
#define _SMT1PRH_PR9_MASK                                   0x2
#define _SMT1PRH_PR10_POSN                                  0x2
#define _SMT1PRH_PR10_POSITION                              0x2
#define _SMT1PRH_PR10_SIZE                                  0x1
#define _SMT1PRH_PR10_LENGTH                                0x1
#define _SMT1PRH_PR10_MASK                                  0x4
#define _SMT1PRH_PR11_POSN                                  0x3
#define _SMT1PRH_PR11_POSITION                              0x3
#define _SMT1PRH_PR11_SIZE                                  0x1
#define _SMT1PRH_PR11_LENGTH                                0x1
#define _SMT1PRH_PR11_MASK                                  0x8
#define _SMT1PRH_PR12_POSN                                  0x4
#define _SMT1PRH_PR12_POSITION                              0x4
#define _SMT1PRH_PR12_SIZE                                  0x1
#define _SMT1PRH_PR12_LENGTH                                0x1
#define _SMT1PRH_PR12_MASK                                  0x10
#define _SMT1PRH_PR13_POSN                                  0x5
#define _SMT1PRH_PR13_POSITION                              0x5
#define _SMT1PRH_PR13_SIZE                                  0x1
#define _SMT1PRH_PR13_LENGTH                                0x1
#define _SMT1PRH_PR13_MASK                                  0x20
#define _SMT1PRH_PR14_POSN                                  0x6
#define _SMT1PRH_PR14_POSITION                              0x6
#define _SMT1PRH_PR14_SIZE                                  0x1
#define _SMT1PRH_PR14_LENGTH                                0x1
#define _SMT1PRH_PR14_MASK                                  0x40
#define _SMT1PRH_PR15_POSN                                  0x7
#define _SMT1PRH_PR15_POSITION                              0x7
#define _SMT1PRH_PR15_SIZE                                  0x1
#define _SMT1PRH_PR15_LENGTH                                0x1
#define _SMT1PRH_PR15_MASK                                  0x80
#define _SMT1PRH_SMT1PR_POSN                                0x0
#define _SMT1PRH_SMT1PR_POSITION                            0x0
#define _SMT1PRH_SMT1PR_SIZE                                0x8
#define _SMT1PRH_SMT1PR_LENGTH                              0x8
#define _SMT1PRH_SMT1PR_MASK                                0xFF
#define _SMT1PRH_SMT1PR8_POSN                               0x0
#define _SMT1PRH_SMT1PR8_POSITION                           0x0
#define _SMT1PRH_SMT1PR8_SIZE                               0x1
#define _SMT1PRH_SMT1PR8_LENGTH                             0x1
#define _SMT1PRH_SMT1PR8_MASK                               0x1
#define _SMT1PRH_SMT1PR9_POSN                               0x1
#define _SMT1PRH_SMT1PR9_POSITION                           0x1
#define _SMT1PRH_SMT1PR9_SIZE                               0x1
#define _SMT1PRH_SMT1PR9_LENGTH                             0x1
#define _SMT1PRH_SMT1PR9_MASK                               0x2
#define _SMT1PRH_SMT1PR10_POSN                              0x2
#define _SMT1PRH_SMT1PR10_POSITION                          0x2
#define _SMT1PRH_SMT1PR10_SIZE                              0x1
#define _SMT1PRH_SMT1PR10_LENGTH                            0x1
#define _SMT1PRH_SMT1PR10_MASK                              0x4
#define _SMT1PRH_SMT1PR11_POSN                              0x3
#define _SMT1PRH_SMT1PR11_POSITION                          0x3
#define _SMT1PRH_SMT1PR11_SIZE                              0x1
#define _SMT1PRH_SMT1PR11_LENGTH                            0x1
#define _SMT1PRH_SMT1PR11_MASK                              0x8
#define _SMT1PRH_SMT1PR12_POSN                              0x4
#define _SMT1PRH_SMT1PR12_POSITION                          0x4
#define _SMT1PRH_SMT1PR12_SIZE                              0x1
#define _SMT1PRH_SMT1PR12_LENGTH                            0x1
#define _SMT1PRH_SMT1PR12_MASK                              0x10
#define _SMT1PRH_SMT1PR13_POSN                              0x5
#define _SMT1PRH_SMT1PR13_POSITION                          0x5
#define _SMT1PRH_SMT1PR13_SIZE                              0x1
#define _SMT1PRH_SMT1PR13_LENGTH                            0x1
#define _SMT1PRH_SMT1PR13_MASK                              0x20
#define _SMT1PRH_SMT1PR14_POSN                              0x6
#define _SMT1PRH_SMT1PR14_POSITION                          0x6
#define _SMT1PRH_SMT1PR14_SIZE                              0x1
#define _SMT1PRH_SMT1PR14_LENGTH                            0x1
#define _SMT1PRH_SMT1PR14_MASK                              0x40
#define _SMT1PRH_SMT1PR15_POSN                              0x7
#define _SMT1PRH_SMT1PR15_POSITION                          0x7
#define _SMT1PRH_SMT1PR15_SIZE                              0x1
#define _SMT1PRH_SMT1PR15_LENGTH                            0x1
#define _SMT1PRH_SMT1PR15_MASK                              0x80

// Register: SMT1PRU
#define SMT1PRU SMT1PRU
extern volatile unsigned char           SMT1PRU             __at(0x3F1D);
#ifndef _LIB_BUILD
asm("SMT1PRU equ 03F1Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PR                     :8;
    };
    struct {
        unsigned PR16                   :1;
        unsigned PR17                   :1;
        unsigned PR18                   :1;
        unsigned PR19                   :1;
        unsigned PR20                   :1;
        unsigned PR21                   :1;
        unsigned PR22                   :1;
        unsigned PR23                   :1;
    };
    struct {
        unsigned SMT1PR                 :8;
    };
    struct {
        unsigned SMT1PR16               :1;
        unsigned SMT1PR17               :1;
        unsigned SMT1PR18               :1;
        unsigned SMT1PR19               :1;
        unsigned SMT1PR20               :1;
        unsigned SMT1PR21               :1;
        unsigned SMT1PR22               :1;
        unsigned SMT1PR23               :1;
    };
} SMT1PRUbits_t;
extern volatile SMT1PRUbits_t SMT1PRUbits __at(0x3F1D);
// bitfield macros
#define _SMT1PRU_PR_POSN                                    0x0
#define _SMT1PRU_PR_POSITION                                0x0
#define _SMT1PRU_PR_SIZE                                    0x8
#define _SMT1PRU_PR_LENGTH                                  0x8
#define _SMT1PRU_PR_MASK                                    0xFF
#define _SMT1PRU_PR16_POSN                                  0x0
#define _SMT1PRU_PR16_POSITION                              0x0
#define _SMT1PRU_PR16_SIZE                                  0x1
#define _SMT1PRU_PR16_LENGTH                                0x1
#define _SMT1PRU_PR16_MASK                                  0x1
#define _SMT1PRU_PR17_POSN                                  0x1
#define _SMT1PRU_PR17_POSITION                              0x1
#define _SMT1PRU_PR17_SIZE                                  0x1
#define _SMT1PRU_PR17_LENGTH                                0x1
#define _SMT1PRU_PR17_MASK                                  0x2
#define _SMT1PRU_PR18_POSN                                  0x2
#define _SMT1PRU_PR18_POSITION                              0x2
#define _SMT1PRU_PR18_SIZE                                  0x1
#define _SMT1PRU_PR18_LENGTH                                0x1
#define _SMT1PRU_PR18_MASK                                  0x4
#define _SMT1PRU_PR19_POSN                                  0x3
#define _SMT1PRU_PR19_POSITION                              0x3
#define _SMT1PRU_PR19_SIZE                                  0x1
#define _SMT1PRU_PR19_LENGTH                                0x1
#define _SMT1PRU_PR19_MASK                                  0x8
#define _SMT1PRU_PR20_POSN                                  0x4
#define _SMT1PRU_PR20_POSITION                              0x4
#define _SMT1PRU_PR20_SIZE                                  0x1
#define _SMT1PRU_PR20_LENGTH                                0x1
#define _SMT1PRU_PR20_MASK                                  0x10
#define _SMT1PRU_PR21_POSN                                  0x5
#define _SMT1PRU_PR21_POSITION                              0x5
#define _SMT1PRU_PR21_SIZE                                  0x1
#define _SMT1PRU_PR21_LENGTH                                0x1
#define _SMT1PRU_PR21_MASK                                  0x20
#define _SMT1PRU_PR22_POSN                                  0x6
#define _SMT1PRU_PR22_POSITION                              0x6
#define _SMT1PRU_PR22_SIZE                                  0x1
#define _SMT1PRU_PR22_LENGTH                                0x1
#define _SMT1PRU_PR22_MASK                                  0x40
#define _SMT1PRU_PR23_POSN                                  0x7
#define _SMT1PRU_PR23_POSITION                              0x7
#define _SMT1PRU_PR23_SIZE                                  0x1
#define _SMT1PRU_PR23_LENGTH                                0x1
#define _SMT1PRU_PR23_MASK                                  0x80
#define _SMT1PRU_SMT1PR_POSN                                0x0
#define _SMT1PRU_SMT1PR_POSITION                            0x0
#define _SMT1PRU_SMT1PR_SIZE                                0x8
#define _SMT1PRU_SMT1PR_LENGTH                              0x8
#define _SMT1PRU_SMT1PR_MASK                                0xFF
#define _SMT1PRU_SMT1PR16_POSN                              0x0
#define _SMT1PRU_SMT1PR16_POSITION                          0x0
#define _SMT1PRU_SMT1PR16_SIZE                              0x1
#define _SMT1PRU_SMT1PR16_LENGTH                            0x1
#define _SMT1PRU_SMT1PR16_MASK                              0x1
#define _SMT1PRU_SMT1PR17_POSN                              0x1
#define _SMT1PRU_SMT1PR17_POSITION                          0x1
#define _SMT1PRU_SMT1PR17_SIZE                              0x1
#define _SMT1PRU_SMT1PR17_LENGTH                            0x1
#define _SMT1PRU_SMT1PR17_MASK                              0x2
#define _SMT1PRU_SMT1PR18_POSN                              0x2
#define _SMT1PRU_SMT1PR18_POSITION                          0x2
#define _SMT1PRU_SMT1PR18_SIZE                              0x1
#define _SMT1PRU_SMT1PR18_LENGTH                            0x1
#define _SMT1PRU_SMT1PR18_MASK                              0x4
#define _SMT1PRU_SMT1PR19_POSN                              0x3
#define _SMT1PRU_SMT1PR19_POSITION                          0x3
#define _SMT1PRU_SMT1PR19_SIZE                              0x1
#define _SMT1PRU_SMT1PR19_LENGTH                            0x1
#define _SMT1PRU_SMT1PR19_MASK                              0x8
#define _SMT1PRU_SMT1PR20_POSN                              0x4
#define _SMT1PRU_SMT1PR20_POSITION                          0x4
#define _SMT1PRU_SMT1PR20_SIZE                              0x1
#define _SMT1PRU_SMT1PR20_LENGTH                            0x1
#define _SMT1PRU_SMT1PR20_MASK                              0x10
#define _SMT1PRU_SMT1PR21_POSN                              0x5
#define _SMT1PRU_SMT1PR21_POSITION                          0x5
#define _SMT1PRU_SMT1PR21_SIZE                              0x1
#define _SMT1PRU_SMT1PR21_LENGTH                            0x1
#define _SMT1PRU_SMT1PR21_MASK                              0x20
#define _SMT1PRU_SMT1PR22_POSN                              0x6
#define _SMT1PRU_SMT1PR22_POSITION                          0x6
#define _SMT1PRU_SMT1PR22_SIZE                              0x1
#define _SMT1PRU_SMT1PR22_LENGTH                            0x1
#define _SMT1PRU_SMT1PR22_MASK                              0x40
#define _SMT1PRU_SMT1PR23_POSN                              0x7
#define _SMT1PRU_SMT1PR23_POSITION                          0x7
#define _SMT1PRU_SMT1PR23_SIZE                              0x1
#define _SMT1PRU_SMT1PR23_LENGTH                            0x1
#define _SMT1PRU_SMT1PR23_MASK                              0x80

// Register: SMT1CON0
#define SMT1CON0 SMT1CON0
extern volatile unsigned char           SMT1CON0            __at(0x3F1E);
#ifndef _LIB_BUILD
asm("SMT1CON0 equ 03F1Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PS                     :2;
        unsigned CPOL                   :1;
        unsigned SPOL                   :1;
        unsigned WPOL                   :1;
        unsigned STP                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned SMT1PS                 :2;
        unsigned SMT1CPOL               :1;
        unsigned SMT1SPOL               :1;
        unsigned SMT1WOL                :1;
        unsigned SMT1STP                :1;
        unsigned                        :1;
        unsigned SMT1EN                 :1;
    };
    struct {
        unsigned PS0                    :1;
        unsigned PS1                    :1;
    };
    struct {
        unsigned SMT1PS0                :1;
        unsigned SMT1PS1                :1;
    };
} SMT1CON0bits_t;
extern volatile SMT1CON0bits_t SMT1CON0bits __at(0x3F1E);
// bitfield macros
#define _SMT1CON0_PS_POSN                                   0x0
#define _SMT1CON0_PS_POSITION                               0x0
#define _SMT1CON0_PS_SIZE                                   0x2
#define _SMT1CON0_PS_LENGTH                                 0x2
#define _SMT1CON0_PS_MASK                                   0x3
#define _SMT1CON0_CPOL_POSN                                 0x2
#define _SMT1CON0_CPOL_POSITION                             0x2
#define _SMT1CON0_CPOL_SIZE                                 0x1
#define _SMT1CON0_CPOL_LENGTH                               0x1
#define _SMT1CON0_CPOL_MASK                                 0x4
#define _SMT1CON0_SPOL_POSN                                 0x3
#define _SMT1CON0_SPOL_POSITION                             0x3
#define _SMT1CON0_SPOL_SIZE                                 0x1
#define _SMT1CON0_SPOL_LENGTH                               0x1
#define _SMT1CON0_SPOL_MASK                                 0x8
#define _SMT1CON0_WPOL_POSN                                 0x4
#define _SMT1CON0_WPOL_POSITION                             0x4
#define _SMT1CON0_WPOL_SIZE                                 0x1
#define _SMT1CON0_WPOL_LENGTH                               0x1
#define _SMT1CON0_WPOL_MASK                                 0x10
#define _SMT1CON0_STP_POSN                                  0x5
#define _SMT1CON0_STP_POSITION                              0x5
#define _SMT1CON0_STP_SIZE                                  0x1
#define _SMT1CON0_STP_LENGTH                                0x1
#define _SMT1CON0_STP_MASK                                  0x20
#define _SMT1CON0_EN_POSN                                   0x7
#define _SMT1CON0_EN_POSITION                               0x7
#define _SMT1CON0_EN_SIZE                                   0x1
#define _SMT1CON0_EN_LENGTH                                 0x1
#define _SMT1CON0_EN_MASK                                   0x80
#define _SMT1CON0_SMT1PS_POSN                               0x0
#define _SMT1CON0_SMT1PS_POSITION                           0x0
#define _SMT1CON0_SMT1PS_SIZE                               0x2
#define _SMT1CON0_SMT1PS_LENGTH                             0x2
#define _SMT1CON0_SMT1PS_MASK                               0x3
#define _SMT1CON0_SMT1CPOL_POSN                             0x2
#define _SMT1CON0_SMT1CPOL_POSITION                         0x2
#define _SMT1CON0_SMT1CPOL_SIZE                             0x1
#define _SMT1CON0_SMT1CPOL_LENGTH                           0x1
#define _SMT1CON0_SMT1CPOL_MASK                             0x4
#define _SMT1CON0_SMT1SPOL_POSN                             0x3
#define _SMT1CON0_SMT1SPOL_POSITION                         0x3
#define _SMT1CON0_SMT1SPOL_SIZE                             0x1
#define _SMT1CON0_SMT1SPOL_LENGTH                           0x1
#define _SMT1CON0_SMT1SPOL_MASK                             0x8
#define _SMT1CON0_SMT1WOL_POSN                              0x4
#define _SMT1CON0_SMT1WOL_POSITION                          0x4
#define _SMT1CON0_SMT1WOL_SIZE                              0x1
#define _SMT1CON0_SMT1WOL_LENGTH                            0x1
#define _SMT1CON0_SMT1WOL_MASK                              0x10
#define _SMT1CON0_SMT1STP_POSN                              0x5
#define _SMT1CON0_SMT1STP_POSITION                          0x5
#define _SMT1CON0_SMT1STP_SIZE                              0x1
#define _SMT1CON0_SMT1STP_LENGTH                            0x1
#define _SMT1CON0_SMT1STP_MASK                              0x20
#define _SMT1CON0_SMT1EN_POSN                               0x7
#define _SMT1CON0_SMT1EN_POSITION                           0x7
#define _SMT1CON0_SMT1EN_SIZE                               0x1
#define _SMT1CON0_SMT1EN_LENGTH                             0x1
#define _SMT1CON0_SMT1EN_MASK                               0x80
#define _SMT1CON0_PS0_POSN                                  0x0
#define _SMT1CON0_PS0_POSITION                              0x0
#define _SMT1CON0_PS0_SIZE                                  0x1
#define _SMT1CON0_PS0_LENGTH                                0x1
#define _SMT1CON0_PS0_MASK                                  0x1
#define _SMT1CON0_PS1_POSN                                  0x1
#define _SMT1CON0_PS1_POSITION                              0x1
#define _SMT1CON0_PS1_SIZE                                  0x1
#define _SMT1CON0_PS1_LENGTH                                0x1
#define _SMT1CON0_PS1_MASK                                  0x2
#define _SMT1CON0_SMT1PS0_POSN                              0x0
#define _SMT1CON0_SMT1PS0_POSITION                          0x0
#define _SMT1CON0_SMT1PS0_SIZE                              0x1
#define _SMT1CON0_SMT1PS0_LENGTH                            0x1
#define _SMT1CON0_SMT1PS0_MASK                              0x1
#define _SMT1CON0_SMT1PS1_POSN                              0x1
#define _SMT1CON0_SMT1PS1_POSITION                          0x1
#define _SMT1CON0_SMT1PS1_SIZE                              0x1
#define _SMT1CON0_SMT1PS1_LENGTH                            0x1
#define _SMT1CON0_SMT1PS1_MASK                              0x2

// Register: SMT1CON1
#define SMT1CON1 SMT1CON1
extern volatile unsigned char           SMT1CON1            __at(0x3F1F);
#ifndef _LIB_BUILD
asm("SMT1CON1 equ 03F1Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :4;
        unsigned                        :2;
        unsigned REPEAT                 :1;
        unsigned GO                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned MODE3                  :1;
        unsigned                        :2;
        unsigned SMT1REPEAT             :1;
        unsigned SMT1GO                 :1;
    };
    struct {
        unsigned SMT1MODE               :4;
    };
} SMT1CON1bits_t;
extern volatile SMT1CON1bits_t SMT1CON1bits __at(0x3F1F);
// bitfield macros
#define _SMT1CON1_MODE_POSN                                 0x0
#define _SMT1CON1_MODE_POSITION                             0x0
#define _SMT1CON1_MODE_SIZE                                 0x4
#define _SMT1CON1_MODE_LENGTH                               0x4
#define _SMT1CON1_MODE_MASK                                 0xF
#define _SMT1CON1_REPEAT_POSN                               0x6
#define _SMT1CON1_REPEAT_POSITION                           0x6
#define _SMT1CON1_REPEAT_SIZE                               0x1
#define _SMT1CON1_REPEAT_LENGTH                             0x1
#define _SMT1CON1_REPEAT_MASK                               0x40
#define _SMT1CON1_GO_POSN                                   0x7
#define _SMT1CON1_GO_POSITION                               0x7
#define _SMT1CON1_GO_SIZE                                   0x1
#define _SMT1CON1_GO_LENGTH                                 0x1
#define _SMT1CON1_GO_MASK                                   0x80
#define _SMT1CON1_MODE0_POSN                                0x0
#define _SMT1CON1_MODE0_POSITION                            0x0
#define _SMT1CON1_MODE0_SIZE                                0x1
#define _SMT1CON1_MODE0_LENGTH                              0x1
#define _SMT1CON1_MODE0_MASK                                0x1
#define _SMT1CON1_MODE1_POSN                                0x1
#define _SMT1CON1_MODE1_POSITION                            0x1
#define _SMT1CON1_MODE1_SIZE                                0x1
#define _SMT1CON1_MODE1_LENGTH                              0x1
#define _SMT1CON1_MODE1_MASK                                0x2
#define _SMT1CON1_MODE2_POSN                                0x2
#define _SMT1CON1_MODE2_POSITION                            0x2
#define _SMT1CON1_MODE2_SIZE                                0x1
#define _SMT1CON1_MODE2_LENGTH                              0x1
#define _SMT1CON1_MODE2_MASK                                0x4
#define _SMT1CON1_MODE3_POSN                                0x3
#define _SMT1CON1_MODE3_POSITION                            0x3
#define _SMT1CON1_MODE3_SIZE                                0x1
#define _SMT1CON1_MODE3_LENGTH                              0x1
#define _SMT1CON1_MODE3_MASK                                0x8
#define _SMT1CON1_SMT1REPEAT_POSN                           0x6
#define _SMT1CON1_SMT1REPEAT_POSITION                       0x6
#define _SMT1CON1_SMT1REPEAT_SIZE                           0x1
#define _SMT1CON1_SMT1REPEAT_LENGTH                         0x1
#define _SMT1CON1_SMT1REPEAT_MASK                           0x40
#define _SMT1CON1_SMT1GO_POSN                               0x7
#define _SMT1CON1_SMT1GO_POSITION                           0x7
#define _SMT1CON1_SMT1GO_SIZE                               0x1
#define _SMT1CON1_SMT1GO_LENGTH                             0x1
#define _SMT1CON1_SMT1GO_MASK                               0x80
#define _SMT1CON1_SMT1MODE_POSN                             0x0
#define _SMT1CON1_SMT1MODE_POSITION                         0x0
#define _SMT1CON1_SMT1MODE_SIZE                             0x4
#define _SMT1CON1_SMT1MODE_LENGTH                           0x4
#define _SMT1CON1_SMT1MODE_MASK                             0xF

// Register: SMT1STAT
#define SMT1STAT SMT1STAT
extern volatile unsigned char           SMT1STAT            __at(0x3F20);
#ifndef _LIB_BUILD
asm("SMT1STAT equ 03F20h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned AS                     :1;
        unsigned WS                     :1;
        unsigned TS                     :1;
        unsigned                        :2;
        unsigned RST                    :1;
        unsigned CPWUP                  :1;
        unsigned CPRUP                  :1;
    };
    struct {
        unsigned SMT1AS                 :1;
        unsigned SMT1WS                 :1;
        unsigned SMT1TS                 :1;
        unsigned                        :2;
        unsigned SMT1RESET              :1;
        unsigned SMT1CPWUP              :1;
        unsigned SMT1CPRUP              :1;
    };
    struct {
        unsigned                        :5;
        unsigned SMT1RST                :1;
    };
} SMT1STATbits_t;
extern volatile SMT1STATbits_t SMT1STATbits __at(0x3F20);
// bitfield macros
#define _SMT1STAT_AS_POSN                                   0x0
#define _SMT1STAT_AS_POSITION                               0x0
#define _SMT1STAT_AS_SIZE                                   0x1
#define _SMT1STAT_AS_LENGTH                                 0x1
#define _SMT1STAT_AS_MASK                                   0x1
#define _SMT1STAT_WS_POSN                                   0x1
#define _SMT1STAT_WS_POSITION                               0x1
#define _SMT1STAT_WS_SIZE                                   0x1
#define _SMT1STAT_WS_LENGTH                                 0x1
#define _SMT1STAT_WS_MASK                                   0x2
#define _SMT1STAT_TS_POSN                                   0x2
#define _SMT1STAT_TS_POSITION                               0x2
#define _SMT1STAT_TS_SIZE                                   0x1
#define _SMT1STAT_TS_LENGTH                                 0x1
#define _SMT1STAT_TS_MASK                                   0x4
#define _SMT1STAT_RST_POSN                                  0x5
#define _SMT1STAT_RST_POSITION                              0x5
#define _SMT1STAT_RST_SIZE                                  0x1
#define _SMT1STAT_RST_LENGTH                                0x1
#define _SMT1STAT_RST_MASK                                  0x20
#define _SMT1STAT_CPWUP_POSN                                0x6
#define _SMT1STAT_CPWUP_POSITION                            0x6
#define _SMT1STAT_CPWUP_SIZE                                0x1
#define _SMT1STAT_CPWUP_LENGTH                              0x1
#define _SMT1STAT_CPWUP_MASK                                0x40
#define _SMT1STAT_CPRUP_POSN                                0x7
#define _SMT1STAT_CPRUP_POSITION                            0x7
#define _SMT1STAT_CPRUP_SIZE                                0x1
#define _SMT1STAT_CPRUP_LENGTH                              0x1
#define _SMT1STAT_CPRUP_MASK                                0x80
#define _SMT1STAT_SMT1AS_POSN                               0x0
#define _SMT1STAT_SMT1AS_POSITION                           0x0
#define _SMT1STAT_SMT1AS_SIZE                               0x1
#define _SMT1STAT_SMT1AS_LENGTH                             0x1
#define _SMT1STAT_SMT1AS_MASK                               0x1
#define _SMT1STAT_SMT1WS_POSN                               0x1
#define _SMT1STAT_SMT1WS_POSITION                           0x1
#define _SMT1STAT_SMT1WS_SIZE                               0x1
#define _SMT1STAT_SMT1WS_LENGTH                             0x1
#define _SMT1STAT_SMT1WS_MASK                               0x2
#define _SMT1STAT_SMT1TS_POSN                               0x2
#define _SMT1STAT_SMT1TS_POSITION                           0x2
#define _SMT1STAT_SMT1TS_SIZE                               0x1
#define _SMT1STAT_SMT1TS_LENGTH                             0x1
#define _SMT1STAT_SMT1TS_MASK                               0x4
#define _SMT1STAT_SMT1RESET_POSN                            0x5
#define _SMT1STAT_SMT1RESET_POSITION                        0x5
#define _SMT1STAT_SMT1RESET_SIZE                            0x1
#define _SMT1STAT_SMT1RESET_LENGTH                          0x1
#define _SMT1STAT_SMT1RESET_MASK                            0x20
#define _SMT1STAT_SMT1CPWUP_POSN                            0x6
#define _SMT1STAT_SMT1CPWUP_POSITION                        0x6
#define _SMT1STAT_SMT1CPWUP_SIZE                            0x1
#define _SMT1STAT_SMT1CPWUP_LENGTH                          0x1
#define _SMT1STAT_SMT1CPWUP_MASK                            0x40
#define _SMT1STAT_SMT1CPRUP_POSN                            0x7
#define _SMT1STAT_SMT1CPRUP_POSITION                        0x7
#define _SMT1STAT_SMT1CPRUP_SIZE                            0x1
#define _SMT1STAT_SMT1CPRUP_LENGTH                          0x1
#define _SMT1STAT_SMT1CPRUP_MASK                            0x80
#define _SMT1STAT_SMT1RST_POSN                              0x5
#define _SMT1STAT_SMT1RST_POSITION                          0x5
#define _SMT1STAT_SMT1RST_SIZE                              0x1
#define _SMT1STAT_SMT1RST_LENGTH                            0x1
#define _SMT1STAT_SMT1RST_MASK                              0x20

// Register: SMT1CLK
#define SMT1CLK SMT1CLK
extern volatile unsigned char           SMT1CLK             __at(0x3F21);
#ifndef _LIB_BUILD
asm("SMT1CLK equ 03F21h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CSEL                   :3;
    };
    struct {
        unsigned CSEL0                  :1;
        unsigned CSEL1                  :1;
        unsigned CSEL2                  :1;
    };
    struct {
        unsigned SMT1CSEL               :3;
    };
    struct {
        unsigned SMT1CSEL0              :1;
        unsigned SMT1CSEL1              :1;
        unsigned SMT1CSEL2              :1;
    };
} SMT1CLKbits_t;
extern volatile SMT1CLKbits_t SMT1CLKbits __at(0x3F21);
// bitfield macros
#define _SMT1CLK_CSEL_POSN                                  0x0
#define _SMT1CLK_CSEL_POSITION                              0x0
#define _SMT1CLK_CSEL_SIZE                                  0x3
#define _SMT1CLK_CSEL_LENGTH                                0x3
#define _SMT1CLK_CSEL_MASK                                  0x7
#define _SMT1CLK_CSEL0_POSN                                 0x0
#define _SMT1CLK_CSEL0_POSITION                             0x0
#define _SMT1CLK_CSEL0_SIZE                                 0x1
#define _SMT1CLK_CSEL0_LENGTH                               0x1
#define _SMT1CLK_CSEL0_MASK                                 0x1
#define _SMT1CLK_CSEL1_POSN                                 0x1
#define _SMT1CLK_CSEL1_POSITION                             0x1
#define _SMT1CLK_CSEL1_SIZE                                 0x1
#define _SMT1CLK_CSEL1_LENGTH                               0x1
#define _SMT1CLK_CSEL1_MASK                                 0x2
#define _SMT1CLK_CSEL2_POSN                                 0x2
#define _SMT1CLK_CSEL2_POSITION                             0x2
#define _SMT1CLK_CSEL2_SIZE                                 0x1
#define _SMT1CLK_CSEL2_LENGTH                               0x1
#define _SMT1CLK_CSEL2_MASK                                 0x4
#define _SMT1CLK_SMT1CSEL_POSN                              0x0
#define _SMT1CLK_SMT1CSEL_POSITION                          0x0
#define _SMT1CLK_SMT1CSEL_SIZE                              0x3
#define _SMT1CLK_SMT1CSEL_LENGTH                            0x3
#define _SMT1CLK_SMT1CSEL_MASK                              0x7
#define _SMT1CLK_SMT1CSEL0_POSN                             0x0
#define _SMT1CLK_SMT1CSEL0_POSITION                         0x0
#define _SMT1CLK_SMT1CSEL0_SIZE                             0x1
#define _SMT1CLK_SMT1CSEL0_LENGTH                           0x1
#define _SMT1CLK_SMT1CSEL0_MASK                             0x1
#define _SMT1CLK_SMT1CSEL1_POSN                             0x1
#define _SMT1CLK_SMT1CSEL1_POSITION                         0x1
#define _SMT1CLK_SMT1CSEL1_SIZE                             0x1
#define _SMT1CLK_SMT1CSEL1_LENGTH                           0x1
#define _SMT1CLK_SMT1CSEL1_MASK                             0x2
#define _SMT1CLK_SMT1CSEL2_POSN                             0x2
#define _SMT1CLK_SMT1CSEL2_POSITION                         0x2
#define _SMT1CLK_SMT1CSEL2_SIZE                             0x1
#define _SMT1CLK_SMT1CSEL2_LENGTH                           0x1
#define _SMT1CLK_SMT1CSEL2_MASK                             0x4

// Register: SMT1SIG
#define SMT1SIG SMT1SIG
extern volatile unsigned char           SMT1SIG             __at(0x3F22);
#ifndef _LIB_BUILD
asm("SMT1SIG equ 03F22h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSEL                   :5;
    };
    struct {
        unsigned SSEL0                  :1;
        unsigned SSEL1                  :1;
        unsigned SSEL2                  :1;
        unsigned SSEL3                  :1;
        unsigned SSEL4                  :1;
    };
    struct {
        unsigned SMT1SSEL               :5;
    };
    struct {
        unsigned SMT1SSEL0              :1;
        unsigned SMT1SSEL1              :1;
        unsigned SMT1SSEL2              :1;
        unsigned SMT1SSEL3              :1;
        unsigned SMT1SSEL4              :1;
    };
} SMT1SIGbits_t;
extern volatile SMT1SIGbits_t SMT1SIGbits __at(0x3F22);
// bitfield macros
#define _SMT1SIG_SSEL_POSN                                  0x0
#define _SMT1SIG_SSEL_POSITION                              0x0
#define _SMT1SIG_SSEL_SIZE                                  0x5
#define _SMT1SIG_SSEL_LENGTH                                0x5
#define _SMT1SIG_SSEL_MASK                                  0x1F
#define _SMT1SIG_SSEL0_POSN                                 0x0
#define _SMT1SIG_SSEL0_POSITION                             0x0
#define _SMT1SIG_SSEL0_SIZE                                 0x1
#define _SMT1SIG_SSEL0_LENGTH                               0x1
#define _SMT1SIG_SSEL0_MASK                                 0x1
#define _SMT1SIG_SSEL1_POSN                                 0x1
#define _SMT1SIG_SSEL1_POSITION                             0x1
#define _SMT1SIG_SSEL1_SIZE                                 0x1
#define _SMT1SIG_SSEL1_LENGTH                               0x1
#define _SMT1SIG_SSEL1_MASK                                 0x2
#define _SMT1SIG_SSEL2_POSN                                 0x2
#define _SMT1SIG_SSEL2_POSITION                             0x2
#define _SMT1SIG_SSEL2_SIZE                                 0x1
#define _SMT1SIG_SSEL2_LENGTH                               0x1
#define _SMT1SIG_SSEL2_MASK                                 0x4
#define _SMT1SIG_SSEL3_POSN                                 0x3
#define _SMT1SIG_SSEL3_POSITION                             0x3
#define _SMT1SIG_SSEL3_SIZE                                 0x1
#define _SMT1SIG_SSEL3_LENGTH                               0x1
#define _SMT1SIG_SSEL3_MASK                                 0x8
#define _SMT1SIG_SSEL4_POSN                                 0x4
#define _SMT1SIG_SSEL4_POSITION                             0x4
#define _SMT1SIG_SSEL4_SIZE                                 0x1
#define _SMT1SIG_SSEL4_LENGTH                               0x1
#define _SMT1SIG_SSEL4_MASK                                 0x10
#define _SMT1SIG_SMT1SSEL_POSN                              0x0
#define _SMT1SIG_SMT1SSEL_POSITION                          0x0
#define _SMT1SIG_SMT1SSEL_SIZE                              0x5
#define _SMT1SIG_SMT1SSEL_LENGTH                            0x5
#define _SMT1SIG_SMT1SSEL_MASK                              0x1F
#define _SMT1SIG_SMT1SSEL0_POSN                             0x0
#define _SMT1SIG_SMT1SSEL0_POSITION                         0x0
#define _SMT1SIG_SMT1SSEL0_SIZE                             0x1
#define _SMT1SIG_SMT1SSEL0_LENGTH                           0x1
#define _SMT1SIG_SMT1SSEL0_MASK                             0x1
#define _SMT1SIG_SMT1SSEL1_POSN                             0x1
#define _SMT1SIG_SMT1SSEL1_POSITION                         0x1
#define _SMT1SIG_SMT1SSEL1_SIZE                             0x1
#define _SMT1SIG_SMT1SSEL1_LENGTH                           0x1
#define _SMT1SIG_SMT1SSEL1_MASK                             0x2
#define _SMT1SIG_SMT1SSEL2_POSN                             0x2
#define _SMT1SIG_SMT1SSEL2_POSITION                         0x2
#define _SMT1SIG_SMT1SSEL2_SIZE                             0x1
#define _SMT1SIG_SMT1SSEL2_LENGTH                           0x1
#define _SMT1SIG_SMT1SSEL2_MASK                             0x4
#define _SMT1SIG_SMT1SSEL3_POSN                             0x3
#define _SMT1SIG_SMT1SSEL3_POSITION                         0x3
#define _SMT1SIG_SMT1SSEL3_SIZE                             0x1
#define _SMT1SIG_SMT1SSEL3_LENGTH                           0x1
#define _SMT1SIG_SMT1SSEL3_MASK                             0x8
#define _SMT1SIG_SMT1SSEL4_POSN                             0x4
#define _SMT1SIG_SMT1SSEL4_POSITION                         0x4
#define _SMT1SIG_SMT1SSEL4_SIZE                             0x1
#define _SMT1SIG_SMT1SSEL4_LENGTH                           0x1
#define _SMT1SIG_SMT1SSEL4_MASK                             0x10

// Register: SMT1WIN
#define SMT1WIN SMT1WIN
extern volatile unsigned char           SMT1WIN             __at(0x3F23);
#ifndef _LIB_BUILD
asm("SMT1WIN equ 03F23h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WSEL                   :5;
    };
    struct {
        unsigned WSEL0                  :1;
        unsigned WSEL1                  :1;
        unsigned WSEL2                  :1;
        unsigned WSEL3                  :1;
        unsigned WSEL4                  :1;
    };
    struct {
        unsigned SMT1WSEL               :5;
    };
    struct {
        unsigned SMT1WSEL0              :1;
        unsigned SMT1WSEL1              :1;
        unsigned SMT1WSEL2              :1;
        unsigned SMT1WSEL3              :1;
        unsigned SMT1WSEL4              :1;
    };
} SMT1WINbits_t;
extern volatile SMT1WINbits_t SMT1WINbits __at(0x3F23);
// bitfield macros
#define _SMT1WIN_WSEL_POSN                                  0x0
#define _SMT1WIN_WSEL_POSITION                              0x0
#define _SMT1WIN_WSEL_SIZE                                  0x5
#define _SMT1WIN_WSEL_LENGTH                                0x5
#define _SMT1WIN_WSEL_MASK                                  0x1F
#define _SMT1WIN_WSEL0_POSN                                 0x0
#define _SMT1WIN_WSEL0_POSITION                             0x0
#define _SMT1WIN_WSEL0_SIZE                                 0x1
#define _SMT1WIN_WSEL0_LENGTH                               0x1
#define _SMT1WIN_WSEL0_MASK                                 0x1
#define _SMT1WIN_WSEL1_POSN                                 0x1
#define _SMT1WIN_WSEL1_POSITION                             0x1
#define _SMT1WIN_WSEL1_SIZE                                 0x1
#define _SMT1WIN_WSEL1_LENGTH                               0x1
#define _SMT1WIN_WSEL1_MASK                                 0x2
#define _SMT1WIN_WSEL2_POSN                                 0x2
#define _SMT1WIN_WSEL2_POSITION                             0x2
#define _SMT1WIN_WSEL2_SIZE                                 0x1
#define _SMT1WIN_WSEL2_LENGTH                               0x1
#define _SMT1WIN_WSEL2_MASK                                 0x4
#define _SMT1WIN_WSEL3_POSN                                 0x3
#define _SMT1WIN_WSEL3_POSITION                             0x3
#define _SMT1WIN_WSEL3_SIZE                                 0x1
#define _SMT1WIN_WSEL3_LENGTH                               0x1
#define _SMT1WIN_WSEL3_MASK                                 0x8
#define _SMT1WIN_WSEL4_POSN                                 0x4
#define _SMT1WIN_WSEL4_POSITION                             0x4
#define _SMT1WIN_WSEL4_SIZE                                 0x1
#define _SMT1WIN_WSEL4_LENGTH                               0x1
#define _SMT1WIN_WSEL4_MASK                                 0x10
#define _SMT1WIN_SMT1WSEL_POSN                              0x0
#define _SMT1WIN_SMT1WSEL_POSITION                          0x0
#define _SMT1WIN_SMT1WSEL_SIZE                              0x5
#define _SMT1WIN_SMT1WSEL_LENGTH                            0x5
#define _SMT1WIN_SMT1WSEL_MASK                              0x1F
#define _SMT1WIN_SMT1WSEL0_POSN                             0x0
#define _SMT1WIN_SMT1WSEL0_POSITION                         0x0
#define _SMT1WIN_SMT1WSEL0_SIZE                             0x1
#define _SMT1WIN_SMT1WSEL0_LENGTH                           0x1
#define _SMT1WIN_SMT1WSEL0_MASK                             0x1
#define _SMT1WIN_SMT1WSEL1_POSN                             0x1
#define _SMT1WIN_SMT1WSEL1_POSITION                         0x1
#define _SMT1WIN_SMT1WSEL1_SIZE                             0x1
#define _SMT1WIN_SMT1WSEL1_LENGTH                           0x1
#define _SMT1WIN_SMT1WSEL1_MASK                             0x2
#define _SMT1WIN_SMT1WSEL2_POSN                             0x2
#define _SMT1WIN_SMT1WSEL2_POSITION                         0x2
#define _SMT1WIN_SMT1WSEL2_SIZE                             0x1
#define _SMT1WIN_SMT1WSEL2_LENGTH                           0x1
#define _SMT1WIN_SMT1WSEL2_MASK                             0x4
#define _SMT1WIN_SMT1WSEL3_POSN                             0x3
#define _SMT1WIN_SMT1WSEL3_POSITION                         0x3
#define _SMT1WIN_SMT1WSEL3_SIZE                             0x1
#define _SMT1WIN_SMT1WSEL3_LENGTH                           0x1
#define _SMT1WIN_SMT1WSEL3_MASK                             0x8
#define _SMT1WIN_SMT1WSEL4_POSN                             0x4
#define _SMT1WIN_SMT1WSEL4_POSITION                         0x4
#define _SMT1WIN_SMT1WSEL4_SIZE                             0x1
#define _SMT1WIN_SMT1WSEL4_LENGTH                           0x1
#define _SMT1WIN_SMT1WSEL4_MASK                             0x10

// Register: NCO1ACC
#define NCO1ACC NCO1ACC
#ifndef __CCI__
extern volatile __uint24                NCO1ACC             __at(0x3F38);
#endif
#ifndef _LIB_BUILD
asm("NCO1ACC equ 03F38h");
#endif

// Register: NCO1ACCL
#define NCO1ACCL NCO1ACCL
extern volatile unsigned char           NCO1ACCL            __at(0x3F38);
#ifndef _LIB_BUILD
asm("NCO1ACCL equ 03F38h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ACC                    :8;
    };
    struct {
        unsigned NCO1ACC0               :1;
        unsigned NCO1ACC1               :1;
        unsigned NCO1ACC2               :1;
        unsigned NCO1ACC3               :1;
        unsigned NCO1ACC4               :1;
        unsigned NCO1ACC5               :1;
        unsigned NCO1ACC6               :1;
        unsigned NCO1ACC7               :1;
    };
    struct {
        unsigned ACC0                   :1;
        unsigned ACC1                   :1;
        unsigned ACC2                   :1;
        unsigned ACC3                   :1;
        unsigned ACC4                   :1;
        unsigned ACC5                   :1;
        unsigned ACC6                   :1;
        unsigned ACC7                   :1;
    };
    struct {
        unsigned NCO1ACC                :8;
    };
} NCO1ACCLbits_t;
extern volatile NCO1ACCLbits_t NCO1ACCLbits __at(0x3F38);
// bitfield macros
#define _NCO1ACCL_ACC_POSN                                  0x0
#define _NCO1ACCL_ACC_POSITION                              0x0
#define _NCO1ACCL_ACC_SIZE                                  0x8
#define _NCO1ACCL_ACC_LENGTH                                0x8
#define _NCO1ACCL_ACC_MASK                                  0xFF
#define _NCO1ACCL_NCO1ACC0_POSN                             0x0
#define _NCO1ACCL_NCO1ACC0_POSITION                         0x0
#define _NCO1ACCL_NCO1ACC0_SIZE                             0x1
#define _NCO1ACCL_NCO1ACC0_LENGTH                           0x1
#define _NCO1ACCL_NCO1ACC0_MASK                             0x1
#define _NCO1ACCL_NCO1ACC1_POSN                             0x1
#define _NCO1ACCL_NCO1ACC1_POSITION                         0x1
#define _NCO1ACCL_NCO1ACC1_SIZE                             0x1
#define _NCO1ACCL_NCO1ACC1_LENGTH                           0x1
#define _NCO1ACCL_NCO1ACC1_MASK                             0x2
#define _NCO1ACCL_NCO1ACC2_POSN                             0x2
#define _NCO1ACCL_NCO1ACC2_POSITION                         0x2
#define _NCO1ACCL_NCO1ACC2_SIZE                             0x1
#define _NCO1ACCL_NCO1ACC2_LENGTH                           0x1
#define _NCO1ACCL_NCO1ACC2_MASK                             0x4
#define _NCO1ACCL_NCO1ACC3_POSN                             0x3
#define _NCO1ACCL_NCO1ACC3_POSITION                         0x3
#define _NCO1ACCL_NCO1ACC3_SIZE                             0x1
#define _NCO1ACCL_NCO1ACC3_LENGTH                           0x1
#define _NCO1ACCL_NCO1ACC3_MASK                             0x8
#define _NCO1ACCL_NCO1ACC4_POSN                             0x4
#define _NCO1ACCL_NCO1ACC4_POSITION                         0x4
#define _NCO1ACCL_NCO1ACC4_SIZE                             0x1
#define _NCO1ACCL_NCO1ACC4_LENGTH                           0x1
#define _NCO1ACCL_NCO1ACC4_MASK                             0x10
#define _NCO1ACCL_NCO1ACC5_POSN                             0x5
#define _NCO1ACCL_NCO1ACC5_POSITION                         0x5
#define _NCO1ACCL_NCO1ACC5_SIZE                             0x1
#define _NCO1ACCL_NCO1ACC5_LENGTH                           0x1
#define _NCO1ACCL_NCO1ACC5_MASK                             0x20
#define _NCO1ACCL_NCO1ACC6_POSN                             0x6
#define _NCO1ACCL_NCO1ACC6_POSITION                         0x6
#define _NCO1ACCL_NCO1ACC6_SIZE                             0x1
#define _NCO1ACCL_NCO1ACC6_LENGTH                           0x1
#define _NCO1ACCL_NCO1ACC6_MASK                             0x40
#define _NCO1ACCL_NCO1ACC7_POSN                             0x7
#define _NCO1ACCL_NCO1ACC7_POSITION                         0x7
#define _NCO1ACCL_NCO1ACC7_SIZE                             0x1
#define _NCO1ACCL_NCO1ACC7_LENGTH                           0x1
#define _NCO1ACCL_NCO1ACC7_MASK                             0x80
#define _NCO1ACCL_ACC0_POSN                                 0x0
#define _NCO1ACCL_ACC0_POSITION                             0x0
#define _NCO1ACCL_ACC0_SIZE                                 0x1
#define _NCO1ACCL_ACC0_LENGTH                               0x1
#define _NCO1ACCL_ACC0_MASK                                 0x1
#define _NCO1ACCL_ACC1_POSN                                 0x1
#define _NCO1ACCL_ACC1_POSITION                             0x1
#define _NCO1ACCL_ACC1_SIZE                                 0x1
#define _NCO1ACCL_ACC1_LENGTH                               0x1
#define _NCO1ACCL_ACC1_MASK                                 0x2
#define _NCO1ACCL_ACC2_POSN                                 0x2
#define _NCO1ACCL_ACC2_POSITION                             0x2
#define _NCO1ACCL_ACC2_SIZE                                 0x1
#define _NCO1ACCL_ACC2_LENGTH                               0x1
#define _NCO1ACCL_ACC2_MASK                                 0x4
#define _NCO1ACCL_ACC3_POSN                                 0x3
#define _NCO1ACCL_ACC3_POSITION                             0x3
#define _NCO1ACCL_ACC3_SIZE                                 0x1
#define _NCO1ACCL_ACC3_LENGTH                               0x1
#define _NCO1ACCL_ACC3_MASK                                 0x8
#define _NCO1ACCL_ACC4_POSN                                 0x4
#define _NCO1ACCL_ACC4_POSITION                             0x4
#define _NCO1ACCL_ACC4_SIZE                                 0x1
#define _NCO1ACCL_ACC4_LENGTH                               0x1
#define _NCO1ACCL_ACC4_MASK                                 0x10
#define _NCO1ACCL_ACC5_POSN                                 0x5
#define _NCO1ACCL_ACC5_POSITION                             0x5
#define _NCO1ACCL_ACC5_SIZE                                 0x1
#define _NCO1ACCL_ACC5_LENGTH                               0x1
#define _NCO1ACCL_ACC5_MASK                                 0x20
#define _NCO1ACCL_ACC6_POSN                                 0x6
#define _NCO1ACCL_ACC6_POSITION                             0x6
#define _NCO1ACCL_ACC6_SIZE                                 0x1
#define _NCO1ACCL_ACC6_LENGTH                               0x1
#define _NCO1ACCL_ACC6_MASK                                 0x40
#define _NCO1ACCL_ACC7_POSN                                 0x7
#define _NCO1ACCL_ACC7_POSITION                             0x7
#define _NCO1ACCL_ACC7_SIZE                                 0x1
#define _NCO1ACCL_ACC7_LENGTH                               0x1
#define _NCO1ACCL_ACC7_MASK                                 0x80
#define _NCO1ACCL_NCO1ACC_POSN                              0x0
#define _NCO1ACCL_NCO1ACC_POSITION                          0x0
#define _NCO1ACCL_NCO1ACC_SIZE                              0x8
#define _NCO1ACCL_NCO1ACC_LENGTH                            0x8
#define _NCO1ACCL_NCO1ACC_MASK                              0xFF

// Register: NCO1ACCH
#define NCO1ACCH NCO1ACCH
extern volatile unsigned char           NCO1ACCH            __at(0x3F39);
#ifndef _LIB_BUILD
asm("NCO1ACCH equ 03F39h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ACC                    :8;
    };
    struct {
        unsigned NCO1ACC8               :1;
        unsigned NCO1ACC9               :1;
        unsigned NCO1ACC10              :1;
        unsigned NCO1ACC11              :1;
        unsigned NCO1ACC12              :1;
        unsigned NCO1ACC13              :1;
        unsigned NCO1ACC14              :1;
        unsigned NCO1ACC15              :1;
    };
    struct {
        unsigned ACC8                   :1;
        unsigned ACC9                   :1;
        unsigned ACC10                  :1;
        unsigned ACC11                  :1;
        unsigned ACC12                  :1;
        unsigned ACC13                  :1;
        unsigned ACC14                  :1;
        unsigned ACC15                  :1;
    };
    struct {
        unsigned NCO1ACC                :8;
    };
} NCO1ACCHbits_t;
extern volatile NCO1ACCHbits_t NCO1ACCHbits __at(0x3F39);
// bitfield macros
#define _NCO1ACCH_ACC_POSN                                  0x0
#define _NCO1ACCH_ACC_POSITION                              0x0
#define _NCO1ACCH_ACC_SIZE                                  0x8
#define _NCO1ACCH_ACC_LENGTH                                0x8
#define _NCO1ACCH_ACC_MASK                                  0xFF
#define _NCO1ACCH_NCO1ACC8_POSN                             0x0
#define _NCO1ACCH_NCO1ACC8_POSITION                         0x0
#define _NCO1ACCH_NCO1ACC8_SIZE                             0x1
#define _NCO1ACCH_NCO1ACC8_LENGTH                           0x1
#define _NCO1ACCH_NCO1ACC8_MASK                             0x1
#define _NCO1ACCH_NCO1ACC9_POSN                             0x1
#define _NCO1ACCH_NCO1ACC9_POSITION                         0x1
#define _NCO1ACCH_NCO1ACC9_SIZE                             0x1
#define _NCO1ACCH_NCO1ACC9_LENGTH                           0x1
#define _NCO1ACCH_NCO1ACC9_MASK                             0x2
#define _NCO1ACCH_NCO1ACC10_POSN                            0x2
#define _NCO1ACCH_NCO1ACC10_POSITION                        0x2
#define _NCO1ACCH_NCO1ACC10_SIZE                            0x1
#define _NCO1ACCH_NCO1ACC10_LENGTH                          0x1
#define _NCO1ACCH_NCO1ACC10_MASK                            0x4
#define _NCO1ACCH_NCO1ACC11_POSN                            0x3
#define _NCO1ACCH_NCO1ACC11_POSITION                        0x3
#define _NCO1ACCH_NCO1ACC11_SIZE                            0x1
#define _NCO1ACCH_NCO1ACC11_LENGTH                          0x1
#define _NCO1ACCH_NCO1ACC11_MASK                            0x8
#define _NCO1ACCH_NCO1ACC12_POSN                            0x4
#define _NCO1ACCH_NCO1ACC12_POSITION                        0x4
#define _NCO1ACCH_NCO1ACC12_SIZE                            0x1
#define _NCO1ACCH_NCO1ACC12_LENGTH                          0x1
#define _NCO1ACCH_NCO1ACC12_MASK                            0x10
#define _NCO1ACCH_NCO1ACC13_POSN                            0x5
#define _NCO1ACCH_NCO1ACC13_POSITION                        0x5
#define _NCO1ACCH_NCO1ACC13_SIZE                            0x1
#define _NCO1ACCH_NCO1ACC13_LENGTH                          0x1
#define _NCO1ACCH_NCO1ACC13_MASK                            0x20
#define _NCO1ACCH_NCO1ACC14_POSN                            0x6
#define _NCO1ACCH_NCO1ACC14_POSITION                        0x6
#define _NCO1ACCH_NCO1ACC14_SIZE                            0x1
#define _NCO1ACCH_NCO1ACC14_LENGTH                          0x1
#define _NCO1ACCH_NCO1ACC14_MASK                            0x40
#define _NCO1ACCH_NCO1ACC15_POSN                            0x7
#define _NCO1ACCH_NCO1ACC15_POSITION                        0x7
#define _NCO1ACCH_NCO1ACC15_SIZE                            0x1
#define _NCO1ACCH_NCO1ACC15_LENGTH                          0x1
#define _NCO1ACCH_NCO1ACC15_MASK                            0x80
#define _NCO1ACCH_ACC8_POSN                                 0x0
#define _NCO1ACCH_ACC8_POSITION                             0x0
#define _NCO1ACCH_ACC8_SIZE                                 0x1
#define _NCO1ACCH_ACC8_LENGTH                               0x1
#define _NCO1ACCH_ACC8_MASK                                 0x1
#define _NCO1ACCH_ACC9_POSN                                 0x1
#define _NCO1ACCH_ACC9_POSITION                             0x1
#define _NCO1ACCH_ACC9_SIZE                                 0x1
#define _NCO1ACCH_ACC9_LENGTH                               0x1
#define _NCO1ACCH_ACC9_MASK                                 0x2
#define _NCO1ACCH_ACC10_POSN                                0x2
#define _NCO1ACCH_ACC10_POSITION                            0x2
#define _NCO1ACCH_ACC10_SIZE                                0x1
#define _NCO1ACCH_ACC10_LENGTH                              0x1
#define _NCO1ACCH_ACC10_MASK                                0x4
#define _NCO1ACCH_ACC11_POSN                                0x3
#define _NCO1ACCH_ACC11_POSITION                            0x3
#define _NCO1ACCH_ACC11_SIZE                                0x1
#define _NCO1ACCH_ACC11_LENGTH                              0x1
#define _NCO1ACCH_ACC11_MASK                                0x8
#define _NCO1ACCH_ACC12_POSN                                0x4
#define _NCO1ACCH_ACC12_POSITION                            0x4
#define _NCO1ACCH_ACC12_SIZE                                0x1
#define _NCO1ACCH_ACC12_LENGTH                              0x1
#define _NCO1ACCH_ACC12_MASK                                0x10
#define _NCO1ACCH_ACC13_POSN                                0x5
#define _NCO1ACCH_ACC13_POSITION                            0x5
#define _NCO1ACCH_ACC13_SIZE                                0x1
#define _NCO1ACCH_ACC13_LENGTH                              0x1
#define _NCO1ACCH_ACC13_MASK                                0x20
#define _NCO1ACCH_ACC14_POSN                                0x6
#define _NCO1ACCH_ACC14_POSITION                            0x6
#define _NCO1ACCH_ACC14_SIZE                                0x1
#define _NCO1ACCH_ACC14_LENGTH                              0x1
#define _NCO1ACCH_ACC14_MASK                                0x40
#define _NCO1ACCH_ACC15_POSN                                0x7
#define _NCO1ACCH_ACC15_POSITION                            0x7
#define _NCO1ACCH_ACC15_SIZE                                0x1
#define _NCO1ACCH_ACC15_LENGTH                              0x1
#define _NCO1ACCH_ACC15_MASK                                0x80
#define _NCO1ACCH_NCO1ACC_POSN                              0x0
#define _NCO1ACCH_NCO1ACC_POSITION                          0x0
#define _NCO1ACCH_NCO1ACC_SIZE                              0x8
#define _NCO1ACCH_NCO1ACC_LENGTH                            0x8
#define _NCO1ACCH_NCO1ACC_MASK                              0xFF

// Register: NCO1ACCU
#define NCO1ACCU NCO1ACCU
extern volatile unsigned char           NCO1ACCU            __at(0x3F3A);
#ifndef _LIB_BUILD
asm("NCO1ACCU equ 03F3Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ACC                    :4;
    };
    struct {
        unsigned NCO1ACC16              :1;
        unsigned NCO1ACC17              :1;
        unsigned NCO1ACC18              :1;
        unsigned NCO1ACC19              :1;
    };
    struct {
        unsigned ACC16                  :1;
        unsigned ACC17                  :1;
        unsigned ACC18                  :1;
        unsigned ACC19                  :1;
    };
    struct {
        unsigned NCO1ACC                :4;
    };
} NCO1ACCUbits_t;
extern volatile NCO1ACCUbits_t NCO1ACCUbits __at(0x3F3A);
// bitfield macros
#define _NCO1ACCU_ACC_POSN                                  0x0
#define _NCO1ACCU_ACC_POSITION                              0x0
#define _NCO1ACCU_ACC_SIZE                                  0x4
#define _NCO1ACCU_ACC_LENGTH                                0x4
#define _NCO1ACCU_ACC_MASK                                  0xF
#define _NCO1ACCU_NCO1ACC16_POSN                            0x0
#define _NCO1ACCU_NCO1ACC16_POSITION                        0x0
#define _NCO1ACCU_NCO1ACC16_SIZE                            0x1
#define _NCO1ACCU_NCO1ACC16_LENGTH                          0x1
#define _NCO1ACCU_NCO1ACC16_MASK                            0x1
#define _NCO1ACCU_NCO1ACC17_POSN                            0x1
#define _NCO1ACCU_NCO1ACC17_POSITION                        0x1
#define _NCO1ACCU_NCO1ACC17_SIZE                            0x1
#define _NCO1ACCU_NCO1ACC17_LENGTH                          0x1
#define _NCO1ACCU_NCO1ACC17_MASK                            0x2
#define _NCO1ACCU_NCO1ACC18_POSN                            0x2
#define _NCO1ACCU_NCO1ACC18_POSITION                        0x2
#define _NCO1ACCU_NCO1ACC18_SIZE                            0x1
#define _NCO1ACCU_NCO1ACC18_LENGTH                          0x1
#define _NCO1ACCU_NCO1ACC18_MASK                            0x4
#define _NCO1ACCU_NCO1ACC19_POSN                            0x3
#define _NCO1ACCU_NCO1ACC19_POSITION                        0x3
#define _NCO1ACCU_NCO1ACC19_SIZE                            0x1
#define _NCO1ACCU_NCO1ACC19_LENGTH                          0x1
#define _NCO1ACCU_NCO1ACC19_MASK                            0x8
#define _NCO1ACCU_ACC16_POSN                                0x0
#define _NCO1ACCU_ACC16_POSITION                            0x0
#define _NCO1ACCU_ACC16_SIZE                                0x1
#define _NCO1ACCU_ACC16_LENGTH                              0x1
#define _NCO1ACCU_ACC16_MASK                                0x1
#define _NCO1ACCU_ACC17_POSN                                0x1
#define _NCO1ACCU_ACC17_POSITION                            0x1
#define _NCO1ACCU_ACC17_SIZE                                0x1
#define _NCO1ACCU_ACC17_LENGTH                              0x1
#define _NCO1ACCU_ACC17_MASK                                0x2
#define _NCO1ACCU_ACC18_POSN                                0x2
#define _NCO1ACCU_ACC18_POSITION                            0x2
#define _NCO1ACCU_ACC18_SIZE                                0x1
#define _NCO1ACCU_ACC18_LENGTH                              0x1
#define _NCO1ACCU_ACC18_MASK                                0x4
#define _NCO1ACCU_ACC19_POSN                                0x3
#define _NCO1ACCU_ACC19_POSITION                            0x3
#define _NCO1ACCU_ACC19_SIZE                                0x1
#define _NCO1ACCU_ACC19_LENGTH                              0x1
#define _NCO1ACCU_ACC19_MASK                                0x8
#define _NCO1ACCU_NCO1ACC_POSN                              0x0
#define _NCO1ACCU_NCO1ACC_POSITION                          0x0
#define _NCO1ACCU_NCO1ACC_SIZE                              0x4
#define _NCO1ACCU_NCO1ACC_LENGTH                            0x4
#define _NCO1ACCU_NCO1ACC_MASK                              0xF

// Register: NCO1INC
#define NCO1INC NCO1INC
#ifndef __CCI__
extern volatile __uint24                NCO1INC             __at(0x3F3B);
#endif
#ifndef _LIB_BUILD
asm("NCO1INC equ 03F3Bh");
#endif

// Register: NCO1INCL
#define NCO1INCL NCO1INCL
extern volatile unsigned char           NCO1INCL            __at(0x3F3B);
#ifndef _LIB_BUILD
asm("NCO1INCL equ 03F3Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INC                    :8;
    };
    struct {
        unsigned NCO1INC0               :1;
        unsigned NCO1INC1               :1;
        unsigned NCO1INC2               :1;
        unsigned NCO1INC3               :1;
        unsigned NCO1INC4               :1;
        unsigned NCO1INC5               :1;
        unsigned NCO1INC6               :1;
        unsigned NCO1INC7               :1;
    };
    struct {
        unsigned INC0                   :1;
        unsigned INC1                   :1;
        unsigned INC2                   :1;
        unsigned INC3                   :1;
        unsigned INC4                   :1;
        unsigned INC5                   :1;
        unsigned INC6                   :1;
        unsigned INC7                   :1;
    };
    struct {
        unsigned NCO1INC                :8;
    };
} NCO1INCLbits_t;
extern volatile NCO1INCLbits_t NCO1INCLbits __at(0x3F3B);
// bitfield macros
#define _NCO1INCL_INC_POSN                                  0x0
#define _NCO1INCL_INC_POSITION                              0x0
#define _NCO1INCL_INC_SIZE                                  0x8
#define _NCO1INCL_INC_LENGTH                                0x8
#define _NCO1INCL_INC_MASK                                  0xFF
#define _NCO1INCL_NCO1INC0_POSN                             0x0
#define _NCO1INCL_NCO1INC0_POSITION                         0x0
#define _NCO1INCL_NCO1INC0_SIZE                             0x1
#define _NCO1INCL_NCO1INC0_LENGTH                           0x1
#define _NCO1INCL_NCO1INC0_MASK                             0x1
#define _NCO1INCL_NCO1INC1_POSN                             0x1
#define _NCO1INCL_NCO1INC1_POSITION                         0x1
#define _NCO1INCL_NCO1INC1_SIZE                             0x1
#define _NCO1INCL_NCO1INC1_LENGTH                           0x1
#define _NCO1INCL_NCO1INC1_MASK                             0x2
#define _NCO1INCL_NCO1INC2_POSN                             0x2
#define _NCO1INCL_NCO1INC2_POSITION                         0x2
#define _NCO1INCL_NCO1INC2_SIZE                             0x1
#define _NCO1INCL_NCO1INC2_LENGTH                           0x1
#define _NCO1INCL_NCO1INC2_MASK                             0x4
#define _NCO1INCL_NCO1INC3_POSN                             0x3
#define _NCO1INCL_NCO1INC3_POSITION                         0x3
#define _NCO1INCL_NCO1INC3_SIZE                             0x1
#define _NCO1INCL_NCO1INC3_LENGTH                           0x1
#define _NCO1INCL_NCO1INC3_MASK                             0x8
#define _NCO1INCL_NCO1INC4_POSN                             0x4
#define _NCO1INCL_NCO1INC4_POSITION                         0x4
#define _NCO1INCL_NCO1INC4_SIZE                             0x1
#define _NCO1INCL_NCO1INC4_LENGTH                           0x1
#define _NCO1INCL_NCO1INC4_MASK                             0x10
#define _NCO1INCL_NCO1INC5_POSN                             0x5
#define _NCO1INCL_NCO1INC5_POSITION                         0x5
#define _NCO1INCL_NCO1INC5_SIZE                             0x1
#define _NCO1INCL_NCO1INC5_LENGTH                           0x1
#define _NCO1INCL_NCO1INC5_MASK                             0x20
#define _NCO1INCL_NCO1INC6_POSN                             0x6
#define _NCO1INCL_NCO1INC6_POSITION                         0x6
#define _NCO1INCL_NCO1INC6_SIZE                             0x1
#define _NCO1INCL_NCO1INC6_LENGTH                           0x1
#define _NCO1INCL_NCO1INC6_MASK                             0x40
#define _NCO1INCL_NCO1INC7_POSN                             0x7
#define _NCO1INCL_NCO1INC7_POSITION                         0x7
#define _NCO1INCL_NCO1INC7_SIZE                             0x1
#define _NCO1INCL_NCO1INC7_LENGTH                           0x1
#define _NCO1INCL_NCO1INC7_MASK                             0x80
#define _NCO1INCL_INC0_POSN                                 0x0
#define _NCO1INCL_INC0_POSITION                             0x0
#define _NCO1INCL_INC0_SIZE                                 0x1
#define _NCO1INCL_INC0_LENGTH                               0x1
#define _NCO1INCL_INC0_MASK                                 0x1
#define _NCO1INCL_INC1_POSN                                 0x1
#define _NCO1INCL_INC1_POSITION                             0x1
#define _NCO1INCL_INC1_SIZE                                 0x1
#define _NCO1INCL_INC1_LENGTH                               0x1
#define _NCO1INCL_INC1_MASK                                 0x2
#define _NCO1INCL_INC2_POSN                                 0x2
#define _NCO1INCL_INC2_POSITION                             0x2
#define _NCO1INCL_INC2_SIZE                                 0x1
#define _NCO1INCL_INC2_LENGTH                               0x1
#define _NCO1INCL_INC2_MASK                                 0x4
#define _NCO1INCL_INC3_POSN                                 0x3
#define _NCO1INCL_INC3_POSITION                             0x3
#define _NCO1INCL_INC3_SIZE                                 0x1
#define _NCO1INCL_INC3_LENGTH                               0x1
#define _NCO1INCL_INC3_MASK                                 0x8
#define _NCO1INCL_INC4_POSN                                 0x4
#define _NCO1INCL_INC4_POSITION                             0x4
#define _NCO1INCL_INC4_SIZE                                 0x1
#define _NCO1INCL_INC4_LENGTH                               0x1
#define _NCO1INCL_INC4_MASK                                 0x10
#define _NCO1INCL_INC5_POSN                                 0x5
#define _NCO1INCL_INC5_POSITION                             0x5
#define _NCO1INCL_INC5_SIZE                                 0x1
#define _NCO1INCL_INC5_LENGTH                               0x1
#define _NCO1INCL_INC5_MASK                                 0x20
#define _NCO1INCL_INC6_POSN                                 0x6
#define _NCO1INCL_INC6_POSITION                             0x6
#define _NCO1INCL_INC6_SIZE                                 0x1
#define _NCO1INCL_INC6_LENGTH                               0x1
#define _NCO1INCL_INC6_MASK                                 0x40
#define _NCO1INCL_INC7_POSN                                 0x7
#define _NCO1INCL_INC7_POSITION                             0x7
#define _NCO1INCL_INC7_SIZE                                 0x1
#define _NCO1INCL_INC7_LENGTH                               0x1
#define _NCO1INCL_INC7_MASK                                 0x80
#define _NCO1INCL_NCO1INC_POSN                              0x0
#define _NCO1INCL_NCO1INC_POSITION                          0x0
#define _NCO1INCL_NCO1INC_SIZE                              0x8
#define _NCO1INCL_NCO1INC_LENGTH                            0x8
#define _NCO1INCL_NCO1INC_MASK                              0xFF

// Register: NCO1INCH
#define NCO1INCH NCO1INCH
extern volatile unsigned char           NCO1INCH            __at(0x3F3C);
#ifndef _LIB_BUILD
asm("NCO1INCH equ 03F3Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INC                    :8;
    };
    struct {
        unsigned NCO1INC8               :1;
        unsigned NCO1INC9               :1;
        unsigned NCO1INC10              :1;
        unsigned NCO1INC11              :1;
        unsigned NCO1INC12              :1;
        unsigned NCO1INC13              :1;
        unsigned NCO1INC14              :1;
        unsigned NCO1INC15              :1;
    };
    struct {
        unsigned INC8                   :1;
        unsigned INC9                   :1;
        unsigned INC10                  :1;
        unsigned INC11                  :1;
        unsigned INC12                  :1;
        unsigned INC13                  :1;
        unsigned INC14                  :1;
        unsigned INC15                  :1;
    };
    struct {
        unsigned NCO1INC                :8;
    };
} NCO1INCHbits_t;
extern volatile NCO1INCHbits_t NCO1INCHbits __at(0x3F3C);
// bitfield macros
#define _NCO1INCH_INC_POSN                                  0x0
#define _NCO1INCH_INC_POSITION                              0x0
#define _NCO1INCH_INC_SIZE                                  0x8
#define _NCO1INCH_INC_LENGTH                                0x8
#define _NCO1INCH_INC_MASK                                  0xFF
#define _NCO1INCH_NCO1INC8_POSN                             0x0
#define _NCO1INCH_NCO1INC8_POSITION                         0x0
#define _NCO1INCH_NCO1INC8_SIZE                             0x1
#define _NCO1INCH_NCO1INC8_LENGTH                           0x1
#define _NCO1INCH_NCO1INC8_MASK                             0x1
#define _NCO1INCH_NCO1INC9_POSN                             0x1
#define _NCO1INCH_NCO1INC9_POSITION                         0x1
#define _NCO1INCH_NCO1INC9_SIZE                             0x1
#define _NCO1INCH_NCO1INC9_LENGTH                           0x1
#define _NCO1INCH_NCO1INC9_MASK                             0x2
#define _NCO1INCH_NCO1INC10_POSN                            0x2
#define _NCO1INCH_NCO1INC10_POSITION                        0x2
#define _NCO1INCH_NCO1INC10_SIZE                            0x1
#define _NCO1INCH_NCO1INC10_LENGTH                          0x1
#define _NCO1INCH_NCO1INC10_MASK                            0x4
#define _NCO1INCH_NCO1INC11_POSN                            0x3
#define _NCO1INCH_NCO1INC11_POSITION                        0x3
#define _NCO1INCH_NCO1INC11_SIZE                            0x1
#define _NCO1INCH_NCO1INC11_LENGTH                          0x1
#define _NCO1INCH_NCO1INC11_MASK                            0x8
#define _NCO1INCH_NCO1INC12_POSN                            0x4
#define _NCO1INCH_NCO1INC12_POSITION                        0x4
#define _NCO1INCH_NCO1INC12_SIZE                            0x1
#define _NCO1INCH_NCO1INC12_LENGTH                          0x1
#define _NCO1INCH_NCO1INC12_MASK                            0x10
#define _NCO1INCH_NCO1INC13_POSN                            0x5
#define _NCO1INCH_NCO1INC13_POSITION                        0x5
#define _NCO1INCH_NCO1INC13_SIZE                            0x1
#define _NCO1INCH_NCO1INC13_LENGTH                          0x1
#define _NCO1INCH_NCO1INC13_MASK                            0x20
#define _NCO1INCH_NCO1INC14_POSN                            0x6
#define _NCO1INCH_NCO1INC14_POSITION                        0x6
#define _NCO1INCH_NCO1INC14_SIZE                            0x1
#define _NCO1INCH_NCO1INC14_LENGTH                          0x1
#define _NCO1INCH_NCO1INC14_MASK                            0x40
#define _NCO1INCH_NCO1INC15_POSN                            0x7
#define _NCO1INCH_NCO1INC15_POSITION                        0x7
#define _NCO1INCH_NCO1INC15_SIZE                            0x1
#define _NCO1INCH_NCO1INC15_LENGTH                          0x1
#define _NCO1INCH_NCO1INC15_MASK                            0x80
#define _NCO1INCH_INC8_POSN                                 0x0
#define _NCO1INCH_INC8_POSITION                             0x0
#define _NCO1INCH_INC8_SIZE                                 0x1
#define _NCO1INCH_INC8_LENGTH                               0x1
#define _NCO1INCH_INC8_MASK                                 0x1
#define _NCO1INCH_INC9_POSN                                 0x1
#define _NCO1INCH_INC9_POSITION                             0x1
#define _NCO1INCH_INC9_SIZE                                 0x1
#define _NCO1INCH_INC9_LENGTH                               0x1
#define _NCO1INCH_INC9_MASK                                 0x2
#define _NCO1INCH_INC10_POSN                                0x2
#define _NCO1INCH_INC10_POSITION                            0x2
#define _NCO1INCH_INC10_SIZE                                0x1
#define _NCO1INCH_INC10_LENGTH                              0x1
#define _NCO1INCH_INC10_MASK                                0x4
#define _NCO1INCH_INC11_POSN                                0x3
#define _NCO1INCH_INC11_POSITION                            0x3
#define _NCO1INCH_INC11_SIZE                                0x1
#define _NCO1INCH_INC11_LENGTH                              0x1
#define _NCO1INCH_INC11_MASK                                0x8
#define _NCO1INCH_INC12_POSN                                0x4
#define _NCO1INCH_INC12_POSITION                            0x4
#define _NCO1INCH_INC12_SIZE                                0x1
#define _NCO1INCH_INC12_LENGTH                              0x1
#define _NCO1INCH_INC12_MASK                                0x10
#define _NCO1INCH_INC13_POSN                                0x5
#define _NCO1INCH_INC13_POSITION                            0x5
#define _NCO1INCH_INC13_SIZE                                0x1
#define _NCO1INCH_INC13_LENGTH                              0x1
#define _NCO1INCH_INC13_MASK                                0x20
#define _NCO1INCH_INC14_POSN                                0x6
#define _NCO1INCH_INC14_POSITION                            0x6
#define _NCO1INCH_INC14_SIZE                                0x1
#define _NCO1INCH_INC14_LENGTH                              0x1
#define _NCO1INCH_INC14_MASK                                0x40
#define _NCO1INCH_INC15_POSN                                0x7
#define _NCO1INCH_INC15_POSITION                            0x7
#define _NCO1INCH_INC15_SIZE                                0x1
#define _NCO1INCH_INC15_LENGTH                              0x1
#define _NCO1INCH_INC15_MASK                                0x80
#define _NCO1INCH_NCO1INC_POSN                              0x0
#define _NCO1INCH_NCO1INC_POSITION                          0x0
#define _NCO1INCH_NCO1INC_SIZE                              0x8
#define _NCO1INCH_NCO1INC_LENGTH                            0x8
#define _NCO1INCH_NCO1INC_MASK                              0xFF

// Register: NCO1INCU
#define NCO1INCU NCO1INCU
extern volatile unsigned char           NCO1INCU            __at(0x3F3D);
#ifndef _LIB_BUILD
asm("NCO1INCU equ 03F3Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INC                    :4;
    };
    struct {
        unsigned NCO1INC16              :1;
        unsigned NCO1INC17              :1;
        unsigned NCO1INC18              :1;
        unsigned NCO1INC19              :1;
    };
    struct {
        unsigned INC16                  :1;
        unsigned INC17                  :1;
        unsigned INC18                  :1;
        unsigned INC19                  :1;
    };
    struct {
        unsigned NCO1INC                :4;
    };
} NCO1INCUbits_t;
extern volatile NCO1INCUbits_t NCO1INCUbits __at(0x3F3D);
// bitfield macros
#define _NCO1INCU_INC_POSN                                  0x0
#define _NCO1INCU_INC_POSITION                              0x0
#define _NCO1INCU_INC_SIZE                                  0x4
#define _NCO1INCU_INC_LENGTH                                0x4
#define _NCO1INCU_INC_MASK                                  0xF
#define _NCO1INCU_NCO1INC16_POSN                            0x0
#define _NCO1INCU_NCO1INC16_POSITION                        0x0
#define _NCO1INCU_NCO1INC16_SIZE                            0x1
#define _NCO1INCU_NCO1INC16_LENGTH                          0x1
#define _NCO1INCU_NCO1INC16_MASK                            0x1
#define _NCO1INCU_NCO1INC17_POSN                            0x1
#define _NCO1INCU_NCO1INC17_POSITION                        0x1
#define _NCO1INCU_NCO1INC17_SIZE                            0x1
#define _NCO1INCU_NCO1INC17_LENGTH                          0x1
#define _NCO1INCU_NCO1INC17_MASK                            0x2
#define _NCO1INCU_NCO1INC18_POSN                            0x2
#define _NCO1INCU_NCO1INC18_POSITION                        0x2
#define _NCO1INCU_NCO1INC18_SIZE                            0x1
#define _NCO1INCU_NCO1INC18_LENGTH                          0x1
#define _NCO1INCU_NCO1INC18_MASK                            0x4
#define _NCO1INCU_NCO1INC19_POSN                            0x3
#define _NCO1INCU_NCO1INC19_POSITION                        0x3
#define _NCO1INCU_NCO1INC19_SIZE                            0x1
#define _NCO1INCU_NCO1INC19_LENGTH                          0x1
#define _NCO1INCU_NCO1INC19_MASK                            0x8
#define _NCO1INCU_INC16_POSN                                0x0
#define _NCO1INCU_INC16_POSITION                            0x0
#define _NCO1INCU_INC16_SIZE                                0x1
#define _NCO1INCU_INC16_LENGTH                              0x1
#define _NCO1INCU_INC16_MASK                                0x1
#define _NCO1INCU_INC17_POSN                                0x1
#define _NCO1INCU_INC17_POSITION                            0x1
#define _NCO1INCU_INC17_SIZE                                0x1
#define _NCO1INCU_INC17_LENGTH                              0x1
#define _NCO1INCU_INC17_MASK                                0x2
#define _NCO1INCU_INC18_POSN                                0x2
#define _NCO1INCU_INC18_POSITION                            0x2
#define _NCO1INCU_INC18_SIZE                                0x1
#define _NCO1INCU_INC18_LENGTH                              0x1
#define _NCO1INCU_INC18_MASK                                0x4
#define _NCO1INCU_INC19_POSN                                0x3
#define _NCO1INCU_INC19_POSITION                            0x3
#define _NCO1INCU_INC19_SIZE                                0x1
#define _NCO1INCU_INC19_LENGTH                              0x1
#define _NCO1INCU_INC19_MASK                                0x8
#define _NCO1INCU_NCO1INC_POSN                              0x0
#define _NCO1INCU_NCO1INC_POSITION                          0x0
#define _NCO1INCU_NCO1INC_SIZE                              0x4
#define _NCO1INCU_NCO1INC_LENGTH                            0x4
#define _NCO1INCU_NCO1INC_MASK                              0xF

// Register: NCO1CON
#define NCO1CON NCO1CON
extern volatile unsigned char           NCO1CON             __at(0x3F3E);
#ifndef _LIB_BUILD
asm("NCO1CON equ 03F3Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PFM                    :1;
        unsigned                        :3;
        unsigned POL                    :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned NCO1PFM                :1;
        unsigned                        :3;
        unsigned NCO1POL                :1;
        unsigned NCO1OUT                :1;
        unsigned                        :1;
        unsigned NCO1EN                 :1;
    };
} NCO1CONbits_t;
extern volatile NCO1CONbits_t NCO1CONbits __at(0x3F3E);
// bitfield macros
#define _NCO1CON_PFM_POSN                                   0x0
#define _NCO1CON_PFM_POSITION                               0x0
#define _NCO1CON_PFM_SIZE                                   0x1
#define _NCO1CON_PFM_LENGTH                                 0x1
#define _NCO1CON_PFM_MASK                                   0x1
#define _NCO1CON_POL_POSN                                   0x4
#define _NCO1CON_POL_POSITION                               0x4
#define _NCO1CON_POL_SIZE                                   0x1
#define _NCO1CON_POL_LENGTH                                 0x1
#define _NCO1CON_POL_MASK                                   0x10
#define _NCO1CON_OUT_POSN                                   0x5
#define _NCO1CON_OUT_POSITION                               0x5
#define _NCO1CON_OUT_SIZE                                   0x1
#define _NCO1CON_OUT_LENGTH                                 0x1
#define _NCO1CON_OUT_MASK                                   0x20
#define _NCO1CON_EN_POSN                                    0x7
#define _NCO1CON_EN_POSITION                                0x7
#define _NCO1CON_EN_SIZE                                    0x1
#define _NCO1CON_EN_LENGTH                                  0x1
#define _NCO1CON_EN_MASK                                    0x80
#define _NCO1CON_NCO1PFM_POSN                               0x0
#define _NCO1CON_NCO1PFM_POSITION                           0x0
#define _NCO1CON_NCO1PFM_SIZE                               0x1
#define _NCO1CON_NCO1PFM_LENGTH                             0x1
#define _NCO1CON_NCO1PFM_MASK                               0x1
#define _NCO1CON_NCO1POL_POSN                               0x4
#define _NCO1CON_NCO1POL_POSITION                           0x4
#define _NCO1CON_NCO1POL_SIZE                               0x1
#define _NCO1CON_NCO1POL_LENGTH                             0x1
#define _NCO1CON_NCO1POL_MASK                               0x10
#define _NCO1CON_NCO1OUT_POSN                               0x5
#define _NCO1CON_NCO1OUT_POSITION                           0x5
#define _NCO1CON_NCO1OUT_SIZE                               0x1
#define _NCO1CON_NCO1OUT_LENGTH                             0x1
#define _NCO1CON_NCO1OUT_MASK                               0x20
#define _NCO1CON_NCO1EN_POSN                                0x7
#define _NCO1CON_NCO1EN_POSITION                            0x7
#define _NCO1CON_NCO1EN_SIZE                                0x1
#define _NCO1CON_NCO1EN_LENGTH                              0x1
#define _NCO1CON_NCO1EN_MASK                                0x80

// Register: NCO1CLK
#define NCO1CLK NCO1CLK
extern volatile unsigned char           NCO1CLK             __at(0x3F3F);
#ifndef _LIB_BUILD
asm("NCO1CLK equ 03F3Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CKS                    :4;
        unsigned                        :1;
        unsigned PWS                    :3;
    };
    struct {
        unsigned CKS0                   :1;
        unsigned CKS1                   :1;
        unsigned CKS2                   :1;
        unsigned CKS3                   :1;
        unsigned                        :1;
        unsigned PWS0                   :1;
        unsigned PWS1                   :1;
        unsigned PWS2                   :1;
    };
    struct {
        unsigned NCO1CKS                :4;
        unsigned                        :1;
        unsigned NCO1PWS                :3;
    };
    struct {
        unsigned NCO1CKS0               :1;
        unsigned NCO1CKS1               :1;
        unsigned NCO1CKS2               :1;
        unsigned NCO1CKS3               :1;
        unsigned                        :1;
        unsigned NCO1PWS0               :1;
        unsigned NCO1PWS1               :1;
        unsigned NCO1PWS2               :1;
    };
} NCO1CLKbits_t;
extern volatile NCO1CLKbits_t NCO1CLKbits __at(0x3F3F);
// bitfield macros
#define _NCO1CLK_CKS_POSN                                   0x0
#define _NCO1CLK_CKS_POSITION                               0x0
#define _NCO1CLK_CKS_SIZE                                   0x4
#define _NCO1CLK_CKS_LENGTH                                 0x4
#define _NCO1CLK_CKS_MASK                                   0xF
#define _NCO1CLK_PWS_POSN                                   0x5
#define _NCO1CLK_PWS_POSITION                               0x5
#define _NCO1CLK_PWS_SIZE                                   0x3
#define _NCO1CLK_PWS_LENGTH                                 0x3
#define _NCO1CLK_PWS_MASK                                   0xE0
#define _NCO1CLK_CKS0_POSN                                  0x0
#define _NCO1CLK_CKS0_POSITION                              0x0
#define _NCO1CLK_CKS0_SIZE                                  0x1
#define _NCO1CLK_CKS0_LENGTH                                0x1
#define _NCO1CLK_CKS0_MASK                                  0x1
#define _NCO1CLK_CKS1_POSN                                  0x1
#define _NCO1CLK_CKS1_POSITION                              0x1
#define _NCO1CLK_CKS1_SIZE                                  0x1
#define _NCO1CLK_CKS1_LENGTH                                0x1
#define _NCO1CLK_CKS1_MASK                                  0x2
#define _NCO1CLK_CKS2_POSN                                  0x2
#define _NCO1CLK_CKS2_POSITION                              0x2
#define _NCO1CLK_CKS2_SIZE                                  0x1
#define _NCO1CLK_CKS2_LENGTH                                0x1
#define _NCO1CLK_CKS2_MASK                                  0x4
#define _NCO1CLK_CKS3_POSN                                  0x3
#define _NCO1CLK_CKS3_POSITION                              0x3
#define _NCO1CLK_CKS3_SIZE                                  0x1
#define _NCO1CLK_CKS3_LENGTH                                0x1
#define _NCO1CLK_CKS3_MASK                                  0x8
#define _NCO1CLK_PWS0_POSN                                  0x5
#define _NCO1CLK_PWS0_POSITION                              0x5
#define _NCO1CLK_PWS0_SIZE                                  0x1
#define _NCO1CLK_PWS0_LENGTH                                0x1
#define _NCO1CLK_PWS0_MASK                                  0x20
#define _NCO1CLK_PWS1_POSN                                  0x6
#define _NCO1CLK_PWS1_POSITION                              0x6
#define _NCO1CLK_PWS1_SIZE                                  0x1
#define _NCO1CLK_PWS1_LENGTH                                0x1
#define _NCO1CLK_PWS1_MASK                                  0x40
#define _NCO1CLK_PWS2_POSN                                  0x7
#define _NCO1CLK_PWS2_POSITION                              0x7
#define _NCO1CLK_PWS2_SIZE                                  0x1
#define _NCO1CLK_PWS2_LENGTH                                0x1
#define _NCO1CLK_PWS2_MASK                                  0x80
#define _NCO1CLK_NCO1CKS_POSN                               0x0
#define _NCO1CLK_NCO1CKS_POSITION                           0x0
#define _NCO1CLK_NCO1CKS_SIZE                               0x4
#define _NCO1CLK_NCO1CKS_LENGTH                             0x4
#define _NCO1CLK_NCO1CKS_MASK                               0xF
#define _NCO1CLK_NCO1PWS_POSN                               0x5
#define _NCO1CLK_NCO1PWS_POSITION                           0x5
#define _NCO1CLK_NCO1PWS_SIZE                               0x3
#define _NCO1CLK_NCO1PWS_LENGTH                             0x3
#define _NCO1CLK_NCO1PWS_MASK                               0xE0
#define _NCO1CLK_NCO1CKS0_POSN                              0x0
#define _NCO1CLK_NCO1CKS0_POSITION                          0x0
#define _NCO1CLK_NCO1CKS0_SIZE                              0x1
#define _NCO1CLK_NCO1CKS0_LENGTH                            0x1
#define _NCO1CLK_NCO1CKS0_MASK                              0x1
#define _NCO1CLK_NCO1CKS1_POSN                              0x1
#define _NCO1CLK_NCO1CKS1_POSITION                          0x1
#define _NCO1CLK_NCO1CKS1_SIZE                              0x1
#define _NCO1CLK_NCO1CKS1_LENGTH                            0x1
#define _NCO1CLK_NCO1CKS1_MASK                              0x2
#define _NCO1CLK_NCO1CKS2_POSN                              0x2
#define _NCO1CLK_NCO1CKS2_POSITION                          0x2
#define _NCO1CLK_NCO1CKS2_SIZE                              0x1
#define _NCO1CLK_NCO1CKS2_LENGTH                            0x1
#define _NCO1CLK_NCO1CKS2_MASK                              0x4
#define _NCO1CLK_NCO1CKS3_POSN                              0x3
#define _NCO1CLK_NCO1CKS3_POSITION                          0x3
#define _NCO1CLK_NCO1CKS3_SIZE                              0x1
#define _NCO1CLK_NCO1CKS3_LENGTH                            0x1
#define _NCO1CLK_NCO1CKS3_MASK                              0x8
#define _NCO1CLK_NCO1PWS0_POSN                              0x5
#define _NCO1CLK_NCO1PWS0_POSITION                          0x5
#define _NCO1CLK_NCO1PWS0_SIZE                              0x1
#define _NCO1CLK_NCO1PWS0_LENGTH                            0x1
#define _NCO1CLK_NCO1PWS0_MASK                              0x20
#define _NCO1CLK_NCO1PWS1_POSN                              0x6
#define _NCO1CLK_NCO1PWS1_POSITION                          0x6
#define _NCO1CLK_NCO1PWS1_SIZE                              0x1
#define _NCO1CLK_NCO1PWS1_LENGTH                            0x1
#define _NCO1CLK_NCO1PWS1_MASK                              0x40
#define _NCO1CLK_NCO1PWS2_POSN                              0x7
#define _NCO1CLK_NCO1PWS2_POSITION                          0x7
#define _NCO1CLK_NCO1PWS2_SIZE                              0x1
#define _NCO1CLK_NCO1PWS2_LENGTH                            0x1
#define _NCO1CLK_NCO1PWS2_MASK                              0x80

// Register: CWG3CLK
#define CWG3CLK CWG3CLK
extern volatile unsigned char           CWG3CLK             __at(0x3F40);
#ifndef _LIB_BUILD
asm("CWG3CLK equ 03F40h");
#endif
// aliases
extern volatile unsigned char           CWG3CLKCON          __at(0x3F40);
#ifndef _LIB_BUILD
asm("CWG3CLKCON equ 03F40h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CS                     :1;
    };
    struct {
        unsigned CWG3CS                 :1;
    };
} CWG3CLKbits_t;
extern volatile CWG3CLKbits_t CWG3CLKbits __at(0x3F40);
// bitfield macros
#define _CWG3CLK_CS_POSN                                    0x0
#define _CWG3CLK_CS_POSITION                                0x0
#define _CWG3CLK_CS_SIZE                                    0x1
#define _CWG3CLK_CS_LENGTH                                  0x1
#define _CWG3CLK_CS_MASK                                    0x1
#define _CWG3CLK_CWG3CS_POSN                                0x0
#define _CWG3CLK_CWG3CS_POSITION                            0x0
#define _CWG3CLK_CWG3CS_SIZE                                0x1
#define _CWG3CLK_CWG3CS_LENGTH                              0x1
#define _CWG3CLK_CWG3CS_MASK                                0x1
// alias bitfield definitions
typedef union {
    struct {
        unsigned CS                     :1;
    };
    struct {
        unsigned CWG3CS                 :1;
    };
} CWG3CLKCONbits_t;
extern volatile CWG3CLKCONbits_t CWG3CLKCONbits __at(0x3F40);
// bitfield macros
#define _CWG3CLKCON_CS_POSN                                 0x0
#define _CWG3CLKCON_CS_POSITION                             0x0
#define _CWG3CLKCON_CS_SIZE                                 0x1
#define _CWG3CLKCON_CS_LENGTH                               0x1
#define _CWG3CLKCON_CS_MASK                                 0x1
#define _CWG3CLKCON_CWG3CS_POSN                             0x0
#define _CWG3CLKCON_CWG3CS_POSITION                         0x0
#define _CWG3CLKCON_CWG3CS_SIZE                             0x1
#define _CWG3CLKCON_CWG3CS_LENGTH                           0x1
#define _CWG3CLKCON_CWG3CS_MASK                             0x1

// Register: CWG3ISM
#define CWG3ISM CWG3ISM
extern volatile unsigned char           CWG3ISM             __at(0x3F41);
#ifndef _LIB_BUILD
asm("CWG3ISM equ 03F41h");
#endif
// aliases
extern volatile unsigned char           CWG3DAT             __at(0x3F41);
#ifndef _LIB_BUILD
asm("CWG3DAT equ 03F41h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ISM                    :8;
    };
    struct {
        unsigned CWG3ISM                :8;
    };
    struct {
        unsigned ISM0                   :1;
        unsigned ISM1                   :1;
        unsigned ISM2                   :1;
        unsigned ISM3                   :1;
        unsigned ISM4                   :1;
    };
} CWG3ISMbits_t;
extern volatile CWG3ISMbits_t CWG3ISMbits __at(0x3F41);
// bitfield macros
#define _CWG3ISM_ISM_POSN                                   0x0
#define _CWG3ISM_ISM_POSITION                               0x0
#define _CWG3ISM_ISM_SIZE                                   0x8
#define _CWG3ISM_ISM_LENGTH                                 0x8
#define _CWG3ISM_ISM_MASK                                   0xFF
#define _CWG3ISM_CWG3ISM_POSN                               0x0
#define _CWG3ISM_CWG3ISM_POSITION                           0x0
#define _CWG3ISM_CWG3ISM_SIZE                               0x8
#define _CWG3ISM_CWG3ISM_LENGTH                             0x8
#define _CWG3ISM_CWG3ISM_MASK                               0xFF
#define _CWG3ISM_ISM0_POSN                                  0x0
#define _CWG3ISM_ISM0_POSITION                              0x0
#define _CWG3ISM_ISM0_SIZE                                  0x1
#define _CWG3ISM_ISM0_LENGTH                                0x1
#define _CWG3ISM_ISM0_MASK                                  0x1
#define _CWG3ISM_ISM1_POSN                                  0x1
#define _CWG3ISM_ISM1_POSITION                              0x1
#define _CWG3ISM_ISM1_SIZE                                  0x1
#define _CWG3ISM_ISM1_LENGTH                                0x1
#define _CWG3ISM_ISM1_MASK                                  0x2
#define _CWG3ISM_ISM2_POSN                                  0x2
#define _CWG3ISM_ISM2_POSITION                              0x2
#define _CWG3ISM_ISM2_SIZE                                  0x1
#define _CWG3ISM_ISM2_LENGTH                                0x1
#define _CWG3ISM_ISM2_MASK                                  0x4
#define _CWG3ISM_ISM3_POSN                                  0x3
#define _CWG3ISM_ISM3_POSITION                              0x3
#define _CWG3ISM_ISM3_SIZE                                  0x1
#define _CWG3ISM_ISM3_LENGTH                                0x1
#define _CWG3ISM_ISM3_MASK                                  0x8
#define _CWG3ISM_ISM4_POSN                                  0x4
#define _CWG3ISM_ISM4_POSITION                              0x4
#define _CWG3ISM_ISM4_SIZE                                  0x1
#define _CWG3ISM_ISM4_LENGTH                                0x1
#define _CWG3ISM_ISM4_MASK                                  0x10
// alias bitfield definitions
typedef union {
    struct {
        unsigned ISM                    :8;
    };
    struct {
        unsigned CWG3ISM                :8;
    };
    struct {
        unsigned ISM0                   :1;
        unsigned ISM1                   :1;
        unsigned ISM2                   :1;
        unsigned ISM3                   :1;
        unsigned ISM4                   :1;
    };
} CWG3DATbits_t;
extern volatile CWG3DATbits_t CWG3DATbits __at(0x3F41);
// bitfield macros
#define _CWG3DAT_ISM_POSN                                   0x0
#define _CWG3DAT_ISM_POSITION                               0x0
#define _CWG3DAT_ISM_SIZE                                   0x8
#define _CWG3DAT_ISM_LENGTH                                 0x8
#define _CWG3DAT_ISM_MASK                                   0xFF
#define _CWG3DAT_CWG3ISM_POSN                               0x0
#define _CWG3DAT_CWG3ISM_POSITION                           0x0
#define _CWG3DAT_CWG3ISM_SIZE                               0x8
#define _CWG3DAT_CWG3ISM_LENGTH                             0x8
#define _CWG3DAT_CWG3ISM_MASK                               0xFF
#define _CWG3DAT_ISM0_POSN                                  0x0
#define _CWG3DAT_ISM0_POSITION                              0x0
#define _CWG3DAT_ISM0_SIZE                                  0x1
#define _CWG3DAT_ISM0_LENGTH                                0x1
#define _CWG3DAT_ISM0_MASK                                  0x1
#define _CWG3DAT_ISM1_POSN                                  0x1
#define _CWG3DAT_ISM1_POSITION                              0x1
#define _CWG3DAT_ISM1_SIZE                                  0x1
#define _CWG3DAT_ISM1_LENGTH                                0x1
#define _CWG3DAT_ISM1_MASK                                  0x2
#define _CWG3DAT_ISM2_POSN                                  0x2
#define _CWG3DAT_ISM2_POSITION                              0x2
#define _CWG3DAT_ISM2_SIZE                                  0x1
#define _CWG3DAT_ISM2_LENGTH                                0x1
#define _CWG3DAT_ISM2_MASK                                  0x4
#define _CWG3DAT_ISM3_POSN                                  0x3
#define _CWG3DAT_ISM3_POSITION                              0x3
#define _CWG3DAT_ISM3_SIZE                                  0x1
#define _CWG3DAT_ISM3_LENGTH                                0x1
#define _CWG3DAT_ISM3_MASK                                  0x8
#define _CWG3DAT_ISM4_POSN                                  0x4
#define _CWG3DAT_ISM4_POSITION                              0x4
#define _CWG3DAT_ISM4_SIZE                                  0x1
#define _CWG3DAT_ISM4_LENGTH                                0x1
#define _CWG3DAT_ISM4_MASK                                  0x10

// Register: CWG3DBR
#define CWG3DBR CWG3DBR
extern volatile unsigned char           CWG3DBR             __at(0x3F42);
#ifndef _LIB_BUILD
asm("CWG3DBR equ 03F42h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DBR                    :8;
    };
    struct {
        unsigned DBR0                   :1;
        unsigned DBR1                   :1;
        unsigned DBR2                   :1;
        unsigned DBR3                   :1;
        unsigned DBR4                   :1;
        unsigned DBR5                   :1;
    };
    struct {
        unsigned CWG3DBR                :8;
    };
    struct {
        unsigned CWG3DBR0               :1;
        unsigned CWG3DBR1               :1;
        unsigned CWG3DBR2               :1;
        unsigned CWG3DBR3               :1;
        unsigned CWG3DBR4               :1;
        unsigned CWG3DBR5               :1;
    };
} CWG3DBRbits_t;
extern volatile CWG3DBRbits_t CWG3DBRbits __at(0x3F42);
// bitfield macros
#define _CWG3DBR_DBR_POSN                                   0x0
#define _CWG3DBR_DBR_POSITION                               0x0
#define _CWG3DBR_DBR_SIZE                                   0x8
#define _CWG3DBR_DBR_LENGTH                                 0x8
#define _CWG3DBR_DBR_MASK                                   0xFF
#define _CWG3DBR_DBR0_POSN                                  0x0
#define _CWG3DBR_DBR0_POSITION                              0x0
#define _CWG3DBR_DBR0_SIZE                                  0x1
#define _CWG3DBR_DBR0_LENGTH                                0x1
#define _CWG3DBR_DBR0_MASK                                  0x1
#define _CWG3DBR_DBR1_POSN                                  0x1
#define _CWG3DBR_DBR1_POSITION                              0x1
#define _CWG3DBR_DBR1_SIZE                                  0x1
#define _CWG3DBR_DBR1_LENGTH                                0x1
#define _CWG3DBR_DBR1_MASK                                  0x2
#define _CWG3DBR_DBR2_POSN                                  0x2
#define _CWG3DBR_DBR2_POSITION                              0x2
#define _CWG3DBR_DBR2_SIZE                                  0x1
#define _CWG3DBR_DBR2_LENGTH                                0x1
#define _CWG3DBR_DBR2_MASK                                  0x4
#define _CWG3DBR_DBR3_POSN                                  0x3
#define _CWG3DBR_DBR3_POSITION                              0x3
#define _CWG3DBR_DBR3_SIZE                                  0x1
#define _CWG3DBR_DBR3_LENGTH                                0x1
#define _CWG3DBR_DBR3_MASK                                  0x8
#define _CWG3DBR_DBR4_POSN                                  0x4
#define _CWG3DBR_DBR4_POSITION                              0x4
#define _CWG3DBR_DBR4_SIZE                                  0x1
#define _CWG3DBR_DBR4_LENGTH                                0x1
#define _CWG3DBR_DBR4_MASK                                  0x10
#define _CWG3DBR_DBR5_POSN                                  0x5
#define _CWG3DBR_DBR5_POSITION                              0x5
#define _CWG3DBR_DBR5_SIZE                                  0x1
#define _CWG3DBR_DBR5_LENGTH                                0x1
#define _CWG3DBR_DBR5_MASK                                  0x20
#define _CWG3DBR_CWG3DBR_POSN                               0x0
#define _CWG3DBR_CWG3DBR_POSITION                           0x0
#define _CWG3DBR_CWG3DBR_SIZE                               0x8
#define _CWG3DBR_CWG3DBR_LENGTH                             0x8
#define _CWG3DBR_CWG3DBR_MASK                               0xFF
#define _CWG3DBR_CWG3DBR0_POSN                              0x0
#define _CWG3DBR_CWG3DBR0_POSITION                          0x0
#define _CWG3DBR_CWG3DBR0_SIZE                              0x1
#define _CWG3DBR_CWG3DBR0_LENGTH                            0x1
#define _CWG3DBR_CWG3DBR0_MASK                              0x1
#define _CWG3DBR_CWG3DBR1_POSN                              0x1
#define _CWG3DBR_CWG3DBR1_POSITION                          0x1
#define _CWG3DBR_CWG3DBR1_SIZE                              0x1
#define _CWG3DBR_CWG3DBR1_LENGTH                            0x1
#define _CWG3DBR_CWG3DBR1_MASK                              0x2
#define _CWG3DBR_CWG3DBR2_POSN                              0x2
#define _CWG3DBR_CWG3DBR2_POSITION                          0x2
#define _CWG3DBR_CWG3DBR2_SIZE                              0x1
#define _CWG3DBR_CWG3DBR2_LENGTH                            0x1
#define _CWG3DBR_CWG3DBR2_MASK                              0x4
#define _CWG3DBR_CWG3DBR3_POSN                              0x3
#define _CWG3DBR_CWG3DBR3_POSITION                          0x3
#define _CWG3DBR_CWG3DBR3_SIZE                              0x1
#define _CWG3DBR_CWG3DBR3_LENGTH                            0x1
#define _CWG3DBR_CWG3DBR3_MASK                              0x8
#define _CWG3DBR_CWG3DBR4_POSN                              0x4
#define _CWG3DBR_CWG3DBR4_POSITION                          0x4
#define _CWG3DBR_CWG3DBR4_SIZE                              0x1
#define _CWG3DBR_CWG3DBR4_LENGTH                            0x1
#define _CWG3DBR_CWG3DBR4_MASK                              0x10
#define _CWG3DBR_CWG3DBR5_POSN                              0x5
#define _CWG3DBR_CWG3DBR5_POSITION                          0x5
#define _CWG3DBR_CWG3DBR5_SIZE                              0x1
#define _CWG3DBR_CWG3DBR5_LENGTH                            0x1
#define _CWG3DBR_CWG3DBR5_MASK                              0x20

// Register: CWG3DBF
#define CWG3DBF CWG3DBF
extern volatile unsigned char           CWG3DBF             __at(0x3F43);
#ifndef _LIB_BUILD
asm("CWG3DBF equ 03F43h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DBF                    :8;
    };
    struct {
        unsigned DBF0                   :1;
        unsigned DBF1                   :1;
        unsigned DBF2                   :1;
        unsigned DBF3                   :1;
        unsigned DBF4                   :1;
        unsigned DBF5                   :1;
    };
    struct {
        unsigned CWG3DBF                :8;
    };
    struct {
        unsigned CWG3DBF0               :1;
        unsigned CWG3DBF1               :1;
        unsigned CWG3DBF2               :1;
        unsigned CWG3DBF3               :1;
        unsigned CWG3DBF4               :1;
        unsigned CWG3DBF5               :1;
    };
} CWG3DBFbits_t;
extern volatile CWG3DBFbits_t CWG3DBFbits __at(0x3F43);
// bitfield macros
#define _CWG3DBF_DBF_POSN                                   0x0
#define _CWG3DBF_DBF_POSITION                               0x0
#define _CWG3DBF_DBF_SIZE                                   0x8
#define _CWG3DBF_DBF_LENGTH                                 0x8
#define _CWG3DBF_DBF_MASK                                   0xFF
#define _CWG3DBF_DBF0_POSN                                  0x0
#define _CWG3DBF_DBF0_POSITION                              0x0
#define _CWG3DBF_DBF0_SIZE                                  0x1
#define _CWG3DBF_DBF0_LENGTH                                0x1
#define _CWG3DBF_DBF0_MASK                                  0x1
#define _CWG3DBF_DBF1_POSN                                  0x1
#define _CWG3DBF_DBF1_POSITION                              0x1
#define _CWG3DBF_DBF1_SIZE                                  0x1
#define _CWG3DBF_DBF1_LENGTH                                0x1
#define _CWG3DBF_DBF1_MASK                                  0x2
#define _CWG3DBF_DBF2_POSN                                  0x2
#define _CWG3DBF_DBF2_POSITION                              0x2
#define _CWG3DBF_DBF2_SIZE                                  0x1
#define _CWG3DBF_DBF2_LENGTH                                0x1
#define _CWG3DBF_DBF2_MASK                                  0x4
#define _CWG3DBF_DBF3_POSN                                  0x3
#define _CWG3DBF_DBF3_POSITION                              0x3
#define _CWG3DBF_DBF3_SIZE                                  0x1
#define _CWG3DBF_DBF3_LENGTH                                0x1
#define _CWG3DBF_DBF3_MASK                                  0x8
#define _CWG3DBF_DBF4_POSN                                  0x4
#define _CWG3DBF_DBF4_POSITION                              0x4
#define _CWG3DBF_DBF4_SIZE                                  0x1
#define _CWG3DBF_DBF4_LENGTH                                0x1
#define _CWG3DBF_DBF4_MASK                                  0x10
#define _CWG3DBF_DBF5_POSN                                  0x5
#define _CWG3DBF_DBF5_POSITION                              0x5
#define _CWG3DBF_DBF5_SIZE                                  0x1
#define _CWG3DBF_DBF5_LENGTH                                0x1
#define _CWG3DBF_DBF5_MASK                                  0x20
#define _CWG3DBF_CWG3DBF_POSN                               0x0
#define _CWG3DBF_CWG3DBF_POSITION                           0x0
#define _CWG3DBF_CWG3DBF_SIZE                               0x8
#define _CWG3DBF_CWG3DBF_LENGTH                             0x8
#define _CWG3DBF_CWG3DBF_MASK                               0xFF
#define _CWG3DBF_CWG3DBF0_POSN                              0x0
#define _CWG3DBF_CWG3DBF0_POSITION                          0x0
#define _CWG3DBF_CWG3DBF0_SIZE                              0x1
#define _CWG3DBF_CWG3DBF0_LENGTH                            0x1
#define _CWG3DBF_CWG3DBF0_MASK                              0x1
#define _CWG3DBF_CWG3DBF1_POSN                              0x1
#define _CWG3DBF_CWG3DBF1_POSITION                          0x1
#define _CWG3DBF_CWG3DBF1_SIZE                              0x1
#define _CWG3DBF_CWG3DBF1_LENGTH                            0x1
#define _CWG3DBF_CWG3DBF1_MASK                              0x2
#define _CWG3DBF_CWG3DBF2_POSN                              0x2
#define _CWG3DBF_CWG3DBF2_POSITION                          0x2
#define _CWG3DBF_CWG3DBF2_SIZE                              0x1
#define _CWG3DBF_CWG3DBF2_LENGTH                            0x1
#define _CWG3DBF_CWG3DBF2_MASK                              0x4
#define _CWG3DBF_CWG3DBF3_POSN                              0x3
#define _CWG3DBF_CWG3DBF3_POSITION                          0x3
#define _CWG3DBF_CWG3DBF3_SIZE                              0x1
#define _CWG3DBF_CWG3DBF3_LENGTH                            0x1
#define _CWG3DBF_CWG3DBF3_MASK                              0x8
#define _CWG3DBF_CWG3DBF4_POSN                              0x4
#define _CWG3DBF_CWG3DBF4_POSITION                          0x4
#define _CWG3DBF_CWG3DBF4_SIZE                              0x1
#define _CWG3DBF_CWG3DBF4_LENGTH                            0x1
#define _CWG3DBF_CWG3DBF4_MASK                              0x10
#define _CWG3DBF_CWG3DBF5_POSN                              0x5
#define _CWG3DBF_CWG3DBF5_POSITION                          0x5
#define _CWG3DBF_CWG3DBF5_SIZE                              0x1
#define _CWG3DBF_CWG3DBF5_LENGTH                            0x1
#define _CWG3DBF_CWG3DBF5_MASK                              0x20

// Register: CWG3CON0
#define CWG3CON0 CWG3CON0
extern volatile unsigned char           CWG3CON0            __at(0x3F44);
#ifndef _LIB_BUILD
asm("CWG3CON0 equ 03F44h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :3;
        unsigned                        :3;
        unsigned LD                     :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned                        :4;
        unsigned G3EN                   :1;
    };
    struct {
        unsigned CWG3MODE               :3;
        unsigned                        :3;
        unsigned CWG3LD                 :1;
        unsigned CWG3EN                 :1;
    };
    struct {
        unsigned CWG3MODE0              :1;
        unsigned CWG3MODE1              :1;
        unsigned CWG3MODE2              :1;
    };
} CWG3CON0bits_t;
extern volatile CWG3CON0bits_t CWG3CON0bits __at(0x3F44);
// bitfield macros
#define _CWG3CON0_MODE_POSN                                 0x0
#define _CWG3CON0_MODE_POSITION                             0x0
#define _CWG3CON0_MODE_SIZE                                 0x3
#define _CWG3CON0_MODE_LENGTH                               0x3
#define _CWG3CON0_MODE_MASK                                 0x7
#define _CWG3CON0_LD_POSN                                   0x6
#define _CWG3CON0_LD_POSITION                               0x6
#define _CWG3CON0_LD_SIZE                                   0x1
#define _CWG3CON0_LD_LENGTH                                 0x1
#define _CWG3CON0_LD_MASK                                   0x40
#define _CWG3CON0_EN_POSN                                   0x7
#define _CWG3CON0_EN_POSITION                               0x7
#define _CWG3CON0_EN_SIZE                                   0x1
#define _CWG3CON0_EN_LENGTH                                 0x1
#define _CWG3CON0_EN_MASK                                   0x80
#define _CWG3CON0_MODE0_POSN                                0x0
#define _CWG3CON0_MODE0_POSITION                            0x0
#define _CWG3CON0_MODE0_SIZE                                0x1
#define _CWG3CON0_MODE0_LENGTH                              0x1
#define _CWG3CON0_MODE0_MASK                                0x1
#define _CWG3CON0_MODE1_POSN                                0x1
#define _CWG3CON0_MODE1_POSITION                            0x1
#define _CWG3CON0_MODE1_SIZE                                0x1
#define _CWG3CON0_MODE1_LENGTH                              0x1
#define _CWG3CON0_MODE1_MASK                                0x2
#define _CWG3CON0_MODE2_POSN                                0x2
#define _CWG3CON0_MODE2_POSITION                            0x2
#define _CWG3CON0_MODE2_SIZE                                0x1
#define _CWG3CON0_MODE2_LENGTH                              0x1
#define _CWG3CON0_MODE2_MASK                                0x4
#define _CWG3CON0_G3EN_POSN                                 0x7
#define _CWG3CON0_G3EN_POSITION                             0x7
#define _CWG3CON0_G3EN_SIZE                                 0x1
#define _CWG3CON0_G3EN_LENGTH                               0x1
#define _CWG3CON0_G3EN_MASK                                 0x80
#define _CWG3CON0_CWG3MODE_POSN                             0x0
#define _CWG3CON0_CWG3MODE_POSITION                         0x0
#define _CWG3CON0_CWG3MODE_SIZE                             0x3
#define _CWG3CON0_CWG3MODE_LENGTH                           0x3
#define _CWG3CON0_CWG3MODE_MASK                             0x7
#define _CWG3CON0_CWG3LD_POSN                               0x6
#define _CWG3CON0_CWG3LD_POSITION                           0x6
#define _CWG3CON0_CWG3LD_SIZE                               0x1
#define _CWG3CON0_CWG3LD_LENGTH                             0x1
#define _CWG3CON0_CWG3LD_MASK                               0x40
#define _CWG3CON0_CWG3EN_POSN                               0x7
#define _CWG3CON0_CWG3EN_POSITION                           0x7
#define _CWG3CON0_CWG3EN_SIZE                               0x1
#define _CWG3CON0_CWG3EN_LENGTH                             0x1
#define _CWG3CON0_CWG3EN_MASK                               0x80
#define _CWG3CON0_CWG3MODE0_POSN                            0x0
#define _CWG3CON0_CWG3MODE0_POSITION                        0x0
#define _CWG3CON0_CWG3MODE0_SIZE                            0x1
#define _CWG3CON0_CWG3MODE0_LENGTH                          0x1
#define _CWG3CON0_CWG3MODE0_MASK                            0x1
#define _CWG3CON0_CWG3MODE1_POSN                            0x1
#define _CWG3CON0_CWG3MODE1_POSITION                        0x1
#define _CWG3CON0_CWG3MODE1_SIZE                            0x1
#define _CWG3CON0_CWG3MODE1_LENGTH                          0x1
#define _CWG3CON0_CWG3MODE1_MASK                            0x2
#define _CWG3CON0_CWG3MODE2_POSN                            0x2
#define _CWG3CON0_CWG3MODE2_POSITION                        0x2
#define _CWG3CON0_CWG3MODE2_SIZE                            0x1
#define _CWG3CON0_CWG3MODE2_LENGTH                          0x1
#define _CWG3CON0_CWG3MODE2_MASK                            0x4

// Register: CWG3CON1
#define CWG3CON1 CWG3CON1
extern volatile unsigned char           CWG3CON1            __at(0x3F45);
#ifndef _LIB_BUILD
asm("CWG3CON1 equ 03F45h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned POLA                   :1;
        unsigned POLB                   :1;
        unsigned POLC                   :1;
        unsigned POLD                   :1;
        unsigned                        :1;
        unsigned IN                     :1;
    };
    struct {
        unsigned CWG3POLA               :1;
        unsigned CWG3POLB               :1;
        unsigned CWG3POLC               :1;
        unsigned CWG3POLD               :1;
        unsigned                        :1;
        unsigned CWG3IN                 :1;
    };
} CWG3CON1bits_t;
extern volatile CWG3CON1bits_t CWG3CON1bits __at(0x3F45);
// bitfield macros
#define _CWG3CON1_POLA_POSN                                 0x0
#define _CWG3CON1_POLA_POSITION                             0x0
#define _CWG3CON1_POLA_SIZE                                 0x1
#define _CWG3CON1_POLA_LENGTH                               0x1
#define _CWG3CON1_POLA_MASK                                 0x1
#define _CWG3CON1_POLB_POSN                                 0x1
#define _CWG3CON1_POLB_POSITION                             0x1
#define _CWG3CON1_POLB_SIZE                                 0x1
#define _CWG3CON1_POLB_LENGTH                               0x1
#define _CWG3CON1_POLB_MASK                                 0x2
#define _CWG3CON1_POLC_POSN                                 0x2
#define _CWG3CON1_POLC_POSITION                             0x2
#define _CWG3CON1_POLC_SIZE                                 0x1
#define _CWG3CON1_POLC_LENGTH                               0x1
#define _CWG3CON1_POLC_MASK                                 0x4
#define _CWG3CON1_POLD_POSN                                 0x3
#define _CWG3CON1_POLD_POSITION                             0x3
#define _CWG3CON1_POLD_SIZE                                 0x1
#define _CWG3CON1_POLD_LENGTH                               0x1
#define _CWG3CON1_POLD_MASK                                 0x8
#define _CWG3CON1_IN_POSN                                   0x5
#define _CWG3CON1_IN_POSITION                               0x5
#define _CWG3CON1_IN_SIZE                                   0x1
#define _CWG3CON1_IN_LENGTH                                 0x1
#define _CWG3CON1_IN_MASK                                   0x20
#define _CWG3CON1_CWG3POLA_POSN                             0x0
#define _CWG3CON1_CWG3POLA_POSITION                         0x0
#define _CWG3CON1_CWG3POLA_SIZE                             0x1
#define _CWG3CON1_CWG3POLA_LENGTH                           0x1
#define _CWG3CON1_CWG3POLA_MASK                             0x1
#define _CWG3CON1_CWG3POLB_POSN                             0x1
#define _CWG3CON1_CWG3POLB_POSITION                         0x1
#define _CWG3CON1_CWG3POLB_SIZE                             0x1
#define _CWG3CON1_CWG3POLB_LENGTH                           0x1
#define _CWG3CON1_CWG3POLB_MASK                             0x2
#define _CWG3CON1_CWG3POLC_POSN                             0x2
#define _CWG3CON1_CWG3POLC_POSITION                         0x2
#define _CWG3CON1_CWG3POLC_SIZE                             0x1
#define _CWG3CON1_CWG3POLC_LENGTH                           0x1
#define _CWG3CON1_CWG3POLC_MASK                             0x4
#define _CWG3CON1_CWG3POLD_POSN                             0x3
#define _CWG3CON1_CWG3POLD_POSITION                         0x3
#define _CWG3CON1_CWG3POLD_SIZE                             0x1
#define _CWG3CON1_CWG3POLD_LENGTH                           0x1
#define _CWG3CON1_CWG3POLD_MASK                             0x8
#define _CWG3CON1_CWG3IN_POSN                               0x5
#define _CWG3CON1_CWG3IN_POSITION                           0x5
#define _CWG3CON1_CWG3IN_SIZE                               0x1
#define _CWG3CON1_CWG3IN_LENGTH                             0x1
#define _CWG3CON1_CWG3IN_MASK                               0x20

// Register: CWG3AS0
#define CWG3AS0 CWG3AS0
extern volatile unsigned char           CWG3AS0             __at(0x3F46);
#ifndef _LIB_BUILD
asm("CWG3AS0 equ 03F46h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned LSAC                   :2;
        unsigned LSDBD                  :2;
        unsigned REN                    :1;
        unsigned SHUTDOWN               :1;
    };
    struct {
        unsigned                        :2;
        unsigned LSAC0                  :1;
        unsigned LSCA1                  :1;
        unsigned LSDB0                  :1;
        unsigned LSDB1                  :1;
    };
    struct {
        unsigned                        :2;
        unsigned CWG3LSAC0              :1;
        unsigned CWG3LSAC1              :1;
        unsigned CWG3LSDB0              :1;
        unsigned CWG3LSDB1              :1;
    };
    struct {
        unsigned                        :2;
        unsigned CWG3LSAC               :2;
        unsigned CWG3LSDB               :2;
    };
    struct {
        unsigned                        :4;
        unsigned LSBD                   :2;
    };
    struct {
        unsigned                        :3;
        unsigned LSAC1                  :1;
        unsigned LSBD0                  :1;
        unsigned LSBD1                  :1;
    };
    struct {
        unsigned                        :4;
        unsigned CWG3LSBD0              :1;
        unsigned CWG3LSBD1              :1;
    };
    struct {
        unsigned                        :4;
        unsigned CWG3LSBD               :2;
    };
} CWG3AS0bits_t;
extern volatile CWG3AS0bits_t CWG3AS0bits __at(0x3F46);
// bitfield macros
#define _CWG3AS0_LSAC_POSN                                  0x2
#define _CWG3AS0_LSAC_POSITION                              0x2
#define _CWG3AS0_LSAC_SIZE                                  0x2
#define _CWG3AS0_LSAC_LENGTH                                0x2
#define _CWG3AS0_LSAC_MASK                                  0xC
#define _CWG3AS0_LSDBD_POSN                                 0x4
#define _CWG3AS0_LSDBD_POSITION                             0x4
#define _CWG3AS0_LSDBD_SIZE                                 0x2
#define _CWG3AS0_LSDBD_LENGTH                               0x2
#define _CWG3AS0_LSDBD_MASK                                 0x30
#define _CWG3AS0_REN_POSN                                   0x6
#define _CWG3AS0_REN_POSITION                               0x6
#define _CWG3AS0_REN_SIZE                                   0x1
#define _CWG3AS0_REN_LENGTH                                 0x1
#define _CWG3AS0_REN_MASK                                   0x40
#define _CWG3AS0_SHUTDOWN_POSN                              0x7
#define _CWG3AS0_SHUTDOWN_POSITION                          0x7
#define _CWG3AS0_SHUTDOWN_SIZE                              0x1
#define _CWG3AS0_SHUTDOWN_LENGTH                            0x1
#define _CWG3AS0_SHUTDOWN_MASK                              0x80
#define _CWG3AS0_LSAC0_POSN                                 0x2
#define _CWG3AS0_LSAC0_POSITION                             0x2
#define _CWG3AS0_LSAC0_SIZE                                 0x1
#define _CWG3AS0_LSAC0_LENGTH                               0x1
#define _CWG3AS0_LSAC0_MASK                                 0x4
#define _CWG3AS0_LSCA1_POSN                                 0x3
#define _CWG3AS0_LSCA1_POSITION                             0x3
#define _CWG3AS0_LSCA1_SIZE                                 0x1
#define _CWG3AS0_LSCA1_LENGTH                               0x1
#define _CWG3AS0_LSCA1_MASK                                 0x8
#define _CWG3AS0_LSDB0_POSN                                 0x4
#define _CWG3AS0_LSDB0_POSITION                             0x4
#define _CWG3AS0_LSDB0_SIZE                                 0x1
#define _CWG3AS0_LSDB0_LENGTH                               0x1
#define _CWG3AS0_LSDB0_MASK                                 0x10
#define _CWG3AS0_LSDB1_POSN                                 0x5
#define _CWG3AS0_LSDB1_POSITION                             0x5
#define _CWG3AS0_LSDB1_SIZE                                 0x1
#define _CWG3AS0_LSDB1_LENGTH                               0x1
#define _CWG3AS0_LSDB1_MASK                                 0x20
#define _CWG3AS0_CWG3LSAC0_POSN                             0x2
#define _CWG3AS0_CWG3LSAC0_POSITION                         0x2
#define _CWG3AS0_CWG3LSAC0_SIZE                             0x1
#define _CWG3AS0_CWG3LSAC0_LENGTH                           0x1
#define _CWG3AS0_CWG3LSAC0_MASK                             0x4
#define _CWG3AS0_CWG3LSAC1_POSN                             0x3
#define _CWG3AS0_CWG3LSAC1_POSITION                         0x3
#define _CWG3AS0_CWG3LSAC1_SIZE                             0x1
#define _CWG3AS0_CWG3LSAC1_LENGTH                           0x1
#define _CWG3AS0_CWG3LSAC1_MASK                             0x8
#define _CWG3AS0_CWG3LSDB0_POSN                             0x4
#define _CWG3AS0_CWG3LSDB0_POSITION                         0x4
#define _CWG3AS0_CWG3LSDB0_SIZE                             0x1
#define _CWG3AS0_CWG3LSDB0_LENGTH                           0x1
#define _CWG3AS0_CWG3LSDB0_MASK                             0x10
#define _CWG3AS0_CWG3LSDB1_POSN                             0x5
#define _CWG3AS0_CWG3LSDB1_POSITION                         0x5
#define _CWG3AS0_CWG3LSDB1_SIZE                             0x1
#define _CWG3AS0_CWG3LSDB1_LENGTH                           0x1
#define _CWG3AS0_CWG3LSDB1_MASK                             0x20
#define _CWG3AS0_CWG3LSAC_POSN                              0x2
#define _CWG3AS0_CWG3LSAC_POSITION                          0x2
#define _CWG3AS0_CWG3LSAC_SIZE                              0x2
#define _CWG3AS0_CWG3LSAC_LENGTH                            0x2
#define _CWG3AS0_CWG3LSAC_MASK                              0xC
#define _CWG3AS0_CWG3LSDB_POSN                              0x4
#define _CWG3AS0_CWG3LSDB_POSITION                          0x4
#define _CWG3AS0_CWG3LSDB_SIZE                              0x2
#define _CWG3AS0_CWG3LSDB_LENGTH                            0x2
#define _CWG3AS0_CWG3LSDB_MASK                              0x30
#define _CWG3AS0_LSBD_POSN                                  0x4
#define _CWG3AS0_LSBD_POSITION                              0x4
#define _CWG3AS0_LSBD_SIZE                                  0x2
#define _CWG3AS0_LSBD_LENGTH                                0x2
#define _CWG3AS0_LSBD_MASK                                  0x30
#define _CWG3AS0_LSAC1_POSN                                 0x3
#define _CWG3AS0_LSAC1_POSITION                             0x3
#define _CWG3AS0_LSAC1_SIZE                                 0x1
#define _CWG3AS0_LSAC1_LENGTH                               0x1
#define _CWG3AS0_LSAC1_MASK                                 0x8
#define _CWG3AS0_LSBD0_POSN                                 0x4
#define _CWG3AS0_LSBD0_POSITION                             0x4
#define _CWG3AS0_LSBD0_SIZE                                 0x1
#define _CWG3AS0_LSBD0_LENGTH                               0x1
#define _CWG3AS0_LSBD0_MASK                                 0x10
#define _CWG3AS0_LSBD1_POSN                                 0x5
#define _CWG3AS0_LSBD1_POSITION                             0x5
#define _CWG3AS0_LSBD1_SIZE                                 0x1
#define _CWG3AS0_LSBD1_LENGTH                               0x1
#define _CWG3AS0_LSBD1_MASK                                 0x20
#define _CWG3AS0_CWG3LSBD0_POSN                             0x4
#define _CWG3AS0_CWG3LSBD0_POSITION                         0x4
#define _CWG3AS0_CWG3LSBD0_SIZE                             0x1
#define _CWG3AS0_CWG3LSBD0_LENGTH                           0x1
#define _CWG3AS0_CWG3LSBD0_MASK                             0x10
#define _CWG3AS0_CWG3LSBD1_POSN                             0x5
#define _CWG3AS0_CWG3LSBD1_POSITION                         0x5
#define _CWG3AS0_CWG3LSBD1_SIZE                             0x1
#define _CWG3AS0_CWG3LSBD1_LENGTH                           0x1
#define _CWG3AS0_CWG3LSBD1_MASK                             0x20
#define _CWG3AS0_CWG3LSBD_POSN                              0x4
#define _CWG3AS0_CWG3LSBD_POSITION                          0x4
#define _CWG3AS0_CWG3LSBD_SIZE                              0x2
#define _CWG3AS0_CWG3LSBD_LENGTH                            0x2
#define _CWG3AS0_CWG3LSBD_MASK                              0x30

// Register: CWG3AS1
#define CWG3AS1 CWG3AS1
extern volatile unsigned char           CWG3AS1             __at(0x3F47);
#ifndef _LIB_BUILD
asm("CWG3AS1 equ 03F47h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned AS0E                   :1;
        unsigned AS1E                   :1;
        unsigned AS2E                   :1;
        unsigned AS3E                   :1;
        unsigned AS4E                   :1;
        unsigned AS5E                   :1;
        unsigned AS6E                   :1;
    };
} CWG3AS1bits_t;
extern volatile CWG3AS1bits_t CWG3AS1bits __at(0x3F47);
// bitfield macros
#define _CWG3AS1_AS0E_POSN                                  0x0
#define _CWG3AS1_AS0E_POSITION                              0x0
#define _CWG3AS1_AS0E_SIZE                                  0x1
#define _CWG3AS1_AS0E_LENGTH                                0x1
#define _CWG3AS1_AS0E_MASK                                  0x1
#define _CWG3AS1_AS1E_POSN                                  0x1
#define _CWG3AS1_AS1E_POSITION                              0x1
#define _CWG3AS1_AS1E_SIZE                                  0x1
#define _CWG3AS1_AS1E_LENGTH                                0x1
#define _CWG3AS1_AS1E_MASK                                  0x2
#define _CWG3AS1_AS2E_POSN                                  0x2
#define _CWG3AS1_AS2E_POSITION                              0x2
#define _CWG3AS1_AS2E_SIZE                                  0x1
#define _CWG3AS1_AS2E_LENGTH                                0x1
#define _CWG3AS1_AS2E_MASK                                  0x4
#define _CWG3AS1_AS3E_POSN                                  0x3
#define _CWG3AS1_AS3E_POSITION                              0x3
#define _CWG3AS1_AS3E_SIZE                                  0x1
#define _CWG3AS1_AS3E_LENGTH                                0x1
#define _CWG3AS1_AS3E_MASK                                  0x8
#define _CWG3AS1_AS4E_POSN                                  0x4
#define _CWG3AS1_AS4E_POSITION                              0x4
#define _CWG3AS1_AS4E_SIZE                                  0x1
#define _CWG3AS1_AS4E_LENGTH                                0x1
#define _CWG3AS1_AS4E_MASK                                  0x10
#define _CWG3AS1_AS5E_POSN                                  0x5
#define _CWG3AS1_AS5E_POSITION                              0x5
#define _CWG3AS1_AS5E_SIZE                                  0x1
#define _CWG3AS1_AS5E_LENGTH                                0x1
#define _CWG3AS1_AS5E_MASK                                  0x20
#define _CWG3AS1_AS6E_POSN                                  0x6
#define _CWG3AS1_AS6E_POSITION                              0x6
#define _CWG3AS1_AS6E_SIZE                                  0x1
#define _CWG3AS1_AS6E_LENGTH                                0x1
#define _CWG3AS1_AS6E_MASK                                  0x40

// Register: CWG3STR
#define CWG3STR CWG3STR
extern volatile unsigned char           CWG3STR             __at(0x3F48);
#ifndef _LIB_BUILD
asm("CWG3STR equ 03F48h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned STRA                   :1;
        unsigned STRB                   :1;
        unsigned STRC                   :1;
        unsigned STRD                   :1;
        unsigned OVRA                   :1;
        unsigned OVRB                   :1;
        unsigned OVRC                   :1;
        unsigned OVRD                   :1;
    };
    struct {
        unsigned CWG3STRA               :1;
        unsigned CWG3STRB               :1;
        unsigned CWG3STRC               :1;
        unsigned CWG3STRD               :1;
        unsigned CWG3OVRA               :1;
        unsigned CWG3OVRB               :1;
        unsigned CWG3OVRC               :1;
        unsigned CWG3OVRD               :1;
    };
} CWG3STRbits_t;
extern volatile CWG3STRbits_t CWG3STRbits __at(0x3F48);
// bitfield macros
#define _CWG3STR_STRA_POSN                                  0x0
#define _CWG3STR_STRA_POSITION                              0x0
#define _CWG3STR_STRA_SIZE                                  0x1
#define _CWG3STR_STRA_LENGTH                                0x1
#define _CWG3STR_STRA_MASK                                  0x1
#define _CWG3STR_STRB_POSN                                  0x1
#define _CWG3STR_STRB_POSITION                              0x1
#define _CWG3STR_STRB_SIZE                                  0x1
#define _CWG3STR_STRB_LENGTH                                0x1
#define _CWG3STR_STRB_MASK                                  0x2
#define _CWG3STR_STRC_POSN                                  0x2
#define _CWG3STR_STRC_POSITION                              0x2
#define _CWG3STR_STRC_SIZE                                  0x1
#define _CWG3STR_STRC_LENGTH                                0x1
#define _CWG3STR_STRC_MASK                                  0x4
#define _CWG3STR_STRD_POSN                                  0x3
#define _CWG3STR_STRD_POSITION                              0x3
#define _CWG3STR_STRD_SIZE                                  0x1
#define _CWG3STR_STRD_LENGTH                                0x1
#define _CWG3STR_STRD_MASK                                  0x8
#define _CWG3STR_OVRA_POSN                                  0x4
#define _CWG3STR_OVRA_POSITION                              0x4
#define _CWG3STR_OVRA_SIZE                                  0x1
#define _CWG3STR_OVRA_LENGTH                                0x1
#define _CWG3STR_OVRA_MASK                                  0x10
#define _CWG3STR_OVRB_POSN                                  0x5
#define _CWG3STR_OVRB_POSITION                              0x5
#define _CWG3STR_OVRB_SIZE                                  0x1
#define _CWG3STR_OVRB_LENGTH                                0x1
#define _CWG3STR_OVRB_MASK                                  0x20
#define _CWG3STR_OVRC_POSN                                  0x6
#define _CWG3STR_OVRC_POSITION                              0x6
#define _CWG3STR_OVRC_SIZE                                  0x1
#define _CWG3STR_OVRC_LENGTH                                0x1
#define _CWG3STR_OVRC_MASK                                  0x40
#define _CWG3STR_OVRD_POSN                                  0x7
#define _CWG3STR_OVRD_POSITION                              0x7
#define _CWG3STR_OVRD_SIZE                                  0x1
#define _CWG3STR_OVRD_LENGTH                                0x1
#define _CWG3STR_OVRD_MASK                                  0x80
#define _CWG3STR_CWG3STRA_POSN                              0x0
#define _CWG3STR_CWG3STRA_POSITION                          0x0
#define _CWG3STR_CWG3STRA_SIZE                              0x1
#define _CWG3STR_CWG3STRA_LENGTH                            0x1
#define _CWG3STR_CWG3STRA_MASK                              0x1
#define _CWG3STR_CWG3STRB_POSN                              0x1
#define _CWG3STR_CWG3STRB_POSITION                          0x1
#define _CWG3STR_CWG3STRB_SIZE                              0x1
#define _CWG3STR_CWG3STRB_LENGTH                            0x1
#define _CWG3STR_CWG3STRB_MASK                              0x2
#define _CWG3STR_CWG3STRC_POSN                              0x2
#define _CWG3STR_CWG3STRC_POSITION                          0x2
#define _CWG3STR_CWG3STRC_SIZE                              0x1
#define _CWG3STR_CWG3STRC_LENGTH                            0x1
#define _CWG3STR_CWG3STRC_MASK                              0x4
#define _CWG3STR_CWG3STRD_POSN                              0x3
#define _CWG3STR_CWG3STRD_POSITION                          0x3
#define _CWG3STR_CWG3STRD_SIZE                              0x1
#define _CWG3STR_CWG3STRD_LENGTH                            0x1
#define _CWG3STR_CWG3STRD_MASK                              0x8
#define _CWG3STR_CWG3OVRA_POSN                              0x4
#define _CWG3STR_CWG3OVRA_POSITION                          0x4
#define _CWG3STR_CWG3OVRA_SIZE                              0x1
#define _CWG3STR_CWG3OVRA_LENGTH                            0x1
#define _CWG3STR_CWG3OVRA_MASK                              0x10
#define _CWG3STR_CWG3OVRB_POSN                              0x5
#define _CWG3STR_CWG3OVRB_POSITION                          0x5
#define _CWG3STR_CWG3OVRB_SIZE                              0x1
#define _CWG3STR_CWG3OVRB_LENGTH                            0x1
#define _CWG3STR_CWG3OVRB_MASK                              0x20
#define _CWG3STR_CWG3OVRC_POSN                              0x6
#define _CWG3STR_CWG3OVRC_POSITION                          0x6
#define _CWG3STR_CWG3OVRC_SIZE                              0x1
#define _CWG3STR_CWG3OVRC_LENGTH                            0x1
#define _CWG3STR_CWG3OVRC_MASK                              0x40
#define _CWG3STR_CWG3OVRD_POSN                              0x7
#define _CWG3STR_CWG3OVRD_POSITION                          0x7
#define _CWG3STR_CWG3OVRD_SIZE                              0x1
#define _CWG3STR_CWG3OVRD_LENGTH                            0x1
#define _CWG3STR_CWG3OVRD_MASK                              0x80

// Register: CWG2CLK
#define CWG2CLK CWG2CLK
extern volatile unsigned char           CWG2CLK             __at(0x3F49);
#ifndef _LIB_BUILD
asm("CWG2CLK equ 03F49h");
#endif
// aliases
extern volatile unsigned char           CWG2CLKCON          __at(0x3F49);
#ifndef _LIB_BUILD
asm("CWG2CLKCON equ 03F49h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CS                     :1;
    };
    struct {
        unsigned CWG2CS                 :1;
    };
} CWG2CLKbits_t;
extern volatile CWG2CLKbits_t CWG2CLKbits __at(0x3F49);
// bitfield macros
#define _CWG2CLK_CS_POSN                                    0x0
#define _CWG2CLK_CS_POSITION                                0x0
#define _CWG2CLK_CS_SIZE                                    0x1
#define _CWG2CLK_CS_LENGTH                                  0x1
#define _CWG2CLK_CS_MASK                                    0x1
#define _CWG2CLK_CWG2CS_POSN                                0x0
#define _CWG2CLK_CWG2CS_POSITION                            0x0
#define _CWG2CLK_CWG2CS_SIZE                                0x1
#define _CWG2CLK_CWG2CS_LENGTH                              0x1
#define _CWG2CLK_CWG2CS_MASK                                0x1
// alias bitfield definitions
typedef union {
    struct {
        unsigned CS                     :1;
    };
    struct {
        unsigned CWG2CS                 :1;
    };
} CWG2CLKCONbits_t;
extern volatile CWG2CLKCONbits_t CWG2CLKCONbits __at(0x3F49);
// bitfield macros
#define _CWG2CLKCON_CS_POSN                                 0x0
#define _CWG2CLKCON_CS_POSITION                             0x0
#define _CWG2CLKCON_CS_SIZE                                 0x1
#define _CWG2CLKCON_CS_LENGTH                               0x1
#define _CWG2CLKCON_CS_MASK                                 0x1
#define _CWG2CLKCON_CWG2CS_POSN                             0x0
#define _CWG2CLKCON_CWG2CS_POSITION                         0x0
#define _CWG2CLKCON_CWG2CS_SIZE                             0x1
#define _CWG2CLKCON_CWG2CS_LENGTH                           0x1
#define _CWG2CLKCON_CWG2CS_MASK                             0x1

// Register: CWG2ISM
#define CWG2ISM CWG2ISM
extern volatile unsigned char           CWG2ISM             __at(0x3F4A);
#ifndef _LIB_BUILD
asm("CWG2ISM equ 03F4Ah");
#endif
// aliases
extern volatile unsigned char           CWG2DAT             __at(0x3F4A);
#ifndef _LIB_BUILD
asm("CWG2DAT equ 03F4Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ISM                    :8;
    };
    struct {
        unsigned CWG2ISM                :8;
    };
    struct {
        unsigned ISM0                   :1;
        unsigned ISM1                   :1;
        unsigned ISM2                   :1;
        unsigned ISM3                   :1;
        unsigned ISM4                   :1;
    };
} CWG2ISMbits_t;
extern volatile CWG2ISMbits_t CWG2ISMbits __at(0x3F4A);
// bitfield macros
#define _CWG2ISM_ISM_POSN                                   0x0
#define _CWG2ISM_ISM_POSITION                               0x0
#define _CWG2ISM_ISM_SIZE                                   0x8
#define _CWG2ISM_ISM_LENGTH                                 0x8
#define _CWG2ISM_ISM_MASK                                   0xFF
#define _CWG2ISM_CWG2ISM_POSN                               0x0
#define _CWG2ISM_CWG2ISM_POSITION                           0x0
#define _CWG2ISM_CWG2ISM_SIZE                               0x8
#define _CWG2ISM_CWG2ISM_LENGTH                             0x8
#define _CWG2ISM_CWG2ISM_MASK                               0xFF
#define _CWG2ISM_ISM0_POSN                                  0x0
#define _CWG2ISM_ISM0_POSITION                              0x0
#define _CWG2ISM_ISM0_SIZE                                  0x1
#define _CWG2ISM_ISM0_LENGTH                                0x1
#define _CWG2ISM_ISM0_MASK                                  0x1
#define _CWG2ISM_ISM1_POSN                                  0x1
#define _CWG2ISM_ISM1_POSITION                              0x1
#define _CWG2ISM_ISM1_SIZE                                  0x1
#define _CWG2ISM_ISM1_LENGTH                                0x1
#define _CWG2ISM_ISM1_MASK                                  0x2
#define _CWG2ISM_ISM2_POSN                                  0x2
#define _CWG2ISM_ISM2_POSITION                              0x2
#define _CWG2ISM_ISM2_SIZE                                  0x1
#define _CWG2ISM_ISM2_LENGTH                                0x1
#define _CWG2ISM_ISM2_MASK                                  0x4
#define _CWG2ISM_ISM3_POSN                                  0x3
#define _CWG2ISM_ISM3_POSITION                              0x3
#define _CWG2ISM_ISM3_SIZE                                  0x1
#define _CWG2ISM_ISM3_LENGTH                                0x1
#define _CWG2ISM_ISM3_MASK                                  0x8
#define _CWG2ISM_ISM4_POSN                                  0x4
#define _CWG2ISM_ISM4_POSITION                              0x4
#define _CWG2ISM_ISM4_SIZE                                  0x1
#define _CWG2ISM_ISM4_LENGTH                                0x1
#define _CWG2ISM_ISM4_MASK                                  0x10
// alias bitfield definitions
typedef union {
    struct {
        unsigned ISM                    :8;
    };
    struct {
        unsigned CWG2ISM                :8;
    };
    struct {
        unsigned ISM0                   :1;
        unsigned ISM1                   :1;
        unsigned ISM2                   :1;
        unsigned ISM3                   :1;
        unsigned ISM4                   :1;
    };
} CWG2DATbits_t;
extern volatile CWG2DATbits_t CWG2DATbits __at(0x3F4A);
// bitfield macros
#define _CWG2DAT_ISM_POSN                                   0x0
#define _CWG2DAT_ISM_POSITION                               0x0
#define _CWG2DAT_ISM_SIZE                                   0x8
#define _CWG2DAT_ISM_LENGTH                                 0x8
#define _CWG2DAT_ISM_MASK                                   0xFF
#define _CWG2DAT_CWG2ISM_POSN                               0x0
#define _CWG2DAT_CWG2ISM_POSITION                           0x0
#define _CWG2DAT_CWG2ISM_SIZE                               0x8
#define _CWG2DAT_CWG2ISM_LENGTH                             0x8
#define _CWG2DAT_CWG2ISM_MASK                               0xFF
#define _CWG2DAT_ISM0_POSN                                  0x0
#define _CWG2DAT_ISM0_POSITION                              0x0
#define _CWG2DAT_ISM0_SIZE                                  0x1
#define _CWG2DAT_ISM0_LENGTH                                0x1
#define _CWG2DAT_ISM0_MASK                                  0x1
#define _CWG2DAT_ISM1_POSN                                  0x1
#define _CWG2DAT_ISM1_POSITION                              0x1
#define _CWG2DAT_ISM1_SIZE                                  0x1
#define _CWG2DAT_ISM1_LENGTH                                0x1
#define _CWG2DAT_ISM1_MASK                                  0x2
#define _CWG2DAT_ISM2_POSN                                  0x2
#define _CWG2DAT_ISM2_POSITION                              0x2
#define _CWG2DAT_ISM2_SIZE                                  0x1
#define _CWG2DAT_ISM2_LENGTH                                0x1
#define _CWG2DAT_ISM2_MASK                                  0x4
#define _CWG2DAT_ISM3_POSN                                  0x3
#define _CWG2DAT_ISM3_POSITION                              0x3
#define _CWG2DAT_ISM3_SIZE                                  0x1
#define _CWG2DAT_ISM3_LENGTH                                0x1
#define _CWG2DAT_ISM3_MASK                                  0x8
#define _CWG2DAT_ISM4_POSN                                  0x4
#define _CWG2DAT_ISM4_POSITION                              0x4
#define _CWG2DAT_ISM4_SIZE                                  0x1
#define _CWG2DAT_ISM4_LENGTH                                0x1
#define _CWG2DAT_ISM4_MASK                                  0x10

// Register: CWG2DBR
#define CWG2DBR CWG2DBR
extern volatile unsigned char           CWG2DBR             __at(0x3F4B);
#ifndef _LIB_BUILD
asm("CWG2DBR equ 03F4Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DBR                    :8;
    };
    struct {
        unsigned DBR0                   :1;
        unsigned DBR1                   :1;
        unsigned DBR2                   :1;
        unsigned DBR3                   :1;
        unsigned DBR4                   :1;
        unsigned DBR5                   :1;
    };
    struct {
        unsigned CWG2DBR                :8;
    };
    struct {
        unsigned CWG2DBR0               :1;
        unsigned CWG2DBR1               :1;
        unsigned CWG2DBR2               :1;
        unsigned CWG2DBR3               :1;
        unsigned CWG2DBR4               :1;
        unsigned CWG2DBR5               :1;
    };
} CWG2DBRbits_t;
extern volatile CWG2DBRbits_t CWG2DBRbits __at(0x3F4B);
// bitfield macros
#define _CWG2DBR_DBR_POSN                                   0x0
#define _CWG2DBR_DBR_POSITION                               0x0
#define _CWG2DBR_DBR_SIZE                                   0x8
#define _CWG2DBR_DBR_LENGTH                                 0x8
#define _CWG2DBR_DBR_MASK                                   0xFF
#define _CWG2DBR_DBR0_POSN                                  0x0
#define _CWG2DBR_DBR0_POSITION                              0x0
#define _CWG2DBR_DBR0_SIZE                                  0x1
#define _CWG2DBR_DBR0_LENGTH                                0x1
#define _CWG2DBR_DBR0_MASK                                  0x1
#define _CWG2DBR_DBR1_POSN                                  0x1
#define _CWG2DBR_DBR1_POSITION                              0x1
#define _CWG2DBR_DBR1_SIZE                                  0x1
#define _CWG2DBR_DBR1_LENGTH                                0x1
#define _CWG2DBR_DBR1_MASK                                  0x2
#define _CWG2DBR_DBR2_POSN                                  0x2
#define _CWG2DBR_DBR2_POSITION                              0x2
#define _CWG2DBR_DBR2_SIZE                                  0x1
#define _CWG2DBR_DBR2_LENGTH                                0x1
#define _CWG2DBR_DBR2_MASK                                  0x4
#define _CWG2DBR_DBR3_POSN                                  0x3
#define _CWG2DBR_DBR3_POSITION                              0x3
#define _CWG2DBR_DBR3_SIZE                                  0x1
#define _CWG2DBR_DBR3_LENGTH                                0x1
#define _CWG2DBR_DBR3_MASK                                  0x8
#define _CWG2DBR_DBR4_POSN                                  0x4
#define _CWG2DBR_DBR4_POSITION                              0x4
#define _CWG2DBR_DBR4_SIZE                                  0x1
#define _CWG2DBR_DBR4_LENGTH                                0x1
#define _CWG2DBR_DBR4_MASK                                  0x10
#define _CWG2DBR_DBR5_POSN                                  0x5
#define _CWG2DBR_DBR5_POSITION                              0x5
#define _CWG2DBR_DBR5_SIZE                                  0x1
#define _CWG2DBR_DBR5_LENGTH                                0x1
#define _CWG2DBR_DBR5_MASK                                  0x20
#define _CWG2DBR_CWG2DBR_POSN                               0x0
#define _CWG2DBR_CWG2DBR_POSITION                           0x0
#define _CWG2DBR_CWG2DBR_SIZE                               0x8
#define _CWG2DBR_CWG2DBR_LENGTH                             0x8
#define _CWG2DBR_CWG2DBR_MASK                               0xFF
#define _CWG2DBR_CWG2DBR0_POSN                              0x0
#define _CWG2DBR_CWG2DBR0_POSITION                          0x0
#define _CWG2DBR_CWG2DBR0_SIZE                              0x1
#define _CWG2DBR_CWG2DBR0_LENGTH                            0x1
#define _CWG2DBR_CWG2DBR0_MASK                              0x1
#define _CWG2DBR_CWG2DBR1_POSN                              0x1
#define _CWG2DBR_CWG2DBR1_POSITION                          0x1
#define _CWG2DBR_CWG2DBR1_SIZE                              0x1
#define _CWG2DBR_CWG2DBR1_LENGTH                            0x1
#define _CWG2DBR_CWG2DBR1_MASK                              0x2
#define _CWG2DBR_CWG2DBR2_POSN                              0x2
#define _CWG2DBR_CWG2DBR2_POSITION                          0x2
#define _CWG2DBR_CWG2DBR2_SIZE                              0x1
#define _CWG2DBR_CWG2DBR2_LENGTH                            0x1
#define _CWG2DBR_CWG2DBR2_MASK                              0x4
#define _CWG2DBR_CWG2DBR3_POSN                              0x3
#define _CWG2DBR_CWG2DBR3_POSITION                          0x3
#define _CWG2DBR_CWG2DBR3_SIZE                              0x1
#define _CWG2DBR_CWG2DBR3_LENGTH                            0x1
#define _CWG2DBR_CWG2DBR3_MASK                              0x8
#define _CWG2DBR_CWG2DBR4_POSN                              0x4
#define _CWG2DBR_CWG2DBR4_POSITION                          0x4
#define _CWG2DBR_CWG2DBR4_SIZE                              0x1
#define _CWG2DBR_CWG2DBR4_LENGTH                            0x1
#define _CWG2DBR_CWG2DBR4_MASK                              0x10
#define _CWG2DBR_CWG2DBR5_POSN                              0x5
#define _CWG2DBR_CWG2DBR5_POSITION                          0x5
#define _CWG2DBR_CWG2DBR5_SIZE                              0x1
#define _CWG2DBR_CWG2DBR5_LENGTH                            0x1
#define _CWG2DBR_CWG2DBR5_MASK                              0x20

// Register: CWG2DBF
#define CWG2DBF CWG2DBF
extern volatile unsigned char           CWG2DBF             __at(0x3F4C);
#ifndef _LIB_BUILD
asm("CWG2DBF equ 03F4Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DBF                    :8;
    };
    struct {
        unsigned DBF0                   :1;
        unsigned DBF1                   :1;
        unsigned DBF2                   :1;
        unsigned DBF3                   :1;
        unsigned DBF4                   :1;
        unsigned DBF5                   :1;
    };
    struct {
        unsigned CWG2DBF                :8;
    };
    struct {
        unsigned CWG2DBF0               :1;
        unsigned CWG2DBF1               :1;
        unsigned CWG2DBF2               :1;
        unsigned CWG2DBF3               :1;
        unsigned CWG2DBF4               :1;
        unsigned CWG2DBF5               :1;
    };
} CWG2DBFbits_t;
extern volatile CWG2DBFbits_t CWG2DBFbits __at(0x3F4C);
// bitfield macros
#define _CWG2DBF_DBF_POSN                                   0x0
#define _CWG2DBF_DBF_POSITION                               0x0
#define _CWG2DBF_DBF_SIZE                                   0x8
#define _CWG2DBF_DBF_LENGTH                                 0x8
#define _CWG2DBF_DBF_MASK                                   0xFF
#define _CWG2DBF_DBF0_POSN                                  0x0
#define _CWG2DBF_DBF0_POSITION                              0x0
#define _CWG2DBF_DBF0_SIZE                                  0x1
#define _CWG2DBF_DBF0_LENGTH                                0x1
#define _CWG2DBF_DBF0_MASK                                  0x1
#define _CWG2DBF_DBF1_POSN                                  0x1
#define _CWG2DBF_DBF1_POSITION                              0x1
#define _CWG2DBF_DBF1_SIZE                                  0x1
#define _CWG2DBF_DBF1_LENGTH                                0x1
#define _CWG2DBF_DBF1_MASK                                  0x2
#define _CWG2DBF_DBF2_POSN                                  0x2
#define _CWG2DBF_DBF2_POSITION                              0x2
#define _CWG2DBF_DBF2_SIZE                                  0x1
#define _CWG2DBF_DBF2_LENGTH                                0x1
#define _CWG2DBF_DBF2_MASK                                  0x4
#define _CWG2DBF_DBF3_POSN                                  0x3
#define _CWG2DBF_DBF3_POSITION                              0x3
#define _CWG2DBF_DBF3_SIZE                                  0x1
#define _CWG2DBF_DBF3_LENGTH                                0x1
#define _CWG2DBF_DBF3_MASK                                  0x8
#define _CWG2DBF_DBF4_POSN                                  0x4
#define _CWG2DBF_DBF4_POSITION                              0x4
#define _CWG2DBF_DBF4_SIZE                                  0x1
#define _CWG2DBF_DBF4_LENGTH                                0x1
#define _CWG2DBF_DBF4_MASK                                  0x10
#define _CWG2DBF_DBF5_POSN                                  0x5
#define _CWG2DBF_DBF5_POSITION                              0x5
#define _CWG2DBF_DBF5_SIZE                                  0x1
#define _CWG2DBF_DBF5_LENGTH                                0x1
#define _CWG2DBF_DBF5_MASK                                  0x20
#define _CWG2DBF_CWG2DBF_POSN                               0x0
#define _CWG2DBF_CWG2DBF_POSITION                           0x0
#define _CWG2DBF_CWG2DBF_SIZE                               0x8
#define _CWG2DBF_CWG2DBF_LENGTH                             0x8
#define _CWG2DBF_CWG2DBF_MASK                               0xFF
#define _CWG2DBF_CWG2DBF0_POSN                              0x0
#define _CWG2DBF_CWG2DBF0_POSITION                          0x0
#define _CWG2DBF_CWG2DBF0_SIZE                              0x1
#define _CWG2DBF_CWG2DBF0_LENGTH                            0x1
#define _CWG2DBF_CWG2DBF0_MASK                              0x1
#define _CWG2DBF_CWG2DBF1_POSN                              0x1
#define _CWG2DBF_CWG2DBF1_POSITION                          0x1
#define _CWG2DBF_CWG2DBF1_SIZE                              0x1
#define _CWG2DBF_CWG2DBF1_LENGTH                            0x1
#define _CWG2DBF_CWG2DBF1_MASK                              0x2
#define _CWG2DBF_CWG2DBF2_POSN                              0x2
#define _CWG2DBF_CWG2DBF2_POSITION                          0x2
#define _CWG2DBF_CWG2DBF2_SIZE                              0x1
#define _CWG2DBF_CWG2DBF2_LENGTH                            0x1
#define _CWG2DBF_CWG2DBF2_MASK                              0x4
#define _CWG2DBF_CWG2DBF3_POSN                              0x3
#define _CWG2DBF_CWG2DBF3_POSITION                          0x3
#define _CWG2DBF_CWG2DBF3_SIZE                              0x1
#define _CWG2DBF_CWG2DBF3_LENGTH                            0x1
#define _CWG2DBF_CWG2DBF3_MASK                              0x8
#define _CWG2DBF_CWG2DBF4_POSN                              0x4
#define _CWG2DBF_CWG2DBF4_POSITION                          0x4
#define _CWG2DBF_CWG2DBF4_SIZE                              0x1
#define _CWG2DBF_CWG2DBF4_LENGTH                            0x1
#define _CWG2DBF_CWG2DBF4_MASK                              0x10
#define _CWG2DBF_CWG2DBF5_POSN                              0x5
#define _CWG2DBF_CWG2DBF5_POSITION                          0x5
#define _CWG2DBF_CWG2DBF5_SIZE                              0x1
#define _CWG2DBF_CWG2DBF5_LENGTH                            0x1
#define _CWG2DBF_CWG2DBF5_MASK                              0x20

// Register: CWG2CON0
#define CWG2CON0 CWG2CON0
extern volatile unsigned char           CWG2CON0            __at(0x3F4D);
#ifndef _LIB_BUILD
asm("CWG2CON0 equ 03F4Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :3;
        unsigned                        :3;
        unsigned LD                     :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned                        :4;
        unsigned G2EN                   :1;
    };
    struct {
        unsigned CWG2MODE               :3;
        unsigned                        :3;
        unsigned CWG2LD                 :1;
        unsigned CWG2EN                 :1;
    };
    struct {
        unsigned CWG2MODE0              :1;
        unsigned CWG2MODE1              :1;
        unsigned CWG2MODE2              :1;
    };
} CWG2CON0bits_t;
extern volatile CWG2CON0bits_t CWG2CON0bits __at(0x3F4D);
// bitfield macros
#define _CWG2CON0_MODE_POSN                                 0x0
#define _CWG2CON0_MODE_POSITION                             0x0
#define _CWG2CON0_MODE_SIZE                                 0x3
#define _CWG2CON0_MODE_LENGTH                               0x3
#define _CWG2CON0_MODE_MASK                                 0x7
#define _CWG2CON0_LD_POSN                                   0x6
#define _CWG2CON0_LD_POSITION                               0x6
#define _CWG2CON0_LD_SIZE                                   0x1
#define _CWG2CON0_LD_LENGTH                                 0x1
#define _CWG2CON0_LD_MASK                                   0x40
#define _CWG2CON0_EN_POSN                                   0x7
#define _CWG2CON0_EN_POSITION                               0x7
#define _CWG2CON0_EN_SIZE                                   0x1
#define _CWG2CON0_EN_LENGTH                                 0x1
#define _CWG2CON0_EN_MASK                                   0x80
#define _CWG2CON0_MODE0_POSN                                0x0
#define _CWG2CON0_MODE0_POSITION                            0x0
#define _CWG2CON0_MODE0_SIZE                                0x1
#define _CWG2CON0_MODE0_LENGTH                              0x1
#define _CWG2CON0_MODE0_MASK                                0x1
#define _CWG2CON0_MODE1_POSN                                0x1
#define _CWG2CON0_MODE1_POSITION                            0x1
#define _CWG2CON0_MODE1_SIZE                                0x1
#define _CWG2CON0_MODE1_LENGTH                              0x1
#define _CWG2CON0_MODE1_MASK                                0x2
#define _CWG2CON0_MODE2_POSN                                0x2
#define _CWG2CON0_MODE2_POSITION                            0x2
#define _CWG2CON0_MODE2_SIZE                                0x1
#define _CWG2CON0_MODE2_LENGTH                              0x1
#define _CWG2CON0_MODE2_MASK                                0x4
#define _CWG2CON0_G2EN_POSN                                 0x7
#define _CWG2CON0_G2EN_POSITION                             0x7
#define _CWG2CON0_G2EN_SIZE                                 0x1
#define _CWG2CON0_G2EN_LENGTH                               0x1
#define _CWG2CON0_G2EN_MASK                                 0x80
#define _CWG2CON0_CWG2MODE_POSN                             0x0
#define _CWG2CON0_CWG2MODE_POSITION                         0x0
#define _CWG2CON0_CWG2MODE_SIZE                             0x3
#define _CWG2CON0_CWG2MODE_LENGTH                           0x3
#define _CWG2CON0_CWG2MODE_MASK                             0x7
#define _CWG2CON0_CWG2LD_POSN                               0x6
#define _CWG2CON0_CWG2LD_POSITION                           0x6
#define _CWG2CON0_CWG2LD_SIZE                               0x1
#define _CWG2CON0_CWG2LD_LENGTH                             0x1
#define _CWG2CON0_CWG2LD_MASK                               0x40
#define _CWG2CON0_CWG2EN_POSN                               0x7
#define _CWG2CON0_CWG2EN_POSITION                           0x7
#define _CWG2CON0_CWG2EN_SIZE                               0x1
#define _CWG2CON0_CWG2EN_LENGTH                             0x1
#define _CWG2CON0_CWG2EN_MASK                               0x80
#define _CWG2CON0_CWG2MODE0_POSN                            0x0
#define _CWG2CON0_CWG2MODE0_POSITION                        0x0
#define _CWG2CON0_CWG2MODE0_SIZE                            0x1
#define _CWG2CON0_CWG2MODE0_LENGTH                          0x1
#define _CWG2CON0_CWG2MODE0_MASK                            0x1
#define _CWG2CON0_CWG2MODE1_POSN                            0x1
#define _CWG2CON0_CWG2MODE1_POSITION                        0x1
#define _CWG2CON0_CWG2MODE1_SIZE                            0x1
#define _CWG2CON0_CWG2MODE1_LENGTH                          0x1
#define _CWG2CON0_CWG2MODE1_MASK                            0x2
#define _CWG2CON0_CWG2MODE2_POSN                            0x2
#define _CWG2CON0_CWG2MODE2_POSITION                        0x2
#define _CWG2CON0_CWG2MODE2_SIZE                            0x1
#define _CWG2CON0_CWG2MODE2_LENGTH                          0x1
#define _CWG2CON0_CWG2MODE2_MASK                            0x4

// Register: CWG2CON1
#define CWG2CON1 CWG2CON1
extern volatile unsigned char           CWG2CON1            __at(0x3F4E);
#ifndef _LIB_BUILD
asm("CWG2CON1 equ 03F4Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned POLA                   :1;
        unsigned POLB                   :1;
        unsigned POLC                   :1;
        unsigned POLD                   :1;
        unsigned                        :1;
        unsigned IN                     :1;
    };
    struct {
        unsigned CWG2POLA               :1;
        unsigned CWG2POLB               :1;
        unsigned CWG2POLC               :1;
        unsigned CWG2POLD               :1;
        unsigned                        :1;
        unsigned CWG2IN                 :1;
    };
} CWG2CON1bits_t;
extern volatile CWG2CON1bits_t CWG2CON1bits __at(0x3F4E);
// bitfield macros
#define _CWG2CON1_POLA_POSN                                 0x0
#define _CWG2CON1_POLA_POSITION                             0x0
#define _CWG2CON1_POLA_SIZE                                 0x1
#define _CWG2CON1_POLA_LENGTH                               0x1
#define _CWG2CON1_POLA_MASK                                 0x1
#define _CWG2CON1_POLB_POSN                                 0x1
#define _CWG2CON1_POLB_POSITION                             0x1
#define _CWG2CON1_POLB_SIZE                                 0x1
#define _CWG2CON1_POLB_LENGTH                               0x1
#define _CWG2CON1_POLB_MASK                                 0x2
#define _CWG2CON1_POLC_POSN                                 0x2
#define _CWG2CON1_POLC_POSITION                             0x2
#define _CWG2CON1_POLC_SIZE                                 0x1
#define _CWG2CON1_POLC_LENGTH                               0x1
#define _CWG2CON1_POLC_MASK                                 0x4
#define _CWG2CON1_POLD_POSN                                 0x3
#define _CWG2CON1_POLD_POSITION                             0x3
#define _CWG2CON1_POLD_SIZE                                 0x1
#define _CWG2CON1_POLD_LENGTH                               0x1
#define _CWG2CON1_POLD_MASK                                 0x8
#define _CWG2CON1_IN_POSN                                   0x5
#define _CWG2CON1_IN_POSITION                               0x5
#define _CWG2CON1_IN_SIZE                                   0x1
#define _CWG2CON1_IN_LENGTH                                 0x1
#define _CWG2CON1_IN_MASK                                   0x20
#define _CWG2CON1_CWG2POLA_POSN                             0x0
#define _CWG2CON1_CWG2POLA_POSITION                         0x0
#define _CWG2CON1_CWG2POLA_SIZE                             0x1
#define _CWG2CON1_CWG2POLA_LENGTH                           0x1
#define _CWG2CON1_CWG2POLA_MASK                             0x1
#define _CWG2CON1_CWG2POLB_POSN                             0x1
#define _CWG2CON1_CWG2POLB_POSITION                         0x1
#define _CWG2CON1_CWG2POLB_SIZE                             0x1
#define _CWG2CON1_CWG2POLB_LENGTH                           0x1
#define _CWG2CON1_CWG2POLB_MASK                             0x2
#define _CWG2CON1_CWG2POLC_POSN                             0x2
#define _CWG2CON1_CWG2POLC_POSITION                         0x2
#define _CWG2CON1_CWG2POLC_SIZE                             0x1
#define _CWG2CON1_CWG2POLC_LENGTH                           0x1
#define _CWG2CON1_CWG2POLC_MASK                             0x4
#define _CWG2CON1_CWG2POLD_POSN                             0x3
#define _CWG2CON1_CWG2POLD_POSITION                         0x3
#define _CWG2CON1_CWG2POLD_SIZE                             0x1
#define _CWG2CON1_CWG2POLD_LENGTH                           0x1
#define _CWG2CON1_CWG2POLD_MASK                             0x8
#define _CWG2CON1_CWG2IN_POSN                               0x5
#define _CWG2CON1_CWG2IN_POSITION                           0x5
#define _CWG2CON1_CWG2IN_SIZE                               0x1
#define _CWG2CON1_CWG2IN_LENGTH                             0x1
#define _CWG2CON1_CWG2IN_MASK                               0x20

// Register: CWG2AS0
#define CWG2AS0 CWG2AS0
extern volatile unsigned char           CWG2AS0             __at(0x3F4F);
#ifndef _LIB_BUILD
asm("CWG2AS0 equ 03F4Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned LSAC                   :2;
        unsigned LSDBD                  :2;
        unsigned REN                    :1;
        unsigned SHUTDOWN               :1;
    };
    struct {
        unsigned                        :2;
        unsigned LSAC0                  :1;
        unsigned LSCA1                  :1;
        unsigned LSDB0                  :1;
        unsigned LSDB1                  :1;
    };
    struct {
        unsigned                        :2;
        unsigned CWG2LSAC0              :1;
        unsigned CWG2LSAC1              :1;
        unsigned CWG2LSDB0              :1;
        unsigned CWG2LSDB1              :1;
    };
    struct {
        unsigned                        :2;
        unsigned CWG2LSAC               :2;
        unsigned CWG2LSDB               :2;
    };
    struct {
        unsigned                        :4;
        unsigned LSBD                   :2;
    };
    struct {
        unsigned                        :3;
        unsigned LSAC1                  :1;
        unsigned LSBD0                  :1;
        unsigned LSBD1                  :1;
    };
    struct {
        unsigned                        :4;
        unsigned CWG2LSBD0              :1;
        unsigned CWG2LSBD1              :1;
    };
    struct {
        unsigned                        :4;
        unsigned CWG2LSBD               :2;
    };
} CWG2AS0bits_t;
extern volatile CWG2AS0bits_t CWG2AS0bits __at(0x3F4F);
// bitfield macros
#define _CWG2AS0_LSAC_POSN                                  0x2
#define _CWG2AS0_LSAC_POSITION                              0x2
#define _CWG2AS0_LSAC_SIZE                                  0x2
#define _CWG2AS0_LSAC_LENGTH                                0x2
#define _CWG2AS0_LSAC_MASK                                  0xC
#define _CWG2AS0_LSDBD_POSN                                 0x4
#define _CWG2AS0_LSDBD_POSITION                             0x4
#define _CWG2AS0_LSDBD_SIZE                                 0x2
#define _CWG2AS0_LSDBD_LENGTH                               0x2
#define _CWG2AS0_LSDBD_MASK                                 0x30
#define _CWG2AS0_REN_POSN                                   0x6
#define _CWG2AS0_REN_POSITION                               0x6
#define _CWG2AS0_REN_SIZE                                   0x1
#define _CWG2AS0_REN_LENGTH                                 0x1
#define _CWG2AS0_REN_MASK                                   0x40
#define _CWG2AS0_SHUTDOWN_POSN                              0x7
#define _CWG2AS0_SHUTDOWN_POSITION                          0x7
#define _CWG2AS0_SHUTDOWN_SIZE                              0x1
#define _CWG2AS0_SHUTDOWN_LENGTH                            0x1
#define _CWG2AS0_SHUTDOWN_MASK                              0x80
#define _CWG2AS0_LSAC0_POSN                                 0x2
#define _CWG2AS0_LSAC0_POSITION                             0x2
#define _CWG2AS0_LSAC0_SIZE                                 0x1
#define _CWG2AS0_LSAC0_LENGTH                               0x1
#define _CWG2AS0_LSAC0_MASK                                 0x4
#define _CWG2AS0_LSCA1_POSN                                 0x3
#define _CWG2AS0_LSCA1_POSITION                             0x3
#define _CWG2AS0_LSCA1_SIZE                                 0x1
#define _CWG2AS0_LSCA1_LENGTH                               0x1
#define _CWG2AS0_LSCA1_MASK                                 0x8
#define _CWG2AS0_LSDB0_POSN                                 0x4
#define _CWG2AS0_LSDB0_POSITION                             0x4
#define _CWG2AS0_LSDB0_SIZE                                 0x1
#define _CWG2AS0_LSDB0_LENGTH                               0x1
#define _CWG2AS0_LSDB0_MASK                                 0x10
#define _CWG2AS0_LSDB1_POSN                                 0x5
#define _CWG2AS0_LSDB1_POSITION                             0x5
#define _CWG2AS0_LSDB1_SIZE                                 0x1
#define _CWG2AS0_LSDB1_LENGTH                               0x1
#define _CWG2AS0_LSDB1_MASK                                 0x20
#define _CWG2AS0_CWG2LSAC0_POSN                             0x2
#define _CWG2AS0_CWG2LSAC0_POSITION                         0x2
#define _CWG2AS0_CWG2LSAC0_SIZE                             0x1
#define _CWG2AS0_CWG2LSAC0_LENGTH                           0x1
#define _CWG2AS0_CWG2LSAC0_MASK                             0x4
#define _CWG2AS0_CWG2LSAC1_POSN                             0x3
#define _CWG2AS0_CWG2LSAC1_POSITION                         0x3
#define _CWG2AS0_CWG2LSAC1_SIZE                             0x1
#define _CWG2AS0_CWG2LSAC1_LENGTH                           0x1
#define _CWG2AS0_CWG2LSAC1_MASK                             0x8
#define _CWG2AS0_CWG2LSDB0_POSN                             0x4
#define _CWG2AS0_CWG2LSDB0_POSITION                         0x4
#define _CWG2AS0_CWG2LSDB0_SIZE                             0x1
#define _CWG2AS0_CWG2LSDB0_LENGTH                           0x1
#define _CWG2AS0_CWG2LSDB0_MASK                             0x10
#define _CWG2AS0_CWG2LSDB1_POSN                             0x5
#define _CWG2AS0_CWG2LSDB1_POSITION                         0x5
#define _CWG2AS0_CWG2LSDB1_SIZE                             0x1
#define _CWG2AS0_CWG2LSDB1_LENGTH                           0x1
#define _CWG2AS0_CWG2LSDB1_MASK                             0x20
#define _CWG2AS0_CWG2LSAC_POSN                              0x2
#define _CWG2AS0_CWG2LSAC_POSITION                          0x2
#define _CWG2AS0_CWG2LSAC_SIZE                              0x2
#define _CWG2AS0_CWG2LSAC_LENGTH                            0x2
#define _CWG2AS0_CWG2LSAC_MASK                              0xC
#define _CWG2AS0_CWG2LSDB_POSN                              0x4
#define _CWG2AS0_CWG2LSDB_POSITION                          0x4
#define _CWG2AS0_CWG2LSDB_SIZE                              0x2
#define _CWG2AS0_CWG2LSDB_LENGTH                            0x2
#define _CWG2AS0_CWG2LSDB_MASK                              0x30
#define _CWG2AS0_LSBD_POSN                                  0x4
#define _CWG2AS0_LSBD_POSITION                              0x4
#define _CWG2AS0_LSBD_SIZE                                  0x2
#define _CWG2AS0_LSBD_LENGTH                                0x2
#define _CWG2AS0_LSBD_MASK                                  0x30
#define _CWG2AS0_LSAC1_POSN                                 0x3
#define _CWG2AS0_LSAC1_POSITION                             0x3
#define _CWG2AS0_LSAC1_SIZE                                 0x1
#define _CWG2AS0_LSAC1_LENGTH                               0x1
#define _CWG2AS0_LSAC1_MASK                                 0x8
#define _CWG2AS0_LSBD0_POSN                                 0x4
#define _CWG2AS0_LSBD0_POSITION                             0x4
#define _CWG2AS0_LSBD0_SIZE                                 0x1
#define _CWG2AS0_LSBD0_LENGTH                               0x1
#define _CWG2AS0_LSBD0_MASK                                 0x10
#define _CWG2AS0_LSBD1_POSN                                 0x5
#define _CWG2AS0_LSBD1_POSITION                             0x5
#define _CWG2AS0_LSBD1_SIZE                                 0x1
#define _CWG2AS0_LSBD1_LENGTH                               0x1
#define _CWG2AS0_LSBD1_MASK                                 0x20
#define _CWG2AS0_CWG2LSBD0_POSN                             0x4
#define _CWG2AS0_CWG2LSBD0_POSITION                         0x4
#define _CWG2AS0_CWG2LSBD0_SIZE                             0x1
#define _CWG2AS0_CWG2LSBD0_LENGTH                           0x1
#define _CWG2AS0_CWG2LSBD0_MASK                             0x10
#define _CWG2AS0_CWG2LSBD1_POSN                             0x5
#define _CWG2AS0_CWG2LSBD1_POSITION                         0x5
#define _CWG2AS0_CWG2LSBD1_SIZE                             0x1
#define _CWG2AS0_CWG2LSBD1_LENGTH                           0x1
#define _CWG2AS0_CWG2LSBD1_MASK                             0x20
#define _CWG2AS0_CWG2LSBD_POSN                              0x4
#define _CWG2AS0_CWG2LSBD_POSITION                          0x4
#define _CWG2AS0_CWG2LSBD_SIZE                              0x2
#define _CWG2AS0_CWG2LSBD_LENGTH                            0x2
#define _CWG2AS0_CWG2LSBD_MASK                              0x30

// Register: CWG2AS1
#define CWG2AS1 CWG2AS1
extern volatile unsigned char           CWG2AS1             __at(0x3F50);
#ifndef _LIB_BUILD
asm("CWG2AS1 equ 03F50h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned AS0E                   :1;
        unsigned AS1E                   :1;
        unsigned AS2E                   :1;
        unsigned AS3E                   :1;
        unsigned AS4E                   :1;
        unsigned AS5E                   :1;
        unsigned AS6E                   :1;
    };
} CWG2AS1bits_t;
extern volatile CWG2AS1bits_t CWG2AS1bits __at(0x3F50);
// bitfield macros
#define _CWG2AS1_AS0E_POSN                                  0x0
#define _CWG2AS1_AS0E_POSITION                              0x0
#define _CWG2AS1_AS0E_SIZE                                  0x1
#define _CWG2AS1_AS0E_LENGTH                                0x1
#define _CWG2AS1_AS0E_MASK                                  0x1
#define _CWG2AS1_AS1E_POSN                                  0x1
#define _CWG2AS1_AS1E_POSITION                              0x1
#define _CWG2AS1_AS1E_SIZE                                  0x1
#define _CWG2AS1_AS1E_LENGTH                                0x1
#define _CWG2AS1_AS1E_MASK                                  0x2
#define _CWG2AS1_AS2E_POSN                                  0x2
#define _CWG2AS1_AS2E_POSITION                              0x2
#define _CWG2AS1_AS2E_SIZE                                  0x1
#define _CWG2AS1_AS2E_LENGTH                                0x1
#define _CWG2AS1_AS2E_MASK                                  0x4
#define _CWG2AS1_AS3E_POSN                                  0x3
#define _CWG2AS1_AS3E_POSITION                              0x3
#define _CWG2AS1_AS3E_SIZE                                  0x1
#define _CWG2AS1_AS3E_LENGTH                                0x1
#define _CWG2AS1_AS3E_MASK                                  0x8
#define _CWG2AS1_AS4E_POSN                                  0x4
#define _CWG2AS1_AS4E_POSITION                              0x4
#define _CWG2AS1_AS4E_SIZE                                  0x1
#define _CWG2AS1_AS4E_LENGTH                                0x1
#define _CWG2AS1_AS4E_MASK                                  0x10
#define _CWG2AS1_AS5E_POSN                                  0x5
#define _CWG2AS1_AS5E_POSITION                              0x5
#define _CWG2AS1_AS5E_SIZE                                  0x1
#define _CWG2AS1_AS5E_LENGTH                                0x1
#define _CWG2AS1_AS5E_MASK                                  0x20
#define _CWG2AS1_AS6E_POSN                                  0x6
#define _CWG2AS1_AS6E_POSITION                              0x6
#define _CWG2AS1_AS6E_SIZE                                  0x1
#define _CWG2AS1_AS6E_LENGTH                                0x1
#define _CWG2AS1_AS6E_MASK                                  0x40

// Register: CWG2STR
#define CWG2STR CWG2STR
extern volatile unsigned char           CWG2STR             __at(0x3F51);
#ifndef _LIB_BUILD
asm("CWG2STR equ 03F51h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned STRA                   :1;
        unsigned STRB                   :1;
        unsigned STRC                   :1;
        unsigned STRD                   :1;
        unsigned OVRA                   :1;
        unsigned OVRB                   :1;
        unsigned OVRC                   :1;
        unsigned OVRD                   :1;
    };
    struct {
        unsigned CWG2STRA               :1;
        unsigned CWG2STRB               :1;
        unsigned CWG2STRC               :1;
        unsigned CWG2STRD               :1;
        unsigned CWG2OVRA               :1;
        unsigned CWG2OVRB               :1;
        unsigned CWG2OVRC               :1;
        unsigned CWG2OVRD               :1;
    };
} CWG2STRbits_t;
extern volatile CWG2STRbits_t CWG2STRbits __at(0x3F51);
// bitfield macros
#define _CWG2STR_STRA_POSN                                  0x0
#define _CWG2STR_STRA_POSITION                              0x0
#define _CWG2STR_STRA_SIZE                                  0x1
#define _CWG2STR_STRA_LENGTH                                0x1
#define _CWG2STR_STRA_MASK                                  0x1
#define _CWG2STR_STRB_POSN                                  0x1
#define _CWG2STR_STRB_POSITION                              0x1
#define _CWG2STR_STRB_SIZE                                  0x1
#define _CWG2STR_STRB_LENGTH                                0x1
#define _CWG2STR_STRB_MASK                                  0x2
#define _CWG2STR_STRC_POSN                                  0x2
#define _CWG2STR_STRC_POSITION                              0x2
#define _CWG2STR_STRC_SIZE                                  0x1
#define _CWG2STR_STRC_LENGTH                                0x1
#define _CWG2STR_STRC_MASK                                  0x4
#define _CWG2STR_STRD_POSN                                  0x3
#define _CWG2STR_STRD_POSITION                              0x3
#define _CWG2STR_STRD_SIZE                                  0x1
#define _CWG2STR_STRD_LENGTH                                0x1
#define _CWG2STR_STRD_MASK                                  0x8
#define _CWG2STR_OVRA_POSN                                  0x4
#define _CWG2STR_OVRA_POSITION                              0x4
#define _CWG2STR_OVRA_SIZE                                  0x1
#define _CWG2STR_OVRA_LENGTH                                0x1
#define _CWG2STR_OVRA_MASK                                  0x10
#define _CWG2STR_OVRB_POSN                                  0x5
#define _CWG2STR_OVRB_POSITION                              0x5
#define _CWG2STR_OVRB_SIZE                                  0x1
#define _CWG2STR_OVRB_LENGTH                                0x1
#define _CWG2STR_OVRB_MASK                                  0x20
#define _CWG2STR_OVRC_POSN                                  0x6
#define _CWG2STR_OVRC_POSITION                              0x6
#define _CWG2STR_OVRC_SIZE                                  0x1
#define _CWG2STR_OVRC_LENGTH                                0x1
#define _CWG2STR_OVRC_MASK                                  0x40
#define _CWG2STR_OVRD_POSN                                  0x7
#define _CWG2STR_OVRD_POSITION                              0x7
#define _CWG2STR_OVRD_SIZE                                  0x1
#define _CWG2STR_OVRD_LENGTH                                0x1
#define _CWG2STR_OVRD_MASK                                  0x80
#define _CWG2STR_CWG2STRA_POSN                              0x0
#define _CWG2STR_CWG2STRA_POSITION                          0x0
#define _CWG2STR_CWG2STRA_SIZE                              0x1
#define _CWG2STR_CWG2STRA_LENGTH                            0x1
#define _CWG2STR_CWG2STRA_MASK                              0x1
#define _CWG2STR_CWG2STRB_POSN                              0x1
#define _CWG2STR_CWG2STRB_POSITION                          0x1
#define _CWG2STR_CWG2STRB_SIZE                              0x1
#define _CWG2STR_CWG2STRB_LENGTH                            0x1
#define _CWG2STR_CWG2STRB_MASK                              0x2
#define _CWG2STR_CWG2STRC_POSN                              0x2
#define _CWG2STR_CWG2STRC_POSITION                          0x2
#define _CWG2STR_CWG2STRC_SIZE                              0x1
#define _CWG2STR_CWG2STRC_LENGTH                            0x1
#define _CWG2STR_CWG2STRC_MASK                              0x4
#define _CWG2STR_CWG2STRD_POSN                              0x3
#define _CWG2STR_CWG2STRD_POSITION                          0x3
#define _CWG2STR_CWG2STRD_SIZE                              0x1
#define _CWG2STR_CWG2STRD_LENGTH                            0x1
#define _CWG2STR_CWG2STRD_MASK                              0x8
#define _CWG2STR_CWG2OVRA_POSN                              0x4
#define _CWG2STR_CWG2OVRA_POSITION                          0x4
#define _CWG2STR_CWG2OVRA_SIZE                              0x1
#define _CWG2STR_CWG2OVRA_LENGTH                            0x1
#define _CWG2STR_CWG2OVRA_MASK                              0x10
#define _CWG2STR_CWG2OVRB_POSN                              0x5
#define _CWG2STR_CWG2OVRB_POSITION                          0x5
#define _CWG2STR_CWG2OVRB_SIZE                              0x1
#define _CWG2STR_CWG2OVRB_LENGTH                            0x1
#define _CWG2STR_CWG2OVRB_MASK                              0x20
#define _CWG2STR_CWG2OVRC_POSN                              0x6
#define _CWG2STR_CWG2OVRC_POSITION                          0x6
#define _CWG2STR_CWG2OVRC_SIZE                              0x1
#define _CWG2STR_CWG2OVRC_LENGTH                            0x1
#define _CWG2STR_CWG2OVRC_MASK                              0x40
#define _CWG2STR_CWG2OVRD_POSN                              0x7
#define _CWG2STR_CWG2OVRD_POSITION                          0x7
#define _CWG2STR_CWG2OVRD_SIZE                              0x1
#define _CWG2STR_CWG2OVRD_LENGTH                            0x1
#define _CWG2STR_CWG2OVRD_MASK                              0x80

// Register: CWG1CLK
#define CWG1CLK CWG1CLK
extern volatile unsigned char           CWG1CLK             __at(0x3F52);
#ifndef _LIB_BUILD
asm("CWG1CLK equ 03F52h");
#endif
// aliases
extern volatile unsigned char           CWG1CLKCON          __at(0x3F52);
#ifndef _LIB_BUILD
asm("CWG1CLKCON equ 03F52h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CS                     :1;
    };
    struct {
        unsigned CWG1CS                 :1;
    };
} CWG1CLKbits_t;
extern volatile CWG1CLKbits_t CWG1CLKbits __at(0x3F52);
// bitfield macros
#define _CWG1CLK_CS_POSN                                    0x0
#define _CWG1CLK_CS_POSITION                                0x0
#define _CWG1CLK_CS_SIZE                                    0x1
#define _CWG1CLK_CS_LENGTH                                  0x1
#define _CWG1CLK_CS_MASK                                    0x1
#define _CWG1CLK_CWG1CS_POSN                                0x0
#define _CWG1CLK_CWG1CS_POSITION                            0x0
#define _CWG1CLK_CWG1CS_SIZE                                0x1
#define _CWG1CLK_CWG1CS_LENGTH                              0x1
#define _CWG1CLK_CWG1CS_MASK                                0x1
// alias bitfield definitions
typedef union {
    struct {
        unsigned CS                     :1;
    };
    struct {
        unsigned CWG1CS                 :1;
    };
} CWG1CLKCONbits_t;
extern volatile CWG1CLKCONbits_t CWG1CLKCONbits __at(0x3F52);
// bitfield macros
#define _CWG1CLKCON_CS_POSN                                 0x0
#define _CWG1CLKCON_CS_POSITION                             0x0
#define _CWG1CLKCON_CS_SIZE                                 0x1
#define _CWG1CLKCON_CS_LENGTH                               0x1
#define _CWG1CLKCON_CS_MASK                                 0x1
#define _CWG1CLKCON_CWG1CS_POSN                             0x0
#define _CWG1CLKCON_CWG1CS_POSITION                         0x0
#define _CWG1CLKCON_CWG1CS_SIZE                             0x1
#define _CWG1CLKCON_CWG1CS_LENGTH                           0x1
#define _CWG1CLKCON_CWG1CS_MASK                             0x1

// Register: CWG1ISM
#define CWG1ISM CWG1ISM
extern volatile unsigned char           CWG1ISM             __at(0x3F53);
#ifndef _LIB_BUILD
asm("CWG1ISM equ 03F53h");
#endif
// aliases
extern volatile unsigned char           CWG1DAT             __at(0x3F53);
#ifndef _LIB_BUILD
asm("CWG1DAT equ 03F53h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ISM                    :8;
    };
    struct {
        unsigned CWG1ISM                :8;
    };
    struct {
        unsigned ISM0                   :1;
        unsigned ISM1                   :1;
        unsigned ISM2                   :1;
        unsigned ISM3                   :1;
        unsigned ISM4                   :1;
    };
} CWG1ISMbits_t;
extern volatile CWG1ISMbits_t CWG1ISMbits __at(0x3F53);
// bitfield macros
#define _CWG1ISM_ISM_POSN                                   0x0
#define _CWG1ISM_ISM_POSITION                               0x0
#define _CWG1ISM_ISM_SIZE                                   0x8
#define _CWG1ISM_ISM_LENGTH                                 0x8
#define _CWG1ISM_ISM_MASK                                   0xFF
#define _CWG1ISM_CWG1ISM_POSN                               0x0
#define _CWG1ISM_CWG1ISM_POSITION                           0x0
#define _CWG1ISM_CWG1ISM_SIZE                               0x8
#define _CWG1ISM_CWG1ISM_LENGTH                             0x8
#define _CWG1ISM_CWG1ISM_MASK                               0xFF
#define _CWG1ISM_ISM0_POSN                                  0x0
#define _CWG1ISM_ISM0_POSITION                              0x0
#define _CWG1ISM_ISM0_SIZE                                  0x1
#define _CWG1ISM_ISM0_LENGTH                                0x1
#define _CWG1ISM_ISM0_MASK                                  0x1
#define _CWG1ISM_ISM1_POSN                                  0x1
#define _CWG1ISM_ISM1_POSITION                              0x1
#define _CWG1ISM_ISM1_SIZE                                  0x1
#define _CWG1ISM_ISM1_LENGTH                                0x1
#define _CWG1ISM_ISM1_MASK                                  0x2
#define _CWG1ISM_ISM2_POSN                                  0x2
#define _CWG1ISM_ISM2_POSITION                              0x2
#define _CWG1ISM_ISM2_SIZE                                  0x1
#define _CWG1ISM_ISM2_LENGTH                                0x1
#define _CWG1ISM_ISM2_MASK                                  0x4
#define _CWG1ISM_ISM3_POSN                                  0x3
#define _CWG1ISM_ISM3_POSITION                              0x3
#define _CWG1ISM_ISM3_SIZE                                  0x1
#define _CWG1ISM_ISM3_LENGTH                                0x1
#define _CWG1ISM_ISM3_MASK                                  0x8
#define _CWG1ISM_ISM4_POSN                                  0x4
#define _CWG1ISM_ISM4_POSITION                              0x4
#define _CWG1ISM_ISM4_SIZE                                  0x1
#define _CWG1ISM_ISM4_LENGTH                                0x1
#define _CWG1ISM_ISM4_MASK                                  0x10
// alias bitfield definitions
typedef union {
    struct {
        unsigned ISM                    :8;
    };
    struct {
        unsigned CWG1ISM                :8;
    };
    struct {
        unsigned ISM0                   :1;
        unsigned ISM1                   :1;
        unsigned ISM2                   :1;
        unsigned ISM3                   :1;
        unsigned ISM4                   :1;
    };
} CWG1DATbits_t;
extern volatile CWG1DATbits_t CWG1DATbits __at(0x3F53);
// bitfield macros
#define _CWG1DAT_ISM_POSN                                   0x0
#define _CWG1DAT_ISM_POSITION                               0x0
#define _CWG1DAT_ISM_SIZE                                   0x8
#define _CWG1DAT_ISM_LENGTH                                 0x8
#define _CWG1DAT_ISM_MASK                                   0xFF
#define _CWG1DAT_CWG1ISM_POSN                               0x0
#define _CWG1DAT_CWG1ISM_POSITION                           0x0
#define _CWG1DAT_CWG1ISM_SIZE                               0x8
#define _CWG1DAT_CWG1ISM_LENGTH                             0x8
#define _CWG1DAT_CWG1ISM_MASK                               0xFF
#define _CWG1DAT_ISM0_POSN                                  0x0
#define _CWG1DAT_ISM0_POSITION                              0x0
#define _CWG1DAT_ISM0_SIZE                                  0x1
#define _CWG1DAT_ISM0_LENGTH                                0x1
#define _CWG1DAT_ISM0_MASK                                  0x1
#define _CWG1DAT_ISM1_POSN                                  0x1
#define _CWG1DAT_ISM1_POSITION                              0x1
#define _CWG1DAT_ISM1_SIZE                                  0x1
#define _CWG1DAT_ISM1_LENGTH                                0x1
#define _CWG1DAT_ISM1_MASK                                  0x2
#define _CWG1DAT_ISM2_POSN                                  0x2
#define _CWG1DAT_ISM2_POSITION                              0x2
#define _CWG1DAT_ISM2_SIZE                                  0x1
#define _CWG1DAT_ISM2_LENGTH                                0x1
#define _CWG1DAT_ISM2_MASK                                  0x4
#define _CWG1DAT_ISM3_POSN                                  0x3
#define _CWG1DAT_ISM3_POSITION                              0x3
#define _CWG1DAT_ISM3_SIZE                                  0x1
#define _CWG1DAT_ISM3_LENGTH                                0x1
#define _CWG1DAT_ISM3_MASK                                  0x8
#define _CWG1DAT_ISM4_POSN                                  0x4
#define _CWG1DAT_ISM4_POSITION                              0x4
#define _CWG1DAT_ISM4_SIZE                                  0x1
#define _CWG1DAT_ISM4_LENGTH                                0x1
#define _CWG1DAT_ISM4_MASK                                  0x10

// Register: CWG1DBR
#define CWG1DBR CWG1DBR
extern volatile unsigned char           CWG1DBR             __at(0x3F54);
#ifndef _LIB_BUILD
asm("CWG1DBR equ 03F54h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DBR                    :8;
    };
    struct {
        unsigned DBR0                   :1;
        unsigned DBR1                   :1;
        unsigned DBR2                   :1;
        unsigned DBR3                   :1;
        unsigned DBR4                   :1;
        unsigned DBR5                   :1;
    };
    struct {
        unsigned CWG1DBR                :8;
    };
    struct {
        unsigned CWG1DBR0               :1;
        unsigned CWG1DBR1               :1;
        unsigned CWG1DBR2               :1;
        unsigned CWG1DBR3               :1;
        unsigned CWG1DBR4               :1;
        unsigned CWG1DBR5               :1;
    };
} CWG1DBRbits_t;
extern volatile CWG1DBRbits_t CWG1DBRbits __at(0x3F54);
// bitfield macros
#define _CWG1DBR_DBR_POSN                                   0x0
#define _CWG1DBR_DBR_POSITION                               0x0
#define _CWG1DBR_DBR_SIZE                                   0x8
#define _CWG1DBR_DBR_LENGTH                                 0x8
#define _CWG1DBR_DBR_MASK                                   0xFF
#define _CWG1DBR_DBR0_POSN                                  0x0
#define _CWG1DBR_DBR0_POSITION                              0x0
#define _CWG1DBR_DBR0_SIZE                                  0x1
#define _CWG1DBR_DBR0_LENGTH                                0x1
#define _CWG1DBR_DBR0_MASK                                  0x1
#define _CWG1DBR_DBR1_POSN                                  0x1
#define _CWG1DBR_DBR1_POSITION                              0x1
#define _CWG1DBR_DBR1_SIZE                                  0x1
#define _CWG1DBR_DBR1_LENGTH                                0x1
#define _CWG1DBR_DBR1_MASK                                  0x2
#define _CWG1DBR_DBR2_POSN                                  0x2
#define _CWG1DBR_DBR2_POSITION                              0x2
#define _CWG1DBR_DBR2_SIZE                                  0x1
#define _CWG1DBR_DBR2_LENGTH                                0x1
#define _CWG1DBR_DBR2_MASK                                  0x4
#define _CWG1DBR_DBR3_POSN                                  0x3
#define _CWG1DBR_DBR3_POSITION                              0x3
#define _CWG1DBR_DBR3_SIZE                                  0x1
#define _CWG1DBR_DBR3_LENGTH                                0x1
#define _CWG1DBR_DBR3_MASK                                  0x8
#define _CWG1DBR_DBR4_POSN                                  0x4
#define _CWG1DBR_DBR4_POSITION                              0x4
#define _CWG1DBR_DBR4_SIZE                                  0x1
#define _CWG1DBR_DBR4_LENGTH                                0x1
#define _CWG1DBR_DBR4_MASK                                  0x10
#define _CWG1DBR_DBR5_POSN                                  0x5
#define _CWG1DBR_DBR5_POSITION                              0x5
#define _CWG1DBR_DBR5_SIZE                                  0x1
#define _CWG1DBR_DBR5_LENGTH                                0x1
#define _CWG1DBR_DBR5_MASK                                  0x20
#define _CWG1DBR_CWG1DBR_POSN                               0x0
#define _CWG1DBR_CWG1DBR_POSITION                           0x0
#define _CWG1DBR_CWG1DBR_SIZE                               0x8
#define _CWG1DBR_CWG1DBR_LENGTH                             0x8
#define _CWG1DBR_CWG1DBR_MASK                               0xFF
#define _CWG1DBR_CWG1DBR0_POSN                              0x0
#define _CWG1DBR_CWG1DBR0_POSITION                          0x0
#define _CWG1DBR_CWG1DBR0_SIZE                              0x1
#define _CWG1DBR_CWG1DBR0_LENGTH                            0x1
#define _CWG1DBR_CWG1DBR0_MASK                              0x1
#define _CWG1DBR_CWG1DBR1_POSN                              0x1
#define _CWG1DBR_CWG1DBR1_POSITION                          0x1
#define _CWG1DBR_CWG1DBR1_SIZE                              0x1
#define _CWG1DBR_CWG1DBR1_LENGTH                            0x1
#define _CWG1DBR_CWG1DBR1_MASK                              0x2
#define _CWG1DBR_CWG1DBR2_POSN                              0x2
#define _CWG1DBR_CWG1DBR2_POSITION                          0x2
#define _CWG1DBR_CWG1DBR2_SIZE                              0x1
#define _CWG1DBR_CWG1DBR2_LENGTH                            0x1
#define _CWG1DBR_CWG1DBR2_MASK                              0x4
#define _CWG1DBR_CWG1DBR3_POSN                              0x3
#define _CWG1DBR_CWG1DBR3_POSITION                          0x3
#define _CWG1DBR_CWG1DBR3_SIZE                              0x1
#define _CWG1DBR_CWG1DBR3_LENGTH                            0x1
#define _CWG1DBR_CWG1DBR3_MASK                              0x8
#define _CWG1DBR_CWG1DBR4_POSN                              0x4
#define _CWG1DBR_CWG1DBR4_POSITION                          0x4
#define _CWG1DBR_CWG1DBR4_SIZE                              0x1
#define _CWG1DBR_CWG1DBR4_LENGTH                            0x1
#define _CWG1DBR_CWG1DBR4_MASK                              0x10
#define _CWG1DBR_CWG1DBR5_POSN                              0x5
#define _CWG1DBR_CWG1DBR5_POSITION                          0x5
#define _CWG1DBR_CWG1DBR5_SIZE                              0x1
#define _CWG1DBR_CWG1DBR5_LENGTH                            0x1
#define _CWG1DBR_CWG1DBR5_MASK                              0x20

// Register: CWG1DBF
#define CWG1DBF CWG1DBF
extern volatile unsigned char           CWG1DBF             __at(0x3F55);
#ifndef _LIB_BUILD
asm("CWG1DBF equ 03F55h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DBF                    :8;
    };
    struct {
        unsigned DBF0                   :1;
        unsigned DBF1                   :1;
        unsigned DBF2                   :1;
        unsigned DBF3                   :1;
        unsigned DBF4                   :1;
        unsigned DBF5                   :1;
    };
    struct {
        unsigned CWG1DBF                :8;
    };
    struct {
        unsigned CWG1DBF0               :1;
        unsigned CWG1DBF1               :1;
        unsigned CWG1DBF2               :1;
        unsigned CWG1DBF3               :1;
        unsigned CWG1DBF4               :1;
        unsigned CWG1DBF5               :1;
    };
} CWG1DBFbits_t;
extern volatile CWG1DBFbits_t CWG1DBFbits __at(0x3F55);
// bitfield macros
#define _CWG1DBF_DBF_POSN                                   0x0
#define _CWG1DBF_DBF_POSITION                               0x0
#define _CWG1DBF_DBF_SIZE                                   0x8
#define _CWG1DBF_DBF_LENGTH                                 0x8
#define _CWG1DBF_DBF_MASK                                   0xFF
#define _CWG1DBF_DBF0_POSN                                  0x0
#define _CWG1DBF_DBF0_POSITION                              0x0
#define _CWG1DBF_DBF0_SIZE                                  0x1
#define _CWG1DBF_DBF0_LENGTH                                0x1
#define _CWG1DBF_DBF0_MASK                                  0x1
#define _CWG1DBF_DBF1_POSN                                  0x1
#define _CWG1DBF_DBF1_POSITION                              0x1
#define _CWG1DBF_DBF1_SIZE                                  0x1
#define _CWG1DBF_DBF1_LENGTH                                0x1
#define _CWG1DBF_DBF1_MASK                                  0x2
#define _CWG1DBF_DBF2_POSN                                  0x2
#define _CWG1DBF_DBF2_POSITION                              0x2
#define _CWG1DBF_DBF2_SIZE                                  0x1
#define _CWG1DBF_DBF2_LENGTH                                0x1
#define _CWG1DBF_DBF2_MASK                                  0x4
#define _CWG1DBF_DBF3_POSN                                  0x3
#define _CWG1DBF_DBF3_POSITION                              0x3
#define _CWG1DBF_DBF3_SIZE                                  0x1
#define _CWG1DBF_DBF3_LENGTH                                0x1
#define _CWG1DBF_DBF3_MASK                                  0x8
#define _CWG1DBF_DBF4_POSN                                  0x4
#define _CWG1DBF_DBF4_POSITION                              0x4
#define _CWG1DBF_DBF4_SIZE                                  0x1
#define _CWG1DBF_DBF4_LENGTH                                0x1
#define _CWG1DBF_DBF4_MASK                                  0x10
#define _CWG1DBF_DBF5_POSN                                  0x5
#define _CWG1DBF_DBF5_POSITION                              0x5
#define _CWG1DBF_DBF5_SIZE                                  0x1
#define _CWG1DBF_DBF5_LENGTH                                0x1
#define _CWG1DBF_DBF5_MASK                                  0x20
#define _CWG1DBF_CWG1DBF_POSN                               0x0
#define _CWG1DBF_CWG1DBF_POSITION                           0x0
#define _CWG1DBF_CWG1DBF_SIZE                               0x8
#define _CWG1DBF_CWG1DBF_LENGTH                             0x8
#define _CWG1DBF_CWG1DBF_MASK                               0xFF
#define _CWG1DBF_CWG1DBF0_POSN                              0x0
#define _CWG1DBF_CWG1DBF0_POSITION                          0x0
#define _CWG1DBF_CWG1DBF0_SIZE                              0x1
#define _CWG1DBF_CWG1DBF0_LENGTH                            0x1
#define _CWG1DBF_CWG1DBF0_MASK                              0x1
#define _CWG1DBF_CWG1DBF1_POSN                              0x1
#define _CWG1DBF_CWG1DBF1_POSITION                          0x1
#define _CWG1DBF_CWG1DBF1_SIZE                              0x1
#define _CWG1DBF_CWG1DBF1_LENGTH                            0x1
#define _CWG1DBF_CWG1DBF1_MASK                              0x2
#define _CWG1DBF_CWG1DBF2_POSN                              0x2
#define _CWG1DBF_CWG1DBF2_POSITION                          0x2
#define _CWG1DBF_CWG1DBF2_SIZE                              0x1
#define _CWG1DBF_CWG1DBF2_LENGTH                            0x1
#define _CWG1DBF_CWG1DBF2_MASK                              0x4
#define _CWG1DBF_CWG1DBF3_POSN                              0x3
#define _CWG1DBF_CWG1DBF3_POSITION                          0x3
#define _CWG1DBF_CWG1DBF3_SIZE                              0x1
#define _CWG1DBF_CWG1DBF3_LENGTH                            0x1
#define _CWG1DBF_CWG1DBF3_MASK                              0x8
#define _CWG1DBF_CWG1DBF4_POSN                              0x4
#define _CWG1DBF_CWG1DBF4_POSITION                          0x4
#define _CWG1DBF_CWG1DBF4_SIZE                              0x1
#define _CWG1DBF_CWG1DBF4_LENGTH                            0x1
#define _CWG1DBF_CWG1DBF4_MASK                              0x10
#define _CWG1DBF_CWG1DBF5_POSN                              0x5
#define _CWG1DBF_CWG1DBF5_POSITION                          0x5
#define _CWG1DBF_CWG1DBF5_SIZE                              0x1
#define _CWG1DBF_CWG1DBF5_LENGTH                            0x1
#define _CWG1DBF_CWG1DBF5_MASK                              0x20

// Register: CWG1CON0
#define CWG1CON0 CWG1CON0
extern volatile unsigned char           CWG1CON0            __at(0x3F56);
#ifndef _LIB_BUILD
asm("CWG1CON0 equ 03F56h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :3;
        unsigned                        :3;
        unsigned LD                     :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned                        :4;
        unsigned G1EN                   :1;
    };
    struct {
        unsigned CWG1MODE               :3;
        unsigned                        :3;
        unsigned CWG1LD                 :1;
        unsigned CWG1EN                 :1;
    };
    struct {
        unsigned CWG1MODE0              :1;
        unsigned CWG1MODE1              :1;
        unsigned CWG1MODE2              :1;
    };
} CWG1CON0bits_t;
extern volatile CWG1CON0bits_t CWG1CON0bits __at(0x3F56);
// bitfield macros
#define _CWG1CON0_MODE_POSN                                 0x0
#define _CWG1CON0_MODE_POSITION                             0x0
#define _CWG1CON0_MODE_SIZE                                 0x3
#define _CWG1CON0_MODE_LENGTH                               0x3
#define _CWG1CON0_MODE_MASK                                 0x7
#define _CWG1CON0_LD_POSN                                   0x6
#define _CWG1CON0_LD_POSITION                               0x6
#define _CWG1CON0_LD_SIZE                                   0x1
#define _CWG1CON0_LD_LENGTH                                 0x1
#define _CWG1CON0_LD_MASK                                   0x40
#define _CWG1CON0_EN_POSN                                   0x7
#define _CWG1CON0_EN_POSITION                               0x7
#define _CWG1CON0_EN_SIZE                                   0x1
#define _CWG1CON0_EN_LENGTH                                 0x1
#define _CWG1CON0_EN_MASK                                   0x80
#define _CWG1CON0_MODE0_POSN                                0x0
#define _CWG1CON0_MODE0_POSITION                            0x0
#define _CWG1CON0_MODE0_SIZE                                0x1
#define _CWG1CON0_MODE0_LENGTH                              0x1
#define _CWG1CON0_MODE0_MASK                                0x1
#define _CWG1CON0_MODE1_POSN                                0x1
#define _CWG1CON0_MODE1_POSITION                            0x1
#define _CWG1CON0_MODE1_SIZE                                0x1
#define _CWG1CON0_MODE1_LENGTH                              0x1
#define _CWG1CON0_MODE1_MASK                                0x2
#define _CWG1CON0_MODE2_POSN                                0x2
#define _CWG1CON0_MODE2_POSITION                            0x2
#define _CWG1CON0_MODE2_SIZE                                0x1
#define _CWG1CON0_MODE2_LENGTH                              0x1
#define _CWG1CON0_MODE2_MASK                                0x4
#define _CWG1CON0_G1EN_POSN                                 0x7
#define _CWG1CON0_G1EN_POSITION                             0x7
#define _CWG1CON0_G1EN_SIZE                                 0x1
#define _CWG1CON0_G1EN_LENGTH                               0x1
#define _CWG1CON0_G1EN_MASK                                 0x80
#define _CWG1CON0_CWG1MODE_POSN                             0x0
#define _CWG1CON0_CWG1MODE_POSITION                         0x0
#define _CWG1CON0_CWG1MODE_SIZE                             0x3
#define _CWG1CON0_CWG1MODE_LENGTH                           0x3
#define _CWG1CON0_CWG1MODE_MASK                             0x7
#define _CWG1CON0_CWG1LD_POSN                               0x6
#define _CWG1CON0_CWG1LD_POSITION                           0x6
#define _CWG1CON0_CWG1LD_SIZE                               0x1
#define _CWG1CON0_CWG1LD_LENGTH                             0x1
#define _CWG1CON0_CWG1LD_MASK                               0x40
#define _CWG1CON0_CWG1EN_POSN                               0x7
#define _CWG1CON0_CWG1EN_POSITION                           0x7
#define _CWG1CON0_CWG1EN_SIZE                               0x1
#define _CWG1CON0_CWG1EN_LENGTH                             0x1
#define _CWG1CON0_CWG1EN_MASK                               0x80
#define _CWG1CON0_CWG1MODE0_POSN                            0x0
#define _CWG1CON0_CWG1MODE0_POSITION                        0x0
#define _CWG1CON0_CWG1MODE0_SIZE                            0x1
#define _CWG1CON0_CWG1MODE0_LENGTH                          0x1
#define _CWG1CON0_CWG1MODE0_MASK                            0x1
#define _CWG1CON0_CWG1MODE1_POSN                            0x1
#define _CWG1CON0_CWG1MODE1_POSITION                        0x1
#define _CWG1CON0_CWG1MODE1_SIZE                            0x1
#define _CWG1CON0_CWG1MODE1_LENGTH                          0x1
#define _CWG1CON0_CWG1MODE1_MASK                            0x2
#define _CWG1CON0_CWG1MODE2_POSN                            0x2
#define _CWG1CON0_CWG1MODE2_POSITION                        0x2
#define _CWG1CON0_CWG1MODE2_SIZE                            0x1
#define _CWG1CON0_CWG1MODE2_LENGTH                          0x1
#define _CWG1CON0_CWG1MODE2_MASK                            0x4

// Register: CWG1CON1
#define CWG1CON1 CWG1CON1
extern volatile unsigned char           CWG1CON1            __at(0x3F57);
#ifndef _LIB_BUILD
asm("CWG1CON1 equ 03F57h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned POLA                   :1;
        unsigned POLB                   :1;
        unsigned POLC                   :1;
        unsigned POLD                   :1;
        unsigned                        :1;
        unsigned IN                     :1;
    };
    struct {
        unsigned CWG1POLA               :1;
        unsigned CWG1POLB               :1;
        unsigned CWG1POLC               :1;
        unsigned CWG1POLD               :1;
        unsigned                        :1;
        unsigned CWG1IN                 :1;
    };
} CWG1CON1bits_t;
extern volatile CWG1CON1bits_t CWG1CON1bits __at(0x3F57);
// bitfield macros
#define _CWG1CON1_POLA_POSN                                 0x0
#define _CWG1CON1_POLA_POSITION                             0x0
#define _CWG1CON1_POLA_SIZE                                 0x1
#define _CWG1CON1_POLA_LENGTH                               0x1
#define _CWG1CON1_POLA_MASK                                 0x1
#define _CWG1CON1_POLB_POSN                                 0x1
#define _CWG1CON1_POLB_POSITION                             0x1
#define _CWG1CON1_POLB_SIZE                                 0x1
#define _CWG1CON1_POLB_LENGTH                               0x1
#define _CWG1CON1_POLB_MASK                                 0x2
#define _CWG1CON1_POLC_POSN                                 0x2
#define _CWG1CON1_POLC_POSITION                             0x2
#define _CWG1CON1_POLC_SIZE                                 0x1
#define _CWG1CON1_POLC_LENGTH                               0x1
#define _CWG1CON1_POLC_MASK                                 0x4
#define _CWG1CON1_POLD_POSN                                 0x3
#define _CWG1CON1_POLD_POSITION                             0x3
#define _CWG1CON1_POLD_SIZE                                 0x1
#define _CWG1CON1_POLD_LENGTH                               0x1
#define _CWG1CON1_POLD_MASK                                 0x8
#define _CWG1CON1_IN_POSN                                   0x5
#define _CWG1CON1_IN_POSITION                               0x5
#define _CWG1CON1_IN_SIZE                                   0x1
#define _CWG1CON1_IN_LENGTH                                 0x1
#define _CWG1CON1_IN_MASK                                   0x20
#define _CWG1CON1_CWG1POLA_POSN                             0x0
#define _CWG1CON1_CWG1POLA_POSITION                         0x0
#define _CWG1CON1_CWG1POLA_SIZE                             0x1
#define _CWG1CON1_CWG1POLA_LENGTH                           0x1
#define _CWG1CON1_CWG1POLA_MASK                             0x1
#define _CWG1CON1_CWG1POLB_POSN                             0x1
#define _CWG1CON1_CWG1POLB_POSITION                         0x1
#define _CWG1CON1_CWG1POLB_SIZE                             0x1
#define _CWG1CON1_CWG1POLB_LENGTH                           0x1
#define _CWG1CON1_CWG1POLB_MASK                             0x2
#define _CWG1CON1_CWG1POLC_POSN                             0x2
#define _CWG1CON1_CWG1POLC_POSITION                         0x2
#define _CWG1CON1_CWG1POLC_SIZE                             0x1
#define _CWG1CON1_CWG1POLC_LENGTH                           0x1
#define _CWG1CON1_CWG1POLC_MASK                             0x4
#define _CWG1CON1_CWG1POLD_POSN                             0x3
#define _CWG1CON1_CWG1POLD_POSITION                         0x3
#define _CWG1CON1_CWG1POLD_SIZE                             0x1
#define _CWG1CON1_CWG1POLD_LENGTH                           0x1
#define _CWG1CON1_CWG1POLD_MASK                             0x8
#define _CWG1CON1_CWG1IN_POSN                               0x5
#define _CWG1CON1_CWG1IN_POSITION                           0x5
#define _CWG1CON1_CWG1IN_SIZE                               0x1
#define _CWG1CON1_CWG1IN_LENGTH                             0x1
#define _CWG1CON1_CWG1IN_MASK                               0x20

// Register: CWG1AS0
#define CWG1AS0 CWG1AS0
extern volatile unsigned char           CWG1AS0             __at(0x3F58);
#ifndef _LIB_BUILD
asm("CWG1AS0 equ 03F58h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned LSAC                   :2;
        unsigned LSDBD                  :2;
        unsigned REN                    :1;
        unsigned SHUTDOWN               :1;
    };
    struct {
        unsigned                        :2;
        unsigned LSAC0                  :1;
        unsigned LSCA1                  :1;
        unsigned LSDB0                  :1;
        unsigned LSDB1                  :1;
    };
    struct {
        unsigned                        :2;
        unsigned CWG1LSAC0              :1;
        unsigned CWG1LSAC1              :1;
        unsigned CWG1LSDB0              :1;
        unsigned CWG1LSDB1              :1;
    };
    struct {
        unsigned                        :2;
        unsigned CWG1LSAC               :2;
        unsigned CWG1LSDB               :2;
    };
    struct {
        unsigned                        :4;
        unsigned LSBD                   :2;
    };
    struct {
        unsigned                        :3;
        unsigned LSAC1                  :1;
        unsigned LSBD0                  :1;
        unsigned LSBD1                  :1;
    };
    struct {
        unsigned                        :4;
        unsigned CWG1LSBD0              :1;
        unsigned CWG1LSBD1              :1;
    };
    struct {
        unsigned                        :4;
        unsigned CWG1LSBD               :2;
    };
} CWG1AS0bits_t;
extern volatile CWG1AS0bits_t CWG1AS0bits __at(0x3F58);
// bitfield macros
#define _CWG1AS0_LSAC_POSN                                  0x2
#define _CWG1AS0_LSAC_POSITION                              0x2
#define _CWG1AS0_LSAC_SIZE                                  0x2
#define _CWG1AS0_LSAC_LENGTH                                0x2
#define _CWG1AS0_LSAC_MASK                                  0xC
#define _CWG1AS0_LSDBD_POSN                                 0x4
#define _CWG1AS0_LSDBD_POSITION                             0x4
#define _CWG1AS0_LSDBD_SIZE                                 0x2
#define _CWG1AS0_LSDBD_LENGTH                               0x2
#define _CWG1AS0_LSDBD_MASK                                 0x30
#define _CWG1AS0_REN_POSN                                   0x6
#define _CWG1AS0_REN_POSITION                               0x6
#define _CWG1AS0_REN_SIZE                                   0x1
#define _CWG1AS0_REN_LENGTH                                 0x1
#define _CWG1AS0_REN_MASK                                   0x40
#define _CWG1AS0_SHUTDOWN_POSN                              0x7
#define _CWG1AS0_SHUTDOWN_POSITION                          0x7
#define _CWG1AS0_SHUTDOWN_SIZE                              0x1
#define _CWG1AS0_SHUTDOWN_LENGTH                            0x1
#define _CWG1AS0_SHUTDOWN_MASK                              0x80
#define _CWG1AS0_LSAC0_POSN                                 0x2
#define _CWG1AS0_LSAC0_POSITION                             0x2
#define _CWG1AS0_LSAC0_SIZE                                 0x1
#define _CWG1AS0_LSAC0_LENGTH                               0x1
#define _CWG1AS0_LSAC0_MASK                                 0x4
#define _CWG1AS0_LSCA1_POSN                                 0x3
#define _CWG1AS0_LSCA1_POSITION                             0x3
#define _CWG1AS0_LSCA1_SIZE                                 0x1
#define _CWG1AS0_LSCA1_LENGTH                               0x1
#define _CWG1AS0_LSCA1_MASK                                 0x8
#define _CWG1AS0_LSDB0_POSN                                 0x4
#define _CWG1AS0_LSDB0_POSITION                             0x4
#define _CWG1AS0_LSDB0_SIZE                                 0x1
#define _CWG1AS0_LSDB0_LENGTH                               0x1
#define _CWG1AS0_LSDB0_MASK                                 0x10
#define _CWG1AS0_LSDB1_POSN                                 0x5
#define _CWG1AS0_LSDB1_POSITION                             0x5
#define _CWG1AS0_LSDB1_SIZE                                 0x1
#define _CWG1AS0_LSDB1_LENGTH                               0x1
#define _CWG1AS0_LSDB1_MASK                                 0x20
#define _CWG1AS0_CWG1LSAC0_POSN                             0x2
#define _CWG1AS0_CWG1LSAC0_POSITION                         0x2
#define _CWG1AS0_CWG1LSAC0_SIZE                             0x1
#define _CWG1AS0_CWG1LSAC0_LENGTH                           0x1
#define _CWG1AS0_CWG1LSAC0_MASK                             0x4
#define _CWG1AS0_CWG1LSAC1_POSN                             0x3
#define _CWG1AS0_CWG1LSAC1_POSITION                         0x3
#define _CWG1AS0_CWG1LSAC1_SIZE                             0x1
#define _CWG1AS0_CWG1LSAC1_LENGTH                           0x1
#define _CWG1AS0_CWG1LSAC1_MASK                             0x8
#define _CWG1AS0_CWG1LSDB0_POSN                             0x4
#define _CWG1AS0_CWG1LSDB0_POSITION                         0x4
#define _CWG1AS0_CWG1LSDB0_SIZE                             0x1
#define _CWG1AS0_CWG1LSDB0_LENGTH                           0x1
#define _CWG1AS0_CWG1LSDB0_MASK                             0x10
#define _CWG1AS0_CWG1LSDB1_POSN                             0x5
#define _CWG1AS0_CWG1LSDB1_POSITION                         0x5
#define _CWG1AS0_CWG1LSDB1_SIZE                             0x1
#define _CWG1AS0_CWG1LSDB1_LENGTH                           0x1
#define _CWG1AS0_CWG1LSDB1_MASK                             0x20
#define _CWG1AS0_CWG1LSAC_POSN                              0x2
#define _CWG1AS0_CWG1LSAC_POSITION                          0x2
#define _CWG1AS0_CWG1LSAC_SIZE                              0x2
#define _CWG1AS0_CWG1LSAC_LENGTH                            0x2
#define _CWG1AS0_CWG1LSAC_MASK                              0xC
#define _CWG1AS0_CWG1LSDB_POSN                              0x4
#define _CWG1AS0_CWG1LSDB_POSITION                          0x4
#define _CWG1AS0_CWG1LSDB_SIZE                              0x2
#define _CWG1AS0_CWG1LSDB_LENGTH                            0x2
#define _CWG1AS0_CWG1LSDB_MASK                              0x30
#define _CWG1AS0_LSBD_POSN                                  0x4
#define _CWG1AS0_LSBD_POSITION                              0x4
#define _CWG1AS0_LSBD_SIZE                                  0x2
#define _CWG1AS0_LSBD_LENGTH                                0x2
#define _CWG1AS0_LSBD_MASK                                  0x30
#define _CWG1AS0_LSAC1_POSN                                 0x3
#define _CWG1AS0_LSAC1_POSITION                             0x3
#define _CWG1AS0_LSAC1_SIZE                                 0x1
#define _CWG1AS0_LSAC1_LENGTH                               0x1
#define _CWG1AS0_LSAC1_MASK                                 0x8
#define _CWG1AS0_LSBD0_POSN                                 0x4
#define _CWG1AS0_LSBD0_POSITION                             0x4
#define _CWG1AS0_LSBD0_SIZE                                 0x1
#define _CWG1AS0_LSBD0_LENGTH                               0x1
#define _CWG1AS0_LSBD0_MASK                                 0x10
#define _CWG1AS0_LSBD1_POSN                                 0x5
#define _CWG1AS0_LSBD1_POSITION                             0x5
#define _CWG1AS0_LSBD1_SIZE                                 0x1
#define _CWG1AS0_LSBD1_LENGTH                               0x1
#define _CWG1AS0_LSBD1_MASK                                 0x20
#define _CWG1AS0_CWG1LSBD0_POSN                             0x4
#define _CWG1AS0_CWG1LSBD0_POSITION                         0x4
#define _CWG1AS0_CWG1LSBD0_SIZE                             0x1
#define _CWG1AS0_CWG1LSBD0_LENGTH                           0x1
#define _CWG1AS0_CWG1LSBD0_MASK                             0x10
#define _CWG1AS0_CWG1LSBD1_POSN                             0x5
#define _CWG1AS0_CWG1LSBD1_POSITION                         0x5
#define _CWG1AS0_CWG1LSBD1_SIZE                             0x1
#define _CWG1AS0_CWG1LSBD1_LENGTH                           0x1
#define _CWG1AS0_CWG1LSBD1_MASK                             0x20
#define _CWG1AS0_CWG1LSBD_POSN                              0x4
#define _CWG1AS0_CWG1LSBD_POSITION                          0x4
#define _CWG1AS0_CWG1LSBD_SIZE                              0x2
#define _CWG1AS0_CWG1LSBD_LENGTH                            0x2
#define _CWG1AS0_CWG1LSBD_MASK                              0x30

// Register: CWG1AS1
#define CWG1AS1 CWG1AS1
extern volatile unsigned char           CWG1AS1             __at(0x3F59);
#ifndef _LIB_BUILD
asm("CWG1AS1 equ 03F59h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned AS0E                   :1;
        unsigned AS1E                   :1;
        unsigned AS2E                   :1;
        unsigned AS3E                   :1;
        unsigned AS4E                   :1;
        unsigned AS5E                   :1;
        unsigned AS6E                   :1;
    };
} CWG1AS1bits_t;
extern volatile CWG1AS1bits_t CWG1AS1bits __at(0x3F59);
// bitfield macros
#define _CWG1AS1_AS0E_POSN                                  0x0
#define _CWG1AS1_AS0E_POSITION                              0x0
#define _CWG1AS1_AS0E_SIZE                                  0x1
#define _CWG1AS1_AS0E_LENGTH                                0x1
#define _CWG1AS1_AS0E_MASK                                  0x1
#define _CWG1AS1_AS1E_POSN                                  0x1
#define _CWG1AS1_AS1E_POSITION                              0x1
#define _CWG1AS1_AS1E_SIZE                                  0x1
#define _CWG1AS1_AS1E_LENGTH                                0x1
#define _CWG1AS1_AS1E_MASK                                  0x2
#define _CWG1AS1_AS2E_POSN                                  0x2
#define _CWG1AS1_AS2E_POSITION                              0x2
#define _CWG1AS1_AS2E_SIZE                                  0x1
#define _CWG1AS1_AS2E_LENGTH                                0x1
#define _CWG1AS1_AS2E_MASK                                  0x4
#define _CWG1AS1_AS3E_POSN                                  0x3
#define _CWG1AS1_AS3E_POSITION                              0x3
#define _CWG1AS1_AS3E_SIZE                                  0x1
#define _CWG1AS1_AS3E_LENGTH                                0x1
#define _CWG1AS1_AS3E_MASK                                  0x8
#define _CWG1AS1_AS4E_POSN                                  0x4
#define _CWG1AS1_AS4E_POSITION                              0x4
#define _CWG1AS1_AS4E_SIZE                                  0x1
#define _CWG1AS1_AS4E_LENGTH                                0x1
#define _CWG1AS1_AS4E_MASK                                  0x10
#define _CWG1AS1_AS5E_POSN                                  0x5
#define _CWG1AS1_AS5E_POSITION                              0x5
#define _CWG1AS1_AS5E_SIZE                                  0x1
#define _CWG1AS1_AS5E_LENGTH                                0x1
#define _CWG1AS1_AS5E_MASK                                  0x20
#define _CWG1AS1_AS6E_POSN                                  0x6
#define _CWG1AS1_AS6E_POSITION                              0x6
#define _CWG1AS1_AS6E_SIZE                                  0x1
#define _CWG1AS1_AS6E_LENGTH                                0x1
#define _CWG1AS1_AS6E_MASK                                  0x40

// Register: CWG1STR
#define CWG1STR CWG1STR
extern volatile unsigned char           CWG1STR             __at(0x3F5A);
#ifndef _LIB_BUILD
asm("CWG1STR equ 03F5Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned STRA                   :1;
        unsigned STRB                   :1;
        unsigned STRC                   :1;
        unsigned STRD                   :1;
        unsigned OVRA                   :1;
        unsigned OVRB                   :1;
        unsigned OVRC                   :1;
        unsigned OVRD                   :1;
    };
    struct {
        unsigned CWG1STRA               :1;
        unsigned CWG1STRB               :1;
        unsigned CWG1STRC               :1;
        unsigned CWG1STRD               :1;
        unsigned CWG1OVRA               :1;
        unsigned CWG1OVRB               :1;
        unsigned CWG1OVRC               :1;
        unsigned CWG1OVRD               :1;
    };
} CWG1STRbits_t;
extern volatile CWG1STRbits_t CWG1STRbits __at(0x3F5A);
// bitfield macros
#define _CWG1STR_STRA_POSN                                  0x0
#define _CWG1STR_STRA_POSITION                              0x0
#define _CWG1STR_STRA_SIZE                                  0x1
#define _CWG1STR_STRA_LENGTH                                0x1
#define _CWG1STR_STRA_MASK                                  0x1
#define _CWG1STR_STRB_POSN                                  0x1
#define _CWG1STR_STRB_POSITION                              0x1
#define _CWG1STR_STRB_SIZE                                  0x1
#define _CWG1STR_STRB_LENGTH                                0x1
#define _CWG1STR_STRB_MASK                                  0x2
#define _CWG1STR_STRC_POSN                                  0x2
#define _CWG1STR_STRC_POSITION                              0x2
#define _CWG1STR_STRC_SIZE                                  0x1
#define _CWG1STR_STRC_LENGTH                                0x1
#define _CWG1STR_STRC_MASK                                  0x4
#define _CWG1STR_STRD_POSN                                  0x3
#define _CWG1STR_STRD_POSITION                              0x3
#define _CWG1STR_STRD_SIZE                                  0x1
#define _CWG1STR_STRD_LENGTH                                0x1
#define _CWG1STR_STRD_MASK                                  0x8
#define _CWG1STR_OVRA_POSN                                  0x4
#define _CWG1STR_OVRA_POSITION                              0x4
#define _CWG1STR_OVRA_SIZE                                  0x1
#define _CWG1STR_OVRA_LENGTH                                0x1
#define _CWG1STR_OVRA_MASK                                  0x10
#define _CWG1STR_OVRB_POSN                                  0x5
#define _CWG1STR_OVRB_POSITION                              0x5
#define _CWG1STR_OVRB_SIZE                                  0x1
#define _CWG1STR_OVRB_LENGTH                                0x1
#define _CWG1STR_OVRB_MASK                                  0x20
#define _CWG1STR_OVRC_POSN                                  0x6
#define _CWG1STR_OVRC_POSITION                              0x6
#define _CWG1STR_OVRC_SIZE                                  0x1
#define _CWG1STR_OVRC_LENGTH                                0x1
#define _CWG1STR_OVRC_MASK                                  0x40
#define _CWG1STR_OVRD_POSN                                  0x7
#define _CWG1STR_OVRD_POSITION                              0x7
#define _CWG1STR_OVRD_SIZE                                  0x1
#define _CWG1STR_OVRD_LENGTH                                0x1
#define _CWG1STR_OVRD_MASK                                  0x80
#define _CWG1STR_CWG1STRA_POSN                              0x0
#define _CWG1STR_CWG1STRA_POSITION                          0x0
#define _CWG1STR_CWG1STRA_SIZE                              0x1
#define _CWG1STR_CWG1STRA_LENGTH                            0x1
#define _CWG1STR_CWG1STRA_MASK                              0x1
#define _CWG1STR_CWG1STRB_POSN                              0x1
#define _CWG1STR_CWG1STRB_POSITION                          0x1
#define _CWG1STR_CWG1STRB_SIZE                              0x1
#define _CWG1STR_CWG1STRB_LENGTH                            0x1
#define _CWG1STR_CWG1STRB_MASK                              0x2
#define _CWG1STR_CWG1STRC_POSN                              0x2
#define _CWG1STR_CWG1STRC_POSITION                          0x2
#define _CWG1STR_CWG1STRC_SIZE                              0x1
#define _CWG1STR_CWG1STRC_LENGTH                            0x1
#define _CWG1STR_CWG1STRC_MASK                              0x4
#define _CWG1STR_CWG1STRD_POSN                              0x3
#define _CWG1STR_CWG1STRD_POSITION                          0x3
#define _CWG1STR_CWG1STRD_SIZE                              0x1
#define _CWG1STR_CWG1STRD_LENGTH                            0x1
#define _CWG1STR_CWG1STRD_MASK                              0x8
#define _CWG1STR_CWG1OVRA_POSN                              0x4
#define _CWG1STR_CWG1OVRA_POSITION                          0x4
#define _CWG1STR_CWG1OVRA_SIZE                              0x1
#define _CWG1STR_CWG1OVRA_LENGTH                            0x1
#define _CWG1STR_CWG1OVRA_MASK                              0x10
#define _CWG1STR_CWG1OVRB_POSN                              0x5
#define _CWG1STR_CWG1OVRB_POSITION                          0x5
#define _CWG1STR_CWG1OVRB_SIZE                              0x1
#define _CWG1STR_CWG1OVRB_LENGTH                            0x1
#define _CWG1STR_CWG1OVRB_MASK                              0x20
#define _CWG1STR_CWG1OVRC_POSN                              0x6
#define _CWG1STR_CWG1OVRC_POSITION                          0x6
#define _CWG1STR_CWG1OVRC_SIZE                              0x1
#define _CWG1STR_CWG1OVRC_LENGTH                            0x1
#define _CWG1STR_CWG1OVRC_MASK                              0x40
#define _CWG1STR_CWG1OVRD_POSN                              0x7
#define _CWG1STR_CWG1OVRD_POSITION                          0x7
#define _CWG1STR_CWG1OVRD_SIZE                              0x1
#define _CWG1STR_CWG1OVRD_LENGTH                            0x1
#define _CWG1STR_CWG1OVRD_MASK                              0x80

// Register: CCPTMRS0
#define CCPTMRS0 CCPTMRS0
extern volatile unsigned char           CCPTMRS0            __at(0x3F5E);
#ifndef _LIB_BUILD
asm("CCPTMRS0 equ 03F5Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned C1TSEL                 :2;
        unsigned C2TSEL                 :2;
        unsigned C3TSEL                 :2;
        unsigned C4TSEL                 :2;
    };
    struct {
        unsigned C1TSEL0                :1;
        unsigned C1TSEL1                :1;
        unsigned C2TSEL0                :1;
        unsigned C2TSEL1                :1;
        unsigned C3TSEL0                :1;
        unsigned C3TSEL1                :1;
        unsigned C4TSEL0                :1;
        unsigned C4TSEL1                :1;
    };
} CCPTMRS0bits_t;
extern volatile CCPTMRS0bits_t CCPTMRS0bits __at(0x3F5E);
// bitfield macros
#define _CCPTMRS0_C1TSEL_POSN                               0x0
#define _CCPTMRS0_C1TSEL_POSITION                           0x0
#define _CCPTMRS0_C1TSEL_SIZE                               0x2
#define _CCPTMRS0_C1TSEL_LENGTH                             0x2
#define _CCPTMRS0_C1TSEL_MASK                               0x3
#define _CCPTMRS0_C2TSEL_POSN                               0x2
#define _CCPTMRS0_C2TSEL_POSITION                           0x2
#define _CCPTMRS0_C2TSEL_SIZE                               0x2
#define _CCPTMRS0_C2TSEL_LENGTH                             0x2
#define _CCPTMRS0_C2TSEL_MASK                               0xC
#define _CCPTMRS0_C3TSEL_POSN                               0x4
#define _CCPTMRS0_C3TSEL_POSITION                           0x4
#define _CCPTMRS0_C3TSEL_SIZE                               0x2
#define _CCPTMRS0_C3TSEL_LENGTH                             0x2
#define _CCPTMRS0_C3TSEL_MASK                               0x30
#define _CCPTMRS0_C4TSEL_POSN                               0x6
#define _CCPTMRS0_C4TSEL_POSITION                           0x6
#define _CCPTMRS0_C4TSEL_SIZE                               0x2
#define _CCPTMRS0_C4TSEL_LENGTH                             0x2
#define _CCPTMRS0_C4TSEL_MASK                               0xC0
#define _CCPTMRS0_C1TSEL0_POSN                              0x0
#define _CCPTMRS0_C1TSEL0_POSITION                          0x0
#define _CCPTMRS0_C1TSEL0_SIZE                              0x1
#define _CCPTMRS0_C1TSEL0_LENGTH                            0x1
#define _CCPTMRS0_C1TSEL0_MASK                              0x1
#define _CCPTMRS0_C1TSEL1_POSN                              0x1
#define _CCPTMRS0_C1TSEL1_POSITION                          0x1
#define _CCPTMRS0_C1TSEL1_SIZE                              0x1
#define _CCPTMRS0_C1TSEL1_LENGTH                            0x1
#define _CCPTMRS0_C1TSEL1_MASK                              0x2
#define _CCPTMRS0_C2TSEL0_POSN                              0x2
#define _CCPTMRS0_C2TSEL0_POSITION                          0x2
#define _CCPTMRS0_C2TSEL0_SIZE                              0x1
#define _CCPTMRS0_C2TSEL0_LENGTH                            0x1
#define _CCPTMRS0_C2TSEL0_MASK                              0x4
#define _CCPTMRS0_C2TSEL1_POSN                              0x3
#define _CCPTMRS0_C2TSEL1_POSITION                          0x3
#define _CCPTMRS0_C2TSEL1_SIZE                              0x1
#define _CCPTMRS0_C2TSEL1_LENGTH                            0x1
#define _CCPTMRS0_C2TSEL1_MASK                              0x8
#define _CCPTMRS0_C3TSEL0_POSN                              0x4
#define _CCPTMRS0_C3TSEL0_POSITION                          0x4
#define _CCPTMRS0_C3TSEL0_SIZE                              0x1
#define _CCPTMRS0_C3TSEL0_LENGTH                            0x1
#define _CCPTMRS0_C3TSEL0_MASK                              0x10
#define _CCPTMRS0_C3TSEL1_POSN                              0x5
#define _CCPTMRS0_C3TSEL1_POSITION                          0x5
#define _CCPTMRS0_C3TSEL1_SIZE                              0x1
#define _CCPTMRS0_C3TSEL1_LENGTH                            0x1
#define _CCPTMRS0_C3TSEL1_MASK                              0x20
#define _CCPTMRS0_C4TSEL0_POSN                              0x6
#define _CCPTMRS0_C4TSEL0_POSITION                          0x6
#define _CCPTMRS0_C4TSEL0_SIZE                              0x1
#define _CCPTMRS0_C4TSEL0_LENGTH                            0x1
#define _CCPTMRS0_C4TSEL0_MASK                              0x40
#define _CCPTMRS0_C4TSEL1_POSN                              0x7
#define _CCPTMRS0_C4TSEL1_POSITION                          0x7
#define _CCPTMRS0_C4TSEL1_SIZE                              0x1
#define _CCPTMRS0_C4TSEL1_LENGTH                            0x1
#define _CCPTMRS0_C4TSEL1_MASK                              0x80

// Register: CCPTMRS1
#define CCPTMRS1 CCPTMRS1
extern volatile unsigned char           CCPTMRS1            __at(0x3F5F);
#ifndef _LIB_BUILD
asm("CCPTMRS1 equ 03F5Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned P5TSEL                 :2;
        unsigned P6TSEL                 :2;
        unsigned P7TSEL                 :2;
        unsigned P8TSEL                 :2;
    };
    struct {
        unsigned P5TSEL0                :1;
        unsigned P5TSEL1                :1;
        unsigned P6TSEL0                :1;
        unsigned P6TSEL1                :1;
        unsigned P7TSEL0                :1;
        unsigned P7TSEL1                :1;
        unsigned P8TSEL0                :1;
        unsigned P8TSEL1                :1;
    };
} CCPTMRS1bits_t;
extern volatile CCPTMRS1bits_t CCPTMRS1bits __at(0x3F5F);
// bitfield macros
#define _CCPTMRS1_P5TSEL_POSN                               0x0
#define _CCPTMRS1_P5TSEL_POSITION                           0x0
#define _CCPTMRS1_P5TSEL_SIZE                               0x2
#define _CCPTMRS1_P5TSEL_LENGTH                             0x2
#define _CCPTMRS1_P5TSEL_MASK                               0x3
#define _CCPTMRS1_P6TSEL_POSN                               0x2
#define _CCPTMRS1_P6TSEL_POSITION                           0x2
#define _CCPTMRS1_P6TSEL_SIZE                               0x2
#define _CCPTMRS1_P6TSEL_LENGTH                             0x2
#define _CCPTMRS1_P6TSEL_MASK                               0xC
#define _CCPTMRS1_P7TSEL_POSN                               0x4
#define _CCPTMRS1_P7TSEL_POSITION                           0x4
#define _CCPTMRS1_P7TSEL_SIZE                               0x2
#define _CCPTMRS1_P7TSEL_LENGTH                             0x2
#define _CCPTMRS1_P7TSEL_MASK                               0x30
#define _CCPTMRS1_P8TSEL_POSN                               0x6
#define _CCPTMRS1_P8TSEL_POSITION                           0x6
#define _CCPTMRS1_P8TSEL_SIZE                               0x2
#define _CCPTMRS1_P8TSEL_LENGTH                             0x2
#define _CCPTMRS1_P8TSEL_MASK                               0xC0
#define _CCPTMRS1_P5TSEL0_POSN                              0x0
#define _CCPTMRS1_P5TSEL0_POSITION                          0x0
#define _CCPTMRS1_P5TSEL0_SIZE                              0x1
#define _CCPTMRS1_P5TSEL0_LENGTH                            0x1
#define _CCPTMRS1_P5TSEL0_MASK                              0x1
#define _CCPTMRS1_P5TSEL1_POSN                              0x1
#define _CCPTMRS1_P5TSEL1_POSITION                          0x1
#define _CCPTMRS1_P5TSEL1_SIZE                              0x1
#define _CCPTMRS1_P5TSEL1_LENGTH                            0x1
#define _CCPTMRS1_P5TSEL1_MASK                              0x2
#define _CCPTMRS1_P6TSEL0_POSN                              0x2
#define _CCPTMRS1_P6TSEL0_POSITION                          0x2
#define _CCPTMRS1_P6TSEL0_SIZE                              0x1
#define _CCPTMRS1_P6TSEL0_LENGTH                            0x1
#define _CCPTMRS1_P6TSEL0_MASK                              0x4
#define _CCPTMRS1_P6TSEL1_POSN                              0x3
#define _CCPTMRS1_P6TSEL1_POSITION                          0x3
#define _CCPTMRS1_P6TSEL1_SIZE                              0x1
#define _CCPTMRS1_P6TSEL1_LENGTH                            0x1
#define _CCPTMRS1_P6TSEL1_MASK                              0x8
#define _CCPTMRS1_P7TSEL0_POSN                              0x4
#define _CCPTMRS1_P7TSEL0_POSITION                          0x4
#define _CCPTMRS1_P7TSEL0_SIZE                              0x1
#define _CCPTMRS1_P7TSEL0_LENGTH                            0x1
#define _CCPTMRS1_P7TSEL0_MASK                              0x10
#define _CCPTMRS1_P7TSEL1_POSN                              0x5
#define _CCPTMRS1_P7TSEL1_POSITION                          0x5
#define _CCPTMRS1_P7TSEL1_SIZE                              0x1
#define _CCPTMRS1_P7TSEL1_LENGTH                            0x1
#define _CCPTMRS1_P7TSEL1_MASK                              0x20
#define _CCPTMRS1_P8TSEL0_POSN                              0x6
#define _CCPTMRS1_P8TSEL0_POSITION                          0x6
#define _CCPTMRS1_P8TSEL0_SIZE                              0x1
#define _CCPTMRS1_P8TSEL0_LENGTH                            0x1
#define _CCPTMRS1_P8TSEL0_MASK                              0x40
#define _CCPTMRS1_P8TSEL1_POSN                              0x7
#define _CCPTMRS1_P8TSEL1_POSITION                          0x7
#define _CCPTMRS1_P8TSEL1_SIZE                              0x1
#define _CCPTMRS1_P8TSEL1_LENGTH                            0x1
#define _CCPTMRS1_P8TSEL1_MASK                              0x80

// Register: PWM8DC
#define PWM8DC PWM8DC
extern volatile unsigned short          PWM8DC              __at(0x3F60);
#ifndef _LIB_BUILD
asm("PWM8DC equ 03F60h");
#endif

// Register: PWM8DCL
#define PWM8DCL PWM8DCL
extern volatile unsigned char           PWM8DCL             __at(0x3F60);
#ifndef _LIB_BUILD
asm("PWM8DCL equ 03F60h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :6;
        unsigned DC                     :2;
    };
    struct {
        unsigned                        :6;
        unsigned DC0                    :1;
        unsigned DC1                    :1;
    };
    struct {
        unsigned                        :6;
        unsigned PWM8DC0                :1;
        unsigned PWM8DC1                :1;
    };
    struct {
        unsigned                        :6;
        unsigned PWMPW0                 :1;
        unsigned PWMPW1                 :1;
    };
} PWM8DCLbits_t;
extern volatile PWM8DCLbits_t PWM8DCLbits __at(0x3F60);
// bitfield macros
#define _PWM8DCL_DC_POSN                                    0x6
#define _PWM8DCL_DC_POSITION                                0x6
#define _PWM8DCL_DC_SIZE                                    0x2
#define _PWM8DCL_DC_LENGTH                                  0x2
#define _PWM8DCL_DC_MASK                                    0xC0
#define _PWM8DCL_DC0_POSN                                   0x6
#define _PWM8DCL_DC0_POSITION                               0x6
#define _PWM8DCL_DC0_SIZE                                   0x1
#define _PWM8DCL_DC0_LENGTH                                 0x1
#define _PWM8DCL_DC0_MASK                                   0x40
#define _PWM8DCL_DC1_POSN                                   0x7
#define _PWM8DCL_DC1_POSITION                               0x7
#define _PWM8DCL_DC1_SIZE                                   0x1
#define _PWM8DCL_DC1_LENGTH                                 0x1
#define _PWM8DCL_DC1_MASK                                   0x80
#define _PWM8DCL_PWM8DC0_POSN                               0x6
#define _PWM8DCL_PWM8DC0_POSITION                           0x6
#define _PWM8DCL_PWM8DC0_SIZE                               0x1
#define _PWM8DCL_PWM8DC0_LENGTH                             0x1
#define _PWM8DCL_PWM8DC0_MASK                               0x40
#define _PWM8DCL_PWM8DC1_POSN                               0x7
#define _PWM8DCL_PWM8DC1_POSITION                           0x7
#define _PWM8DCL_PWM8DC1_SIZE                               0x1
#define _PWM8DCL_PWM8DC1_LENGTH                             0x1
#define _PWM8DCL_PWM8DC1_MASK                               0x80
#define _PWM8DCL_PWMPW0_POSN                                0x6
#define _PWM8DCL_PWMPW0_POSITION                            0x6
#define _PWM8DCL_PWMPW0_SIZE                                0x1
#define _PWM8DCL_PWMPW0_LENGTH                              0x1
#define _PWM8DCL_PWMPW0_MASK                                0x40
#define _PWM8DCL_PWMPW1_POSN                                0x7
#define _PWM8DCL_PWMPW1_POSITION                            0x7
#define _PWM8DCL_PWMPW1_SIZE                                0x1
#define _PWM8DCL_PWMPW1_LENGTH                              0x1
#define _PWM8DCL_PWMPW1_MASK                                0x80

// Register: PWM8DCH
#define PWM8DCH PWM8DCH
extern volatile unsigned char           PWM8DCH             __at(0x3F61);
#ifndef _LIB_BUILD
asm("PWM8DCH equ 03F61h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DC                     :8;
    };
    struct {
        unsigned DC2                    :1;
        unsigned DC3                    :1;
        unsigned DC4                    :1;
        unsigned DC5                    :1;
        unsigned DC6                    :1;
        unsigned DC7                    :1;
        unsigned DC8                    :1;
        unsigned DC9                    :1;
    };
    struct {
        unsigned PWM8DC2                :1;
        unsigned PWM8DC3                :1;
        unsigned PWM8DC4                :1;
        unsigned PWM8DC5                :1;
        unsigned PWM8DC6                :1;
        unsigned PWM8DC7                :1;
        unsigned PWM8DC8                :1;
        unsigned PWM8DC9                :1;
    };
    struct {
        unsigned PWMPW2                 :1;
        unsigned PWMPW3                 :1;
        unsigned PWMPW4                 :1;
        unsigned PWMPW5                 :1;
        unsigned PWMPW6                 :1;
        unsigned PWMPW7                 :1;
        unsigned PWMPW8                 :1;
        unsigned PWMPW9                 :1;
    };
} PWM8DCHbits_t;
extern volatile PWM8DCHbits_t PWM8DCHbits __at(0x3F61);
// bitfield macros
#define _PWM8DCH_DC_POSN                                    0x0
#define _PWM8DCH_DC_POSITION                                0x0
#define _PWM8DCH_DC_SIZE                                    0x8
#define _PWM8DCH_DC_LENGTH                                  0x8
#define _PWM8DCH_DC_MASK                                    0xFF
#define _PWM8DCH_DC2_POSN                                   0x0
#define _PWM8DCH_DC2_POSITION                               0x0
#define _PWM8DCH_DC2_SIZE                                   0x1
#define _PWM8DCH_DC2_LENGTH                                 0x1
#define _PWM8DCH_DC2_MASK                                   0x1
#define _PWM8DCH_DC3_POSN                                   0x1
#define _PWM8DCH_DC3_POSITION                               0x1
#define _PWM8DCH_DC3_SIZE                                   0x1
#define _PWM8DCH_DC3_LENGTH                                 0x1
#define _PWM8DCH_DC3_MASK                                   0x2
#define _PWM8DCH_DC4_POSN                                   0x2
#define _PWM8DCH_DC4_POSITION                               0x2
#define _PWM8DCH_DC4_SIZE                                   0x1
#define _PWM8DCH_DC4_LENGTH                                 0x1
#define _PWM8DCH_DC4_MASK                                   0x4
#define _PWM8DCH_DC5_POSN                                   0x3
#define _PWM8DCH_DC5_POSITION                               0x3
#define _PWM8DCH_DC5_SIZE                                   0x1
#define _PWM8DCH_DC5_LENGTH                                 0x1
#define _PWM8DCH_DC5_MASK                                   0x8
#define _PWM8DCH_DC6_POSN                                   0x4
#define _PWM8DCH_DC6_POSITION                               0x4
#define _PWM8DCH_DC6_SIZE                                   0x1
#define _PWM8DCH_DC6_LENGTH                                 0x1
#define _PWM8DCH_DC6_MASK                                   0x10
#define _PWM8DCH_DC7_POSN                                   0x5
#define _PWM8DCH_DC7_POSITION                               0x5
#define _PWM8DCH_DC7_SIZE                                   0x1
#define _PWM8DCH_DC7_LENGTH                                 0x1
#define _PWM8DCH_DC7_MASK                                   0x20
#define _PWM8DCH_DC8_POSN                                   0x6
#define _PWM8DCH_DC8_POSITION                               0x6
#define _PWM8DCH_DC8_SIZE                                   0x1
#define _PWM8DCH_DC8_LENGTH                                 0x1
#define _PWM8DCH_DC8_MASK                                   0x40
#define _PWM8DCH_DC9_POSN                                   0x7
#define _PWM8DCH_DC9_POSITION                               0x7
#define _PWM8DCH_DC9_SIZE                                   0x1
#define _PWM8DCH_DC9_LENGTH                                 0x1
#define _PWM8DCH_DC9_MASK                                   0x80
#define _PWM8DCH_PWM8DC2_POSN                               0x0
#define _PWM8DCH_PWM8DC2_POSITION                           0x0
#define _PWM8DCH_PWM8DC2_SIZE                               0x1
#define _PWM8DCH_PWM8DC2_LENGTH                             0x1
#define _PWM8DCH_PWM8DC2_MASK                               0x1
#define _PWM8DCH_PWM8DC3_POSN                               0x1
#define _PWM8DCH_PWM8DC3_POSITION                           0x1
#define _PWM8DCH_PWM8DC3_SIZE                               0x1
#define _PWM8DCH_PWM8DC3_LENGTH                             0x1
#define _PWM8DCH_PWM8DC3_MASK                               0x2
#define _PWM8DCH_PWM8DC4_POSN                               0x2
#define _PWM8DCH_PWM8DC4_POSITION                           0x2
#define _PWM8DCH_PWM8DC4_SIZE                               0x1
#define _PWM8DCH_PWM8DC4_LENGTH                             0x1
#define _PWM8DCH_PWM8DC4_MASK                               0x4
#define _PWM8DCH_PWM8DC5_POSN                               0x3
#define _PWM8DCH_PWM8DC5_POSITION                           0x3
#define _PWM8DCH_PWM8DC5_SIZE                               0x1
#define _PWM8DCH_PWM8DC5_LENGTH                             0x1
#define _PWM8DCH_PWM8DC5_MASK                               0x8
#define _PWM8DCH_PWM8DC6_POSN                               0x4
#define _PWM8DCH_PWM8DC6_POSITION                           0x4
#define _PWM8DCH_PWM8DC6_SIZE                               0x1
#define _PWM8DCH_PWM8DC6_LENGTH                             0x1
#define _PWM8DCH_PWM8DC6_MASK                               0x10
#define _PWM8DCH_PWM8DC7_POSN                               0x5
#define _PWM8DCH_PWM8DC7_POSITION                           0x5
#define _PWM8DCH_PWM8DC7_SIZE                               0x1
#define _PWM8DCH_PWM8DC7_LENGTH                             0x1
#define _PWM8DCH_PWM8DC7_MASK                               0x20
#define _PWM8DCH_PWM8DC8_POSN                               0x6
#define _PWM8DCH_PWM8DC8_POSITION                           0x6
#define _PWM8DCH_PWM8DC8_SIZE                               0x1
#define _PWM8DCH_PWM8DC8_LENGTH                             0x1
#define _PWM8DCH_PWM8DC8_MASK                               0x40
#define _PWM8DCH_PWM8DC9_POSN                               0x7
#define _PWM8DCH_PWM8DC9_POSITION                           0x7
#define _PWM8DCH_PWM8DC9_SIZE                               0x1
#define _PWM8DCH_PWM8DC9_LENGTH                             0x1
#define _PWM8DCH_PWM8DC9_MASK                               0x80
#define _PWM8DCH_PWMPW2_POSN                                0x0
#define _PWM8DCH_PWMPW2_POSITION                            0x0
#define _PWM8DCH_PWMPW2_SIZE                                0x1
#define _PWM8DCH_PWMPW2_LENGTH                              0x1
#define _PWM8DCH_PWMPW2_MASK                                0x1
#define _PWM8DCH_PWMPW3_POSN                                0x1
#define _PWM8DCH_PWMPW3_POSITION                            0x1
#define _PWM8DCH_PWMPW3_SIZE                                0x1
#define _PWM8DCH_PWMPW3_LENGTH                              0x1
#define _PWM8DCH_PWMPW3_MASK                                0x2
#define _PWM8DCH_PWMPW4_POSN                                0x2
#define _PWM8DCH_PWMPW4_POSITION                            0x2
#define _PWM8DCH_PWMPW4_SIZE                                0x1
#define _PWM8DCH_PWMPW4_LENGTH                              0x1
#define _PWM8DCH_PWMPW4_MASK                                0x4
#define _PWM8DCH_PWMPW5_POSN                                0x3
#define _PWM8DCH_PWMPW5_POSITION                            0x3
#define _PWM8DCH_PWMPW5_SIZE                                0x1
#define _PWM8DCH_PWMPW5_LENGTH                              0x1
#define _PWM8DCH_PWMPW5_MASK                                0x8
#define _PWM8DCH_PWMPW6_POSN                                0x4
#define _PWM8DCH_PWMPW6_POSITION                            0x4
#define _PWM8DCH_PWMPW6_SIZE                                0x1
#define _PWM8DCH_PWMPW6_LENGTH                              0x1
#define _PWM8DCH_PWMPW6_MASK                                0x10
#define _PWM8DCH_PWMPW7_POSN                                0x5
#define _PWM8DCH_PWMPW7_POSITION                            0x5
#define _PWM8DCH_PWMPW7_SIZE                                0x1
#define _PWM8DCH_PWMPW7_LENGTH                              0x1
#define _PWM8DCH_PWMPW7_MASK                                0x20
#define _PWM8DCH_PWMPW8_POSN                                0x6
#define _PWM8DCH_PWMPW8_POSITION                            0x6
#define _PWM8DCH_PWMPW8_SIZE                                0x1
#define _PWM8DCH_PWMPW8_LENGTH                              0x1
#define _PWM8DCH_PWMPW8_MASK                                0x40
#define _PWM8DCH_PWMPW9_POSN                                0x7
#define _PWM8DCH_PWMPW9_POSITION                            0x7
#define _PWM8DCH_PWMPW9_SIZE                                0x1
#define _PWM8DCH_PWMPW9_LENGTH                              0x1
#define _PWM8DCH_PWMPW9_MASK                                0x80

// Register: PWM8CON
#define PWM8CON PWM8CON
extern volatile unsigned char           PWM8CON             __at(0x3F62);
#ifndef _LIB_BUILD
asm("PWM8CON equ 03F62h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :4;
        unsigned POL                    :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned                        :4;
        unsigned PWM8POL                :1;
        unsigned PWM8OUT                :1;
        unsigned                        :1;
        unsigned PWM8EN                 :1;
    };
} PWM8CONbits_t;
extern volatile PWM8CONbits_t PWM8CONbits __at(0x3F62);
// bitfield macros
#define _PWM8CON_POL_POSN                                   0x4
#define _PWM8CON_POL_POSITION                               0x4
#define _PWM8CON_POL_SIZE                                   0x1
#define _PWM8CON_POL_LENGTH                                 0x1
#define _PWM8CON_POL_MASK                                   0x10
#define _PWM8CON_OUT_POSN                                   0x5
#define _PWM8CON_OUT_POSITION                               0x5
#define _PWM8CON_OUT_SIZE                                   0x1
#define _PWM8CON_OUT_LENGTH                                 0x1
#define _PWM8CON_OUT_MASK                                   0x20
#define _PWM8CON_EN_POSN                                    0x7
#define _PWM8CON_EN_POSITION                                0x7
#define _PWM8CON_EN_SIZE                                    0x1
#define _PWM8CON_EN_LENGTH                                  0x1
#define _PWM8CON_EN_MASK                                    0x80
#define _PWM8CON_PWM8POL_POSN                               0x4
#define _PWM8CON_PWM8POL_POSITION                           0x4
#define _PWM8CON_PWM8POL_SIZE                               0x1
#define _PWM8CON_PWM8POL_LENGTH                             0x1
#define _PWM8CON_PWM8POL_MASK                               0x10
#define _PWM8CON_PWM8OUT_POSN                               0x5
#define _PWM8CON_PWM8OUT_POSITION                           0x5
#define _PWM8CON_PWM8OUT_SIZE                               0x1
#define _PWM8CON_PWM8OUT_LENGTH                             0x1
#define _PWM8CON_PWM8OUT_MASK                               0x20
#define _PWM8CON_PWM8EN_POSN                                0x7
#define _PWM8CON_PWM8EN_POSITION                            0x7
#define _PWM8CON_PWM8EN_SIZE                                0x1
#define _PWM8CON_PWM8EN_LENGTH                              0x1
#define _PWM8CON_PWM8EN_MASK                                0x80

// Register: PWM7DC
#define PWM7DC PWM7DC
extern volatile unsigned short          PWM7DC              __at(0x3F64);
#ifndef _LIB_BUILD
asm("PWM7DC equ 03F64h");
#endif

// Register: PWM7DCL
#define PWM7DCL PWM7DCL
extern volatile unsigned char           PWM7DCL             __at(0x3F64);
#ifndef _LIB_BUILD
asm("PWM7DCL equ 03F64h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :6;
        unsigned DC                     :2;
    };
    struct {
        unsigned                        :6;
        unsigned DC0                    :1;
        unsigned DC1                    :1;
    };
    struct {
        unsigned                        :6;
        unsigned PWM7DC0                :1;
        unsigned PWM7DC1                :1;
    };
    struct {
        unsigned                        :6;
        unsigned PWMPW0                 :1;
        unsigned PWMPW1                 :1;
    };
} PWM7DCLbits_t;
extern volatile PWM7DCLbits_t PWM7DCLbits __at(0x3F64);
// bitfield macros
#define _PWM7DCL_DC_POSN                                    0x6
#define _PWM7DCL_DC_POSITION                                0x6
#define _PWM7DCL_DC_SIZE                                    0x2
#define _PWM7DCL_DC_LENGTH                                  0x2
#define _PWM7DCL_DC_MASK                                    0xC0
#define _PWM7DCL_DC0_POSN                                   0x6
#define _PWM7DCL_DC0_POSITION                               0x6
#define _PWM7DCL_DC0_SIZE                                   0x1
#define _PWM7DCL_DC0_LENGTH                                 0x1
#define _PWM7DCL_DC0_MASK                                   0x40
#define _PWM7DCL_DC1_POSN                                   0x7
#define _PWM7DCL_DC1_POSITION                               0x7
#define _PWM7DCL_DC1_SIZE                                   0x1
#define _PWM7DCL_DC1_LENGTH                                 0x1
#define _PWM7DCL_DC1_MASK                                   0x80
#define _PWM7DCL_PWM7DC0_POSN                               0x6
#define _PWM7DCL_PWM7DC0_POSITION                           0x6
#define _PWM7DCL_PWM7DC0_SIZE                               0x1
#define _PWM7DCL_PWM7DC0_LENGTH                             0x1
#define _PWM7DCL_PWM7DC0_MASK                               0x40
#define _PWM7DCL_PWM7DC1_POSN                               0x7
#define _PWM7DCL_PWM7DC1_POSITION                           0x7
#define _PWM7DCL_PWM7DC1_SIZE                               0x1
#define _PWM7DCL_PWM7DC1_LENGTH                             0x1
#define _PWM7DCL_PWM7DC1_MASK                               0x80
#define _PWM7DCL_PWMPW0_POSN                                0x6
#define _PWM7DCL_PWMPW0_POSITION                            0x6
#define _PWM7DCL_PWMPW0_SIZE                                0x1
#define _PWM7DCL_PWMPW0_LENGTH                              0x1
#define _PWM7DCL_PWMPW0_MASK                                0x40
#define _PWM7DCL_PWMPW1_POSN                                0x7
#define _PWM7DCL_PWMPW1_POSITION                            0x7
#define _PWM7DCL_PWMPW1_SIZE                                0x1
#define _PWM7DCL_PWMPW1_LENGTH                              0x1
#define _PWM7DCL_PWMPW1_MASK                                0x80

// Register: PWM7DCH
#define PWM7DCH PWM7DCH
extern volatile unsigned char           PWM7DCH             __at(0x3F65);
#ifndef _LIB_BUILD
asm("PWM7DCH equ 03F65h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DC                     :8;
    };
    struct {
        unsigned DC2                    :1;
        unsigned DC3                    :1;
        unsigned DC4                    :1;
        unsigned DC5                    :1;
        unsigned DC6                    :1;
        unsigned DC7                    :1;
        unsigned DC8                    :1;
        unsigned DC9                    :1;
    };
    struct {
        unsigned PWM7DC2                :1;
        unsigned PWM7DC3                :1;
        unsigned PWM7DC4                :1;
        unsigned PWM7DC5                :1;
        unsigned PWM7DC6                :1;
        unsigned PWM7DC7                :1;
        unsigned PWM7DC8                :1;
        unsigned PWM7DC9                :1;
    };
    struct {
        unsigned PWMPW2                 :1;
        unsigned PWMPW3                 :1;
        unsigned PWMPW4                 :1;
        unsigned PWMPW5                 :1;
        unsigned PWMPW6                 :1;
        unsigned PWMPW7                 :1;
        unsigned PWMPW8                 :1;
        unsigned PWMPW9                 :1;
    };
} PWM7DCHbits_t;
extern volatile PWM7DCHbits_t PWM7DCHbits __at(0x3F65);
// bitfield macros
#define _PWM7DCH_DC_POSN                                    0x0
#define _PWM7DCH_DC_POSITION                                0x0
#define _PWM7DCH_DC_SIZE                                    0x8
#define _PWM7DCH_DC_LENGTH                                  0x8
#define _PWM7DCH_DC_MASK                                    0xFF
#define _PWM7DCH_DC2_POSN                                   0x0
#define _PWM7DCH_DC2_POSITION                               0x0
#define _PWM7DCH_DC2_SIZE                                   0x1
#define _PWM7DCH_DC2_LENGTH                                 0x1
#define _PWM7DCH_DC2_MASK                                   0x1
#define _PWM7DCH_DC3_POSN                                   0x1
#define _PWM7DCH_DC3_POSITION                               0x1
#define _PWM7DCH_DC3_SIZE                                   0x1
#define _PWM7DCH_DC3_LENGTH                                 0x1
#define _PWM7DCH_DC3_MASK                                   0x2
#define _PWM7DCH_DC4_POSN                                   0x2
#define _PWM7DCH_DC4_POSITION                               0x2
#define _PWM7DCH_DC4_SIZE                                   0x1
#define _PWM7DCH_DC4_LENGTH                                 0x1
#define _PWM7DCH_DC4_MASK                                   0x4
#define _PWM7DCH_DC5_POSN                                   0x3
#define _PWM7DCH_DC5_POSITION                               0x3
#define _PWM7DCH_DC5_SIZE                                   0x1
#define _PWM7DCH_DC5_LENGTH                                 0x1
#define _PWM7DCH_DC5_MASK                                   0x8
#define _PWM7DCH_DC6_POSN                                   0x4
#define _PWM7DCH_DC6_POSITION                               0x4
#define _PWM7DCH_DC6_SIZE                                   0x1
#define _PWM7DCH_DC6_LENGTH                                 0x1
#define _PWM7DCH_DC6_MASK                                   0x10
#define _PWM7DCH_DC7_POSN                                   0x5
#define _PWM7DCH_DC7_POSITION                               0x5
#define _PWM7DCH_DC7_SIZE                                   0x1
#define _PWM7DCH_DC7_LENGTH                                 0x1
#define _PWM7DCH_DC7_MASK                                   0x20
#define _PWM7DCH_DC8_POSN                                   0x6
#define _PWM7DCH_DC8_POSITION                               0x6
#define _PWM7DCH_DC8_SIZE                                   0x1
#define _PWM7DCH_DC8_LENGTH                                 0x1
#define _PWM7DCH_DC8_MASK                                   0x40
#define _PWM7DCH_DC9_POSN                                   0x7
#define _PWM7DCH_DC9_POSITION                               0x7
#define _PWM7DCH_DC9_SIZE                                   0x1
#define _PWM7DCH_DC9_LENGTH                                 0x1
#define _PWM7DCH_DC9_MASK                                   0x80
#define _PWM7DCH_PWM7DC2_POSN                               0x0
#define _PWM7DCH_PWM7DC2_POSITION                           0x0
#define _PWM7DCH_PWM7DC2_SIZE                               0x1
#define _PWM7DCH_PWM7DC2_LENGTH                             0x1
#define _PWM7DCH_PWM7DC2_MASK                               0x1
#define _PWM7DCH_PWM7DC3_POSN                               0x1
#define _PWM7DCH_PWM7DC3_POSITION                           0x1
#define _PWM7DCH_PWM7DC3_SIZE                               0x1
#define _PWM7DCH_PWM7DC3_LENGTH                             0x1
#define _PWM7DCH_PWM7DC3_MASK                               0x2
#define _PWM7DCH_PWM7DC4_POSN                               0x2
#define _PWM7DCH_PWM7DC4_POSITION                           0x2
#define _PWM7DCH_PWM7DC4_SIZE                               0x1
#define _PWM7DCH_PWM7DC4_LENGTH                             0x1
#define _PWM7DCH_PWM7DC4_MASK                               0x4
#define _PWM7DCH_PWM7DC5_POSN                               0x3
#define _PWM7DCH_PWM7DC5_POSITION                           0x3
#define _PWM7DCH_PWM7DC5_SIZE                               0x1
#define _PWM7DCH_PWM7DC5_LENGTH                             0x1
#define _PWM7DCH_PWM7DC5_MASK                               0x8
#define _PWM7DCH_PWM7DC6_POSN                               0x4
#define _PWM7DCH_PWM7DC6_POSITION                           0x4
#define _PWM7DCH_PWM7DC6_SIZE                               0x1
#define _PWM7DCH_PWM7DC6_LENGTH                             0x1
#define _PWM7DCH_PWM7DC6_MASK                               0x10
#define _PWM7DCH_PWM7DC7_POSN                               0x5
#define _PWM7DCH_PWM7DC7_POSITION                           0x5
#define _PWM7DCH_PWM7DC7_SIZE                               0x1
#define _PWM7DCH_PWM7DC7_LENGTH                             0x1
#define _PWM7DCH_PWM7DC7_MASK                               0x20
#define _PWM7DCH_PWM7DC8_POSN                               0x6
#define _PWM7DCH_PWM7DC8_POSITION                           0x6
#define _PWM7DCH_PWM7DC8_SIZE                               0x1
#define _PWM7DCH_PWM7DC8_LENGTH                             0x1
#define _PWM7DCH_PWM7DC8_MASK                               0x40
#define _PWM7DCH_PWM7DC9_POSN                               0x7
#define _PWM7DCH_PWM7DC9_POSITION                           0x7
#define _PWM7DCH_PWM7DC9_SIZE                               0x1
#define _PWM7DCH_PWM7DC9_LENGTH                             0x1
#define _PWM7DCH_PWM7DC9_MASK                               0x80
#define _PWM7DCH_PWMPW2_POSN                                0x0
#define _PWM7DCH_PWMPW2_POSITION                            0x0
#define _PWM7DCH_PWMPW2_SIZE                                0x1
#define _PWM7DCH_PWMPW2_LENGTH                              0x1
#define _PWM7DCH_PWMPW2_MASK                                0x1
#define _PWM7DCH_PWMPW3_POSN                                0x1
#define _PWM7DCH_PWMPW3_POSITION                            0x1
#define _PWM7DCH_PWMPW3_SIZE                                0x1
#define _PWM7DCH_PWMPW3_LENGTH                              0x1
#define _PWM7DCH_PWMPW3_MASK                                0x2
#define _PWM7DCH_PWMPW4_POSN                                0x2
#define _PWM7DCH_PWMPW4_POSITION                            0x2
#define _PWM7DCH_PWMPW4_SIZE                                0x1
#define _PWM7DCH_PWMPW4_LENGTH                              0x1
#define _PWM7DCH_PWMPW4_MASK                                0x4
#define _PWM7DCH_PWMPW5_POSN                                0x3
#define _PWM7DCH_PWMPW5_POSITION                            0x3
#define _PWM7DCH_PWMPW5_SIZE                                0x1
#define _PWM7DCH_PWMPW5_LENGTH                              0x1
#define _PWM7DCH_PWMPW5_MASK                                0x8
#define _PWM7DCH_PWMPW6_POSN                                0x4
#define _PWM7DCH_PWMPW6_POSITION                            0x4
#define _PWM7DCH_PWMPW6_SIZE                                0x1
#define _PWM7DCH_PWMPW6_LENGTH                              0x1
#define _PWM7DCH_PWMPW6_MASK                                0x10
#define _PWM7DCH_PWMPW7_POSN                                0x5
#define _PWM7DCH_PWMPW7_POSITION                            0x5
#define _PWM7DCH_PWMPW7_SIZE                                0x1
#define _PWM7DCH_PWMPW7_LENGTH                              0x1
#define _PWM7DCH_PWMPW7_MASK                                0x20
#define _PWM7DCH_PWMPW8_POSN                                0x6
#define _PWM7DCH_PWMPW8_POSITION                            0x6
#define _PWM7DCH_PWMPW8_SIZE                                0x1
#define _PWM7DCH_PWMPW8_LENGTH                              0x1
#define _PWM7DCH_PWMPW8_MASK                                0x40
#define _PWM7DCH_PWMPW9_POSN                                0x7
#define _PWM7DCH_PWMPW9_POSITION                            0x7
#define _PWM7DCH_PWMPW9_SIZE                                0x1
#define _PWM7DCH_PWMPW9_LENGTH                              0x1
#define _PWM7DCH_PWMPW9_MASK                                0x80

// Register: PWM7CON
#define PWM7CON PWM7CON
extern volatile unsigned char           PWM7CON             __at(0x3F66);
#ifndef _LIB_BUILD
asm("PWM7CON equ 03F66h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :4;
        unsigned POL                    :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned                        :4;
        unsigned PWM7POL                :1;
        unsigned PWM7OUT                :1;
        unsigned                        :1;
        unsigned PWM7EN                 :1;
    };
} PWM7CONbits_t;
extern volatile PWM7CONbits_t PWM7CONbits __at(0x3F66);
// bitfield macros
#define _PWM7CON_POL_POSN                                   0x4
#define _PWM7CON_POL_POSITION                               0x4
#define _PWM7CON_POL_SIZE                                   0x1
#define _PWM7CON_POL_LENGTH                                 0x1
#define _PWM7CON_POL_MASK                                   0x10
#define _PWM7CON_OUT_POSN                                   0x5
#define _PWM7CON_OUT_POSITION                               0x5
#define _PWM7CON_OUT_SIZE                                   0x1
#define _PWM7CON_OUT_LENGTH                                 0x1
#define _PWM7CON_OUT_MASK                                   0x20
#define _PWM7CON_EN_POSN                                    0x7
#define _PWM7CON_EN_POSITION                                0x7
#define _PWM7CON_EN_SIZE                                    0x1
#define _PWM7CON_EN_LENGTH                                  0x1
#define _PWM7CON_EN_MASK                                    0x80
#define _PWM7CON_PWM7POL_POSN                               0x4
#define _PWM7CON_PWM7POL_POSITION                           0x4
#define _PWM7CON_PWM7POL_SIZE                               0x1
#define _PWM7CON_PWM7POL_LENGTH                             0x1
#define _PWM7CON_PWM7POL_MASK                               0x10
#define _PWM7CON_PWM7OUT_POSN                               0x5
#define _PWM7CON_PWM7OUT_POSITION                           0x5
#define _PWM7CON_PWM7OUT_SIZE                               0x1
#define _PWM7CON_PWM7OUT_LENGTH                             0x1
#define _PWM7CON_PWM7OUT_MASK                               0x20
#define _PWM7CON_PWM7EN_POSN                                0x7
#define _PWM7CON_PWM7EN_POSITION                            0x7
#define _PWM7CON_PWM7EN_SIZE                                0x1
#define _PWM7CON_PWM7EN_LENGTH                              0x1
#define _PWM7CON_PWM7EN_MASK                                0x80

// Register: PWM6DC
#define PWM6DC PWM6DC
extern volatile unsigned short          PWM6DC              __at(0x3F68);
#ifndef _LIB_BUILD
asm("PWM6DC equ 03F68h");
#endif

// Register: PWM6DCL
#define PWM6DCL PWM6DCL
extern volatile unsigned char           PWM6DCL             __at(0x3F68);
#ifndef _LIB_BUILD
asm("PWM6DCL equ 03F68h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :6;
        unsigned DC                     :2;
    };
    struct {
        unsigned                        :6;
        unsigned DC0                    :1;
        unsigned DC1                    :1;
    };
    struct {
        unsigned                        :6;
        unsigned PWM6DC0                :1;
        unsigned PWM6DC1                :1;
    };
    struct {
        unsigned                        :6;
        unsigned PWMPW0                 :1;
        unsigned PWMPW1                 :1;
    };
} PWM6DCLbits_t;
extern volatile PWM6DCLbits_t PWM6DCLbits __at(0x3F68);
// bitfield macros
#define _PWM6DCL_DC_POSN                                    0x6
#define _PWM6DCL_DC_POSITION                                0x6
#define _PWM6DCL_DC_SIZE                                    0x2
#define _PWM6DCL_DC_LENGTH                                  0x2
#define _PWM6DCL_DC_MASK                                    0xC0
#define _PWM6DCL_DC0_POSN                                   0x6
#define _PWM6DCL_DC0_POSITION                               0x6
#define _PWM6DCL_DC0_SIZE                                   0x1
#define _PWM6DCL_DC0_LENGTH                                 0x1
#define _PWM6DCL_DC0_MASK                                   0x40
#define _PWM6DCL_DC1_POSN                                   0x7
#define _PWM6DCL_DC1_POSITION                               0x7
#define _PWM6DCL_DC1_SIZE                                   0x1
#define _PWM6DCL_DC1_LENGTH                                 0x1
#define _PWM6DCL_DC1_MASK                                   0x80
#define _PWM6DCL_PWM6DC0_POSN                               0x6
#define _PWM6DCL_PWM6DC0_POSITION                           0x6
#define _PWM6DCL_PWM6DC0_SIZE                               0x1
#define _PWM6DCL_PWM6DC0_LENGTH                             0x1
#define _PWM6DCL_PWM6DC0_MASK                               0x40
#define _PWM6DCL_PWM6DC1_POSN                               0x7
#define _PWM6DCL_PWM6DC1_POSITION                           0x7
#define _PWM6DCL_PWM6DC1_SIZE                               0x1
#define _PWM6DCL_PWM6DC1_LENGTH                             0x1
#define _PWM6DCL_PWM6DC1_MASK                               0x80
#define _PWM6DCL_PWMPW0_POSN                                0x6
#define _PWM6DCL_PWMPW0_POSITION                            0x6
#define _PWM6DCL_PWMPW0_SIZE                                0x1
#define _PWM6DCL_PWMPW0_LENGTH                              0x1
#define _PWM6DCL_PWMPW0_MASK                                0x40
#define _PWM6DCL_PWMPW1_POSN                                0x7
#define _PWM6DCL_PWMPW1_POSITION                            0x7
#define _PWM6DCL_PWMPW1_SIZE                                0x1
#define _PWM6DCL_PWMPW1_LENGTH                              0x1
#define _PWM6DCL_PWMPW1_MASK                                0x80

// Register: PWM6DCH
#define PWM6DCH PWM6DCH
extern volatile unsigned char           PWM6DCH             __at(0x3F69);
#ifndef _LIB_BUILD
asm("PWM6DCH equ 03F69h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DC                     :8;
    };
    struct {
        unsigned DC2                    :1;
        unsigned DC3                    :1;
        unsigned DC4                    :1;
        unsigned DC5                    :1;
        unsigned DC6                    :1;
        unsigned DC7                    :1;
        unsigned DC8                    :1;
        unsigned DC9                    :1;
    };
    struct {
        unsigned PWM6DC2                :1;
        unsigned PWM6DC3                :1;
        unsigned PWM6DC4                :1;
        unsigned PWM6DC5                :1;
        unsigned PWM6DC6                :1;
        unsigned PWM6DC7                :1;
        unsigned PWM6DC8                :1;
        unsigned PWM6DC9                :1;
    };
    struct {
        unsigned PWMPW2                 :1;
        unsigned PWMPW3                 :1;
        unsigned PWMPW4                 :1;
        unsigned PWMPW5                 :1;
        unsigned PWMPW6                 :1;
        unsigned PWMPW7                 :1;
        unsigned PWMPW8                 :1;
        unsigned PWMPW9                 :1;
    };
} PWM6DCHbits_t;
extern volatile PWM6DCHbits_t PWM6DCHbits __at(0x3F69);
// bitfield macros
#define _PWM6DCH_DC_POSN                                    0x0
#define _PWM6DCH_DC_POSITION                                0x0
#define _PWM6DCH_DC_SIZE                                    0x8
#define _PWM6DCH_DC_LENGTH                                  0x8
#define _PWM6DCH_DC_MASK                                    0xFF
#define _PWM6DCH_DC2_POSN                                   0x0
#define _PWM6DCH_DC2_POSITION                               0x0
#define _PWM6DCH_DC2_SIZE                                   0x1
#define _PWM6DCH_DC2_LENGTH                                 0x1
#define _PWM6DCH_DC2_MASK                                   0x1
#define _PWM6DCH_DC3_POSN                                   0x1
#define _PWM6DCH_DC3_POSITION                               0x1
#define _PWM6DCH_DC3_SIZE                                   0x1
#define _PWM6DCH_DC3_LENGTH                                 0x1
#define _PWM6DCH_DC3_MASK                                   0x2
#define _PWM6DCH_DC4_POSN                                   0x2
#define _PWM6DCH_DC4_POSITION                               0x2
#define _PWM6DCH_DC4_SIZE                                   0x1
#define _PWM6DCH_DC4_LENGTH                                 0x1
#define _PWM6DCH_DC4_MASK                                   0x4
#define _PWM6DCH_DC5_POSN                                   0x3
#define _PWM6DCH_DC5_POSITION                               0x3
#define _PWM6DCH_DC5_SIZE                                   0x1
#define _PWM6DCH_DC5_LENGTH                                 0x1
#define _PWM6DCH_DC5_MASK                                   0x8
#define _PWM6DCH_DC6_POSN                                   0x4
#define _PWM6DCH_DC6_POSITION                               0x4
#define _PWM6DCH_DC6_SIZE                                   0x1
#define _PWM6DCH_DC6_LENGTH                                 0x1
#define _PWM6DCH_DC6_MASK                                   0x10
#define _PWM6DCH_DC7_POSN                                   0x5
#define _PWM6DCH_DC7_POSITION                               0x5
#define _PWM6DCH_DC7_SIZE                                   0x1
#define _PWM6DCH_DC7_LENGTH                                 0x1
#define _PWM6DCH_DC7_MASK                                   0x20
#define _PWM6DCH_DC8_POSN                                   0x6
#define _PWM6DCH_DC8_POSITION                               0x6
#define _PWM6DCH_DC8_SIZE                                   0x1
#define _PWM6DCH_DC8_LENGTH                                 0x1
#define _PWM6DCH_DC8_MASK                                   0x40
#define _PWM6DCH_DC9_POSN                                   0x7
#define _PWM6DCH_DC9_POSITION                               0x7
#define _PWM6DCH_DC9_SIZE                                   0x1
#define _PWM6DCH_DC9_LENGTH                                 0x1
#define _PWM6DCH_DC9_MASK                                   0x80
#define _PWM6DCH_PWM6DC2_POSN                               0x0
#define _PWM6DCH_PWM6DC2_POSITION                           0x0
#define _PWM6DCH_PWM6DC2_SIZE                               0x1
#define _PWM6DCH_PWM6DC2_LENGTH                             0x1
#define _PWM6DCH_PWM6DC2_MASK                               0x1
#define _PWM6DCH_PWM6DC3_POSN                               0x1
#define _PWM6DCH_PWM6DC3_POSITION                           0x1
#define _PWM6DCH_PWM6DC3_SIZE                               0x1
#define _PWM6DCH_PWM6DC3_LENGTH                             0x1
#define _PWM6DCH_PWM6DC3_MASK                               0x2
#define _PWM6DCH_PWM6DC4_POSN                               0x2
#define _PWM6DCH_PWM6DC4_POSITION                           0x2
#define _PWM6DCH_PWM6DC4_SIZE                               0x1
#define _PWM6DCH_PWM6DC4_LENGTH                             0x1
#define _PWM6DCH_PWM6DC4_MASK                               0x4
#define _PWM6DCH_PWM6DC5_POSN                               0x3
#define _PWM6DCH_PWM6DC5_POSITION                           0x3
#define _PWM6DCH_PWM6DC5_SIZE                               0x1
#define _PWM6DCH_PWM6DC5_LENGTH                             0x1
#define _PWM6DCH_PWM6DC5_MASK                               0x8
#define _PWM6DCH_PWM6DC6_POSN                               0x4
#define _PWM6DCH_PWM6DC6_POSITION                           0x4
#define _PWM6DCH_PWM6DC6_SIZE                               0x1
#define _PWM6DCH_PWM6DC6_LENGTH                             0x1
#define _PWM6DCH_PWM6DC6_MASK                               0x10
#define _PWM6DCH_PWM6DC7_POSN                               0x5
#define _PWM6DCH_PWM6DC7_POSITION                           0x5
#define _PWM6DCH_PWM6DC7_SIZE                               0x1
#define _PWM6DCH_PWM6DC7_LENGTH                             0x1
#define _PWM6DCH_PWM6DC7_MASK                               0x20
#define _PWM6DCH_PWM6DC8_POSN                               0x6
#define _PWM6DCH_PWM6DC8_POSITION                           0x6
#define _PWM6DCH_PWM6DC8_SIZE                               0x1
#define _PWM6DCH_PWM6DC8_LENGTH                             0x1
#define _PWM6DCH_PWM6DC8_MASK                               0x40
#define _PWM6DCH_PWM6DC9_POSN                               0x7
#define _PWM6DCH_PWM6DC9_POSITION                           0x7
#define _PWM6DCH_PWM6DC9_SIZE                               0x1
#define _PWM6DCH_PWM6DC9_LENGTH                             0x1
#define _PWM6DCH_PWM6DC9_MASK                               0x80
#define _PWM6DCH_PWMPW2_POSN                                0x0
#define _PWM6DCH_PWMPW2_POSITION                            0x0
#define _PWM6DCH_PWMPW2_SIZE                                0x1
#define _PWM6DCH_PWMPW2_LENGTH                              0x1
#define _PWM6DCH_PWMPW2_MASK                                0x1
#define _PWM6DCH_PWMPW3_POSN                                0x1
#define _PWM6DCH_PWMPW3_POSITION                            0x1
#define _PWM6DCH_PWMPW3_SIZE                                0x1
#define _PWM6DCH_PWMPW3_LENGTH                              0x1
#define _PWM6DCH_PWMPW3_MASK                                0x2
#define _PWM6DCH_PWMPW4_POSN                                0x2
#define _PWM6DCH_PWMPW4_POSITION                            0x2
#define _PWM6DCH_PWMPW4_SIZE                                0x1
#define _PWM6DCH_PWMPW4_LENGTH                              0x1
#define _PWM6DCH_PWMPW4_MASK                                0x4
#define _PWM6DCH_PWMPW5_POSN                                0x3
#define _PWM6DCH_PWMPW5_POSITION                            0x3
#define _PWM6DCH_PWMPW5_SIZE                                0x1
#define _PWM6DCH_PWMPW5_LENGTH                              0x1
#define _PWM6DCH_PWMPW5_MASK                                0x8
#define _PWM6DCH_PWMPW6_POSN                                0x4
#define _PWM6DCH_PWMPW6_POSITION                            0x4
#define _PWM6DCH_PWMPW6_SIZE                                0x1
#define _PWM6DCH_PWMPW6_LENGTH                              0x1
#define _PWM6DCH_PWMPW6_MASK                                0x10
#define _PWM6DCH_PWMPW7_POSN                                0x5
#define _PWM6DCH_PWMPW7_POSITION                            0x5
#define _PWM6DCH_PWMPW7_SIZE                                0x1
#define _PWM6DCH_PWMPW7_LENGTH                              0x1
#define _PWM6DCH_PWMPW7_MASK                                0x20
#define _PWM6DCH_PWMPW8_POSN                                0x6
#define _PWM6DCH_PWMPW8_POSITION                            0x6
#define _PWM6DCH_PWMPW8_SIZE                                0x1
#define _PWM6DCH_PWMPW8_LENGTH                              0x1
#define _PWM6DCH_PWMPW8_MASK                                0x40
#define _PWM6DCH_PWMPW9_POSN                                0x7
#define _PWM6DCH_PWMPW9_POSITION                            0x7
#define _PWM6DCH_PWMPW9_SIZE                                0x1
#define _PWM6DCH_PWMPW9_LENGTH                              0x1
#define _PWM6DCH_PWMPW9_MASK                                0x80

// Register: PWM6CON
#define PWM6CON PWM6CON
extern volatile unsigned char           PWM6CON             __at(0x3F6A);
#ifndef _LIB_BUILD
asm("PWM6CON equ 03F6Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :4;
        unsigned POL                    :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned                        :4;
        unsigned PWM6POL                :1;
        unsigned PWM6OUT                :1;
        unsigned                        :1;
        unsigned PWM6EN                 :1;
    };
} PWM6CONbits_t;
extern volatile PWM6CONbits_t PWM6CONbits __at(0x3F6A);
// bitfield macros
#define _PWM6CON_POL_POSN                                   0x4
#define _PWM6CON_POL_POSITION                               0x4
#define _PWM6CON_POL_SIZE                                   0x1
#define _PWM6CON_POL_LENGTH                                 0x1
#define _PWM6CON_POL_MASK                                   0x10
#define _PWM6CON_OUT_POSN                                   0x5
#define _PWM6CON_OUT_POSITION                               0x5
#define _PWM6CON_OUT_SIZE                                   0x1
#define _PWM6CON_OUT_LENGTH                                 0x1
#define _PWM6CON_OUT_MASK                                   0x20
#define _PWM6CON_EN_POSN                                    0x7
#define _PWM6CON_EN_POSITION                                0x7
#define _PWM6CON_EN_SIZE                                    0x1
#define _PWM6CON_EN_LENGTH                                  0x1
#define _PWM6CON_EN_MASK                                    0x80
#define _PWM6CON_PWM6POL_POSN                               0x4
#define _PWM6CON_PWM6POL_POSITION                           0x4
#define _PWM6CON_PWM6POL_SIZE                               0x1
#define _PWM6CON_PWM6POL_LENGTH                             0x1
#define _PWM6CON_PWM6POL_MASK                               0x10
#define _PWM6CON_PWM6OUT_POSN                               0x5
#define _PWM6CON_PWM6OUT_POSITION                           0x5
#define _PWM6CON_PWM6OUT_SIZE                               0x1
#define _PWM6CON_PWM6OUT_LENGTH                             0x1
#define _PWM6CON_PWM6OUT_MASK                               0x20
#define _PWM6CON_PWM6EN_POSN                                0x7
#define _PWM6CON_PWM6EN_POSITION                            0x7
#define _PWM6CON_PWM6EN_SIZE                                0x1
#define _PWM6CON_PWM6EN_LENGTH                              0x1
#define _PWM6CON_PWM6EN_MASK                                0x80

// Register: PWM5DC
#define PWM5DC PWM5DC
extern volatile unsigned short          PWM5DC              __at(0x3F6C);
#ifndef _LIB_BUILD
asm("PWM5DC equ 03F6Ch");
#endif

// Register: PWM5DCL
#define PWM5DCL PWM5DCL
extern volatile unsigned char           PWM5DCL             __at(0x3F6C);
#ifndef _LIB_BUILD
asm("PWM5DCL equ 03F6Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :6;
        unsigned DC                     :2;
    };
    struct {
        unsigned                        :6;
        unsigned DC0                    :1;
        unsigned DC1                    :1;
    };
    struct {
        unsigned                        :6;
        unsigned PWM5DC0                :1;
        unsigned PWM5DC1                :1;
    };
    struct {
        unsigned                        :6;
        unsigned PWMPW0                 :1;
        unsigned PWMPW1                 :1;
    };
} PWM5DCLbits_t;
extern volatile PWM5DCLbits_t PWM5DCLbits __at(0x3F6C);
// bitfield macros
#define _PWM5DCL_DC_POSN                                    0x6
#define _PWM5DCL_DC_POSITION                                0x6
#define _PWM5DCL_DC_SIZE                                    0x2
#define _PWM5DCL_DC_LENGTH                                  0x2
#define _PWM5DCL_DC_MASK                                    0xC0
#define _PWM5DCL_DC0_POSN                                   0x6
#define _PWM5DCL_DC0_POSITION                               0x6
#define _PWM5DCL_DC0_SIZE                                   0x1
#define _PWM5DCL_DC0_LENGTH                                 0x1
#define _PWM5DCL_DC0_MASK                                   0x40
#define _PWM5DCL_DC1_POSN                                   0x7
#define _PWM5DCL_DC1_POSITION                               0x7
#define _PWM5DCL_DC1_SIZE                                   0x1
#define _PWM5DCL_DC1_LENGTH                                 0x1
#define _PWM5DCL_DC1_MASK                                   0x80
#define _PWM5DCL_PWM5DC0_POSN                               0x6
#define _PWM5DCL_PWM5DC0_POSITION                           0x6
#define _PWM5DCL_PWM5DC0_SIZE                               0x1
#define _PWM5DCL_PWM5DC0_LENGTH                             0x1
#define _PWM5DCL_PWM5DC0_MASK                               0x40
#define _PWM5DCL_PWM5DC1_POSN                               0x7
#define _PWM5DCL_PWM5DC1_POSITION                           0x7
#define _PWM5DCL_PWM5DC1_SIZE                               0x1
#define _PWM5DCL_PWM5DC1_LENGTH                             0x1
#define _PWM5DCL_PWM5DC1_MASK                               0x80
#define _PWM5DCL_PWMPW0_POSN                                0x6
#define _PWM5DCL_PWMPW0_POSITION                            0x6
#define _PWM5DCL_PWMPW0_SIZE                                0x1
#define _PWM5DCL_PWMPW0_LENGTH                              0x1
#define _PWM5DCL_PWMPW0_MASK                                0x40
#define _PWM5DCL_PWMPW1_POSN                                0x7
#define _PWM5DCL_PWMPW1_POSITION                            0x7
#define _PWM5DCL_PWMPW1_SIZE                                0x1
#define _PWM5DCL_PWMPW1_LENGTH                              0x1
#define _PWM5DCL_PWMPW1_MASK                                0x80

// Register: PWM5DCH
#define PWM5DCH PWM5DCH
extern volatile unsigned char           PWM5DCH             __at(0x3F6D);
#ifndef _LIB_BUILD
asm("PWM5DCH equ 03F6Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DC                     :8;
    };
    struct {
        unsigned DC2                    :1;
        unsigned DC3                    :1;
        unsigned DC4                    :1;
        unsigned DC5                    :1;
        unsigned DC6                    :1;
        unsigned DC7                    :1;
        unsigned DC8                    :1;
        unsigned DC9                    :1;
    };
    struct {
        unsigned PWM5DC2                :1;
        unsigned PWM5DC3                :1;
        unsigned PWM5DC4                :1;
        unsigned PWM5DC5                :1;
        unsigned PWM5DC6                :1;
        unsigned PWM5DC7                :1;
        unsigned PWM5DC8                :1;
        unsigned PWM5DC9                :1;
    };
    struct {
        unsigned PWMPW2                 :1;
        unsigned PWMPW3                 :1;
        unsigned PWMPW4                 :1;
        unsigned PWMPW5                 :1;
        unsigned PWMPW6                 :1;
        unsigned PWMPW7                 :1;
        unsigned PWMPW8                 :1;
        unsigned PWMPW9                 :1;
    };
} PWM5DCHbits_t;
extern volatile PWM5DCHbits_t PWM5DCHbits __at(0x3F6D);
// bitfield macros
#define _PWM5DCH_DC_POSN                                    0x0
#define _PWM5DCH_DC_POSITION                                0x0
#define _PWM5DCH_DC_SIZE                                    0x8
#define _PWM5DCH_DC_LENGTH                                  0x8
#define _PWM5DCH_DC_MASK                                    0xFF
#define _PWM5DCH_DC2_POSN                                   0x0
#define _PWM5DCH_DC2_POSITION                               0x0
#define _PWM5DCH_DC2_SIZE                                   0x1
#define _PWM5DCH_DC2_LENGTH                                 0x1
#define _PWM5DCH_DC2_MASK                                   0x1
#define _PWM5DCH_DC3_POSN                                   0x1
#define _PWM5DCH_DC3_POSITION                               0x1
#define _PWM5DCH_DC3_SIZE                                   0x1
#define _PWM5DCH_DC3_LENGTH                                 0x1
#define _PWM5DCH_DC3_MASK                                   0x2
#define _PWM5DCH_DC4_POSN                                   0x2
#define _PWM5DCH_DC4_POSITION                               0x2
#define _PWM5DCH_DC4_SIZE                                   0x1
#define _PWM5DCH_DC4_LENGTH                                 0x1
#define _PWM5DCH_DC4_MASK                                   0x4
#define _PWM5DCH_DC5_POSN                                   0x3
#define _PWM5DCH_DC5_POSITION                               0x3
#define _PWM5DCH_DC5_SIZE                                   0x1
#define _PWM5DCH_DC5_LENGTH                                 0x1
#define _PWM5DCH_DC5_MASK                                   0x8
#define _PWM5DCH_DC6_POSN                                   0x4
#define _PWM5DCH_DC6_POSITION                               0x4
#define _PWM5DCH_DC6_SIZE                                   0x1
#define _PWM5DCH_DC6_LENGTH                                 0x1
#define _PWM5DCH_DC6_MASK                                   0x10
#define _PWM5DCH_DC7_POSN                                   0x5
#define _PWM5DCH_DC7_POSITION                               0x5
#define _PWM5DCH_DC7_SIZE                                   0x1
#define _PWM5DCH_DC7_LENGTH                                 0x1
#define _PWM5DCH_DC7_MASK                                   0x20
#define _PWM5DCH_DC8_POSN                                   0x6
#define _PWM5DCH_DC8_POSITION                               0x6
#define _PWM5DCH_DC8_SIZE                                   0x1
#define _PWM5DCH_DC8_LENGTH                                 0x1
#define _PWM5DCH_DC8_MASK                                   0x40
#define _PWM5DCH_DC9_POSN                                   0x7
#define _PWM5DCH_DC9_POSITION                               0x7
#define _PWM5DCH_DC9_SIZE                                   0x1
#define _PWM5DCH_DC9_LENGTH                                 0x1
#define _PWM5DCH_DC9_MASK                                   0x80
#define _PWM5DCH_PWM5DC2_POSN                               0x0
#define _PWM5DCH_PWM5DC2_POSITION                           0x0
#define _PWM5DCH_PWM5DC2_SIZE                               0x1
#define _PWM5DCH_PWM5DC2_LENGTH                             0x1
#define _PWM5DCH_PWM5DC2_MASK                               0x1
#define _PWM5DCH_PWM5DC3_POSN                               0x1
#define _PWM5DCH_PWM5DC3_POSITION                           0x1
#define _PWM5DCH_PWM5DC3_SIZE                               0x1
#define _PWM5DCH_PWM5DC3_LENGTH                             0x1
#define _PWM5DCH_PWM5DC3_MASK                               0x2
#define _PWM5DCH_PWM5DC4_POSN                               0x2
#define _PWM5DCH_PWM5DC4_POSITION                           0x2
#define _PWM5DCH_PWM5DC4_SIZE                               0x1
#define _PWM5DCH_PWM5DC4_LENGTH                             0x1
#define _PWM5DCH_PWM5DC4_MASK                               0x4
#define _PWM5DCH_PWM5DC5_POSN                               0x3
#define _PWM5DCH_PWM5DC5_POSITION                           0x3
#define _PWM5DCH_PWM5DC5_SIZE                               0x1
#define _PWM5DCH_PWM5DC5_LENGTH                             0x1
#define _PWM5DCH_PWM5DC5_MASK                               0x8
#define _PWM5DCH_PWM5DC6_POSN                               0x4
#define _PWM5DCH_PWM5DC6_POSITION                           0x4
#define _PWM5DCH_PWM5DC6_SIZE                               0x1
#define _PWM5DCH_PWM5DC6_LENGTH                             0x1
#define _PWM5DCH_PWM5DC6_MASK                               0x10
#define _PWM5DCH_PWM5DC7_POSN                               0x5
#define _PWM5DCH_PWM5DC7_POSITION                           0x5
#define _PWM5DCH_PWM5DC7_SIZE                               0x1
#define _PWM5DCH_PWM5DC7_LENGTH                             0x1
#define _PWM5DCH_PWM5DC7_MASK                               0x20
#define _PWM5DCH_PWM5DC8_POSN                               0x6
#define _PWM5DCH_PWM5DC8_POSITION                           0x6
#define _PWM5DCH_PWM5DC8_SIZE                               0x1
#define _PWM5DCH_PWM5DC8_LENGTH                             0x1
#define _PWM5DCH_PWM5DC8_MASK                               0x40
#define _PWM5DCH_PWM5DC9_POSN                               0x7
#define _PWM5DCH_PWM5DC9_POSITION                           0x7
#define _PWM5DCH_PWM5DC9_SIZE                               0x1
#define _PWM5DCH_PWM5DC9_LENGTH                             0x1
#define _PWM5DCH_PWM5DC9_MASK                               0x80
#define _PWM5DCH_PWMPW2_POSN                                0x0
#define _PWM5DCH_PWMPW2_POSITION                            0x0
#define _PWM5DCH_PWMPW2_SIZE                                0x1
#define _PWM5DCH_PWMPW2_LENGTH                              0x1
#define _PWM5DCH_PWMPW2_MASK                                0x1
#define _PWM5DCH_PWMPW3_POSN                                0x1
#define _PWM5DCH_PWMPW3_POSITION                            0x1
#define _PWM5DCH_PWMPW3_SIZE                                0x1
#define _PWM5DCH_PWMPW3_LENGTH                              0x1
#define _PWM5DCH_PWMPW3_MASK                                0x2
#define _PWM5DCH_PWMPW4_POSN                                0x2
#define _PWM5DCH_PWMPW4_POSITION                            0x2
#define _PWM5DCH_PWMPW4_SIZE                                0x1
#define _PWM5DCH_PWMPW4_LENGTH                              0x1
#define _PWM5DCH_PWMPW4_MASK                                0x4
#define _PWM5DCH_PWMPW5_POSN                                0x3
#define _PWM5DCH_PWMPW5_POSITION                            0x3
#define _PWM5DCH_PWMPW5_SIZE                                0x1
#define _PWM5DCH_PWMPW5_LENGTH                              0x1
#define _PWM5DCH_PWMPW5_MASK                                0x8
#define _PWM5DCH_PWMPW6_POSN                                0x4
#define _PWM5DCH_PWMPW6_POSITION                            0x4
#define _PWM5DCH_PWMPW6_SIZE                                0x1
#define _PWM5DCH_PWMPW6_LENGTH                              0x1
#define _PWM5DCH_PWMPW6_MASK                                0x10
#define _PWM5DCH_PWMPW7_POSN                                0x5
#define _PWM5DCH_PWMPW7_POSITION                            0x5
#define _PWM5DCH_PWMPW7_SIZE                                0x1
#define _PWM5DCH_PWMPW7_LENGTH                              0x1
#define _PWM5DCH_PWMPW7_MASK                                0x20
#define _PWM5DCH_PWMPW8_POSN                                0x6
#define _PWM5DCH_PWMPW8_POSITION                            0x6
#define _PWM5DCH_PWMPW8_SIZE                                0x1
#define _PWM5DCH_PWMPW8_LENGTH                              0x1
#define _PWM5DCH_PWMPW8_MASK                                0x40
#define _PWM5DCH_PWMPW9_POSN                                0x7
#define _PWM5DCH_PWMPW9_POSITION                            0x7
#define _PWM5DCH_PWMPW9_SIZE                                0x1
#define _PWM5DCH_PWMPW9_LENGTH                              0x1
#define _PWM5DCH_PWMPW9_MASK                                0x80

// Register: PWM5CON
#define PWM5CON PWM5CON
extern volatile unsigned char           PWM5CON             __at(0x3F6E);
#ifndef _LIB_BUILD
asm("PWM5CON equ 03F6Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :4;
        unsigned POL                    :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned                        :4;
        unsigned PWM5POL                :1;
        unsigned PWM5OUT                :1;
        unsigned                        :1;
        unsigned PWM5EN                 :1;
    };
} PWM5CONbits_t;
extern volatile PWM5CONbits_t PWM5CONbits __at(0x3F6E);
// bitfield macros
#define _PWM5CON_POL_POSN                                   0x4
#define _PWM5CON_POL_POSITION                               0x4
#define _PWM5CON_POL_SIZE                                   0x1
#define _PWM5CON_POL_LENGTH                                 0x1
#define _PWM5CON_POL_MASK                                   0x10
#define _PWM5CON_OUT_POSN                                   0x5
#define _PWM5CON_OUT_POSITION                               0x5
#define _PWM5CON_OUT_SIZE                                   0x1
#define _PWM5CON_OUT_LENGTH                                 0x1
#define _PWM5CON_OUT_MASK                                   0x20
#define _PWM5CON_EN_POSN                                    0x7
#define _PWM5CON_EN_POSITION                                0x7
#define _PWM5CON_EN_SIZE                                    0x1
#define _PWM5CON_EN_LENGTH                                  0x1
#define _PWM5CON_EN_MASK                                    0x80
#define _PWM5CON_PWM5POL_POSN                               0x4
#define _PWM5CON_PWM5POL_POSITION                           0x4
#define _PWM5CON_PWM5POL_SIZE                               0x1
#define _PWM5CON_PWM5POL_LENGTH                             0x1
#define _PWM5CON_PWM5POL_MASK                               0x10
#define _PWM5CON_PWM5OUT_POSN                               0x5
#define _PWM5CON_PWM5OUT_POSITION                           0x5
#define _PWM5CON_PWM5OUT_SIZE                               0x1
#define _PWM5CON_PWM5OUT_LENGTH                             0x1
#define _PWM5CON_PWM5OUT_MASK                               0x20
#define _PWM5CON_PWM5EN_POSN                                0x7
#define _PWM5CON_PWM5EN_POSITION                            0x7
#define _PWM5CON_PWM5EN_SIZE                                0x1
#define _PWM5CON_PWM5EN_LENGTH                              0x1
#define _PWM5CON_PWM5EN_MASK                                0x80

// Register: CCPR4
#define CCPR4 CCPR4
extern volatile unsigned short          CCPR4               __at(0x3F70);
#ifndef _LIB_BUILD
asm("CCPR4 equ 03F70h");
#endif

// Register: CCPR4L
#define CCPR4L CCPR4L
extern volatile unsigned char           CCPR4L              __at(0x3F70);
#ifndef _LIB_BUILD
asm("CCPR4L equ 03F70h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RL                     :8;
    };
} CCPR4Lbits_t;
extern volatile CCPR4Lbits_t CCPR4Lbits __at(0x3F70);
// bitfield macros
#define _CCPR4L_RL_POSN                                     0x0
#define _CCPR4L_RL_POSITION                                 0x0
#define _CCPR4L_RL_SIZE                                     0x8
#define _CCPR4L_RL_LENGTH                                   0x8
#define _CCPR4L_RL_MASK                                     0xFF

// Register: CCPR4H
#define CCPR4H CCPR4H
extern volatile unsigned char           CCPR4H              __at(0x3F71);
#ifndef _LIB_BUILD
asm("CCPR4H equ 03F71h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RH                     :8;
    };
} CCPR4Hbits_t;
extern volatile CCPR4Hbits_t CCPR4Hbits __at(0x3F71);
// bitfield macros
#define _CCPR4H_RH_POSN                                     0x0
#define _CCPR4H_RH_POSITION                                 0x0
#define _CCPR4H_RH_SIZE                                     0x8
#define _CCPR4H_RH_LENGTH                                   0x8
#define _CCPR4H_RH_MASK                                     0xFF

// Register: CCP4CON
#define CCP4CON CCP4CON
extern volatile unsigned char           CCP4CON             __at(0x3F72);
#ifndef _LIB_BUILD
asm("CCP4CON equ 03F72h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :4;
        unsigned FMT                    :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned MODE3                  :1;
    };
    struct {
        unsigned CCP4MODE               :4;
        unsigned CCP4FMT                :1;
        unsigned CCP4OUT                :1;
        unsigned                        :1;
        unsigned CCP4EN                 :1;
    };
    struct {
        unsigned CCP4MODE0              :1;
        unsigned CCP4MODE1              :1;
        unsigned CCP4MODE2              :1;
        unsigned CCP4MODE3              :1;
    };
} CCP4CONbits_t;
extern volatile CCP4CONbits_t CCP4CONbits __at(0x3F72);
// bitfield macros
#define _CCP4CON_MODE_POSN                                  0x0
#define _CCP4CON_MODE_POSITION                              0x0
#define _CCP4CON_MODE_SIZE                                  0x4
#define _CCP4CON_MODE_LENGTH                                0x4
#define _CCP4CON_MODE_MASK                                  0xF
#define _CCP4CON_FMT_POSN                                   0x4
#define _CCP4CON_FMT_POSITION                               0x4
#define _CCP4CON_FMT_SIZE                                   0x1
#define _CCP4CON_FMT_LENGTH                                 0x1
#define _CCP4CON_FMT_MASK                                   0x10
#define _CCP4CON_OUT_POSN                                   0x5
#define _CCP4CON_OUT_POSITION                               0x5
#define _CCP4CON_OUT_SIZE                                   0x1
#define _CCP4CON_OUT_LENGTH                                 0x1
#define _CCP4CON_OUT_MASK                                   0x20
#define _CCP4CON_EN_POSN                                    0x7
#define _CCP4CON_EN_POSITION                                0x7
#define _CCP4CON_EN_SIZE                                    0x1
#define _CCP4CON_EN_LENGTH                                  0x1
#define _CCP4CON_EN_MASK                                    0x80
#define _CCP4CON_MODE0_POSN                                 0x0
#define _CCP4CON_MODE0_POSITION                             0x0
#define _CCP4CON_MODE0_SIZE                                 0x1
#define _CCP4CON_MODE0_LENGTH                               0x1
#define _CCP4CON_MODE0_MASK                                 0x1
#define _CCP4CON_MODE1_POSN                                 0x1
#define _CCP4CON_MODE1_POSITION                             0x1
#define _CCP4CON_MODE1_SIZE                                 0x1
#define _CCP4CON_MODE1_LENGTH                               0x1
#define _CCP4CON_MODE1_MASK                                 0x2
#define _CCP4CON_MODE2_POSN                                 0x2
#define _CCP4CON_MODE2_POSITION                             0x2
#define _CCP4CON_MODE2_SIZE                                 0x1
#define _CCP4CON_MODE2_LENGTH                               0x1
#define _CCP4CON_MODE2_MASK                                 0x4
#define _CCP4CON_MODE3_POSN                                 0x3
#define _CCP4CON_MODE3_POSITION                             0x3
#define _CCP4CON_MODE3_SIZE                                 0x1
#define _CCP4CON_MODE3_LENGTH                               0x1
#define _CCP4CON_MODE3_MASK                                 0x8
#define _CCP4CON_CCP4MODE_POSN                              0x0
#define _CCP4CON_CCP4MODE_POSITION                          0x0
#define _CCP4CON_CCP4MODE_SIZE                              0x4
#define _CCP4CON_CCP4MODE_LENGTH                            0x4
#define _CCP4CON_CCP4MODE_MASK                              0xF
#define _CCP4CON_CCP4FMT_POSN                               0x4
#define _CCP4CON_CCP4FMT_POSITION                           0x4
#define _CCP4CON_CCP4FMT_SIZE                               0x1
#define _CCP4CON_CCP4FMT_LENGTH                             0x1
#define _CCP4CON_CCP4FMT_MASK                               0x10
#define _CCP4CON_CCP4OUT_POSN                               0x5
#define _CCP4CON_CCP4OUT_POSITION                           0x5
#define _CCP4CON_CCP4OUT_SIZE                               0x1
#define _CCP4CON_CCP4OUT_LENGTH                             0x1
#define _CCP4CON_CCP4OUT_MASK                               0x20
#define _CCP4CON_CCP4EN_POSN                                0x7
#define _CCP4CON_CCP4EN_POSITION                            0x7
#define _CCP4CON_CCP4EN_SIZE                                0x1
#define _CCP4CON_CCP4EN_LENGTH                              0x1
#define _CCP4CON_CCP4EN_MASK                                0x80
#define _CCP4CON_CCP4MODE0_POSN                             0x0
#define _CCP4CON_CCP4MODE0_POSITION                         0x0
#define _CCP4CON_CCP4MODE0_SIZE                             0x1
#define _CCP4CON_CCP4MODE0_LENGTH                           0x1
#define _CCP4CON_CCP4MODE0_MASK                             0x1
#define _CCP4CON_CCP4MODE1_POSN                             0x1
#define _CCP4CON_CCP4MODE1_POSITION                         0x1
#define _CCP4CON_CCP4MODE1_SIZE                             0x1
#define _CCP4CON_CCP4MODE1_LENGTH                           0x1
#define _CCP4CON_CCP4MODE1_MASK                             0x2
#define _CCP4CON_CCP4MODE2_POSN                             0x2
#define _CCP4CON_CCP4MODE2_POSITION                         0x2
#define _CCP4CON_CCP4MODE2_SIZE                             0x1
#define _CCP4CON_CCP4MODE2_LENGTH                           0x1
#define _CCP4CON_CCP4MODE2_MASK                             0x4
#define _CCP4CON_CCP4MODE3_POSN                             0x3
#define _CCP4CON_CCP4MODE3_POSITION                         0x3
#define _CCP4CON_CCP4MODE3_SIZE                             0x1
#define _CCP4CON_CCP4MODE3_LENGTH                           0x1
#define _CCP4CON_CCP4MODE3_MASK                             0x8

// Register: CCP4CAP
#define CCP4CAP CCP4CAP
extern volatile unsigned char           CCP4CAP             __at(0x3F73);
#ifndef _LIB_BUILD
asm("CCP4CAP equ 03F73h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CTS                    :8;
    };
    struct {
        unsigned CTS0                   :1;
        unsigned CTS1                   :1;
        unsigned CTS2                   :1;
    };
    struct {
        unsigned CCP4CTS                :8;
    };
    struct {
        unsigned CCP4CTS0               :1;
        unsigned CCP4CTS1               :1;
        unsigned CCP4CTS2               :1;
    };
} CCP4CAPbits_t;
extern volatile CCP4CAPbits_t CCP4CAPbits __at(0x3F73);
// bitfield macros
#define _CCP4CAP_CTS_POSN                                   0x0
#define _CCP4CAP_CTS_POSITION                               0x0
#define _CCP4CAP_CTS_SIZE                                   0x8
#define _CCP4CAP_CTS_LENGTH                                 0x8
#define _CCP4CAP_CTS_MASK                                   0xFF
#define _CCP4CAP_CTS0_POSN                                  0x0
#define _CCP4CAP_CTS0_POSITION                              0x0
#define _CCP4CAP_CTS0_SIZE                                  0x1
#define _CCP4CAP_CTS0_LENGTH                                0x1
#define _CCP4CAP_CTS0_MASK                                  0x1
#define _CCP4CAP_CTS1_POSN                                  0x1
#define _CCP4CAP_CTS1_POSITION                              0x1
#define _CCP4CAP_CTS1_SIZE                                  0x1
#define _CCP4CAP_CTS1_LENGTH                                0x1
#define _CCP4CAP_CTS1_MASK                                  0x2
#define _CCP4CAP_CTS2_POSN                                  0x2
#define _CCP4CAP_CTS2_POSITION                              0x2
#define _CCP4CAP_CTS2_SIZE                                  0x1
#define _CCP4CAP_CTS2_LENGTH                                0x1
#define _CCP4CAP_CTS2_MASK                                  0x4
#define _CCP4CAP_CCP4CTS_POSN                               0x0
#define _CCP4CAP_CCP4CTS_POSITION                           0x0
#define _CCP4CAP_CCP4CTS_SIZE                               0x8
#define _CCP4CAP_CCP4CTS_LENGTH                             0x8
#define _CCP4CAP_CCP4CTS_MASK                               0xFF
#define _CCP4CAP_CCP4CTS0_POSN                              0x0
#define _CCP4CAP_CCP4CTS0_POSITION                          0x0
#define _CCP4CAP_CCP4CTS0_SIZE                              0x1
#define _CCP4CAP_CCP4CTS0_LENGTH                            0x1
#define _CCP4CAP_CCP4CTS0_MASK                              0x1
#define _CCP4CAP_CCP4CTS1_POSN                              0x1
#define _CCP4CAP_CCP4CTS1_POSITION                          0x1
#define _CCP4CAP_CCP4CTS1_SIZE                              0x1
#define _CCP4CAP_CCP4CTS1_LENGTH                            0x1
#define _CCP4CAP_CCP4CTS1_MASK                              0x2
#define _CCP4CAP_CCP4CTS2_POSN                              0x2
#define _CCP4CAP_CCP4CTS2_POSITION                          0x2
#define _CCP4CAP_CCP4CTS2_SIZE                              0x1
#define _CCP4CAP_CCP4CTS2_LENGTH                            0x1
#define _CCP4CAP_CCP4CTS2_MASK                              0x4

// Register: CCPR3
#define CCPR3 CCPR3
extern volatile unsigned short          CCPR3               __at(0x3F74);
#ifndef _LIB_BUILD
asm("CCPR3 equ 03F74h");
#endif

// Register: CCPR3L
#define CCPR3L CCPR3L
extern volatile unsigned char           CCPR3L              __at(0x3F74);
#ifndef _LIB_BUILD
asm("CCPR3L equ 03F74h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RL                     :8;
    };
} CCPR3Lbits_t;
extern volatile CCPR3Lbits_t CCPR3Lbits __at(0x3F74);
// bitfield macros
#define _CCPR3L_RL_POSN                                     0x0
#define _CCPR3L_RL_POSITION                                 0x0
#define _CCPR3L_RL_SIZE                                     0x8
#define _CCPR3L_RL_LENGTH                                   0x8
#define _CCPR3L_RL_MASK                                     0xFF

// Register: CCPR3H
#define CCPR3H CCPR3H
extern volatile unsigned char           CCPR3H              __at(0x3F75);
#ifndef _LIB_BUILD
asm("CCPR3H equ 03F75h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RH                     :8;
    };
} CCPR3Hbits_t;
extern volatile CCPR3Hbits_t CCPR3Hbits __at(0x3F75);
// bitfield macros
#define _CCPR3H_RH_POSN                                     0x0
#define _CCPR3H_RH_POSITION                                 0x0
#define _CCPR3H_RH_SIZE                                     0x8
#define _CCPR3H_RH_LENGTH                                   0x8
#define _CCPR3H_RH_MASK                                     0xFF

// Register: CCP3CON
#define CCP3CON CCP3CON
extern volatile unsigned char           CCP3CON             __at(0x3F76);
#ifndef _LIB_BUILD
asm("CCP3CON equ 03F76h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :4;
        unsigned FMT                    :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned MODE3                  :1;
    };
    struct {
        unsigned CCP3MODE               :4;
        unsigned CCP3FMT                :1;
        unsigned CCP3OUT                :1;
        unsigned                        :1;
        unsigned CCP3EN                 :1;
    };
    struct {
        unsigned CCP3MODE0              :1;
        unsigned CCP3MODE1              :1;
        unsigned CCP3MODE2              :1;
        unsigned CCP3MODE3              :1;
    };
} CCP3CONbits_t;
extern volatile CCP3CONbits_t CCP3CONbits __at(0x3F76);
// bitfield macros
#define _CCP3CON_MODE_POSN                                  0x0
#define _CCP3CON_MODE_POSITION                              0x0
#define _CCP3CON_MODE_SIZE                                  0x4
#define _CCP3CON_MODE_LENGTH                                0x4
#define _CCP3CON_MODE_MASK                                  0xF
#define _CCP3CON_FMT_POSN                                   0x4
#define _CCP3CON_FMT_POSITION                               0x4
#define _CCP3CON_FMT_SIZE                                   0x1
#define _CCP3CON_FMT_LENGTH                                 0x1
#define _CCP3CON_FMT_MASK                                   0x10
#define _CCP3CON_OUT_POSN                                   0x5
#define _CCP3CON_OUT_POSITION                               0x5
#define _CCP3CON_OUT_SIZE                                   0x1
#define _CCP3CON_OUT_LENGTH                                 0x1
#define _CCP3CON_OUT_MASK                                   0x20
#define _CCP3CON_EN_POSN                                    0x7
#define _CCP3CON_EN_POSITION                                0x7
#define _CCP3CON_EN_SIZE                                    0x1
#define _CCP3CON_EN_LENGTH                                  0x1
#define _CCP3CON_EN_MASK                                    0x80
#define _CCP3CON_MODE0_POSN                                 0x0
#define _CCP3CON_MODE0_POSITION                             0x0
#define _CCP3CON_MODE0_SIZE                                 0x1
#define _CCP3CON_MODE0_LENGTH                               0x1
#define _CCP3CON_MODE0_MASK                                 0x1
#define _CCP3CON_MODE1_POSN                                 0x1
#define _CCP3CON_MODE1_POSITION                             0x1
#define _CCP3CON_MODE1_SIZE                                 0x1
#define _CCP3CON_MODE1_LENGTH                               0x1
#define _CCP3CON_MODE1_MASK                                 0x2
#define _CCP3CON_MODE2_POSN                                 0x2
#define _CCP3CON_MODE2_POSITION                             0x2
#define _CCP3CON_MODE2_SIZE                                 0x1
#define _CCP3CON_MODE2_LENGTH                               0x1
#define _CCP3CON_MODE2_MASK                                 0x4
#define _CCP3CON_MODE3_POSN                                 0x3
#define _CCP3CON_MODE3_POSITION                             0x3
#define _CCP3CON_MODE3_SIZE                                 0x1
#define _CCP3CON_MODE3_LENGTH                               0x1
#define _CCP3CON_MODE3_MASK                                 0x8
#define _CCP3CON_CCP3MODE_POSN                              0x0
#define _CCP3CON_CCP3MODE_POSITION                          0x0
#define _CCP3CON_CCP3MODE_SIZE                              0x4
#define _CCP3CON_CCP3MODE_LENGTH                            0x4
#define _CCP3CON_CCP3MODE_MASK                              0xF
#define _CCP3CON_CCP3FMT_POSN                               0x4
#define _CCP3CON_CCP3FMT_POSITION                           0x4
#define _CCP3CON_CCP3FMT_SIZE                               0x1
#define _CCP3CON_CCP3FMT_LENGTH                             0x1
#define _CCP3CON_CCP3FMT_MASK                               0x10
#define _CCP3CON_CCP3OUT_POSN                               0x5
#define _CCP3CON_CCP3OUT_POSITION                           0x5
#define _CCP3CON_CCP3OUT_SIZE                               0x1
#define _CCP3CON_CCP3OUT_LENGTH                             0x1
#define _CCP3CON_CCP3OUT_MASK                               0x20
#define _CCP3CON_CCP3EN_POSN                                0x7
#define _CCP3CON_CCP3EN_POSITION                            0x7
#define _CCP3CON_CCP3EN_SIZE                                0x1
#define _CCP3CON_CCP3EN_LENGTH                              0x1
#define _CCP3CON_CCP3EN_MASK                                0x80
#define _CCP3CON_CCP3MODE0_POSN                             0x0
#define _CCP3CON_CCP3MODE0_POSITION                         0x0
#define _CCP3CON_CCP3MODE0_SIZE                             0x1
#define _CCP3CON_CCP3MODE0_LENGTH                           0x1
#define _CCP3CON_CCP3MODE0_MASK                             0x1
#define _CCP3CON_CCP3MODE1_POSN                             0x1
#define _CCP3CON_CCP3MODE1_POSITION                         0x1
#define _CCP3CON_CCP3MODE1_SIZE                             0x1
#define _CCP3CON_CCP3MODE1_LENGTH                           0x1
#define _CCP3CON_CCP3MODE1_MASK                             0x2
#define _CCP3CON_CCP3MODE2_POSN                             0x2
#define _CCP3CON_CCP3MODE2_POSITION                         0x2
#define _CCP3CON_CCP3MODE2_SIZE                             0x1
#define _CCP3CON_CCP3MODE2_LENGTH                           0x1
#define _CCP3CON_CCP3MODE2_MASK                             0x4
#define _CCP3CON_CCP3MODE3_POSN                             0x3
#define _CCP3CON_CCP3MODE3_POSITION                         0x3
#define _CCP3CON_CCP3MODE3_SIZE                             0x1
#define _CCP3CON_CCP3MODE3_LENGTH                           0x1
#define _CCP3CON_CCP3MODE3_MASK                             0x8

// Register: CCP3CAP
#define CCP3CAP CCP3CAP
extern volatile unsigned char           CCP3CAP             __at(0x3F77);
#ifndef _LIB_BUILD
asm("CCP3CAP equ 03F77h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CTS                    :8;
    };
    struct {
        unsigned CTS0                   :1;
        unsigned CTS1                   :1;
        unsigned CTS2                   :1;
    };
    struct {
        unsigned CCP3CTS                :8;
    };
    struct {
        unsigned CCP3CTS0               :1;
        unsigned CCP3CTS1               :1;
        unsigned CCP3CTS2               :1;
    };
} CCP3CAPbits_t;
extern volatile CCP3CAPbits_t CCP3CAPbits __at(0x3F77);
// bitfield macros
#define _CCP3CAP_CTS_POSN                                   0x0
#define _CCP3CAP_CTS_POSITION                               0x0
#define _CCP3CAP_CTS_SIZE                                   0x8
#define _CCP3CAP_CTS_LENGTH                                 0x8
#define _CCP3CAP_CTS_MASK                                   0xFF
#define _CCP3CAP_CTS0_POSN                                  0x0
#define _CCP3CAP_CTS0_POSITION                              0x0
#define _CCP3CAP_CTS0_SIZE                                  0x1
#define _CCP3CAP_CTS0_LENGTH                                0x1
#define _CCP3CAP_CTS0_MASK                                  0x1
#define _CCP3CAP_CTS1_POSN                                  0x1
#define _CCP3CAP_CTS1_POSITION                              0x1
#define _CCP3CAP_CTS1_SIZE                                  0x1
#define _CCP3CAP_CTS1_LENGTH                                0x1
#define _CCP3CAP_CTS1_MASK                                  0x2
#define _CCP3CAP_CTS2_POSN                                  0x2
#define _CCP3CAP_CTS2_POSITION                              0x2
#define _CCP3CAP_CTS2_SIZE                                  0x1
#define _CCP3CAP_CTS2_LENGTH                                0x1
#define _CCP3CAP_CTS2_MASK                                  0x4
#define _CCP3CAP_CCP3CTS_POSN                               0x0
#define _CCP3CAP_CCP3CTS_POSITION                           0x0
#define _CCP3CAP_CCP3CTS_SIZE                               0x8
#define _CCP3CAP_CCP3CTS_LENGTH                             0x8
#define _CCP3CAP_CCP3CTS_MASK                               0xFF
#define _CCP3CAP_CCP3CTS0_POSN                              0x0
#define _CCP3CAP_CCP3CTS0_POSITION                          0x0
#define _CCP3CAP_CCP3CTS0_SIZE                              0x1
#define _CCP3CAP_CCP3CTS0_LENGTH                            0x1
#define _CCP3CAP_CCP3CTS0_MASK                              0x1
#define _CCP3CAP_CCP3CTS1_POSN                              0x1
#define _CCP3CAP_CCP3CTS1_POSITION                          0x1
#define _CCP3CAP_CCP3CTS1_SIZE                              0x1
#define _CCP3CAP_CCP3CTS1_LENGTH                            0x1
#define _CCP3CAP_CCP3CTS1_MASK                              0x2
#define _CCP3CAP_CCP3CTS2_POSN                              0x2
#define _CCP3CAP_CCP3CTS2_POSITION                          0x2
#define _CCP3CAP_CCP3CTS2_SIZE                              0x1
#define _CCP3CAP_CCP3CTS2_LENGTH                            0x1
#define _CCP3CAP_CCP3CTS2_MASK                              0x4

// Register: CCPR2
#define CCPR2 CCPR2
extern volatile unsigned short          CCPR2               __at(0x3F78);
#ifndef _LIB_BUILD
asm("CCPR2 equ 03F78h");
#endif

// Register: CCPR2L
#define CCPR2L CCPR2L
extern volatile unsigned char           CCPR2L              __at(0x3F78);
#ifndef _LIB_BUILD
asm("CCPR2L equ 03F78h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RL                     :8;
    };
} CCPR2Lbits_t;
extern volatile CCPR2Lbits_t CCPR2Lbits __at(0x3F78);
// bitfield macros
#define _CCPR2L_RL_POSN                                     0x0
#define _CCPR2L_RL_POSITION                                 0x0
#define _CCPR2L_RL_SIZE                                     0x8
#define _CCPR2L_RL_LENGTH                                   0x8
#define _CCPR2L_RL_MASK                                     0xFF

// Register: CCPR2H
#define CCPR2H CCPR2H
extern volatile unsigned char           CCPR2H              __at(0x3F79);
#ifndef _LIB_BUILD
asm("CCPR2H equ 03F79h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RH                     :8;
    };
} CCPR2Hbits_t;
extern volatile CCPR2Hbits_t CCPR2Hbits __at(0x3F79);
// bitfield macros
#define _CCPR2H_RH_POSN                                     0x0
#define _CCPR2H_RH_POSITION                                 0x0
#define _CCPR2H_RH_SIZE                                     0x8
#define _CCPR2H_RH_LENGTH                                   0x8
#define _CCPR2H_RH_MASK                                     0xFF

// Register: CCP2CON
#define CCP2CON CCP2CON
extern volatile unsigned char           CCP2CON             __at(0x3F7A);
#ifndef _LIB_BUILD
asm("CCP2CON equ 03F7Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :4;
        unsigned FMT                    :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned MODE3                  :1;
    };
    struct {
        unsigned CCP2MODE               :4;
        unsigned CCP2FMT                :1;
        unsigned CCP2OUT                :1;
        unsigned                        :1;
        unsigned CCP2EN                 :1;
    };
    struct {
        unsigned CCP2MODE0              :1;
        unsigned CCP2MODE1              :1;
        unsigned CCP2MODE2              :1;
        unsigned CCP2MODE3              :1;
    };
} CCP2CONbits_t;
extern volatile CCP2CONbits_t CCP2CONbits __at(0x3F7A);
// bitfield macros
#define _CCP2CON_MODE_POSN                                  0x0
#define _CCP2CON_MODE_POSITION                              0x0
#define _CCP2CON_MODE_SIZE                                  0x4
#define _CCP2CON_MODE_LENGTH                                0x4
#define _CCP2CON_MODE_MASK                                  0xF
#define _CCP2CON_FMT_POSN                                   0x4
#define _CCP2CON_FMT_POSITION                               0x4
#define _CCP2CON_FMT_SIZE                                   0x1
#define _CCP2CON_FMT_LENGTH                                 0x1
#define _CCP2CON_FMT_MASK                                   0x10
#define _CCP2CON_OUT_POSN                                   0x5
#define _CCP2CON_OUT_POSITION                               0x5
#define _CCP2CON_OUT_SIZE                                   0x1
#define _CCP2CON_OUT_LENGTH                                 0x1
#define _CCP2CON_OUT_MASK                                   0x20
#define _CCP2CON_EN_POSN                                    0x7
#define _CCP2CON_EN_POSITION                                0x7
#define _CCP2CON_EN_SIZE                                    0x1
#define _CCP2CON_EN_LENGTH                                  0x1
#define _CCP2CON_EN_MASK                                    0x80
#define _CCP2CON_MODE0_POSN                                 0x0
#define _CCP2CON_MODE0_POSITION                             0x0
#define _CCP2CON_MODE0_SIZE                                 0x1
#define _CCP2CON_MODE0_LENGTH                               0x1
#define _CCP2CON_MODE0_MASK                                 0x1
#define _CCP2CON_MODE1_POSN                                 0x1
#define _CCP2CON_MODE1_POSITION                             0x1
#define _CCP2CON_MODE1_SIZE                                 0x1
#define _CCP2CON_MODE1_LENGTH                               0x1
#define _CCP2CON_MODE1_MASK                                 0x2
#define _CCP2CON_MODE2_POSN                                 0x2
#define _CCP2CON_MODE2_POSITION                             0x2
#define _CCP2CON_MODE2_SIZE                                 0x1
#define _CCP2CON_MODE2_LENGTH                               0x1
#define _CCP2CON_MODE2_MASK                                 0x4
#define _CCP2CON_MODE3_POSN                                 0x3
#define _CCP2CON_MODE3_POSITION                             0x3
#define _CCP2CON_MODE3_SIZE                                 0x1
#define _CCP2CON_MODE3_LENGTH                               0x1
#define _CCP2CON_MODE3_MASK                                 0x8
#define _CCP2CON_CCP2MODE_POSN                              0x0
#define _CCP2CON_CCP2MODE_POSITION                          0x0
#define _CCP2CON_CCP2MODE_SIZE                              0x4
#define _CCP2CON_CCP2MODE_LENGTH                            0x4
#define _CCP2CON_CCP2MODE_MASK                              0xF
#define _CCP2CON_CCP2FMT_POSN                               0x4
#define _CCP2CON_CCP2FMT_POSITION                           0x4
#define _CCP2CON_CCP2FMT_SIZE                               0x1
#define _CCP2CON_CCP2FMT_LENGTH                             0x1
#define _CCP2CON_CCP2FMT_MASK                               0x10
#define _CCP2CON_CCP2OUT_POSN                               0x5
#define _CCP2CON_CCP2OUT_POSITION                           0x5
#define _CCP2CON_CCP2OUT_SIZE                               0x1
#define _CCP2CON_CCP2OUT_LENGTH                             0x1
#define _CCP2CON_CCP2OUT_MASK                               0x20
#define _CCP2CON_CCP2EN_POSN                                0x7
#define _CCP2CON_CCP2EN_POSITION                            0x7
#define _CCP2CON_CCP2EN_SIZE                                0x1
#define _CCP2CON_CCP2EN_LENGTH                              0x1
#define _CCP2CON_CCP2EN_MASK                                0x80
#define _CCP2CON_CCP2MODE0_POSN                             0x0
#define _CCP2CON_CCP2MODE0_POSITION                         0x0
#define _CCP2CON_CCP2MODE0_SIZE                             0x1
#define _CCP2CON_CCP2MODE0_LENGTH                           0x1
#define _CCP2CON_CCP2MODE0_MASK                             0x1
#define _CCP2CON_CCP2MODE1_POSN                             0x1
#define _CCP2CON_CCP2MODE1_POSITION                         0x1
#define _CCP2CON_CCP2MODE1_SIZE                             0x1
#define _CCP2CON_CCP2MODE1_LENGTH                           0x1
#define _CCP2CON_CCP2MODE1_MASK                             0x2
#define _CCP2CON_CCP2MODE2_POSN                             0x2
#define _CCP2CON_CCP2MODE2_POSITION                         0x2
#define _CCP2CON_CCP2MODE2_SIZE                             0x1
#define _CCP2CON_CCP2MODE2_LENGTH                           0x1
#define _CCP2CON_CCP2MODE2_MASK                             0x4
#define _CCP2CON_CCP2MODE3_POSN                             0x3
#define _CCP2CON_CCP2MODE3_POSITION                         0x3
#define _CCP2CON_CCP2MODE3_SIZE                             0x1
#define _CCP2CON_CCP2MODE3_LENGTH                           0x1
#define _CCP2CON_CCP2MODE3_MASK                             0x8

// Register: CCP2CAP
#define CCP2CAP CCP2CAP
extern volatile unsigned char           CCP2CAP             __at(0x3F7B);
#ifndef _LIB_BUILD
asm("CCP2CAP equ 03F7Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CTS                    :8;
    };
    struct {
        unsigned CTS0                   :1;
        unsigned CTS1                   :1;
        unsigned CTS2                   :1;
    };
    struct {
        unsigned CCP2CTS                :8;
    };
    struct {
        unsigned CCP2CTS0               :1;
        unsigned CCP2CTS1               :1;
        unsigned CCP2CTS2               :1;
    };
} CCP2CAPbits_t;
extern volatile CCP2CAPbits_t CCP2CAPbits __at(0x3F7B);
// bitfield macros
#define _CCP2CAP_CTS_POSN                                   0x0
#define _CCP2CAP_CTS_POSITION                               0x0
#define _CCP2CAP_CTS_SIZE                                   0x8
#define _CCP2CAP_CTS_LENGTH                                 0x8
#define _CCP2CAP_CTS_MASK                                   0xFF
#define _CCP2CAP_CTS0_POSN                                  0x0
#define _CCP2CAP_CTS0_POSITION                              0x0
#define _CCP2CAP_CTS0_SIZE                                  0x1
#define _CCP2CAP_CTS0_LENGTH                                0x1
#define _CCP2CAP_CTS0_MASK                                  0x1
#define _CCP2CAP_CTS1_POSN                                  0x1
#define _CCP2CAP_CTS1_POSITION                              0x1
#define _CCP2CAP_CTS1_SIZE                                  0x1
#define _CCP2CAP_CTS1_LENGTH                                0x1
#define _CCP2CAP_CTS1_MASK                                  0x2
#define _CCP2CAP_CTS2_POSN                                  0x2
#define _CCP2CAP_CTS2_POSITION                              0x2
#define _CCP2CAP_CTS2_SIZE                                  0x1
#define _CCP2CAP_CTS2_LENGTH                                0x1
#define _CCP2CAP_CTS2_MASK                                  0x4
#define _CCP2CAP_CCP2CTS_POSN                               0x0
#define _CCP2CAP_CCP2CTS_POSITION                           0x0
#define _CCP2CAP_CCP2CTS_SIZE                               0x8
#define _CCP2CAP_CCP2CTS_LENGTH                             0x8
#define _CCP2CAP_CCP2CTS_MASK                               0xFF
#define _CCP2CAP_CCP2CTS0_POSN                              0x0
#define _CCP2CAP_CCP2CTS0_POSITION                          0x0
#define _CCP2CAP_CCP2CTS0_SIZE                              0x1
#define _CCP2CAP_CCP2CTS0_LENGTH                            0x1
#define _CCP2CAP_CCP2CTS0_MASK                              0x1
#define _CCP2CAP_CCP2CTS1_POSN                              0x1
#define _CCP2CAP_CCP2CTS1_POSITION                          0x1
#define _CCP2CAP_CCP2CTS1_SIZE                              0x1
#define _CCP2CAP_CCP2CTS1_LENGTH                            0x1
#define _CCP2CAP_CCP2CTS1_MASK                              0x2
#define _CCP2CAP_CCP2CTS2_POSN                              0x2
#define _CCP2CAP_CCP2CTS2_POSITION                          0x2
#define _CCP2CAP_CCP2CTS2_SIZE                              0x1
#define _CCP2CAP_CCP2CTS2_LENGTH                            0x1
#define _CCP2CAP_CCP2CTS2_MASK                              0x4

// Register: CCPR1
#define CCPR1 CCPR1
extern volatile unsigned short          CCPR1               __at(0x3F7C);
#ifndef _LIB_BUILD
asm("CCPR1 equ 03F7Ch");
#endif

// Register: CCPR1L
#define CCPR1L CCPR1L
extern volatile unsigned char           CCPR1L              __at(0x3F7C);
#ifndef _LIB_BUILD
asm("CCPR1L equ 03F7Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RL                     :8;
    };
} CCPR1Lbits_t;
extern volatile CCPR1Lbits_t CCPR1Lbits __at(0x3F7C);
// bitfield macros
#define _CCPR1L_RL_POSN                                     0x0
#define _CCPR1L_RL_POSITION                                 0x0
#define _CCPR1L_RL_SIZE                                     0x8
#define _CCPR1L_RL_LENGTH                                   0x8
#define _CCPR1L_RL_MASK                                     0xFF

// Register: CCPR1H
#define CCPR1H CCPR1H
extern volatile unsigned char           CCPR1H              __at(0x3F7D);
#ifndef _LIB_BUILD
asm("CCPR1H equ 03F7Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RH                     :8;
    };
} CCPR1Hbits_t;
extern volatile CCPR1Hbits_t CCPR1Hbits __at(0x3F7D);
// bitfield macros
#define _CCPR1H_RH_POSN                                     0x0
#define _CCPR1H_RH_POSITION                                 0x0
#define _CCPR1H_RH_SIZE                                     0x8
#define _CCPR1H_RH_LENGTH                                   0x8
#define _CCPR1H_RH_MASK                                     0xFF

// Register: CCP1CON
#define CCP1CON CCP1CON
extern volatile unsigned char           CCP1CON             __at(0x3F7E);
#ifndef _LIB_BUILD
asm("CCP1CON equ 03F7Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :4;
        unsigned FMT                    :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned MODE3                  :1;
    };
    struct {
        unsigned CCP1MODE               :4;
        unsigned CCP1FMT                :1;
        unsigned CCP1OUT                :1;
        unsigned                        :1;
        unsigned CCP1EN                 :1;
    };
    struct {
        unsigned CCP1MODE0              :1;
        unsigned CCP1MODE1              :1;
        unsigned CCP1MODE2              :1;
        unsigned CCP1MODE3              :1;
    };
} CCP1CONbits_t;
extern volatile CCP1CONbits_t CCP1CONbits __at(0x3F7E);
// bitfield macros
#define _CCP1CON_MODE_POSN                                  0x0
#define _CCP1CON_MODE_POSITION                              0x0
#define _CCP1CON_MODE_SIZE                                  0x4
#define _CCP1CON_MODE_LENGTH                                0x4
#define _CCP1CON_MODE_MASK                                  0xF
#define _CCP1CON_FMT_POSN                                   0x4
#define _CCP1CON_FMT_POSITION                               0x4
#define _CCP1CON_FMT_SIZE                                   0x1
#define _CCP1CON_FMT_LENGTH                                 0x1
#define _CCP1CON_FMT_MASK                                   0x10
#define _CCP1CON_OUT_POSN                                   0x5
#define _CCP1CON_OUT_POSITION                               0x5
#define _CCP1CON_OUT_SIZE                                   0x1
#define _CCP1CON_OUT_LENGTH                                 0x1
#define _CCP1CON_OUT_MASK                                   0x20
#define _CCP1CON_EN_POSN                                    0x7
#define _CCP1CON_EN_POSITION                                0x7
#define _CCP1CON_EN_SIZE                                    0x1
#define _CCP1CON_EN_LENGTH                                  0x1
#define _CCP1CON_EN_MASK                                    0x80
#define _CCP1CON_MODE0_POSN                                 0x0
#define _CCP1CON_MODE0_POSITION                             0x0
#define _CCP1CON_MODE0_SIZE                                 0x1
#define _CCP1CON_MODE0_LENGTH                               0x1
#define _CCP1CON_MODE0_MASK                                 0x1
#define _CCP1CON_MODE1_POSN                                 0x1
#define _CCP1CON_MODE1_POSITION                             0x1
#define _CCP1CON_MODE1_SIZE                                 0x1
#define _CCP1CON_MODE1_LENGTH                               0x1
#define _CCP1CON_MODE1_MASK                                 0x2
#define _CCP1CON_MODE2_POSN                                 0x2
#define _CCP1CON_MODE2_POSITION                             0x2
#define _CCP1CON_MODE2_SIZE                                 0x1
#define _CCP1CON_MODE2_LENGTH                               0x1
#define _CCP1CON_MODE2_MASK                                 0x4
#define _CCP1CON_MODE3_POSN                                 0x3
#define _CCP1CON_MODE3_POSITION                             0x3
#define _CCP1CON_MODE3_SIZE                                 0x1
#define _CCP1CON_MODE3_LENGTH                               0x1
#define _CCP1CON_MODE3_MASK                                 0x8
#define _CCP1CON_CCP1MODE_POSN                              0x0
#define _CCP1CON_CCP1MODE_POSITION                          0x0
#define _CCP1CON_CCP1MODE_SIZE                              0x4
#define _CCP1CON_CCP1MODE_LENGTH                            0x4
#define _CCP1CON_CCP1MODE_MASK                              0xF
#define _CCP1CON_CCP1FMT_POSN                               0x4
#define _CCP1CON_CCP1FMT_POSITION                           0x4
#define _CCP1CON_CCP1FMT_SIZE                               0x1
#define _CCP1CON_CCP1FMT_LENGTH                             0x1
#define _CCP1CON_CCP1FMT_MASK                               0x10
#define _CCP1CON_CCP1OUT_POSN                               0x5
#define _CCP1CON_CCP1OUT_POSITION                           0x5
#define _CCP1CON_CCP1OUT_SIZE                               0x1
#define _CCP1CON_CCP1OUT_LENGTH                             0x1
#define _CCP1CON_CCP1OUT_MASK                               0x20
#define _CCP1CON_CCP1EN_POSN                                0x7
#define _CCP1CON_CCP1EN_POSITION                            0x7
#define _CCP1CON_CCP1EN_SIZE                                0x1
#define _CCP1CON_CCP1EN_LENGTH                              0x1
#define _CCP1CON_CCP1EN_MASK                                0x80
#define _CCP1CON_CCP1MODE0_POSN                             0x0
#define _CCP1CON_CCP1MODE0_POSITION                         0x0
#define _CCP1CON_CCP1MODE0_SIZE                             0x1
#define _CCP1CON_CCP1MODE0_LENGTH                           0x1
#define _CCP1CON_CCP1MODE0_MASK                             0x1
#define _CCP1CON_CCP1MODE1_POSN                             0x1
#define _CCP1CON_CCP1MODE1_POSITION                         0x1
#define _CCP1CON_CCP1MODE1_SIZE                             0x1
#define _CCP1CON_CCP1MODE1_LENGTH                           0x1
#define _CCP1CON_CCP1MODE1_MASK                             0x2
#define _CCP1CON_CCP1MODE2_POSN                             0x2
#define _CCP1CON_CCP1MODE2_POSITION                         0x2
#define _CCP1CON_CCP1MODE2_SIZE                             0x1
#define _CCP1CON_CCP1MODE2_LENGTH                           0x1
#define _CCP1CON_CCP1MODE2_MASK                             0x4
#define _CCP1CON_CCP1MODE3_POSN                             0x3
#define _CCP1CON_CCP1MODE3_POSITION                         0x3
#define _CCP1CON_CCP1MODE3_SIZE                             0x1
#define _CCP1CON_CCP1MODE3_LENGTH                           0x1
#define _CCP1CON_CCP1MODE3_MASK                             0x8

// Register: CCP1CAP
#define CCP1CAP CCP1CAP
extern volatile unsigned char           CCP1CAP             __at(0x3F7F);
#ifndef _LIB_BUILD
asm("CCP1CAP equ 03F7Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CTS                    :8;
    };
    struct {
        unsigned CTS0                   :1;
        unsigned CTS1                   :1;
        unsigned CTS2                   :1;
    };
    struct {
        unsigned CCP1CTS                :8;
    };
    struct {
        unsigned CCP1CTS0               :1;
        unsigned CCP1CTS1               :1;
        unsigned CCP1CTS2               :1;
    };
} CCP1CAPbits_t;
extern volatile CCP1CAPbits_t CCP1CAPbits __at(0x3F7F);
// bitfield macros
#define _CCP1CAP_CTS_POSN                                   0x0
#define _CCP1CAP_CTS_POSITION                               0x0
#define _CCP1CAP_CTS_SIZE                                   0x8
#define _CCP1CAP_CTS_LENGTH                                 0x8
#define _CCP1CAP_CTS_MASK                                   0xFF
#define _CCP1CAP_CTS0_POSN                                  0x0
#define _CCP1CAP_CTS0_POSITION                              0x0
#define _CCP1CAP_CTS0_SIZE                                  0x1
#define _CCP1CAP_CTS0_LENGTH                                0x1
#define _CCP1CAP_CTS0_MASK                                  0x1
#define _CCP1CAP_CTS1_POSN                                  0x1
#define _CCP1CAP_CTS1_POSITION                              0x1
#define _CCP1CAP_CTS1_SIZE                                  0x1
#define _CCP1CAP_CTS1_LENGTH                                0x1
#define _CCP1CAP_CTS1_MASK                                  0x2
#define _CCP1CAP_CTS2_POSN                                  0x2
#define _CCP1CAP_CTS2_POSITION                              0x2
#define _CCP1CAP_CTS2_SIZE                                  0x1
#define _CCP1CAP_CTS2_LENGTH                                0x1
#define _CCP1CAP_CTS2_MASK                                  0x4
#define _CCP1CAP_CCP1CTS_POSN                               0x0
#define _CCP1CAP_CCP1CTS_POSITION                           0x0
#define _CCP1CAP_CCP1CTS_SIZE                               0x8
#define _CCP1CAP_CCP1CTS_LENGTH                             0x8
#define _CCP1CAP_CCP1CTS_MASK                               0xFF
#define _CCP1CAP_CCP1CTS0_POSN                              0x0
#define _CCP1CAP_CCP1CTS0_POSITION                          0x0
#define _CCP1CAP_CCP1CTS0_SIZE                              0x1
#define _CCP1CAP_CCP1CTS0_LENGTH                            0x1
#define _CCP1CAP_CCP1CTS0_MASK                              0x1
#define _CCP1CAP_CCP1CTS1_POSN                              0x1
#define _CCP1CAP_CCP1CTS1_POSITION                          0x1
#define _CCP1CAP_CCP1CTS1_SIZE                              0x1
#define _CCP1CAP_CCP1CTS1_LENGTH                            0x1
#define _CCP1CAP_CCP1CTS1_MASK                              0x2
#define _CCP1CAP_CCP1CTS2_POSN                              0x2
#define _CCP1CAP_CCP1CTS2_POSITION                          0x2
#define _CCP1CAP_CCP1CTS2_SIZE                              0x1
#define _CCP1CAP_CCP1CTS2_LENGTH                            0x1
#define _CCP1CAP_CCP1CTS2_MASK                              0x4

// Register: T6TMR
#define T6TMR T6TMR
extern volatile unsigned char           T6TMR               __at(0x3F92);
#ifndef _LIB_BUILD
asm("T6TMR equ 03F92h");
#endif
// aliases
extern volatile unsigned char           TMR6                __at(0x3F92);
#ifndef _LIB_BUILD
asm("TMR6 equ 03F92h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR6                   :8;
    };
} T6TMRbits_t;
extern volatile T6TMRbits_t T6TMRbits __at(0x3F92);
// bitfield macros
#define _T6TMR_TMR6_POSN                                    0x0
#define _T6TMR_TMR6_POSITION                                0x0
#define _T6TMR_TMR6_SIZE                                    0x8
#define _T6TMR_TMR6_LENGTH                                  0x8
#define _T6TMR_TMR6_MASK                                    0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned TMR6                   :8;
    };
} TMR6bits_t;
extern volatile TMR6bits_t TMR6bits __at(0x3F92);
// bitfield macros
#define _TMR6_TMR6_POSN                                     0x0
#define _TMR6_TMR6_POSITION                                 0x0
#define _TMR6_TMR6_SIZE                                     0x8
#define _TMR6_TMR6_LENGTH                                   0x8
#define _TMR6_TMR6_MASK                                     0xFF

// Register: T6PR
#define T6PR T6PR
extern volatile unsigned char           T6PR                __at(0x3F93);
#ifndef _LIB_BUILD
asm("T6PR equ 03F93h");
#endif
// aliases
extern volatile unsigned char           PR6                 __at(0x3F93);
#ifndef _LIB_BUILD
asm("PR6 equ 03F93h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PR6                    :8;
    };
} T6PRbits_t;
extern volatile T6PRbits_t T6PRbits __at(0x3F93);
// bitfield macros
#define _T6PR_PR6_POSN                                      0x0
#define _T6PR_PR6_POSITION                                  0x0
#define _T6PR_PR6_SIZE                                      0x8
#define _T6PR_PR6_LENGTH                                    0x8
#define _T6PR_PR6_MASK                                      0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned PR6                    :8;
    };
} PR6bits_t;
extern volatile PR6bits_t PR6bits __at(0x3F93);
// bitfield macros
#define _PR6_PR6_POSN                                       0x0
#define _PR6_PR6_POSITION                                   0x0
#define _PR6_PR6_SIZE                                       0x8
#define _PR6_PR6_LENGTH                                     0x8
#define _PR6_PR6_MASK                                       0xFF

// Register: T6CON
#define T6CON T6CON
extern volatile unsigned char           T6CON               __at(0x3F94);
#ifndef _LIB_BUILD
asm("T6CON equ 03F94h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned OUTPS                  :4;
        unsigned CKPS                   :3;
        unsigned ON                     :1;
    };
    struct {
        unsigned T6OUTPS                :4;
        unsigned T6CKPS                 :3;
        unsigned T6ON                   :1;
    };
    struct {
        unsigned T6OUTPS0               :1;
        unsigned T6OUTPS1               :1;
        unsigned T6OUTPS2               :1;
        unsigned T6OUTPS3               :1;
        unsigned T6CKPS0                :1;
        unsigned T6CKPS1                :1;
        unsigned T6CKPS2                :1;
    };
    struct {
        unsigned OUTPS0                 :1;
        unsigned OUTPS1                 :1;
        unsigned OUTPS2                 :1;
        unsigned OUTPS3                 :1;
        unsigned CKPS0                  :1;
        unsigned CKPS1                  :1;
        unsigned CKPS2                  :1;
        unsigned TMR6ON                 :1;
    };
} T6CONbits_t;
extern volatile T6CONbits_t T6CONbits __at(0x3F94);
// bitfield macros
#define _T6CON_OUTPS_POSN                                   0x0
#define _T6CON_OUTPS_POSITION                               0x0
#define _T6CON_OUTPS_SIZE                                   0x4
#define _T6CON_OUTPS_LENGTH                                 0x4
#define _T6CON_OUTPS_MASK                                   0xF
#define _T6CON_CKPS_POSN                                    0x4
#define _T6CON_CKPS_POSITION                                0x4
#define _T6CON_CKPS_SIZE                                    0x3
#define _T6CON_CKPS_LENGTH                                  0x3
#define _T6CON_CKPS_MASK                                    0x70
#define _T6CON_ON_POSN                                      0x7
#define _T6CON_ON_POSITION                                  0x7
#define _T6CON_ON_SIZE                                      0x1
#define _T6CON_ON_LENGTH                                    0x1
#define _T6CON_ON_MASK                                      0x80
#define _T6CON_T6OUTPS_POSN                                 0x0
#define _T6CON_T6OUTPS_POSITION                             0x0
#define _T6CON_T6OUTPS_SIZE                                 0x4
#define _T6CON_T6OUTPS_LENGTH                               0x4
#define _T6CON_T6OUTPS_MASK                                 0xF
#define _T6CON_T6CKPS_POSN                                  0x4
#define _T6CON_T6CKPS_POSITION                              0x4
#define _T6CON_T6CKPS_SIZE                                  0x3
#define _T6CON_T6CKPS_LENGTH                                0x3
#define _T6CON_T6CKPS_MASK                                  0x70
#define _T6CON_T6ON_POSN                                    0x7
#define _T6CON_T6ON_POSITION                                0x7
#define _T6CON_T6ON_SIZE                                    0x1
#define _T6CON_T6ON_LENGTH                                  0x1
#define _T6CON_T6ON_MASK                                    0x80
#define _T6CON_T6OUTPS0_POSN                                0x0
#define _T6CON_T6OUTPS0_POSITION                            0x0
#define _T6CON_T6OUTPS0_SIZE                                0x1
#define _T6CON_T6OUTPS0_LENGTH                              0x1
#define _T6CON_T6OUTPS0_MASK                                0x1
#define _T6CON_T6OUTPS1_POSN                                0x1
#define _T6CON_T6OUTPS1_POSITION                            0x1
#define _T6CON_T6OUTPS1_SIZE                                0x1
#define _T6CON_T6OUTPS1_LENGTH                              0x1
#define _T6CON_T6OUTPS1_MASK                                0x2
#define _T6CON_T6OUTPS2_POSN                                0x2
#define _T6CON_T6OUTPS2_POSITION                            0x2
#define _T6CON_T6OUTPS2_SIZE                                0x1
#define _T6CON_T6OUTPS2_LENGTH                              0x1
#define _T6CON_T6OUTPS2_MASK                                0x4
#define _T6CON_T6OUTPS3_POSN                                0x3
#define _T6CON_T6OUTPS3_POSITION                            0x3
#define _T6CON_T6OUTPS3_SIZE                                0x1
#define _T6CON_T6OUTPS3_LENGTH                              0x1
#define _T6CON_T6OUTPS3_MASK                                0x8
#define _T6CON_T6CKPS0_POSN                                 0x4
#define _T6CON_T6CKPS0_POSITION                             0x4
#define _T6CON_T6CKPS0_SIZE                                 0x1
#define _T6CON_T6CKPS0_LENGTH                               0x1
#define _T6CON_T6CKPS0_MASK                                 0x10
#define _T6CON_T6CKPS1_POSN                                 0x5
#define _T6CON_T6CKPS1_POSITION                             0x5
#define _T6CON_T6CKPS1_SIZE                                 0x1
#define _T6CON_T6CKPS1_LENGTH                               0x1
#define _T6CON_T6CKPS1_MASK                                 0x20
#define _T6CON_T6CKPS2_POSN                                 0x6
#define _T6CON_T6CKPS2_POSITION                             0x6
#define _T6CON_T6CKPS2_SIZE                                 0x1
#define _T6CON_T6CKPS2_LENGTH                               0x1
#define _T6CON_T6CKPS2_MASK                                 0x40
#define _T6CON_OUTPS0_POSN                                  0x0
#define _T6CON_OUTPS0_POSITION                              0x0
#define _T6CON_OUTPS0_SIZE                                  0x1
#define _T6CON_OUTPS0_LENGTH                                0x1
#define _T6CON_OUTPS0_MASK                                  0x1
#define _T6CON_OUTPS1_POSN                                  0x1
#define _T6CON_OUTPS1_POSITION                              0x1
#define _T6CON_OUTPS1_SIZE                                  0x1
#define _T6CON_OUTPS1_LENGTH                                0x1
#define _T6CON_OUTPS1_MASK                                  0x2
#define _T6CON_OUTPS2_POSN                                  0x2
#define _T6CON_OUTPS2_POSITION                              0x2
#define _T6CON_OUTPS2_SIZE                                  0x1
#define _T6CON_OUTPS2_LENGTH                                0x1
#define _T6CON_OUTPS2_MASK                                  0x4
#define _T6CON_OUTPS3_POSN                                  0x3
#define _T6CON_OUTPS3_POSITION                              0x3
#define _T6CON_OUTPS3_SIZE                                  0x1
#define _T6CON_OUTPS3_LENGTH                                0x1
#define _T6CON_OUTPS3_MASK                                  0x8
#define _T6CON_CKPS0_POSN                                   0x4
#define _T6CON_CKPS0_POSITION                               0x4
#define _T6CON_CKPS0_SIZE                                   0x1
#define _T6CON_CKPS0_LENGTH                                 0x1
#define _T6CON_CKPS0_MASK                                   0x10
#define _T6CON_CKPS1_POSN                                   0x5
#define _T6CON_CKPS1_POSITION                               0x5
#define _T6CON_CKPS1_SIZE                                   0x1
#define _T6CON_CKPS1_LENGTH                                 0x1
#define _T6CON_CKPS1_MASK                                   0x20
#define _T6CON_CKPS2_POSN                                   0x6
#define _T6CON_CKPS2_POSITION                               0x6
#define _T6CON_CKPS2_SIZE                                   0x1
#define _T6CON_CKPS2_LENGTH                                 0x1
#define _T6CON_CKPS2_MASK                                   0x40
#define _T6CON_TMR6ON_POSN                                  0x7
#define _T6CON_TMR6ON_POSITION                              0x7
#define _T6CON_TMR6ON_SIZE                                  0x1
#define _T6CON_TMR6ON_LENGTH                                0x1
#define _T6CON_TMR6ON_MASK                                  0x80

// Register: T6HLT
#define T6HLT T6HLT
extern volatile unsigned char           T6HLT               __at(0x3F95);
#ifndef _LIB_BUILD
asm("T6HLT equ 03F95h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :5;
        unsigned CKSYNC                 :1;
        unsigned CKPOL                  :1;
        unsigned PSYNC                  :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned MODE3                  :1;
        unsigned MODE4                  :1;
    };
    struct {
        unsigned T6MODE                 :5;
        unsigned T6CKSYNC               :1;
        unsigned T6CKPOL                :1;
        unsigned T6PSYNC                :1;
    };
    struct {
        unsigned T6MODE0                :1;
        unsigned T6MODE1                :1;
        unsigned T6MODE2                :1;
        unsigned T6MODE3                :1;
        unsigned T6MODE4                :1;
    };
} T6HLTbits_t;
extern volatile T6HLTbits_t T6HLTbits __at(0x3F95);
// bitfield macros
#define _T6HLT_MODE_POSN                                    0x0
#define _T6HLT_MODE_POSITION                                0x0
#define _T6HLT_MODE_SIZE                                    0x5
#define _T6HLT_MODE_LENGTH                                  0x5
#define _T6HLT_MODE_MASK                                    0x1F
#define _T6HLT_CKSYNC_POSN                                  0x5
#define _T6HLT_CKSYNC_POSITION                              0x5
#define _T6HLT_CKSYNC_SIZE                                  0x1
#define _T6HLT_CKSYNC_LENGTH                                0x1
#define _T6HLT_CKSYNC_MASK                                  0x20
#define _T6HLT_CKPOL_POSN                                   0x6
#define _T6HLT_CKPOL_POSITION                               0x6
#define _T6HLT_CKPOL_SIZE                                   0x1
#define _T6HLT_CKPOL_LENGTH                                 0x1
#define _T6HLT_CKPOL_MASK                                   0x40
#define _T6HLT_PSYNC_POSN                                   0x7
#define _T6HLT_PSYNC_POSITION                               0x7
#define _T6HLT_PSYNC_SIZE                                   0x1
#define _T6HLT_PSYNC_LENGTH                                 0x1
#define _T6HLT_PSYNC_MASK                                   0x80
#define _T6HLT_MODE0_POSN                                   0x0
#define _T6HLT_MODE0_POSITION                               0x0
#define _T6HLT_MODE0_SIZE                                   0x1
#define _T6HLT_MODE0_LENGTH                                 0x1
#define _T6HLT_MODE0_MASK                                   0x1
#define _T6HLT_MODE1_POSN                                   0x1
#define _T6HLT_MODE1_POSITION                               0x1
#define _T6HLT_MODE1_SIZE                                   0x1
#define _T6HLT_MODE1_LENGTH                                 0x1
#define _T6HLT_MODE1_MASK                                   0x2
#define _T6HLT_MODE2_POSN                                   0x2
#define _T6HLT_MODE2_POSITION                               0x2
#define _T6HLT_MODE2_SIZE                                   0x1
#define _T6HLT_MODE2_LENGTH                                 0x1
#define _T6HLT_MODE2_MASK                                   0x4
#define _T6HLT_MODE3_POSN                                   0x3
#define _T6HLT_MODE3_POSITION                               0x3
#define _T6HLT_MODE3_SIZE                                   0x1
#define _T6HLT_MODE3_LENGTH                                 0x1
#define _T6HLT_MODE3_MASK                                   0x8
#define _T6HLT_MODE4_POSN                                   0x4
#define _T6HLT_MODE4_POSITION                               0x4
#define _T6HLT_MODE4_SIZE                                   0x1
#define _T6HLT_MODE4_LENGTH                                 0x1
#define _T6HLT_MODE4_MASK                                   0x10
#define _T6HLT_T6MODE_POSN                                  0x0
#define _T6HLT_T6MODE_POSITION                              0x0
#define _T6HLT_T6MODE_SIZE                                  0x5
#define _T6HLT_T6MODE_LENGTH                                0x5
#define _T6HLT_T6MODE_MASK                                  0x1F
#define _T6HLT_T6CKSYNC_POSN                                0x5
#define _T6HLT_T6CKSYNC_POSITION                            0x5
#define _T6HLT_T6CKSYNC_SIZE                                0x1
#define _T6HLT_T6CKSYNC_LENGTH                              0x1
#define _T6HLT_T6CKSYNC_MASK                                0x20
#define _T6HLT_T6CKPOL_POSN                                 0x6
#define _T6HLT_T6CKPOL_POSITION                             0x6
#define _T6HLT_T6CKPOL_SIZE                                 0x1
#define _T6HLT_T6CKPOL_LENGTH                               0x1
#define _T6HLT_T6CKPOL_MASK                                 0x40
#define _T6HLT_T6PSYNC_POSN                                 0x7
#define _T6HLT_T6PSYNC_POSITION                             0x7
#define _T6HLT_T6PSYNC_SIZE                                 0x1
#define _T6HLT_T6PSYNC_LENGTH                               0x1
#define _T6HLT_T6PSYNC_MASK                                 0x80
#define _T6HLT_T6MODE0_POSN                                 0x0
#define _T6HLT_T6MODE0_POSITION                             0x0
#define _T6HLT_T6MODE0_SIZE                                 0x1
#define _T6HLT_T6MODE0_LENGTH                               0x1
#define _T6HLT_T6MODE0_MASK                                 0x1
#define _T6HLT_T6MODE1_POSN                                 0x1
#define _T6HLT_T6MODE1_POSITION                             0x1
#define _T6HLT_T6MODE1_SIZE                                 0x1
#define _T6HLT_T6MODE1_LENGTH                               0x1
#define _T6HLT_T6MODE1_MASK                                 0x2
#define _T6HLT_T6MODE2_POSN                                 0x2
#define _T6HLT_T6MODE2_POSITION                             0x2
#define _T6HLT_T6MODE2_SIZE                                 0x1
#define _T6HLT_T6MODE2_LENGTH                               0x1
#define _T6HLT_T6MODE2_MASK                                 0x4
#define _T6HLT_T6MODE3_POSN                                 0x3
#define _T6HLT_T6MODE3_POSITION                             0x3
#define _T6HLT_T6MODE3_SIZE                                 0x1
#define _T6HLT_T6MODE3_LENGTH                               0x1
#define _T6HLT_T6MODE3_MASK                                 0x8
#define _T6HLT_T6MODE4_POSN                                 0x4
#define _T6HLT_T6MODE4_POSITION                             0x4
#define _T6HLT_T6MODE4_SIZE                                 0x1
#define _T6HLT_T6MODE4_LENGTH                               0x1
#define _T6HLT_T6MODE4_MASK                                 0x10

// Register: T6CLKCON
#define T6CLKCON T6CLKCON
extern volatile unsigned char           T6CLKCON            __at(0x3F96);
#ifndef _LIB_BUILD
asm("T6CLKCON equ 03F96h");
#endif
// aliases
extern volatile unsigned char           T6CLK               __at(0x3F96);
#ifndef _LIB_BUILD
asm("T6CLK equ 03F96h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CS                     :4;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
    };
    struct {
        unsigned T6CS                   :4;
    };
    struct {
        unsigned T6CS0                  :1;
        unsigned T6CS1                  :1;
        unsigned T6CS2                  :1;
        unsigned T6CS3                  :1;
    };
} T6CLKCONbits_t;
extern volatile T6CLKCONbits_t T6CLKCONbits __at(0x3F96);
// bitfield macros
#define _T6CLKCON_CS_POSN                                   0x0
#define _T6CLKCON_CS_POSITION                               0x0
#define _T6CLKCON_CS_SIZE                                   0x4
#define _T6CLKCON_CS_LENGTH                                 0x4
#define _T6CLKCON_CS_MASK                                   0xF
#define _T6CLKCON_CS0_POSN                                  0x0
#define _T6CLKCON_CS0_POSITION                              0x0
#define _T6CLKCON_CS0_SIZE                                  0x1
#define _T6CLKCON_CS0_LENGTH                                0x1
#define _T6CLKCON_CS0_MASK                                  0x1
#define _T6CLKCON_CS1_POSN                                  0x1
#define _T6CLKCON_CS1_POSITION                              0x1
#define _T6CLKCON_CS1_SIZE                                  0x1
#define _T6CLKCON_CS1_LENGTH                                0x1
#define _T6CLKCON_CS1_MASK                                  0x2
#define _T6CLKCON_CS2_POSN                                  0x2
#define _T6CLKCON_CS2_POSITION                              0x2
#define _T6CLKCON_CS2_SIZE                                  0x1
#define _T6CLKCON_CS2_LENGTH                                0x1
#define _T6CLKCON_CS2_MASK                                  0x4
#define _T6CLKCON_CS3_POSN                                  0x3
#define _T6CLKCON_CS3_POSITION                              0x3
#define _T6CLKCON_CS3_SIZE                                  0x1
#define _T6CLKCON_CS3_LENGTH                                0x1
#define _T6CLKCON_CS3_MASK                                  0x8
#define _T6CLKCON_T6CS_POSN                                 0x0
#define _T6CLKCON_T6CS_POSITION                             0x0
#define _T6CLKCON_T6CS_SIZE                                 0x4
#define _T6CLKCON_T6CS_LENGTH                               0x4
#define _T6CLKCON_T6CS_MASK                                 0xF
#define _T6CLKCON_T6CS0_POSN                                0x0
#define _T6CLKCON_T6CS0_POSITION                            0x0
#define _T6CLKCON_T6CS0_SIZE                                0x1
#define _T6CLKCON_T6CS0_LENGTH                              0x1
#define _T6CLKCON_T6CS0_MASK                                0x1
#define _T6CLKCON_T6CS1_POSN                                0x1
#define _T6CLKCON_T6CS1_POSITION                            0x1
#define _T6CLKCON_T6CS1_SIZE                                0x1
#define _T6CLKCON_T6CS1_LENGTH                              0x1
#define _T6CLKCON_T6CS1_MASK                                0x2
#define _T6CLKCON_T6CS2_POSN                                0x2
#define _T6CLKCON_T6CS2_POSITION                            0x2
#define _T6CLKCON_T6CS2_SIZE                                0x1
#define _T6CLKCON_T6CS2_LENGTH                              0x1
#define _T6CLKCON_T6CS2_MASK                                0x4
#define _T6CLKCON_T6CS3_POSN                                0x3
#define _T6CLKCON_T6CS3_POSITION                            0x3
#define _T6CLKCON_T6CS3_SIZE                                0x1
#define _T6CLKCON_T6CS3_LENGTH                              0x1
#define _T6CLKCON_T6CS3_MASK                                0x8
// alias bitfield definitions
typedef union {
    struct {
        unsigned CS                     :4;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
    };
    struct {
        unsigned T6CS                   :4;
    };
    struct {
        unsigned T6CS0                  :1;
        unsigned T6CS1                  :1;
        unsigned T6CS2                  :1;
        unsigned T6CS3                  :1;
    };
} T6CLKbits_t;
extern volatile T6CLKbits_t T6CLKbits __at(0x3F96);
// bitfield macros
#define _T6CLK_CS_POSN                                      0x0
#define _T6CLK_CS_POSITION                                  0x0
#define _T6CLK_CS_SIZE                                      0x4
#define _T6CLK_CS_LENGTH                                    0x4
#define _T6CLK_CS_MASK                                      0xF
#define _T6CLK_CS0_POSN                                     0x0
#define _T6CLK_CS0_POSITION                                 0x0
#define _T6CLK_CS0_SIZE                                     0x1
#define _T6CLK_CS0_LENGTH                                   0x1
#define _T6CLK_CS0_MASK                                     0x1
#define _T6CLK_CS1_POSN                                     0x1
#define _T6CLK_CS1_POSITION                                 0x1
#define _T6CLK_CS1_SIZE                                     0x1
#define _T6CLK_CS1_LENGTH                                   0x1
#define _T6CLK_CS1_MASK                                     0x2
#define _T6CLK_CS2_POSN                                     0x2
#define _T6CLK_CS2_POSITION                                 0x2
#define _T6CLK_CS2_SIZE                                     0x1
#define _T6CLK_CS2_LENGTH                                   0x1
#define _T6CLK_CS2_MASK                                     0x4
#define _T6CLK_CS3_POSN                                     0x3
#define _T6CLK_CS3_POSITION                                 0x3
#define _T6CLK_CS3_SIZE                                     0x1
#define _T6CLK_CS3_LENGTH                                   0x1
#define _T6CLK_CS3_MASK                                     0x8
#define _T6CLK_T6CS_POSN                                    0x0
#define _T6CLK_T6CS_POSITION                                0x0
#define _T6CLK_T6CS_SIZE                                    0x4
#define _T6CLK_T6CS_LENGTH                                  0x4
#define _T6CLK_T6CS_MASK                                    0xF
#define _T6CLK_T6CS0_POSN                                   0x0
#define _T6CLK_T6CS0_POSITION                               0x0
#define _T6CLK_T6CS0_SIZE                                   0x1
#define _T6CLK_T6CS0_LENGTH                                 0x1
#define _T6CLK_T6CS0_MASK                                   0x1
#define _T6CLK_T6CS1_POSN                                   0x1
#define _T6CLK_T6CS1_POSITION                               0x1
#define _T6CLK_T6CS1_SIZE                                   0x1
#define _T6CLK_T6CS1_LENGTH                                 0x1
#define _T6CLK_T6CS1_MASK                                   0x2
#define _T6CLK_T6CS2_POSN                                   0x2
#define _T6CLK_T6CS2_POSITION                               0x2
#define _T6CLK_T6CS2_SIZE                                   0x1
#define _T6CLK_T6CS2_LENGTH                                 0x1
#define _T6CLK_T6CS2_MASK                                   0x4
#define _T6CLK_T6CS3_POSN                                   0x3
#define _T6CLK_T6CS3_POSITION                               0x3
#define _T6CLK_T6CS3_SIZE                                   0x1
#define _T6CLK_T6CS3_LENGTH                                 0x1
#define _T6CLK_T6CS3_MASK                                   0x8

// Register: T6RST
#define T6RST T6RST
extern volatile unsigned char           T6RST               __at(0x3F97);
#ifndef _LIB_BUILD
asm("T6RST equ 03F97h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RSEL                   :5;
    };
    struct {
        unsigned RSEL0                  :1;
        unsigned RSEL1                  :1;
        unsigned RSEL2                  :1;
        unsigned RSEL3                  :1;
        unsigned RSEL4                  :1;
    };
    struct {
        unsigned T6RSEL                 :5;
    };
    struct {
        unsigned T6RSEL0                :1;
        unsigned T6RSEL1                :1;
        unsigned T6RSEL2                :1;
        unsigned T6RSEL3                :1;
        unsigned T6RSEL4                :1;
    };
} T6RSTbits_t;
extern volatile T6RSTbits_t T6RSTbits __at(0x3F97);
// bitfield macros
#define _T6RST_RSEL_POSN                                    0x0
#define _T6RST_RSEL_POSITION                                0x0
#define _T6RST_RSEL_SIZE                                    0x5
#define _T6RST_RSEL_LENGTH                                  0x5
#define _T6RST_RSEL_MASK                                    0x1F
#define _T6RST_RSEL0_POSN                                   0x0
#define _T6RST_RSEL0_POSITION                               0x0
#define _T6RST_RSEL0_SIZE                                   0x1
#define _T6RST_RSEL0_LENGTH                                 0x1
#define _T6RST_RSEL0_MASK                                   0x1
#define _T6RST_RSEL1_POSN                                   0x1
#define _T6RST_RSEL1_POSITION                               0x1
#define _T6RST_RSEL1_SIZE                                   0x1
#define _T6RST_RSEL1_LENGTH                                 0x1
#define _T6RST_RSEL1_MASK                                   0x2
#define _T6RST_RSEL2_POSN                                   0x2
#define _T6RST_RSEL2_POSITION                               0x2
#define _T6RST_RSEL2_SIZE                                   0x1
#define _T6RST_RSEL2_LENGTH                                 0x1
#define _T6RST_RSEL2_MASK                                   0x4
#define _T6RST_RSEL3_POSN                                   0x3
#define _T6RST_RSEL3_POSITION                               0x3
#define _T6RST_RSEL3_SIZE                                   0x1
#define _T6RST_RSEL3_LENGTH                                 0x1
#define _T6RST_RSEL3_MASK                                   0x8
#define _T6RST_RSEL4_POSN                                   0x4
#define _T6RST_RSEL4_POSITION                               0x4
#define _T6RST_RSEL4_SIZE                                   0x1
#define _T6RST_RSEL4_LENGTH                                 0x1
#define _T6RST_RSEL4_MASK                                   0x10
#define _T6RST_T6RSEL_POSN                                  0x0
#define _T6RST_T6RSEL_POSITION                              0x0
#define _T6RST_T6RSEL_SIZE                                  0x5
#define _T6RST_T6RSEL_LENGTH                                0x5
#define _T6RST_T6RSEL_MASK                                  0x1F
#define _T6RST_T6RSEL0_POSN                                 0x0
#define _T6RST_T6RSEL0_POSITION                             0x0
#define _T6RST_T6RSEL0_SIZE                                 0x1
#define _T6RST_T6RSEL0_LENGTH                               0x1
#define _T6RST_T6RSEL0_MASK                                 0x1
#define _T6RST_T6RSEL1_POSN                                 0x1
#define _T6RST_T6RSEL1_POSITION                             0x1
#define _T6RST_T6RSEL1_SIZE                                 0x1
#define _T6RST_T6RSEL1_LENGTH                               0x1
#define _T6RST_T6RSEL1_MASK                                 0x2
#define _T6RST_T6RSEL2_POSN                                 0x2
#define _T6RST_T6RSEL2_POSITION                             0x2
#define _T6RST_T6RSEL2_SIZE                                 0x1
#define _T6RST_T6RSEL2_LENGTH                               0x1
#define _T6RST_T6RSEL2_MASK                                 0x4
#define _T6RST_T6RSEL3_POSN                                 0x3
#define _T6RST_T6RSEL3_POSITION                             0x3
#define _T6RST_T6RSEL3_SIZE                                 0x1
#define _T6RST_T6RSEL3_LENGTH                               0x1
#define _T6RST_T6RSEL3_MASK                                 0x8
#define _T6RST_T6RSEL4_POSN                                 0x4
#define _T6RST_T6RSEL4_POSITION                             0x4
#define _T6RST_T6RSEL4_SIZE                                 0x1
#define _T6RST_T6RSEL4_LENGTH                               0x1
#define _T6RST_T6RSEL4_MASK                                 0x10

// Register: TMR5L
#define TMR5L TMR5L
extern volatile unsigned char           TMR5L               __at(0x3F98);
#ifndef _LIB_BUILD
asm("TMR5L equ 03F98h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR5L                  :8;
    };
    struct {
        unsigned TMR5L0                 :1;
        unsigned TMR5L1                 :1;
        unsigned TMR5L2                 :1;
        unsigned TMR5L3                 :1;
        unsigned TMR5L4                 :1;
        unsigned TMR5L5                 :1;
        unsigned TMR5L6                 :1;
        unsigned TMR5L7                 :1;
    };
} TMR5Lbits_t;
extern volatile TMR5Lbits_t TMR5Lbits __at(0x3F98);
// bitfield macros
#define _TMR5L_TMR5L_POSN                                   0x0
#define _TMR5L_TMR5L_POSITION                               0x0
#define _TMR5L_TMR5L_SIZE                                   0x8
#define _TMR5L_TMR5L_LENGTH                                 0x8
#define _TMR5L_TMR5L_MASK                                   0xFF
#define _TMR5L_TMR5L0_POSN                                  0x0
#define _TMR5L_TMR5L0_POSITION                              0x0
#define _TMR5L_TMR5L0_SIZE                                  0x1
#define _TMR5L_TMR5L0_LENGTH                                0x1
#define _TMR5L_TMR5L0_MASK                                  0x1
#define _TMR5L_TMR5L1_POSN                                  0x1
#define _TMR5L_TMR5L1_POSITION                              0x1
#define _TMR5L_TMR5L1_SIZE                                  0x1
#define _TMR5L_TMR5L1_LENGTH                                0x1
#define _TMR5L_TMR5L1_MASK                                  0x2
#define _TMR5L_TMR5L2_POSN                                  0x2
#define _TMR5L_TMR5L2_POSITION                              0x2
#define _TMR5L_TMR5L2_SIZE                                  0x1
#define _TMR5L_TMR5L2_LENGTH                                0x1
#define _TMR5L_TMR5L2_MASK                                  0x4
#define _TMR5L_TMR5L3_POSN                                  0x3
#define _TMR5L_TMR5L3_POSITION                              0x3
#define _TMR5L_TMR5L3_SIZE                                  0x1
#define _TMR5L_TMR5L3_LENGTH                                0x1
#define _TMR5L_TMR5L3_MASK                                  0x8
#define _TMR5L_TMR5L4_POSN                                  0x4
#define _TMR5L_TMR5L4_POSITION                              0x4
#define _TMR5L_TMR5L4_SIZE                                  0x1
#define _TMR5L_TMR5L4_LENGTH                                0x1
#define _TMR5L_TMR5L4_MASK                                  0x10
#define _TMR5L_TMR5L5_POSN                                  0x5
#define _TMR5L_TMR5L5_POSITION                              0x5
#define _TMR5L_TMR5L5_SIZE                                  0x1
#define _TMR5L_TMR5L5_LENGTH                                0x1
#define _TMR5L_TMR5L5_MASK                                  0x20
#define _TMR5L_TMR5L6_POSN                                  0x6
#define _TMR5L_TMR5L6_POSITION                              0x6
#define _TMR5L_TMR5L6_SIZE                                  0x1
#define _TMR5L_TMR5L6_LENGTH                                0x1
#define _TMR5L_TMR5L6_MASK                                  0x40
#define _TMR5L_TMR5L7_POSN                                  0x7
#define _TMR5L_TMR5L7_POSITION                              0x7
#define _TMR5L_TMR5L7_SIZE                                  0x1
#define _TMR5L_TMR5L7_LENGTH                                0x1
#define _TMR5L_TMR5L7_MASK                                  0x80

// Register: TMR5H
#define TMR5H TMR5H
extern volatile unsigned char           TMR5H               __at(0x3F99);
#ifndef _LIB_BUILD
asm("TMR5H equ 03F99h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR5H                  :8;
    };
    struct {
        unsigned TMR5H0                 :1;
        unsigned TMR5H1                 :1;
        unsigned TMR5H2                 :1;
        unsigned TMR5H3                 :1;
        unsigned TMR5H4                 :1;
        unsigned TMR5H5                 :1;
        unsigned TMR5H6                 :1;
        unsigned TMR5H7                 :1;
    };
} TMR5Hbits_t;
extern volatile TMR5Hbits_t TMR5Hbits __at(0x3F99);
// bitfield macros
#define _TMR5H_TMR5H_POSN                                   0x0
#define _TMR5H_TMR5H_POSITION                               0x0
#define _TMR5H_TMR5H_SIZE                                   0x8
#define _TMR5H_TMR5H_LENGTH                                 0x8
#define _TMR5H_TMR5H_MASK                                   0xFF
#define _TMR5H_TMR5H0_POSN                                  0x0
#define _TMR5H_TMR5H0_POSITION                              0x0
#define _TMR5H_TMR5H0_SIZE                                  0x1
#define _TMR5H_TMR5H0_LENGTH                                0x1
#define _TMR5H_TMR5H0_MASK                                  0x1
#define _TMR5H_TMR5H1_POSN                                  0x1
#define _TMR5H_TMR5H1_POSITION                              0x1
#define _TMR5H_TMR5H1_SIZE                                  0x1
#define _TMR5H_TMR5H1_LENGTH                                0x1
#define _TMR5H_TMR5H1_MASK                                  0x2
#define _TMR5H_TMR5H2_POSN                                  0x2
#define _TMR5H_TMR5H2_POSITION                              0x2
#define _TMR5H_TMR5H2_SIZE                                  0x1
#define _TMR5H_TMR5H2_LENGTH                                0x1
#define _TMR5H_TMR5H2_MASK                                  0x4
#define _TMR5H_TMR5H3_POSN                                  0x3
#define _TMR5H_TMR5H3_POSITION                              0x3
#define _TMR5H_TMR5H3_SIZE                                  0x1
#define _TMR5H_TMR5H3_LENGTH                                0x1
#define _TMR5H_TMR5H3_MASK                                  0x8
#define _TMR5H_TMR5H4_POSN                                  0x4
#define _TMR5H_TMR5H4_POSITION                              0x4
#define _TMR5H_TMR5H4_SIZE                                  0x1
#define _TMR5H_TMR5H4_LENGTH                                0x1
#define _TMR5H_TMR5H4_MASK                                  0x10
#define _TMR5H_TMR5H5_POSN                                  0x5
#define _TMR5H_TMR5H5_POSITION                              0x5
#define _TMR5H_TMR5H5_SIZE                                  0x1
#define _TMR5H_TMR5H5_LENGTH                                0x1
#define _TMR5H_TMR5H5_MASK                                  0x20
#define _TMR5H_TMR5H6_POSN                                  0x6
#define _TMR5H_TMR5H6_POSITION                              0x6
#define _TMR5H_TMR5H6_SIZE                                  0x1
#define _TMR5H_TMR5H6_LENGTH                                0x1
#define _TMR5H_TMR5H6_MASK                                  0x40
#define _TMR5H_TMR5H7_POSN                                  0x7
#define _TMR5H_TMR5H7_POSITION                              0x7
#define _TMR5H_TMR5H7_SIZE                                  0x1
#define _TMR5H_TMR5H7_LENGTH                                0x1
#define _TMR5H_TMR5H7_MASK                                  0x80

// Register: T5CON
#define T5CON T5CON
extern volatile unsigned char           T5CON               __at(0x3F9A);
#ifndef _LIB_BUILD
asm("T5CON equ 03F9Ah");
#endif
// aliases
extern volatile unsigned char           TMR5CON             __at(0x3F9A);
#ifndef _LIB_BUILD
asm("TMR5CON equ 03F9Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ON                     :1;
        unsigned RD16                   :1;
        unsigned NOT_SYNC               :1;
        unsigned                        :1;
        unsigned CKPS                   :2;
    };
    struct {
        unsigned TMR5ON                 :1;
        unsigned T5RD16                 :1;
        unsigned NOT_T5SYNC             :1;
        unsigned                        :1;
        unsigned T5CKPS0                :1;
        unsigned T5CKPS1                :1;
    };
    struct {
        unsigned                        :4;
        unsigned CKPS0                  :1;
        unsigned CKPS1                  :1;
    };
    struct {
        unsigned                        :1;
        unsigned RD165                  :1;
    };
} T5CONbits_t;
extern volatile T5CONbits_t T5CONbits __at(0x3F9A);
// bitfield macros
#define _T5CON_ON_POSN                                      0x0
#define _T5CON_ON_POSITION                                  0x0
#define _T5CON_ON_SIZE                                      0x1
#define _T5CON_ON_LENGTH                                    0x1
#define _T5CON_ON_MASK                                      0x1
#define _T5CON_RD16_POSN                                    0x1
#define _T5CON_RD16_POSITION                                0x1
#define _T5CON_RD16_SIZE                                    0x1
#define _T5CON_RD16_LENGTH                                  0x1
#define _T5CON_RD16_MASK                                    0x2
#define _T5CON_NOT_SYNC_POSN                                0x2
#define _T5CON_NOT_SYNC_POSITION                            0x2
#define _T5CON_NOT_SYNC_SIZE                                0x1
#define _T5CON_NOT_SYNC_LENGTH                              0x1
#define _T5CON_NOT_SYNC_MASK                                0x4
#define _T5CON_CKPS_POSN                                    0x4
#define _T5CON_CKPS_POSITION                                0x4
#define _T5CON_CKPS_SIZE                                    0x2
#define _T5CON_CKPS_LENGTH                                  0x2
#define _T5CON_CKPS_MASK                                    0x30
#define _T5CON_TMR5ON_POSN                                  0x0
#define _T5CON_TMR5ON_POSITION                              0x0
#define _T5CON_TMR5ON_SIZE                                  0x1
#define _T5CON_TMR5ON_LENGTH                                0x1
#define _T5CON_TMR5ON_MASK                                  0x1
#define _T5CON_T5RD16_POSN                                  0x1
#define _T5CON_T5RD16_POSITION                              0x1
#define _T5CON_T5RD16_SIZE                                  0x1
#define _T5CON_T5RD16_LENGTH                                0x1
#define _T5CON_T5RD16_MASK                                  0x2
#define _T5CON_NOT_T5SYNC_POSN                              0x2
#define _T5CON_NOT_T5SYNC_POSITION                          0x2
#define _T5CON_NOT_T5SYNC_SIZE                              0x1
#define _T5CON_NOT_T5SYNC_LENGTH                            0x1
#define _T5CON_NOT_T5SYNC_MASK                              0x4
#define _T5CON_T5CKPS0_POSN                                 0x4
#define _T5CON_T5CKPS0_POSITION                             0x4
#define _T5CON_T5CKPS0_SIZE                                 0x1
#define _T5CON_T5CKPS0_LENGTH                               0x1
#define _T5CON_T5CKPS0_MASK                                 0x10
#define _T5CON_T5CKPS1_POSN                                 0x5
#define _T5CON_T5CKPS1_POSITION                             0x5
#define _T5CON_T5CKPS1_SIZE                                 0x1
#define _T5CON_T5CKPS1_LENGTH                               0x1
#define _T5CON_T5CKPS1_MASK                                 0x20
#define _T5CON_CKPS0_POSN                                   0x4
#define _T5CON_CKPS0_POSITION                               0x4
#define _T5CON_CKPS0_SIZE                                   0x1
#define _T5CON_CKPS0_LENGTH                                 0x1
#define _T5CON_CKPS0_MASK                                   0x10
#define _T5CON_CKPS1_POSN                                   0x5
#define _T5CON_CKPS1_POSITION                               0x5
#define _T5CON_CKPS1_SIZE                                   0x1
#define _T5CON_CKPS1_LENGTH                                 0x1
#define _T5CON_CKPS1_MASK                                   0x20
#define _T5CON_RD165_POSN                                   0x1
#define _T5CON_RD165_POSITION                               0x1
#define _T5CON_RD165_SIZE                                   0x1
#define _T5CON_RD165_LENGTH                                 0x1
#define _T5CON_RD165_MASK                                   0x2
// alias bitfield definitions
typedef union {
    struct {
        unsigned ON                     :1;
        unsigned RD16                   :1;
        unsigned NOT_SYNC               :1;
        unsigned                        :1;
        unsigned CKPS                   :2;
    };
    struct {
        unsigned TMR5ON                 :1;
        unsigned T5RD16                 :1;
        unsigned NOT_T5SYNC             :1;
        unsigned                        :1;
        unsigned T5CKPS0                :1;
        unsigned T5CKPS1                :1;
    };
    struct {
        unsigned                        :4;
        unsigned CKPS0                  :1;
        unsigned CKPS1                  :1;
    };
    struct {
        unsigned                        :1;
        unsigned RD165                  :1;
    };
} TMR5CONbits_t;
extern volatile TMR5CONbits_t TMR5CONbits __at(0x3F9A);
// bitfield macros
#define _TMR5CON_ON_POSN                                    0x0
#define _TMR5CON_ON_POSITION                                0x0
#define _TMR5CON_ON_SIZE                                    0x1
#define _TMR5CON_ON_LENGTH                                  0x1
#define _TMR5CON_ON_MASK                                    0x1
#define _TMR5CON_RD16_POSN                                  0x1
#define _TMR5CON_RD16_POSITION                              0x1
#define _TMR5CON_RD16_SIZE                                  0x1
#define _TMR5CON_RD16_LENGTH                                0x1
#define _TMR5CON_RD16_MASK                                  0x2
#define _TMR5CON_NOT_SYNC_POSN                              0x2
#define _TMR5CON_NOT_SYNC_POSITION                          0x2
#define _TMR5CON_NOT_SYNC_SIZE                              0x1
#define _TMR5CON_NOT_SYNC_LENGTH                            0x1
#define _TMR5CON_NOT_SYNC_MASK                              0x4
#define _TMR5CON_CKPS_POSN                                  0x4
#define _TMR5CON_CKPS_POSITION                              0x4
#define _TMR5CON_CKPS_SIZE                                  0x2
#define _TMR5CON_CKPS_LENGTH                                0x2
#define _TMR5CON_CKPS_MASK                                  0x30
#define _TMR5CON_TMR5ON_POSN                                0x0
#define _TMR5CON_TMR5ON_POSITION                            0x0
#define _TMR5CON_TMR5ON_SIZE                                0x1
#define _TMR5CON_TMR5ON_LENGTH                              0x1
#define _TMR5CON_TMR5ON_MASK                                0x1
#define _TMR5CON_T5RD16_POSN                                0x1
#define _TMR5CON_T5RD16_POSITION                            0x1
#define _TMR5CON_T5RD16_SIZE                                0x1
#define _TMR5CON_T5RD16_LENGTH                              0x1
#define _TMR5CON_T5RD16_MASK                                0x2
#define _TMR5CON_NOT_T5SYNC_POSN                            0x2
#define _TMR5CON_NOT_T5SYNC_POSITION                        0x2
#define _TMR5CON_NOT_T5SYNC_SIZE                            0x1
#define _TMR5CON_NOT_T5SYNC_LENGTH                          0x1
#define _TMR5CON_NOT_T5SYNC_MASK                            0x4
#define _TMR5CON_T5CKPS0_POSN                               0x4
#define _TMR5CON_T5CKPS0_POSITION                           0x4
#define _TMR5CON_T5CKPS0_SIZE                               0x1
#define _TMR5CON_T5CKPS0_LENGTH                             0x1
#define _TMR5CON_T5CKPS0_MASK                               0x10
#define _TMR5CON_T5CKPS1_POSN                               0x5
#define _TMR5CON_T5CKPS1_POSITION                           0x5
#define _TMR5CON_T5CKPS1_SIZE                               0x1
#define _TMR5CON_T5CKPS1_LENGTH                             0x1
#define _TMR5CON_T5CKPS1_MASK                               0x20
#define _TMR5CON_CKPS0_POSN                                 0x4
#define _TMR5CON_CKPS0_POSITION                             0x4
#define _TMR5CON_CKPS0_SIZE                                 0x1
#define _TMR5CON_CKPS0_LENGTH                               0x1
#define _TMR5CON_CKPS0_MASK                                 0x10
#define _TMR5CON_CKPS1_POSN                                 0x5
#define _TMR5CON_CKPS1_POSITION                             0x5
#define _TMR5CON_CKPS1_SIZE                                 0x1
#define _TMR5CON_CKPS1_LENGTH                               0x1
#define _TMR5CON_CKPS1_MASK                                 0x20
#define _TMR5CON_RD165_POSN                                 0x1
#define _TMR5CON_RD165_POSITION                             0x1
#define _TMR5CON_RD165_SIZE                                 0x1
#define _TMR5CON_RD165_LENGTH                               0x1
#define _TMR5CON_RD165_MASK                                 0x2

// Register: T5GCON
#define T5GCON T5GCON
extern volatile unsigned char           T5GCON              __at(0x3F9B);
#ifndef _LIB_BUILD
asm("T5GCON equ 03F9Bh");
#endif
// aliases
extern volatile unsigned char           TMR5GCON            __at(0x3F9B);
#ifndef _LIB_BUILD
asm("TMR5GCON equ 03F9Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned GVAL                   :1;
        unsigned GGO                    :1;
        unsigned GSPM                   :1;
        unsigned GTM                    :1;
        unsigned GPOL                   :1;
        unsigned GE                     :1;
    };
    struct {
        unsigned                        :2;
        unsigned T5GVAL                 :1;
        unsigned T5GGO                  :1;
        unsigned T5GSPM                 :1;
        unsigned T5GTM                  :1;
        unsigned T5GPOL                 :1;
        unsigned T5GE                   :1;
    };
    struct {
        unsigned                        :3;
        unsigned NOT_DONE               :1;
    };
    struct {
        unsigned                        :3;
        unsigned NOT_T5DONE             :1;
    };
} T5GCONbits_t;
extern volatile T5GCONbits_t T5GCONbits __at(0x3F9B);
// bitfield macros
#define _T5GCON_GVAL_POSN                                   0x2
#define _T5GCON_GVAL_POSITION                               0x2
#define _T5GCON_GVAL_SIZE                                   0x1
#define _T5GCON_GVAL_LENGTH                                 0x1
#define _T5GCON_GVAL_MASK                                   0x4
#define _T5GCON_GGO_POSN                                    0x3
#define _T5GCON_GGO_POSITION                                0x3
#define _T5GCON_GGO_SIZE                                    0x1
#define _T5GCON_GGO_LENGTH                                  0x1
#define _T5GCON_GGO_MASK                                    0x8
#define _T5GCON_GSPM_POSN                                   0x4
#define _T5GCON_GSPM_POSITION                               0x4
#define _T5GCON_GSPM_SIZE                                   0x1
#define _T5GCON_GSPM_LENGTH                                 0x1
#define _T5GCON_GSPM_MASK                                   0x10
#define _T5GCON_GTM_POSN                                    0x5
#define _T5GCON_GTM_POSITION                                0x5
#define _T5GCON_GTM_SIZE                                    0x1
#define _T5GCON_GTM_LENGTH                                  0x1
#define _T5GCON_GTM_MASK                                    0x20
#define _T5GCON_GPOL_POSN                                   0x6
#define _T5GCON_GPOL_POSITION                               0x6
#define _T5GCON_GPOL_SIZE                                   0x1
#define _T5GCON_GPOL_LENGTH                                 0x1
#define _T5GCON_GPOL_MASK                                   0x40
#define _T5GCON_GE_POSN                                     0x7
#define _T5GCON_GE_POSITION                                 0x7
#define _T5GCON_GE_SIZE                                     0x1
#define _T5GCON_GE_LENGTH                                   0x1
#define _T5GCON_GE_MASK                                     0x80
#define _T5GCON_T5GVAL_POSN                                 0x2
#define _T5GCON_T5GVAL_POSITION                             0x2
#define _T5GCON_T5GVAL_SIZE                                 0x1
#define _T5GCON_T5GVAL_LENGTH                               0x1
#define _T5GCON_T5GVAL_MASK                                 0x4
#define _T5GCON_T5GGO_POSN                                  0x3
#define _T5GCON_T5GGO_POSITION                              0x3
#define _T5GCON_T5GGO_SIZE                                  0x1
#define _T5GCON_T5GGO_LENGTH                                0x1
#define _T5GCON_T5GGO_MASK                                  0x8
#define _T5GCON_T5GSPM_POSN                                 0x4
#define _T5GCON_T5GSPM_POSITION                             0x4
#define _T5GCON_T5GSPM_SIZE                                 0x1
#define _T5GCON_T5GSPM_LENGTH                               0x1
#define _T5GCON_T5GSPM_MASK                                 0x10
#define _T5GCON_T5GTM_POSN                                  0x5
#define _T5GCON_T5GTM_POSITION                              0x5
#define _T5GCON_T5GTM_SIZE                                  0x1
#define _T5GCON_T5GTM_LENGTH                                0x1
#define _T5GCON_T5GTM_MASK                                  0x20
#define _T5GCON_T5GPOL_POSN                                 0x6
#define _T5GCON_T5GPOL_POSITION                             0x6
#define _T5GCON_T5GPOL_SIZE                                 0x1
#define _T5GCON_T5GPOL_LENGTH                               0x1
#define _T5GCON_T5GPOL_MASK                                 0x40
#define _T5GCON_T5GE_POSN                                   0x7
#define _T5GCON_T5GE_POSITION                               0x7
#define _T5GCON_T5GE_SIZE                                   0x1
#define _T5GCON_T5GE_LENGTH                                 0x1
#define _T5GCON_T5GE_MASK                                   0x80
#define _T5GCON_NOT_DONE_POSN                               0x3
#define _T5GCON_NOT_DONE_POSITION                           0x3
#define _T5GCON_NOT_DONE_SIZE                               0x1
#define _T5GCON_NOT_DONE_LENGTH                             0x1
#define _T5GCON_NOT_DONE_MASK                               0x8
#define _T5GCON_NOT_T5DONE_POSN                             0x3
#define _T5GCON_NOT_T5DONE_POSITION                         0x3
#define _T5GCON_NOT_T5DONE_SIZE                             0x1
#define _T5GCON_NOT_T5DONE_LENGTH                           0x1
#define _T5GCON_NOT_T5DONE_MASK                             0x8
// alias bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned GVAL                   :1;
        unsigned GGO                    :1;
        unsigned GSPM                   :1;
        unsigned GTM                    :1;
        unsigned GPOL                   :1;
        unsigned GE                     :1;
    };
    struct {
        unsigned                        :2;
        unsigned T5GVAL                 :1;
        unsigned T5GGO                  :1;
        unsigned T5GSPM                 :1;
        unsigned T5GTM                  :1;
        unsigned T5GPOL                 :1;
        unsigned T5GE                   :1;
    };
    struct {
        unsigned                        :3;
        unsigned NOT_DONE               :1;
    };
    struct {
        unsigned                        :3;
        unsigned NOT_T5DONE             :1;
    };
} TMR5GCONbits_t;
extern volatile TMR5GCONbits_t TMR5GCONbits __at(0x3F9B);
// bitfield macros
#define _TMR5GCON_GVAL_POSN                                 0x2
#define _TMR5GCON_GVAL_POSITION                             0x2
#define _TMR5GCON_GVAL_SIZE                                 0x1
#define _TMR5GCON_GVAL_LENGTH                               0x1
#define _TMR5GCON_GVAL_MASK                                 0x4
#define _TMR5GCON_GGO_POSN                                  0x3
#define _TMR5GCON_GGO_POSITION                              0x3
#define _TMR5GCON_GGO_SIZE                                  0x1
#define _TMR5GCON_GGO_LENGTH                                0x1
#define _TMR5GCON_GGO_MASK                                  0x8
#define _TMR5GCON_GSPM_POSN                                 0x4
#define _TMR5GCON_GSPM_POSITION                             0x4
#define _TMR5GCON_GSPM_SIZE                                 0x1
#define _TMR5GCON_GSPM_LENGTH                               0x1
#define _TMR5GCON_GSPM_MASK                                 0x10
#define _TMR5GCON_GTM_POSN                                  0x5
#define _TMR5GCON_GTM_POSITION                              0x5
#define _TMR5GCON_GTM_SIZE                                  0x1
#define _TMR5GCON_GTM_LENGTH                                0x1
#define _TMR5GCON_GTM_MASK                                  0x20
#define _TMR5GCON_GPOL_POSN                                 0x6
#define _TMR5GCON_GPOL_POSITION                             0x6
#define _TMR5GCON_GPOL_SIZE                                 0x1
#define _TMR5GCON_GPOL_LENGTH                               0x1
#define _TMR5GCON_GPOL_MASK                                 0x40
#define _TMR5GCON_GE_POSN                                   0x7
#define _TMR5GCON_GE_POSITION                               0x7
#define _TMR5GCON_GE_SIZE                                   0x1
#define _TMR5GCON_GE_LENGTH                                 0x1
#define _TMR5GCON_GE_MASK                                   0x80
#define _TMR5GCON_T5GVAL_POSN                               0x2
#define _TMR5GCON_T5GVAL_POSITION                           0x2
#define _TMR5GCON_T5GVAL_SIZE                               0x1
#define _TMR5GCON_T5GVAL_LENGTH                             0x1
#define _TMR5GCON_T5GVAL_MASK                               0x4
#define _TMR5GCON_T5GGO_POSN                                0x3
#define _TMR5GCON_T5GGO_POSITION                            0x3
#define _TMR5GCON_T5GGO_SIZE                                0x1
#define _TMR5GCON_T5GGO_LENGTH                              0x1
#define _TMR5GCON_T5GGO_MASK                                0x8
#define _TMR5GCON_T5GSPM_POSN                               0x4
#define _TMR5GCON_T5GSPM_POSITION                           0x4
#define _TMR5GCON_T5GSPM_SIZE                               0x1
#define _TMR5GCON_T5GSPM_LENGTH                             0x1
#define _TMR5GCON_T5GSPM_MASK                               0x10
#define _TMR5GCON_T5GTM_POSN                                0x5
#define _TMR5GCON_T5GTM_POSITION                            0x5
#define _TMR5GCON_T5GTM_SIZE                                0x1
#define _TMR5GCON_T5GTM_LENGTH                              0x1
#define _TMR5GCON_T5GTM_MASK                                0x20
#define _TMR5GCON_T5GPOL_POSN                               0x6
#define _TMR5GCON_T5GPOL_POSITION                           0x6
#define _TMR5GCON_T5GPOL_SIZE                               0x1
#define _TMR5GCON_T5GPOL_LENGTH                             0x1
#define _TMR5GCON_T5GPOL_MASK                               0x40
#define _TMR5GCON_T5GE_POSN                                 0x7
#define _TMR5GCON_T5GE_POSITION                             0x7
#define _TMR5GCON_T5GE_SIZE                                 0x1
#define _TMR5GCON_T5GE_LENGTH                               0x1
#define _TMR5GCON_T5GE_MASK                                 0x80
#define _TMR5GCON_NOT_DONE_POSN                             0x3
#define _TMR5GCON_NOT_DONE_POSITION                         0x3
#define _TMR5GCON_NOT_DONE_SIZE                             0x1
#define _TMR5GCON_NOT_DONE_LENGTH                           0x1
#define _TMR5GCON_NOT_DONE_MASK                             0x8
#define _TMR5GCON_NOT_T5DONE_POSN                           0x3
#define _TMR5GCON_NOT_T5DONE_POSITION                       0x3
#define _TMR5GCON_NOT_T5DONE_SIZE                           0x1
#define _TMR5GCON_NOT_T5DONE_LENGTH                         0x1
#define _TMR5GCON_NOT_T5DONE_MASK                           0x8

// Register: T5GATE
#define T5GATE T5GATE
extern volatile unsigned char           T5GATE              __at(0x3F9C);
#ifndef _LIB_BUILD
asm("T5GATE equ 03F9Ch");
#endif
// aliases
extern volatile unsigned char           TMR5GATE            __at(0x3F9C);
#ifndef _LIB_BUILD
asm("TMR5GATE equ 03F9Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned GSS                    :8;
    };
    struct {
        unsigned GSS0                   :1;
        unsigned GSS1                   :1;
        unsigned GSS2                   :1;
        unsigned GSS3                   :1;
        unsigned GSS4                   :1;
    };
    struct {
        unsigned T5GSS0                 :1;
        unsigned T5GSS1                 :1;
        unsigned T5GSS2                 :1;
        unsigned T5GSS3                 :1;
        unsigned T5GSS4                 :1;
    };
} T5GATEbits_t;
extern volatile T5GATEbits_t T5GATEbits __at(0x3F9C);
// bitfield macros
#define _T5GATE_GSS_POSN                                    0x0
#define _T5GATE_GSS_POSITION                                0x0
#define _T5GATE_GSS_SIZE                                    0x8
#define _T5GATE_GSS_LENGTH                                  0x8
#define _T5GATE_GSS_MASK                                    0xFF
#define _T5GATE_GSS0_POSN                                   0x0
#define _T5GATE_GSS0_POSITION                               0x0
#define _T5GATE_GSS0_SIZE                                   0x1
#define _T5GATE_GSS0_LENGTH                                 0x1
#define _T5GATE_GSS0_MASK                                   0x1
#define _T5GATE_GSS1_POSN                                   0x1
#define _T5GATE_GSS1_POSITION                               0x1
#define _T5GATE_GSS1_SIZE                                   0x1
#define _T5GATE_GSS1_LENGTH                                 0x1
#define _T5GATE_GSS1_MASK                                   0x2
#define _T5GATE_GSS2_POSN                                   0x2
#define _T5GATE_GSS2_POSITION                               0x2
#define _T5GATE_GSS2_SIZE                                   0x1
#define _T5GATE_GSS2_LENGTH                                 0x1
#define _T5GATE_GSS2_MASK                                   0x4
#define _T5GATE_GSS3_POSN                                   0x3
#define _T5GATE_GSS3_POSITION                               0x3
#define _T5GATE_GSS3_SIZE                                   0x1
#define _T5GATE_GSS3_LENGTH                                 0x1
#define _T5GATE_GSS3_MASK                                   0x8
#define _T5GATE_GSS4_POSN                                   0x4
#define _T5GATE_GSS4_POSITION                               0x4
#define _T5GATE_GSS4_SIZE                                   0x1
#define _T5GATE_GSS4_LENGTH                                 0x1
#define _T5GATE_GSS4_MASK                                   0x10
#define _T5GATE_T5GSS0_POSN                                 0x0
#define _T5GATE_T5GSS0_POSITION                             0x0
#define _T5GATE_T5GSS0_SIZE                                 0x1
#define _T5GATE_T5GSS0_LENGTH                               0x1
#define _T5GATE_T5GSS0_MASK                                 0x1
#define _T5GATE_T5GSS1_POSN                                 0x1
#define _T5GATE_T5GSS1_POSITION                             0x1
#define _T5GATE_T5GSS1_SIZE                                 0x1
#define _T5GATE_T5GSS1_LENGTH                               0x1
#define _T5GATE_T5GSS1_MASK                                 0x2
#define _T5GATE_T5GSS2_POSN                                 0x2
#define _T5GATE_T5GSS2_POSITION                             0x2
#define _T5GATE_T5GSS2_SIZE                                 0x1
#define _T5GATE_T5GSS2_LENGTH                               0x1
#define _T5GATE_T5GSS2_MASK                                 0x4
#define _T5GATE_T5GSS3_POSN                                 0x3
#define _T5GATE_T5GSS3_POSITION                             0x3
#define _T5GATE_T5GSS3_SIZE                                 0x1
#define _T5GATE_T5GSS3_LENGTH                               0x1
#define _T5GATE_T5GSS3_MASK                                 0x8
#define _T5GATE_T5GSS4_POSN                                 0x4
#define _T5GATE_T5GSS4_POSITION                             0x4
#define _T5GATE_T5GSS4_SIZE                                 0x1
#define _T5GATE_T5GSS4_LENGTH                               0x1
#define _T5GATE_T5GSS4_MASK                                 0x10
// alias bitfield definitions
typedef union {
    struct {
        unsigned GSS                    :8;
    };
    struct {
        unsigned GSS0                   :1;
        unsigned GSS1                   :1;
        unsigned GSS2                   :1;
        unsigned GSS3                   :1;
        unsigned GSS4                   :1;
    };
    struct {
        unsigned T5GSS0                 :1;
        unsigned T5GSS1                 :1;
        unsigned T5GSS2                 :1;
        unsigned T5GSS3                 :1;
        unsigned T5GSS4                 :1;
    };
} TMR5GATEbits_t;
extern volatile TMR5GATEbits_t TMR5GATEbits __at(0x3F9C);
// bitfield macros
#define _TMR5GATE_GSS_POSN                                  0x0
#define _TMR5GATE_GSS_POSITION                              0x0
#define _TMR5GATE_GSS_SIZE                                  0x8
#define _TMR5GATE_GSS_LENGTH                                0x8
#define _TMR5GATE_GSS_MASK                                  0xFF
#define _TMR5GATE_GSS0_POSN                                 0x0
#define _TMR5GATE_GSS0_POSITION                             0x0
#define _TMR5GATE_GSS0_SIZE                                 0x1
#define _TMR5GATE_GSS0_LENGTH                               0x1
#define _TMR5GATE_GSS0_MASK                                 0x1
#define _TMR5GATE_GSS1_POSN                                 0x1
#define _TMR5GATE_GSS1_POSITION                             0x1
#define _TMR5GATE_GSS1_SIZE                                 0x1
#define _TMR5GATE_GSS1_LENGTH                               0x1
#define _TMR5GATE_GSS1_MASK                                 0x2
#define _TMR5GATE_GSS2_POSN                                 0x2
#define _TMR5GATE_GSS2_POSITION                             0x2
#define _TMR5GATE_GSS2_SIZE                                 0x1
#define _TMR5GATE_GSS2_LENGTH                               0x1
#define _TMR5GATE_GSS2_MASK                                 0x4
#define _TMR5GATE_GSS3_POSN                                 0x3
#define _TMR5GATE_GSS3_POSITION                             0x3
#define _TMR5GATE_GSS3_SIZE                                 0x1
#define _TMR5GATE_GSS3_LENGTH                               0x1
#define _TMR5GATE_GSS3_MASK                                 0x8
#define _TMR5GATE_GSS4_POSN                                 0x4
#define _TMR5GATE_GSS4_POSITION                             0x4
#define _TMR5GATE_GSS4_SIZE                                 0x1
#define _TMR5GATE_GSS4_LENGTH                               0x1
#define _TMR5GATE_GSS4_MASK                                 0x10
#define _TMR5GATE_T5GSS0_POSN                               0x0
#define _TMR5GATE_T5GSS0_POSITION                           0x0
#define _TMR5GATE_T5GSS0_SIZE                               0x1
#define _TMR5GATE_T5GSS0_LENGTH                             0x1
#define _TMR5GATE_T5GSS0_MASK                               0x1
#define _TMR5GATE_T5GSS1_POSN                               0x1
#define _TMR5GATE_T5GSS1_POSITION                           0x1
#define _TMR5GATE_T5GSS1_SIZE                               0x1
#define _TMR5GATE_T5GSS1_LENGTH                             0x1
#define _TMR5GATE_T5GSS1_MASK                               0x2
#define _TMR5GATE_T5GSS2_POSN                               0x2
#define _TMR5GATE_T5GSS2_POSITION                           0x2
#define _TMR5GATE_T5GSS2_SIZE                               0x1
#define _TMR5GATE_T5GSS2_LENGTH                             0x1
#define _TMR5GATE_T5GSS2_MASK                               0x4
#define _TMR5GATE_T5GSS3_POSN                               0x3
#define _TMR5GATE_T5GSS3_POSITION                           0x3
#define _TMR5GATE_T5GSS3_SIZE                               0x1
#define _TMR5GATE_T5GSS3_LENGTH                             0x1
#define _TMR5GATE_T5GSS3_MASK                               0x8
#define _TMR5GATE_T5GSS4_POSN                               0x4
#define _TMR5GATE_T5GSS4_POSITION                           0x4
#define _TMR5GATE_T5GSS4_SIZE                               0x1
#define _TMR5GATE_T5GSS4_LENGTH                             0x1
#define _TMR5GATE_T5GSS4_MASK                               0x10

// Register: T5CLK
#define T5CLK T5CLK
extern volatile unsigned char           T5CLK               __at(0x3F9D);
#ifndef _LIB_BUILD
asm("T5CLK equ 03F9Dh");
#endif
// aliases
extern volatile unsigned char           TMR5CLK             __at(0x3F9D);
#ifndef _LIB_BUILD
asm("TMR5CLK equ 03F9Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CS                     :8;
    };
    struct {
        unsigned T5CS0                  :1;
        unsigned T5CS1                  :1;
        unsigned T5CS2                  :1;
        unsigned T5CS3                  :1;
        unsigned T5CS4                  :1;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
        unsigned CS4                    :1;
    };
} T5CLKbits_t;
extern volatile T5CLKbits_t T5CLKbits __at(0x3F9D);
// bitfield macros
#define _T5CLK_CS_POSN                                      0x0
#define _T5CLK_CS_POSITION                                  0x0
#define _T5CLK_CS_SIZE                                      0x8
#define _T5CLK_CS_LENGTH                                    0x8
#define _T5CLK_CS_MASK                                      0xFF
#define _T5CLK_T5CS0_POSN                                   0x0
#define _T5CLK_T5CS0_POSITION                               0x0
#define _T5CLK_T5CS0_SIZE                                   0x1
#define _T5CLK_T5CS0_LENGTH                                 0x1
#define _T5CLK_T5CS0_MASK                                   0x1
#define _T5CLK_T5CS1_POSN                                   0x1
#define _T5CLK_T5CS1_POSITION                               0x1
#define _T5CLK_T5CS1_SIZE                                   0x1
#define _T5CLK_T5CS1_LENGTH                                 0x1
#define _T5CLK_T5CS1_MASK                                   0x2
#define _T5CLK_T5CS2_POSN                                   0x2
#define _T5CLK_T5CS2_POSITION                               0x2
#define _T5CLK_T5CS2_SIZE                                   0x1
#define _T5CLK_T5CS2_LENGTH                                 0x1
#define _T5CLK_T5CS2_MASK                                   0x4
#define _T5CLK_T5CS3_POSN                                   0x3
#define _T5CLK_T5CS3_POSITION                               0x3
#define _T5CLK_T5CS3_SIZE                                   0x1
#define _T5CLK_T5CS3_LENGTH                                 0x1
#define _T5CLK_T5CS3_MASK                                   0x8
#define _T5CLK_T5CS4_POSN                                   0x4
#define _T5CLK_T5CS4_POSITION                               0x4
#define _T5CLK_T5CS4_SIZE                                   0x1
#define _T5CLK_T5CS4_LENGTH                                 0x1
#define _T5CLK_T5CS4_MASK                                   0x10
#define _T5CLK_CS0_POSN                                     0x0
#define _T5CLK_CS0_POSITION                                 0x0
#define _T5CLK_CS0_SIZE                                     0x1
#define _T5CLK_CS0_LENGTH                                   0x1
#define _T5CLK_CS0_MASK                                     0x1
#define _T5CLK_CS1_POSN                                     0x1
#define _T5CLK_CS1_POSITION                                 0x1
#define _T5CLK_CS1_SIZE                                     0x1
#define _T5CLK_CS1_LENGTH                                   0x1
#define _T5CLK_CS1_MASK                                     0x2
#define _T5CLK_CS2_POSN                                     0x2
#define _T5CLK_CS2_POSITION                                 0x2
#define _T5CLK_CS2_SIZE                                     0x1
#define _T5CLK_CS2_LENGTH                                   0x1
#define _T5CLK_CS2_MASK                                     0x4
#define _T5CLK_CS3_POSN                                     0x3
#define _T5CLK_CS3_POSITION                                 0x3
#define _T5CLK_CS3_SIZE                                     0x1
#define _T5CLK_CS3_LENGTH                                   0x1
#define _T5CLK_CS3_MASK                                     0x8
#define _T5CLK_CS4_POSN                                     0x4
#define _T5CLK_CS4_POSITION                                 0x4
#define _T5CLK_CS4_SIZE                                     0x1
#define _T5CLK_CS4_LENGTH                                   0x1
#define _T5CLK_CS4_MASK                                     0x10
// alias bitfield definitions
typedef union {
    struct {
        unsigned CS                     :8;
    };
    struct {
        unsigned T5CS0                  :1;
        unsigned T5CS1                  :1;
        unsigned T5CS2                  :1;
        unsigned T5CS3                  :1;
        unsigned T5CS4                  :1;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
        unsigned CS4                    :1;
    };
} TMR5CLKbits_t;
extern volatile TMR5CLKbits_t TMR5CLKbits __at(0x3F9D);
// bitfield macros
#define _TMR5CLK_CS_POSN                                    0x0
#define _TMR5CLK_CS_POSITION                                0x0
#define _TMR5CLK_CS_SIZE                                    0x8
#define _TMR5CLK_CS_LENGTH                                  0x8
#define _TMR5CLK_CS_MASK                                    0xFF
#define _TMR5CLK_T5CS0_POSN                                 0x0
#define _TMR5CLK_T5CS0_POSITION                             0x0
#define _TMR5CLK_T5CS0_SIZE                                 0x1
#define _TMR5CLK_T5CS0_LENGTH                               0x1
#define _TMR5CLK_T5CS0_MASK                                 0x1
#define _TMR5CLK_T5CS1_POSN                                 0x1
#define _TMR5CLK_T5CS1_POSITION                             0x1
#define _TMR5CLK_T5CS1_SIZE                                 0x1
#define _TMR5CLK_T5CS1_LENGTH                               0x1
#define _TMR5CLK_T5CS1_MASK                                 0x2
#define _TMR5CLK_T5CS2_POSN                                 0x2
#define _TMR5CLK_T5CS2_POSITION                             0x2
#define _TMR5CLK_T5CS2_SIZE                                 0x1
#define _TMR5CLK_T5CS2_LENGTH                               0x1
#define _TMR5CLK_T5CS2_MASK                                 0x4
#define _TMR5CLK_T5CS3_POSN                                 0x3
#define _TMR5CLK_T5CS3_POSITION                             0x3
#define _TMR5CLK_T5CS3_SIZE                                 0x1
#define _TMR5CLK_T5CS3_LENGTH                               0x1
#define _TMR5CLK_T5CS3_MASK                                 0x8
#define _TMR5CLK_T5CS4_POSN                                 0x4
#define _TMR5CLK_T5CS4_POSITION                             0x4
#define _TMR5CLK_T5CS4_SIZE                                 0x1
#define _TMR5CLK_T5CS4_LENGTH                               0x1
#define _TMR5CLK_T5CS4_MASK                                 0x10
#define _TMR5CLK_CS0_POSN                                   0x0
#define _TMR5CLK_CS0_POSITION                               0x0
#define _TMR5CLK_CS0_SIZE                                   0x1
#define _TMR5CLK_CS0_LENGTH                                 0x1
#define _TMR5CLK_CS0_MASK                                   0x1
#define _TMR5CLK_CS1_POSN                                   0x1
#define _TMR5CLK_CS1_POSITION                               0x1
#define _TMR5CLK_CS1_SIZE                                   0x1
#define _TMR5CLK_CS1_LENGTH                                 0x1
#define _TMR5CLK_CS1_MASK                                   0x2
#define _TMR5CLK_CS2_POSN                                   0x2
#define _TMR5CLK_CS2_POSITION                               0x2
#define _TMR5CLK_CS2_SIZE                                   0x1
#define _TMR5CLK_CS2_LENGTH                                 0x1
#define _TMR5CLK_CS2_MASK                                   0x4
#define _TMR5CLK_CS3_POSN                                   0x3
#define _TMR5CLK_CS3_POSITION                               0x3
#define _TMR5CLK_CS3_SIZE                                   0x1
#define _TMR5CLK_CS3_LENGTH                                 0x1
#define _TMR5CLK_CS3_MASK                                   0x8
#define _TMR5CLK_CS4_POSN                                   0x4
#define _TMR5CLK_CS4_POSITION                               0x4
#define _TMR5CLK_CS4_SIZE                                   0x1
#define _TMR5CLK_CS4_LENGTH                                 0x1
#define _TMR5CLK_CS4_MASK                                   0x10

// Register: T4TMR
#define T4TMR T4TMR
extern volatile unsigned char           T4TMR               __at(0x3F9E);
#ifndef _LIB_BUILD
asm("T4TMR equ 03F9Eh");
#endif
// aliases
extern volatile unsigned char           TMR4                __at(0x3F9E);
#ifndef _LIB_BUILD
asm("TMR4 equ 03F9Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR4                   :8;
    };
} T4TMRbits_t;
extern volatile T4TMRbits_t T4TMRbits __at(0x3F9E);
// bitfield macros
#define _T4TMR_TMR4_POSN                                    0x0
#define _T4TMR_TMR4_POSITION                                0x0
#define _T4TMR_TMR4_SIZE                                    0x8
#define _T4TMR_TMR4_LENGTH                                  0x8
#define _T4TMR_TMR4_MASK                                    0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned TMR4                   :8;
    };
} TMR4bits_t;
extern volatile TMR4bits_t TMR4bits __at(0x3F9E);
// bitfield macros
#define _TMR4_TMR4_POSN                                     0x0
#define _TMR4_TMR4_POSITION                                 0x0
#define _TMR4_TMR4_SIZE                                     0x8
#define _TMR4_TMR4_LENGTH                                   0x8
#define _TMR4_TMR4_MASK                                     0xFF

// Register: T4PR
#define T4PR T4PR
extern volatile unsigned char           T4PR                __at(0x3F9F);
#ifndef _LIB_BUILD
asm("T4PR equ 03F9Fh");
#endif
// aliases
extern volatile unsigned char           PR4                 __at(0x3F9F);
#ifndef _LIB_BUILD
asm("PR4 equ 03F9Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PR4                    :8;
    };
} T4PRbits_t;
extern volatile T4PRbits_t T4PRbits __at(0x3F9F);
// bitfield macros
#define _T4PR_PR4_POSN                                      0x0
#define _T4PR_PR4_POSITION                                  0x0
#define _T4PR_PR4_SIZE                                      0x8
#define _T4PR_PR4_LENGTH                                    0x8
#define _T4PR_PR4_MASK                                      0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned PR4                    :8;
    };
} PR4bits_t;
extern volatile PR4bits_t PR4bits __at(0x3F9F);
// bitfield macros
#define _PR4_PR4_POSN                                       0x0
#define _PR4_PR4_POSITION                                   0x0
#define _PR4_PR4_SIZE                                       0x8
#define _PR4_PR4_LENGTH                                     0x8
#define _PR4_PR4_MASK                                       0xFF

// Register: T4CON
#define T4CON T4CON
extern volatile unsigned char           T4CON               __at(0x3FA0);
#ifndef _LIB_BUILD
asm("T4CON equ 03FA0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned OUTPS                  :4;
        unsigned CKPS                   :3;
        unsigned ON                     :1;
    };
    struct {
        unsigned T4OUTPS                :4;
        unsigned T4CKPS                 :3;
        unsigned T4ON                   :1;
    };
    struct {
        unsigned T4OUTPS0               :1;
        unsigned T4OUTPS1               :1;
        unsigned T4OUTPS2               :1;
        unsigned T4OUTPS3               :1;
        unsigned T4CKPS0                :1;
        unsigned T4CKPS1                :1;
        unsigned T4CKPS2                :1;
    };
    struct {
        unsigned OUTPS0                 :1;
        unsigned OUTPS1                 :1;
        unsigned OUTPS2                 :1;
        unsigned OUTPS3                 :1;
        unsigned CKPS0                  :1;
        unsigned CKPS1                  :1;
        unsigned CKPS2                  :1;
        unsigned TMR4ON                 :1;
    };
} T4CONbits_t;
extern volatile T4CONbits_t T4CONbits __at(0x3FA0);
// bitfield macros
#define _T4CON_OUTPS_POSN                                   0x0
#define _T4CON_OUTPS_POSITION                               0x0
#define _T4CON_OUTPS_SIZE                                   0x4
#define _T4CON_OUTPS_LENGTH                                 0x4
#define _T4CON_OUTPS_MASK                                   0xF
#define _T4CON_CKPS_POSN                                    0x4
#define _T4CON_CKPS_POSITION                                0x4
#define _T4CON_CKPS_SIZE                                    0x3
#define _T4CON_CKPS_LENGTH                                  0x3
#define _T4CON_CKPS_MASK                                    0x70
#define _T4CON_ON_POSN                                      0x7
#define _T4CON_ON_POSITION                                  0x7
#define _T4CON_ON_SIZE                                      0x1
#define _T4CON_ON_LENGTH                                    0x1
#define _T4CON_ON_MASK                                      0x80
#define _T4CON_T4OUTPS_POSN                                 0x0
#define _T4CON_T4OUTPS_POSITION                             0x0
#define _T4CON_T4OUTPS_SIZE                                 0x4
#define _T4CON_T4OUTPS_LENGTH                               0x4
#define _T4CON_T4OUTPS_MASK                                 0xF
#define _T4CON_T4CKPS_POSN                                  0x4
#define _T4CON_T4CKPS_POSITION                              0x4
#define _T4CON_T4CKPS_SIZE                                  0x3
#define _T4CON_T4CKPS_LENGTH                                0x3
#define _T4CON_T4CKPS_MASK                                  0x70
#define _T4CON_T4ON_POSN                                    0x7
#define _T4CON_T4ON_POSITION                                0x7
#define _T4CON_T4ON_SIZE                                    0x1
#define _T4CON_T4ON_LENGTH                                  0x1
#define _T4CON_T4ON_MASK                                    0x80
#define _T4CON_T4OUTPS0_POSN                                0x0
#define _T4CON_T4OUTPS0_POSITION                            0x0
#define _T4CON_T4OUTPS0_SIZE                                0x1
#define _T4CON_T4OUTPS0_LENGTH                              0x1
#define _T4CON_T4OUTPS0_MASK                                0x1
#define _T4CON_T4OUTPS1_POSN                                0x1
#define _T4CON_T4OUTPS1_POSITION                            0x1
#define _T4CON_T4OUTPS1_SIZE                                0x1
#define _T4CON_T4OUTPS1_LENGTH                              0x1
#define _T4CON_T4OUTPS1_MASK                                0x2
#define _T4CON_T4OUTPS2_POSN                                0x2
#define _T4CON_T4OUTPS2_POSITION                            0x2
#define _T4CON_T4OUTPS2_SIZE                                0x1
#define _T4CON_T4OUTPS2_LENGTH                              0x1
#define _T4CON_T4OUTPS2_MASK                                0x4
#define _T4CON_T4OUTPS3_POSN                                0x3
#define _T4CON_T4OUTPS3_POSITION                            0x3
#define _T4CON_T4OUTPS3_SIZE                                0x1
#define _T4CON_T4OUTPS3_LENGTH                              0x1
#define _T4CON_T4OUTPS3_MASK                                0x8
#define _T4CON_T4CKPS0_POSN                                 0x4
#define _T4CON_T4CKPS0_POSITION                             0x4
#define _T4CON_T4CKPS0_SIZE                                 0x1
#define _T4CON_T4CKPS0_LENGTH                               0x1
#define _T4CON_T4CKPS0_MASK                                 0x10
#define _T4CON_T4CKPS1_POSN                                 0x5
#define _T4CON_T4CKPS1_POSITION                             0x5
#define _T4CON_T4CKPS1_SIZE                                 0x1
#define _T4CON_T4CKPS1_LENGTH                               0x1
#define _T4CON_T4CKPS1_MASK                                 0x20
#define _T4CON_T4CKPS2_POSN                                 0x6
#define _T4CON_T4CKPS2_POSITION                             0x6
#define _T4CON_T4CKPS2_SIZE                                 0x1
#define _T4CON_T4CKPS2_LENGTH                               0x1
#define _T4CON_T4CKPS2_MASK                                 0x40
#define _T4CON_OUTPS0_POSN                                  0x0
#define _T4CON_OUTPS0_POSITION                              0x0
#define _T4CON_OUTPS0_SIZE                                  0x1
#define _T4CON_OUTPS0_LENGTH                                0x1
#define _T4CON_OUTPS0_MASK                                  0x1
#define _T4CON_OUTPS1_POSN                                  0x1
#define _T4CON_OUTPS1_POSITION                              0x1
#define _T4CON_OUTPS1_SIZE                                  0x1
#define _T4CON_OUTPS1_LENGTH                                0x1
#define _T4CON_OUTPS1_MASK                                  0x2
#define _T4CON_OUTPS2_POSN                                  0x2
#define _T4CON_OUTPS2_POSITION                              0x2
#define _T4CON_OUTPS2_SIZE                                  0x1
#define _T4CON_OUTPS2_LENGTH                                0x1
#define _T4CON_OUTPS2_MASK                                  0x4
#define _T4CON_OUTPS3_POSN                                  0x3
#define _T4CON_OUTPS3_POSITION                              0x3
#define _T4CON_OUTPS3_SIZE                                  0x1
#define _T4CON_OUTPS3_LENGTH                                0x1
#define _T4CON_OUTPS3_MASK                                  0x8
#define _T4CON_CKPS0_POSN                                   0x4
#define _T4CON_CKPS0_POSITION                               0x4
#define _T4CON_CKPS0_SIZE                                   0x1
#define _T4CON_CKPS0_LENGTH                                 0x1
#define _T4CON_CKPS0_MASK                                   0x10
#define _T4CON_CKPS1_POSN                                   0x5
#define _T4CON_CKPS1_POSITION                               0x5
#define _T4CON_CKPS1_SIZE                                   0x1
#define _T4CON_CKPS1_LENGTH                                 0x1
#define _T4CON_CKPS1_MASK                                   0x20
#define _T4CON_CKPS2_POSN                                   0x6
#define _T4CON_CKPS2_POSITION                               0x6
#define _T4CON_CKPS2_SIZE                                   0x1
#define _T4CON_CKPS2_LENGTH                                 0x1
#define _T4CON_CKPS2_MASK                                   0x40
#define _T4CON_TMR4ON_POSN                                  0x7
#define _T4CON_TMR4ON_POSITION                              0x7
#define _T4CON_TMR4ON_SIZE                                  0x1
#define _T4CON_TMR4ON_LENGTH                                0x1
#define _T4CON_TMR4ON_MASK                                  0x80

// Register: T4HLT
#define T4HLT T4HLT
extern volatile unsigned char           T4HLT               __at(0x3FA1);
#ifndef _LIB_BUILD
asm("T4HLT equ 03FA1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :5;
        unsigned CKSYNC                 :1;
        unsigned CKPOL                  :1;
        unsigned PSYNC                  :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned MODE3                  :1;
        unsigned MODE4                  :1;
    };
    struct {
        unsigned T4MODE                 :5;
        unsigned T4CKSYNC               :1;
        unsigned T4CKPOL                :1;
        unsigned T4PSYNC                :1;
    };
    struct {
        unsigned T4MODE0                :1;
        unsigned T4MODE1                :1;
        unsigned T4MODE2                :1;
        unsigned T4MODE3                :1;
        unsigned T4MODE4                :1;
    };
} T4HLTbits_t;
extern volatile T4HLTbits_t T4HLTbits __at(0x3FA1);
// bitfield macros
#define _T4HLT_MODE_POSN                                    0x0
#define _T4HLT_MODE_POSITION                                0x0
#define _T4HLT_MODE_SIZE                                    0x5
#define _T4HLT_MODE_LENGTH                                  0x5
#define _T4HLT_MODE_MASK                                    0x1F
#define _T4HLT_CKSYNC_POSN                                  0x5
#define _T4HLT_CKSYNC_POSITION                              0x5
#define _T4HLT_CKSYNC_SIZE                                  0x1
#define _T4HLT_CKSYNC_LENGTH                                0x1
#define _T4HLT_CKSYNC_MASK                                  0x20
#define _T4HLT_CKPOL_POSN                                   0x6
#define _T4HLT_CKPOL_POSITION                               0x6
#define _T4HLT_CKPOL_SIZE                                   0x1
#define _T4HLT_CKPOL_LENGTH                                 0x1
#define _T4HLT_CKPOL_MASK                                   0x40
#define _T4HLT_PSYNC_POSN                                   0x7
#define _T4HLT_PSYNC_POSITION                               0x7
#define _T4HLT_PSYNC_SIZE                                   0x1
#define _T4HLT_PSYNC_LENGTH                                 0x1
#define _T4HLT_PSYNC_MASK                                   0x80
#define _T4HLT_MODE0_POSN                                   0x0
#define _T4HLT_MODE0_POSITION                               0x0
#define _T4HLT_MODE0_SIZE                                   0x1
#define _T4HLT_MODE0_LENGTH                                 0x1
#define _T4HLT_MODE0_MASK                                   0x1
#define _T4HLT_MODE1_POSN                                   0x1
#define _T4HLT_MODE1_POSITION                               0x1
#define _T4HLT_MODE1_SIZE                                   0x1
#define _T4HLT_MODE1_LENGTH                                 0x1
#define _T4HLT_MODE1_MASK                                   0x2
#define _T4HLT_MODE2_POSN                                   0x2
#define _T4HLT_MODE2_POSITION                               0x2
#define _T4HLT_MODE2_SIZE                                   0x1
#define _T4HLT_MODE2_LENGTH                                 0x1
#define _T4HLT_MODE2_MASK                                   0x4
#define _T4HLT_MODE3_POSN                                   0x3
#define _T4HLT_MODE3_POSITION                               0x3
#define _T4HLT_MODE3_SIZE                                   0x1
#define _T4HLT_MODE3_LENGTH                                 0x1
#define _T4HLT_MODE3_MASK                                   0x8
#define _T4HLT_MODE4_POSN                                   0x4
#define _T4HLT_MODE4_POSITION                               0x4
#define _T4HLT_MODE4_SIZE                                   0x1
#define _T4HLT_MODE4_LENGTH                                 0x1
#define _T4HLT_MODE4_MASK                                   0x10
#define _T4HLT_T4MODE_POSN                                  0x0
#define _T4HLT_T4MODE_POSITION                              0x0
#define _T4HLT_T4MODE_SIZE                                  0x5
#define _T4HLT_T4MODE_LENGTH                                0x5
#define _T4HLT_T4MODE_MASK                                  0x1F
#define _T4HLT_T4CKSYNC_POSN                                0x5
#define _T4HLT_T4CKSYNC_POSITION                            0x5
#define _T4HLT_T4CKSYNC_SIZE                                0x1
#define _T4HLT_T4CKSYNC_LENGTH                              0x1
#define _T4HLT_T4CKSYNC_MASK                                0x20
#define _T4HLT_T4CKPOL_POSN                                 0x6
#define _T4HLT_T4CKPOL_POSITION                             0x6
#define _T4HLT_T4CKPOL_SIZE                                 0x1
#define _T4HLT_T4CKPOL_LENGTH                               0x1
#define _T4HLT_T4CKPOL_MASK                                 0x40
#define _T4HLT_T4PSYNC_POSN                                 0x7
#define _T4HLT_T4PSYNC_POSITION                             0x7
#define _T4HLT_T4PSYNC_SIZE                                 0x1
#define _T4HLT_T4PSYNC_LENGTH                               0x1
#define _T4HLT_T4PSYNC_MASK                                 0x80
#define _T4HLT_T4MODE0_POSN                                 0x0
#define _T4HLT_T4MODE0_POSITION                             0x0
#define _T4HLT_T4MODE0_SIZE                                 0x1
#define _T4HLT_T4MODE0_LENGTH                               0x1
#define _T4HLT_T4MODE0_MASK                                 0x1
#define _T4HLT_T4MODE1_POSN                                 0x1
#define _T4HLT_T4MODE1_POSITION                             0x1
#define _T4HLT_T4MODE1_SIZE                                 0x1
#define _T4HLT_T4MODE1_LENGTH                               0x1
#define _T4HLT_T4MODE1_MASK                                 0x2
#define _T4HLT_T4MODE2_POSN                                 0x2
#define _T4HLT_T4MODE2_POSITION                             0x2
#define _T4HLT_T4MODE2_SIZE                                 0x1
#define _T4HLT_T4MODE2_LENGTH                               0x1
#define _T4HLT_T4MODE2_MASK                                 0x4
#define _T4HLT_T4MODE3_POSN                                 0x3
#define _T4HLT_T4MODE3_POSITION                             0x3
#define _T4HLT_T4MODE3_SIZE                                 0x1
#define _T4HLT_T4MODE3_LENGTH                               0x1
#define _T4HLT_T4MODE3_MASK                                 0x8
#define _T4HLT_T4MODE4_POSN                                 0x4
#define _T4HLT_T4MODE4_POSITION                             0x4
#define _T4HLT_T4MODE4_SIZE                                 0x1
#define _T4HLT_T4MODE4_LENGTH                               0x1
#define _T4HLT_T4MODE4_MASK                                 0x10

// Register: T4CLKCON
#define T4CLKCON T4CLKCON
extern volatile unsigned char           T4CLKCON            __at(0x3FA2);
#ifndef _LIB_BUILD
asm("T4CLKCON equ 03FA2h");
#endif
// aliases
extern volatile unsigned char           T4CLK               __at(0x3FA2);
#ifndef _LIB_BUILD
asm("T4CLK equ 03FA2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CS                     :4;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
    };
    struct {
        unsigned T4CS                   :4;
    };
    struct {
        unsigned T4CS0                  :1;
        unsigned T4CS1                  :1;
        unsigned T4CS2                  :1;
        unsigned T4CS3                  :1;
    };
} T4CLKCONbits_t;
extern volatile T4CLKCONbits_t T4CLKCONbits __at(0x3FA2);
// bitfield macros
#define _T4CLKCON_CS_POSN                                   0x0
#define _T4CLKCON_CS_POSITION                               0x0
#define _T4CLKCON_CS_SIZE                                   0x4
#define _T4CLKCON_CS_LENGTH                                 0x4
#define _T4CLKCON_CS_MASK                                   0xF
#define _T4CLKCON_CS0_POSN                                  0x0
#define _T4CLKCON_CS0_POSITION                              0x0
#define _T4CLKCON_CS0_SIZE                                  0x1
#define _T4CLKCON_CS0_LENGTH                                0x1
#define _T4CLKCON_CS0_MASK                                  0x1
#define _T4CLKCON_CS1_POSN                                  0x1
#define _T4CLKCON_CS1_POSITION                              0x1
#define _T4CLKCON_CS1_SIZE                                  0x1
#define _T4CLKCON_CS1_LENGTH                                0x1
#define _T4CLKCON_CS1_MASK                                  0x2
#define _T4CLKCON_CS2_POSN                                  0x2
#define _T4CLKCON_CS2_POSITION                              0x2
#define _T4CLKCON_CS2_SIZE                                  0x1
#define _T4CLKCON_CS2_LENGTH                                0x1
#define _T4CLKCON_CS2_MASK                                  0x4
#define _T4CLKCON_CS3_POSN                                  0x3
#define _T4CLKCON_CS3_POSITION                              0x3
#define _T4CLKCON_CS3_SIZE                                  0x1
#define _T4CLKCON_CS3_LENGTH                                0x1
#define _T4CLKCON_CS3_MASK                                  0x8
#define _T4CLKCON_T4CS_POSN                                 0x0
#define _T4CLKCON_T4CS_POSITION                             0x0
#define _T4CLKCON_T4CS_SIZE                                 0x4
#define _T4CLKCON_T4CS_LENGTH                               0x4
#define _T4CLKCON_T4CS_MASK                                 0xF
#define _T4CLKCON_T4CS0_POSN                                0x0
#define _T4CLKCON_T4CS0_POSITION                            0x0
#define _T4CLKCON_T4CS0_SIZE                                0x1
#define _T4CLKCON_T4CS0_LENGTH                              0x1
#define _T4CLKCON_T4CS0_MASK                                0x1
#define _T4CLKCON_T4CS1_POSN                                0x1
#define _T4CLKCON_T4CS1_POSITION                            0x1
#define _T4CLKCON_T4CS1_SIZE                                0x1
#define _T4CLKCON_T4CS1_LENGTH                              0x1
#define _T4CLKCON_T4CS1_MASK                                0x2
#define _T4CLKCON_T4CS2_POSN                                0x2
#define _T4CLKCON_T4CS2_POSITION                            0x2
#define _T4CLKCON_T4CS2_SIZE                                0x1
#define _T4CLKCON_T4CS2_LENGTH                              0x1
#define _T4CLKCON_T4CS2_MASK                                0x4
#define _T4CLKCON_T4CS3_POSN                                0x3
#define _T4CLKCON_T4CS3_POSITION                            0x3
#define _T4CLKCON_T4CS3_SIZE                                0x1
#define _T4CLKCON_T4CS3_LENGTH                              0x1
#define _T4CLKCON_T4CS3_MASK                                0x8
// alias bitfield definitions
typedef union {
    struct {
        unsigned CS                     :4;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
    };
    struct {
        unsigned T4CS                   :4;
    };
    struct {
        unsigned T4CS0                  :1;
        unsigned T4CS1                  :1;
        unsigned T4CS2                  :1;
        unsigned T4CS3                  :1;
    };
} T4CLKbits_t;
extern volatile T4CLKbits_t T4CLKbits __at(0x3FA2);
// bitfield macros
#define _T4CLK_CS_POSN                                      0x0
#define _T4CLK_CS_POSITION                                  0x0
#define _T4CLK_CS_SIZE                                      0x4
#define _T4CLK_CS_LENGTH                                    0x4
#define _T4CLK_CS_MASK                                      0xF
#define _T4CLK_CS0_POSN                                     0x0
#define _T4CLK_CS0_POSITION                                 0x0
#define _T4CLK_CS0_SIZE                                     0x1
#define _T4CLK_CS0_LENGTH                                   0x1
#define _T4CLK_CS0_MASK                                     0x1
#define _T4CLK_CS1_POSN                                     0x1
#define _T4CLK_CS1_POSITION                                 0x1
#define _T4CLK_CS1_SIZE                                     0x1
#define _T4CLK_CS1_LENGTH                                   0x1
#define _T4CLK_CS1_MASK                                     0x2
#define _T4CLK_CS2_POSN                                     0x2
#define _T4CLK_CS2_POSITION                                 0x2
#define _T4CLK_CS2_SIZE                                     0x1
#define _T4CLK_CS2_LENGTH                                   0x1
#define _T4CLK_CS2_MASK                                     0x4
#define _T4CLK_CS3_POSN                                     0x3
#define _T4CLK_CS3_POSITION                                 0x3
#define _T4CLK_CS3_SIZE                                     0x1
#define _T4CLK_CS3_LENGTH                                   0x1
#define _T4CLK_CS3_MASK                                     0x8
#define _T4CLK_T4CS_POSN                                    0x0
#define _T4CLK_T4CS_POSITION                                0x0
#define _T4CLK_T4CS_SIZE                                    0x4
#define _T4CLK_T4CS_LENGTH                                  0x4
#define _T4CLK_T4CS_MASK                                    0xF
#define _T4CLK_T4CS0_POSN                                   0x0
#define _T4CLK_T4CS0_POSITION                               0x0
#define _T4CLK_T4CS0_SIZE                                   0x1
#define _T4CLK_T4CS0_LENGTH                                 0x1
#define _T4CLK_T4CS0_MASK                                   0x1
#define _T4CLK_T4CS1_POSN                                   0x1
#define _T4CLK_T4CS1_POSITION                               0x1
#define _T4CLK_T4CS1_SIZE                                   0x1
#define _T4CLK_T4CS1_LENGTH                                 0x1
#define _T4CLK_T4CS1_MASK                                   0x2
#define _T4CLK_T4CS2_POSN                                   0x2
#define _T4CLK_T4CS2_POSITION                               0x2
#define _T4CLK_T4CS2_SIZE                                   0x1
#define _T4CLK_T4CS2_LENGTH                                 0x1
#define _T4CLK_T4CS2_MASK                                   0x4
#define _T4CLK_T4CS3_POSN                                   0x3
#define _T4CLK_T4CS3_POSITION                               0x3
#define _T4CLK_T4CS3_SIZE                                   0x1
#define _T4CLK_T4CS3_LENGTH                                 0x1
#define _T4CLK_T4CS3_MASK                                   0x8

// Register: T4RST
#define T4RST T4RST
extern volatile unsigned char           T4RST               __at(0x3FA3);
#ifndef _LIB_BUILD
asm("T4RST equ 03FA3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RSEL                   :5;
    };
    struct {
        unsigned RSEL0                  :1;
        unsigned RSEL1                  :1;
        unsigned RSEL2                  :1;
        unsigned RSEL3                  :1;
        unsigned RSEL4                  :1;
    };
    struct {
        unsigned T4RSEL                 :5;
    };
    struct {
        unsigned T4RSEL0                :1;
        unsigned T4RSEL1                :1;
        unsigned T4RSEL2                :1;
        unsigned T4RSEL3                :1;
        unsigned T4RSEL4                :1;
    };
} T4RSTbits_t;
extern volatile T4RSTbits_t T4RSTbits __at(0x3FA3);
// bitfield macros
#define _T4RST_RSEL_POSN                                    0x0
#define _T4RST_RSEL_POSITION                                0x0
#define _T4RST_RSEL_SIZE                                    0x5
#define _T4RST_RSEL_LENGTH                                  0x5
#define _T4RST_RSEL_MASK                                    0x1F
#define _T4RST_RSEL0_POSN                                   0x0
#define _T4RST_RSEL0_POSITION                               0x0
#define _T4RST_RSEL0_SIZE                                   0x1
#define _T4RST_RSEL0_LENGTH                                 0x1
#define _T4RST_RSEL0_MASK                                   0x1
#define _T4RST_RSEL1_POSN                                   0x1
#define _T4RST_RSEL1_POSITION                               0x1
#define _T4RST_RSEL1_SIZE                                   0x1
#define _T4RST_RSEL1_LENGTH                                 0x1
#define _T4RST_RSEL1_MASK                                   0x2
#define _T4RST_RSEL2_POSN                                   0x2
#define _T4RST_RSEL2_POSITION                               0x2
#define _T4RST_RSEL2_SIZE                                   0x1
#define _T4RST_RSEL2_LENGTH                                 0x1
#define _T4RST_RSEL2_MASK                                   0x4
#define _T4RST_RSEL3_POSN                                   0x3
#define _T4RST_RSEL3_POSITION                               0x3
#define _T4RST_RSEL3_SIZE                                   0x1
#define _T4RST_RSEL3_LENGTH                                 0x1
#define _T4RST_RSEL3_MASK                                   0x8
#define _T4RST_RSEL4_POSN                                   0x4
#define _T4RST_RSEL4_POSITION                               0x4
#define _T4RST_RSEL4_SIZE                                   0x1
#define _T4RST_RSEL4_LENGTH                                 0x1
#define _T4RST_RSEL4_MASK                                   0x10
#define _T4RST_T4RSEL_POSN                                  0x0
#define _T4RST_T4RSEL_POSITION                              0x0
#define _T4RST_T4RSEL_SIZE                                  0x5
#define _T4RST_T4RSEL_LENGTH                                0x5
#define _T4RST_T4RSEL_MASK                                  0x1F
#define _T4RST_T4RSEL0_POSN                                 0x0
#define _T4RST_T4RSEL0_POSITION                             0x0
#define _T4RST_T4RSEL0_SIZE                                 0x1
#define _T4RST_T4RSEL0_LENGTH                               0x1
#define _T4RST_T4RSEL0_MASK                                 0x1
#define _T4RST_T4RSEL1_POSN                                 0x1
#define _T4RST_T4RSEL1_POSITION                             0x1
#define _T4RST_T4RSEL1_SIZE                                 0x1
#define _T4RST_T4RSEL1_LENGTH                               0x1
#define _T4RST_T4RSEL1_MASK                                 0x2
#define _T4RST_T4RSEL2_POSN                                 0x2
#define _T4RST_T4RSEL2_POSITION                             0x2
#define _T4RST_T4RSEL2_SIZE                                 0x1
#define _T4RST_T4RSEL2_LENGTH                               0x1
#define _T4RST_T4RSEL2_MASK                                 0x4
#define _T4RST_T4RSEL3_POSN                                 0x3
#define _T4RST_T4RSEL3_POSITION                             0x3
#define _T4RST_T4RSEL3_SIZE                                 0x1
#define _T4RST_T4RSEL3_LENGTH                               0x1
#define _T4RST_T4RSEL3_MASK                                 0x8
#define _T4RST_T4RSEL4_POSN                                 0x4
#define _T4RST_T4RSEL4_POSITION                             0x4
#define _T4RST_T4RSEL4_SIZE                                 0x1
#define _T4RST_T4RSEL4_LENGTH                               0x1
#define _T4RST_T4RSEL4_MASK                                 0x10

// Register: TMR3L
#define TMR3L TMR3L
extern volatile unsigned char           TMR3L               __at(0x3FA4);
#ifndef _LIB_BUILD
asm("TMR3L equ 03FA4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR3L                  :8;
    };
    struct {
        unsigned TMR3L0                 :1;
        unsigned TMR3L1                 :1;
        unsigned TMR3L2                 :1;
        unsigned TMR3L3                 :1;
        unsigned TMR3L4                 :1;
        unsigned TMR3L5                 :1;
        unsigned TMR3L6                 :1;
        unsigned TMR3L7                 :1;
    };
} TMR3Lbits_t;
extern volatile TMR3Lbits_t TMR3Lbits __at(0x3FA4);
// bitfield macros
#define _TMR3L_TMR3L_POSN                                   0x0
#define _TMR3L_TMR3L_POSITION                               0x0
#define _TMR3L_TMR3L_SIZE                                   0x8
#define _TMR3L_TMR3L_LENGTH                                 0x8
#define _TMR3L_TMR3L_MASK                                   0xFF
#define _TMR3L_TMR3L0_POSN                                  0x0
#define _TMR3L_TMR3L0_POSITION                              0x0
#define _TMR3L_TMR3L0_SIZE                                  0x1
#define _TMR3L_TMR3L0_LENGTH                                0x1
#define _TMR3L_TMR3L0_MASK                                  0x1
#define _TMR3L_TMR3L1_POSN                                  0x1
#define _TMR3L_TMR3L1_POSITION                              0x1
#define _TMR3L_TMR3L1_SIZE                                  0x1
#define _TMR3L_TMR3L1_LENGTH                                0x1
#define _TMR3L_TMR3L1_MASK                                  0x2
#define _TMR3L_TMR3L2_POSN                                  0x2
#define _TMR3L_TMR3L2_POSITION                              0x2
#define _TMR3L_TMR3L2_SIZE                                  0x1
#define _TMR3L_TMR3L2_LENGTH                                0x1
#define _TMR3L_TMR3L2_MASK                                  0x4
#define _TMR3L_TMR3L3_POSN                                  0x3
#define _TMR3L_TMR3L3_POSITION                              0x3
#define _TMR3L_TMR3L3_SIZE                                  0x1
#define _TMR3L_TMR3L3_LENGTH                                0x1
#define _TMR3L_TMR3L3_MASK                                  0x8
#define _TMR3L_TMR3L4_POSN                                  0x4
#define _TMR3L_TMR3L4_POSITION                              0x4
#define _TMR3L_TMR3L4_SIZE                                  0x1
#define _TMR3L_TMR3L4_LENGTH                                0x1
#define _TMR3L_TMR3L4_MASK                                  0x10
#define _TMR3L_TMR3L5_POSN                                  0x5
#define _TMR3L_TMR3L5_POSITION                              0x5
#define _TMR3L_TMR3L5_SIZE                                  0x1
#define _TMR3L_TMR3L5_LENGTH                                0x1
#define _TMR3L_TMR3L5_MASK                                  0x20
#define _TMR3L_TMR3L6_POSN                                  0x6
#define _TMR3L_TMR3L6_POSITION                              0x6
#define _TMR3L_TMR3L6_SIZE                                  0x1
#define _TMR3L_TMR3L6_LENGTH                                0x1
#define _TMR3L_TMR3L6_MASK                                  0x40
#define _TMR3L_TMR3L7_POSN                                  0x7
#define _TMR3L_TMR3L7_POSITION                              0x7
#define _TMR3L_TMR3L7_SIZE                                  0x1
#define _TMR3L_TMR3L7_LENGTH                                0x1
#define _TMR3L_TMR3L7_MASK                                  0x80

// Register: TMR3H
#define TMR3H TMR3H
extern volatile unsigned char           TMR3H               __at(0x3FA5);
#ifndef _LIB_BUILD
asm("TMR3H equ 03FA5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR3H                  :8;
    };
    struct {
        unsigned TMR3H0                 :1;
        unsigned TMR3H1                 :1;
        unsigned TMR3H2                 :1;
        unsigned TMR3H3                 :1;
        unsigned TMR3H4                 :1;
        unsigned TMR3H5                 :1;
        unsigned TMR3H6                 :1;
        unsigned TMR3H7                 :1;
    };
} TMR3Hbits_t;
extern volatile TMR3Hbits_t TMR3Hbits __at(0x3FA5);
// bitfield macros
#define _TMR3H_TMR3H_POSN                                   0x0
#define _TMR3H_TMR3H_POSITION                               0x0
#define _TMR3H_TMR3H_SIZE                                   0x8
#define _TMR3H_TMR3H_LENGTH                                 0x8
#define _TMR3H_TMR3H_MASK                                   0xFF
#define _TMR3H_TMR3H0_POSN                                  0x0
#define _TMR3H_TMR3H0_POSITION                              0x0
#define _TMR3H_TMR3H0_SIZE                                  0x1
#define _TMR3H_TMR3H0_LENGTH                                0x1
#define _TMR3H_TMR3H0_MASK                                  0x1
#define _TMR3H_TMR3H1_POSN                                  0x1
#define _TMR3H_TMR3H1_POSITION                              0x1
#define _TMR3H_TMR3H1_SIZE                                  0x1
#define _TMR3H_TMR3H1_LENGTH                                0x1
#define _TMR3H_TMR3H1_MASK                                  0x2
#define _TMR3H_TMR3H2_POSN                                  0x2
#define _TMR3H_TMR3H2_POSITION                              0x2
#define _TMR3H_TMR3H2_SIZE                                  0x1
#define _TMR3H_TMR3H2_LENGTH                                0x1
#define _TMR3H_TMR3H2_MASK                                  0x4
#define _TMR3H_TMR3H3_POSN                                  0x3
#define _TMR3H_TMR3H3_POSITION                              0x3
#define _TMR3H_TMR3H3_SIZE                                  0x1
#define _TMR3H_TMR3H3_LENGTH                                0x1
#define _TMR3H_TMR3H3_MASK                                  0x8
#define _TMR3H_TMR3H4_POSN                                  0x4
#define _TMR3H_TMR3H4_POSITION                              0x4
#define _TMR3H_TMR3H4_SIZE                                  0x1
#define _TMR3H_TMR3H4_LENGTH                                0x1
#define _TMR3H_TMR3H4_MASK                                  0x10
#define _TMR3H_TMR3H5_POSN                                  0x5
#define _TMR3H_TMR3H5_POSITION                              0x5
#define _TMR3H_TMR3H5_SIZE                                  0x1
#define _TMR3H_TMR3H5_LENGTH                                0x1
#define _TMR3H_TMR3H5_MASK                                  0x20
#define _TMR3H_TMR3H6_POSN                                  0x6
#define _TMR3H_TMR3H6_POSITION                              0x6
#define _TMR3H_TMR3H6_SIZE                                  0x1
#define _TMR3H_TMR3H6_LENGTH                                0x1
#define _TMR3H_TMR3H6_MASK                                  0x40
#define _TMR3H_TMR3H7_POSN                                  0x7
#define _TMR3H_TMR3H7_POSITION                              0x7
#define _TMR3H_TMR3H7_SIZE                                  0x1
#define _TMR3H_TMR3H7_LENGTH                                0x1
#define _TMR3H_TMR3H7_MASK                                  0x80

// Register: T3CON
#define T3CON T3CON
extern volatile unsigned char           T3CON               __at(0x3FA6);
#ifndef _LIB_BUILD
asm("T3CON equ 03FA6h");
#endif
// aliases
extern volatile unsigned char           TMR3CON             __at(0x3FA6);
#ifndef _LIB_BUILD
asm("TMR3CON equ 03FA6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ON                     :1;
        unsigned RD16                   :1;
        unsigned NOT_SYNC               :1;
        unsigned                        :1;
        unsigned CKPS                   :2;
    };
    struct {
        unsigned TMR3ON                 :1;
        unsigned T3RD16                 :1;
        unsigned NOT_T3SYNC             :1;
        unsigned                        :1;
        unsigned T3CKPS0                :1;
        unsigned T3CKPS1                :1;
    };
    struct {
        unsigned                        :4;
        unsigned CKPS0                  :1;
        unsigned CKPS1                  :1;
    };
    struct {
        unsigned                        :1;
        unsigned RD163                  :1;
    };
} T3CONbits_t;
extern volatile T3CONbits_t T3CONbits __at(0x3FA6);
// bitfield macros
#define _T3CON_ON_POSN                                      0x0
#define _T3CON_ON_POSITION                                  0x0
#define _T3CON_ON_SIZE                                      0x1
#define _T3CON_ON_LENGTH                                    0x1
#define _T3CON_ON_MASK                                      0x1
#define _T3CON_RD16_POSN                                    0x1
#define _T3CON_RD16_POSITION                                0x1
#define _T3CON_RD16_SIZE                                    0x1
#define _T3CON_RD16_LENGTH                                  0x1
#define _T3CON_RD16_MASK                                    0x2
#define _T3CON_NOT_SYNC_POSN                                0x2
#define _T3CON_NOT_SYNC_POSITION                            0x2
#define _T3CON_NOT_SYNC_SIZE                                0x1
#define _T3CON_NOT_SYNC_LENGTH                              0x1
#define _T3CON_NOT_SYNC_MASK                                0x4
#define _T3CON_CKPS_POSN                                    0x4
#define _T3CON_CKPS_POSITION                                0x4
#define _T3CON_CKPS_SIZE                                    0x2
#define _T3CON_CKPS_LENGTH                                  0x2
#define _T3CON_CKPS_MASK                                    0x30
#define _T3CON_TMR3ON_POSN                                  0x0
#define _T3CON_TMR3ON_POSITION                              0x0
#define _T3CON_TMR3ON_SIZE                                  0x1
#define _T3CON_TMR3ON_LENGTH                                0x1
#define _T3CON_TMR3ON_MASK                                  0x1
#define _T3CON_T3RD16_POSN                                  0x1
#define _T3CON_T3RD16_POSITION                              0x1
#define _T3CON_T3RD16_SIZE                                  0x1
#define _T3CON_T3RD16_LENGTH                                0x1
#define _T3CON_T3RD16_MASK                                  0x2
#define _T3CON_NOT_T3SYNC_POSN                              0x2
#define _T3CON_NOT_T3SYNC_POSITION                          0x2
#define _T3CON_NOT_T3SYNC_SIZE                              0x1
#define _T3CON_NOT_T3SYNC_LENGTH                            0x1
#define _T3CON_NOT_T3SYNC_MASK                              0x4
#define _T3CON_T3CKPS0_POSN                                 0x4
#define _T3CON_T3CKPS0_POSITION                             0x4
#define _T3CON_T3CKPS0_SIZE                                 0x1
#define _T3CON_T3CKPS0_LENGTH                               0x1
#define _T3CON_T3CKPS0_MASK                                 0x10
#define _T3CON_T3CKPS1_POSN                                 0x5
#define _T3CON_T3CKPS1_POSITION                             0x5
#define _T3CON_T3CKPS1_SIZE                                 0x1
#define _T3CON_T3CKPS1_LENGTH                               0x1
#define _T3CON_T3CKPS1_MASK                                 0x20
#define _T3CON_CKPS0_POSN                                   0x4
#define _T3CON_CKPS0_POSITION                               0x4
#define _T3CON_CKPS0_SIZE                                   0x1
#define _T3CON_CKPS0_LENGTH                                 0x1
#define _T3CON_CKPS0_MASK                                   0x10
#define _T3CON_CKPS1_POSN                                   0x5
#define _T3CON_CKPS1_POSITION                               0x5
#define _T3CON_CKPS1_SIZE                                   0x1
#define _T3CON_CKPS1_LENGTH                                 0x1
#define _T3CON_CKPS1_MASK                                   0x20
#define _T3CON_RD163_POSN                                   0x1
#define _T3CON_RD163_POSITION                               0x1
#define _T3CON_RD163_SIZE                                   0x1
#define _T3CON_RD163_LENGTH                                 0x1
#define _T3CON_RD163_MASK                                   0x2
// alias bitfield definitions
typedef union {
    struct {
        unsigned ON                     :1;
        unsigned RD16                   :1;
        unsigned NOT_SYNC               :1;
        unsigned                        :1;
        unsigned CKPS                   :2;
    };
    struct {
        unsigned TMR3ON                 :1;
        unsigned T3RD16                 :1;
        unsigned NOT_T3SYNC             :1;
        unsigned                        :1;
        unsigned T3CKPS0                :1;
        unsigned T3CKPS1                :1;
    };
    struct {
        unsigned                        :4;
        unsigned CKPS0                  :1;
        unsigned CKPS1                  :1;
    };
    struct {
        unsigned                        :1;
        unsigned RD163                  :1;
    };
} TMR3CONbits_t;
extern volatile TMR3CONbits_t TMR3CONbits __at(0x3FA6);
// bitfield macros
#define _TMR3CON_ON_POSN                                    0x0
#define _TMR3CON_ON_POSITION                                0x0
#define _TMR3CON_ON_SIZE                                    0x1
#define _TMR3CON_ON_LENGTH                                  0x1
#define _TMR3CON_ON_MASK                                    0x1
#define _TMR3CON_RD16_POSN                                  0x1
#define _TMR3CON_RD16_POSITION                              0x1
#define _TMR3CON_RD16_SIZE                                  0x1
#define _TMR3CON_RD16_LENGTH                                0x1
#define _TMR3CON_RD16_MASK                                  0x2
#define _TMR3CON_NOT_SYNC_POSN                              0x2
#define _TMR3CON_NOT_SYNC_POSITION                          0x2
#define _TMR3CON_NOT_SYNC_SIZE                              0x1
#define _TMR3CON_NOT_SYNC_LENGTH                            0x1
#define _TMR3CON_NOT_SYNC_MASK                              0x4
#define _TMR3CON_CKPS_POSN                                  0x4
#define _TMR3CON_CKPS_POSITION                              0x4
#define _TMR3CON_CKPS_SIZE                                  0x2
#define _TMR3CON_CKPS_LENGTH                                0x2
#define _TMR3CON_CKPS_MASK                                  0x30
#define _TMR3CON_TMR3ON_POSN                                0x0
#define _TMR3CON_TMR3ON_POSITION                            0x0
#define _TMR3CON_TMR3ON_SIZE                                0x1
#define _TMR3CON_TMR3ON_LENGTH                              0x1
#define _TMR3CON_TMR3ON_MASK                                0x1
#define _TMR3CON_T3RD16_POSN                                0x1
#define _TMR3CON_T3RD16_POSITION                            0x1
#define _TMR3CON_T3RD16_SIZE                                0x1
#define _TMR3CON_T3RD16_LENGTH                              0x1
#define _TMR3CON_T3RD16_MASK                                0x2
#define _TMR3CON_NOT_T3SYNC_POSN                            0x2
#define _TMR3CON_NOT_T3SYNC_POSITION                        0x2
#define _TMR3CON_NOT_T3SYNC_SIZE                            0x1
#define _TMR3CON_NOT_T3SYNC_LENGTH                          0x1
#define _TMR3CON_NOT_T3SYNC_MASK                            0x4
#define _TMR3CON_T3CKPS0_POSN                               0x4
#define _TMR3CON_T3CKPS0_POSITION                           0x4
#define _TMR3CON_T3CKPS0_SIZE                               0x1
#define _TMR3CON_T3CKPS0_LENGTH                             0x1
#define _TMR3CON_T3CKPS0_MASK                               0x10
#define _TMR3CON_T3CKPS1_POSN                               0x5
#define _TMR3CON_T3CKPS1_POSITION                           0x5
#define _TMR3CON_T3CKPS1_SIZE                               0x1
#define _TMR3CON_T3CKPS1_LENGTH                             0x1
#define _TMR3CON_T3CKPS1_MASK                               0x20
#define _TMR3CON_CKPS0_POSN                                 0x4
#define _TMR3CON_CKPS0_POSITION                             0x4
#define _TMR3CON_CKPS0_SIZE                                 0x1
#define _TMR3CON_CKPS0_LENGTH                               0x1
#define _TMR3CON_CKPS0_MASK                                 0x10
#define _TMR3CON_CKPS1_POSN                                 0x5
#define _TMR3CON_CKPS1_POSITION                             0x5
#define _TMR3CON_CKPS1_SIZE                                 0x1
#define _TMR3CON_CKPS1_LENGTH                               0x1
#define _TMR3CON_CKPS1_MASK                                 0x20
#define _TMR3CON_RD163_POSN                                 0x1
#define _TMR3CON_RD163_POSITION                             0x1
#define _TMR3CON_RD163_SIZE                                 0x1
#define _TMR3CON_RD163_LENGTH                               0x1
#define _TMR3CON_RD163_MASK                                 0x2

// Register: T3GCON
#define T3GCON T3GCON
extern volatile unsigned char           T3GCON              __at(0x3FA7);
#ifndef _LIB_BUILD
asm("T3GCON equ 03FA7h");
#endif
// aliases
extern volatile unsigned char           TMR3GCON            __at(0x3FA7);
#ifndef _LIB_BUILD
asm("TMR3GCON equ 03FA7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned GVAL                   :1;
        unsigned GGO                    :1;
        unsigned GSPM                   :1;
        unsigned GTM                    :1;
        unsigned GPOL                   :1;
        unsigned GE                     :1;
    };
    struct {
        unsigned                        :2;
        unsigned T3GVAL                 :1;
        unsigned T3GGO                  :1;
        unsigned T3GSPM                 :1;
        unsigned T3GTM                  :1;
        unsigned T3GPOL                 :1;
        unsigned T3GE                   :1;
    };
    struct {
        unsigned                        :3;
        unsigned NOT_DONE               :1;
    };
    struct {
        unsigned                        :3;
        unsigned NOT_T3DONE             :1;
    };
} T3GCONbits_t;
extern volatile T3GCONbits_t T3GCONbits __at(0x3FA7);
// bitfield macros
#define _T3GCON_GVAL_POSN                                   0x2
#define _T3GCON_GVAL_POSITION                               0x2
#define _T3GCON_GVAL_SIZE                                   0x1
#define _T3GCON_GVAL_LENGTH                                 0x1
#define _T3GCON_GVAL_MASK                                   0x4
#define _T3GCON_GGO_POSN                                    0x3
#define _T3GCON_GGO_POSITION                                0x3
#define _T3GCON_GGO_SIZE                                    0x1
#define _T3GCON_GGO_LENGTH                                  0x1
#define _T3GCON_GGO_MASK                                    0x8
#define _T3GCON_GSPM_POSN                                   0x4
#define _T3GCON_GSPM_POSITION                               0x4
#define _T3GCON_GSPM_SIZE                                   0x1
#define _T3GCON_GSPM_LENGTH                                 0x1
#define _T3GCON_GSPM_MASK                                   0x10
#define _T3GCON_GTM_POSN                                    0x5
#define _T3GCON_GTM_POSITION                                0x5
#define _T3GCON_GTM_SIZE                                    0x1
#define _T3GCON_GTM_LENGTH                                  0x1
#define _T3GCON_GTM_MASK                                    0x20
#define _T3GCON_GPOL_POSN                                   0x6
#define _T3GCON_GPOL_POSITION                               0x6
#define _T3GCON_GPOL_SIZE                                   0x1
#define _T3GCON_GPOL_LENGTH                                 0x1
#define _T3GCON_GPOL_MASK                                   0x40
#define _T3GCON_GE_POSN                                     0x7
#define _T3GCON_GE_POSITION                                 0x7
#define _T3GCON_GE_SIZE                                     0x1
#define _T3GCON_GE_LENGTH                                   0x1
#define _T3GCON_GE_MASK                                     0x80
#define _T3GCON_T3GVAL_POSN                                 0x2
#define _T3GCON_T3GVAL_POSITION                             0x2
#define _T3GCON_T3GVAL_SIZE                                 0x1
#define _T3GCON_T3GVAL_LENGTH                               0x1
#define _T3GCON_T3GVAL_MASK                                 0x4
#define _T3GCON_T3GGO_POSN                                  0x3
#define _T3GCON_T3GGO_POSITION                              0x3
#define _T3GCON_T3GGO_SIZE                                  0x1
#define _T3GCON_T3GGO_LENGTH                                0x1
#define _T3GCON_T3GGO_MASK                                  0x8
#define _T3GCON_T3GSPM_POSN                                 0x4
#define _T3GCON_T3GSPM_POSITION                             0x4
#define _T3GCON_T3GSPM_SIZE                                 0x1
#define _T3GCON_T3GSPM_LENGTH                               0x1
#define _T3GCON_T3GSPM_MASK                                 0x10
#define _T3GCON_T3GTM_POSN                                  0x5
#define _T3GCON_T3GTM_POSITION                              0x5
#define _T3GCON_T3GTM_SIZE                                  0x1
#define _T3GCON_T3GTM_LENGTH                                0x1
#define _T3GCON_T3GTM_MASK                                  0x20
#define _T3GCON_T3GPOL_POSN                                 0x6
#define _T3GCON_T3GPOL_POSITION                             0x6
#define _T3GCON_T3GPOL_SIZE                                 0x1
#define _T3GCON_T3GPOL_LENGTH                               0x1
#define _T3GCON_T3GPOL_MASK                                 0x40
#define _T3GCON_T3GE_POSN                                   0x7
#define _T3GCON_T3GE_POSITION                               0x7
#define _T3GCON_T3GE_SIZE                                   0x1
#define _T3GCON_T3GE_LENGTH                                 0x1
#define _T3GCON_T3GE_MASK                                   0x80
#define _T3GCON_NOT_DONE_POSN                               0x3
#define _T3GCON_NOT_DONE_POSITION                           0x3
#define _T3GCON_NOT_DONE_SIZE                               0x1
#define _T3GCON_NOT_DONE_LENGTH                             0x1
#define _T3GCON_NOT_DONE_MASK                               0x8
#define _T3GCON_NOT_T3DONE_POSN                             0x3
#define _T3GCON_NOT_T3DONE_POSITION                         0x3
#define _T3GCON_NOT_T3DONE_SIZE                             0x1
#define _T3GCON_NOT_T3DONE_LENGTH                           0x1
#define _T3GCON_NOT_T3DONE_MASK                             0x8
// alias bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned GVAL                   :1;
        unsigned GGO                    :1;
        unsigned GSPM                   :1;
        unsigned GTM                    :1;
        unsigned GPOL                   :1;
        unsigned GE                     :1;
    };
    struct {
        unsigned                        :2;
        unsigned T3GVAL                 :1;
        unsigned T3GGO                  :1;
        unsigned T3GSPM                 :1;
        unsigned T3GTM                  :1;
        unsigned T3GPOL                 :1;
        unsigned T3GE                   :1;
    };
    struct {
        unsigned                        :3;
        unsigned NOT_DONE               :1;
    };
    struct {
        unsigned                        :3;
        unsigned NOT_T3DONE             :1;
    };
} TMR3GCONbits_t;
extern volatile TMR3GCONbits_t TMR3GCONbits __at(0x3FA7);
// bitfield macros
#define _TMR3GCON_GVAL_POSN                                 0x2
#define _TMR3GCON_GVAL_POSITION                             0x2
#define _TMR3GCON_GVAL_SIZE                                 0x1
#define _TMR3GCON_GVAL_LENGTH                               0x1
#define _TMR3GCON_GVAL_MASK                                 0x4
#define _TMR3GCON_GGO_POSN                                  0x3
#define _TMR3GCON_GGO_POSITION                              0x3
#define _TMR3GCON_GGO_SIZE                                  0x1
#define _TMR3GCON_GGO_LENGTH                                0x1
#define _TMR3GCON_GGO_MASK                                  0x8
#define _TMR3GCON_GSPM_POSN                                 0x4
#define _TMR3GCON_GSPM_POSITION                             0x4
#define _TMR3GCON_GSPM_SIZE                                 0x1
#define _TMR3GCON_GSPM_LENGTH                               0x1
#define _TMR3GCON_GSPM_MASK                                 0x10
#define _TMR3GCON_GTM_POSN                                  0x5
#define _TMR3GCON_GTM_POSITION                              0x5
#define _TMR3GCON_GTM_SIZE                                  0x1
#define _TMR3GCON_GTM_LENGTH                                0x1
#define _TMR3GCON_GTM_MASK                                  0x20
#define _TMR3GCON_GPOL_POSN                                 0x6
#define _TMR3GCON_GPOL_POSITION                             0x6
#define _TMR3GCON_GPOL_SIZE                                 0x1
#define _TMR3GCON_GPOL_LENGTH                               0x1
#define _TMR3GCON_GPOL_MASK                                 0x40
#define _TMR3GCON_GE_POSN                                   0x7
#define _TMR3GCON_GE_POSITION                               0x7
#define _TMR3GCON_GE_SIZE                                   0x1
#define _TMR3GCON_GE_LENGTH                                 0x1
#define _TMR3GCON_GE_MASK                                   0x80
#define _TMR3GCON_T3GVAL_POSN                               0x2
#define _TMR3GCON_T3GVAL_POSITION                           0x2
#define _TMR3GCON_T3GVAL_SIZE                               0x1
#define _TMR3GCON_T3GVAL_LENGTH                             0x1
#define _TMR3GCON_T3GVAL_MASK                               0x4
#define _TMR3GCON_T3GGO_POSN                                0x3
#define _TMR3GCON_T3GGO_POSITION                            0x3
#define _TMR3GCON_T3GGO_SIZE                                0x1
#define _TMR3GCON_T3GGO_LENGTH                              0x1
#define _TMR3GCON_T3GGO_MASK                                0x8
#define _TMR3GCON_T3GSPM_POSN                               0x4
#define _TMR3GCON_T3GSPM_POSITION                           0x4
#define _TMR3GCON_T3GSPM_SIZE                               0x1
#define _TMR3GCON_T3GSPM_LENGTH                             0x1
#define _TMR3GCON_T3GSPM_MASK                               0x10
#define _TMR3GCON_T3GTM_POSN                                0x5
#define _TMR3GCON_T3GTM_POSITION                            0x5
#define _TMR3GCON_T3GTM_SIZE                                0x1
#define _TMR3GCON_T3GTM_LENGTH                              0x1
#define _TMR3GCON_T3GTM_MASK                                0x20
#define _TMR3GCON_T3GPOL_POSN                               0x6
#define _TMR3GCON_T3GPOL_POSITION                           0x6
#define _TMR3GCON_T3GPOL_SIZE                               0x1
#define _TMR3GCON_T3GPOL_LENGTH                             0x1
#define _TMR3GCON_T3GPOL_MASK                               0x40
#define _TMR3GCON_T3GE_POSN                                 0x7
#define _TMR3GCON_T3GE_POSITION                             0x7
#define _TMR3GCON_T3GE_SIZE                                 0x1
#define _TMR3GCON_T3GE_LENGTH                               0x1
#define _TMR3GCON_T3GE_MASK                                 0x80
#define _TMR3GCON_NOT_DONE_POSN                             0x3
#define _TMR3GCON_NOT_DONE_POSITION                         0x3
#define _TMR3GCON_NOT_DONE_SIZE                             0x1
#define _TMR3GCON_NOT_DONE_LENGTH                           0x1
#define _TMR3GCON_NOT_DONE_MASK                             0x8
#define _TMR3GCON_NOT_T3DONE_POSN                           0x3
#define _TMR3GCON_NOT_T3DONE_POSITION                       0x3
#define _TMR3GCON_NOT_T3DONE_SIZE                           0x1
#define _TMR3GCON_NOT_T3DONE_LENGTH                         0x1
#define _TMR3GCON_NOT_T3DONE_MASK                           0x8

// Register: T3GATE
#define T3GATE T3GATE
extern volatile unsigned char           T3GATE              __at(0x3FA8);
#ifndef _LIB_BUILD
asm("T3GATE equ 03FA8h");
#endif
// aliases
extern volatile unsigned char           TMR3GATE            __at(0x3FA8);
#ifndef _LIB_BUILD
asm("TMR3GATE equ 03FA8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned GSS                    :8;
    };
    struct {
        unsigned GSS0                   :1;
        unsigned GSS1                   :1;
        unsigned GSS2                   :1;
        unsigned GSS3                   :1;
        unsigned GSS4                   :1;
    };
    struct {
        unsigned T3GSS0                 :1;
        unsigned T3GSS1                 :1;
        unsigned T3GSS2                 :1;
        unsigned T3GSS3                 :1;
        unsigned T3GSS4                 :1;
    };
} T3GATEbits_t;
extern volatile T3GATEbits_t T3GATEbits __at(0x3FA8);
// bitfield macros
#define _T3GATE_GSS_POSN                                    0x0
#define _T3GATE_GSS_POSITION                                0x0
#define _T3GATE_GSS_SIZE                                    0x8
#define _T3GATE_GSS_LENGTH                                  0x8
#define _T3GATE_GSS_MASK                                    0xFF
#define _T3GATE_GSS0_POSN                                   0x0
#define _T3GATE_GSS0_POSITION                               0x0
#define _T3GATE_GSS0_SIZE                                   0x1
#define _T3GATE_GSS0_LENGTH                                 0x1
#define _T3GATE_GSS0_MASK                                   0x1
#define _T3GATE_GSS1_POSN                                   0x1
#define _T3GATE_GSS1_POSITION                               0x1
#define _T3GATE_GSS1_SIZE                                   0x1
#define _T3GATE_GSS1_LENGTH                                 0x1
#define _T3GATE_GSS1_MASK                                   0x2
#define _T3GATE_GSS2_POSN                                   0x2
#define _T3GATE_GSS2_POSITION                               0x2
#define _T3GATE_GSS2_SIZE                                   0x1
#define _T3GATE_GSS2_LENGTH                                 0x1
#define _T3GATE_GSS2_MASK                                   0x4
#define _T3GATE_GSS3_POSN                                   0x3
#define _T3GATE_GSS3_POSITION                               0x3
#define _T3GATE_GSS3_SIZE                                   0x1
#define _T3GATE_GSS3_LENGTH                                 0x1
#define _T3GATE_GSS3_MASK                                   0x8
#define _T3GATE_GSS4_POSN                                   0x4
#define _T3GATE_GSS4_POSITION                               0x4
#define _T3GATE_GSS4_SIZE                                   0x1
#define _T3GATE_GSS4_LENGTH                                 0x1
#define _T3GATE_GSS4_MASK                                   0x10
#define _T3GATE_T3GSS0_POSN                                 0x0
#define _T3GATE_T3GSS0_POSITION                             0x0
#define _T3GATE_T3GSS0_SIZE                                 0x1
#define _T3GATE_T3GSS0_LENGTH                               0x1
#define _T3GATE_T3GSS0_MASK                                 0x1
#define _T3GATE_T3GSS1_POSN                                 0x1
#define _T3GATE_T3GSS1_POSITION                             0x1
#define _T3GATE_T3GSS1_SIZE                                 0x1
#define _T3GATE_T3GSS1_LENGTH                               0x1
#define _T3GATE_T3GSS1_MASK                                 0x2
#define _T3GATE_T3GSS2_POSN                                 0x2
#define _T3GATE_T3GSS2_POSITION                             0x2
#define _T3GATE_T3GSS2_SIZE                                 0x1
#define _T3GATE_T3GSS2_LENGTH                               0x1
#define _T3GATE_T3GSS2_MASK                                 0x4
#define _T3GATE_T3GSS3_POSN                                 0x3
#define _T3GATE_T3GSS3_POSITION                             0x3
#define _T3GATE_T3GSS3_SIZE                                 0x1
#define _T3GATE_T3GSS3_LENGTH                               0x1
#define _T3GATE_T3GSS3_MASK                                 0x8
#define _T3GATE_T3GSS4_POSN                                 0x4
#define _T3GATE_T3GSS4_POSITION                             0x4
#define _T3GATE_T3GSS4_SIZE                                 0x1
#define _T3GATE_T3GSS4_LENGTH                               0x1
#define _T3GATE_T3GSS4_MASK                                 0x10
// alias bitfield definitions
typedef union {
    struct {
        unsigned GSS                    :8;
    };
    struct {
        unsigned GSS0                   :1;
        unsigned GSS1                   :1;
        unsigned GSS2                   :1;
        unsigned GSS3                   :1;
        unsigned GSS4                   :1;
    };
    struct {
        unsigned T3GSS0                 :1;
        unsigned T3GSS1                 :1;
        unsigned T3GSS2                 :1;
        unsigned T3GSS3                 :1;
        unsigned T3GSS4                 :1;
    };
} TMR3GATEbits_t;
extern volatile TMR3GATEbits_t TMR3GATEbits __at(0x3FA8);
// bitfield macros
#define _TMR3GATE_GSS_POSN                                  0x0
#define _TMR3GATE_GSS_POSITION                              0x0
#define _TMR3GATE_GSS_SIZE                                  0x8
#define _TMR3GATE_GSS_LENGTH                                0x8
#define _TMR3GATE_GSS_MASK                                  0xFF
#define _TMR3GATE_GSS0_POSN                                 0x0
#define _TMR3GATE_GSS0_POSITION                             0x0
#define _TMR3GATE_GSS0_SIZE                                 0x1
#define _TMR3GATE_GSS0_LENGTH                               0x1
#define _TMR3GATE_GSS0_MASK                                 0x1
#define _TMR3GATE_GSS1_POSN                                 0x1
#define _TMR3GATE_GSS1_POSITION                             0x1
#define _TMR3GATE_GSS1_SIZE                                 0x1
#define _TMR3GATE_GSS1_LENGTH                               0x1
#define _TMR3GATE_GSS1_MASK                                 0x2
#define _TMR3GATE_GSS2_POSN                                 0x2
#define _TMR3GATE_GSS2_POSITION                             0x2
#define _TMR3GATE_GSS2_SIZE                                 0x1
#define _TMR3GATE_GSS2_LENGTH                               0x1
#define _TMR3GATE_GSS2_MASK                                 0x4
#define _TMR3GATE_GSS3_POSN                                 0x3
#define _TMR3GATE_GSS3_POSITION                             0x3
#define _TMR3GATE_GSS3_SIZE                                 0x1
#define _TMR3GATE_GSS3_LENGTH                               0x1
#define _TMR3GATE_GSS3_MASK                                 0x8
#define _TMR3GATE_GSS4_POSN                                 0x4
#define _TMR3GATE_GSS4_POSITION                             0x4
#define _TMR3GATE_GSS4_SIZE                                 0x1
#define _TMR3GATE_GSS4_LENGTH                               0x1
#define _TMR3GATE_GSS4_MASK                                 0x10
#define _TMR3GATE_T3GSS0_POSN                               0x0
#define _TMR3GATE_T3GSS0_POSITION                           0x0
#define _TMR3GATE_T3GSS0_SIZE                               0x1
#define _TMR3GATE_T3GSS0_LENGTH                             0x1
#define _TMR3GATE_T3GSS0_MASK                               0x1
#define _TMR3GATE_T3GSS1_POSN                               0x1
#define _TMR3GATE_T3GSS1_POSITION                           0x1
#define _TMR3GATE_T3GSS1_SIZE                               0x1
#define _TMR3GATE_T3GSS1_LENGTH                             0x1
#define _TMR3GATE_T3GSS1_MASK                               0x2
#define _TMR3GATE_T3GSS2_POSN                               0x2
#define _TMR3GATE_T3GSS2_POSITION                           0x2
#define _TMR3GATE_T3GSS2_SIZE                               0x1
#define _TMR3GATE_T3GSS2_LENGTH                             0x1
#define _TMR3GATE_T3GSS2_MASK                               0x4
#define _TMR3GATE_T3GSS3_POSN                               0x3
#define _TMR3GATE_T3GSS3_POSITION                           0x3
#define _TMR3GATE_T3GSS3_SIZE                               0x1
#define _TMR3GATE_T3GSS3_LENGTH                             0x1
#define _TMR3GATE_T3GSS3_MASK                               0x8
#define _TMR3GATE_T3GSS4_POSN                               0x4
#define _TMR3GATE_T3GSS4_POSITION                           0x4
#define _TMR3GATE_T3GSS4_SIZE                               0x1
#define _TMR3GATE_T3GSS4_LENGTH                             0x1
#define _TMR3GATE_T3GSS4_MASK                               0x10

// Register: T3CLK
#define T3CLK T3CLK
extern volatile unsigned char           T3CLK               __at(0x3FA9);
#ifndef _LIB_BUILD
asm("T3CLK equ 03FA9h");
#endif
// aliases
extern volatile unsigned char           TMR3CLK             __at(0x3FA9);
#ifndef _LIB_BUILD
asm("TMR3CLK equ 03FA9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CS                     :8;
    };
    struct {
        unsigned T3CS0                  :1;
        unsigned T3CS1                  :1;
        unsigned T3CS2                  :1;
        unsigned T3CS3                  :1;
        unsigned T3CS4                  :1;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
        unsigned CS4                    :1;
    };
} T3CLKbits_t;
extern volatile T3CLKbits_t T3CLKbits __at(0x3FA9);
// bitfield macros
#define _T3CLK_CS_POSN                                      0x0
#define _T3CLK_CS_POSITION                                  0x0
#define _T3CLK_CS_SIZE                                      0x8
#define _T3CLK_CS_LENGTH                                    0x8
#define _T3CLK_CS_MASK                                      0xFF
#define _T3CLK_T3CS0_POSN                                   0x0
#define _T3CLK_T3CS0_POSITION                               0x0
#define _T3CLK_T3CS0_SIZE                                   0x1
#define _T3CLK_T3CS0_LENGTH                                 0x1
#define _T3CLK_T3CS0_MASK                                   0x1
#define _T3CLK_T3CS1_POSN                                   0x1
#define _T3CLK_T3CS1_POSITION                               0x1
#define _T3CLK_T3CS1_SIZE                                   0x1
#define _T3CLK_T3CS1_LENGTH                                 0x1
#define _T3CLK_T3CS1_MASK                                   0x2
#define _T3CLK_T3CS2_POSN                                   0x2
#define _T3CLK_T3CS2_POSITION                               0x2
#define _T3CLK_T3CS2_SIZE                                   0x1
#define _T3CLK_T3CS2_LENGTH                                 0x1
#define _T3CLK_T3CS2_MASK                                   0x4
#define _T3CLK_T3CS3_POSN                                   0x3
#define _T3CLK_T3CS3_POSITION                               0x3
#define _T3CLK_T3CS3_SIZE                                   0x1
#define _T3CLK_T3CS3_LENGTH                                 0x1
#define _T3CLK_T3CS3_MASK                                   0x8
#define _T3CLK_T3CS4_POSN                                   0x4
#define _T3CLK_T3CS4_POSITION                               0x4
#define _T3CLK_T3CS4_SIZE                                   0x1
#define _T3CLK_T3CS4_LENGTH                                 0x1
#define _T3CLK_T3CS4_MASK                                   0x10
#define _T3CLK_CS0_POSN                                     0x0
#define _T3CLK_CS0_POSITION                                 0x0
#define _T3CLK_CS0_SIZE                                     0x1
#define _T3CLK_CS0_LENGTH                                   0x1
#define _T3CLK_CS0_MASK                                     0x1
#define _T3CLK_CS1_POSN                                     0x1
#define _T3CLK_CS1_POSITION                                 0x1
#define _T3CLK_CS1_SIZE                                     0x1
#define _T3CLK_CS1_LENGTH                                   0x1
#define _T3CLK_CS1_MASK                                     0x2
#define _T3CLK_CS2_POSN                                     0x2
#define _T3CLK_CS2_POSITION                                 0x2
#define _T3CLK_CS2_SIZE                                     0x1
#define _T3CLK_CS2_LENGTH                                   0x1
#define _T3CLK_CS2_MASK                                     0x4
#define _T3CLK_CS3_POSN                                     0x3
#define _T3CLK_CS3_POSITION                                 0x3
#define _T3CLK_CS3_SIZE                                     0x1
#define _T3CLK_CS3_LENGTH                                   0x1
#define _T3CLK_CS3_MASK                                     0x8
#define _T3CLK_CS4_POSN                                     0x4
#define _T3CLK_CS4_POSITION                                 0x4
#define _T3CLK_CS4_SIZE                                     0x1
#define _T3CLK_CS4_LENGTH                                   0x1
#define _T3CLK_CS4_MASK                                     0x10
// alias bitfield definitions
typedef union {
    struct {
        unsigned CS                     :8;
    };
    struct {
        unsigned T3CS0                  :1;
        unsigned T3CS1                  :1;
        unsigned T3CS2                  :1;
        unsigned T3CS3                  :1;
        unsigned T3CS4                  :1;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
        unsigned CS4                    :1;
    };
} TMR3CLKbits_t;
extern volatile TMR3CLKbits_t TMR3CLKbits __at(0x3FA9);
// bitfield macros
#define _TMR3CLK_CS_POSN                                    0x0
#define _TMR3CLK_CS_POSITION                                0x0
#define _TMR3CLK_CS_SIZE                                    0x8
#define _TMR3CLK_CS_LENGTH                                  0x8
#define _TMR3CLK_CS_MASK                                    0xFF
#define _TMR3CLK_T3CS0_POSN                                 0x0
#define _TMR3CLK_T3CS0_POSITION                             0x0
#define _TMR3CLK_T3CS0_SIZE                                 0x1
#define _TMR3CLK_T3CS0_LENGTH                               0x1
#define _TMR3CLK_T3CS0_MASK                                 0x1
#define _TMR3CLK_T3CS1_POSN                                 0x1
#define _TMR3CLK_T3CS1_POSITION                             0x1
#define _TMR3CLK_T3CS1_SIZE                                 0x1
#define _TMR3CLK_T3CS1_LENGTH                               0x1
#define _TMR3CLK_T3CS1_MASK                                 0x2
#define _TMR3CLK_T3CS2_POSN                                 0x2
#define _TMR3CLK_T3CS2_POSITION                             0x2
#define _TMR3CLK_T3CS2_SIZE                                 0x1
#define _TMR3CLK_T3CS2_LENGTH                               0x1
#define _TMR3CLK_T3CS2_MASK                                 0x4
#define _TMR3CLK_T3CS3_POSN                                 0x3
#define _TMR3CLK_T3CS3_POSITION                             0x3
#define _TMR3CLK_T3CS3_SIZE                                 0x1
#define _TMR3CLK_T3CS3_LENGTH                               0x1
#define _TMR3CLK_T3CS3_MASK                                 0x8
#define _TMR3CLK_T3CS4_POSN                                 0x4
#define _TMR3CLK_T3CS4_POSITION                             0x4
#define _TMR3CLK_T3CS4_SIZE                                 0x1
#define _TMR3CLK_T3CS4_LENGTH                               0x1
#define _TMR3CLK_T3CS4_MASK                                 0x10
#define _TMR3CLK_CS0_POSN                                   0x0
#define _TMR3CLK_CS0_POSITION                               0x0
#define _TMR3CLK_CS0_SIZE                                   0x1
#define _TMR3CLK_CS0_LENGTH                                 0x1
#define _TMR3CLK_CS0_MASK                                   0x1
#define _TMR3CLK_CS1_POSN                                   0x1
#define _TMR3CLK_CS1_POSITION                               0x1
#define _TMR3CLK_CS1_SIZE                                   0x1
#define _TMR3CLK_CS1_LENGTH                                 0x1
#define _TMR3CLK_CS1_MASK                                   0x2
#define _TMR3CLK_CS2_POSN                                   0x2
#define _TMR3CLK_CS2_POSITION                               0x2
#define _TMR3CLK_CS2_SIZE                                   0x1
#define _TMR3CLK_CS2_LENGTH                                 0x1
#define _TMR3CLK_CS2_MASK                                   0x4
#define _TMR3CLK_CS3_POSN                                   0x3
#define _TMR3CLK_CS3_POSITION                               0x3
#define _TMR3CLK_CS3_SIZE                                   0x1
#define _TMR3CLK_CS3_LENGTH                                 0x1
#define _TMR3CLK_CS3_MASK                                   0x8
#define _TMR3CLK_CS4_POSN                                   0x4
#define _TMR3CLK_CS4_POSITION                               0x4
#define _TMR3CLK_CS4_SIZE                                   0x1
#define _TMR3CLK_CS4_LENGTH                                 0x1
#define _TMR3CLK_CS4_MASK                                   0x10

// Register: T2TMR
#define T2TMR T2TMR
extern volatile unsigned char           T2TMR               __at(0x3FAA);
#ifndef _LIB_BUILD
asm("T2TMR equ 03FAAh");
#endif
// aliases
extern volatile unsigned char           TMR2                __at(0x3FAA);
#ifndef _LIB_BUILD
asm("TMR2 equ 03FAAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR2                   :8;
    };
} T2TMRbits_t;
extern volatile T2TMRbits_t T2TMRbits __at(0x3FAA);
// bitfield macros
#define _T2TMR_TMR2_POSN                                    0x0
#define _T2TMR_TMR2_POSITION                                0x0
#define _T2TMR_TMR2_SIZE                                    0x8
#define _T2TMR_TMR2_LENGTH                                  0x8
#define _T2TMR_TMR2_MASK                                    0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned TMR2                   :8;
    };
} TMR2bits_t;
extern volatile TMR2bits_t TMR2bits __at(0x3FAA);
// bitfield macros
#define _TMR2_TMR2_POSN                                     0x0
#define _TMR2_TMR2_POSITION                                 0x0
#define _TMR2_TMR2_SIZE                                     0x8
#define _TMR2_TMR2_LENGTH                                   0x8
#define _TMR2_TMR2_MASK                                     0xFF

// Register: T2PR
#define T2PR T2PR
extern volatile unsigned char           T2PR                __at(0x3FAB);
#ifndef _LIB_BUILD
asm("T2PR equ 03FABh");
#endif
// aliases
extern volatile unsigned char           PR2                 __at(0x3FAB);
#ifndef _LIB_BUILD
asm("PR2 equ 03FABh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PR2                    :8;
    };
} T2PRbits_t;
extern volatile T2PRbits_t T2PRbits __at(0x3FAB);
// bitfield macros
#define _T2PR_PR2_POSN                                      0x0
#define _T2PR_PR2_POSITION                                  0x0
#define _T2PR_PR2_SIZE                                      0x8
#define _T2PR_PR2_LENGTH                                    0x8
#define _T2PR_PR2_MASK                                      0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned PR2                    :8;
    };
} PR2bits_t;
extern volatile PR2bits_t PR2bits __at(0x3FAB);
// bitfield macros
#define _PR2_PR2_POSN                                       0x0
#define _PR2_PR2_POSITION                                   0x0
#define _PR2_PR2_SIZE                                       0x8
#define _PR2_PR2_LENGTH                                     0x8
#define _PR2_PR2_MASK                                       0xFF

// Register: T2CON
#define T2CON T2CON
extern volatile unsigned char           T2CON               __at(0x3FAC);
#ifndef _LIB_BUILD
asm("T2CON equ 03FACh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned OUTPS                  :4;
        unsigned CKPS                   :3;
        unsigned ON                     :1;
    };
    struct {
        unsigned T2OUTPS                :4;
        unsigned T2CKPS                 :3;
        unsigned T2ON                   :1;
    };
    struct {
        unsigned T2OUTPS0               :1;
        unsigned T2OUTPS1               :1;
        unsigned T2OUTPS2               :1;
        unsigned T2OUTPS3               :1;
        unsigned T2CKPS0                :1;
        unsigned T2CKPS1                :1;
        unsigned T2CKPS2                :1;
    };
    struct {
        unsigned OUTPS0                 :1;
        unsigned OUTPS1                 :1;
        unsigned OUTPS2                 :1;
        unsigned OUTPS3                 :1;
        unsigned CKPS0                  :1;
        unsigned CKPS1                  :1;
        unsigned CKPS2                  :1;
        unsigned TMR2ON                 :1;
    };
} T2CONbits_t;
extern volatile T2CONbits_t T2CONbits __at(0x3FAC);
// bitfield macros
#define _T2CON_OUTPS_POSN                                   0x0
#define _T2CON_OUTPS_POSITION                               0x0
#define _T2CON_OUTPS_SIZE                                   0x4
#define _T2CON_OUTPS_LENGTH                                 0x4
#define _T2CON_OUTPS_MASK                                   0xF
#define _T2CON_CKPS_POSN                                    0x4
#define _T2CON_CKPS_POSITION                                0x4
#define _T2CON_CKPS_SIZE                                    0x3
#define _T2CON_CKPS_LENGTH                                  0x3
#define _T2CON_CKPS_MASK                                    0x70
#define _T2CON_ON_POSN                                      0x7
#define _T2CON_ON_POSITION                                  0x7
#define _T2CON_ON_SIZE                                      0x1
#define _T2CON_ON_LENGTH                                    0x1
#define _T2CON_ON_MASK                                      0x80
#define _T2CON_T2OUTPS_POSN                                 0x0
#define _T2CON_T2OUTPS_POSITION                             0x0
#define _T2CON_T2OUTPS_SIZE                                 0x4
#define _T2CON_T2OUTPS_LENGTH                               0x4
#define _T2CON_T2OUTPS_MASK                                 0xF
#define _T2CON_T2CKPS_POSN                                  0x4
#define _T2CON_T2CKPS_POSITION                              0x4
#define _T2CON_T2CKPS_SIZE                                  0x3
#define _T2CON_T2CKPS_LENGTH                                0x3
#define _T2CON_T2CKPS_MASK                                  0x70
#define _T2CON_T2ON_POSN                                    0x7
#define _T2CON_T2ON_POSITION                                0x7
#define _T2CON_T2ON_SIZE                                    0x1
#define _T2CON_T2ON_LENGTH                                  0x1
#define _T2CON_T2ON_MASK                                    0x80
#define _T2CON_T2OUTPS0_POSN                                0x0
#define _T2CON_T2OUTPS0_POSITION                            0x0
#define _T2CON_T2OUTPS0_SIZE                                0x1
#define _T2CON_T2OUTPS0_LENGTH                              0x1
#define _T2CON_T2OUTPS0_MASK                                0x1
#define _T2CON_T2OUTPS1_POSN                                0x1
#define _T2CON_T2OUTPS1_POSITION                            0x1
#define _T2CON_T2OUTPS1_SIZE                                0x1
#define _T2CON_T2OUTPS1_LENGTH                              0x1
#define _T2CON_T2OUTPS1_MASK                                0x2
#define _T2CON_T2OUTPS2_POSN                                0x2
#define _T2CON_T2OUTPS2_POSITION                            0x2
#define _T2CON_T2OUTPS2_SIZE                                0x1
#define _T2CON_T2OUTPS2_LENGTH                              0x1
#define _T2CON_T2OUTPS2_MASK                                0x4
#define _T2CON_T2OUTPS3_POSN                                0x3
#define _T2CON_T2OUTPS3_POSITION                            0x3
#define _T2CON_T2OUTPS3_SIZE                                0x1
#define _T2CON_T2OUTPS3_LENGTH                              0x1
#define _T2CON_T2OUTPS3_MASK                                0x8
#define _T2CON_T2CKPS0_POSN                                 0x4
#define _T2CON_T2CKPS0_POSITION                             0x4
#define _T2CON_T2CKPS0_SIZE                                 0x1
#define _T2CON_T2CKPS0_LENGTH                               0x1
#define _T2CON_T2CKPS0_MASK                                 0x10
#define _T2CON_T2CKPS1_POSN                                 0x5
#define _T2CON_T2CKPS1_POSITION                             0x5
#define _T2CON_T2CKPS1_SIZE                                 0x1
#define _T2CON_T2CKPS1_LENGTH                               0x1
#define _T2CON_T2CKPS1_MASK                                 0x20
#define _T2CON_T2CKPS2_POSN                                 0x6
#define _T2CON_T2CKPS2_POSITION                             0x6
#define _T2CON_T2CKPS2_SIZE                                 0x1
#define _T2CON_T2CKPS2_LENGTH                               0x1
#define _T2CON_T2CKPS2_MASK                                 0x40
#define _T2CON_OUTPS0_POSN                                  0x0
#define _T2CON_OUTPS0_POSITION                              0x0
#define _T2CON_OUTPS0_SIZE                                  0x1
#define _T2CON_OUTPS0_LENGTH                                0x1
#define _T2CON_OUTPS0_MASK                                  0x1
#define _T2CON_OUTPS1_POSN                                  0x1
#define _T2CON_OUTPS1_POSITION                              0x1
#define _T2CON_OUTPS1_SIZE                                  0x1
#define _T2CON_OUTPS1_LENGTH                                0x1
#define _T2CON_OUTPS1_MASK                                  0x2
#define _T2CON_OUTPS2_POSN                                  0x2
#define _T2CON_OUTPS2_POSITION                              0x2
#define _T2CON_OUTPS2_SIZE                                  0x1
#define _T2CON_OUTPS2_LENGTH                                0x1
#define _T2CON_OUTPS2_MASK                                  0x4
#define _T2CON_OUTPS3_POSN                                  0x3
#define _T2CON_OUTPS3_POSITION                              0x3
#define _T2CON_OUTPS3_SIZE                                  0x1
#define _T2CON_OUTPS3_LENGTH                                0x1
#define _T2CON_OUTPS3_MASK                                  0x8
#define _T2CON_CKPS0_POSN                                   0x4
#define _T2CON_CKPS0_POSITION                               0x4
#define _T2CON_CKPS0_SIZE                                   0x1
#define _T2CON_CKPS0_LENGTH                                 0x1
#define _T2CON_CKPS0_MASK                                   0x10
#define _T2CON_CKPS1_POSN                                   0x5
#define _T2CON_CKPS1_POSITION                               0x5
#define _T2CON_CKPS1_SIZE                                   0x1
#define _T2CON_CKPS1_LENGTH                                 0x1
#define _T2CON_CKPS1_MASK                                   0x20
#define _T2CON_CKPS2_POSN                                   0x6
#define _T2CON_CKPS2_POSITION                               0x6
#define _T2CON_CKPS2_SIZE                                   0x1
#define _T2CON_CKPS2_LENGTH                                 0x1
#define _T2CON_CKPS2_MASK                                   0x40
#define _T2CON_TMR2ON_POSN                                  0x7
#define _T2CON_TMR2ON_POSITION                              0x7
#define _T2CON_TMR2ON_SIZE                                  0x1
#define _T2CON_TMR2ON_LENGTH                                0x1
#define _T2CON_TMR2ON_MASK                                  0x80

// Register: T2HLT
#define T2HLT T2HLT
extern volatile unsigned char           T2HLT               __at(0x3FAD);
#ifndef _LIB_BUILD
asm("T2HLT equ 03FADh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :5;
        unsigned CKSYNC                 :1;
        unsigned CKPOL                  :1;
        unsigned PSYNC                  :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned MODE3                  :1;
        unsigned MODE4                  :1;
    };
    struct {
        unsigned T2MODE                 :5;
        unsigned T2CKSYNC               :1;
        unsigned T2CKPOL                :1;
        unsigned T2PSYNC                :1;
    };
    struct {
        unsigned T2MODE0                :1;
        unsigned T2MODE1                :1;
        unsigned T2MODE2                :1;
        unsigned T2MODE3                :1;
        unsigned T2MODE4                :1;
    };
} T2HLTbits_t;
extern volatile T2HLTbits_t T2HLTbits __at(0x3FAD);
// bitfield macros
#define _T2HLT_MODE_POSN                                    0x0
#define _T2HLT_MODE_POSITION                                0x0
#define _T2HLT_MODE_SIZE                                    0x5
#define _T2HLT_MODE_LENGTH                                  0x5
#define _T2HLT_MODE_MASK                                    0x1F
#define _T2HLT_CKSYNC_POSN                                  0x5
#define _T2HLT_CKSYNC_POSITION                              0x5
#define _T2HLT_CKSYNC_SIZE                                  0x1
#define _T2HLT_CKSYNC_LENGTH                                0x1
#define _T2HLT_CKSYNC_MASK                                  0x20
#define _T2HLT_CKPOL_POSN                                   0x6
#define _T2HLT_CKPOL_POSITION                               0x6
#define _T2HLT_CKPOL_SIZE                                   0x1
#define _T2HLT_CKPOL_LENGTH                                 0x1
#define _T2HLT_CKPOL_MASK                                   0x40
#define _T2HLT_PSYNC_POSN                                   0x7
#define _T2HLT_PSYNC_POSITION                               0x7
#define _T2HLT_PSYNC_SIZE                                   0x1
#define _T2HLT_PSYNC_LENGTH                                 0x1
#define _T2HLT_PSYNC_MASK                                   0x80
#define _T2HLT_MODE0_POSN                                   0x0
#define _T2HLT_MODE0_POSITION                               0x0
#define _T2HLT_MODE0_SIZE                                   0x1
#define _T2HLT_MODE0_LENGTH                                 0x1
#define _T2HLT_MODE0_MASK                                   0x1
#define _T2HLT_MODE1_POSN                                   0x1
#define _T2HLT_MODE1_POSITION                               0x1
#define _T2HLT_MODE1_SIZE                                   0x1
#define _T2HLT_MODE1_LENGTH                                 0x1
#define _T2HLT_MODE1_MASK                                   0x2
#define _T2HLT_MODE2_POSN                                   0x2
#define _T2HLT_MODE2_POSITION                               0x2
#define _T2HLT_MODE2_SIZE                                   0x1
#define _T2HLT_MODE2_LENGTH                                 0x1
#define _T2HLT_MODE2_MASK                                   0x4
#define _T2HLT_MODE3_POSN                                   0x3
#define _T2HLT_MODE3_POSITION                               0x3
#define _T2HLT_MODE3_SIZE                                   0x1
#define _T2HLT_MODE3_LENGTH                                 0x1
#define _T2HLT_MODE3_MASK                                   0x8
#define _T2HLT_MODE4_POSN                                   0x4
#define _T2HLT_MODE4_POSITION                               0x4
#define _T2HLT_MODE4_SIZE                                   0x1
#define _T2HLT_MODE4_LENGTH                                 0x1
#define _T2HLT_MODE4_MASK                                   0x10
#define _T2HLT_T2MODE_POSN                                  0x0
#define _T2HLT_T2MODE_POSITION                              0x0
#define _T2HLT_T2MODE_SIZE                                  0x5
#define _T2HLT_T2MODE_LENGTH                                0x5
#define _T2HLT_T2MODE_MASK                                  0x1F
#define _T2HLT_T2CKSYNC_POSN                                0x5
#define _T2HLT_T2CKSYNC_POSITION                            0x5
#define _T2HLT_T2CKSYNC_SIZE                                0x1
#define _T2HLT_T2CKSYNC_LENGTH                              0x1
#define _T2HLT_T2CKSYNC_MASK                                0x20
#define _T2HLT_T2CKPOL_POSN                                 0x6
#define _T2HLT_T2CKPOL_POSITION                             0x6
#define _T2HLT_T2CKPOL_SIZE                                 0x1
#define _T2HLT_T2CKPOL_LENGTH                               0x1
#define _T2HLT_T2CKPOL_MASK                                 0x40
#define _T2HLT_T2PSYNC_POSN                                 0x7
#define _T2HLT_T2PSYNC_POSITION                             0x7
#define _T2HLT_T2PSYNC_SIZE                                 0x1
#define _T2HLT_T2PSYNC_LENGTH                               0x1
#define _T2HLT_T2PSYNC_MASK                                 0x80
#define _T2HLT_T2MODE0_POSN                                 0x0
#define _T2HLT_T2MODE0_POSITION                             0x0
#define _T2HLT_T2MODE0_SIZE                                 0x1
#define _T2HLT_T2MODE0_LENGTH                               0x1
#define _T2HLT_T2MODE0_MASK                                 0x1
#define _T2HLT_T2MODE1_POSN                                 0x1
#define _T2HLT_T2MODE1_POSITION                             0x1
#define _T2HLT_T2MODE1_SIZE                                 0x1
#define _T2HLT_T2MODE1_LENGTH                               0x1
#define _T2HLT_T2MODE1_MASK                                 0x2
#define _T2HLT_T2MODE2_POSN                                 0x2
#define _T2HLT_T2MODE2_POSITION                             0x2
#define _T2HLT_T2MODE2_SIZE                                 0x1
#define _T2HLT_T2MODE2_LENGTH                               0x1
#define _T2HLT_T2MODE2_MASK                                 0x4
#define _T2HLT_T2MODE3_POSN                                 0x3
#define _T2HLT_T2MODE3_POSITION                             0x3
#define _T2HLT_T2MODE3_SIZE                                 0x1
#define _T2HLT_T2MODE3_LENGTH                               0x1
#define _T2HLT_T2MODE3_MASK                                 0x8
#define _T2HLT_T2MODE4_POSN                                 0x4
#define _T2HLT_T2MODE4_POSITION                             0x4
#define _T2HLT_T2MODE4_SIZE                                 0x1
#define _T2HLT_T2MODE4_LENGTH                               0x1
#define _T2HLT_T2MODE4_MASK                                 0x10

// Register: T2CLKCON
#define T2CLKCON T2CLKCON
extern volatile unsigned char           T2CLKCON            __at(0x3FAE);
#ifndef _LIB_BUILD
asm("T2CLKCON equ 03FAEh");
#endif
// aliases
extern volatile unsigned char           T2CLK               __at(0x3FAE);
#ifndef _LIB_BUILD
asm("T2CLK equ 03FAEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CS                     :4;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
    };
    struct {
        unsigned T2CS                   :4;
    };
    struct {
        unsigned T2CS0                  :1;
        unsigned T2CS1                  :1;
        unsigned T2CS2                  :1;
        unsigned T2CS3                  :1;
    };
} T2CLKCONbits_t;
extern volatile T2CLKCONbits_t T2CLKCONbits __at(0x3FAE);
// bitfield macros
#define _T2CLKCON_CS_POSN                                   0x0
#define _T2CLKCON_CS_POSITION                               0x0
#define _T2CLKCON_CS_SIZE                                   0x4
#define _T2CLKCON_CS_LENGTH                                 0x4
#define _T2CLKCON_CS_MASK                                   0xF
#define _T2CLKCON_CS0_POSN                                  0x0
#define _T2CLKCON_CS0_POSITION                              0x0
#define _T2CLKCON_CS0_SIZE                                  0x1
#define _T2CLKCON_CS0_LENGTH                                0x1
#define _T2CLKCON_CS0_MASK                                  0x1
#define _T2CLKCON_CS1_POSN                                  0x1
#define _T2CLKCON_CS1_POSITION                              0x1
#define _T2CLKCON_CS1_SIZE                                  0x1
#define _T2CLKCON_CS1_LENGTH                                0x1
#define _T2CLKCON_CS1_MASK                                  0x2
#define _T2CLKCON_CS2_POSN                                  0x2
#define _T2CLKCON_CS2_POSITION                              0x2
#define _T2CLKCON_CS2_SIZE                                  0x1
#define _T2CLKCON_CS2_LENGTH                                0x1
#define _T2CLKCON_CS2_MASK                                  0x4
#define _T2CLKCON_CS3_POSN                                  0x3
#define _T2CLKCON_CS3_POSITION                              0x3
#define _T2CLKCON_CS3_SIZE                                  0x1
#define _T2CLKCON_CS3_LENGTH                                0x1
#define _T2CLKCON_CS3_MASK                                  0x8
#define _T2CLKCON_T2CS_POSN                                 0x0
#define _T2CLKCON_T2CS_POSITION                             0x0
#define _T2CLKCON_T2CS_SIZE                                 0x4
#define _T2CLKCON_T2CS_LENGTH                               0x4
#define _T2CLKCON_T2CS_MASK                                 0xF
#define _T2CLKCON_T2CS0_POSN                                0x0
#define _T2CLKCON_T2CS0_POSITION                            0x0
#define _T2CLKCON_T2CS0_SIZE                                0x1
#define _T2CLKCON_T2CS0_LENGTH                              0x1
#define _T2CLKCON_T2CS0_MASK                                0x1
#define _T2CLKCON_T2CS1_POSN                                0x1
#define _T2CLKCON_T2CS1_POSITION                            0x1
#define _T2CLKCON_T2CS1_SIZE                                0x1
#define _T2CLKCON_T2CS1_LENGTH                              0x1
#define _T2CLKCON_T2CS1_MASK                                0x2
#define _T2CLKCON_T2CS2_POSN                                0x2
#define _T2CLKCON_T2CS2_POSITION                            0x2
#define _T2CLKCON_T2CS2_SIZE                                0x1
#define _T2CLKCON_T2CS2_LENGTH                              0x1
#define _T2CLKCON_T2CS2_MASK                                0x4
#define _T2CLKCON_T2CS3_POSN                                0x3
#define _T2CLKCON_T2CS3_POSITION                            0x3
#define _T2CLKCON_T2CS3_SIZE                                0x1
#define _T2CLKCON_T2CS3_LENGTH                              0x1
#define _T2CLKCON_T2CS3_MASK                                0x8
// alias bitfield definitions
typedef union {
    struct {
        unsigned CS                     :4;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
    };
    struct {
        unsigned T2CS                   :4;
    };
    struct {
        unsigned T2CS0                  :1;
        unsigned T2CS1                  :1;
        unsigned T2CS2                  :1;
        unsigned T2CS3                  :1;
    };
} T2CLKbits_t;
extern volatile T2CLKbits_t T2CLKbits __at(0x3FAE);
// bitfield macros
#define _T2CLK_CS_POSN                                      0x0
#define _T2CLK_CS_POSITION                                  0x0
#define _T2CLK_CS_SIZE                                      0x4
#define _T2CLK_CS_LENGTH                                    0x4
#define _T2CLK_CS_MASK                                      0xF
#define _T2CLK_CS0_POSN                                     0x0
#define _T2CLK_CS0_POSITION                                 0x0
#define _T2CLK_CS0_SIZE                                     0x1
#define _T2CLK_CS0_LENGTH                                   0x1
#define _T2CLK_CS0_MASK                                     0x1
#define _T2CLK_CS1_POSN                                     0x1
#define _T2CLK_CS1_POSITION                                 0x1
#define _T2CLK_CS1_SIZE                                     0x1
#define _T2CLK_CS1_LENGTH                                   0x1
#define _T2CLK_CS1_MASK                                     0x2
#define _T2CLK_CS2_POSN                                     0x2
#define _T2CLK_CS2_POSITION                                 0x2
#define _T2CLK_CS2_SIZE                                     0x1
#define _T2CLK_CS2_LENGTH                                   0x1
#define _T2CLK_CS2_MASK                                     0x4
#define _T2CLK_CS3_POSN                                     0x3
#define _T2CLK_CS3_POSITION                                 0x3
#define _T2CLK_CS3_SIZE                                     0x1
#define _T2CLK_CS3_LENGTH                                   0x1
#define _T2CLK_CS3_MASK                                     0x8
#define _T2CLK_T2CS_POSN                                    0x0
#define _T2CLK_T2CS_POSITION                                0x0
#define _T2CLK_T2CS_SIZE                                    0x4
#define _T2CLK_T2CS_LENGTH                                  0x4
#define _T2CLK_T2CS_MASK                                    0xF
#define _T2CLK_T2CS0_POSN                                   0x0
#define _T2CLK_T2CS0_POSITION                               0x0
#define _T2CLK_T2CS0_SIZE                                   0x1
#define _T2CLK_T2CS0_LENGTH                                 0x1
#define _T2CLK_T2CS0_MASK                                   0x1
#define _T2CLK_T2CS1_POSN                                   0x1
#define _T2CLK_T2CS1_POSITION                               0x1
#define _T2CLK_T2CS1_SIZE                                   0x1
#define _T2CLK_T2CS1_LENGTH                                 0x1
#define _T2CLK_T2CS1_MASK                                   0x2
#define _T2CLK_T2CS2_POSN                                   0x2
#define _T2CLK_T2CS2_POSITION                               0x2
#define _T2CLK_T2CS2_SIZE                                   0x1
#define _T2CLK_T2CS2_LENGTH                                 0x1
#define _T2CLK_T2CS2_MASK                                   0x4
#define _T2CLK_T2CS3_POSN                                   0x3
#define _T2CLK_T2CS3_POSITION                               0x3
#define _T2CLK_T2CS3_SIZE                                   0x1
#define _T2CLK_T2CS3_LENGTH                                 0x1
#define _T2CLK_T2CS3_MASK                                   0x8

// Register: T2RST
#define T2RST T2RST
extern volatile unsigned char           T2RST               __at(0x3FAF);
#ifndef _LIB_BUILD
asm("T2RST equ 03FAFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RSEL                   :5;
    };
    struct {
        unsigned RSEL0                  :1;
        unsigned RSEL1                  :1;
        unsigned RSEL2                  :1;
        unsigned RSEL3                  :1;
        unsigned RSEL4                  :1;
    };
    struct {
        unsigned T2RSEL                 :5;
    };
    struct {
        unsigned T2RSEL0                :1;
        unsigned T2RSEL1                :1;
        unsigned T2RSEL2                :1;
        unsigned T2RSEL3                :1;
        unsigned T2RSEL4                :1;
    };
} T2RSTbits_t;
extern volatile T2RSTbits_t T2RSTbits __at(0x3FAF);
// bitfield macros
#define _T2RST_RSEL_POSN                                    0x0
#define _T2RST_RSEL_POSITION                                0x0
#define _T2RST_RSEL_SIZE                                    0x5
#define _T2RST_RSEL_LENGTH                                  0x5
#define _T2RST_RSEL_MASK                                    0x1F
#define _T2RST_RSEL0_POSN                                   0x0
#define _T2RST_RSEL0_POSITION                               0x0
#define _T2RST_RSEL0_SIZE                                   0x1
#define _T2RST_RSEL0_LENGTH                                 0x1
#define _T2RST_RSEL0_MASK                                   0x1
#define _T2RST_RSEL1_POSN                                   0x1
#define _T2RST_RSEL1_POSITION                               0x1
#define _T2RST_RSEL1_SIZE                                   0x1
#define _T2RST_RSEL1_LENGTH                                 0x1
#define _T2RST_RSEL1_MASK                                   0x2
#define _T2RST_RSEL2_POSN                                   0x2
#define _T2RST_RSEL2_POSITION                               0x2
#define _T2RST_RSEL2_SIZE                                   0x1
#define _T2RST_RSEL2_LENGTH                                 0x1
#define _T2RST_RSEL2_MASK                                   0x4
#define _T2RST_RSEL3_POSN                                   0x3
#define _T2RST_RSEL3_POSITION                               0x3
#define _T2RST_RSEL3_SIZE                                   0x1
#define _T2RST_RSEL3_LENGTH                                 0x1
#define _T2RST_RSEL3_MASK                                   0x8
#define _T2RST_RSEL4_POSN                                   0x4
#define _T2RST_RSEL4_POSITION                               0x4
#define _T2RST_RSEL4_SIZE                                   0x1
#define _T2RST_RSEL4_LENGTH                                 0x1
#define _T2RST_RSEL4_MASK                                   0x10
#define _T2RST_T2RSEL_POSN                                  0x0
#define _T2RST_T2RSEL_POSITION                              0x0
#define _T2RST_T2RSEL_SIZE                                  0x5
#define _T2RST_T2RSEL_LENGTH                                0x5
#define _T2RST_T2RSEL_MASK                                  0x1F
#define _T2RST_T2RSEL0_POSN                                 0x0
#define _T2RST_T2RSEL0_POSITION                             0x0
#define _T2RST_T2RSEL0_SIZE                                 0x1
#define _T2RST_T2RSEL0_LENGTH                               0x1
#define _T2RST_T2RSEL0_MASK                                 0x1
#define _T2RST_T2RSEL1_POSN                                 0x1
#define _T2RST_T2RSEL1_POSITION                             0x1
#define _T2RST_T2RSEL1_SIZE                                 0x1
#define _T2RST_T2RSEL1_LENGTH                               0x1
#define _T2RST_T2RSEL1_MASK                                 0x2
#define _T2RST_T2RSEL2_POSN                                 0x2
#define _T2RST_T2RSEL2_POSITION                             0x2
#define _T2RST_T2RSEL2_SIZE                                 0x1
#define _T2RST_T2RSEL2_LENGTH                               0x1
#define _T2RST_T2RSEL2_MASK                                 0x4
#define _T2RST_T2RSEL3_POSN                                 0x3
#define _T2RST_T2RSEL3_POSITION                             0x3
#define _T2RST_T2RSEL3_SIZE                                 0x1
#define _T2RST_T2RSEL3_LENGTH                               0x1
#define _T2RST_T2RSEL3_MASK                                 0x8
#define _T2RST_T2RSEL4_POSN                                 0x4
#define _T2RST_T2RSEL4_POSITION                             0x4
#define _T2RST_T2RSEL4_SIZE                                 0x1
#define _T2RST_T2RSEL4_LENGTH                               0x1
#define _T2RST_T2RSEL4_MASK                                 0x10

// Register: TMR1L
#define TMR1L TMR1L
extern volatile unsigned char           TMR1L               __at(0x3FB0);
#ifndef _LIB_BUILD
asm("TMR1L equ 03FB0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR1L                  :8;
    };
    struct {
        unsigned TMR1L0                 :1;
        unsigned TMR1L1                 :1;
        unsigned TMR1L2                 :1;
        unsigned TMR1L3                 :1;
        unsigned TMR1L4                 :1;
        unsigned TMR1L5                 :1;
        unsigned TMR1L6                 :1;
        unsigned TMR1L7                 :1;
    };
} TMR1Lbits_t;
extern volatile TMR1Lbits_t TMR1Lbits __at(0x3FB0);
// bitfield macros
#define _TMR1L_TMR1L_POSN                                   0x0
#define _TMR1L_TMR1L_POSITION                               0x0
#define _TMR1L_TMR1L_SIZE                                   0x8
#define _TMR1L_TMR1L_LENGTH                                 0x8
#define _TMR1L_TMR1L_MASK                                   0xFF
#define _TMR1L_TMR1L0_POSN                                  0x0
#define _TMR1L_TMR1L0_POSITION                              0x0
#define _TMR1L_TMR1L0_SIZE                                  0x1
#define _TMR1L_TMR1L0_LENGTH                                0x1
#define _TMR1L_TMR1L0_MASK                                  0x1
#define _TMR1L_TMR1L1_POSN                                  0x1
#define _TMR1L_TMR1L1_POSITION                              0x1
#define _TMR1L_TMR1L1_SIZE                                  0x1
#define _TMR1L_TMR1L1_LENGTH                                0x1
#define _TMR1L_TMR1L1_MASK                                  0x2
#define _TMR1L_TMR1L2_POSN                                  0x2
#define _TMR1L_TMR1L2_POSITION                              0x2
#define _TMR1L_TMR1L2_SIZE                                  0x1
#define _TMR1L_TMR1L2_LENGTH                                0x1
#define _TMR1L_TMR1L2_MASK                                  0x4
#define _TMR1L_TMR1L3_POSN                                  0x3
#define _TMR1L_TMR1L3_POSITION                              0x3
#define _TMR1L_TMR1L3_SIZE                                  0x1
#define _TMR1L_TMR1L3_LENGTH                                0x1
#define _TMR1L_TMR1L3_MASK                                  0x8
#define _TMR1L_TMR1L4_POSN                                  0x4
#define _TMR1L_TMR1L4_POSITION                              0x4
#define _TMR1L_TMR1L4_SIZE                                  0x1
#define _TMR1L_TMR1L4_LENGTH                                0x1
#define _TMR1L_TMR1L4_MASK                                  0x10
#define _TMR1L_TMR1L5_POSN                                  0x5
#define _TMR1L_TMR1L5_POSITION                              0x5
#define _TMR1L_TMR1L5_SIZE                                  0x1
#define _TMR1L_TMR1L5_LENGTH                                0x1
#define _TMR1L_TMR1L5_MASK                                  0x20
#define _TMR1L_TMR1L6_POSN                                  0x6
#define _TMR1L_TMR1L6_POSITION                              0x6
#define _TMR1L_TMR1L6_SIZE                                  0x1
#define _TMR1L_TMR1L6_LENGTH                                0x1
#define _TMR1L_TMR1L6_MASK                                  0x40
#define _TMR1L_TMR1L7_POSN                                  0x7
#define _TMR1L_TMR1L7_POSITION                              0x7
#define _TMR1L_TMR1L7_SIZE                                  0x1
#define _TMR1L_TMR1L7_LENGTH                                0x1
#define _TMR1L_TMR1L7_MASK                                  0x80

// Register: TMR1H
#define TMR1H TMR1H
extern volatile unsigned char           TMR1H               __at(0x3FB1);
#ifndef _LIB_BUILD
asm("TMR1H equ 03FB1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR1H                  :8;
    };
    struct {
        unsigned TMR1H0                 :1;
        unsigned TMR1H1                 :1;
        unsigned TMR1H2                 :1;
        unsigned TMR1H3                 :1;
        unsigned TMR1H4                 :1;
        unsigned TMR1H5                 :1;
        unsigned TMR1H6                 :1;
        unsigned TMR1H7                 :1;
    };
} TMR1Hbits_t;
extern volatile TMR1Hbits_t TMR1Hbits __at(0x3FB1);
// bitfield macros
#define _TMR1H_TMR1H_POSN                                   0x0
#define _TMR1H_TMR1H_POSITION                               0x0
#define _TMR1H_TMR1H_SIZE                                   0x8
#define _TMR1H_TMR1H_LENGTH                                 0x8
#define _TMR1H_TMR1H_MASK                                   0xFF
#define _TMR1H_TMR1H0_POSN                                  0x0
#define _TMR1H_TMR1H0_POSITION                              0x0
#define _TMR1H_TMR1H0_SIZE                                  0x1
#define _TMR1H_TMR1H0_LENGTH                                0x1
#define _TMR1H_TMR1H0_MASK                                  0x1
#define _TMR1H_TMR1H1_POSN                                  0x1
#define _TMR1H_TMR1H1_POSITION                              0x1
#define _TMR1H_TMR1H1_SIZE                                  0x1
#define _TMR1H_TMR1H1_LENGTH                                0x1
#define _TMR1H_TMR1H1_MASK                                  0x2
#define _TMR1H_TMR1H2_POSN                                  0x2
#define _TMR1H_TMR1H2_POSITION                              0x2
#define _TMR1H_TMR1H2_SIZE                                  0x1
#define _TMR1H_TMR1H2_LENGTH                                0x1
#define _TMR1H_TMR1H2_MASK                                  0x4
#define _TMR1H_TMR1H3_POSN                                  0x3
#define _TMR1H_TMR1H3_POSITION                              0x3
#define _TMR1H_TMR1H3_SIZE                                  0x1
#define _TMR1H_TMR1H3_LENGTH                                0x1
#define _TMR1H_TMR1H3_MASK                                  0x8
#define _TMR1H_TMR1H4_POSN                                  0x4
#define _TMR1H_TMR1H4_POSITION                              0x4
#define _TMR1H_TMR1H4_SIZE                                  0x1
#define _TMR1H_TMR1H4_LENGTH                                0x1
#define _TMR1H_TMR1H4_MASK                                  0x10
#define _TMR1H_TMR1H5_POSN                                  0x5
#define _TMR1H_TMR1H5_POSITION                              0x5
#define _TMR1H_TMR1H5_SIZE                                  0x1
#define _TMR1H_TMR1H5_LENGTH                                0x1
#define _TMR1H_TMR1H5_MASK                                  0x20
#define _TMR1H_TMR1H6_POSN                                  0x6
#define _TMR1H_TMR1H6_POSITION                              0x6
#define _TMR1H_TMR1H6_SIZE                                  0x1
#define _TMR1H_TMR1H6_LENGTH                                0x1
#define _TMR1H_TMR1H6_MASK                                  0x40
#define _TMR1H_TMR1H7_POSN                                  0x7
#define _TMR1H_TMR1H7_POSITION                              0x7
#define _TMR1H_TMR1H7_SIZE                                  0x1
#define _TMR1H_TMR1H7_LENGTH                                0x1
#define _TMR1H_TMR1H7_MASK                                  0x80

// Register: T1CON
#define T1CON T1CON
extern volatile unsigned char           T1CON               __at(0x3FB2);
#ifndef _LIB_BUILD
asm("T1CON equ 03FB2h");
#endif
// aliases
extern volatile unsigned char           TMR1CON             __at(0x3FB2);
#ifndef _LIB_BUILD
asm("TMR1CON equ 03FB2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ON                     :1;
        unsigned RD16                   :1;
        unsigned NOT_SYNC               :1;
        unsigned                        :1;
        unsigned CKPS                   :2;
    };
    struct {
        unsigned TMR1ON                 :1;
        unsigned T1RD16                 :1;
        unsigned NOT_T1SYNC             :1;
        unsigned                        :1;
        unsigned T1CKPS0                :1;
        unsigned T1CKPS1                :1;
    };
    struct {
        unsigned                        :4;
        unsigned CKPS0                  :1;
        unsigned CKPS1                  :1;
    };
    struct {
        unsigned                        :1;
        unsigned RD161                  :1;
    };
} T1CONbits_t;
extern volatile T1CONbits_t T1CONbits __at(0x3FB2);
// bitfield macros
#define _T1CON_ON_POSN                                      0x0
#define _T1CON_ON_POSITION                                  0x0
#define _T1CON_ON_SIZE                                      0x1
#define _T1CON_ON_LENGTH                                    0x1
#define _T1CON_ON_MASK                                      0x1
#define _T1CON_RD16_POSN                                    0x1
#define _T1CON_RD16_POSITION                                0x1
#define _T1CON_RD16_SIZE                                    0x1
#define _T1CON_RD16_LENGTH                                  0x1
#define _T1CON_RD16_MASK                                    0x2
#define _T1CON_NOT_SYNC_POSN                                0x2
#define _T1CON_NOT_SYNC_POSITION                            0x2
#define _T1CON_NOT_SYNC_SIZE                                0x1
#define _T1CON_NOT_SYNC_LENGTH                              0x1
#define _T1CON_NOT_SYNC_MASK                                0x4
#define _T1CON_CKPS_POSN                                    0x4
#define _T1CON_CKPS_POSITION                                0x4
#define _T1CON_CKPS_SIZE                                    0x2
#define _T1CON_CKPS_LENGTH                                  0x2
#define _T1CON_CKPS_MASK                                    0x30
#define _T1CON_TMR1ON_POSN                                  0x0
#define _T1CON_TMR1ON_POSITION                              0x0
#define _T1CON_TMR1ON_SIZE                                  0x1
#define _T1CON_TMR1ON_LENGTH                                0x1
#define _T1CON_TMR1ON_MASK                                  0x1
#define _T1CON_T1RD16_POSN                                  0x1
#define _T1CON_T1RD16_POSITION                              0x1
#define _T1CON_T1RD16_SIZE                                  0x1
#define _T1CON_T1RD16_LENGTH                                0x1
#define _T1CON_T1RD16_MASK                                  0x2
#define _T1CON_NOT_T1SYNC_POSN                              0x2
#define _T1CON_NOT_T1SYNC_POSITION                          0x2
#define _T1CON_NOT_T1SYNC_SIZE                              0x1
#define _T1CON_NOT_T1SYNC_LENGTH                            0x1
#define _T1CON_NOT_T1SYNC_MASK                              0x4
#define _T1CON_T1CKPS0_POSN                                 0x4
#define _T1CON_T1CKPS0_POSITION                             0x4
#define _T1CON_T1CKPS0_SIZE                                 0x1
#define _T1CON_T1CKPS0_LENGTH                               0x1
#define _T1CON_T1CKPS0_MASK                                 0x10
#define _T1CON_T1CKPS1_POSN                                 0x5
#define _T1CON_T1CKPS1_POSITION                             0x5
#define _T1CON_T1CKPS1_SIZE                                 0x1
#define _T1CON_T1CKPS1_LENGTH                               0x1
#define _T1CON_T1CKPS1_MASK                                 0x20
#define _T1CON_CKPS0_POSN                                   0x4
#define _T1CON_CKPS0_POSITION                               0x4
#define _T1CON_CKPS0_SIZE                                   0x1
#define _T1CON_CKPS0_LENGTH                                 0x1
#define _T1CON_CKPS0_MASK                                   0x10
#define _T1CON_CKPS1_POSN                                   0x5
#define _T1CON_CKPS1_POSITION                               0x5
#define _T1CON_CKPS1_SIZE                                   0x1
#define _T1CON_CKPS1_LENGTH                                 0x1
#define _T1CON_CKPS1_MASK                                   0x20
#define _T1CON_RD161_POSN                                   0x1
#define _T1CON_RD161_POSITION                               0x1
#define _T1CON_RD161_SIZE                                   0x1
#define _T1CON_RD161_LENGTH                                 0x1
#define _T1CON_RD161_MASK                                   0x2
// alias bitfield definitions
typedef union {
    struct {
        unsigned ON                     :1;
        unsigned RD16                   :1;
        unsigned NOT_SYNC               :1;
        unsigned                        :1;
        unsigned CKPS                   :2;
    };
    struct {
        unsigned TMR1ON                 :1;
        unsigned T1RD16                 :1;
        unsigned NOT_T1SYNC             :1;
        unsigned                        :1;
        unsigned T1CKPS0                :1;
        unsigned T1CKPS1                :1;
    };
    struct {
        unsigned                        :4;
        unsigned CKPS0                  :1;
        unsigned CKPS1                  :1;
    };
    struct {
        unsigned                        :1;
        unsigned RD161                  :1;
    };
} TMR1CONbits_t;
extern volatile TMR1CONbits_t TMR1CONbits __at(0x3FB2);
// bitfield macros
#define _TMR1CON_ON_POSN                                    0x0
#define _TMR1CON_ON_POSITION                                0x0
#define _TMR1CON_ON_SIZE                                    0x1
#define _TMR1CON_ON_LENGTH                                  0x1
#define _TMR1CON_ON_MASK                                    0x1
#define _TMR1CON_RD16_POSN                                  0x1
#define _TMR1CON_RD16_POSITION                              0x1
#define _TMR1CON_RD16_SIZE                                  0x1
#define _TMR1CON_RD16_LENGTH                                0x1
#define _TMR1CON_RD16_MASK                                  0x2
#define _TMR1CON_NOT_SYNC_POSN                              0x2
#define _TMR1CON_NOT_SYNC_POSITION                          0x2
#define _TMR1CON_NOT_SYNC_SIZE                              0x1
#define _TMR1CON_NOT_SYNC_LENGTH                            0x1
#define _TMR1CON_NOT_SYNC_MASK                              0x4
#define _TMR1CON_CKPS_POSN                                  0x4
#define _TMR1CON_CKPS_POSITION                              0x4
#define _TMR1CON_CKPS_SIZE                                  0x2
#define _TMR1CON_CKPS_LENGTH                                0x2
#define _TMR1CON_CKPS_MASK                                  0x30
#define _TMR1CON_TMR1ON_POSN                                0x0
#define _TMR1CON_TMR1ON_POSITION                            0x0
#define _TMR1CON_TMR1ON_SIZE                                0x1
#define _TMR1CON_TMR1ON_LENGTH                              0x1
#define _TMR1CON_TMR1ON_MASK                                0x1
#define _TMR1CON_T1RD16_POSN                                0x1
#define _TMR1CON_T1RD16_POSITION                            0x1
#define _TMR1CON_T1RD16_SIZE                                0x1
#define _TMR1CON_T1RD16_LENGTH                              0x1
#define _TMR1CON_T1RD16_MASK                                0x2
#define _TMR1CON_NOT_T1SYNC_POSN                            0x2
#define _TMR1CON_NOT_T1SYNC_POSITION                        0x2
#define _TMR1CON_NOT_T1SYNC_SIZE                            0x1
#define _TMR1CON_NOT_T1SYNC_LENGTH                          0x1
#define _TMR1CON_NOT_T1SYNC_MASK                            0x4
#define _TMR1CON_T1CKPS0_POSN                               0x4
#define _TMR1CON_T1CKPS0_POSITION                           0x4
#define _TMR1CON_T1CKPS0_SIZE                               0x1
#define _TMR1CON_T1CKPS0_LENGTH                             0x1
#define _TMR1CON_T1CKPS0_MASK                               0x10
#define _TMR1CON_T1CKPS1_POSN                               0x5
#define _TMR1CON_T1CKPS1_POSITION                           0x5
#define _TMR1CON_T1CKPS1_SIZE                               0x1
#define _TMR1CON_T1CKPS1_LENGTH                             0x1
#define _TMR1CON_T1CKPS1_MASK                               0x20
#define _TMR1CON_CKPS0_POSN                                 0x4
#define _TMR1CON_CKPS0_POSITION                             0x4
#define _TMR1CON_CKPS0_SIZE                                 0x1
#define _TMR1CON_CKPS0_LENGTH                               0x1
#define _TMR1CON_CKPS0_MASK                                 0x10
#define _TMR1CON_CKPS1_POSN                                 0x5
#define _TMR1CON_CKPS1_POSITION                             0x5
#define _TMR1CON_CKPS1_SIZE                                 0x1
#define _TMR1CON_CKPS1_LENGTH                               0x1
#define _TMR1CON_CKPS1_MASK                                 0x20
#define _TMR1CON_RD161_POSN                                 0x1
#define _TMR1CON_RD161_POSITION                             0x1
#define _TMR1CON_RD161_SIZE                                 0x1
#define _TMR1CON_RD161_LENGTH                               0x1
#define _TMR1CON_RD161_MASK                                 0x2

// Register: T1GCON
#define T1GCON T1GCON
extern volatile unsigned char           T1GCON              __at(0x3FB3);
#ifndef _LIB_BUILD
asm("T1GCON equ 03FB3h");
#endif
// aliases
extern volatile unsigned char           TMR1GCON            __at(0x3FB3);
#ifndef _LIB_BUILD
asm("TMR1GCON equ 03FB3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned GVAL                   :1;
        unsigned GGO                    :1;
        unsigned GSPM                   :1;
        unsigned GTM                    :1;
        unsigned GPOL                   :1;
        unsigned GE                     :1;
    };
    struct {
        unsigned                        :2;
        unsigned T1GVAL                 :1;
        unsigned T1GGO                  :1;
        unsigned T1GSPM                 :1;
        unsigned T1GTM                  :1;
        unsigned T1GPOL                 :1;
        unsigned T1GE                   :1;
    };
    struct {
        unsigned                        :3;
        unsigned NOT_DONE               :1;
    };
    struct {
        unsigned                        :3;
        unsigned NOT_T1DONE             :1;
    };
} T1GCONbits_t;
extern volatile T1GCONbits_t T1GCONbits __at(0x3FB3);
// bitfield macros
#define _T1GCON_GVAL_POSN                                   0x2
#define _T1GCON_GVAL_POSITION                               0x2
#define _T1GCON_GVAL_SIZE                                   0x1
#define _T1GCON_GVAL_LENGTH                                 0x1
#define _T1GCON_GVAL_MASK                                   0x4
#define _T1GCON_GGO_POSN                                    0x3
#define _T1GCON_GGO_POSITION                                0x3
#define _T1GCON_GGO_SIZE                                    0x1
#define _T1GCON_GGO_LENGTH                                  0x1
#define _T1GCON_GGO_MASK                                    0x8
#define _T1GCON_GSPM_POSN                                   0x4
#define _T1GCON_GSPM_POSITION                               0x4
#define _T1GCON_GSPM_SIZE                                   0x1
#define _T1GCON_GSPM_LENGTH                                 0x1
#define _T1GCON_GSPM_MASK                                   0x10
#define _T1GCON_GTM_POSN                                    0x5
#define _T1GCON_GTM_POSITION                                0x5
#define _T1GCON_GTM_SIZE                                    0x1
#define _T1GCON_GTM_LENGTH                                  0x1
#define _T1GCON_GTM_MASK                                    0x20
#define _T1GCON_GPOL_POSN                                   0x6
#define _T1GCON_GPOL_POSITION                               0x6
#define _T1GCON_GPOL_SIZE                                   0x1
#define _T1GCON_GPOL_LENGTH                                 0x1
#define _T1GCON_GPOL_MASK                                   0x40
#define _T1GCON_GE_POSN                                     0x7
#define _T1GCON_GE_POSITION                                 0x7
#define _T1GCON_GE_SIZE                                     0x1
#define _T1GCON_GE_LENGTH                                   0x1
#define _T1GCON_GE_MASK                                     0x80
#define _T1GCON_T1GVAL_POSN                                 0x2
#define _T1GCON_T1GVAL_POSITION                             0x2
#define _T1GCON_T1GVAL_SIZE                                 0x1
#define _T1GCON_T1GVAL_LENGTH                               0x1
#define _T1GCON_T1GVAL_MASK                                 0x4
#define _T1GCON_T1GGO_POSN                                  0x3
#define _T1GCON_T1GGO_POSITION                              0x3
#define _T1GCON_T1GGO_SIZE                                  0x1
#define _T1GCON_T1GGO_LENGTH                                0x1
#define _T1GCON_T1GGO_MASK                                  0x8
#define _T1GCON_T1GSPM_POSN                                 0x4
#define _T1GCON_T1GSPM_POSITION                             0x4
#define _T1GCON_T1GSPM_SIZE                                 0x1
#define _T1GCON_T1GSPM_LENGTH                               0x1
#define _T1GCON_T1GSPM_MASK                                 0x10
#define _T1GCON_T1GTM_POSN                                  0x5
#define _T1GCON_T1GTM_POSITION                              0x5
#define _T1GCON_T1GTM_SIZE                                  0x1
#define _T1GCON_T1GTM_LENGTH                                0x1
#define _T1GCON_T1GTM_MASK                                  0x20
#define _T1GCON_T1GPOL_POSN                                 0x6
#define _T1GCON_T1GPOL_POSITION                             0x6
#define _T1GCON_T1GPOL_SIZE                                 0x1
#define _T1GCON_T1GPOL_LENGTH                               0x1
#define _T1GCON_T1GPOL_MASK                                 0x40
#define _T1GCON_T1GE_POSN                                   0x7
#define _T1GCON_T1GE_POSITION                               0x7
#define _T1GCON_T1GE_SIZE                                   0x1
#define _T1GCON_T1GE_LENGTH                                 0x1
#define _T1GCON_T1GE_MASK                                   0x80
#define _T1GCON_NOT_DONE_POSN                               0x3
#define _T1GCON_NOT_DONE_POSITION                           0x3
#define _T1GCON_NOT_DONE_SIZE                               0x1
#define _T1GCON_NOT_DONE_LENGTH                             0x1
#define _T1GCON_NOT_DONE_MASK                               0x8
#define _T1GCON_NOT_T1DONE_POSN                             0x3
#define _T1GCON_NOT_T1DONE_POSITION                         0x3
#define _T1GCON_NOT_T1DONE_SIZE                             0x1
#define _T1GCON_NOT_T1DONE_LENGTH                           0x1
#define _T1GCON_NOT_T1DONE_MASK                             0x8
// alias bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned GVAL                   :1;
        unsigned GGO                    :1;
        unsigned GSPM                   :1;
        unsigned GTM                    :1;
        unsigned GPOL                   :1;
        unsigned GE                     :1;
    };
    struct {
        unsigned                        :2;
        unsigned T1GVAL                 :1;
        unsigned T1GGO                  :1;
        unsigned T1GSPM                 :1;
        unsigned T1GTM                  :1;
        unsigned T1GPOL                 :1;
        unsigned T1GE                   :1;
    };
    struct {
        unsigned                        :3;
        unsigned NOT_DONE               :1;
    };
    struct {
        unsigned                        :3;
        unsigned NOT_T1DONE             :1;
    };
} TMR1GCONbits_t;
extern volatile TMR1GCONbits_t TMR1GCONbits __at(0x3FB3);
// bitfield macros
#define _TMR1GCON_GVAL_POSN                                 0x2
#define _TMR1GCON_GVAL_POSITION                             0x2
#define _TMR1GCON_GVAL_SIZE                                 0x1
#define _TMR1GCON_GVAL_LENGTH                               0x1
#define _TMR1GCON_GVAL_MASK                                 0x4
#define _TMR1GCON_GGO_POSN                                  0x3
#define _TMR1GCON_GGO_POSITION                              0x3
#define _TMR1GCON_GGO_SIZE                                  0x1
#define _TMR1GCON_GGO_LENGTH                                0x1
#define _TMR1GCON_GGO_MASK                                  0x8
#define _TMR1GCON_GSPM_POSN                                 0x4
#define _TMR1GCON_GSPM_POSITION                             0x4
#define _TMR1GCON_GSPM_SIZE                                 0x1
#define _TMR1GCON_GSPM_LENGTH                               0x1
#define _TMR1GCON_GSPM_MASK                                 0x10
#define _TMR1GCON_GTM_POSN                                  0x5
#define _TMR1GCON_GTM_POSITION                              0x5
#define _TMR1GCON_GTM_SIZE                                  0x1
#define _TMR1GCON_GTM_LENGTH                                0x1
#define _TMR1GCON_GTM_MASK                                  0x20
#define _TMR1GCON_GPOL_POSN                                 0x6
#define _TMR1GCON_GPOL_POSITION                             0x6
#define _TMR1GCON_GPOL_SIZE                                 0x1
#define _TMR1GCON_GPOL_LENGTH                               0x1
#define _TMR1GCON_GPOL_MASK                                 0x40
#define _TMR1GCON_GE_POSN                                   0x7
#define _TMR1GCON_GE_POSITION                               0x7
#define _TMR1GCON_GE_SIZE                                   0x1
#define _TMR1GCON_GE_LENGTH                                 0x1
#define _TMR1GCON_GE_MASK                                   0x80
#define _TMR1GCON_T1GVAL_POSN                               0x2
#define _TMR1GCON_T1GVAL_POSITION                           0x2
#define _TMR1GCON_T1GVAL_SIZE                               0x1
#define _TMR1GCON_T1GVAL_LENGTH                             0x1
#define _TMR1GCON_T1GVAL_MASK                               0x4
#define _TMR1GCON_T1GGO_POSN                                0x3
#define _TMR1GCON_T1GGO_POSITION                            0x3
#define _TMR1GCON_T1GGO_SIZE                                0x1
#define _TMR1GCON_T1GGO_LENGTH                              0x1
#define _TMR1GCON_T1GGO_MASK                                0x8
#define _TMR1GCON_T1GSPM_POSN                               0x4
#define _TMR1GCON_T1GSPM_POSITION                           0x4
#define _TMR1GCON_T1GSPM_SIZE                               0x1
#define _TMR1GCON_T1GSPM_LENGTH                             0x1
#define _TMR1GCON_T1GSPM_MASK                               0x10
#define _TMR1GCON_T1GTM_POSN                                0x5
#define _TMR1GCON_T1GTM_POSITION                            0x5
#define _TMR1GCON_T1GTM_SIZE                                0x1
#define _TMR1GCON_T1GTM_LENGTH                              0x1
#define _TMR1GCON_T1GTM_MASK                                0x20
#define _TMR1GCON_T1GPOL_POSN                               0x6
#define _TMR1GCON_T1GPOL_POSITION                           0x6
#define _TMR1GCON_T1GPOL_SIZE                               0x1
#define _TMR1GCON_T1GPOL_LENGTH                             0x1
#define _TMR1GCON_T1GPOL_MASK                               0x40
#define _TMR1GCON_T1GE_POSN                                 0x7
#define _TMR1GCON_T1GE_POSITION                             0x7
#define _TMR1GCON_T1GE_SIZE                                 0x1
#define _TMR1GCON_T1GE_LENGTH                               0x1
#define _TMR1GCON_T1GE_MASK                                 0x80
#define _TMR1GCON_NOT_DONE_POSN                             0x3
#define _TMR1GCON_NOT_DONE_POSITION                         0x3
#define _TMR1GCON_NOT_DONE_SIZE                             0x1
#define _TMR1GCON_NOT_DONE_LENGTH                           0x1
#define _TMR1GCON_NOT_DONE_MASK                             0x8
#define _TMR1GCON_NOT_T1DONE_POSN                           0x3
#define _TMR1GCON_NOT_T1DONE_POSITION                       0x3
#define _TMR1GCON_NOT_T1DONE_SIZE                           0x1
#define _TMR1GCON_NOT_T1DONE_LENGTH                         0x1
#define _TMR1GCON_NOT_T1DONE_MASK                           0x8

// Register: T1GATE
#define T1GATE T1GATE
extern volatile unsigned char           T1GATE              __at(0x3FB4);
#ifndef _LIB_BUILD
asm("T1GATE equ 03FB4h");
#endif
// aliases
extern volatile unsigned char           TMR1GATE            __at(0x3FB4);
#ifndef _LIB_BUILD
asm("TMR1GATE equ 03FB4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned GSS                    :8;
    };
    struct {
        unsigned GSS0                   :1;
        unsigned GSS1                   :1;
        unsigned GSS2                   :1;
        unsigned GSS3                   :1;
        unsigned GSS4                   :1;
    };
    struct {
        unsigned T1GSS0                 :1;
        unsigned T1GSS1                 :1;
        unsigned T1GSS2                 :1;
        unsigned T1GSS3                 :1;
        unsigned T1GSS4                 :1;
    };
} T1GATEbits_t;
extern volatile T1GATEbits_t T1GATEbits __at(0x3FB4);
// bitfield macros
#define _T1GATE_GSS_POSN                                    0x0
#define _T1GATE_GSS_POSITION                                0x0
#define _T1GATE_GSS_SIZE                                    0x8
#define _T1GATE_GSS_LENGTH                                  0x8
#define _T1GATE_GSS_MASK                                    0xFF
#define _T1GATE_GSS0_POSN                                   0x0
#define _T1GATE_GSS0_POSITION                               0x0
#define _T1GATE_GSS0_SIZE                                   0x1
#define _T1GATE_GSS0_LENGTH                                 0x1
#define _T1GATE_GSS0_MASK                                   0x1
#define _T1GATE_GSS1_POSN                                   0x1
#define _T1GATE_GSS1_POSITION                               0x1
#define _T1GATE_GSS1_SIZE                                   0x1
#define _T1GATE_GSS1_LENGTH                                 0x1
#define _T1GATE_GSS1_MASK                                   0x2
#define _T1GATE_GSS2_POSN                                   0x2
#define _T1GATE_GSS2_POSITION                               0x2
#define _T1GATE_GSS2_SIZE                                   0x1
#define _T1GATE_GSS2_LENGTH                                 0x1
#define _T1GATE_GSS2_MASK                                   0x4
#define _T1GATE_GSS3_POSN                                   0x3
#define _T1GATE_GSS3_POSITION                               0x3
#define _T1GATE_GSS3_SIZE                                   0x1
#define _T1GATE_GSS3_LENGTH                                 0x1
#define _T1GATE_GSS3_MASK                                   0x8
#define _T1GATE_GSS4_POSN                                   0x4
#define _T1GATE_GSS4_POSITION                               0x4
#define _T1GATE_GSS4_SIZE                                   0x1
#define _T1GATE_GSS4_LENGTH                                 0x1
#define _T1GATE_GSS4_MASK                                   0x10
#define _T1GATE_T1GSS0_POSN                                 0x0
#define _T1GATE_T1GSS0_POSITION                             0x0
#define _T1GATE_T1GSS0_SIZE                                 0x1
#define _T1GATE_T1GSS0_LENGTH                               0x1
#define _T1GATE_T1GSS0_MASK                                 0x1
#define _T1GATE_T1GSS1_POSN                                 0x1
#define _T1GATE_T1GSS1_POSITION                             0x1
#define _T1GATE_T1GSS1_SIZE                                 0x1
#define _T1GATE_T1GSS1_LENGTH                               0x1
#define _T1GATE_T1GSS1_MASK                                 0x2
#define _T1GATE_T1GSS2_POSN                                 0x2
#define _T1GATE_T1GSS2_POSITION                             0x2
#define _T1GATE_T1GSS2_SIZE                                 0x1
#define _T1GATE_T1GSS2_LENGTH                               0x1
#define _T1GATE_T1GSS2_MASK                                 0x4
#define _T1GATE_T1GSS3_POSN                                 0x3
#define _T1GATE_T1GSS3_POSITION                             0x3
#define _T1GATE_T1GSS3_SIZE                                 0x1
#define _T1GATE_T1GSS3_LENGTH                               0x1
#define _T1GATE_T1GSS3_MASK                                 0x8
#define _T1GATE_T1GSS4_POSN                                 0x4
#define _T1GATE_T1GSS4_POSITION                             0x4
#define _T1GATE_T1GSS4_SIZE                                 0x1
#define _T1GATE_T1GSS4_LENGTH                               0x1
#define _T1GATE_T1GSS4_MASK                                 0x10
// alias bitfield definitions
typedef union {
    struct {
        unsigned GSS                    :8;
    };
    struct {
        unsigned GSS0                   :1;
        unsigned GSS1                   :1;
        unsigned GSS2                   :1;
        unsigned GSS3                   :1;
        unsigned GSS4                   :1;
    };
    struct {
        unsigned T1GSS0                 :1;
        unsigned T1GSS1                 :1;
        unsigned T1GSS2                 :1;
        unsigned T1GSS3                 :1;
        unsigned T1GSS4                 :1;
    };
} TMR1GATEbits_t;
extern volatile TMR1GATEbits_t TMR1GATEbits __at(0x3FB4);
// bitfield macros
#define _TMR1GATE_GSS_POSN                                  0x0
#define _TMR1GATE_GSS_POSITION                              0x0
#define _TMR1GATE_GSS_SIZE                                  0x8
#define _TMR1GATE_GSS_LENGTH                                0x8
#define _TMR1GATE_GSS_MASK                                  0xFF
#define _TMR1GATE_GSS0_POSN                                 0x0
#define _TMR1GATE_GSS0_POSITION                             0x0
#define _TMR1GATE_GSS0_SIZE                                 0x1
#define _TMR1GATE_GSS0_LENGTH                               0x1
#define _TMR1GATE_GSS0_MASK                                 0x1
#define _TMR1GATE_GSS1_POSN                                 0x1
#define _TMR1GATE_GSS1_POSITION                             0x1
#define _TMR1GATE_GSS1_SIZE                                 0x1
#define _TMR1GATE_GSS1_LENGTH                               0x1
#define _TMR1GATE_GSS1_MASK                                 0x2
#define _TMR1GATE_GSS2_POSN                                 0x2
#define _TMR1GATE_GSS2_POSITION                             0x2
#define _TMR1GATE_GSS2_SIZE                                 0x1
#define _TMR1GATE_GSS2_LENGTH                               0x1
#define _TMR1GATE_GSS2_MASK                                 0x4
#define _TMR1GATE_GSS3_POSN                                 0x3
#define _TMR1GATE_GSS3_POSITION                             0x3
#define _TMR1GATE_GSS3_SIZE                                 0x1
#define _TMR1GATE_GSS3_LENGTH                               0x1
#define _TMR1GATE_GSS3_MASK                                 0x8
#define _TMR1GATE_GSS4_POSN                                 0x4
#define _TMR1GATE_GSS4_POSITION                             0x4
#define _TMR1GATE_GSS4_SIZE                                 0x1
#define _TMR1GATE_GSS4_LENGTH                               0x1
#define _TMR1GATE_GSS4_MASK                                 0x10
#define _TMR1GATE_T1GSS0_POSN                               0x0
#define _TMR1GATE_T1GSS0_POSITION                           0x0
#define _TMR1GATE_T1GSS0_SIZE                               0x1
#define _TMR1GATE_T1GSS0_LENGTH                             0x1
#define _TMR1GATE_T1GSS0_MASK                               0x1
#define _TMR1GATE_T1GSS1_POSN                               0x1
#define _TMR1GATE_T1GSS1_POSITION                           0x1
#define _TMR1GATE_T1GSS1_SIZE                               0x1
#define _TMR1GATE_T1GSS1_LENGTH                             0x1
#define _TMR1GATE_T1GSS1_MASK                               0x2
#define _TMR1GATE_T1GSS2_POSN                               0x2
#define _TMR1GATE_T1GSS2_POSITION                           0x2
#define _TMR1GATE_T1GSS2_SIZE                               0x1
#define _TMR1GATE_T1GSS2_LENGTH                             0x1
#define _TMR1GATE_T1GSS2_MASK                               0x4
#define _TMR1GATE_T1GSS3_POSN                               0x3
#define _TMR1GATE_T1GSS3_POSITION                           0x3
#define _TMR1GATE_T1GSS3_SIZE                               0x1
#define _TMR1GATE_T1GSS3_LENGTH                             0x1
#define _TMR1GATE_T1GSS3_MASK                               0x8
#define _TMR1GATE_T1GSS4_POSN                               0x4
#define _TMR1GATE_T1GSS4_POSITION                           0x4
#define _TMR1GATE_T1GSS4_SIZE                               0x1
#define _TMR1GATE_T1GSS4_LENGTH                             0x1
#define _TMR1GATE_T1GSS4_MASK                               0x10

// Register: T1CLK
#define T1CLK T1CLK
extern volatile unsigned char           T1CLK               __at(0x3FB5);
#ifndef _LIB_BUILD
asm("T1CLK equ 03FB5h");
#endif
// aliases
extern volatile unsigned char           TMR1CLK             __at(0x3FB5);
#ifndef _LIB_BUILD
asm("TMR1CLK equ 03FB5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CS                     :8;
    };
    struct {
        unsigned T1CS0                  :1;
        unsigned T1CS1                  :1;
        unsigned T1CS2                  :1;
        unsigned T1CS3                  :1;
        unsigned T1CS4                  :1;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
        unsigned CS4                    :1;
    };
} T1CLKbits_t;
extern volatile T1CLKbits_t T1CLKbits __at(0x3FB5);
// bitfield macros
#define _T1CLK_CS_POSN                                      0x0
#define _T1CLK_CS_POSITION                                  0x0
#define _T1CLK_CS_SIZE                                      0x8
#define _T1CLK_CS_LENGTH                                    0x8
#define _T1CLK_CS_MASK                                      0xFF
#define _T1CLK_T1CS0_POSN                                   0x0
#define _T1CLK_T1CS0_POSITION                               0x0
#define _T1CLK_T1CS0_SIZE                                   0x1
#define _T1CLK_T1CS0_LENGTH                                 0x1
#define _T1CLK_T1CS0_MASK                                   0x1
#define _T1CLK_T1CS1_POSN                                   0x1
#define _T1CLK_T1CS1_POSITION                               0x1
#define _T1CLK_T1CS1_SIZE                                   0x1
#define _T1CLK_T1CS1_LENGTH                                 0x1
#define _T1CLK_T1CS1_MASK                                   0x2
#define _T1CLK_T1CS2_POSN                                   0x2
#define _T1CLK_T1CS2_POSITION                               0x2
#define _T1CLK_T1CS2_SIZE                                   0x1
#define _T1CLK_T1CS2_LENGTH                                 0x1
#define _T1CLK_T1CS2_MASK                                   0x4
#define _T1CLK_T1CS3_POSN                                   0x3
#define _T1CLK_T1CS3_POSITION                               0x3
#define _T1CLK_T1CS3_SIZE                                   0x1
#define _T1CLK_T1CS3_LENGTH                                 0x1
#define _T1CLK_T1CS3_MASK                                   0x8
#define _T1CLK_T1CS4_POSN                                   0x4
#define _T1CLK_T1CS4_POSITION                               0x4
#define _T1CLK_T1CS4_SIZE                                   0x1
#define _T1CLK_T1CS4_LENGTH                                 0x1
#define _T1CLK_T1CS4_MASK                                   0x10
#define _T1CLK_CS0_POSN                                     0x0
#define _T1CLK_CS0_POSITION                                 0x0
#define _T1CLK_CS0_SIZE                                     0x1
#define _T1CLK_CS0_LENGTH                                   0x1
#define _T1CLK_CS0_MASK                                     0x1
#define _T1CLK_CS1_POSN                                     0x1
#define _T1CLK_CS1_POSITION                                 0x1
#define _T1CLK_CS1_SIZE                                     0x1
#define _T1CLK_CS1_LENGTH                                   0x1
#define _T1CLK_CS1_MASK                                     0x2
#define _T1CLK_CS2_POSN                                     0x2
#define _T1CLK_CS2_POSITION                                 0x2
#define _T1CLK_CS2_SIZE                                     0x1
#define _T1CLK_CS2_LENGTH                                   0x1
#define _T1CLK_CS2_MASK                                     0x4
#define _T1CLK_CS3_POSN                                     0x3
#define _T1CLK_CS3_POSITION                                 0x3
#define _T1CLK_CS3_SIZE                                     0x1
#define _T1CLK_CS3_LENGTH                                   0x1
#define _T1CLK_CS3_MASK                                     0x8
#define _T1CLK_CS4_POSN                                     0x4
#define _T1CLK_CS4_POSITION                                 0x4
#define _T1CLK_CS4_SIZE                                     0x1
#define _T1CLK_CS4_LENGTH                                   0x1
#define _T1CLK_CS4_MASK                                     0x10
// alias bitfield definitions
typedef union {
    struct {
        unsigned CS                     :8;
    };
    struct {
        unsigned T1CS0                  :1;
        unsigned T1CS1                  :1;
        unsigned T1CS2                  :1;
        unsigned T1CS3                  :1;
        unsigned T1CS4                  :1;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
        unsigned CS4                    :1;
    };
} TMR1CLKbits_t;
extern volatile TMR1CLKbits_t TMR1CLKbits __at(0x3FB5);
// bitfield macros
#define _TMR1CLK_CS_POSN                                    0x0
#define _TMR1CLK_CS_POSITION                                0x0
#define _TMR1CLK_CS_SIZE                                    0x8
#define _TMR1CLK_CS_LENGTH                                  0x8
#define _TMR1CLK_CS_MASK                                    0xFF
#define _TMR1CLK_T1CS0_POSN                                 0x0
#define _TMR1CLK_T1CS0_POSITION                             0x0
#define _TMR1CLK_T1CS0_SIZE                                 0x1
#define _TMR1CLK_T1CS0_LENGTH                               0x1
#define _TMR1CLK_T1CS0_MASK                                 0x1
#define _TMR1CLK_T1CS1_POSN                                 0x1
#define _TMR1CLK_T1CS1_POSITION                             0x1
#define _TMR1CLK_T1CS1_SIZE                                 0x1
#define _TMR1CLK_T1CS1_LENGTH                               0x1
#define _TMR1CLK_T1CS1_MASK                                 0x2
#define _TMR1CLK_T1CS2_POSN                                 0x2
#define _TMR1CLK_T1CS2_POSITION                             0x2
#define _TMR1CLK_T1CS2_SIZE                                 0x1
#define _TMR1CLK_T1CS2_LENGTH                               0x1
#define _TMR1CLK_T1CS2_MASK                                 0x4
#define _TMR1CLK_T1CS3_POSN                                 0x3
#define _TMR1CLK_T1CS3_POSITION                             0x3
#define _TMR1CLK_T1CS3_SIZE                                 0x1
#define _TMR1CLK_T1CS3_LENGTH                               0x1
#define _TMR1CLK_T1CS3_MASK                                 0x8
#define _TMR1CLK_T1CS4_POSN                                 0x4
#define _TMR1CLK_T1CS4_POSITION                             0x4
#define _TMR1CLK_T1CS4_SIZE                                 0x1
#define _TMR1CLK_T1CS4_LENGTH                               0x1
#define _TMR1CLK_T1CS4_MASK                                 0x10
#define _TMR1CLK_CS0_POSN                                   0x0
#define _TMR1CLK_CS0_POSITION                               0x0
#define _TMR1CLK_CS0_SIZE                                   0x1
#define _TMR1CLK_CS0_LENGTH                                 0x1
#define _TMR1CLK_CS0_MASK                                   0x1
#define _TMR1CLK_CS1_POSN                                   0x1
#define _TMR1CLK_CS1_POSITION                               0x1
#define _TMR1CLK_CS1_SIZE                                   0x1
#define _TMR1CLK_CS1_LENGTH                                 0x1
#define _TMR1CLK_CS1_MASK                                   0x2
#define _TMR1CLK_CS2_POSN                                   0x2
#define _TMR1CLK_CS2_POSITION                               0x2
#define _TMR1CLK_CS2_SIZE                                   0x1
#define _TMR1CLK_CS2_LENGTH                                 0x1
#define _TMR1CLK_CS2_MASK                                   0x4
#define _TMR1CLK_CS3_POSN                                   0x3
#define _TMR1CLK_CS3_POSITION                               0x3
#define _TMR1CLK_CS3_SIZE                                   0x1
#define _TMR1CLK_CS3_LENGTH                                 0x1
#define _TMR1CLK_CS3_MASK                                   0x8
#define _TMR1CLK_CS4_POSN                                   0x4
#define _TMR1CLK_CS4_POSITION                               0x4
#define _TMR1CLK_CS4_SIZE                                   0x1
#define _TMR1CLK_CS4_LENGTH                                 0x1
#define _TMR1CLK_CS4_MASK                                   0x10

// Register: TMR0L
#define TMR0L TMR0L
extern volatile unsigned char           TMR0L               __at(0x3FB6);
#ifndef _LIB_BUILD
asm("TMR0L equ 03FB6h");
#endif
// aliases
extern volatile unsigned char           TMR0                __at(0x3FB6);
#ifndef _LIB_BUILD
asm("TMR0 equ 03FB6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR0L                  :8;
    };
    struct {
        unsigned TMR0L0                 :1;
        unsigned TMR0L1                 :1;
        unsigned TMR0L2                 :1;
        unsigned TMR0L3                 :1;
        unsigned TMR0L4                 :1;
        unsigned TMR0L5                 :1;
        unsigned TMR0L6                 :1;
        unsigned TMR0L7                 :1;
    };
} TMR0Lbits_t;
extern volatile TMR0Lbits_t TMR0Lbits __at(0x3FB6);
// bitfield macros
#define _TMR0L_TMR0L_POSN                                   0x0
#define _TMR0L_TMR0L_POSITION                               0x0
#define _TMR0L_TMR0L_SIZE                                   0x8
#define _TMR0L_TMR0L_LENGTH                                 0x8
#define _TMR0L_TMR0L_MASK                                   0xFF
#define _TMR0L_TMR0L0_POSN                                  0x0
#define _TMR0L_TMR0L0_POSITION                              0x0
#define _TMR0L_TMR0L0_SIZE                                  0x1
#define _TMR0L_TMR0L0_LENGTH                                0x1
#define _TMR0L_TMR0L0_MASK                                  0x1
#define _TMR0L_TMR0L1_POSN                                  0x1
#define _TMR0L_TMR0L1_POSITION                              0x1
#define _TMR0L_TMR0L1_SIZE                                  0x1
#define _TMR0L_TMR0L1_LENGTH                                0x1
#define _TMR0L_TMR0L1_MASK                                  0x2
#define _TMR0L_TMR0L2_POSN                                  0x2
#define _TMR0L_TMR0L2_POSITION                              0x2
#define _TMR0L_TMR0L2_SIZE                                  0x1
#define _TMR0L_TMR0L2_LENGTH                                0x1
#define _TMR0L_TMR0L2_MASK                                  0x4
#define _TMR0L_TMR0L3_POSN                                  0x3
#define _TMR0L_TMR0L3_POSITION                              0x3
#define _TMR0L_TMR0L3_SIZE                                  0x1
#define _TMR0L_TMR0L3_LENGTH                                0x1
#define _TMR0L_TMR0L3_MASK                                  0x8
#define _TMR0L_TMR0L4_POSN                                  0x4
#define _TMR0L_TMR0L4_POSITION                              0x4
#define _TMR0L_TMR0L4_SIZE                                  0x1
#define _TMR0L_TMR0L4_LENGTH                                0x1
#define _TMR0L_TMR0L4_MASK                                  0x10
#define _TMR0L_TMR0L5_POSN                                  0x5
#define _TMR0L_TMR0L5_POSITION                              0x5
#define _TMR0L_TMR0L5_SIZE                                  0x1
#define _TMR0L_TMR0L5_LENGTH                                0x1
#define _TMR0L_TMR0L5_MASK                                  0x20
#define _TMR0L_TMR0L6_POSN                                  0x6
#define _TMR0L_TMR0L6_POSITION                              0x6
#define _TMR0L_TMR0L6_SIZE                                  0x1
#define _TMR0L_TMR0L6_LENGTH                                0x1
#define _TMR0L_TMR0L6_MASK                                  0x40
#define _TMR0L_TMR0L7_POSN                                  0x7
#define _TMR0L_TMR0L7_POSITION                              0x7
#define _TMR0L_TMR0L7_SIZE                                  0x1
#define _TMR0L_TMR0L7_LENGTH                                0x1
#define _TMR0L_TMR0L7_MASK                                  0x80
// alias bitfield definitions
typedef union {
    struct {
        unsigned TMR0L                  :8;
    };
    struct {
        unsigned TMR0L0                 :1;
        unsigned TMR0L1                 :1;
        unsigned TMR0L2                 :1;
        unsigned TMR0L3                 :1;
        unsigned TMR0L4                 :1;
        unsigned TMR0L5                 :1;
        unsigned TMR0L6                 :1;
        unsigned TMR0L7                 :1;
    };
} TMR0bits_t;
extern volatile TMR0bits_t TMR0bits __at(0x3FB6);
// bitfield macros
#define _TMR0_TMR0L_POSN                                    0x0
#define _TMR0_TMR0L_POSITION                                0x0
#define _TMR0_TMR0L_SIZE                                    0x8
#define _TMR0_TMR0L_LENGTH                                  0x8
#define _TMR0_TMR0L_MASK                                    0xFF
#define _TMR0_TMR0L0_POSN                                   0x0
#define _TMR0_TMR0L0_POSITION                               0x0
#define _TMR0_TMR0L0_SIZE                                   0x1
#define _TMR0_TMR0L0_LENGTH                                 0x1
#define _TMR0_TMR0L0_MASK                                   0x1
#define _TMR0_TMR0L1_POSN                                   0x1
#define _TMR0_TMR0L1_POSITION                               0x1
#define _TMR0_TMR0L1_SIZE                                   0x1
#define _TMR0_TMR0L1_LENGTH                                 0x1
#define _TMR0_TMR0L1_MASK                                   0x2
#define _TMR0_TMR0L2_POSN                                   0x2
#define _TMR0_TMR0L2_POSITION                               0x2
#define _TMR0_TMR0L2_SIZE                                   0x1
#define _TMR0_TMR0L2_LENGTH                                 0x1
#define _TMR0_TMR0L2_MASK                                   0x4
#define _TMR0_TMR0L3_POSN                                   0x3
#define _TMR0_TMR0L3_POSITION                               0x3
#define _TMR0_TMR0L3_SIZE                                   0x1
#define _TMR0_TMR0L3_LENGTH                                 0x1
#define _TMR0_TMR0L3_MASK                                   0x8
#define _TMR0_TMR0L4_POSN                                   0x4
#define _TMR0_TMR0L4_POSITION                               0x4
#define _TMR0_TMR0L4_SIZE                                   0x1
#define _TMR0_TMR0L4_LENGTH                                 0x1
#define _TMR0_TMR0L4_MASK                                   0x10
#define _TMR0_TMR0L5_POSN                                   0x5
#define _TMR0_TMR0L5_POSITION                               0x5
#define _TMR0_TMR0L5_SIZE                                   0x1
#define _TMR0_TMR0L5_LENGTH                                 0x1
#define _TMR0_TMR0L5_MASK                                   0x20
#define _TMR0_TMR0L6_POSN                                   0x6
#define _TMR0_TMR0L6_POSITION                               0x6
#define _TMR0_TMR0L6_SIZE                                   0x1
#define _TMR0_TMR0L6_LENGTH                                 0x1
#define _TMR0_TMR0L6_MASK                                   0x40
#define _TMR0_TMR0L7_POSN                                   0x7
#define _TMR0_TMR0L7_POSITION                               0x7
#define _TMR0_TMR0L7_SIZE                                   0x1
#define _TMR0_TMR0L7_LENGTH                                 0x1
#define _TMR0_TMR0L7_MASK                                   0x80

// Register: TMR0H
#define TMR0H TMR0H
extern volatile unsigned char           TMR0H               __at(0x3FB7);
#ifndef _LIB_BUILD
asm("TMR0H equ 03FB7h");
#endif
// aliases
extern volatile unsigned char           PR0                 __at(0x3FB7);
#ifndef _LIB_BUILD
asm("PR0 equ 03FB7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR0H                  :8;
    };
    struct {
        unsigned TMR0H0                 :1;
        unsigned TMR0H1                 :1;
        unsigned TMR0H2                 :1;
        unsigned TMR0H3                 :1;
        unsigned TMR0H4                 :1;
        unsigned TMR0H5                 :1;
        unsigned TMR0H6                 :1;
        unsigned TMR0H7                 :1;
    };
    struct {
        unsigned T0PR0                  :1;
        unsigned T0PR1                  :1;
        unsigned T0PR2                  :1;
        unsigned T0PR3                  :1;
        unsigned T0PR4                  :1;
        unsigned T0PR5                  :1;
        unsigned T0PR6                  :1;
        unsigned T0PR7                  :1;
    };
    struct {
        unsigned T0PR                   :8;
    };
} TMR0Hbits_t;
extern volatile TMR0Hbits_t TMR0Hbits __at(0x3FB7);
// bitfield macros
#define _TMR0H_TMR0H_POSN                                   0x0
#define _TMR0H_TMR0H_POSITION                               0x0
#define _TMR0H_TMR0H_SIZE                                   0x8
#define _TMR0H_TMR0H_LENGTH                                 0x8
#define _TMR0H_TMR0H_MASK                                   0xFF
#define _TMR0H_TMR0H0_POSN                                  0x0
#define _TMR0H_TMR0H0_POSITION                              0x0
#define _TMR0H_TMR0H0_SIZE                                  0x1
#define _TMR0H_TMR0H0_LENGTH                                0x1
#define _TMR0H_TMR0H0_MASK                                  0x1
#define _TMR0H_TMR0H1_POSN                                  0x1
#define _TMR0H_TMR0H1_POSITION                              0x1
#define _TMR0H_TMR0H1_SIZE                                  0x1
#define _TMR0H_TMR0H1_LENGTH                                0x1
#define _TMR0H_TMR0H1_MASK                                  0x2
#define _TMR0H_TMR0H2_POSN                                  0x2
#define _TMR0H_TMR0H2_POSITION                              0x2
#define _TMR0H_TMR0H2_SIZE                                  0x1
#define _TMR0H_TMR0H2_LENGTH                                0x1
#define _TMR0H_TMR0H2_MASK                                  0x4
#define _TMR0H_TMR0H3_POSN                                  0x3
#define _TMR0H_TMR0H3_POSITION                              0x3
#define _TMR0H_TMR0H3_SIZE                                  0x1
#define _TMR0H_TMR0H3_LENGTH                                0x1
#define _TMR0H_TMR0H3_MASK                                  0x8
#define _TMR0H_TMR0H4_POSN                                  0x4
#define _TMR0H_TMR0H4_POSITION                              0x4
#define _TMR0H_TMR0H4_SIZE                                  0x1
#define _TMR0H_TMR0H4_LENGTH                                0x1
#define _TMR0H_TMR0H4_MASK                                  0x10
#define _TMR0H_TMR0H5_POSN                                  0x5
#define _TMR0H_TMR0H5_POSITION                              0x5
#define _TMR0H_TMR0H5_SIZE                                  0x1
#define _TMR0H_TMR0H5_LENGTH                                0x1
#define _TMR0H_TMR0H5_MASK                                  0x20
#define _TMR0H_TMR0H6_POSN                                  0x6
#define _TMR0H_TMR0H6_POSITION                              0x6
#define _TMR0H_TMR0H6_SIZE                                  0x1
#define _TMR0H_TMR0H6_LENGTH                                0x1
#define _TMR0H_TMR0H6_MASK                                  0x40
#define _TMR0H_TMR0H7_POSN                                  0x7
#define _TMR0H_TMR0H7_POSITION                              0x7
#define _TMR0H_TMR0H7_SIZE                                  0x1
#define _TMR0H_TMR0H7_LENGTH                                0x1
#define _TMR0H_TMR0H7_MASK                                  0x80
#define _TMR0H_T0PR0_POSN                                   0x0
#define _TMR0H_T0PR0_POSITION                               0x0
#define _TMR0H_T0PR0_SIZE                                   0x1
#define _TMR0H_T0PR0_LENGTH                                 0x1
#define _TMR0H_T0PR0_MASK                                   0x1
#define _TMR0H_T0PR1_POSN                                   0x1
#define _TMR0H_T0PR1_POSITION                               0x1
#define _TMR0H_T0PR1_SIZE                                   0x1
#define _TMR0H_T0PR1_LENGTH                                 0x1
#define _TMR0H_T0PR1_MASK                                   0x2
#define _TMR0H_T0PR2_POSN                                   0x2
#define _TMR0H_T0PR2_POSITION                               0x2
#define _TMR0H_T0PR2_SIZE                                   0x1
#define _TMR0H_T0PR2_LENGTH                                 0x1
#define _TMR0H_T0PR2_MASK                                   0x4
#define _TMR0H_T0PR3_POSN                                   0x3
#define _TMR0H_T0PR3_POSITION                               0x3
#define _TMR0H_T0PR3_SIZE                                   0x1
#define _TMR0H_T0PR3_LENGTH                                 0x1
#define _TMR0H_T0PR3_MASK                                   0x8
#define _TMR0H_T0PR4_POSN                                   0x4
#define _TMR0H_T0PR4_POSITION                               0x4
#define _TMR0H_T0PR4_SIZE                                   0x1
#define _TMR0H_T0PR4_LENGTH                                 0x1
#define _TMR0H_T0PR4_MASK                                   0x10
#define _TMR0H_T0PR5_POSN                                   0x5
#define _TMR0H_T0PR5_POSITION                               0x5
#define _TMR0H_T0PR5_SIZE                                   0x1
#define _TMR0H_T0PR5_LENGTH                                 0x1
#define _TMR0H_T0PR5_MASK                                   0x20
#define _TMR0H_T0PR6_POSN                                   0x6
#define _TMR0H_T0PR6_POSITION                               0x6
#define _TMR0H_T0PR6_SIZE                                   0x1
#define _TMR0H_T0PR6_LENGTH                                 0x1
#define _TMR0H_T0PR6_MASK                                   0x40
#define _TMR0H_T0PR7_POSN                                   0x7
#define _TMR0H_T0PR7_POSITION                               0x7
#define _TMR0H_T0PR7_SIZE                                   0x1
#define _TMR0H_T0PR7_LENGTH                                 0x1
#define _TMR0H_T0PR7_MASK                                   0x80
#define _TMR0H_T0PR_POSN                                    0x0
#define _TMR0H_T0PR_POSITION                                0x0
#define _TMR0H_T0PR_SIZE                                    0x8
#define _TMR0H_T0PR_LENGTH                                  0x8
#define _TMR0H_T0PR_MASK                                    0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned TMR0H                  :8;
    };
    struct {
        unsigned TMR0H0                 :1;
        unsigned TMR0H1                 :1;
        unsigned TMR0H2                 :1;
        unsigned TMR0H3                 :1;
        unsigned TMR0H4                 :1;
        unsigned TMR0H5                 :1;
        unsigned TMR0H6                 :1;
        unsigned TMR0H7                 :1;
    };
    struct {
        unsigned T0PR0                  :1;
        unsigned T0PR1                  :1;
        unsigned T0PR2                  :1;
        unsigned T0PR3                  :1;
        unsigned T0PR4                  :1;
        unsigned T0PR5                  :1;
        unsigned T0PR6                  :1;
        unsigned T0PR7                  :1;
    };
    struct {
        unsigned T0PR                   :8;
    };
} PR0bits_t;
extern volatile PR0bits_t PR0bits __at(0x3FB7);
// bitfield macros
#define _PR0_TMR0H_POSN                                     0x0
#define _PR0_TMR0H_POSITION                                 0x0
#define _PR0_TMR0H_SIZE                                     0x8
#define _PR0_TMR0H_LENGTH                                   0x8
#define _PR0_TMR0H_MASK                                     0xFF
#define _PR0_TMR0H0_POSN                                    0x0
#define _PR0_TMR0H0_POSITION                                0x0
#define _PR0_TMR0H0_SIZE                                    0x1
#define _PR0_TMR0H0_LENGTH                                  0x1
#define _PR0_TMR0H0_MASK                                    0x1
#define _PR0_TMR0H1_POSN                                    0x1
#define _PR0_TMR0H1_POSITION                                0x1
#define _PR0_TMR0H1_SIZE                                    0x1
#define _PR0_TMR0H1_LENGTH                                  0x1
#define _PR0_TMR0H1_MASK                                    0x2
#define _PR0_TMR0H2_POSN                                    0x2
#define _PR0_TMR0H2_POSITION                                0x2
#define _PR0_TMR0H2_SIZE                                    0x1
#define _PR0_TMR0H2_LENGTH                                  0x1
#define _PR0_TMR0H2_MASK                                    0x4
#define _PR0_TMR0H3_POSN                                    0x3
#define _PR0_TMR0H3_POSITION                                0x3
#define _PR0_TMR0H3_SIZE                                    0x1
#define _PR0_TMR0H3_LENGTH                                  0x1
#define _PR0_TMR0H3_MASK                                    0x8
#define _PR0_TMR0H4_POSN                                    0x4
#define _PR0_TMR0H4_POSITION                                0x4
#define _PR0_TMR0H4_SIZE                                    0x1
#define _PR0_TMR0H4_LENGTH                                  0x1
#define _PR0_TMR0H4_MASK                                    0x10
#define _PR0_TMR0H5_POSN                                    0x5
#define _PR0_TMR0H5_POSITION                                0x5
#define _PR0_TMR0H5_SIZE                                    0x1
#define _PR0_TMR0H5_LENGTH                                  0x1
#define _PR0_TMR0H5_MASK                                    0x20
#define _PR0_TMR0H6_POSN                                    0x6
#define _PR0_TMR0H6_POSITION                                0x6
#define _PR0_TMR0H6_SIZE                                    0x1
#define _PR0_TMR0H6_LENGTH                                  0x1
#define _PR0_TMR0H6_MASK                                    0x40
#define _PR0_TMR0H7_POSN                                    0x7
#define _PR0_TMR0H7_POSITION                                0x7
#define _PR0_TMR0H7_SIZE                                    0x1
#define _PR0_TMR0H7_LENGTH                                  0x1
#define _PR0_TMR0H7_MASK                                    0x80
#define _PR0_T0PR0_POSN                                     0x0
#define _PR0_T0PR0_POSITION                                 0x0
#define _PR0_T0PR0_SIZE                                     0x1
#define _PR0_T0PR0_LENGTH                                   0x1
#define _PR0_T0PR0_MASK                                     0x1
#define _PR0_T0PR1_POSN                                     0x1
#define _PR0_T0PR1_POSITION                                 0x1
#define _PR0_T0PR1_SIZE                                     0x1
#define _PR0_T0PR1_LENGTH                                   0x1
#define _PR0_T0PR1_MASK                                     0x2
#define _PR0_T0PR2_POSN                                     0x2
#define _PR0_T0PR2_POSITION                                 0x2
#define _PR0_T0PR2_SIZE                                     0x1
#define _PR0_T0PR2_LENGTH                                   0x1
#define _PR0_T0PR2_MASK                                     0x4
#define _PR0_T0PR3_POSN                                     0x3
#define _PR0_T0PR3_POSITION                                 0x3
#define _PR0_T0PR3_SIZE                                     0x1
#define _PR0_T0PR3_LENGTH                                   0x1
#define _PR0_T0PR3_MASK                                     0x8
#define _PR0_T0PR4_POSN                                     0x4
#define _PR0_T0PR4_POSITION                                 0x4
#define _PR0_T0PR4_SIZE                                     0x1
#define _PR0_T0PR4_LENGTH                                   0x1
#define _PR0_T0PR4_MASK                                     0x10
#define _PR0_T0PR5_POSN                                     0x5
#define _PR0_T0PR5_POSITION                                 0x5
#define _PR0_T0PR5_SIZE                                     0x1
#define _PR0_T0PR5_LENGTH                                   0x1
#define _PR0_T0PR5_MASK                                     0x20
#define _PR0_T0PR6_POSN                                     0x6
#define _PR0_T0PR6_POSITION                                 0x6
#define _PR0_T0PR6_SIZE                                     0x1
#define _PR0_T0PR6_LENGTH                                   0x1
#define _PR0_T0PR6_MASK                                     0x40
#define _PR0_T0PR7_POSN                                     0x7
#define _PR0_T0PR7_POSITION                                 0x7
#define _PR0_T0PR7_SIZE                                     0x1
#define _PR0_T0PR7_LENGTH                                   0x1
#define _PR0_T0PR7_MASK                                     0x80
#define _PR0_T0PR_POSN                                      0x0
#define _PR0_T0PR_POSITION                                  0x0
#define _PR0_T0PR_SIZE                                      0x8
#define _PR0_T0PR_LENGTH                                    0x8
#define _PR0_T0PR_MASK                                      0xFF

// Register: T0CON0
#define T0CON0 T0CON0
extern volatile unsigned char           T0CON0              __at(0x3FB8);
#ifndef _LIB_BUILD
asm("T0CON0 equ 03FB8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned OUTPS                  :4;
        unsigned MD16                   :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned T0OUTPS                :4;
        unsigned T0MD16                 :1;
        unsigned T0OUT                  :1;
        unsigned                        :1;
        unsigned T0EN                   :1;
    };
    struct {
        unsigned OUTPS0                 :1;
        unsigned OUTPS1                 :1;
        unsigned OUTPS2                 :1;
        unsigned OUTPS3                 :1;
        unsigned T016BIT                :1;
    };
} T0CON0bits_t;
extern volatile T0CON0bits_t T0CON0bits __at(0x3FB8);
// bitfield macros
#define _T0CON0_OUTPS_POSN                                  0x0
#define _T0CON0_OUTPS_POSITION                              0x0
#define _T0CON0_OUTPS_SIZE                                  0x4
#define _T0CON0_OUTPS_LENGTH                                0x4
#define _T0CON0_OUTPS_MASK                                  0xF
#define _T0CON0_MD16_POSN                                   0x4
#define _T0CON0_MD16_POSITION                               0x4
#define _T0CON0_MD16_SIZE                                   0x1
#define _T0CON0_MD16_LENGTH                                 0x1
#define _T0CON0_MD16_MASK                                   0x10
#define _T0CON0_OUT_POSN                                    0x5
#define _T0CON0_OUT_POSITION                                0x5
#define _T0CON0_OUT_SIZE                                    0x1
#define _T0CON0_OUT_LENGTH                                  0x1
#define _T0CON0_OUT_MASK                                    0x20
#define _T0CON0_EN_POSN                                     0x7
#define _T0CON0_EN_POSITION                                 0x7
#define _T0CON0_EN_SIZE                                     0x1
#define _T0CON0_EN_LENGTH                                   0x1
#define _T0CON0_EN_MASK                                     0x80
#define _T0CON0_T0OUTPS_POSN                                0x0
#define _T0CON0_T0OUTPS_POSITION                            0x0
#define _T0CON0_T0OUTPS_SIZE                                0x4
#define _T0CON0_T0OUTPS_LENGTH                              0x4
#define _T0CON0_T0OUTPS_MASK                                0xF
#define _T0CON0_T0MD16_POSN                                 0x4
#define _T0CON0_T0MD16_POSITION                             0x4
#define _T0CON0_T0MD16_SIZE                                 0x1
#define _T0CON0_T0MD16_LENGTH                               0x1
#define _T0CON0_T0MD16_MASK                                 0x10
#define _T0CON0_T0OUT_POSN                                  0x5
#define _T0CON0_T0OUT_POSITION                              0x5
#define _T0CON0_T0OUT_SIZE                                  0x1
#define _T0CON0_T0OUT_LENGTH                                0x1
#define _T0CON0_T0OUT_MASK                                  0x20
#define _T0CON0_T0EN_POSN                                   0x7
#define _T0CON0_T0EN_POSITION                               0x7
#define _T0CON0_T0EN_SIZE                                   0x1
#define _T0CON0_T0EN_LENGTH                                 0x1
#define _T0CON0_T0EN_MASK                                   0x80
#define _T0CON0_OUTPS0_POSN                                 0x0
#define _T0CON0_OUTPS0_POSITION                             0x0
#define _T0CON0_OUTPS0_SIZE                                 0x1
#define _T0CON0_OUTPS0_LENGTH                               0x1
#define _T0CON0_OUTPS0_MASK                                 0x1
#define _T0CON0_OUTPS1_POSN                                 0x1
#define _T0CON0_OUTPS1_POSITION                             0x1
#define _T0CON0_OUTPS1_SIZE                                 0x1
#define _T0CON0_OUTPS1_LENGTH                               0x1
#define _T0CON0_OUTPS1_MASK                                 0x2
#define _T0CON0_OUTPS2_POSN                                 0x2
#define _T0CON0_OUTPS2_POSITION                             0x2
#define _T0CON0_OUTPS2_SIZE                                 0x1
#define _T0CON0_OUTPS2_LENGTH                               0x1
#define _T0CON0_OUTPS2_MASK                                 0x4
#define _T0CON0_OUTPS3_POSN                                 0x3
#define _T0CON0_OUTPS3_POSITION                             0x3
#define _T0CON0_OUTPS3_SIZE                                 0x1
#define _T0CON0_OUTPS3_LENGTH                               0x1
#define _T0CON0_OUTPS3_MASK                                 0x8
#define _T0CON0_T016BIT_POSN                                0x4
#define _T0CON0_T016BIT_POSITION                            0x4
#define _T0CON0_T016BIT_SIZE                                0x1
#define _T0CON0_T016BIT_LENGTH                              0x1
#define _T0CON0_T016BIT_MASK                                0x10

// Register: T0CON1
#define T0CON1 T0CON1
extern volatile unsigned char           T0CON1              __at(0x3FB9);
#ifndef _LIB_BUILD
asm("T0CON1 equ 03FB9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CKPS                   :4;
        unsigned ASYNC                  :1;
        unsigned CS                     :3;
    };
    struct {
        unsigned CKPS0                  :1;
        unsigned CKPS1                  :1;
        unsigned CKPS2                  :1;
        unsigned CKPS3                  :1;
        unsigned T0ASYNC                :1;
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
    };
    struct {
        unsigned T0CKPS                 :4;
        unsigned                        :1;
        unsigned T0CS                   :3;
    };
    struct {
        unsigned T0CKPS0                :1;
        unsigned T0CKPS1                :1;
        unsigned T0CKPS2                :1;
        unsigned T0CKPS3                :1;
        unsigned                        :1;
        unsigned T0CS0                  :1;
        unsigned T0CS1                  :1;
        unsigned T0CS2                  :1;
    };
} T0CON1bits_t;
extern volatile T0CON1bits_t T0CON1bits __at(0x3FB9);
// bitfield macros
#define _T0CON1_CKPS_POSN                                   0x0
#define _T0CON1_CKPS_POSITION                               0x0
#define _T0CON1_CKPS_SIZE                                   0x4
#define _T0CON1_CKPS_LENGTH                                 0x4
#define _T0CON1_CKPS_MASK                                   0xF
#define _T0CON1_ASYNC_POSN                                  0x4
#define _T0CON1_ASYNC_POSITION                              0x4
#define _T0CON1_ASYNC_SIZE                                  0x1
#define _T0CON1_ASYNC_LENGTH                                0x1
#define _T0CON1_ASYNC_MASK                                  0x10
#define _T0CON1_CS_POSN                                     0x5
#define _T0CON1_CS_POSITION                                 0x5
#define _T0CON1_CS_SIZE                                     0x3
#define _T0CON1_CS_LENGTH                                   0x3
#define _T0CON1_CS_MASK                                     0xE0
#define _T0CON1_CKPS0_POSN                                  0x0
#define _T0CON1_CKPS0_POSITION                              0x0
#define _T0CON1_CKPS0_SIZE                                  0x1
#define _T0CON1_CKPS0_LENGTH                                0x1
#define _T0CON1_CKPS0_MASK                                  0x1
#define _T0CON1_CKPS1_POSN                                  0x1
#define _T0CON1_CKPS1_POSITION                              0x1
#define _T0CON1_CKPS1_SIZE                                  0x1
#define _T0CON1_CKPS1_LENGTH                                0x1
#define _T0CON1_CKPS1_MASK                                  0x2
#define _T0CON1_CKPS2_POSN                                  0x2
#define _T0CON1_CKPS2_POSITION                              0x2
#define _T0CON1_CKPS2_SIZE                                  0x1
#define _T0CON1_CKPS2_LENGTH                                0x1
#define _T0CON1_CKPS2_MASK                                  0x4
#define _T0CON1_CKPS3_POSN                                  0x3
#define _T0CON1_CKPS3_POSITION                              0x3
#define _T0CON1_CKPS3_SIZE                                  0x1
#define _T0CON1_CKPS3_LENGTH                                0x1
#define _T0CON1_CKPS3_MASK                                  0x8
#define _T0CON1_T0ASYNC_POSN                                0x4
#define _T0CON1_T0ASYNC_POSITION                            0x4
#define _T0CON1_T0ASYNC_SIZE                                0x1
#define _T0CON1_T0ASYNC_LENGTH                              0x1
#define _T0CON1_T0ASYNC_MASK                                0x10
#define _T0CON1_CS0_POSN                                    0x5
#define _T0CON1_CS0_POSITION                                0x5
#define _T0CON1_CS0_SIZE                                    0x1
#define _T0CON1_CS0_LENGTH                                  0x1
#define _T0CON1_CS0_MASK                                    0x20
#define _T0CON1_CS1_POSN                                    0x6
#define _T0CON1_CS1_POSITION                                0x6
#define _T0CON1_CS1_SIZE                                    0x1
#define _T0CON1_CS1_LENGTH                                  0x1
#define _T0CON1_CS1_MASK                                    0x40
#define _T0CON1_CS2_POSN                                    0x7
#define _T0CON1_CS2_POSITION                                0x7
#define _T0CON1_CS2_SIZE                                    0x1
#define _T0CON1_CS2_LENGTH                                  0x1
#define _T0CON1_CS2_MASK                                    0x80
#define _T0CON1_T0CKPS_POSN                                 0x0
#define _T0CON1_T0CKPS_POSITION                             0x0
#define _T0CON1_T0CKPS_SIZE                                 0x4
#define _T0CON1_T0CKPS_LENGTH                               0x4
#define _T0CON1_T0CKPS_MASK                                 0xF
#define _T0CON1_T0CS_POSN                                   0x5
#define _T0CON1_T0CS_POSITION                               0x5
#define _T0CON1_T0CS_SIZE                                   0x3
#define _T0CON1_T0CS_LENGTH                                 0x3
#define _T0CON1_T0CS_MASK                                   0xE0
#define _T0CON1_T0CKPS0_POSN                                0x0
#define _T0CON1_T0CKPS0_POSITION                            0x0
#define _T0CON1_T0CKPS0_SIZE                                0x1
#define _T0CON1_T0CKPS0_LENGTH                              0x1
#define _T0CON1_T0CKPS0_MASK                                0x1
#define _T0CON1_T0CKPS1_POSN                                0x1
#define _T0CON1_T0CKPS1_POSITION                            0x1
#define _T0CON1_T0CKPS1_SIZE                                0x1
#define _T0CON1_T0CKPS1_LENGTH                              0x1
#define _T0CON1_T0CKPS1_MASK                                0x2
#define _T0CON1_T0CKPS2_POSN                                0x2
#define _T0CON1_T0CKPS2_POSITION                            0x2
#define _T0CON1_T0CKPS2_SIZE                                0x1
#define _T0CON1_T0CKPS2_LENGTH                              0x1
#define _T0CON1_T0CKPS2_MASK                                0x4
#define _T0CON1_T0CKPS3_POSN                                0x3
#define _T0CON1_T0CKPS3_POSITION                            0x3
#define _T0CON1_T0CKPS3_SIZE                                0x1
#define _T0CON1_T0CKPS3_LENGTH                              0x1
#define _T0CON1_T0CKPS3_MASK                                0x8
#define _T0CON1_T0CS0_POSN                                  0x5
#define _T0CON1_T0CS0_POSITION                              0x5
#define _T0CON1_T0CS0_SIZE                                  0x1
#define _T0CON1_T0CS0_LENGTH                                0x1
#define _T0CON1_T0CS0_MASK                                  0x20
#define _T0CON1_T0CS1_POSN                                  0x6
#define _T0CON1_T0CS1_POSITION                              0x6
#define _T0CON1_T0CS1_SIZE                                  0x1
#define _T0CON1_T0CS1_LENGTH                                0x1
#define _T0CON1_T0CS1_MASK                                  0x40
#define _T0CON1_T0CS2_POSN                                  0x7
#define _T0CON1_T0CS2_POSITION                              0x7
#define _T0CON1_T0CS2_SIZE                                  0x1
#define _T0CON1_T0CS2_LENGTH                                0x1
#define _T0CON1_T0CS2_MASK                                  0x80

// Register: LATA
#define LATA LATA
extern volatile unsigned char           LATA                __at(0x3FBA);
#ifndef _LIB_BUILD
asm("LATA equ 03FBAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LATA0                  :1;
        unsigned LATA1                  :1;
        unsigned LATA2                  :1;
        unsigned LATA3                  :1;
        unsigned LATA4                  :1;
        unsigned LATA5                  :1;
        unsigned LATA6                  :1;
        unsigned LATA7                  :1;
    };
    struct {
        unsigned LA0                    :1;
        unsigned LA1                    :1;
        unsigned LA2                    :1;
        unsigned LA3                    :1;
        unsigned LA4                    :1;
        unsigned LA5                    :1;
        unsigned LA6                    :1;
        unsigned LA7                    :1;
    };
} LATAbits_t;
extern volatile LATAbits_t LATAbits __at(0x3FBA);
// bitfield macros
#define _LATA_LATA0_POSN                                    0x0
#define _LATA_LATA0_POSITION                                0x0
#define _LATA_LATA0_SIZE                                    0x1
#define _LATA_LATA0_LENGTH                                  0x1
#define _LATA_LATA0_MASK                                    0x1
#define _LATA_LATA1_POSN                                    0x1
#define _LATA_LATA1_POSITION                                0x1
#define _LATA_LATA1_SIZE                                    0x1
#define _LATA_LATA1_LENGTH                                  0x1
#define _LATA_LATA1_MASK                                    0x2
#define _LATA_LATA2_POSN                                    0x2
#define _LATA_LATA2_POSITION                                0x2
#define _LATA_LATA2_SIZE                                    0x1
#define _LATA_LATA2_LENGTH                                  0x1
#define _LATA_LATA2_MASK                                    0x4
#define _LATA_LATA3_POSN                                    0x3
#define _LATA_LATA3_POSITION                                0x3
#define _LATA_LATA3_SIZE                                    0x1
#define _LATA_LATA3_LENGTH                                  0x1
#define _LATA_LATA3_MASK                                    0x8
#define _LATA_LATA4_POSN                                    0x4
#define _LATA_LATA4_POSITION                                0x4
#define _LATA_LATA4_SIZE                                    0x1
#define _LATA_LATA4_LENGTH                                  0x1
#define _LATA_LATA4_MASK                                    0x10
#define _LATA_LATA5_POSN                                    0x5
#define _LATA_LATA5_POSITION                                0x5
#define _LATA_LATA5_SIZE                                    0x1
#define _LATA_LATA5_LENGTH                                  0x1
#define _LATA_LATA5_MASK                                    0x20
#define _LATA_LATA6_POSN                                    0x6
#define _LATA_LATA6_POSITION                                0x6
#define _LATA_LATA6_SIZE                                    0x1
#define _LATA_LATA6_LENGTH                                  0x1
#define _LATA_LATA6_MASK                                    0x40
#define _LATA_LATA7_POSN                                    0x7
#define _LATA_LATA7_POSITION                                0x7
#define _LATA_LATA7_SIZE                                    0x1
#define _LATA_LATA7_LENGTH                                  0x1
#define _LATA_LATA7_MASK                                    0x80
#define _LATA_LA0_POSN                                      0x0
#define _LATA_LA0_POSITION                                  0x0
#define _LATA_LA0_SIZE                                      0x1
#define _LATA_LA0_LENGTH                                    0x1
#define _LATA_LA0_MASK                                      0x1
#define _LATA_LA1_POSN                                      0x1
#define _LATA_LA1_POSITION                                  0x1
#define _LATA_LA1_SIZE                                      0x1
#define _LATA_LA1_LENGTH                                    0x1
#define _LATA_LA1_MASK                                      0x2
#define _LATA_LA2_POSN                                      0x2
#define _LATA_LA2_POSITION                                  0x2
#define _LATA_LA2_SIZE                                      0x1
#define _LATA_LA2_LENGTH                                    0x1
#define _LATA_LA2_MASK                                      0x4
#define _LATA_LA3_POSN                                      0x3
#define _LATA_LA3_POSITION                                  0x3
#define _LATA_LA3_SIZE                                      0x1
#define _LATA_LA3_LENGTH                                    0x1
#define _LATA_LA3_MASK                                      0x8
#define _LATA_LA4_POSN                                      0x4
#define _LATA_LA4_POSITION                                  0x4
#define _LATA_LA4_SIZE                                      0x1
#define _LATA_LA4_LENGTH                                    0x1
#define _LATA_LA4_MASK                                      0x10
#define _LATA_LA5_POSN                                      0x5
#define _LATA_LA5_POSITION                                  0x5
#define _LATA_LA5_SIZE                                      0x1
#define _LATA_LA5_LENGTH                                    0x1
#define _LATA_LA5_MASK                                      0x20
#define _LATA_LA6_POSN                                      0x6
#define _LATA_LA6_POSITION                                  0x6
#define _LATA_LA6_SIZE                                      0x1
#define _LATA_LA6_LENGTH                                    0x1
#define _LATA_LA6_MASK                                      0x40
#define _LATA_LA7_POSN                                      0x7
#define _LATA_LA7_POSITION                                  0x7
#define _LATA_LA7_SIZE                                      0x1
#define _LATA_LA7_LENGTH                                    0x1
#define _LATA_LA7_MASK                                      0x80

// Register: LATB
#define LATB LATB
extern volatile unsigned char           LATB                __at(0x3FBB);
#ifndef _LIB_BUILD
asm("LATB equ 03FBBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LATB0                  :1;
        unsigned LATB1                  :1;
        unsigned LATB2                  :1;
        unsigned LATB3                  :1;
        unsigned LATB4                  :1;
        unsigned LATB5                  :1;
        unsigned LATB6                  :1;
        unsigned LATB7                  :1;
    };
    struct {
        unsigned LB0                    :1;
        unsigned LB1                    :1;
        unsigned LB2                    :1;
        unsigned LB3                    :1;
        unsigned LB4                    :1;
        unsigned LB5                    :1;
        unsigned LB6                    :1;
        unsigned LB7                    :1;
    };
} LATBbits_t;
extern volatile LATBbits_t LATBbits __at(0x3FBB);
// bitfield macros
#define _LATB_LATB0_POSN                                    0x0
#define _LATB_LATB0_POSITION                                0x0
#define _LATB_LATB0_SIZE                                    0x1
#define _LATB_LATB0_LENGTH                                  0x1
#define _LATB_LATB0_MASK                                    0x1
#define _LATB_LATB1_POSN                                    0x1
#define _LATB_LATB1_POSITION                                0x1
#define _LATB_LATB1_SIZE                                    0x1
#define _LATB_LATB1_LENGTH                                  0x1
#define _LATB_LATB1_MASK                                    0x2
#define _LATB_LATB2_POSN                                    0x2
#define _LATB_LATB2_POSITION                                0x2
#define _LATB_LATB2_SIZE                                    0x1
#define _LATB_LATB2_LENGTH                                  0x1
#define _LATB_LATB2_MASK                                    0x4
#define _LATB_LATB3_POSN                                    0x3
#define _LATB_LATB3_POSITION                                0x3
#define _LATB_LATB3_SIZE                                    0x1
#define _LATB_LATB3_LENGTH                                  0x1
#define _LATB_LATB3_MASK                                    0x8
#define _LATB_LATB4_POSN                                    0x4
#define _LATB_LATB4_POSITION                                0x4
#define _LATB_LATB4_SIZE                                    0x1
#define _LATB_LATB4_LENGTH                                  0x1
#define _LATB_LATB4_MASK                                    0x10
#define _LATB_LATB5_POSN                                    0x5
#define _LATB_LATB5_POSITION                                0x5
#define _LATB_LATB5_SIZE                                    0x1
#define _LATB_LATB5_LENGTH                                  0x1
#define _LATB_LATB5_MASK                                    0x20
#define _LATB_LATB6_POSN                                    0x6
#define _LATB_LATB6_POSITION                                0x6
#define _LATB_LATB6_SIZE                                    0x1
#define _LATB_LATB6_LENGTH                                  0x1
#define _LATB_LATB6_MASK                                    0x40
#define _LATB_LATB7_POSN                                    0x7
#define _LATB_LATB7_POSITION                                0x7
#define _LATB_LATB7_SIZE                                    0x1
#define _LATB_LATB7_LENGTH                                  0x1
#define _LATB_LATB7_MASK                                    0x80
#define _LATB_LB0_POSN                                      0x0
#define _LATB_LB0_POSITION                                  0x0
#define _LATB_LB0_SIZE                                      0x1
#define _LATB_LB0_LENGTH                                    0x1
#define _LATB_LB0_MASK                                      0x1
#define _LATB_LB1_POSN                                      0x1
#define _LATB_LB1_POSITION                                  0x1
#define _LATB_LB1_SIZE                                      0x1
#define _LATB_LB1_LENGTH                                    0x1
#define _LATB_LB1_MASK                                      0x2
#define _LATB_LB2_POSN                                      0x2
#define _LATB_LB2_POSITION                                  0x2
#define _LATB_LB2_SIZE                                      0x1
#define _LATB_LB2_LENGTH                                    0x1
#define _LATB_LB2_MASK                                      0x4
#define _LATB_LB3_POSN                                      0x3
#define _LATB_LB3_POSITION                                  0x3
#define _LATB_LB3_SIZE                                      0x1
#define _LATB_LB3_LENGTH                                    0x1
#define _LATB_LB3_MASK                                      0x8
#define _LATB_LB4_POSN                                      0x4
#define _LATB_LB4_POSITION                                  0x4
#define _LATB_LB4_SIZE                                      0x1
#define _LATB_LB4_LENGTH                                    0x1
#define _LATB_LB4_MASK                                      0x10
#define _LATB_LB5_POSN                                      0x5
#define _LATB_LB5_POSITION                                  0x5
#define _LATB_LB5_SIZE                                      0x1
#define _LATB_LB5_LENGTH                                    0x1
#define _LATB_LB5_MASK                                      0x20
#define _LATB_LB6_POSN                                      0x6
#define _LATB_LB6_POSITION                                  0x6
#define _LATB_LB6_SIZE                                      0x1
#define _LATB_LB6_LENGTH                                    0x1
#define _LATB_LB6_MASK                                      0x40
#define _LATB_LB7_POSN                                      0x7
#define _LATB_LB7_POSITION                                  0x7
#define _LATB_LB7_SIZE                                      0x1
#define _LATB_LB7_LENGTH                                    0x1
#define _LATB_LB7_MASK                                      0x80

// Register: LATC
#define LATC LATC
extern volatile unsigned char           LATC                __at(0x3FBC);
#ifndef _LIB_BUILD
asm("LATC equ 03FBCh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LATC0                  :1;
        unsigned LATC1                  :1;
        unsigned LATC2                  :1;
        unsigned LATC3                  :1;
        unsigned LATC4                  :1;
        unsigned LATC5                  :1;
        unsigned LATC6                  :1;
        unsigned LATC7                  :1;
    };
    struct {
        unsigned LC0                    :1;
        unsigned LC1                    :1;
        unsigned LC2                    :1;
        unsigned LC3                    :1;
        unsigned LC4                    :1;
        unsigned LC5                    :1;
        unsigned LC6                    :1;
        unsigned LC7                    :1;
    };
} LATCbits_t;
extern volatile LATCbits_t LATCbits __at(0x3FBC);
// bitfield macros
#define _LATC_LATC0_POSN                                    0x0
#define _LATC_LATC0_POSITION                                0x0
#define _LATC_LATC0_SIZE                                    0x1
#define _LATC_LATC0_LENGTH                                  0x1
#define _LATC_LATC0_MASK                                    0x1
#define _LATC_LATC1_POSN                                    0x1
#define _LATC_LATC1_POSITION                                0x1
#define _LATC_LATC1_SIZE                                    0x1
#define _LATC_LATC1_LENGTH                                  0x1
#define _LATC_LATC1_MASK                                    0x2
#define _LATC_LATC2_POSN                                    0x2
#define _LATC_LATC2_POSITION                                0x2
#define _LATC_LATC2_SIZE                                    0x1
#define _LATC_LATC2_LENGTH                                  0x1
#define _LATC_LATC2_MASK                                    0x4
#define _LATC_LATC3_POSN                                    0x3
#define _LATC_LATC3_POSITION                                0x3
#define _LATC_LATC3_SIZE                                    0x1
#define _LATC_LATC3_LENGTH                                  0x1
#define _LATC_LATC3_MASK                                    0x8
#define _LATC_LATC4_POSN                                    0x4
#define _LATC_LATC4_POSITION                                0x4
#define _LATC_LATC4_SIZE                                    0x1
#define _LATC_LATC4_LENGTH                                  0x1
#define _LATC_LATC4_MASK                                    0x10
#define _LATC_LATC5_POSN                                    0x5
#define _LATC_LATC5_POSITION                                0x5
#define _LATC_LATC5_SIZE                                    0x1
#define _LATC_LATC5_LENGTH                                  0x1
#define _LATC_LATC5_MASK                                    0x20
#define _LATC_LATC6_POSN                                    0x6
#define _LATC_LATC6_POSITION                                0x6
#define _LATC_LATC6_SIZE                                    0x1
#define _LATC_LATC6_LENGTH                                  0x1
#define _LATC_LATC6_MASK                                    0x40
#define _LATC_LATC7_POSN                                    0x7
#define _LATC_LATC7_POSITION                                0x7
#define _LATC_LATC7_SIZE                                    0x1
#define _LATC_LATC7_LENGTH                                  0x1
#define _LATC_LATC7_MASK                                    0x80
#define _LATC_LC0_POSN                                      0x0
#define _LATC_LC0_POSITION                                  0x0
#define _LATC_LC0_SIZE                                      0x1
#define _LATC_LC0_LENGTH                                    0x1
#define _LATC_LC0_MASK                                      0x1
#define _LATC_LC1_POSN                                      0x1
#define _LATC_LC1_POSITION                                  0x1
#define _LATC_LC1_SIZE                                      0x1
#define _LATC_LC1_LENGTH                                    0x1
#define _LATC_LC1_MASK                                      0x2
#define _LATC_LC2_POSN                                      0x2
#define _LATC_LC2_POSITION                                  0x2
#define _LATC_LC2_SIZE                                      0x1
#define _LATC_LC2_LENGTH                                    0x1
#define _LATC_LC2_MASK                                      0x4
#define _LATC_LC3_POSN                                      0x3
#define _LATC_LC3_POSITION                                  0x3
#define _LATC_LC3_SIZE                                      0x1
#define _LATC_LC3_LENGTH                                    0x1
#define _LATC_LC3_MASK                                      0x8
#define _LATC_LC4_POSN                                      0x4
#define _LATC_LC4_POSITION                                  0x4
#define _LATC_LC4_SIZE                                      0x1
#define _LATC_LC4_LENGTH                                    0x1
#define _LATC_LC4_MASK                                      0x10
#define _LATC_LC5_POSN                                      0x5
#define _LATC_LC5_POSITION                                  0x5
#define _LATC_LC5_SIZE                                      0x1
#define _LATC_LC5_LENGTH                                    0x1
#define _LATC_LC5_MASK                                      0x20
#define _LATC_LC6_POSN                                      0x6
#define _LATC_LC6_POSITION                                  0x6
#define _LATC_LC6_SIZE                                      0x1
#define _LATC_LC6_LENGTH                                    0x1
#define _LATC_LC6_MASK                                      0x40
#define _LATC_LC7_POSN                                      0x7
#define _LATC_LC7_POSITION                                  0x7
#define _LATC_LC7_SIZE                                      0x1
#define _LATC_LC7_LENGTH                                    0x1
#define _LATC_LC7_MASK                                      0x80

// Register: TRISA
#define TRISA TRISA
extern volatile unsigned char           TRISA               __at(0x3FC2);
#ifndef _LIB_BUILD
asm("TRISA equ 03FC2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TRISA0                 :1;
        unsigned TRISA1                 :1;
        unsigned TRISA2                 :1;
        unsigned TRISA3                 :1;
        unsigned TRISA4                 :1;
        unsigned TRISA5                 :1;
        unsigned TRISA6                 :1;
        unsigned TRISA7                 :1;
    };
} TRISAbits_t;
extern volatile TRISAbits_t TRISAbits __at(0x3FC2);
// bitfield macros
#define _TRISA_TRISA0_POSN                                  0x0
#define _TRISA_TRISA0_POSITION                              0x0
#define _TRISA_TRISA0_SIZE                                  0x1
#define _TRISA_TRISA0_LENGTH                                0x1
#define _TRISA_TRISA0_MASK                                  0x1
#define _TRISA_TRISA1_POSN                                  0x1
#define _TRISA_TRISA1_POSITION                              0x1
#define _TRISA_TRISA1_SIZE                                  0x1
#define _TRISA_TRISA1_LENGTH                                0x1
#define _TRISA_TRISA1_MASK                                  0x2
#define _TRISA_TRISA2_POSN                                  0x2
#define _TRISA_TRISA2_POSITION                              0x2
#define _TRISA_TRISA2_SIZE                                  0x1
#define _TRISA_TRISA2_LENGTH                                0x1
#define _TRISA_TRISA2_MASK                                  0x4
#define _TRISA_TRISA3_POSN                                  0x3
#define _TRISA_TRISA3_POSITION                              0x3
#define _TRISA_TRISA3_SIZE                                  0x1
#define _TRISA_TRISA3_LENGTH                                0x1
#define _TRISA_TRISA3_MASK                                  0x8
#define _TRISA_TRISA4_POSN                                  0x4
#define _TRISA_TRISA4_POSITION                              0x4
#define _TRISA_TRISA4_SIZE                                  0x1
#define _TRISA_TRISA4_LENGTH                                0x1
#define _TRISA_TRISA4_MASK                                  0x10
#define _TRISA_TRISA5_POSN                                  0x5
#define _TRISA_TRISA5_POSITION                              0x5
#define _TRISA_TRISA5_SIZE                                  0x1
#define _TRISA_TRISA5_LENGTH                                0x1
#define _TRISA_TRISA5_MASK                                  0x20
#define _TRISA_TRISA6_POSN                                  0x6
#define _TRISA_TRISA6_POSITION                              0x6
#define _TRISA_TRISA6_SIZE                                  0x1
#define _TRISA_TRISA6_LENGTH                                0x1
#define _TRISA_TRISA6_MASK                                  0x40
#define _TRISA_TRISA7_POSN                                  0x7
#define _TRISA_TRISA7_POSITION                              0x7
#define _TRISA_TRISA7_SIZE                                  0x1
#define _TRISA_TRISA7_LENGTH                                0x1
#define _TRISA_TRISA7_MASK                                  0x80

// Register: TRISB
#define TRISB TRISB
extern volatile unsigned char           TRISB               __at(0x3FC3);
#ifndef _LIB_BUILD
asm("TRISB equ 03FC3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TRISB0                 :1;
        unsigned TRISB1                 :1;
        unsigned TRISB2                 :1;
        unsigned TRISB3                 :1;
        unsigned TRISB4                 :1;
        unsigned TRISB5                 :1;
        unsigned TRISB6                 :1;
        unsigned TRISB7                 :1;
    };
} TRISBbits_t;
extern volatile TRISBbits_t TRISBbits __at(0x3FC3);
// bitfield macros
#define _TRISB_TRISB0_POSN                                  0x0
#define _TRISB_TRISB0_POSITION                              0x0
#define _TRISB_TRISB0_SIZE                                  0x1
#define _TRISB_TRISB0_LENGTH                                0x1
#define _TRISB_TRISB0_MASK                                  0x1
#define _TRISB_TRISB1_POSN                                  0x1
#define _TRISB_TRISB1_POSITION                              0x1
#define _TRISB_TRISB1_SIZE                                  0x1
#define _TRISB_TRISB1_LENGTH                                0x1
#define _TRISB_TRISB1_MASK                                  0x2
#define _TRISB_TRISB2_POSN                                  0x2
#define _TRISB_TRISB2_POSITION                              0x2
#define _TRISB_TRISB2_SIZE                                  0x1
#define _TRISB_TRISB2_LENGTH                                0x1
#define _TRISB_TRISB2_MASK                                  0x4
#define _TRISB_TRISB3_POSN                                  0x3
#define _TRISB_TRISB3_POSITION                              0x3
#define _TRISB_TRISB3_SIZE                                  0x1
#define _TRISB_TRISB3_LENGTH                                0x1
#define _TRISB_TRISB3_MASK                                  0x8
#define _TRISB_TRISB4_POSN                                  0x4
#define _TRISB_TRISB4_POSITION                              0x4
#define _TRISB_TRISB4_SIZE                                  0x1
#define _TRISB_TRISB4_LENGTH                                0x1
#define _TRISB_TRISB4_MASK                                  0x10
#define _TRISB_TRISB5_POSN                                  0x5
#define _TRISB_TRISB5_POSITION                              0x5
#define _TRISB_TRISB5_SIZE                                  0x1
#define _TRISB_TRISB5_LENGTH                                0x1
#define _TRISB_TRISB5_MASK                                  0x20
#define _TRISB_TRISB6_POSN                                  0x6
#define _TRISB_TRISB6_POSITION                              0x6
#define _TRISB_TRISB6_SIZE                                  0x1
#define _TRISB_TRISB6_LENGTH                                0x1
#define _TRISB_TRISB6_MASK                                  0x40
#define _TRISB_TRISB7_POSN                                  0x7
#define _TRISB_TRISB7_POSITION                              0x7
#define _TRISB_TRISB7_SIZE                                  0x1
#define _TRISB_TRISB7_LENGTH                                0x1
#define _TRISB_TRISB7_MASK                                  0x80

// Register: TRISC
#define TRISC TRISC
extern volatile unsigned char           TRISC               __at(0x3FC4);
#ifndef _LIB_BUILD
asm("TRISC equ 03FC4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TRISC0                 :1;
        unsigned TRISC1                 :1;
        unsigned TRISC2                 :1;
        unsigned TRISC3                 :1;
        unsigned TRISC4                 :1;
        unsigned TRISC5                 :1;
        unsigned TRISC6                 :1;
        unsigned TRISC7                 :1;
    };
} TRISCbits_t;
extern volatile TRISCbits_t TRISCbits __at(0x3FC4);
// bitfield macros
#define _TRISC_TRISC0_POSN                                  0x0
#define _TRISC_TRISC0_POSITION                              0x0
#define _TRISC_TRISC0_SIZE                                  0x1
#define _TRISC_TRISC0_LENGTH                                0x1
#define _TRISC_TRISC0_MASK                                  0x1
#define _TRISC_TRISC1_POSN                                  0x1
#define _TRISC_TRISC1_POSITION                              0x1
#define _TRISC_TRISC1_SIZE                                  0x1
#define _TRISC_TRISC1_LENGTH                                0x1
#define _TRISC_TRISC1_MASK                                  0x2
#define _TRISC_TRISC2_POSN                                  0x2
#define _TRISC_TRISC2_POSITION                              0x2
#define _TRISC_TRISC2_SIZE                                  0x1
#define _TRISC_TRISC2_LENGTH                                0x1
#define _TRISC_TRISC2_MASK                                  0x4
#define _TRISC_TRISC3_POSN                                  0x3
#define _TRISC_TRISC3_POSITION                              0x3
#define _TRISC_TRISC3_SIZE                                  0x1
#define _TRISC_TRISC3_LENGTH                                0x1
#define _TRISC_TRISC3_MASK                                  0x8
#define _TRISC_TRISC4_POSN                                  0x4
#define _TRISC_TRISC4_POSITION                              0x4
#define _TRISC_TRISC4_SIZE                                  0x1
#define _TRISC_TRISC4_LENGTH                                0x1
#define _TRISC_TRISC4_MASK                                  0x10
#define _TRISC_TRISC5_POSN                                  0x5
#define _TRISC_TRISC5_POSITION                              0x5
#define _TRISC_TRISC5_SIZE                                  0x1
#define _TRISC_TRISC5_LENGTH                                0x1
#define _TRISC_TRISC5_MASK                                  0x20
#define _TRISC_TRISC6_POSN                                  0x6
#define _TRISC_TRISC6_POSITION                              0x6
#define _TRISC_TRISC6_SIZE                                  0x1
#define _TRISC_TRISC6_LENGTH                                0x1
#define _TRISC_TRISC6_MASK                                  0x40
#define _TRISC_TRISC7_POSN                                  0x7
#define _TRISC_TRISC7_POSITION                              0x7
#define _TRISC_TRISC7_SIZE                                  0x1
#define _TRISC_TRISC7_LENGTH                                0x1
#define _TRISC_TRISC7_MASK                                  0x80

// Register: PORTA
#define PORTA PORTA
extern volatile unsigned char           PORTA               __at(0x3FCA);
#ifndef _LIB_BUILD
asm("PORTA equ 03FCAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA0                    :1;
        unsigned RA1                    :1;
        unsigned RA2                    :1;
        unsigned RA3                    :1;
        unsigned RA4                    :1;
        unsigned RA5                    :1;
        unsigned RA6                    :1;
        unsigned RA7                    :1;
    };
} PORTAbits_t;
extern volatile PORTAbits_t PORTAbits __at(0x3FCA);
// bitfield macros
#define _PORTA_RA0_POSN                                     0x0
#define _PORTA_RA0_POSITION                                 0x0
#define _PORTA_RA0_SIZE                                     0x1
#define _PORTA_RA0_LENGTH                                   0x1
#define _PORTA_RA0_MASK                                     0x1
#define _PORTA_RA1_POSN                                     0x1
#define _PORTA_RA1_POSITION                                 0x1
#define _PORTA_RA1_SIZE                                     0x1
#define _PORTA_RA1_LENGTH                                   0x1
#define _PORTA_RA1_MASK                                     0x2
#define _PORTA_RA2_POSN                                     0x2
#define _PORTA_RA2_POSITION                                 0x2
#define _PORTA_RA2_SIZE                                     0x1
#define _PORTA_RA2_LENGTH                                   0x1
#define _PORTA_RA2_MASK                                     0x4
#define _PORTA_RA3_POSN                                     0x3
#define _PORTA_RA3_POSITION                                 0x3
#define _PORTA_RA3_SIZE                                     0x1
#define _PORTA_RA3_LENGTH                                   0x1
#define _PORTA_RA3_MASK                                     0x8
#define _PORTA_RA4_POSN                                     0x4
#define _PORTA_RA4_POSITION                                 0x4
#define _PORTA_RA4_SIZE                                     0x1
#define _PORTA_RA4_LENGTH                                   0x1
#define _PORTA_RA4_MASK                                     0x10
#define _PORTA_RA5_POSN                                     0x5
#define _PORTA_RA5_POSITION                                 0x5
#define _PORTA_RA5_SIZE                                     0x1
#define _PORTA_RA5_LENGTH                                   0x1
#define _PORTA_RA5_MASK                                     0x20
#define _PORTA_RA6_POSN                                     0x6
#define _PORTA_RA6_POSITION                                 0x6
#define _PORTA_RA6_SIZE                                     0x1
#define _PORTA_RA6_LENGTH                                   0x1
#define _PORTA_RA6_MASK                                     0x40
#define _PORTA_RA7_POSN                                     0x7
#define _PORTA_RA7_POSITION                                 0x7
#define _PORTA_RA7_SIZE                                     0x1
#define _PORTA_RA7_LENGTH                                   0x1
#define _PORTA_RA7_MASK                                     0x80

// Register: PORTB
#define PORTB PORTB
extern volatile unsigned char           PORTB               __at(0x3FCB);
#ifndef _LIB_BUILD
asm("PORTB equ 03FCBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RB0                    :1;
        unsigned RB1                    :1;
        unsigned RB2                    :1;
        unsigned RB3                    :1;
        unsigned RB4                    :1;
        unsigned RB5                    :1;
        unsigned RB6                    :1;
        unsigned RB7                    :1;
    };
} PORTBbits_t;
extern volatile PORTBbits_t PORTBbits __at(0x3FCB);
// bitfield macros
#define _PORTB_RB0_POSN                                     0x0
#define _PORTB_RB0_POSITION                                 0x0
#define _PORTB_RB0_SIZE                                     0x1
#define _PORTB_RB0_LENGTH                                   0x1
#define _PORTB_RB0_MASK                                     0x1
#define _PORTB_RB1_POSN                                     0x1
#define _PORTB_RB1_POSITION                                 0x1
#define _PORTB_RB1_SIZE                                     0x1
#define _PORTB_RB1_LENGTH                                   0x1
#define _PORTB_RB1_MASK                                     0x2
#define _PORTB_RB2_POSN                                     0x2
#define _PORTB_RB2_POSITION                                 0x2
#define _PORTB_RB2_SIZE                                     0x1
#define _PORTB_RB2_LENGTH                                   0x1
#define _PORTB_RB2_MASK                                     0x4
#define _PORTB_RB3_POSN                                     0x3
#define _PORTB_RB3_POSITION                                 0x3
#define _PORTB_RB3_SIZE                                     0x1
#define _PORTB_RB3_LENGTH                                   0x1
#define _PORTB_RB3_MASK                                     0x8
#define _PORTB_RB4_POSN                                     0x4
#define _PORTB_RB4_POSITION                                 0x4
#define _PORTB_RB4_SIZE                                     0x1
#define _PORTB_RB4_LENGTH                                   0x1
#define _PORTB_RB4_MASK                                     0x10
#define _PORTB_RB5_POSN                                     0x5
#define _PORTB_RB5_POSITION                                 0x5
#define _PORTB_RB5_SIZE                                     0x1
#define _PORTB_RB5_LENGTH                                   0x1
#define _PORTB_RB5_MASK                                     0x20
#define _PORTB_RB6_POSN                                     0x6
#define _PORTB_RB6_POSITION                                 0x6
#define _PORTB_RB6_SIZE                                     0x1
#define _PORTB_RB6_LENGTH                                   0x1
#define _PORTB_RB6_MASK                                     0x40
#define _PORTB_RB7_POSN                                     0x7
#define _PORTB_RB7_POSITION                                 0x7
#define _PORTB_RB7_SIZE                                     0x1
#define _PORTB_RB7_LENGTH                                   0x1
#define _PORTB_RB7_MASK                                     0x80

// Register: PORTC
#define PORTC PORTC
extern volatile unsigned char           PORTC               __at(0x3FCC);
#ifndef _LIB_BUILD
asm("PORTC equ 03FCCh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC0                    :1;
        unsigned RC1                    :1;
        unsigned RC2                    :1;
        unsigned RC3                    :1;
        unsigned RC4                    :1;
        unsigned RC5                    :1;
        unsigned RC6                    :1;
        unsigned RC7                    :1;
    };
} PORTCbits_t;
extern volatile PORTCbits_t PORTCbits __at(0x3FCC);
// bitfield macros
#define _PORTC_RC0_POSN                                     0x0
#define _PORTC_RC0_POSITION                                 0x0
#define _PORTC_RC0_SIZE                                     0x1
#define _PORTC_RC0_LENGTH                                   0x1
#define _PORTC_RC0_MASK                                     0x1
#define _PORTC_RC1_POSN                                     0x1
#define _PORTC_RC1_POSITION                                 0x1
#define _PORTC_RC1_SIZE                                     0x1
#define _PORTC_RC1_LENGTH                                   0x1
#define _PORTC_RC1_MASK                                     0x2
#define _PORTC_RC2_POSN                                     0x2
#define _PORTC_RC2_POSITION                                 0x2
#define _PORTC_RC2_SIZE                                     0x1
#define _PORTC_RC2_LENGTH                                   0x1
#define _PORTC_RC2_MASK                                     0x4
#define _PORTC_RC3_POSN                                     0x3
#define _PORTC_RC3_POSITION                                 0x3
#define _PORTC_RC3_SIZE                                     0x1
#define _PORTC_RC3_LENGTH                                   0x1
#define _PORTC_RC3_MASK                                     0x8
#define _PORTC_RC4_POSN                                     0x4
#define _PORTC_RC4_POSITION                                 0x4
#define _PORTC_RC4_SIZE                                     0x1
#define _PORTC_RC4_LENGTH                                   0x1
#define _PORTC_RC4_MASK                                     0x10
#define _PORTC_RC5_POSN                                     0x5
#define _PORTC_RC5_POSITION                                 0x5
#define _PORTC_RC5_SIZE                                     0x1
#define _PORTC_RC5_LENGTH                                   0x1
#define _PORTC_RC5_MASK                                     0x20
#define _PORTC_RC6_POSN                                     0x6
#define _PORTC_RC6_POSITION                                 0x6
#define _PORTC_RC6_SIZE                                     0x1
#define _PORTC_RC6_LENGTH                                   0x1
#define _PORTC_RC6_MASK                                     0x40
#define _PORTC_RC7_POSN                                     0x7
#define _PORTC_RC7_POSITION                                 0x7
#define _PORTC_RC7_SIZE                                     0x1
#define _PORTC_RC7_LENGTH                                   0x1
#define _PORTC_RC7_MASK                                     0x80

// Register: PORTE
#define PORTE PORTE
extern volatile unsigned char           PORTE               __at(0x3FCE);
#ifndef _LIB_BUILD
asm("PORTE equ 03FCEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :3;
        unsigned RE3                    :1;
    };
} PORTEbits_t;
extern volatile PORTEbits_t PORTEbits __at(0x3FCE);
// bitfield macros
#define _PORTE_RE3_POSN                                     0x3
#define _PORTE_RE3_POSITION                                 0x3
#define _PORTE_RE3_SIZE                                     0x1
#define _PORTE_RE3_LENGTH                                   0x1
#define _PORTE_RE3_MASK                                     0x8

// Register: INTCON0
#define INTCON0 INTCON0
extern volatile unsigned char           INTCON0             __at(0x3FD2);
#ifndef _LIB_BUILD
asm("INTCON0 equ 03FD2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INT0EDG                :1;
        unsigned INT1EDG                :1;
        unsigned INT2EDG                :1;
        unsigned                        :2;
        unsigned IPEN                   :1;
        unsigned GIEL                   :1;
        unsigned GIE                    :1;
    };
    struct {
        unsigned                        :7;
        unsigned GIEH                   :1;
    };
} INTCON0bits_t;
extern volatile INTCON0bits_t INTCON0bits __at(0x3FD2);
// bitfield macros
#define _INTCON0_INT0EDG_POSN                               0x0
#define _INTCON0_INT0EDG_POSITION                           0x0
#define _INTCON0_INT0EDG_SIZE                               0x1
#define _INTCON0_INT0EDG_LENGTH                             0x1
#define _INTCON0_INT0EDG_MASK                               0x1
#define _INTCON0_INT1EDG_POSN                               0x1
#define _INTCON0_INT1EDG_POSITION                           0x1
#define _INTCON0_INT1EDG_SIZE                               0x1
#define _INTCON0_INT1EDG_LENGTH                             0x1
#define _INTCON0_INT1EDG_MASK                               0x2
#define _INTCON0_INT2EDG_POSN                               0x2
#define _INTCON0_INT2EDG_POSITION                           0x2
#define _INTCON0_INT2EDG_SIZE                               0x1
#define _INTCON0_INT2EDG_LENGTH                             0x1
#define _INTCON0_INT2EDG_MASK                               0x4
#define _INTCON0_IPEN_POSN                                  0x5
#define _INTCON0_IPEN_POSITION                              0x5
#define _INTCON0_IPEN_SIZE                                  0x1
#define _INTCON0_IPEN_LENGTH                                0x1
#define _INTCON0_IPEN_MASK                                  0x20
#define _INTCON0_GIEL_POSN                                  0x6
#define _INTCON0_GIEL_POSITION                              0x6
#define _INTCON0_GIEL_SIZE                                  0x1
#define _INTCON0_GIEL_LENGTH                                0x1
#define _INTCON0_GIEL_MASK                                  0x40
#define _INTCON0_GIE_POSN                                   0x7
#define _INTCON0_GIE_POSITION                               0x7
#define _INTCON0_GIE_SIZE                                   0x1
#define _INTCON0_GIE_LENGTH                                 0x1
#define _INTCON0_GIE_MASK                                   0x80
#define _INTCON0_GIEH_POSN                                  0x7
#define _INTCON0_GIEH_POSITION                              0x7
#define _INTCON0_GIEH_SIZE                                  0x1
#define _INTCON0_GIEH_LENGTH                                0x1
#define _INTCON0_GIEH_MASK                                  0x80

// Register: INTCON1
#define INTCON1 INTCON1
extern volatile unsigned char           INTCON1             __at(0x3FD3);
#ifndef _LIB_BUILD
asm("INTCON1 equ 03FD3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :6;
        unsigned STAT                   :2;
    };
    struct {
        unsigned                        :6;
        unsigned STAT0                  :1;
        unsigned STAT1                  :1;
    };
} INTCON1bits_t;
extern volatile INTCON1bits_t INTCON1bits __at(0x3FD3);
// bitfield macros
#define _INTCON1_STAT_POSN                                  0x6
#define _INTCON1_STAT_POSITION                              0x6
#define _INTCON1_STAT_SIZE                                  0x2
#define _INTCON1_STAT_LENGTH                                0x2
#define _INTCON1_STAT_MASK                                  0xC0
#define _INTCON1_STAT0_POSN                                 0x6
#define _INTCON1_STAT0_POSITION                             0x6
#define _INTCON1_STAT0_SIZE                                 0x1
#define _INTCON1_STAT0_LENGTH                               0x1
#define _INTCON1_STAT0_MASK                                 0x40
#define _INTCON1_STAT1_POSN                                 0x7
#define _INTCON1_STAT1_POSITION                             0x7
#define _INTCON1_STAT1_SIZE                                 0x1
#define _INTCON1_STAT1_LENGTH                               0x1
#define _INTCON1_STAT1_MASK                                 0x80

// Register: IVTLOCK
#define IVTLOCK IVTLOCK
extern volatile unsigned char           IVTLOCK             __at(0x3FD4);
#ifndef _LIB_BUILD
asm("IVTLOCK equ 03FD4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IVTLOCKED              :1;
    };
} IVTLOCKbits_t;
extern volatile IVTLOCKbits_t IVTLOCKbits __at(0x3FD4);
// bitfield macros
#define _IVTLOCK_IVTLOCKED_POSN                             0x0
#define _IVTLOCK_IVTLOCKED_POSITION                         0x0
#define _IVTLOCK_IVTLOCKED_SIZE                             0x1
#define _IVTLOCK_IVTLOCKED_LENGTH                           0x1
#define _IVTLOCK_IVTLOCKED_MASK                             0x1

// Register: IVTBASE
#define IVTBASE IVTBASE
#ifndef __CCI__
extern volatile __uint24                IVTBASE             __at(0x3FD5);
#endif
#ifndef _LIB_BUILD
asm("IVTBASE equ 03FD5h");
#endif

// Register: IVTBASEL
#define IVTBASEL IVTBASEL
extern volatile unsigned char           IVTBASEL            __at(0x3FD5);
#ifndef _LIB_BUILD
asm("IVTBASEL equ 03FD5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BASE0                  :1;
        unsigned BASE1                  :1;
        unsigned BASE2                  :1;
        unsigned BASE3                  :1;
        unsigned BASE4                  :1;
        unsigned BASE5                  :1;
        unsigned BASE6                  :1;
        unsigned BASE7                  :1;
    };
} IVTBASELbits_t;
extern volatile IVTBASELbits_t IVTBASELbits __at(0x3FD5);
// bitfield macros
#define _IVTBASEL_BASE0_POSN                                0x0
#define _IVTBASEL_BASE0_POSITION                            0x0
#define _IVTBASEL_BASE0_SIZE                                0x1
#define _IVTBASEL_BASE0_LENGTH                              0x1
#define _IVTBASEL_BASE0_MASK                                0x1
#define _IVTBASEL_BASE1_POSN                                0x1
#define _IVTBASEL_BASE1_POSITION                            0x1
#define _IVTBASEL_BASE1_SIZE                                0x1
#define _IVTBASEL_BASE1_LENGTH                              0x1
#define _IVTBASEL_BASE1_MASK                                0x2
#define _IVTBASEL_BASE2_POSN                                0x2
#define _IVTBASEL_BASE2_POSITION                            0x2
#define _IVTBASEL_BASE2_SIZE                                0x1
#define _IVTBASEL_BASE2_LENGTH                              0x1
#define _IVTBASEL_BASE2_MASK                                0x4
#define _IVTBASEL_BASE3_POSN                                0x3
#define _IVTBASEL_BASE3_POSITION                            0x3
#define _IVTBASEL_BASE3_SIZE                                0x1
#define _IVTBASEL_BASE3_LENGTH                              0x1
#define _IVTBASEL_BASE3_MASK                                0x8
#define _IVTBASEL_BASE4_POSN                                0x4
#define _IVTBASEL_BASE4_POSITION                            0x4
#define _IVTBASEL_BASE4_SIZE                                0x1
#define _IVTBASEL_BASE4_LENGTH                              0x1
#define _IVTBASEL_BASE4_MASK                                0x10
#define _IVTBASEL_BASE5_POSN                                0x5
#define _IVTBASEL_BASE5_POSITION                            0x5
#define _IVTBASEL_BASE5_SIZE                                0x1
#define _IVTBASEL_BASE5_LENGTH                              0x1
#define _IVTBASEL_BASE5_MASK                                0x20
#define _IVTBASEL_BASE6_POSN                                0x6
#define _IVTBASEL_BASE6_POSITION                            0x6
#define _IVTBASEL_BASE6_SIZE                                0x1
#define _IVTBASEL_BASE6_LENGTH                              0x1
#define _IVTBASEL_BASE6_MASK                                0x40
#define _IVTBASEL_BASE7_POSN                                0x7
#define _IVTBASEL_BASE7_POSITION                            0x7
#define _IVTBASEL_BASE7_SIZE                                0x1
#define _IVTBASEL_BASE7_LENGTH                              0x1
#define _IVTBASEL_BASE7_MASK                                0x80

// Register: IVTBASEH
#define IVTBASEH IVTBASEH
extern volatile unsigned char           IVTBASEH            __at(0x3FD6);
#ifndef _LIB_BUILD
asm("IVTBASEH equ 03FD6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BASE8                  :1;
        unsigned BASE9                  :1;
        unsigned BASE10                 :1;
        unsigned BASE11                 :1;
        unsigned BASE12                 :1;
        unsigned BASE13                 :1;
        unsigned BASE14                 :1;
        unsigned BASE15                 :1;
    };
} IVTBASEHbits_t;
extern volatile IVTBASEHbits_t IVTBASEHbits __at(0x3FD6);
// bitfield macros
#define _IVTBASEH_BASE8_POSN                                0x0
#define _IVTBASEH_BASE8_POSITION                            0x0
#define _IVTBASEH_BASE8_SIZE                                0x1
#define _IVTBASEH_BASE8_LENGTH                              0x1
#define _IVTBASEH_BASE8_MASK                                0x1
#define _IVTBASEH_BASE9_POSN                                0x1
#define _IVTBASEH_BASE9_POSITION                            0x1
#define _IVTBASEH_BASE9_SIZE                                0x1
#define _IVTBASEH_BASE9_LENGTH                              0x1
#define _IVTBASEH_BASE9_MASK                                0x2
#define _IVTBASEH_BASE10_POSN                               0x2
#define _IVTBASEH_BASE10_POSITION                           0x2
#define _IVTBASEH_BASE10_SIZE                               0x1
#define _IVTBASEH_BASE10_LENGTH                             0x1
#define _IVTBASEH_BASE10_MASK                               0x4
#define _IVTBASEH_BASE11_POSN                               0x3
#define _IVTBASEH_BASE11_POSITION                           0x3
#define _IVTBASEH_BASE11_SIZE                               0x1
#define _IVTBASEH_BASE11_LENGTH                             0x1
#define _IVTBASEH_BASE11_MASK                               0x8
#define _IVTBASEH_BASE12_POSN                               0x4
#define _IVTBASEH_BASE12_POSITION                           0x4
#define _IVTBASEH_BASE12_SIZE                               0x1
#define _IVTBASEH_BASE12_LENGTH                             0x1
#define _IVTBASEH_BASE12_MASK                               0x10
#define _IVTBASEH_BASE13_POSN                               0x5
#define _IVTBASEH_BASE13_POSITION                           0x5
#define _IVTBASEH_BASE13_SIZE                               0x1
#define _IVTBASEH_BASE13_LENGTH                             0x1
#define _IVTBASEH_BASE13_MASK                               0x20
#define _IVTBASEH_BASE14_POSN                               0x6
#define _IVTBASEH_BASE14_POSITION                           0x6
#define _IVTBASEH_BASE14_SIZE                               0x1
#define _IVTBASEH_BASE14_LENGTH                             0x1
#define _IVTBASEH_BASE14_MASK                               0x40
#define _IVTBASEH_BASE15_POSN                               0x7
#define _IVTBASEH_BASE15_POSITION                           0x7
#define _IVTBASEH_BASE15_SIZE                               0x1
#define _IVTBASEH_BASE15_LENGTH                             0x1
#define _IVTBASEH_BASE15_MASK                               0x80

// Register: IVTBASEU
#define IVTBASEU IVTBASEU
extern volatile unsigned char           IVTBASEU            __at(0x3FD7);
#ifndef _LIB_BUILD
asm("IVTBASEU equ 03FD7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BASE16                 :1;
        unsigned BASE17                 :1;
        unsigned BASE18                 :1;
        unsigned BASE19                 :1;
        unsigned BASE20                 :1;
    };
} IVTBASEUbits_t;
extern volatile IVTBASEUbits_t IVTBASEUbits __at(0x3FD7);
// bitfield macros
#define _IVTBASEU_BASE16_POSN                               0x0
#define _IVTBASEU_BASE16_POSITION                           0x0
#define _IVTBASEU_BASE16_SIZE                               0x1
#define _IVTBASEU_BASE16_LENGTH                             0x1
#define _IVTBASEU_BASE16_MASK                               0x1
#define _IVTBASEU_BASE17_POSN                               0x1
#define _IVTBASEU_BASE17_POSITION                           0x1
#define _IVTBASEU_BASE17_SIZE                               0x1
#define _IVTBASEU_BASE17_LENGTH                             0x1
#define _IVTBASEU_BASE17_MASK                               0x2
#define _IVTBASEU_BASE18_POSN                               0x2
#define _IVTBASEU_BASE18_POSITION                           0x2
#define _IVTBASEU_BASE18_SIZE                               0x1
#define _IVTBASEU_BASE18_LENGTH                             0x1
#define _IVTBASEU_BASE18_MASK                               0x4
#define _IVTBASEU_BASE19_POSN                               0x3
#define _IVTBASEU_BASE19_POSITION                           0x3
#define _IVTBASEU_BASE19_SIZE                               0x1
#define _IVTBASEU_BASE19_LENGTH                             0x1
#define _IVTBASEU_BASE19_MASK                               0x8
#define _IVTBASEU_BASE20_POSN                               0x4
#define _IVTBASEU_BASE20_POSITION                           0x4
#define _IVTBASEU_BASE20_SIZE                               0x1
#define _IVTBASEU_BASE20_LENGTH                             0x1
#define _IVTBASEU_BASE20_MASK                               0x10

// Register: STATUS
#define STATUS STATUS
extern volatile unsigned char           STATUS              __at(0x3FD8);
#ifndef _LIB_BUILD
asm("STATUS equ 03FD8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :5;
        unsigned NOT_PD                 :1;
    };
    struct {
        unsigned                        :6;
        unsigned NOT_TO                 :1;
    };
    struct {
        unsigned C                      :1;
        unsigned DC                     :1;
        unsigned Z                      :1;
        unsigned OV                     :1;
        unsigned N                      :1;
        unsigned nPD                    :1;
        unsigned nTO                    :1;
    };
    struct {
        unsigned                        :5;
        unsigned PD                     :1;
        unsigned TO                     :1;
    };
    struct {
        unsigned CARRY                  :1;
        unsigned                        :1;
        unsigned ZERO                   :1;
        unsigned OVERFLOW               :1;
        unsigned NEGATIVE               :1;
    };
} STATUSbits_t;
extern volatile STATUSbits_t STATUSbits __at(0x3FD8);
// bitfield macros
#define _STATUS_NOT_PD_POSN                                 0x5
#define _STATUS_NOT_PD_POSITION                             0x5
#define _STATUS_NOT_PD_SIZE                                 0x1
#define _STATUS_NOT_PD_LENGTH                               0x1
#define _STATUS_NOT_PD_MASK                                 0x20
#define _STATUS_NOT_TO_POSN                                 0x6
#define _STATUS_NOT_TO_POSITION                             0x6
#define _STATUS_NOT_TO_SIZE                                 0x1
#define _STATUS_NOT_TO_LENGTH                               0x1
#define _STATUS_NOT_TO_MASK                                 0x40
#define _STATUS_C_POSN                                      0x0
#define _STATUS_C_POSITION                                  0x0
#define _STATUS_C_SIZE                                      0x1
#define _STATUS_C_LENGTH                                    0x1
#define _STATUS_C_MASK                                      0x1
#define _STATUS_DC_POSN                                     0x1
#define _STATUS_DC_POSITION                                 0x1
#define _STATUS_DC_SIZE                                     0x1
#define _STATUS_DC_LENGTH                                   0x1
#define _STATUS_DC_MASK                                     0x2
#define _STATUS_Z_POSN                                      0x2
#define _STATUS_Z_POSITION                                  0x2
#define _STATUS_Z_SIZE                                      0x1
#define _STATUS_Z_LENGTH                                    0x1
#define _STATUS_Z_MASK                                      0x4
#define _STATUS_OV_POSN                                     0x3
#define _STATUS_OV_POSITION                                 0x3
#define _STATUS_OV_SIZE                                     0x1
#define _STATUS_OV_LENGTH                                   0x1
#define _STATUS_OV_MASK                                     0x8
#define _STATUS_N_POSN                                      0x4
#define _STATUS_N_POSITION                                  0x4
#define _STATUS_N_SIZE                                      0x1
#define _STATUS_N_LENGTH                                    0x1
#define _STATUS_N_MASK                                      0x10
#define _STATUS_nPD_POSN                                    0x5
#define _STATUS_nPD_POSITION                                0x5
#define _STATUS_nPD_SIZE                                    0x1
#define _STATUS_nPD_LENGTH                                  0x1
#define _STATUS_nPD_MASK                                    0x20
#define _STATUS_nTO_POSN                                    0x6
#define _STATUS_nTO_POSITION                                0x6
#define _STATUS_nTO_SIZE                                    0x1
#define _STATUS_nTO_LENGTH                                  0x1
#define _STATUS_nTO_MASK                                    0x40
#define _STATUS_PD_POSN                                     0x5
#define _STATUS_PD_POSITION                                 0x5
#define _STATUS_PD_SIZE                                     0x1
#define _STATUS_PD_LENGTH                                   0x1
#define _STATUS_PD_MASK                                     0x20
#define _STATUS_TO_POSN                                     0x6
#define _STATUS_TO_POSITION                                 0x6
#define _STATUS_TO_SIZE                                     0x1
#define _STATUS_TO_LENGTH                                   0x1
#define _STATUS_TO_MASK                                     0x40
#define _STATUS_CARRY_POSN                                  0x0
#define _STATUS_CARRY_POSITION                              0x0
#define _STATUS_CARRY_SIZE                                  0x1
#define _STATUS_CARRY_LENGTH                                0x1
#define _STATUS_CARRY_MASK                                  0x1
#define _STATUS_ZERO_POSN                                   0x2
#define _STATUS_ZERO_POSITION                               0x2
#define _STATUS_ZERO_SIZE                                   0x1
#define _STATUS_ZERO_LENGTH                                 0x1
#define _STATUS_ZERO_MASK                                   0x4
#define _STATUS_OVERFLOW_POSN                               0x3
#define _STATUS_OVERFLOW_POSITION                           0x3
#define _STATUS_OVERFLOW_SIZE                               0x1
#define _STATUS_OVERFLOW_LENGTH                             0x1
#define _STATUS_OVERFLOW_MASK                               0x8
#define _STATUS_NEGATIVE_POSN                               0x4
#define _STATUS_NEGATIVE_POSITION                           0x4
#define _STATUS_NEGATIVE_SIZE                               0x1
#define _STATUS_NEGATIVE_LENGTH                             0x1
#define _STATUS_NEGATIVE_MASK                               0x10

// Register: FSR2
#define FSR2 FSR2
extern volatile unsigned short          FSR2                __at(0x3FD9);
#ifndef _LIB_BUILD
asm("FSR2 equ 03FD9h");
#endif

// Register: FSR2L
#define FSR2L FSR2L
extern volatile unsigned char           FSR2L               __at(0x3FD9);
#ifndef _LIB_BUILD
asm("FSR2L equ 03FD9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR2L                  :8;
    };
} FSR2Lbits_t;
extern volatile FSR2Lbits_t FSR2Lbits __at(0x3FD9);
// bitfield macros
#define _FSR2L_FSR2L_POSN                                   0x0
#define _FSR2L_FSR2L_POSITION                               0x0
#define _FSR2L_FSR2L_SIZE                                   0x8
#define _FSR2L_FSR2L_LENGTH                                 0x8
#define _FSR2L_FSR2L_MASK                                   0xFF

// Register: FSR2H
#define FSR2H FSR2H
extern volatile unsigned char           FSR2H               __at(0x3FDA);
#ifndef _LIB_BUILD
asm("FSR2H equ 03FDAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR2H                  :6;
    };
} FSR2Hbits_t;
extern volatile FSR2Hbits_t FSR2Hbits __at(0x3FDA);
// bitfield macros
#define _FSR2H_FSR2H_POSN                                   0x0
#define _FSR2H_FSR2H_POSITION                               0x0
#define _FSR2H_FSR2H_SIZE                                   0x6
#define _FSR2H_FSR2H_LENGTH                                 0x6
#define _FSR2H_FSR2H_MASK                                   0x3F

// Register: PLUSW2
#define PLUSW2 PLUSW2
extern volatile unsigned char           PLUSW2              __at(0x3FDB);
#ifndef _LIB_BUILD
asm("PLUSW2 equ 03FDBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PLUSW2                 :8;
    };
} PLUSW2bits_t;
extern volatile PLUSW2bits_t PLUSW2bits __at(0x3FDB);
// bitfield macros
#define _PLUSW2_PLUSW2_POSN                                 0x0
#define _PLUSW2_PLUSW2_POSITION                             0x0
#define _PLUSW2_PLUSW2_SIZE                                 0x8
#define _PLUSW2_PLUSW2_LENGTH                               0x8
#define _PLUSW2_PLUSW2_MASK                                 0xFF

// Register: PREINC2
#define PREINC2 PREINC2
extern volatile unsigned char           PREINC2             __at(0x3FDC);
#ifndef _LIB_BUILD
asm("PREINC2 equ 03FDCh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PREINC2                :8;
    };
} PREINC2bits_t;
extern volatile PREINC2bits_t PREINC2bits __at(0x3FDC);
// bitfield macros
#define _PREINC2_PREINC2_POSN                               0x0
#define _PREINC2_PREINC2_POSITION                           0x0
#define _PREINC2_PREINC2_SIZE                               0x8
#define _PREINC2_PREINC2_LENGTH                             0x8
#define _PREINC2_PREINC2_MASK                               0xFF

// Register: POSTDEC2
#define POSTDEC2 POSTDEC2
extern volatile unsigned char           POSTDEC2            __at(0x3FDD);
#ifndef _LIB_BUILD
asm("POSTDEC2 equ 03FDDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned POSTDEC2               :8;
    };
} POSTDEC2bits_t;
extern volatile POSTDEC2bits_t POSTDEC2bits __at(0x3FDD);
// bitfield macros
#define _POSTDEC2_POSTDEC2_POSN                             0x0
#define _POSTDEC2_POSTDEC2_POSITION                         0x0
#define _POSTDEC2_POSTDEC2_SIZE                             0x8
#define _POSTDEC2_POSTDEC2_LENGTH                           0x8
#define _POSTDEC2_POSTDEC2_MASK                             0xFF

// Register: POSTINC2
#define POSTINC2 POSTINC2
extern volatile unsigned char           POSTINC2            __at(0x3FDE);
#ifndef _LIB_BUILD
asm("POSTINC2 equ 03FDEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned POSTINC2               :8;
    };
} POSTINC2bits_t;
extern volatile POSTINC2bits_t POSTINC2bits __at(0x3FDE);
// bitfield macros
#define _POSTINC2_POSTINC2_POSN                             0x0
#define _POSTINC2_POSTINC2_POSITION                         0x0
#define _POSTINC2_POSTINC2_SIZE                             0x8
#define _POSTINC2_POSTINC2_LENGTH                           0x8
#define _POSTINC2_POSTINC2_MASK                             0xFF

// Register: INDF2
#define INDF2 INDF2
extern volatile unsigned char           INDF2               __at(0x3FDF);
#ifndef _LIB_BUILD
asm("INDF2 equ 03FDFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INDF2                  :8;
    };
} INDF2bits_t;
extern volatile INDF2bits_t INDF2bits __at(0x3FDF);
// bitfield macros
#define _INDF2_INDF2_POSN                                   0x0
#define _INDF2_INDF2_POSITION                               0x0
#define _INDF2_INDF2_SIZE                                   0x8
#define _INDF2_INDF2_LENGTH                                 0x8
#define _INDF2_INDF2_MASK                                   0xFF

// Register: BSR
#define BSR BSR
extern volatile unsigned char           BSR                 __at(0x3FE0);
#ifndef _LIB_BUILD
asm("BSR equ 03FE0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BSR                    :6;
    };
} BSRbits_t;
extern volatile BSRbits_t BSRbits __at(0x3FE0);
// bitfield macros
#define _BSR_BSR_POSN                                       0x0
#define _BSR_BSR_POSITION                                   0x0
#define _BSR_BSR_SIZE                                       0x6
#define _BSR_BSR_LENGTH                                     0x6
#define _BSR_BSR_MASK                                       0x3F

// Register: FSR1
#define FSR1 FSR1
extern volatile unsigned short          FSR1                __at(0x3FE1);
#ifndef _LIB_BUILD
asm("FSR1 equ 03FE1h");
#endif

// Register: FSR1L
#define FSR1L FSR1L
extern volatile unsigned char           FSR1L               __at(0x3FE1);
#ifndef _LIB_BUILD
asm("FSR1L equ 03FE1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR1L                  :8;
    };
} FSR1Lbits_t;
extern volatile FSR1Lbits_t FSR1Lbits __at(0x3FE1);
// bitfield macros
#define _FSR1L_FSR1L_POSN                                   0x0
#define _FSR1L_FSR1L_POSITION                               0x0
#define _FSR1L_FSR1L_SIZE                                   0x8
#define _FSR1L_FSR1L_LENGTH                                 0x8
#define _FSR1L_FSR1L_MASK                                   0xFF

// Register: FSR1H
#define FSR1H FSR1H
extern volatile unsigned char           FSR1H               __at(0x3FE2);
#ifndef _LIB_BUILD
asm("FSR1H equ 03FE2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR1H                  :6;
    };
} FSR1Hbits_t;
extern volatile FSR1Hbits_t FSR1Hbits __at(0x3FE2);
// bitfield macros
#define _FSR1H_FSR1H_POSN                                   0x0
#define _FSR1H_FSR1H_POSITION                               0x0
#define _FSR1H_FSR1H_SIZE                                   0x6
#define _FSR1H_FSR1H_LENGTH                                 0x6
#define _FSR1H_FSR1H_MASK                                   0x3F

// Register: PLUSW1
#define PLUSW1 PLUSW1
extern volatile unsigned char           PLUSW1              __at(0x3FE3);
#ifndef _LIB_BUILD
asm("PLUSW1 equ 03FE3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PLUSW1                 :8;
    };
} PLUSW1bits_t;
extern volatile PLUSW1bits_t PLUSW1bits __at(0x3FE3);
// bitfield macros
#define _PLUSW1_PLUSW1_POSN                                 0x0
#define _PLUSW1_PLUSW1_POSITION                             0x0
#define _PLUSW1_PLUSW1_SIZE                                 0x8
#define _PLUSW1_PLUSW1_LENGTH                               0x8
#define _PLUSW1_PLUSW1_MASK                                 0xFF

// Register: PREINC1
#define PREINC1 PREINC1
extern volatile unsigned char           PREINC1             __at(0x3FE4);
#ifndef _LIB_BUILD
asm("PREINC1 equ 03FE4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PREINC1                :8;
    };
} PREINC1bits_t;
extern volatile PREINC1bits_t PREINC1bits __at(0x3FE4);
// bitfield macros
#define _PREINC1_PREINC1_POSN                               0x0
#define _PREINC1_PREINC1_POSITION                           0x0
#define _PREINC1_PREINC1_SIZE                               0x8
#define _PREINC1_PREINC1_LENGTH                             0x8
#define _PREINC1_PREINC1_MASK                               0xFF

// Register: POSTDEC1
#define POSTDEC1 POSTDEC1
extern volatile unsigned char           POSTDEC1            __at(0x3FE5);
#ifndef _LIB_BUILD
asm("POSTDEC1 equ 03FE5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned POSTDEC1               :8;
    };
} POSTDEC1bits_t;
extern volatile POSTDEC1bits_t POSTDEC1bits __at(0x3FE5);
// bitfield macros
#define _POSTDEC1_POSTDEC1_POSN                             0x0
#define _POSTDEC1_POSTDEC1_POSITION                         0x0
#define _POSTDEC1_POSTDEC1_SIZE                             0x8
#define _POSTDEC1_POSTDEC1_LENGTH                           0x8
#define _POSTDEC1_POSTDEC1_MASK                             0xFF

// Register: POSTINC1
#define POSTINC1 POSTINC1
extern volatile unsigned char           POSTINC1            __at(0x3FE6);
#ifndef _LIB_BUILD
asm("POSTINC1 equ 03FE6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned POSTINC1               :8;
    };
} POSTINC1bits_t;
extern volatile POSTINC1bits_t POSTINC1bits __at(0x3FE6);
// bitfield macros
#define _POSTINC1_POSTINC1_POSN                             0x0
#define _POSTINC1_POSTINC1_POSITION                         0x0
#define _POSTINC1_POSTINC1_SIZE                             0x8
#define _POSTINC1_POSTINC1_LENGTH                           0x8
#define _POSTINC1_POSTINC1_MASK                             0xFF

// Register: INDF1
#define INDF1 INDF1
extern volatile unsigned char           INDF1               __at(0x3FE7);
#ifndef _LIB_BUILD
asm("INDF1 equ 03FE7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INDF1                  :8;
    };
} INDF1bits_t;
extern volatile INDF1bits_t INDF1bits __at(0x3FE7);
// bitfield macros
#define _INDF1_INDF1_POSN                                   0x0
#define _INDF1_INDF1_POSITION                               0x0
#define _INDF1_INDF1_SIZE                                   0x8
#define _INDF1_INDF1_LENGTH                                 0x8
#define _INDF1_INDF1_MASK                                   0xFF

// Register: WREG
#define WREG WREG
extern volatile unsigned char           WREG                __at(0x3FE8);
#ifndef _LIB_BUILD
asm("WREG equ 03FE8h");
#endif
// aliases
// extern volatile unsigned char           W                   __at(0x3FE8);
#ifndef _LIB_BUILD
// asm("W equ 03FE8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WREG                   :8;
    };
} WREGbits_t;
extern volatile WREGbits_t WREGbits __at(0x3FE8);
// bitfield macros
#define _WREG_WREG_POSN                                     0x0
#define _WREG_WREG_POSITION                                 0x0
#define _WREG_WREG_SIZE                                     0x8
#define _WREG_WREG_LENGTH                                   0x8
#define _WREG_WREG_MASK                                     0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned WREG                   :8;
    };
} Wbits_t;
extern volatile Wbits_t Wbits __at(0x3FE8);
// bitfield macros
#define _W_WREG_POSN                                        0x0
#define _W_WREG_POSITION                                    0x0
#define _W_WREG_SIZE                                        0x8
#define _W_WREG_LENGTH                                      0x8
#define _W_WREG_MASK                                        0xFF

// Register: FSR0
#define FSR0 FSR0
extern volatile unsigned short          FSR0                __at(0x3FE9);
#ifndef _LIB_BUILD
asm("FSR0 equ 03FE9h");
#endif

// Register: FSR0L
#define FSR0L FSR0L
extern volatile unsigned char           FSR0L               __at(0x3FE9);
#ifndef _LIB_BUILD
asm("FSR0L equ 03FE9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR0L                  :8;
    };
} FSR0Lbits_t;
extern volatile FSR0Lbits_t FSR0Lbits __at(0x3FE9);
// bitfield macros
#define _FSR0L_FSR0L_POSN                                   0x0
#define _FSR0L_FSR0L_POSITION                               0x0
#define _FSR0L_FSR0L_SIZE                                   0x8
#define _FSR0L_FSR0L_LENGTH                                 0x8
#define _FSR0L_FSR0L_MASK                                   0xFF

// Register: FSR0H
#define FSR0H FSR0H
extern volatile unsigned char           FSR0H               __at(0x3FEA);
#ifndef _LIB_BUILD
asm("FSR0H equ 03FEAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR0H                  :6;
    };
} FSR0Hbits_t;
extern volatile FSR0Hbits_t FSR0Hbits __at(0x3FEA);
// bitfield macros
#define _FSR0H_FSR0H_POSN                                   0x0
#define _FSR0H_FSR0H_POSITION                               0x0
#define _FSR0H_FSR0H_SIZE                                   0x6
#define _FSR0H_FSR0H_LENGTH                                 0x6
#define _FSR0H_FSR0H_MASK                                   0x3F

// Register: PLUSW0
#define PLUSW0 PLUSW0
extern volatile unsigned char           PLUSW0              __at(0x3FEB);
#ifndef _LIB_BUILD
asm("PLUSW0 equ 03FEBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PLUSW0                 :8;
    };
} PLUSW0bits_t;
extern volatile PLUSW0bits_t PLUSW0bits __at(0x3FEB);
// bitfield macros
#define _PLUSW0_PLUSW0_POSN                                 0x0
#define _PLUSW0_PLUSW0_POSITION                             0x0
#define _PLUSW0_PLUSW0_SIZE                                 0x8
#define _PLUSW0_PLUSW0_LENGTH                               0x8
#define _PLUSW0_PLUSW0_MASK                                 0xFF

// Register: PREINC0
#define PREINC0 PREINC0
extern volatile unsigned char           PREINC0             __at(0x3FEC);
#ifndef _LIB_BUILD
asm("PREINC0 equ 03FECh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PREINC0                :8;
    };
} PREINC0bits_t;
extern volatile PREINC0bits_t PREINC0bits __at(0x3FEC);
// bitfield macros
#define _PREINC0_PREINC0_POSN                               0x0
#define _PREINC0_PREINC0_POSITION                           0x0
#define _PREINC0_PREINC0_SIZE                               0x8
#define _PREINC0_PREINC0_LENGTH                             0x8
#define _PREINC0_PREINC0_MASK                               0xFF

// Register: POSTDEC0
#define POSTDEC0 POSTDEC0
extern volatile unsigned char           POSTDEC0            __at(0x3FED);
#ifndef _LIB_BUILD
asm("POSTDEC0 equ 03FEDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned POSTDEC0               :8;
    };
} POSTDEC0bits_t;
extern volatile POSTDEC0bits_t POSTDEC0bits __at(0x3FED);
// bitfield macros
#define _POSTDEC0_POSTDEC0_POSN                             0x0
#define _POSTDEC0_POSTDEC0_POSITION                         0x0
#define _POSTDEC0_POSTDEC0_SIZE                             0x8
#define _POSTDEC0_POSTDEC0_LENGTH                           0x8
#define _POSTDEC0_POSTDEC0_MASK                             0xFF

// Register: POSTINC0
#define POSTINC0 POSTINC0
extern volatile unsigned char           POSTINC0            __at(0x3FEE);
#ifndef _LIB_BUILD
asm("POSTINC0 equ 03FEEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned POSTINC0               :8;
    };
} POSTINC0bits_t;
extern volatile POSTINC0bits_t POSTINC0bits __at(0x3FEE);
// bitfield macros
#define _POSTINC0_POSTINC0_POSN                             0x0
#define _POSTINC0_POSTINC0_POSITION                         0x0
#define _POSTINC0_POSTINC0_SIZE                             0x8
#define _POSTINC0_POSTINC0_LENGTH                           0x8
#define _POSTINC0_POSTINC0_MASK                             0xFF

// Register: INDF0
#define INDF0 INDF0
extern volatile unsigned char           INDF0               __at(0x3FEF);
#ifndef _LIB_BUILD
asm("INDF0 equ 03FEFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INDF0                  :8;
    };
} INDF0bits_t;
extern volatile INDF0bits_t INDF0bits __at(0x3FEF);
// bitfield macros
#define _INDF0_INDF0_POSN                                   0x0
#define _INDF0_INDF0_POSITION                               0x0
#define _INDF0_INDF0_SIZE                                   0x8
#define _INDF0_INDF0_LENGTH                                 0x8
#define _INDF0_INDF0_MASK                                   0xFF

// Register: PCON0
#define PCON0 PCON0
extern volatile unsigned char           PCON0               __at(0x3FF0);
#ifndef _LIB_BUILD
asm("PCON0 equ 03FF0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NOT_BOR                :1;
    };
    struct {
        unsigned                        :1;
        unsigned NOT_POR                :1;
    };
    struct {
        unsigned                        :2;
        unsigned NOT_RI                 :1;
    };
    struct {
        unsigned                        :3;
        unsigned NOT_RMCLR              :1;
    };
    struct {
        unsigned                        :4;
        unsigned NOT_RWDT               :1;
    };
    struct {
        unsigned                        :5;
        unsigned NOT_WDTWV              :1;
    };
    struct {
        unsigned nBOR                   :1;
        unsigned nPOR                   :1;
        unsigned nRI                    :1;
        unsigned nRMCLR                 :1;
        unsigned nRWDT                  :1;
        unsigned nWDTWV                 :1;
        unsigned STKUNF                 :1;
        unsigned STKOVF                 :1;
    };
    struct {
        unsigned BOR                    :1;
        unsigned POR                    :1;
        unsigned RI                     :1;
        unsigned RMCLR                  :1;
        unsigned RWDT                   :1;
        unsigned WDTWV                  :1;
    };
} PCON0bits_t;
extern volatile PCON0bits_t PCON0bits __at(0x3FF0);
// bitfield macros
#define _PCON0_NOT_BOR_POSN                                 0x0
#define _PCON0_NOT_BOR_POSITION                             0x0
#define _PCON0_NOT_BOR_SIZE                                 0x1
#define _PCON0_NOT_BOR_LENGTH                               0x1
#define _PCON0_NOT_BOR_MASK                                 0x1
#define _PCON0_NOT_POR_POSN                                 0x1
#define _PCON0_NOT_POR_POSITION                             0x1
#define _PCON0_NOT_POR_SIZE                                 0x1
#define _PCON0_NOT_POR_LENGTH                               0x1
#define _PCON0_NOT_POR_MASK                                 0x2
#define _PCON0_NOT_RI_POSN                                  0x2
#define _PCON0_NOT_RI_POSITION                              0x2
#define _PCON0_NOT_RI_SIZE                                  0x1
#define _PCON0_NOT_RI_LENGTH                                0x1
#define _PCON0_NOT_RI_MASK                                  0x4
#define _PCON0_NOT_RMCLR_POSN                               0x3
#define _PCON0_NOT_RMCLR_POSITION                           0x3
#define _PCON0_NOT_RMCLR_SIZE                               0x1
#define _PCON0_NOT_RMCLR_LENGTH                             0x1
#define _PCON0_NOT_RMCLR_MASK                               0x8
#define _PCON0_NOT_RWDT_POSN                                0x4
#define _PCON0_NOT_RWDT_POSITION                            0x4
#define _PCON0_NOT_RWDT_SIZE                                0x1
#define _PCON0_NOT_RWDT_LENGTH                              0x1
#define _PCON0_NOT_RWDT_MASK                                0x10
#define _PCON0_NOT_WDTWV_POSN                               0x5
#define _PCON0_NOT_WDTWV_POSITION                           0x5
#define _PCON0_NOT_WDTWV_SIZE                               0x1
#define _PCON0_NOT_WDTWV_LENGTH                             0x1
#define _PCON0_NOT_WDTWV_MASK                               0x20
#define _PCON0_nBOR_POSN                                    0x0
#define _PCON0_nBOR_POSITION                                0x0
#define _PCON0_nBOR_SIZE                                    0x1
#define _PCON0_nBOR_LENGTH                                  0x1
#define _PCON0_nBOR_MASK                                    0x1
#define _PCON0_nPOR_POSN                                    0x1
#define _PCON0_nPOR_POSITION                                0x1
#define _PCON0_nPOR_SIZE                                    0x1
#define _PCON0_nPOR_LENGTH                                  0x1
#define _PCON0_nPOR_MASK                                    0x2
#define _PCON0_nRI_POSN                                     0x2
#define _PCON0_nRI_POSITION                                 0x2
#define _PCON0_nRI_SIZE                                     0x1
#define _PCON0_nRI_LENGTH                                   0x1
#define _PCON0_nRI_MASK                                     0x4
#define _PCON0_nRMCLR_POSN                                  0x3
#define _PCON0_nRMCLR_POSITION                              0x3
#define _PCON0_nRMCLR_SIZE                                  0x1
#define _PCON0_nRMCLR_LENGTH                                0x1
#define _PCON0_nRMCLR_MASK                                  0x8
#define _PCON0_nRWDT_POSN                                   0x4
#define _PCON0_nRWDT_POSITION                               0x4
#define _PCON0_nRWDT_SIZE                                   0x1
#define _PCON0_nRWDT_LENGTH                                 0x1
#define _PCON0_nRWDT_MASK                                   0x10
#define _PCON0_nWDTWV_POSN                                  0x5
#define _PCON0_nWDTWV_POSITION                              0x5
#define _PCON0_nWDTWV_SIZE                                  0x1
#define _PCON0_nWDTWV_LENGTH                                0x1
#define _PCON0_nWDTWV_MASK                                  0x20
#define _PCON0_STKUNF_POSN                                  0x6
#define _PCON0_STKUNF_POSITION                              0x6
#define _PCON0_STKUNF_SIZE                                  0x1
#define _PCON0_STKUNF_LENGTH                                0x1
#define _PCON0_STKUNF_MASK                                  0x40
#define _PCON0_STKOVF_POSN                                  0x7
#define _PCON0_STKOVF_POSITION                              0x7
#define _PCON0_STKOVF_SIZE                                  0x1
#define _PCON0_STKOVF_LENGTH                                0x1
#define _PCON0_STKOVF_MASK                                  0x80
#define _PCON0_BOR_POSN                                     0x0
#define _PCON0_BOR_POSITION                                 0x0
#define _PCON0_BOR_SIZE                                     0x1
#define _PCON0_BOR_LENGTH                                   0x1
#define _PCON0_BOR_MASK                                     0x1
#define _PCON0_POR_POSN                                     0x1
#define _PCON0_POR_POSITION                                 0x1
#define _PCON0_POR_SIZE                                     0x1
#define _PCON0_POR_LENGTH                                   0x1
#define _PCON0_POR_MASK                                     0x2
#define _PCON0_RI_POSN                                      0x2
#define _PCON0_RI_POSITION                                  0x2
#define _PCON0_RI_SIZE                                      0x1
#define _PCON0_RI_LENGTH                                    0x1
#define _PCON0_RI_MASK                                      0x4
#define _PCON0_RMCLR_POSN                                   0x3
#define _PCON0_RMCLR_POSITION                               0x3
#define _PCON0_RMCLR_SIZE                                   0x1
#define _PCON0_RMCLR_LENGTH                                 0x1
#define _PCON0_RMCLR_MASK                                   0x8
#define _PCON0_RWDT_POSN                                    0x4
#define _PCON0_RWDT_POSITION                                0x4
#define _PCON0_RWDT_SIZE                                    0x1
#define _PCON0_RWDT_LENGTH                                  0x1
#define _PCON0_RWDT_MASK                                    0x10
#define _PCON0_WDTWV_POSN                                   0x5
#define _PCON0_WDTWV_POSITION                               0x5
#define _PCON0_WDTWV_SIZE                                   0x1
#define _PCON0_WDTWV_LENGTH                                 0x1
#define _PCON0_WDTWV_MASK                                   0x20

// Register: PCON1
#define PCON1 PCON1
extern volatile unsigned char           PCON1               __at(0x3FF1);
#ifndef _LIB_BUILD
asm("PCON1 equ 03FF1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :1;
        unsigned NOT_MEMV               :1;
    };
    struct {
        unsigned                        :1;
        unsigned nMEMV                  :1;
    };
    struct {
        unsigned                        :1;
        unsigned MEMV                   :1;
    };
} PCON1bits_t;
extern volatile PCON1bits_t PCON1bits __at(0x3FF1);
// bitfield macros
#define _PCON1_NOT_MEMV_POSN                                0x1
#define _PCON1_NOT_MEMV_POSITION                            0x1
#define _PCON1_NOT_MEMV_SIZE                                0x1
#define _PCON1_NOT_MEMV_LENGTH                              0x1
#define _PCON1_NOT_MEMV_MASK                                0x2
#define _PCON1_nMEMV_POSN                                   0x1
#define _PCON1_nMEMV_POSITION                               0x1
#define _PCON1_nMEMV_SIZE                                   0x1
#define _PCON1_nMEMV_LENGTH                                 0x1
#define _PCON1_nMEMV_MASK                                   0x2
#define _PCON1_MEMV_POSN                                    0x1
#define _PCON1_MEMV_POSITION                                0x1
#define _PCON1_MEMV_SIZE                                    0x1
#define _PCON1_MEMV_LENGTH                                  0x1
#define _PCON1_MEMV_MASK                                    0x2

// Register: PROD
#define PROD PROD
extern volatile unsigned short          PROD                __at(0x3FF3);
#ifndef _LIB_BUILD
asm("PROD equ 03FF3h");
#endif

// Register: PRODL
#define PRODL PRODL
extern volatile unsigned char           PRODL               __at(0x3FF3);
#ifndef _LIB_BUILD
asm("PRODL equ 03FF3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PRODL                  :8;
    };
} PRODLbits_t;
extern volatile PRODLbits_t PRODLbits __at(0x3FF3);
// bitfield macros
#define _PRODL_PRODL_POSN                                   0x0
#define _PRODL_PRODL_POSITION                               0x0
#define _PRODL_PRODL_SIZE                                   0x8
#define _PRODL_PRODL_LENGTH                                 0x8
#define _PRODL_PRODL_MASK                                   0xFF

// Register: PRODH
#define PRODH PRODH
extern volatile unsigned char           PRODH               __at(0x3FF4);
#ifndef _LIB_BUILD
asm("PRODH equ 03FF4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PRODH                  :8;
    };
} PRODHbits_t;
extern volatile PRODHbits_t PRODHbits __at(0x3FF4);
// bitfield macros
#define _PRODH_PRODH_POSN                                   0x0
#define _PRODH_PRODH_POSITION                               0x0
#define _PRODH_PRODH_SIZE                                   0x8
#define _PRODH_PRODH_LENGTH                                 0x8
#define _PRODH_PRODH_MASK                                   0xFF

// Register: TABLAT
#define TABLAT TABLAT
extern volatile unsigned char           TABLAT              __at(0x3FF5);
#ifndef _LIB_BUILD
asm("TABLAT equ 03FF5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TABLAT                 :8;
    };
} TABLATbits_t;
extern volatile TABLATbits_t TABLATbits __at(0x3FF5);
// bitfield macros
#define _TABLAT_TABLAT_POSN                                 0x0
#define _TABLAT_TABLAT_POSITION                             0x0
#define _TABLAT_TABLAT_SIZE                                 0x8
#define _TABLAT_TABLAT_LENGTH                               0x8
#define _TABLAT_TABLAT_MASK                                 0xFF

// Register: TBLPTR
#define TBLPTR TBLPTR
#ifndef __CCI__
extern volatile __uint24                TBLPTR              __at(0x3FF6);
#endif
#ifndef _LIB_BUILD
asm("TBLPTR equ 03FF6h");
#endif

// Register: TBLPTRL
#define TBLPTRL TBLPTRL
extern volatile unsigned char           TBLPTRL             __at(0x3FF6);
#ifndef _LIB_BUILD
asm("TBLPTRL equ 03FF6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TBLPTRL                :8;
    };
} TBLPTRLbits_t;
extern volatile TBLPTRLbits_t TBLPTRLbits __at(0x3FF6);
// bitfield macros
#define _TBLPTRL_TBLPTRL_POSN                               0x0
#define _TBLPTRL_TBLPTRL_POSITION                           0x0
#define _TBLPTRL_TBLPTRL_SIZE                               0x8
#define _TBLPTRL_TBLPTRL_LENGTH                             0x8
#define _TBLPTRL_TBLPTRL_MASK                               0xFF

// Register: TBLPTRH
#define TBLPTRH TBLPTRH
extern volatile unsigned char           TBLPTRH             __at(0x3FF7);
#ifndef _LIB_BUILD
asm("TBLPTRH equ 03FF7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TBLPTRH                :8;
    };
} TBLPTRHbits_t;
extern volatile TBLPTRHbits_t TBLPTRHbits __at(0x3FF7);
// bitfield macros
#define _TBLPTRH_TBLPTRH_POSN                               0x0
#define _TBLPTRH_TBLPTRH_POSITION                           0x0
#define _TBLPTRH_TBLPTRH_SIZE                               0x8
#define _TBLPTRH_TBLPTRH_LENGTH                             0x8
#define _TBLPTRH_TBLPTRH_MASK                               0xFF

// Register: TBLPTRU
#define TBLPTRU TBLPTRU
extern volatile unsigned char           TBLPTRU             __at(0x3FF8);
#ifndef _LIB_BUILD
asm("TBLPTRU equ 03FF8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TBLPTRU                :6;
    };
} TBLPTRUbits_t;
extern volatile TBLPTRUbits_t TBLPTRUbits __at(0x3FF8);
// bitfield macros
#define _TBLPTRU_TBLPTRU_POSN                               0x0
#define _TBLPTRU_TBLPTRU_POSITION                           0x0
#define _TBLPTRU_TBLPTRU_SIZE                               0x6
#define _TBLPTRU_TBLPTRU_LENGTH                             0x6
#define _TBLPTRU_TBLPTRU_MASK                               0x3F

// Register: PCLAT
#define PCLAT PCLAT
#ifndef __CCI__
extern volatile __uint24                PCLAT               __at(0x3FF9);
#endif
#ifndef _LIB_BUILD
asm("PCLAT equ 03FF9h");
#endif

// Register: PCL
#define PCL PCL
extern volatile unsigned char           PCL                 __at(0x3FF9);
#ifndef _LIB_BUILD
asm("PCL equ 03FF9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PCL                    :8;
    };
} PCLbits_t;
extern volatile PCLbits_t PCLbits __at(0x3FF9);
// bitfield macros
#define _PCL_PCL_POSN                                       0x0
#define _PCL_PCL_POSITION                                   0x0
#define _PCL_PCL_SIZE                                       0x8
#define _PCL_PCL_LENGTH                                     0x8
#define _PCL_PCL_MASK                                       0xFF

// Register: PCLATH
#define PCLATH PCLATH
extern volatile unsigned char           PCLATH              __at(0x3FFA);
#ifndef _LIB_BUILD
asm("PCLATH equ 03FFAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PCH                    :8;
    };
} PCLATHbits_t;
extern volatile PCLATHbits_t PCLATHbits __at(0x3FFA);
// bitfield macros
#define _PCLATH_PCH_POSN                                    0x0
#define _PCLATH_PCH_POSITION                                0x0
#define _PCLATH_PCH_SIZE                                    0x8
#define _PCLATH_PCH_LENGTH                                  0x8
#define _PCLATH_PCH_MASK                                    0xFF

// Register: PCLATU
#define PCLATU PCLATU
extern volatile unsigned char           PCLATU              __at(0x3FFB);
#ifndef _LIB_BUILD
asm("PCLATU equ 03FFBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PCU                    :5;
    };
} PCLATUbits_t;
extern volatile PCLATUbits_t PCLATUbits __at(0x3FFB);
// bitfield macros
#define _PCLATU_PCU_POSN                                    0x0
#define _PCLATU_PCU_POSITION                                0x0
#define _PCLATU_PCU_SIZE                                    0x5
#define _PCLATU_PCU_LENGTH                                  0x5
#define _PCLATU_PCU_MASK                                    0x1F

// Register: STKPTR
#define STKPTR STKPTR
extern volatile unsigned char           STKPTR              __at(0x3FFC);
#ifndef _LIB_BUILD
asm("STKPTR equ 03FFCh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned STKPTR                 :5;
    };
    struct {
        unsigned STKPTR0                :1;
        unsigned STKPTR1                :1;
        unsigned STKPTR2                :1;
        unsigned STKPTR3                :1;
        unsigned STKPTR4                :1;
    };
    struct {
        unsigned SP0                    :1;
        unsigned SP1                    :1;
        unsigned SP2                    :1;
        unsigned SP3                    :1;
        unsigned SP4                    :1;
    };
} STKPTRbits_t;
extern volatile STKPTRbits_t STKPTRbits __at(0x3FFC);
// bitfield macros
#define _STKPTR_STKPTR_POSN                                 0x0
#define _STKPTR_STKPTR_POSITION                             0x0
#define _STKPTR_STKPTR_SIZE                                 0x5
#define _STKPTR_STKPTR_LENGTH                               0x5
#define _STKPTR_STKPTR_MASK                                 0x1F
#define _STKPTR_STKPTR0_POSN                                0x0
#define _STKPTR_STKPTR0_POSITION                            0x0
#define _STKPTR_STKPTR0_SIZE                                0x1
#define _STKPTR_STKPTR0_LENGTH                              0x1
#define _STKPTR_STKPTR0_MASK                                0x1
#define _STKPTR_STKPTR1_POSN                                0x1
#define _STKPTR_STKPTR1_POSITION                            0x1
#define _STKPTR_STKPTR1_SIZE                                0x1
#define _STKPTR_STKPTR1_LENGTH                              0x1
#define _STKPTR_STKPTR1_MASK                                0x2
#define _STKPTR_STKPTR2_POSN                                0x2
#define _STKPTR_STKPTR2_POSITION                            0x2
#define _STKPTR_STKPTR2_SIZE                                0x1
#define _STKPTR_STKPTR2_LENGTH                              0x1
#define _STKPTR_STKPTR2_MASK                                0x4
#define _STKPTR_STKPTR3_POSN                                0x3
#define _STKPTR_STKPTR3_POSITION                            0x3
#define _STKPTR_STKPTR3_SIZE                                0x1
#define _STKPTR_STKPTR3_LENGTH                              0x1
#define _STKPTR_STKPTR3_MASK                                0x8
#define _STKPTR_STKPTR4_POSN                                0x4
#define _STKPTR_STKPTR4_POSITION                            0x4
#define _STKPTR_STKPTR4_SIZE                                0x1
#define _STKPTR_STKPTR4_LENGTH                              0x1
#define _STKPTR_STKPTR4_MASK                                0x10
#define _STKPTR_SP0_POSN                                    0x0
#define _STKPTR_SP0_POSITION                                0x0
#define _STKPTR_SP0_SIZE                                    0x1
#define _STKPTR_SP0_LENGTH                                  0x1
#define _STKPTR_SP0_MASK                                    0x1
#define _STKPTR_SP1_POSN                                    0x1
#define _STKPTR_SP1_POSITION                                0x1
#define _STKPTR_SP1_SIZE                                    0x1
#define _STKPTR_SP1_LENGTH                                  0x1
#define _STKPTR_SP1_MASK                                    0x2
#define _STKPTR_SP2_POSN                                    0x2
#define _STKPTR_SP2_POSITION                                0x2
#define _STKPTR_SP2_SIZE                                    0x1
#define _STKPTR_SP2_LENGTH                                  0x1
#define _STKPTR_SP2_MASK                                    0x4
#define _STKPTR_SP3_POSN                                    0x3
#define _STKPTR_SP3_POSITION                                0x3
#define _STKPTR_SP3_SIZE                                    0x1
#define _STKPTR_SP3_LENGTH                                  0x1
#define _STKPTR_SP3_MASK                                    0x8
#define _STKPTR_SP4_POSN                                    0x4
#define _STKPTR_SP4_POSITION                                0x4
#define _STKPTR_SP4_SIZE                                    0x1
#define _STKPTR_SP4_LENGTH                                  0x1
#define _STKPTR_SP4_MASK                                    0x10

// Register: TOS
#define TOS TOS
#ifndef __CCI__
extern volatile __uint24                TOS                 __at(0x3FFD);
#endif
#ifndef _LIB_BUILD
asm("TOS equ 03FFDh");
#endif

// Register: TOSL
#define TOSL TOSL
extern volatile unsigned char           TOSL                __at(0x3FFD);
#ifndef _LIB_BUILD
asm("TOSL equ 03FFDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TOSL                   :8;
    };
} TOSLbits_t;
extern volatile TOSLbits_t TOSLbits __at(0x3FFD);
// bitfield macros
#define _TOSL_TOSL_POSN                                     0x0
#define _TOSL_TOSL_POSITION                                 0x0
#define _TOSL_TOSL_SIZE                                     0x8
#define _TOSL_TOSL_LENGTH                                   0x8
#define _TOSL_TOSL_MASK                                     0xFF

// Register: TOSH
#define TOSH TOSH
extern volatile unsigned char           TOSH                __at(0x3FFE);
#ifndef _LIB_BUILD
asm("TOSH equ 03FFEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TOSH                   :8;
    };
} TOSHbits_t;
extern volatile TOSHbits_t TOSHbits __at(0x3FFE);
// bitfield macros
#define _TOSH_TOSH_POSN                                     0x0
#define _TOSH_TOSH_POSITION                                 0x0
#define _TOSH_TOSH_SIZE                                     0x8
#define _TOSH_TOSH_LENGTH                                   0x8
#define _TOSH_TOSH_MASK                                     0xFF

// Register: TOSU
#define TOSU TOSU
extern volatile unsigned char           TOSU                __at(0x3FFF);
#ifndef _LIB_BUILD
asm("TOSU equ 03FFFh");
#endif

/*
 * Register Mirrors in DMA Space
 */

// Register: IOCAF
#define                                 IOCAF_M1            0x4060
// Register: IOCBF
#define                                 IOCBF_M1            0x4061
// Register: IOCCF
#define                                 IOCCF_M1            0x4062
// Register: IOCEF
#define                                 IOCEF_M1            0x4063
// Register: ADLTHL
#define                                 ADLTHL_M1           0x4080
// Register: ADLTHH
#define                                 ADLTHH_M1           0x4081
// Register: ADUTHL
#define                                 ADUTHL_M1           0x4082
// Register: ADUTHH
#define                                 ADUTHH_M1           0x4083
// Register: ADERRL
#define                                 ADERRL_M1           0x4084
// Register: ADERRH
#define                                 ADERRH_M1           0x4085
// Register: ADSTPTL
#define                                 ADSTPTL_M1          0x4086
// Register: ADSTPTH
#define                                 ADSTPTH_M1          0x4087
// Register: ADFLTRL
#define                                 ADFLTRL_M1          0x4088
// Register: ADFLTRH
#define                                 ADFLTRH_M1          0x4089
// Register: ADACCL
#define                                 ADACCL_M1           0x408A
// Register: ADACCH
#define                                 ADACCH_M1           0x408B
// Register: ADACCU
#define                                 ADACCU_M1           0x408C
// Register: ADCNT
#define                                 ADCNT_M1            0x408D
// Register: ADRPT
#define                                 ADRPT_M1            0x408E
// Register: ADPREVL
#define                                 ADPREVL_M1          0x408F
// Register: ADPREVH
#define                                 ADPREVH_M1          0x4090
// Register: ADACQL
#define                                 ADACQL_M1           0x4091
// Register: ADACQH
#define                                 ADACQH_M1           0x4092
// Register: ADCAP
#define                                 ADCAP_M1            0x4093
// Register: ADPCH
#define                                 ADPCH_M1            0x4094
// Register: ADRESL
#define                                 ADRESL_M1           0x4095
// Register: ADRESH
#define                                 ADRESH_M1           0x4096
// Register: ADLTHL
#define                                 ADLTHL_M2           0x40A0
// Register: ADLTHH
#define                                 ADLTHH_M2           0x40A1
// Register: ADUTHL
#define                                 ADUTHL_M2           0x40A2
// Register: ADUTHH
#define                                 ADUTHH_M2           0x40A3
// Register: ADERRL
#define                                 ADERRL_M2           0x40A4
// Register: ADERRH
#define                                 ADERRH_M2           0x40A5
// Register: ADSTPTL
#define                                 ADSTPTL_M2          0x40A6
// Register: ADSTPTH
#define                                 ADSTPTH_M2          0x40A7
// Register: ADFLTRL
#define                                 ADFLTRL_M2          0x40A8
// Register: ADFLTRH
#define                                 ADFLTRH_M2          0x40A9
// Register: ADACCL
#define                                 ADACCL_M2           0x40AA
// Register: ADACCH
#define                                 ADACCH_M2           0x40AB
// Register: ADACCU
#define                                 ADACCU_M2           0x40AC
// Register: ADCNT
#define                                 ADCNT_M2            0x40AD
// Register: ADRPT
#define                                 ADRPT_M2            0x40AE
// Register: ADPREVL
#define                                 ADPREVL_M2          0x40AF
// Register: ADPREVH
#define                                 ADPREVH_M2          0x40B0
// Register: ADACQL
#define                                 ADACQL_M2           0x40B1
// Register: ADACQH
#define                                 ADACQH_M2           0x40B2
// Register: ADCAP
#define                                 ADCAP_M2            0x40B3
// Register: ADCON0
#define                                 ADCON0_M1           0x40B4
// Register: ADCON1
#define                                 ADCON1_M1           0x40B5
// Register: ADCON2
#define                                 ADCON2_M1           0x40B6
// Register: ADCON3
#define                                 ADCON3_M1           0x40B7
// Register: ADREF
#define                                 ADREF_M1            0x40B8
// Register: ADACT
#define                                 ADACT_M1            0x40B9
// Register: ADCLK
#define                                 ADCLK_M1            0x40BA
// Register: ADPCH
#define                                 ADPCH_M2            0x40BB
// Register: ADRESL
#define                                 ADRESL_M2           0x40BC
// Register: ADRESH
#define                                 ADRESH_M2           0x40BD
// Register: CCPR1L
#define                                 CCPR1L_M1           0x40C0
// Register: CCPR1H
#define                                 CCPR1H_M1           0x40C1
// Register: T2PR
#define                                 T2PR_M1             0x40C2
// Register: CCPR2L
#define                                 CCPR2L_M1           0x40C3
// Register: CCPR2H
#define                                 CCPR2H_M1           0x40C4
// Register: T2PR
#define                                 T2PR_M2             0x40C5
// Register: PWM5DCL
#define                                 PWM5DCL_M1          0x40C6
// Register: PWM5DCH
#define                                 PWM5DCH_M1          0x40C7
// Register: T2PR
#define                                 T2PR_M3             0x40C8
// Register: PWM6DCL
#define                                 PWM6DCL_M1          0x40C9
// Register: PWM6DCH
#define                                 PWM6DCH_M1          0x40CA
// Register: T2PR
#define                                 T2PR_M4             0x40CB
// Register: CCPR3L
#define                                 CCPR3L_M1           0x40CC
// Register: CCPR3H
#define                                 CCPR3H_M1           0x40CD
// Register: T4PR
#define                                 T4PR_M1             0x40CE
// Register: CCPR4L
#define                                 CCPR4L_M1           0x40CF
// Register: CCPR4H
#define                                 CCPR4H_M1           0x40D0
// Register: T4PR
#define                                 T4PR_M2             0x40D1
// Register: PWM7DCL
#define                                 PWM7DCL_M1          0x40D2
// Register: PWM7DCH
#define                                 PWM7DCH_M1          0x40D3
// Register: T4PR
#define                                 T4PR_M3             0x40D4
// Register: PWM8DCL
#define                                 PWM8DCL_M1          0x40D5
// Register: PWM8DCH
#define                                 PWM8DCH_M1          0x40D6
// Register: T4PR
#define                                 T4PR_M4             0x40D7
// Register: CCPR1L
#define                                 CCPR1L_M2           0x40D8
// Register: CCPR1H
#define                                 CCPR1H_M2           0x40D9
// Register: T6PR
#define                                 T6PR_M1             0x40DA
// Register: PWM5DCL
#define                                 PWM5DCL_M2          0x40DB
// Register: PWM5DCH
#define                                 PWM5DCH_M2          0x40DC
// Register: T6PR
#define                                 T6PR_M2             0x40DD
// Register: CCPR1L
#define                                 CCPR1L_M3           0x40E0
// Register: CCPR1H
#define                                 CCPR1H_M3           0x40E1
// Register: CCPR2L
#define                                 CCPR2L_M2           0x40E2
// Register: CCPR2H
#define                                 CCPR2H_M2           0x40E3
// Register: CCPR3L
#define                                 CCPR3L_M2           0x40E4
// Register: CCPR3H
#define                                 CCPR3H_M2           0x40E5
// Register: CCPR4L
#define                                 CCPR4L_M2           0x40E6
// Register: CCPR4H
#define                                 CCPR4H_M2           0x40E7
// Register: PWM5DCL
#define                                 PWM5DCL_M3          0x40E8
// Register: PWM5DCH
#define                                 PWM5DCH_M3          0x40E9
// Register: PWM6DCL
#define                                 PWM6DCL_M2          0x40EA
// Register: PWM6DCH
#define                                 PWM6DCH_M2          0x40EB
// Register: PWM7DCL
#define                                 PWM7DCL_M2          0x40EC
// Register: PWM7DCH
#define                                 PWM7DCH_M2          0x40ED
// Register: PWM8DCL
#define                                 PWM8DCL_M2          0x40EE
// Register: PWM8DCH
#define                                 PWM8DCH_M2          0x40EF
// Register: TMR1L
#define                                 TMR1L_M1            0x40F6
// Register: TMR1H
#define                                 TMR1H_M1            0x40F7
// Register: TMR3L
#define                                 TMR3L_M1            0x40F8
// Register: TMR3H
#define                                 TMR3H_M1            0x40F9
// Register: TMR5L
#define                                 TMR5L_M1            0x40FA
// Register: TMR5H
#define                                 TMR5H_M1            0x40FB
/*
 * Bit Definitions
 */
#define _DEPRECATED __attribute__((__deprecated__))
#ifndef BANKMASK
#define BANKMASK(addr) ((addr)&0FFh)
#endif
#define _BIT_ACCESS(r,b) ___mkstr(BANKMASK(r)) "," ___mkstr(b)
#ifndef PAGEMASK
#define PAGEMASK(addr) ((addr)&0FFFFFh)
#endif
// ADACCU<ACC20>
extern volatile __bit                   ACC20               __at(0x1F754);	// @ (0x3EEA * 8 + 4)
#define                                 ACC20_bit           _BIT_ACCESS(ADACCU,4)
// ADACCU<ACC21>
extern volatile __bit                   ACC21               __at(0x1F755);	// @ (0x3EEA * 8 + 5)
#define                                 ACC21_bit           _BIT_ACCESS(ADACCU,5)
// ADACCU<ACC22>
extern volatile __bit                   ACC22               __at(0x1F756);	// @ (0x3EEA * 8 + 6)
#define                                 ACC22_bit           _BIT_ACCESS(ADACCU,6)
// ADACCU<ACC23>
extern volatile __bit                   ACC23               __at(0x1F757);	// @ (0x3EEA * 8 + 7)
#define                                 ACC23_bit           _BIT_ACCESS(ADACCU,7)
// CRCCON0<ACCM>
extern volatile __bit                   ACCM                __at(0x1CB44);	// @ (0x3968 * 8 + 4)
#define                                 ACCM_bit            _BIT_ACCESS(CRCCON0,4)
// I2C1PIE<ACKT1IE>
extern volatile __bit                   ACKT1IE             __at(0x1EBD6);	// @ (0x3D7A * 8 + 6)
#define                                 ACKT1IE_bit         _BIT_ACCESS(I2C1PIE,6)
// I2C1PIR<ACKT1IF>
extern volatile __bit                   ACKT1IF             __at(0x1EBCE);	// @ (0x3D79 * 8 + 6)
#define                                 ACKT1IF_bit         _BIT_ACCESS(I2C1PIR,6)
// I2C2PIE<ACKT2IE>
extern volatile __bit                   ACKT2IE             __at(0x1EB26);	// @ (0x3D64 * 8 + 6)
#define                                 ACKT2IE_bit         _BIT_ACCESS(I2C2PIE,6)
// I2C2PIR<ACKT2IF>
extern volatile __bit                   ACKT2IF             __at(0x1EB1E);	// @ (0x3D63 * 8 + 6)
#define                                 ACKT2IF_bit         _BIT_ACCESS(I2C2PIR,6)
// ADCON2<ACLR>
extern volatile __bit                   ACLR                __at(0x1F7D3);	// @ (0x3EFA * 8 + 3)
#define                                 ACLR_bit            _BIT_ACCESS(ADCON2,3)
// ADACQL<ACQ0>
extern volatile __bit                   ACQ0                __at(0x1F798);	// @ (0x3EF3 * 8 + 0)
#define                                 ACQ0_bit            _BIT_ACCESS(ADACQL,0)
// ADACQL<ACQ1>
extern volatile __bit                   ACQ1                __at(0x1F799);	// @ (0x3EF3 * 8 + 1)
#define                                 ACQ1_bit            _BIT_ACCESS(ADACQL,1)
// ADACQH<ACQ10>
extern volatile __bit                   ACQ10               __at(0x1F7A2);	// @ (0x3EF4 * 8 + 2)
#define                                 ACQ10_bit           _BIT_ACCESS(ADACQH,2)
// ADACQH<ACQ11>
extern volatile __bit                   ACQ11               __at(0x1F7A3);	// @ (0x3EF4 * 8 + 3)
#define                                 ACQ11_bit           _BIT_ACCESS(ADACQH,3)
// ADACQH<ACQ12>
extern volatile __bit                   ACQ12               __at(0x1F7A4);	// @ (0x3EF4 * 8 + 4)
#define                                 ACQ12_bit           _BIT_ACCESS(ADACQH,4)
// ADACQL<ACQ2>
extern volatile __bit                   ACQ2                __at(0x1F79A);	// @ (0x3EF3 * 8 + 2)
#define                                 ACQ2_bit            _BIT_ACCESS(ADACQL,2)
// ADACQL<ACQ3>
extern volatile __bit                   ACQ3                __at(0x1F79B);	// @ (0x3EF3 * 8 + 3)
#define                                 ACQ3_bit            _BIT_ACCESS(ADACQL,3)
// ADACQL<ACQ4>
extern volatile __bit                   ACQ4                __at(0x1F79C);	// @ (0x3EF3 * 8 + 4)
#define                                 ACQ4_bit            _BIT_ACCESS(ADACQL,4)
// ADACQL<ACQ5>
extern volatile __bit                   ACQ5                __at(0x1F79D);	// @ (0x3EF3 * 8 + 5)
#define                                 ACQ5_bit            _BIT_ACCESS(ADACQL,5)
// ADACQL<ACQ6>
extern volatile __bit                   ACQ6                __at(0x1F79E);	// @ (0x3EF3 * 8 + 6)
#define                                 ACQ6_bit            _BIT_ACCESS(ADACQL,6)
// ADACQL<ACQ7>
extern volatile __bit                   ACQ7                __at(0x1F79F);	// @ (0x3EF3 * 8 + 7)
#define                                 ACQ7_bit            _BIT_ACCESS(ADACQL,7)
// ADACQH<ACQ8>
extern volatile __bit                   ACQ8                __at(0x1F7A0);	// @ (0x3EF4 * 8 + 0)
#define                                 ACQ8_bit            _BIT_ACCESS(ADACQH,0)
// ADACQH<ACQ9>
extern volatile __bit                   ACQ9                __at(0x1F7A1);	// @ (0x3EF4 * 8 + 1)
#define                                 ACQ9_bit            _BIT_ACCESS(ADACQH,1)
// ADACT<ACT0>
extern volatile __bit                   ACT0                __at(0x1F7F0);	// @ (0x3EFE * 8 + 0)
#define                                 ACT0_bit            _BIT_ACCESS(ADACT,0)
// ADACT<ACT1>
extern volatile __bit                   ACT1                __at(0x1F7F1);	// @ (0x3EFE * 8 + 1)
#define                                 ACT1_bit            _BIT_ACCESS(ADACT,1)
// ADACT<ACT2>
extern volatile __bit                   ACT2                __at(0x1F7F2);	// @ (0x3EFE * 8 + 2)
#define                                 ACT2_bit            _BIT_ACCESS(ADACT,2)
// ADACT<ACT3>
extern volatile __bit                   ACT3                __at(0x1F7F3);	// @ (0x3EFE * 8 + 3)
#define                                 ACT3_bit            _BIT_ACCESS(ADACT,3)
// ADACT<ACT4>
extern volatile __bit                   ACT4                __at(0x1F7F4);	// @ (0x3EFE * 8 + 4)
#define                                 ACT4_bit            _BIT_ACCESS(ADACT,4)
// ADACCL<ADACC0>
extern volatile __bit                   ADACC0              __at(0x1F740);	// @ (0x3EE8 * 8 + 0)
#define                                 ADACC0_bit          _BIT_ACCESS(ADACCL,0)
// ADACCL<ADACC1>
extern volatile __bit                   ADACC1              __at(0x1F741);	// @ (0x3EE8 * 8 + 1)
#define                                 ADACC1_bit          _BIT_ACCESS(ADACCL,1)
// ADACCH<ADACC10>
extern volatile __bit                   ADACC10             __at(0x1F74A);	// @ (0x3EE9 * 8 + 2)
#define                                 ADACC10_bit         _BIT_ACCESS(ADACCH,2)
// ADACCH<ADACC11>
extern volatile __bit                   ADACC11             __at(0x1F74B);	// @ (0x3EE9 * 8 + 3)
#define                                 ADACC11_bit         _BIT_ACCESS(ADACCH,3)
// ADACCH<ADACC12>
extern volatile __bit                   ADACC12             __at(0x1F74C);	// @ (0x3EE9 * 8 + 4)
#define                                 ADACC12_bit         _BIT_ACCESS(ADACCH,4)
// ADACCH<ADACC13>
extern volatile __bit                   ADACC13             __at(0x1F74D);	// @ (0x3EE9 * 8 + 5)
#define                                 ADACC13_bit         _BIT_ACCESS(ADACCH,5)
// ADACCH<ADACC14>
extern volatile __bit                   ADACC14             __at(0x1F74E);	// @ (0x3EE9 * 8 + 6)
#define                                 ADACC14_bit         _BIT_ACCESS(ADACCH,6)
// ADACCH<ADACC15>
extern volatile __bit                   ADACC15             __at(0x1F74F);	// @ (0x3EE9 * 8 + 7)
#define                                 ADACC15_bit         _BIT_ACCESS(ADACCH,7)
// ADACCU<ADACC16>
extern volatile __bit                   ADACC16             __at(0x1F750);	// @ (0x3EEA * 8 + 0)
#define                                 ADACC16_bit         _BIT_ACCESS(ADACCU,0)
// ADACCU<ADACC17>
extern volatile __bit                   ADACC17             __at(0x1F751);	// @ (0x3EEA * 8 + 1)
#define                                 ADACC17_bit         _BIT_ACCESS(ADACCU,1)
// ADACCU<ADACC18>
extern volatile __bit                   ADACC18             __at(0x1F752);	// @ (0x3EEA * 8 + 2)
#define                                 ADACC18_bit         _BIT_ACCESS(ADACCU,2)
// ADACCU<ADACC19>
extern volatile __bit                   ADACC19             __at(0x1F753);	// @ (0x3EEA * 8 + 3)
#define                                 ADACC19_bit         _BIT_ACCESS(ADACCU,3)
// ADACCL<ADACC2>
extern volatile __bit                   ADACC2              __at(0x1F742);	// @ (0x3EE8 * 8 + 2)
#define                                 ADACC2_bit          _BIT_ACCESS(ADACCL,2)
// ADACCU<ADACC20>
extern volatile __bit                   ADACC20             __at(0x1F754);	// @ (0x3EEA * 8 + 4)
#define                                 ADACC20_bit         _BIT_ACCESS(ADACCU,4)
// ADACCU<ADACC21>
extern volatile __bit                   ADACC21             __at(0x1F755);	// @ (0x3EEA * 8 + 5)
#define                                 ADACC21_bit         _BIT_ACCESS(ADACCU,5)
// ADACCU<ADACC22>
extern volatile __bit                   ADACC22             __at(0x1F756);	// @ (0x3EEA * 8 + 6)
#define                                 ADACC22_bit         _BIT_ACCESS(ADACCU,6)
// ADACCU<ADACC23>
extern volatile __bit                   ADACC23             __at(0x1F757);	// @ (0x3EEA * 8 + 7)
#define                                 ADACC23_bit         _BIT_ACCESS(ADACCU,7)
// ADACCL<ADACC3>
extern volatile __bit                   ADACC3              __at(0x1F743);	// @ (0x3EE8 * 8 + 3)
#define                                 ADACC3_bit          _BIT_ACCESS(ADACCL,3)
// ADACCL<ADACC4>
extern volatile __bit                   ADACC4              __at(0x1F744);	// @ (0x3EE8 * 8 + 4)
#define                                 ADACC4_bit          _BIT_ACCESS(ADACCL,4)
// ADACCL<ADACC5>
extern volatile __bit                   ADACC5              __at(0x1F745);	// @ (0x3EE8 * 8 + 5)
#define                                 ADACC5_bit          _BIT_ACCESS(ADACCL,5)
// ADACCL<ADACC6>
extern volatile __bit                   ADACC6              __at(0x1F746);	// @ (0x3EE8 * 8 + 6)
#define                                 ADACC6_bit          _BIT_ACCESS(ADACCL,6)
// ADACCL<ADACC7>
extern volatile __bit                   ADACC7              __at(0x1F747);	// @ (0x3EE8 * 8 + 7)
#define                                 ADACC7_bit          _BIT_ACCESS(ADACCL,7)
// ADACCH<ADACC8>
extern volatile __bit                   ADACC8              __at(0x1F748);	// @ (0x3EE9 * 8 + 0)
#define                                 ADACC8_bit          _BIT_ACCESS(ADACCH,0)
// ADACCH<ADACC9>
extern volatile __bit                   ADACC9              __at(0x1F749);	// @ (0x3EE9 * 8 + 1)
#define                                 ADACC9_bit          _BIT_ACCESS(ADACCH,1)
// ADCON2<ADACLR>
extern volatile __bit                   ADACLR              __at(0x1F7D3);	// @ (0x3EFA * 8 + 3)
#define                                 ADACLR_bit          _BIT_ACCESS(ADCON2,3)
// ADACQL<ADACQ0>
extern volatile __bit                   ADACQ0              __at(0x1F798);	// @ (0x3EF3 * 8 + 0)
#define                                 ADACQ0_bit          _BIT_ACCESS(ADACQL,0)
// ADACQL<ADACQ1>
extern volatile __bit                   ADACQ1              __at(0x1F799);	// @ (0x3EF3 * 8 + 1)
#define                                 ADACQ1_bit          _BIT_ACCESS(ADACQL,1)
// ADACQH<ADACQ10>
extern volatile __bit                   ADACQ10             __at(0x1F7A2);	// @ (0x3EF4 * 8 + 2)
#define                                 ADACQ10_bit         _BIT_ACCESS(ADACQH,2)
// ADACQH<ADACQ11>
extern volatile __bit                   ADACQ11             __at(0x1F7A3);	// @ (0x3EF4 * 8 + 3)
#define                                 ADACQ11_bit         _BIT_ACCESS(ADACQH,3)
// ADACQH<ADACQ12>
extern volatile __bit                   ADACQ12             __at(0x1F7A4);	// @ (0x3EF4 * 8 + 4)
#define                                 ADACQ12_bit         _BIT_ACCESS(ADACQH,4)
// ADACQL<ADACQ2>
extern volatile __bit                   ADACQ2              __at(0x1F79A);	// @ (0x3EF3 * 8 + 2)
#define                                 ADACQ2_bit          _BIT_ACCESS(ADACQL,2)
// ADACQL<ADACQ3>
extern volatile __bit                   ADACQ3              __at(0x1F79B);	// @ (0x3EF3 * 8 + 3)
#define                                 ADACQ3_bit          _BIT_ACCESS(ADACQL,3)
// ADACQL<ADACQ4>
extern volatile __bit                   ADACQ4              __at(0x1F79C);	// @ (0x3EF3 * 8 + 4)
#define                                 ADACQ4_bit          _BIT_ACCESS(ADACQL,4)
// ADACQL<ADACQ5>
extern volatile __bit                   ADACQ5              __at(0x1F79D);	// @ (0x3EF3 * 8 + 5)
#define                                 ADACQ5_bit          _BIT_ACCESS(ADACQL,5)
// ADACQL<ADACQ6>
extern volatile __bit                   ADACQ6              __at(0x1F79E);	// @ (0x3EF3 * 8 + 6)
#define                                 ADACQ6_bit          _BIT_ACCESS(ADACQL,6)
// ADACQL<ADACQ7>
extern volatile __bit                   ADACQ7              __at(0x1F79F);	// @ (0x3EF3 * 8 + 7)
#define                                 ADACQ7_bit          _BIT_ACCESS(ADACQL,7)
// ADACQH<ADACQ8>
extern volatile __bit                   ADACQ8              __at(0x1F7A0);	// @ (0x3EF4 * 8 + 0)
#define                                 ADACQ8_bit          _BIT_ACCESS(ADACQH,0)
// ADACQH<ADACQ9>
extern volatile __bit                   ADACQ9              __at(0x1F7A1);	// @ (0x3EF4 * 8 + 1)
#define                                 ADACQ9_bit          _BIT_ACCESS(ADACQH,1)
// ADACT<ADACT0>
extern volatile __bit                   ADACT0              __at(0x1F7F0);	// @ (0x3EFE * 8 + 0)
#define                                 ADACT0_bit          _BIT_ACCESS(ADACT,0)
// ADACT<ADACT1>
extern volatile __bit                   ADACT1              __at(0x1F7F1);	// @ (0x3EFE * 8 + 1)
#define                                 ADACT1_bit          _BIT_ACCESS(ADACT,1)
// ADACT<ADACT2>
extern volatile __bit                   ADACT2              __at(0x1F7F2);	// @ (0x3EFE * 8 + 2)
#define                                 ADACT2_bit          _BIT_ACCESS(ADACT,2)
// ADACT<ADACT3>
extern volatile __bit                   ADACT3              __at(0x1F7F3);	// @ (0x3EFE * 8 + 3)
#define                                 ADACT3_bit          _BIT_ACCESS(ADACT,3)
// ADACT<ADACT4>
extern volatile __bit                   ADACT4              __at(0x1F7F4);	// @ (0x3EFE * 8 + 4)
#define                                 ADACT4_bit          _BIT_ACCESS(ADACT,4)
// ADSTAT<ADAOV>
extern volatile __bit                   ADAOV               __at(0x1F7E7);	// @ (0x3EFC * 8 + 7)
#define                                 ADAOV_bit           _BIT_ACCESS(ADSTAT,7)
// ADCON3<ADCALC0>
extern volatile __bit                   ADCALC0             __at(0x1F7DC);	// @ (0x3EFB * 8 + 4)
#define                                 ADCALC0_bit         _BIT_ACCESS(ADCON3,4)
// ADCON3<ADCALC1>
extern volatile __bit                   ADCALC1             __at(0x1F7DD);	// @ (0x3EFB * 8 + 5)
#define                                 ADCALC1_bit         _BIT_ACCESS(ADCON3,5)
// ADCON3<ADCALC2>
extern volatile __bit                   ADCALC2             __at(0x1F7DE);	// @ (0x3EFB * 8 + 6)
#define                                 ADCALC2_bit         _BIT_ACCESS(ADCON3,6)
// ADCAP<ADCAP0>
extern volatile __bit                   ADCAP0              __at(0x1F7A8);	// @ (0x3EF5 * 8 + 0)
#define                                 ADCAP0_bit          _BIT_ACCESS(ADCAP,0)
// ADCAP<ADCAP1>
extern volatile __bit                   ADCAP1              __at(0x1F7A9);	// @ (0x3EF5 * 8 + 1)
#define                                 ADCAP1_bit          _BIT_ACCESS(ADCAP,1)
// ADCAP<ADCAP2>
extern volatile __bit                   ADCAP2              __at(0x1F7AA);	// @ (0x3EF5 * 8 + 2)
#define                                 ADCAP2_bit          _BIT_ACCESS(ADCAP,2)
// ADCAP<ADCAP3>
extern volatile __bit                   ADCAP3              __at(0x1F7AB);	// @ (0x3EF5 * 8 + 3)
#define                                 ADCAP3_bit          _BIT_ACCESS(ADCAP,3)
// ADCAP<ADCAP4>
extern volatile __bit                   ADCAP4              __at(0x1F7AC);	// @ (0x3EF5 * 8 + 4)
#define                                 ADCAP4_bit          _BIT_ACCESS(ADCAP,4)
// PMD2<ADCMD>
extern volatile __bit                   ADCMD               __at(0x1CE15);	// @ (0x39C2 * 8 + 5)
#define                                 ADCMD_bit           _BIT_ACCESS(PMD2,5)
// ADCNT<ADCNT0>
extern volatile __bit                   ADCNT0              __at(0x1F758);	// @ (0x3EEB * 8 + 0)
#define                                 ADCNT0_bit          _BIT_ACCESS(ADCNT,0)
// ADCNT<ADCNT1>
extern volatile __bit                   ADCNT1              __at(0x1F759);	// @ (0x3EEB * 8 + 1)
#define                                 ADCNT1_bit          _BIT_ACCESS(ADCNT,1)
// ADCNT<ADCNT2>
extern volatile __bit                   ADCNT2              __at(0x1F75A);	// @ (0x3EEB * 8 + 2)
#define                                 ADCNT2_bit          _BIT_ACCESS(ADCNT,2)
// ADCNT<ADCNT3>
extern volatile __bit                   ADCNT3              __at(0x1F75B);	// @ (0x3EEB * 8 + 3)
#define                                 ADCNT3_bit          _BIT_ACCESS(ADCNT,3)
// ADCNT<ADCNT4>
extern volatile __bit                   ADCNT4              __at(0x1F75C);	// @ (0x3EEB * 8 + 4)
#define                                 ADCNT4_bit          _BIT_ACCESS(ADCNT,4)
// ADCNT<ADCNT5>
extern volatile __bit                   ADCNT5              __at(0x1F75D);	// @ (0x3EEB * 8 + 5)
#define                                 ADCNT5_bit          _BIT_ACCESS(ADCNT,5)
// ADCNT<ADCNT6>
extern volatile __bit                   ADCNT6              __at(0x1F75E);	// @ (0x3EEB * 8 + 6)
#define                                 ADCNT6_bit          _BIT_ACCESS(ADCNT,6)
// ADCNT<ADCNT7>
extern volatile __bit                   ADCNT7              __at(0x1F75F);	// @ (0x3EEB * 8 + 7)
#define                                 ADCNT7_bit          _BIT_ACCESS(ADCNT,7)
// ADCON0<ADCONT>
extern volatile __bit                   ADCONT              __at(0x1F7C6);	// @ (0x3EF8 * 8 + 6)
#define                                 ADCONT_bit          _BIT_ACCESS(ADCON0,6)
// ADCP<ADCPON>
extern volatile __bit                   ADCPON              __at(0x1F6BF);	// @ (0x3ED7 * 8 + 7)
#define                                 ADCPON_bit          _BIT_ACCESS(ADCP,7)
// ADCP<ADCPRDY>
extern volatile __bit                   ADCPRDY             __at(0x1F6B8);	// @ (0x3ED7 * 8 + 0)
#define                                 ADCPRDY_bit         _BIT_ACCESS(ADCP,0)
// ADCON2<ADCRS0>
extern volatile __bit                   ADCRS0              __at(0x1F7D4);	// @ (0x3EFA * 8 + 4)
#define                                 ADCRS0_bit          _BIT_ACCESS(ADCON2,4)
// ADCON2<ADCRS1>
extern volatile __bit                   ADCRS1              __at(0x1F7D5);	// @ (0x3EFA * 8 + 5)
#define                                 ADCRS1_bit          _BIT_ACCESS(ADCON2,5)
// ADCON2<ADCRS2>
extern volatile __bit                   ADCRS2              __at(0x1F7D6);	// @ (0x3EFA * 8 + 6)
#define                                 ADCRS2_bit          _BIT_ACCESS(ADCON2,6)
// ADCON0<ADCS>
extern volatile __bit                   ADCS                __at(0x1F7C4);	// @ (0x3EF8 * 8 + 4)
#define                                 ADCS_bit            _BIT_ACCESS(ADCON0,4)
// ADCLK<ADCS0>
extern volatile __bit                   ADCS0               __at(0x1F7F8);	// @ (0x3EFF * 8 + 0)
#define                                 ADCS0_bit           _BIT_ACCESS(ADCLK,0)
// ADCLK<ADCS1>
extern volatile __bit                   ADCS1               __at(0x1F7F9);	// @ (0x3EFF * 8 + 1)
#define                                 ADCS1_bit           _BIT_ACCESS(ADCLK,1)
// ADCLK<ADCS2>
extern volatile __bit                   ADCS2               __at(0x1F7FA);	// @ (0x3EFF * 8 + 2)
#define                                 ADCS2_bit           _BIT_ACCESS(ADCLK,2)
// ADCLK<ADCS3>
extern volatile __bit                   ADCS3               __at(0x1F7FB);	// @ (0x3EFF * 8 + 3)
#define                                 ADCS3_bit           _BIT_ACCESS(ADCLK,3)
// ADCLK<ADCS4>
extern volatile __bit                   ADCS4               __at(0x1F7FC);	// @ (0x3EFF * 8 + 4)
#define                                 ADCS4_bit           _BIT_ACCESS(ADCLK,4)
// ADCLK<ADCS5>
extern volatile __bit                   ADCS5               __at(0x1F7FD);	// @ (0x3EFF * 8 + 5)
#define                                 ADCS5_bit           _BIT_ACCESS(ADCLK,5)
// ADCON1<ADDSEN>
extern volatile __bit                   ADDSEN              __at(0x1F7C8);	// @ (0x3EF9 * 8 + 0)
#define                                 ADDSEN_bit          _BIT_ACCESS(ADCON1,0)
// ADERRL<ADERR0>
extern volatile __bit                   ADERR0              __at(0x1F710);	// @ (0x3EE2 * 8 + 0)
#define                                 ADERR0_bit          _BIT_ACCESS(ADERRL,0)
// ADERRL<ADERR1>
extern volatile __bit                   ADERR1              __at(0x1F711);	// @ (0x3EE2 * 8 + 1)
#define                                 ADERR1_bit          _BIT_ACCESS(ADERRL,1)
// ADERRH<ADERR10>
extern volatile __bit                   ADERR10             __at(0x1F71A);	// @ (0x3EE3 * 8 + 2)
#define                                 ADERR10_bit         _BIT_ACCESS(ADERRH,2)
// ADERRH<ADERR11>
extern volatile __bit                   ADERR11             __at(0x1F71B);	// @ (0x3EE3 * 8 + 3)
#define                                 ADERR11_bit         _BIT_ACCESS(ADERRH,3)
// ADERRH<ADERR12>
extern volatile __bit                   ADERR12             __at(0x1F71C);	// @ (0x3EE3 * 8 + 4)
#define                                 ADERR12_bit         _BIT_ACCESS(ADERRH,4)
// ADERRH<ADERR13>
extern volatile __bit                   ADERR13             __at(0x1F71D);	// @ (0x3EE3 * 8 + 5)
#define                                 ADERR13_bit         _BIT_ACCESS(ADERRH,5)
// ADERRH<ADERR14>
extern volatile __bit                   ADERR14             __at(0x1F71E);	// @ (0x3EE3 * 8 + 6)
#define                                 ADERR14_bit         _BIT_ACCESS(ADERRH,6)
// ADERRH<ADERR15>
extern volatile __bit                   ADERR15             __at(0x1F71F);	// @ (0x3EE3 * 8 + 7)
#define                                 ADERR15_bit         _BIT_ACCESS(ADERRH,7)
// ADERRL<ADERR2>
extern volatile __bit                   ADERR2              __at(0x1F712);	// @ (0x3EE2 * 8 + 2)
#define                                 ADERR2_bit          _BIT_ACCESS(ADERRL,2)
// ADERRL<ADERR3>
extern volatile __bit                   ADERR3              __at(0x1F713);	// @ (0x3EE2 * 8 + 3)
#define                                 ADERR3_bit          _BIT_ACCESS(ADERRL,3)
// ADERRL<ADERR4>
extern volatile __bit                   ADERR4              __at(0x1F714);	// @ (0x3EE2 * 8 + 4)
#define                                 ADERR4_bit          _BIT_ACCESS(ADERRL,4)
// ADERRL<ADERR5>
extern volatile __bit                   ADERR5              __at(0x1F715);	// @ (0x3EE2 * 8 + 5)
#define                                 ADERR5_bit          _BIT_ACCESS(ADERRL,5)
// ADERRL<ADERR6>
extern volatile __bit                   ADERR6              __at(0x1F716);	// @ (0x3EE2 * 8 + 6)
#define                                 ADERR6_bit          _BIT_ACCESS(ADERRL,6)
// ADERRL<ADERR7>
extern volatile __bit                   ADERR7              __at(0x1F717);	// @ (0x3EE2 * 8 + 7)
#define                                 ADERR7_bit          _BIT_ACCESS(ADERRL,7)
// ADERRH<ADERR8>
extern volatile __bit                   ADERR8              __at(0x1F718);	// @ (0x3EE3 * 8 + 0)
#define                                 ADERR8_bit          _BIT_ACCESS(ADERRH,0)
// ADERRH<ADERR9>
extern volatile __bit                   ADERR9              __at(0x1F719);	// @ (0x3EE3 * 8 + 1)
#define                                 ADERR9_bit          _BIT_ACCESS(ADERRH,1)
// ADFLTRL<ADFLTR0>
extern volatile __bit                   ADFLTR0             __at(0x1F730);	// @ (0x3EE6 * 8 + 0)
#define                                 ADFLTR0_bit         _BIT_ACCESS(ADFLTRL,0)
// ADFLTRL<ADFLTR1>
extern volatile __bit                   ADFLTR1             __at(0x1F731);	// @ (0x3EE6 * 8 + 1)
#define                                 ADFLTR1_bit         _BIT_ACCESS(ADFLTRL,1)
// ADFLTRH<ADFLTR10>
extern volatile __bit                   ADFLTR10            __at(0x1F73A);	// @ (0x3EE7 * 8 + 2)
#define                                 ADFLTR10_bit        _BIT_ACCESS(ADFLTRH,2)
// ADFLTRH<ADFLTR11>
extern volatile __bit                   ADFLTR11            __at(0x1F73B);	// @ (0x3EE7 * 8 + 3)
#define                                 ADFLTR11_bit        _BIT_ACCESS(ADFLTRH,3)
// ADFLTRH<ADFLTR12>
extern volatile __bit                   ADFLTR12            __at(0x1F73C);	// @ (0x3EE7 * 8 + 4)
#define                                 ADFLTR12_bit        _BIT_ACCESS(ADFLTRH,4)
// ADFLTRH<ADFLTR13>
extern volatile __bit                   ADFLTR13            __at(0x1F73D);	// @ (0x3EE7 * 8 + 5)
#define                                 ADFLTR13_bit        _BIT_ACCESS(ADFLTRH,5)
// ADFLTRH<ADFLTR14>
extern volatile __bit                   ADFLTR14            __at(0x1F73E);	// @ (0x3EE7 * 8 + 6)
#define                                 ADFLTR14_bit        _BIT_ACCESS(ADFLTRH,6)
// ADFLTRH<ADFLTR15>
extern volatile __bit                   ADFLTR15            __at(0x1F73F);	// @ (0x3EE7 * 8 + 7)
#define                                 ADFLTR15_bit        _BIT_ACCESS(ADFLTRH,7)
// ADFLTRL<ADFLTR2>
extern volatile __bit                   ADFLTR2             __at(0x1F732);	// @ (0x3EE6 * 8 + 2)
#define                                 ADFLTR2_bit         _BIT_ACCESS(ADFLTRL,2)
// ADFLTRL<ADFLTR3>
extern volatile __bit                   ADFLTR3             __at(0x1F733);	// @ (0x3EE6 * 8 + 3)
#define                                 ADFLTR3_bit         _BIT_ACCESS(ADFLTRL,3)
// ADFLTRL<ADFLTR4>
extern volatile __bit                   ADFLTR4             __at(0x1F734);	// @ (0x3EE6 * 8 + 4)
#define                                 ADFLTR4_bit         _BIT_ACCESS(ADFLTRL,4)
// ADFLTRL<ADFLTR5>
extern volatile __bit                   ADFLTR5             __at(0x1F735);	// @ (0x3EE6 * 8 + 5)
#define                                 ADFLTR5_bit         _BIT_ACCESS(ADFLTRL,5)
// ADFLTRL<ADFLTR6>
extern volatile __bit                   ADFLTR6             __at(0x1F736);	// @ (0x3EE6 * 8 + 6)
#define                                 ADFLTR6_bit         _BIT_ACCESS(ADFLTRL,6)
// ADFLTRL<ADFLTR7>
extern volatile __bit                   ADFLTR7             __at(0x1F737);	// @ (0x3EE6 * 8 + 7)
#define                                 ADFLTR7_bit         _BIT_ACCESS(ADFLTRL,7)
// ADFLTRH<ADFLTR8>
extern volatile __bit                   ADFLTR8             __at(0x1F738);	// @ (0x3EE7 * 8 + 0)
#define                                 ADFLTR8_bit         _BIT_ACCESS(ADFLTRH,0)
// ADFLTRH<ADFLTR9>
extern volatile __bit                   ADFLTR9             __at(0x1F739);	// @ (0x3EE7 * 8 + 1)
#define                                 ADFLTR9_bit         _BIT_ACCESS(ADFLTRH,1)
// ADCON0<ADFM0>
extern volatile __bit                   ADFM0               __at(0x1F7C2);	// @ (0x3EF8 * 8 + 2)
#define                                 ADFM0_bit           _BIT_ACCESS(ADCON0,2)
// FVRCON<ADFVR0>
extern volatile __bit                   ADFVR0              __at(0x1F608);	// @ (0x3EC1 * 8 + 0)
#define                                 ADFVR0_bit          _BIT_ACCESS(FVRCON,0)
// FVRCON<ADFVR1>
extern volatile __bit                   ADFVR1              __at(0x1F609);	// @ (0x3EC1 * 8 + 1)
#define                                 ADFVR1_bit          _BIT_ACCESS(FVRCON,1)
// ADCON0<ADGO>
extern volatile __bit                   ADGO                __at(0x1F7C0);	// @ (0x3EF8 * 8 + 0)
#define                                 ADGO_bit            _BIT_ACCESS(ADCON0,0)
// ADCON1<ADGPOL>
extern volatile __bit                   ADGPOL              __at(0x1F7CD);	// @ (0x3EF9 * 8 + 5)
#define                                 ADGPOL_bit          _BIT_ACCESS(ADCON1,5)
// PIE1<ADIE>
extern volatile __bit                   ADIE                __at(0x1CC8A);	// @ (0x3991 * 8 + 2)
#define                                 ADIE_bit            _BIT_ACCESS(PIE1,2)
// PIR1<ADIF>
extern volatile __bit                   ADIF                __at(0x1CD0A);	// @ (0x39A1 * 8 + 2)
#define                                 ADIF_bit            _BIT_ACCESS(PIR1,2)
// IPR1<ADIP>
extern volatile __bit                   ADIP                __at(0x1CC0A);	// @ (0x3981 * 8 + 2)
#define                                 ADIP_bit            _BIT_ACCESS(IPR1,2)
// ADCON1<ADIPEN>
extern volatile __bit                   ADIPEN              __at(0x1F7CE);	// @ (0x3EF9 * 8 + 6)
#define                                 ADIPEN_bit          _BIT_ACCESS(ADCON1,6)
// ADLTHL<ADLTH0>
extern volatile __bit                   ADLTH0              __at(0x1F6F0);	// @ (0x3EDE * 8 + 0)
#define                                 ADLTH0_bit          _BIT_ACCESS(ADLTHL,0)
// ADLTHL<ADLTH1>
extern volatile __bit                   ADLTH1              __at(0x1F6F1);	// @ (0x3EDE * 8 + 1)
#define                                 ADLTH1_bit          _BIT_ACCESS(ADLTHL,1)
// ADLTHH<ADLTH10>
extern volatile __bit                   ADLTH10             __at(0x1F6FA);	// @ (0x3EDF * 8 + 2)
#define                                 ADLTH10_bit         _BIT_ACCESS(ADLTHH,2)
// ADLTHH<ADLTH11>
extern volatile __bit                   ADLTH11             __at(0x1F6FB);	// @ (0x3EDF * 8 + 3)
#define                                 ADLTH11_bit         _BIT_ACCESS(ADLTHH,3)
// ADLTHH<ADLTH12>
extern volatile __bit                   ADLTH12             __at(0x1F6FC);	// @ (0x3EDF * 8 + 4)
#define                                 ADLTH12_bit         _BIT_ACCESS(ADLTHH,4)
// ADLTHH<ADLTH13>
extern volatile __bit                   ADLTH13             __at(0x1F6FD);	// @ (0x3EDF * 8 + 5)
#define                                 ADLTH13_bit         _BIT_ACCESS(ADLTHH,5)
// ADLTHH<ADLTH14>
extern volatile __bit                   ADLTH14             __at(0x1F6FE);	// @ (0x3EDF * 8 + 6)
#define                                 ADLTH14_bit         _BIT_ACCESS(ADLTHH,6)
// ADLTHH<ADLTH15>
extern volatile __bit                   ADLTH15             __at(0x1F6FF);	// @ (0x3EDF * 8 + 7)
#define                                 ADLTH15_bit         _BIT_ACCESS(ADLTHH,7)
// ADLTHL<ADLTH2>
extern volatile __bit                   ADLTH2              __at(0x1F6F2);	// @ (0x3EDE * 8 + 2)
#define                                 ADLTH2_bit          _BIT_ACCESS(ADLTHL,2)
// ADLTHL<ADLTH3>
extern volatile __bit                   ADLTH3              __at(0x1F6F3);	// @ (0x3EDE * 8 + 3)
#define                                 ADLTH3_bit          _BIT_ACCESS(ADLTHL,3)
// ADLTHL<ADLTH4>
extern volatile __bit                   ADLTH4              __at(0x1F6F4);	// @ (0x3EDE * 8 + 4)
#define                                 ADLTH4_bit          _BIT_ACCESS(ADLTHL,4)
// ADLTHL<ADLTH5>
extern volatile __bit                   ADLTH5              __at(0x1F6F5);	// @ (0x3EDE * 8 + 5)
#define                                 ADLTH5_bit          _BIT_ACCESS(ADLTHL,5)
// ADLTHL<ADLTH6>
extern volatile __bit                   ADLTH6              __at(0x1F6F6);	// @ (0x3EDE * 8 + 6)
#define                                 ADLTH6_bit          _BIT_ACCESS(ADLTHL,6)
// ADLTHL<ADLTH7>
extern volatile __bit                   ADLTH7              __at(0x1F6F7);	// @ (0x3EDE * 8 + 7)
#define                                 ADLTH7_bit          _BIT_ACCESS(ADLTHL,7)
// ADLTHH<ADLTH8>
extern volatile __bit                   ADLTH8              __at(0x1F6F8);	// @ (0x3EDF * 8 + 0)
#define                                 ADLTH8_bit          _BIT_ACCESS(ADLTHH,0)
// ADLTHH<ADLTH9>
extern volatile __bit                   ADLTH9              __at(0x1F6F9);	// @ (0x3EDF * 8 + 1)
#define                                 ADLTH9_bit          _BIT_ACCESS(ADLTHH,1)
// ADSTAT<ADLTHR>
extern volatile __bit                   ADLTHR              __at(0x1F7E5);	// @ (0x3EFC * 8 + 5)
#define                                 ADLTHR_bit          _BIT_ACCESS(ADSTAT,5)
// ADSTAT<ADMATH>
extern volatile __bit                   ADMATH              __at(0x1F7E4);	// @ (0x3EFC * 8 + 4)
#define                                 ADMATH_bit          _BIT_ACCESS(ADSTAT,4)
// ADCON2<ADMD0>
extern volatile __bit                   ADMD0               __at(0x1F7D0);	// @ (0x3EFA * 8 + 0)
#define                                 ADMD0_bit           _BIT_ACCESS(ADCON2,0)
// ADCON2<ADMD1>
extern volatile __bit                   ADMD1               __at(0x1F7D1);	// @ (0x3EFA * 8 + 1)
#define                                 ADMD1_bit           _BIT_ACCESS(ADCON2,1)
// ADCON2<ADMD2>
extern volatile __bit                   ADMD2               __at(0x1F7D2);	// @ (0x3EFA * 8 + 2)
#define                                 ADMD2_bit           _BIT_ACCESS(ADCON2,2)
// ADREF<ADNREF0>
extern volatile __bit                   ADNREF0             __at(0x1F7EC);	// @ (0x3EFD * 8 + 4)
#define                                 ADNREF0_bit         _BIT_ACCESS(ADREF,4)
// OSCEN<ADOEN>
extern volatile __bit                   ADOEN               __at(0x1CEEA);	// @ (0x39DD * 8 + 2)
#define                                 ADOEN_bit           _BIT_ACCESS(OSCEN,2)
// ADCON0<ADON>
extern volatile __bit                   ADON                __at(0x1F7C7);	// @ (0x3EF8 * 8 + 7)
#define                                 ADON_bit            _BIT_ACCESS(ADCON0,7)
// OSCSTAT<ADOR>
extern volatile __bit                   ADOR                __at(0x1CEE2);	// @ (0x39DC * 8 + 2)
#define                                 ADOR_bit            _BIT_ACCESS(OSCSTAT,2)
// ADSTAT<ADOV>
extern volatile __bit                   ADOV                __at(0x1F7E7);	// @ (0x3EFC * 8 + 7)
#define                                 ADOV_bit            _BIT_ACCESS(ADSTAT,7)
// ADPCH<ADPCH0>
extern volatile __bit                   ADPCH0              __at(0x1F788);	// @ (0x3EF1 * 8 + 0)
#define                                 ADPCH0_bit          _BIT_ACCESS(ADPCH,0)
// ADPCH<ADPCH1>
extern volatile __bit                   ADPCH1              __at(0x1F789);	// @ (0x3EF1 * 8 + 1)
#define                                 ADPCH1_bit          _BIT_ACCESS(ADPCH,1)
// ADPCH<ADPCH2>
extern volatile __bit                   ADPCH2              __at(0x1F78A);	// @ (0x3EF1 * 8 + 2)
#define                                 ADPCH2_bit          _BIT_ACCESS(ADPCH,2)
// ADPCH<ADPCH3>
extern volatile __bit                   ADPCH3              __at(0x1F78B);	// @ (0x3EF1 * 8 + 3)
#define                                 ADPCH3_bit          _BIT_ACCESS(ADPCH,3)
// ADPCH<ADPCH4>
extern volatile __bit                   ADPCH4              __at(0x1F78C);	// @ (0x3EF1 * 8 + 4)
#define                                 ADPCH4_bit          _BIT_ACCESS(ADPCH,4)
// ADPCH<ADPCH5>
extern volatile __bit                   ADPCH5              __at(0x1F78D);	// @ (0x3EF1 * 8 + 5)
#define                                 ADPCH5_bit          _BIT_ACCESS(ADPCH,5)
// ADCON1<ADPPOL>
extern volatile __bit                   ADPPOL              __at(0x1F7CF);	// @ (0x3EF9 * 8 + 7)
#define                                 ADPPOL_bit          _BIT_ACCESS(ADCON1,7)
// ADPREL<ADPRE0>
extern volatile __bit                   ADPRE0              __at(0x1F7B0);	// @ (0x3EF6 * 8 + 0)
#define                                 ADPRE0_bit          _BIT_ACCESS(ADPREL,0)
// ADPREL<ADPRE1>
extern volatile __bit                   ADPRE1              __at(0x1F7B1);	// @ (0x3EF6 * 8 + 1)
#define                                 ADPRE1_bit          _BIT_ACCESS(ADPREL,1)
// ADPREH<ADPRE10>
extern volatile __bit                   ADPRE10             __at(0x1F7BA);	// @ (0x3EF7 * 8 + 2)
#define                                 ADPRE10_bit         _BIT_ACCESS(ADPREH,2)
// ADPREH<ADPRE11>
extern volatile __bit                   ADPRE11             __at(0x1F7BB);	// @ (0x3EF7 * 8 + 3)
#define                                 ADPRE11_bit         _BIT_ACCESS(ADPREH,3)
// ADPREH<ADPRE12>
extern volatile __bit                   ADPRE12             __at(0x1F7BC);	// @ (0x3EF7 * 8 + 4)
#define                                 ADPRE12_bit         _BIT_ACCESS(ADPREH,4)
// ADPREL<ADPRE2>
extern volatile __bit                   ADPRE2              __at(0x1F7B2);	// @ (0x3EF6 * 8 + 2)
#define                                 ADPRE2_bit          _BIT_ACCESS(ADPREL,2)
// ADPREL<ADPRE3>
extern volatile __bit                   ADPRE3              __at(0x1F7B3);	// @ (0x3EF6 * 8 + 3)
#define                                 ADPRE3_bit          _BIT_ACCESS(ADPREL,3)
// ADPREL<ADPRE4>
extern volatile __bit                   ADPRE4              __at(0x1F7B4);	// @ (0x3EF6 * 8 + 4)
#define                                 ADPRE4_bit          _BIT_ACCESS(ADPREL,4)
// ADPREL<ADPRE5>
extern volatile __bit                   ADPRE5              __at(0x1F7B5);	// @ (0x3EF6 * 8 + 5)
#define                                 ADPRE5_bit          _BIT_ACCESS(ADPREL,5)
// ADPREL<ADPRE6>
extern volatile __bit                   ADPRE6              __at(0x1F7B6);	// @ (0x3EF6 * 8 + 6)
#define                                 ADPRE6_bit          _BIT_ACCESS(ADPREL,6)
// ADPREL<ADPRE7>
extern volatile __bit                   ADPRE7              __at(0x1F7B7);	// @ (0x3EF6 * 8 + 7)
#define                                 ADPRE7_bit          _BIT_ACCESS(ADPREL,7)
// ADPREH<ADPRE8>
extern volatile __bit                   ADPRE8              __at(0x1F7B8);	// @ (0x3EF7 * 8 + 0)
#define                                 ADPRE8_bit          _BIT_ACCESS(ADPREH,0)
// ADPREH<ADPRE9>
extern volatile __bit                   ADPRE9              __at(0x1F7B9);	// @ (0x3EF7 * 8 + 1)
#define                                 ADPRE9_bit          _BIT_ACCESS(ADPREH,1)
// ADREF<ADPREF0>
extern volatile __bit                   ADPREF0             __at(0x1F7E8);	// @ (0x3EFD * 8 + 0)
#define                                 ADPREF0_bit         _BIT_ACCESS(ADREF,0)
// ADREF<ADPREF1>
extern volatile __bit                   ADPREF1             __at(0x1F7E9);	// @ (0x3EFD * 8 + 1)
#define                                 ADPREF1_bit         _BIT_ACCESS(ADREF,1)
// ADPREVL<ADPREV0>
extern volatile __bit                   ADPREV0             __at(0x1F768);	// @ (0x3EED * 8 + 0)
#define                                 ADPREV0_bit         _BIT_ACCESS(ADPREVL,0)
// ADPREVL<ADPREV1>
extern volatile __bit                   ADPREV1             __at(0x1F769);	// @ (0x3EED * 8 + 1)
#define                                 ADPREV1_bit         _BIT_ACCESS(ADPREVL,1)
// ADPREVH<ADPREV10>
extern volatile __bit                   ADPREV10            __at(0x1F772);	// @ (0x3EEE * 8 + 2)
#define                                 ADPREV10_bit        _BIT_ACCESS(ADPREVH,2)
// ADPREVH<ADPREV11>
extern volatile __bit                   ADPREV11            __at(0x1F773);	// @ (0x3EEE * 8 + 3)
#define                                 ADPREV11_bit        _BIT_ACCESS(ADPREVH,3)
// ADPREVH<ADPREV12>
extern volatile __bit                   ADPREV12            __at(0x1F774);	// @ (0x3EEE * 8 + 4)
#define                                 ADPREV12_bit        _BIT_ACCESS(ADPREVH,4)
// ADPREVH<ADPREV13>
extern volatile __bit                   ADPREV13            __at(0x1F775);	// @ (0x3EEE * 8 + 5)
#define                                 ADPREV13_bit        _BIT_ACCESS(ADPREVH,5)
// ADPREVH<ADPREV14>
extern volatile __bit                   ADPREV14            __at(0x1F776);	// @ (0x3EEE * 8 + 6)
#define                                 ADPREV14_bit        _BIT_ACCESS(ADPREVH,6)
// ADPREVH<ADPREV15>
extern volatile __bit                   ADPREV15            __at(0x1F777);	// @ (0x3EEE * 8 + 7)
#define                                 ADPREV15_bit        _BIT_ACCESS(ADPREVH,7)
// ADPREVL<ADPREV2>
extern volatile __bit                   ADPREV2             __at(0x1F76A);	// @ (0x3EED * 8 + 2)
#define                                 ADPREV2_bit         _BIT_ACCESS(ADPREVL,2)
// ADPREVL<ADPREV3>
extern volatile __bit                   ADPREV3             __at(0x1F76B);	// @ (0x3EED * 8 + 3)
#define                                 ADPREV3_bit         _BIT_ACCESS(ADPREVL,3)
// ADPREVL<ADPREV4>
extern volatile __bit                   ADPREV4             __at(0x1F76C);	// @ (0x3EED * 8 + 4)
#define                                 ADPREV4_bit         _BIT_ACCESS(ADPREVL,4)
// ADPREVL<ADPREV5>
extern volatile __bit                   ADPREV5             __at(0x1F76D);	// @ (0x3EED * 8 + 5)
#define                                 ADPREV5_bit         _BIT_ACCESS(ADPREVL,5)
// ADPREVL<ADPREV6>
extern volatile __bit                   ADPREV6             __at(0x1F76E);	// @ (0x3EED * 8 + 6)
#define                                 ADPREV6_bit         _BIT_ACCESS(ADPREVL,6)
// ADPREVL<ADPREV7>
extern volatile __bit                   ADPREV7             __at(0x1F76F);	// @ (0x3EED * 8 + 7)
#define                                 ADPREV7_bit         _BIT_ACCESS(ADPREVL,7)
// ADPREVH<ADPREV8>
extern volatile __bit                   ADPREV8             __at(0x1F770);	// @ (0x3EEE * 8 + 0)
#define                                 ADPREV8_bit         _BIT_ACCESS(ADPREVH,0)
// ADPREVH<ADPREV9>
extern volatile __bit                   ADPREV9             __at(0x1F771);	// @ (0x3EEE * 8 + 1)
#define                                 ADPREV9_bit         _BIT_ACCESS(ADPREVH,1)
// ADCON2<ADPSIS>
extern volatile __bit                   ADPSIS              __at(0x1F7D7);	// @ (0x3EFA * 8 + 7)
#define                                 ADPSIS_bit          _BIT_ACCESS(ADCON2,7)
// NVMADRL<ADR0>
extern volatile __bit                   ADR0                __at(0x1CF00);	// @ (0x39E0 * 8 + 0)
#define                                 ADR0_bit            _BIT_ACCESS(NVMADRL,0)
// NVMADRL<ADR1>
extern volatile __bit                   ADR1                __at(0x1CF01);	// @ (0x39E0 * 8 + 1)
#define                                 ADR1_bit            _BIT_ACCESS(NVMADRL,1)
// I2C1PIE<ADR1IE>
extern volatile __bit                   ADR1IE              __at(0x1EBD3);	// @ (0x3D7A * 8 + 3)
#define                                 ADR1IE_bit          _BIT_ACCESS(I2C1PIE,3)
// I2C1PIR<ADR1IF>
extern volatile __bit                   ADR1IF              __at(0x1EBCB);	// @ (0x3D79 * 8 + 3)
#define                                 ADR1IF_bit          _BIT_ACCESS(I2C1PIR,3)
// NVMADRL<ADR2>
extern volatile __bit                   ADR2                __at(0x1CF02);	// @ (0x39E0 * 8 + 2)
#define                                 ADR2_bit            _BIT_ACCESS(NVMADRL,2)
// I2C2PIE<ADR2IE>
extern volatile __bit                   ADR2IE              __at(0x1EB23);	// @ (0x3D64 * 8 + 3)
#define                                 ADR2IE_bit          _BIT_ACCESS(I2C2PIE,3)
// I2C2PIR<ADR2IF>
extern volatile __bit                   ADR2IF              __at(0x1EB1B);	// @ (0x3D63 * 8 + 3)
#define                                 ADR2IF_bit          _BIT_ACCESS(I2C2PIR,3)
// NVMADRL<ADR3>
extern volatile __bit                   ADR3                __at(0x1CF03);	// @ (0x39E0 * 8 + 3)
#define                                 ADR3_bit            _BIT_ACCESS(NVMADRL,3)
// NVMADRL<ADR4>
extern volatile __bit                   ADR4                __at(0x1CF04);	// @ (0x39E0 * 8 + 4)
#define                                 ADR4_bit            _BIT_ACCESS(NVMADRL,4)
// NVMADRL<ADR5>
extern volatile __bit                   ADR5                __at(0x1CF05);	// @ (0x39E0 * 8 + 5)
#define                                 ADR5_bit            _BIT_ACCESS(NVMADRL,5)
// NVMADRL<ADR6>
extern volatile __bit                   ADR6                __at(0x1CF06);	// @ (0x39E0 * 8 + 6)
#define                                 ADR6_bit            _BIT_ACCESS(NVMADRL,6)
// NVMADRL<ADR7>
extern volatile __bit                   ADR7                __at(0x1CF07);	// @ (0x39E0 * 8 + 7)
#define                                 ADR7_bit            _BIT_ACCESS(NVMADRL,7)
// NVMADRH<ADR8>
extern volatile __bit                   ADR8                __at(0x1CF08);	// @ (0x39E1 * 8 + 0)
#define                                 ADR8_bit            _BIT_ACCESS(NVMADRH,0)
// NVMADRH<ADR9>
extern volatile __bit                   ADR9                __at(0x1CF09);	// @ (0x39E1 * 8 + 1)
#define                                 ADR9_bit            _BIT_ACCESS(NVMADRH,1)
// ADRESL<ADRES0>
extern volatile __bit                   ADRES0              __at(0x1F778);	// @ (0x3EEF * 8 + 0)
#define                                 ADRES0_bit          _BIT_ACCESS(ADRESL,0)
// ADRESL<ADRES1>
extern volatile __bit                   ADRES1              __at(0x1F779);	// @ (0x3EEF * 8 + 1)
#define                                 ADRES1_bit          _BIT_ACCESS(ADRESL,1)
// ADRESH<ADRES10>
extern volatile __bit                   ADRES10             __at(0x1F782);	// @ (0x3EF0 * 8 + 2)
#define                                 ADRES10_bit         _BIT_ACCESS(ADRESH,2)
// ADRESH<ADRES11>
extern volatile __bit                   ADRES11             __at(0x1F783);	// @ (0x3EF0 * 8 + 3)
#define                                 ADRES11_bit         _BIT_ACCESS(ADRESH,3)
// ADRESH<ADRES12>
extern volatile __bit                   ADRES12             __at(0x1F784);	// @ (0x3EF0 * 8 + 4)
#define                                 ADRES12_bit         _BIT_ACCESS(ADRESH,4)
// ADRESH<ADRES13>
extern volatile __bit                   ADRES13             __at(0x1F785);	// @ (0x3EF0 * 8 + 5)
#define                                 ADRES13_bit         _BIT_ACCESS(ADRESH,5)
// ADRESH<ADRES14>
extern volatile __bit                   ADRES14             __at(0x1F786);	// @ (0x3EF0 * 8 + 6)
#define                                 ADRES14_bit         _BIT_ACCESS(ADRESH,6)
// ADRESH<ADRES15>
extern volatile __bit                   ADRES15             __at(0x1F787);	// @ (0x3EF0 * 8 + 7)
#define                                 ADRES15_bit         _BIT_ACCESS(ADRESH,7)
// ADRESL<ADRES2>
extern volatile __bit                   ADRES2              __at(0x1F77A);	// @ (0x3EEF * 8 + 2)
#define                                 ADRES2_bit          _BIT_ACCESS(ADRESL,2)
// ADRESL<ADRES3>
extern volatile __bit                   ADRES3              __at(0x1F77B);	// @ (0x3EEF * 8 + 3)
#define                                 ADRES3_bit          _BIT_ACCESS(ADRESL,3)
// ADRESL<ADRES4>
extern volatile __bit                   ADRES4              __at(0x1F77C);	// @ (0x3EEF * 8 + 4)
#define                                 ADRES4_bit          _BIT_ACCESS(ADRESL,4)
// ADRESL<ADRES5>
extern volatile __bit                   ADRES5              __at(0x1F77D);	// @ (0x3EEF * 8 + 5)
#define                                 ADRES5_bit          _BIT_ACCESS(ADRESL,5)
// ADRESL<ADRES6>
extern volatile __bit                   ADRES6              __at(0x1F77E);	// @ (0x3EEF * 8 + 6)
#define                                 ADRES6_bit          _BIT_ACCESS(ADRESL,6)
// ADRESL<ADRES7>
extern volatile __bit                   ADRES7              __at(0x1F77F);	// @ (0x3EEF * 8 + 7)
#define                                 ADRES7_bit          _BIT_ACCESS(ADRESL,7)
// ADRESH<ADRES8>
extern volatile __bit                   ADRES8              __at(0x1F780);	// @ (0x3EF0 * 8 + 0)
#define                                 ADRES8_bit          _BIT_ACCESS(ADRESH,0)
// ADRESH<ADRES9>
extern volatile __bit                   ADRES9              __at(0x1F781);	// @ (0x3EF0 * 8 + 1)
#define                                 ADRES9_bit          _BIT_ACCESS(ADRESH,1)
// ADRPT<ADRPT0>
extern volatile __bit                   ADRPT0              __at(0x1F760);	// @ (0x3EEC * 8 + 0)
#define                                 ADRPT0_bit          _BIT_ACCESS(ADRPT,0)
// ADRPT<ADRPT1>
extern volatile __bit                   ADRPT1              __at(0x1F761);	// @ (0x3EEC * 8 + 1)
#define                                 ADRPT1_bit          _BIT_ACCESS(ADRPT,1)
// ADRPT<ADRPT2>
extern volatile __bit                   ADRPT2              __at(0x1F762);	// @ (0x3EEC * 8 + 2)
#define                                 ADRPT2_bit          _BIT_ACCESS(ADRPT,2)
// ADRPT<ADRPT3>
extern volatile __bit                   ADRPT3              __at(0x1F763);	// @ (0x3EEC * 8 + 3)
#define                                 ADRPT3_bit          _BIT_ACCESS(ADRPT,3)
// ADRPT<ADRPT4>
extern volatile __bit                   ADRPT4              __at(0x1F764);	// @ (0x3EEC * 8 + 4)
#define                                 ADRPT4_bit          _BIT_ACCESS(ADRPT,4)
// ADRPT<ADRPT5>
extern volatile __bit                   ADRPT5              __at(0x1F765);	// @ (0x3EEC * 8 + 5)
#define                                 ADRPT5_bit          _BIT_ACCESS(ADRPT,5)
// ADRPT<ADRPT6>
extern volatile __bit                   ADRPT6              __at(0x1F766);	// @ (0x3EEC * 8 + 6)
#define                                 ADRPT6_bit          _BIT_ACCESS(ADRPT,6)
// ADRPT<ADRPT7>
extern volatile __bit                   ADRPT7              __at(0x1F767);	// @ (0x3EEC * 8 + 7)
#define                                 ADRPT7_bit          _BIT_ACCESS(ADRPT,7)
// ADCON3<ADSOI>
extern volatile __bit                   ADSOI               __at(0x1F7DB);	// @ (0x3EFB * 8 + 3)
#define                                 ADSOI_bit           _BIT_ACCESS(ADCON3,3)
// ADSTAT<ADSTAT0>
extern volatile __bit                   ADSTAT0             __at(0x1F7E0);	// @ (0x3EFC * 8 + 0)
#define                                 ADSTAT0_bit         _BIT_ACCESS(ADSTAT,0)
// ADSTAT<ADSTAT1>
extern volatile __bit                   ADSTAT1             __at(0x1F7E1);	// @ (0x3EFC * 8 + 1)
#define                                 ADSTAT1_bit         _BIT_ACCESS(ADSTAT,1)
// ADSTAT<ADSTAT2>
extern volatile __bit                   ADSTAT2             __at(0x1F7E2);	// @ (0x3EFC * 8 + 2)
#define                                 ADSTAT2_bit         _BIT_ACCESS(ADSTAT,2)
// ADSTPTL<ADSTPT0>
extern volatile __bit                   ADSTPT0             __at(0x1F720);	// @ (0x3EE4 * 8 + 0)
#define                                 ADSTPT0_bit         _BIT_ACCESS(ADSTPTL,0)
// ADSTPTL<ADSTPT1>
extern volatile __bit                   ADSTPT1             __at(0x1F721);	// @ (0x3EE4 * 8 + 1)
#define                                 ADSTPT1_bit         _BIT_ACCESS(ADSTPTL,1)
// ADSTPTH<ADSTPT10>
extern volatile __bit                   ADSTPT10            __at(0x1F72A);	// @ (0x3EE5 * 8 + 2)
#define                                 ADSTPT10_bit        _BIT_ACCESS(ADSTPTH,2)
// ADSTPTH<ADSTPT11>
extern volatile __bit                   ADSTPT11            __at(0x1F72B);	// @ (0x3EE5 * 8 + 3)
#define                                 ADSTPT11_bit        _BIT_ACCESS(ADSTPTH,3)
// ADSTPTH<ADSTPT12>
extern volatile __bit                   ADSTPT12            __at(0x1F72C);	// @ (0x3EE5 * 8 + 4)
#define                                 ADSTPT12_bit        _BIT_ACCESS(ADSTPTH,4)
// ADSTPTH<ADSTPT13>
extern volatile __bit                   ADSTPT13            __at(0x1F72D);	// @ (0x3EE5 * 8 + 5)
#define                                 ADSTPT13_bit        _BIT_ACCESS(ADSTPTH,5)
// ADSTPTH<ADSTPT14>
extern volatile __bit                   ADSTPT14            __at(0x1F72E);	// @ (0x3EE5 * 8 + 6)
#define                                 ADSTPT14_bit        _BIT_ACCESS(ADSTPTH,6)
// ADSTPTH<ADSTPT15>
extern volatile __bit                   ADSTPT15            __at(0x1F72F);	// @ (0x3EE5 * 8 + 7)
#define                                 ADSTPT15_bit        _BIT_ACCESS(ADSTPTH,7)
// ADSTPTL<ADSTPT2>
extern volatile __bit                   ADSTPT2             __at(0x1F722);	// @ (0x3EE4 * 8 + 2)
#define                                 ADSTPT2_bit         _BIT_ACCESS(ADSTPTL,2)
// ADSTPTL<ADSTPT3>
extern volatile __bit                   ADSTPT3             __at(0x1F723);	// @ (0x3EE4 * 8 + 3)
#define                                 ADSTPT3_bit         _BIT_ACCESS(ADSTPTL,3)
// ADSTPTL<ADSTPT4>
extern volatile __bit                   ADSTPT4             __at(0x1F724);	// @ (0x3EE4 * 8 + 4)
#define                                 ADSTPT4_bit         _BIT_ACCESS(ADSTPTL,4)
// ADSTPTL<ADSTPT5>
extern volatile __bit                   ADSTPT5             __at(0x1F725);	// @ (0x3EE4 * 8 + 5)
#define                                 ADSTPT5_bit         _BIT_ACCESS(ADSTPTL,5)
// ADSTPTL<ADSTPT6>
extern volatile __bit                   ADSTPT6             __at(0x1F726);	// @ (0x3EE4 * 8 + 6)
#define                                 ADSTPT6_bit         _BIT_ACCESS(ADSTPTL,6)
// ADSTPTL<ADSTPT7>
extern volatile __bit                   ADSTPT7             __at(0x1F727);	// @ (0x3EE4 * 8 + 7)
#define                                 ADSTPT7_bit         _BIT_ACCESS(ADSTPTL,7)
// ADSTPTH<ADSTPT8>
extern volatile __bit                   ADSTPT8             __at(0x1F728);	// @ (0x3EE5 * 8 + 0)
#define                                 ADSTPT8_bit         _BIT_ACCESS(ADSTPTH,0)
// ADSTPTH<ADSTPT9>
extern volatile __bit                   ADSTPT9             __at(0x1F729);	// @ (0x3EE5 * 8 + 1)
#define                                 ADSTPT9_bit         _BIT_ACCESS(ADSTPTH,1)
// PIE1<ADTIE>
extern volatile __bit                   ADTIE               __at(0x1CC8B);	// @ (0x3991 * 8 + 3)
#define                                 ADTIE_bit           _BIT_ACCESS(PIE1,3)
// PIR1<ADTIF>
extern volatile __bit                   ADTIF               __at(0x1CD0B);	// @ (0x39A1 * 8 + 3)
#define                                 ADTIF_bit           _BIT_ACCESS(PIR1,3)
// IPR1<ADTIP>
extern volatile __bit                   ADTIP               __at(0x1CC0B);	// @ (0x3981 * 8 + 3)
#define                                 ADTIP_bit           _BIT_ACCESS(IPR1,3)
// ADCON3<ADTMD0>
extern volatile __bit                   ADTMD0              __at(0x1F7D8);	// @ (0x3EFB * 8 + 0)
#define                                 ADTMD0_bit          _BIT_ACCESS(ADCON3,0)
// ADCON3<ADTMD1>
extern volatile __bit                   ADTMD1              __at(0x1F7D9);	// @ (0x3EFB * 8 + 1)
#define                                 ADTMD1_bit          _BIT_ACCESS(ADCON3,1)
// ADCON3<ADTMD2>
extern volatile __bit                   ADTMD2              __at(0x1F7DA);	// @ (0x3EFB * 8 + 2)
#define                                 ADTMD2_bit          _BIT_ACCESS(ADCON3,2)
// ADUTHL<ADUTH0>
extern volatile __bit                   ADUTH0              __at(0x1F700);	// @ (0x3EE0 * 8 + 0)
#define                                 ADUTH0_bit          _BIT_ACCESS(ADUTHL,0)
// ADUTHL<ADUTH1>
extern volatile __bit                   ADUTH1              __at(0x1F701);	// @ (0x3EE0 * 8 + 1)
#define                                 ADUTH1_bit          _BIT_ACCESS(ADUTHL,1)
// ADUTHH<ADUTH10>
extern volatile __bit                   ADUTH10             __at(0x1F70A);	// @ (0x3EE1 * 8 + 2)
#define                                 ADUTH10_bit         _BIT_ACCESS(ADUTHH,2)
// ADUTHH<ADUTH11>
extern volatile __bit                   ADUTH11             __at(0x1F70B);	// @ (0x3EE1 * 8 + 3)
#define                                 ADUTH11_bit         _BIT_ACCESS(ADUTHH,3)
// ADUTHH<ADUTH12>
extern volatile __bit                   ADUTH12             __at(0x1F70C);	// @ (0x3EE1 * 8 + 4)
#define                                 ADUTH12_bit         _BIT_ACCESS(ADUTHH,4)
// ADUTHH<ADUTH13>
extern volatile __bit                   ADUTH13             __at(0x1F70D);	// @ (0x3EE1 * 8 + 5)
#define                                 ADUTH13_bit         _BIT_ACCESS(ADUTHH,5)
// ADUTHH<ADUTH14>
extern volatile __bit                   ADUTH14             __at(0x1F70E);	// @ (0x3EE1 * 8 + 6)
#define                                 ADUTH14_bit         _BIT_ACCESS(ADUTHH,6)
// ADUTHH<ADUTH15>
extern volatile __bit                   ADUTH15             __at(0x1F70F);	// @ (0x3EE1 * 8 + 7)
#define                                 ADUTH15_bit         _BIT_ACCESS(ADUTHH,7)
// ADUTHL<ADUTH2>
extern volatile __bit                   ADUTH2              __at(0x1F702);	// @ (0x3EE0 * 8 + 2)
#define                                 ADUTH2_bit          _BIT_ACCESS(ADUTHL,2)
// ADUTHL<ADUTH3>
extern volatile __bit                   ADUTH3              __at(0x1F703);	// @ (0x3EE0 * 8 + 3)
#define                                 ADUTH3_bit          _BIT_ACCESS(ADUTHL,3)
// ADUTHL<ADUTH4>
extern volatile __bit                   ADUTH4              __at(0x1F704);	// @ (0x3EE0 * 8 + 4)
#define                                 ADUTH4_bit          _BIT_ACCESS(ADUTHL,4)
// ADUTHL<ADUTH5>
extern volatile __bit                   ADUTH5              __at(0x1F705);	// @ (0x3EE0 * 8 + 5)
#define                                 ADUTH5_bit          _BIT_ACCESS(ADUTHL,5)
// ADUTHL<ADUTH6>
extern volatile __bit                   ADUTH6              __at(0x1F706);	// @ (0x3EE0 * 8 + 6)
#define                                 ADUTH6_bit          _BIT_ACCESS(ADUTHL,6)
// ADUTHL<ADUTH7>
extern volatile __bit                   ADUTH7              __at(0x1F707);	// @ (0x3EE0 * 8 + 7)
#define                                 ADUTH7_bit          _BIT_ACCESS(ADUTHL,7)
// ADUTHH<ADUTH8>
extern volatile __bit                   ADUTH8              __at(0x1F708);	// @ (0x3EE1 * 8 + 0)
#define                                 ADUTH8_bit          _BIT_ACCESS(ADUTHH,0)
// ADUTHH<ADUTH9>
extern volatile __bit                   ADUTH9              __at(0x1F709);	// @ (0x3EE1 * 8 + 1)
#define                                 ADUTH9_bit          _BIT_ACCESS(ADUTHH,1)
// ADSTAT<ADUTHR>
extern volatile __bit                   ADUTHR              __at(0x1F7E6);	// @ (0x3EFC * 8 + 6)
#define                                 ADUTHR_bit          _BIT_ACCESS(ADSTAT,6)
// ANSELA<ANSELA0>
extern volatile __bit                   ANSELA0             __at(0x1D200);	// @ (0x3A40 * 8 + 0)
#define                                 ANSELA0_bit         _BIT_ACCESS(ANSELA,0)
// ANSELA<ANSELA1>
extern volatile __bit                   ANSELA1             __at(0x1D201);	// @ (0x3A40 * 8 + 1)
#define                                 ANSELA1_bit         _BIT_ACCESS(ANSELA,1)
// ANSELA<ANSELA2>
extern volatile __bit                   ANSELA2             __at(0x1D202);	// @ (0x3A40 * 8 + 2)
#define                                 ANSELA2_bit         _BIT_ACCESS(ANSELA,2)
// ANSELA<ANSELA3>
extern volatile __bit                   ANSELA3             __at(0x1D203);	// @ (0x3A40 * 8 + 3)
#define                                 ANSELA3_bit         _BIT_ACCESS(ANSELA,3)
// ANSELA<ANSELA4>
extern volatile __bit                   ANSELA4             __at(0x1D204);	// @ (0x3A40 * 8 + 4)
#define                                 ANSELA4_bit         _BIT_ACCESS(ANSELA,4)
// ANSELA<ANSELA5>
extern volatile __bit                   ANSELA5             __at(0x1D205);	// @ (0x3A40 * 8 + 5)
#define                                 ANSELA5_bit         _BIT_ACCESS(ANSELA,5)
// ANSELA<ANSELA6>
extern volatile __bit                   ANSELA6             __at(0x1D206);	// @ (0x3A40 * 8 + 6)
#define                                 ANSELA6_bit         _BIT_ACCESS(ANSELA,6)
// ANSELA<ANSELA7>
extern volatile __bit                   ANSELA7             __at(0x1D207);	// @ (0x3A40 * 8 + 7)
#define                                 ANSELA7_bit         _BIT_ACCESS(ANSELA,7)
// ANSELB<ANSELB0>
extern volatile __bit                   ANSELB0             __at(0x1D280);	// @ (0x3A50 * 8 + 0)
#define                                 ANSELB0_bit         _BIT_ACCESS(ANSELB,0)
// ANSELB<ANSELB1>
extern volatile __bit                   ANSELB1             __at(0x1D281);	// @ (0x3A50 * 8 + 1)
#define                                 ANSELB1_bit         _BIT_ACCESS(ANSELB,1)
// ANSELB<ANSELB2>
extern volatile __bit                   ANSELB2             __at(0x1D282);	// @ (0x3A50 * 8 + 2)
#define                                 ANSELB2_bit         _BIT_ACCESS(ANSELB,2)
// ANSELB<ANSELB3>
extern volatile __bit                   ANSELB3             __at(0x1D283);	// @ (0x3A50 * 8 + 3)
#define                                 ANSELB3_bit         _BIT_ACCESS(ANSELB,3)
// ANSELB<ANSELB4>
extern volatile __bit                   ANSELB4             __at(0x1D284);	// @ (0x3A50 * 8 + 4)
#define                                 ANSELB4_bit         _BIT_ACCESS(ANSELB,4)
// ANSELB<ANSELB5>
extern volatile __bit                   ANSELB5             __at(0x1D285);	// @ (0x3A50 * 8 + 5)
#define                                 ANSELB5_bit         _BIT_ACCESS(ANSELB,5)
// ANSELB<ANSELB6>
extern volatile __bit                   ANSELB6             __at(0x1D286);	// @ (0x3A50 * 8 + 6)
#define                                 ANSELB6_bit         _BIT_ACCESS(ANSELB,6)
// ANSELB<ANSELB7>
extern volatile __bit                   ANSELB7             __at(0x1D287);	// @ (0x3A50 * 8 + 7)
#define                                 ANSELB7_bit         _BIT_ACCESS(ANSELB,7)
// ANSELC<ANSELC0>
extern volatile __bit                   ANSELC0             __at(0x1D300);	// @ (0x3A60 * 8 + 0)
#define                                 ANSELC0_bit         _BIT_ACCESS(ANSELC,0)
// ANSELC<ANSELC1>
extern volatile __bit                   ANSELC1             __at(0x1D301);	// @ (0x3A60 * 8 + 1)
#define                                 ANSELC1_bit         _BIT_ACCESS(ANSELC,1)
// ANSELC<ANSELC2>
extern volatile __bit                   ANSELC2             __at(0x1D302);	// @ (0x3A60 * 8 + 2)
#define                                 ANSELC2_bit         _BIT_ACCESS(ANSELC,2)
// ANSELC<ANSELC3>
extern volatile __bit                   ANSELC3             __at(0x1D303);	// @ (0x3A60 * 8 + 3)
#define                                 ANSELC3_bit         _BIT_ACCESS(ANSELC,3)
// ANSELC<ANSELC4>
extern volatile __bit                   ANSELC4             __at(0x1D304);	// @ (0x3A60 * 8 + 4)
#define                                 ANSELC4_bit         _BIT_ACCESS(ANSELC,4)
// ANSELC<ANSELC5>
extern volatile __bit                   ANSELC5             __at(0x1D305);	// @ (0x3A60 * 8 + 5)
#define                                 ANSELC5_bit         _BIT_ACCESS(ANSELC,5)
// ANSELC<ANSELC6>
extern volatile __bit                   ANSELC6             __at(0x1D306);	// @ (0x3A60 * 8 + 6)
#define                                 ANSELC6_bit         _BIT_ACCESS(ANSELC,6)
// ANSELC<ANSELC7>
extern volatile __bit                   ANSELC7             __at(0x1D307);	// @ (0x3A60 * 8 + 7)
#define                                 ANSELC7_bit         _BIT_ACCESS(ANSELC,7)
// SMT1STAT<AS>
extern volatile __bit                   AS                  __at(0x1F900);	// @ (0x3F20 * 8 + 0)
#define                                 AS_bit              _BIT_ACCESS(SMT1STAT,0)
// T0CON1<ASYNC>
extern volatile __bit                   ASYNC               __at(0x1FDCC);	// @ (0x3FB9 * 8 + 4)
#define                                 ASYNC_bit           _BIT_ACCESS(T0CON1,4)
// IVTBASEL<BASE0>
extern volatile __bit                   BASE0               __at(0x1FEA8);	// @ (0x3FD5 * 8 + 0)
#define                                 BASE0_bit           _BIT_ACCESS(IVTBASEL,0)
// IVTBASEL<BASE1>
extern volatile __bit                   BASE1               __at(0x1FEA9);	// @ (0x3FD5 * 8 + 1)
#define                                 BASE1_bit           _BIT_ACCESS(IVTBASEL,1)
// IVTBASEH<BASE10>
extern volatile __bit                   BASE10              __at(0x1FEB2);	// @ (0x3FD6 * 8 + 2)
#define                                 BASE10_bit          _BIT_ACCESS(IVTBASEH,2)
// IVTBASEH<BASE11>
extern volatile __bit                   BASE11              __at(0x1FEB3);	// @ (0x3FD6 * 8 + 3)
#define                                 BASE11_bit          _BIT_ACCESS(IVTBASEH,3)
// IVTBASEH<BASE12>
extern volatile __bit                   BASE12              __at(0x1FEB4);	// @ (0x3FD6 * 8 + 4)
#define                                 BASE12_bit          _BIT_ACCESS(IVTBASEH,4)
// IVTBASEH<BASE13>
extern volatile __bit                   BASE13              __at(0x1FEB5);	// @ (0x3FD6 * 8 + 5)
#define                                 BASE13_bit          _BIT_ACCESS(IVTBASEH,5)
// IVTBASEH<BASE14>
extern volatile __bit                   BASE14              __at(0x1FEB6);	// @ (0x3FD6 * 8 + 6)
#define                                 BASE14_bit          _BIT_ACCESS(IVTBASEH,6)
// IVTBASEH<BASE15>
extern volatile __bit                   BASE15              __at(0x1FEB7);	// @ (0x3FD6 * 8 + 7)
#define                                 BASE15_bit          _BIT_ACCESS(IVTBASEH,7)
// IVTBASEU<BASE16>
extern volatile __bit                   BASE16              __at(0x1FEB8);	// @ (0x3FD7 * 8 + 0)
#define                                 BASE16_bit          _BIT_ACCESS(IVTBASEU,0)
// IVTBASEU<BASE17>
extern volatile __bit                   BASE17              __at(0x1FEB9);	// @ (0x3FD7 * 8 + 1)
#define                                 BASE17_bit          _BIT_ACCESS(IVTBASEU,1)
// IVTBASEU<BASE18>
extern volatile __bit                   BASE18              __at(0x1FEBA);	// @ (0x3FD7 * 8 + 2)
#define                                 BASE18_bit          _BIT_ACCESS(IVTBASEU,2)
// IVTBASEU<BASE19>
extern volatile __bit                   BASE19              __at(0x1FEBB);	// @ (0x3FD7 * 8 + 3)
#define                                 BASE19_bit          _BIT_ACCESS(IVTBASEU,3)
// IVTBASEL<BASE2>
extern volatile __bit                   BASE2               __at(0x1FEAA);	// @ (0x3FD5 * 8 + 2)
#define                                 BASE2_bit           _BIT_ACCESS(IVTBASEL,2)
// IVTBASEU<BASE20>
extern volatile __bit                   BASE20              __at(0x1FEBC);	// @ (0x3FD7 * 8 + 4)
#define                                 BASE20_bit          _BIT_ACCESS(IVTBASEU,4)
// IVTBASEL<BASE3>
extern volatile __bit                   BASE3               __at(0x1FEAB);	// @ (0x3FD5 * 8 + 3)
#define                                 BASE3_bit           _BIT_ACCESS(IVTBASEL,3)
// IVTBASEL<BASE4>
extern volatile __bit                   BASE4               __at(0x1FEAC);	// @ (0x3FD5 * 8 + 4)
#define                                 BASE4_bit           _BIT_ACCESS(IVTBASEL,4)
// IVTBASEL<BASE5>
extern volatile __bit                   BASE5               __at(0x1FEAD);	// @ (0x3FD5 * 8 + 5)
#define                                 BASE5_bit           _BIT_ACCESS(IVTBASEL,5)
// IVTBASEL<BASE6>
extern volatile __bit                   BASE6               __at(0x1FEAE);	// @ (0x3FD5 * 8 + 6)
#define                                 BASE6_bit           _BIT_ACCESS(IVTBASEL,6)
// IVTBASEL<BASE7>
extern volatile __bit                   BASE7               __at(0x1FEAF);	// @ (0x3FD5 * 8 + 7)
#define                                 BASE7_bit           _BIT_ACCESS(IVTBASEL,7)
// IVTBASEH<BASE8>
extern volatile __bit                   BASE8               __at(0x1FEB0);	// @ (0x3FD6 * 8 + 0)
#define                                 BASE8_bit           _BIT_ACCESS(IVTBASEH,0)
// IVTBASEH<BASE9>
extern volatile __bit                   BASE9               __at(0x1FEB1);	// @ (0x3FD6 * 8 + 1)
#define                                 BASE9_bit           _BIT_ACCESS(IVTBASEH,1)
// SPI1BAUD<BAUD0>
extern volatile __bit                   BAUD0               __at(0x1E8C8);	// @ (0x3D19 * 8 + 0)
#define                                 BAUD0_bit           _BIT_ACCESS(SPI1BAUD,0)
// SPI1BAUD<BAUD1>
extern volatile __bit                   BAUD1               __at(0x1E8C9);	// @ (0x3D19 * 8 + 1)
#define                                 BAUD1_bit           _BIT_ACCESS(SPI1BAUD,1)
// SPI1BAUD<BAUD2>
extern volatile __bit                   BAUD2               __at(0x1E8CA);	// @ (0x3D19 * 8 + 2)
#define                                 BAUD2_bit           _BIT_ACCESS(SPI1BAUD,2)
// SPI1BAUD<BAUD3>
extern volatile __bit                   BAUD3               __at(0x1E8CB);	// @ (0x3D19 * 8 + 3)
#define                                 BAUD3_bit           _BIT_ACCESS(SPI1BAUD,3)
// SPI1BAUD<BAUD4>
extern volatile __bit                   BAUD4               __at(0x1E8CC);	// @ (0x3D19 * 8 + 4)
#define                                 BAUD4_bit           _BIT_ACCESS(SPI1BAUD,4)
// SPI1BAUD<BAUD5>
extern volatile __bit                   BAUD5               __at(0x1E8CD);	// @ (0x3D19 * 8 + 5)
#define                                 BAUD5_bit           _BIT_ACCESS(SPI1BAUD,5)
// SPI1BAUD<BAUD6>
extern volatile __bit                   BAUD6               __at(0x1E8CE);	// @ (0x3D19 * 8 + 6)
#define                                 BAUD6_bit           _BIT_ACCESS(SPI1BAUD,6)
// SPI1BAUD<BAUD7>
extern volatile __bit                   BAUD7               __at(0x1E8CF);	// @ (0x3D19 * 8 + 7)
#define                                 BAUD7_bit           _BIT_ACCESS(SPI1BAUD,7)
// I2C1ERR<BCL1IE>
extern volatile __bit                   BCL1IE              __at(0x1EBB1);	// @ (0x3D76 * 8 + 1)
#define                                 BCL1IE_bit          _BIT_ACCESS(I2C1ERR,1)
// I2C1ERR<BCL1IF>
extern volatile __bit                   BCL1IF              __at(0x1EBB5);	// @ (0x3D76 * 8 + 5)
#define                                 BCL1IF_bit          _BIT_ACCESS(I2C1ERR,5)
// I2C2ERR<BCL2IE>
extern volatile __bit                   BCL2IE              __at(0x1EB01);	// @ (0x3D60 * 8 + 1)
#define                                 BCL2IE_bit          _BIT_ACCESS(I2C2ERR,1)
// I2C2ERR<BCL2IF>
extern volatile __bit                   BCL2IF              __at(0x1EB05);	// @ (0x3D60 * 8 + 5)
#define                                 BCL2IF_bit          _BIT_ACCESS(I2C2ERR,5)
// MD1CON0<BIT>
extern volatile __bit                   BIT                 __at(0x1E7D0);	// @ (0x3CFA * 8 + 0)
#define                                 BIT_bit             _BIT_ACCESS(MD1CON0,0)
// SPI1CON0<BMODE>
extern volatile __bit                   BMODE               __at(0x1E8A0);	// @ (0x3D14 * 8 + 0)
#define                                 BMODE_bit           _BIT_ACCESS(SPI1CON0,0)
// PCON0<BOR>
extern volatile __bit                   BOR                 __at(0x1FF80);	// @ (0x3FF0 * 8 + 0)
#define                                 BOR_bit             _BIT_ACCESS(PCON0,0)
// BORCON<BORRDY>
extern volatile __bit                   BORRDY              __at(0x1CE80);	// @ (0x39D0 * 8 + 0)
#define                                 BORRDY_bit          _BIT_ACCESS(BORCON,0)
// I2C1ERR<BTO1IE>
extern volatile __bit                   BTO1IE              __at(0x1EBB2);	// @ (0x3D76 * 8 + 2)
#define                                 BTO1IE_bit          _BIT_ACCESS(I2C1ERR,2)
// I2C1ERR<BTO1IF>
extern volatile __bit                   BTO1IF              __at(0x1EBB6);	// @ (0x3D76 * 8 + 6)
#define                                 BTO1IF_bit          _BIT_ACCESS(I2C1ERR,6)
// I2C2ERR<BTO2IE>
extern volatile __bit                   BTO2IE              __at(0x1EB02);	// @ (0x3D60 * 8 + 2)
#define                                 BTO2IE_bit          _BIT_ACCESS(I2C2ERR,2)
// I2C2ERR<BTO2IF>
extern volatile __bit                   BTO2IF              __at(0x1EB06);	// @ (0x3D60 * 8 + 6)
#define                                 BTO2IF_bit          _BIT_ACCESS(I2C2ERR,6)
// SCANCON0<BURSTMD>
extern volatile __bit                   BURSTMD             __at(0x1CBE1);	// @ (0x397C * 8 + 1)
#define                                 BURSTMD_bit         _BIT_ACCESS(SCANCON0,1)
// U1CON2<C0EN>
extern volatile __bit                   C0EN                __at(0x1EFA3);	// @ (0x3DF4 * 8 + 3)
#define                                 C0EN_bit            _BIT_ACCESS(U1CON2,3)
// CM1CON0<C1EN>
extern volatile __bit                   C1EN                __at(0x1F5E7);	// @ (0x3EBC * 8 + 7)
#define                                 C1EN_bit            _BIT_ACCESS(CM1CON0,7)
// CM1CON0<C1HYS>
extern volatile __bit                   C1HYS               __at(0x1F5E1);	// @ (0x3EBC * 8 + 1)
#define                                 C1HYS_bit           _BIT_ACCESS(CM1CON0,1)
// PIE1<C1IE>
extern volatile __bit                   C1IE                __at(0x1CC8C);	// @ (0x3991 * 8 + 4)
#define                                 C1IE_bit            _BIT_ACCESS(PIE1,4)
// PIR1<C1IF>
extern volatile __bit                   C1IF                __at(0x1CD0C);	// @ (0x39A1 * 8 + 4)
#define                                 C1IF_bit            _BIT_ACCESS(PIR1,4)
// CM1CON1<C1INTN>
extern volatile __bit                   C1INTN              __at(0x1F5E8);	// @ (0x3EBD * 8 + 0)
#define                                 C1INTN_bit          _BIT_ACCESS(CM1CON1,0)
// CM1CON1<C1INTP>
extern volatile __bit                   C1INTP              __at(0x1F5E9);	// @ (0x3EBD * 8 + 1)
#define                                 C1INTP_bit          _BIT_ACCESS(CM1CON1,1)
// IPR1<C1IP>
extern volatile __bit                   C1IP                __at(0x1CC0C);	// @ (0x3981 * 8 + 4)
#define                                 C1IP_bit            _BIT_ACCESS(IPR1,4)
// CM1NCH<C1NCH0>
extern volatile __bit                   C1NCH0              __at(0x1F5F0);	// @ (0x3EBE * 8 + 0)
#define                                 C1NCH0_bit          _BIT_ACCESS(CM1NCH,0)
// CM1NCH<C1NCH1>
extern volatile __bit                   C1NCH1              __at(0x1F5F1);	// @ (0x3EBE * 8 + 1)
#define                                 C1NCH1_bit          _BIT_ACCESS(CM1NCH,1)
// CM1NCH<C1NCH2>
extern volatile __bit                   C1NCH2              __at(0x1F5F2);	// @ (0x3EBE * 8 + 2)
#define                                 C1NCH2_bit          _BIT_ACCESS(CM1NCH,2)
// CM1PCH<C1PCH0>
extern volatile __bit                   C1PCH0              __at(0x1F5F8);	// @ (0x3EBF * 8 + 0)
#define                                 C1PCH0_bit          _BIT_ACCESS(CM1PCH,0)
// CM1PCH<C1PCH1>
extern volatile __bit                   C1PCH1              __at(0x1F5F9);	// @ (0x3EBF * 8 + 1)
#define                                 C1PCH1_bit          _BIT_ACCESS(CM1PCH,1)
// CM1PCH<C1PCH2>
extern volatile __bit                   C1PCH2              __at(0x1F5FA);	// @ (0x3EBF * 8 + 2)
#define                                 C1PCH2_bit          _BIT_ACCESS(CM1PCH,2)
// CM1CON0<C1POL>
extern volatile __bit                   C1POL               __at(0x1F5E4);	// @ (0x3EBC * 8 + 4)
#define                                 C1POL_bit           _BIT_ACCESS(CM1CON0,4)
// CM1CON0<C1SYNC>
extern volatile __bit                   C1SYNC              __at(0x1F5E0);	// @ (0x3EBC * 8 + 0)
#define                                 C1SYNC_bit          _BIT_ACCESS(CM1CON0,0)
// CCPTMRS0<C1TSEL0>
extern volatile __bit                   C1TSEL0             __at(0x1FAF0);	// @ (0x3F5E * 8 + 0)
#define                                 C1TSEL0_bit         _BIT_ACCESS(CCPTMRS0,0)
// CCPTMRS0<C1TSEL1>
extern volatile __bit                   C1TSEL1             __at(0x1FAF1);	// @ (0x3F5E * 8 + 1)
#define                                 C1TSEL1_bit         _BIT_ACCESS(CCPTMRS0,1)
// CM2CON0<C2EN>
extern volatile __bit                   C2EN                __at(0x1F5C7);	// @ (0x3EB8 * 8 + 7)
#define                                 C2EN_bit            _BIT_ACCESS(CM2CON0,7)
// CM2CON0<C2HYS>
extern volatile __bit                   C2HYS               __at(0x1F5C1);	// @ (0x3EB8 * 8 + 1)
#define                                 C2HYS_bit           _BIT_ACCESS(CM2CON0,1)
// PIE5<C2IE>
extern volatile __bit                   C2IE                __at(0x1CCA9);	// @ (0x3995 * 8 + 1)
#define                                 C2IE_bit            _BIT_ACCESS(PIE5,1)
// PIR5<C2IF>
extern volatile __bit                   C2IF                __at(0x1CD29);	// @ (0x39A5 * 8 + 1)
#define                                 C2IF_bit            _BIT_ACCESS(PIR5,1)
// CM2CON1<C2INTN>
extern volatile __bit                   C2INTN              __at(0x1F5C8);	// @ (0x3EB9 * 8 + 0)
#define                                 C2INTN_bit          _BIT_ACCESS(CM2CON1,0)
// CM2CON1<C2INTP>
extern volatile __bit                   C2INTP              __at(0x1F5C9);	// @ (0x3EB9 * 8 + 1)
#define                                 C2INTP_bit          _BIT_ACCESS(CM2CON1,1)
// IPR5<C2IP>
extern volatile __bit                   C2IP                __at(0x1CC29);	// @ (0x3985 * 8 + 1)
#define                                 C2IP_bit            _BIT_ACCESS(IPR5,1)
// CM2NCH<C2NCH0>
extern volatile __bit                   C2NCH0              __at(0x1F5D0);	// @ (0x3EBA * 8 + 0)
#define                                 C2NCH0_bit          _BIT_ACCESS(CM2NCH,0)
// CM2NCH<C2NCH1>
extern volatile __bit                   C2NCH1              __at(0x1F5D1);	// @ (0x3EBA * 8 + 1)
#define                                 C2NCH1_bit          _BIT_ACCESS(CM2NCH,1)
// CM2NCH<C2NCH2>
extern volatile __bit                   C2NCH2              __at(0x1F5D2);	// @ (0x3EBA * 8 + 2)
#define                                 C2NCH2_bit          _BIT_ACCESS(CM2NCH,2)
// CM2PCH<C2PCH0>
extern volatile __bit                   C2PCH0              __at(0x1F5D8);	// @ (0x3EBB * 8 + 0)
#define                                 C2PCH0_bit          _BIT_ACCESS(CM2PCH,0)
// CM2PCH<C2PCH1>
extern volatile __bit                   C2PCH1              __at(0x1F5D9);	// @ (0x3EBB * 8 + 1)
#define                                 C2PCH1_bit          _BIT_ACCESS(CM2PCH,1)
// CM2PCH<C2PCH2>
extern volatile __bit                   C2PCH2              __at(0x1F5DA);	// @ (0x3EBB * 8 + 2)
#define                                 C2PCH2_bit          _BIT_ACCESS(CM2PCH,2)
// CM2CON0<C2POL>
extern volatile __bit                   C2POL               __at(0x1F5C4);	// @ (0x3EB8 * 8 + 4)
#define                                 C2POL_bit           _BIT_ACCESS(CM2CON0,4)
// CM2CON0<C2SYNC>
extern volatile __bit                   C2SYNC              __at(0x1F5C0);	// @ (0x3EB8 * 8 + 0)
#define                                 C2SYNC_bit          _BIT_ACCESS(CM2CON0,0)
// CCPTMRS0<C2TSEL0>
extern volatile __bit                   C2TSEL0             __at(0x1FAF2);	// @ (0x3F5E * 8 + 2)
#define                                 C2TSEL0_bit         _BIT_ACCESS(CCPTMRS0,2)
// CCPTMRS0<C2TSEL1>
extern volatile __bit                   C2TSEL1             __at(0x1FAF3);	// @ (0x3F5E * 8 + 3)
#define                                 C2TSEL1_bit         _BIT_ACCESS(CCPTMRS0,3)
// CCPTMRS0<C3TSEL0>
extern volatile __bit                   C3TSEL0             __at(0x1FAF4);	// @ (0x3F5E * 8 + 4)
#define                                 C3TSEL0_bit         _BIT_ACCESS(CCPTMRS0,4)
// CCPTMRS0<C3TSEL1>
extern volatile __bit                   C3TSEL1             __at(0x1FAF5);	// @ (0x3F5E * 8 + 5)
#define                                 C3TSEL1_bit         _BIT_ACCESS(CCPTMRS0,5)
// CCPTMRS0<C4TSEL0>
extern volatile __bit                   C4TSEL0             __at(0x1FAF6);	// @ (0x3F5E * 8 + 6)
#define                                 C4TSEL0_bit         _BIT_ACCESS(CCPTMRS0,6)
// CCPTMRS0<C4TSEL1>
extern volatile __bit                   C4TSEL1             __at(0x1FAF7);	// @ (0x3F5E * 8 + 7)
#define                                 C4TSEL1_bit         _BIT_ACCESS(CCPTMRS0,7)
// ADCON3<CALC0>
extern volatile __bit                   CALC0               __at(0x1F7DC);	// @ (0x3EFB * 8 + 4)
#define                                 CALC0_bit           _BIT_ACCESS(ADCON3,4)
// ADCON3<CALC1>
extern volatile __bit                   CALC1               __at(0x1F7DD);	// @ (0x3EFB * 8 + 5)
#define                                 CALC1_bit           _BIT_ACCESS(ADCON3,5)
// ADCON3<CALC2>
extern volatile __bit                   CALC2               __at(0x1F7DE);	// @ (0x3EFB * 8 + 6)
#define                                 CALC2_bit           _BIT_ACCESS(ADCON3,6)
// ADCAP<CAP0>
extern volatile __bit                   CAP0                __at(0x1F7A8);	// @ (0x3EF5 * 8 + 0)
#define                                 CAP0_bit            _BIT_ACCESS(ADCAP,0)
// ADCAP<CAP1>
extern volatile __bit                   CAP1                __at(0x1F7A9);	// @ (0x3EF5 * 8 + 1)
#define                                 CAP1_bit            _BIT_ACCESS(ADCAP,1)
// ADCAP<CAP2>
extern volatile __bit                   CAP2                __at(0x1F7AA);	// @ (0x3EF5 * 8 + 2)
#define                                 CAP2_bit            _BIT_ACCESS(ADCAP,2)
// ADCAP<CAP3>
extern volatile __bit                   CAP3                __at(0x1F7AB);	// @ (0x3EF5 * 8 + 3)
#define                                 CAP3_bit            _BIT_ACCESS(ADCAP,3)
// ADCAP<CAP4>
extern volatile __bit                   CAP4                __at(0x1F7AC);	// @ (0x3EF5 * 8 + 4)
#define                                 CAP4_bit            _BIT_ACCESS(ADCAP,4)
// STATUS<CARRY>
extern volatile __bit                   CARRY               __at(0x1FEC0);	// @ (0x3FD8 * 8 + 0)
#define                                 CARRY_bit           _BIT_ACCESS(STATUS,0)
// CCP1CAP<CCP1CTS0>
extern volatile __bit                   CCP1CTS0            __at(0x1FBF8);	// @ (0x3F7F * 8 + 0)
#define                                 CCP1CTS0_bit        _BIT_ACCESS(CCP1CAP,0)
// CCP1CAP<CCP1CTS1>
extern volatile __bit                   CCP1CTS1            __at(0x1FBF9);	// @ (0x3F7F * 8 + 1)
#define                                 CCP1CTS1_bit        _BIT_ACCESS(CCP1CAP,1)
// CCP1CAP<CCP1CTS2>
extern volatile __bit                   CCP1CTS2            __at(0x1FBFA);	// @ (0x3F7F * 8 + 2)
#define                                 CCP1CTS2_bit        _BIT_ACCESS(CCP1CAP,2)
// CCP1CON<CCP1EN>
extern volatile __bit                   CCP1EN              __at(0x1FBF7);	// @ (0x3F7E * 8 + 7)
#define                                 CCP1EN_bit          _BIT_ACCESS(CCP1CON,7)
// CCP1CON<CCP1FMT>
extern volatile __bit                   CCP1FMT             __at(0x1FBF4);	// @ (0x3F7E * 8 + 4)
#define                                 CCP1FMT_bit         _BIT_ACCESS(CCP1CON,4)
// PIE4<CCP1IE>
extern volatile __bit                   CCP1IE              __at(0x1CCA3);	// @ (0x3994 * 8 + 3)
#define                                 CCP1IE_bit          _BIT_ACCESS(PIE4,3)
// PIR4<CCP1IF>
extern volatile __bit                   CCP1IF              __at(0x1CD23);	// @ (0x39A4 * 8 + 3)
#define                                 CCP1IF_bit          _BIT_ACCESS(PIR4,3)
// IPR4<CCP1IP>
extern volatile __bit                   CCP1IP              __at(0x1CC23);	// @ (0x3984 * 8 + 3)
#define                                 CCP1IP_bit          _BIT_ACCESS(IPR4,3)
// PMD3<CCP1MD>
extern volatile __bit                   CCP1MD              __at(0x1CE18);	// @ (0x39C3 * 8 + 0)
#define                                 CCP1MD_bit          _BIT_ACCESS(PMD3,0)
// CCP1CON<CCP1MODE0>
extern volatile __bit                   CCP1MODE0           __at(0x1FBF0);	// @ (0x3F7E * 8 + 0)
#define                                 CCP1MODE0_bit       _BIT_ACCESS(CCP1CON,0)
// CCP1CON<CCP1MODE1>
extern volatile __bit                   CCP1MODE1           __at(0x1FBF1);	// @ (0x3F7E * 8 + 1)
#define                                 CCP1MODE1_bit       _BIT_ACCESS(CCP1CON,1)
// CCP1CON<CCP1MODE2>
extern volatile __bit                   CCP1MODE2           __at(0x1FBF2);	// @ (0x3F7E * 8 + 2)
#define                                 CCP1MODE2_bit       _BIT_ACCESS(CCP1CON,2)
// CCP1CON<CCP1MODE3>
extern volatile __bit                   CCP1MODE3           __at(0x1FBF3);	// @ (0x3F7E * 8 + 3)
#define                                 CCP1MODE3_bit       _BIT_ACCESS(CCP1CON,3)
// CCP1CON<CCP1OUT>
extern volatile __bit                   CCP1OUT             __at(0x1FBF5);	// @ (0x3F7E * 8 + 5)
#define                                 CCP1OUT_bit         _BIT_ACCESS(CCP1CON,5)
// CCP2CAP<CCP2CTS0>
extern volatile __bit                   CCP2CTS0            __at(0x1FBD8);	// @ (0x3F7B * 8 + 0)
#define                                 CCP2CTS0_bit        _BIT_ACCESS(CCP2CAP,0)
// CCP2CAP<CCP2CTS1>
extern volatile __bit                   CCP2CTS1            __at(0x1FBD9);	// @ (0x3F7B * 8 + 1)
#define                                 CCP2CTS1_bit        _BIT_ACCESS(CCP2CAP,1)
// CCP2CAP<CCP2CTS2>
extern volatile __bit                   CCP2CTS2            __at(0x1FBDA);	// @ (0x3F7B * 8 + 2)
#define                                 CCP2CTS2_bit        _BIT_ACCESS(CCP2CAP,2)
// CCP2CON<CCP2EN>
extern volatile __bit                   CCP2EN              __at(0x1FBD7);	// @ (0x3F7A * 8 + 7)
#define                                 CCP2EN_bit          _BIT_ACCESS(CCP2CON,7)
// CCP2CON<CCP2FMT>
extern volatile __bit                   CCP2FMT             __at(0x1FBD4);	// @ (0x3F7A * 8 + 4)
#define                                 CCP2FMT_bit         _BIT_ACCESS(CCP2CON,4)
// PIE7<CCP2IE>
extern volatile __bit                   CCP2IE              __at(0x1CCB9);	// @ (0x3997 * 8 + 1)
#define                                 CCP2IE_bit          _BIT_ACCESS(PIE7,1)
// PIR7<CCP2IF>
extern volatile __bit                   CCP2IF              __at(0x1CD39);	// @ (0x39A7 * 8 + 1)
#define                                 CCP2IF_bit          _BIT_ACCESS(PIR7,1)
// IPR7<CCP2IP>
extern volatile __bit                   CCP2IP              __at(0x1CC39);	// @ (0x3987 * 8 + 1)
#define                                 CCP2IP_bit          _BIT_ACCESS(IPR7,1)
// PMD3<CCP2MD>
extern volatile __bit                   CCP2MD              __at(0x1CE19);	// @ (0x39C3 * 8 + 1)
#define                                 CCP2MD_bit          _BIT_ACCESS(PMD3,1)
// CCP2CON<CCP2MODE0>
extern volatile __bit                   CCP2MODE0           __at(0x1FBD0);	// @ (0x3F7A * 8 + 0)
#define                                 CCP2MODE0_bit       _BIT_ACCESS(CCP2CON,0)
// CCP2CON<CCP2MODE1>
extern volatile __bit                   CCP2MODE1           __at(0x1FBD1);	// @ (0x3F7A * 8 + 1)
#define                                 CCP2MODE1_bit       _BIT_ACCESS(CCP2CON,1)
// CCP2CON<CCP2MODE2>
extern volatile __bit                   CCP2MODE2           __at(0x1FBD2);	// @ (0x3F7A * 8 + 2)
#define                                 CCP2MODE2_bit       _BIT_ACCESS(CCP2CON,2)
// CCP2CON<CCP2MODE3>
extern volatile __bit                   CCP2MODE3           __at(0x1FBD3);	// @ (0x3F7A * 8 + 3)
#define                                 CCP2MODE3_bit       _BIT_ACCESS(CCP2CON,3)
// CCP2CON<CCP2OUT>
extern volatile __bit                   CCP2OUT             __at(0x1FBD5);	// @ (0x3F7A * 8 + 5)
#define                                 CCP2OUT_bit         _BIT_ACCESS(CCP2CON,5)
// CCP3CAP<CCP3CTS0>
extern volatile __bit                   CCP3CTS0            __at(0x1FBB8);	// @ (0x3F77 * 8 + 0)
#define                                 CCP3CTS0_bit        _BIT_ACCESS(CCP3CAP,0)
// CCP3CAP<CCP3CTS1>
extern volatile __bit                   CCP3CTS1            __at(0x1FBB9);	// @ (0x3F77 * 8 + 1)
#define                                 CCP3CTS1_bit        _BIT_ACCESS(CCP3CAP,1)
// CCP3CAP<CCP3CTS2>
extern volatile __bit                   CCP3CTS2            __at(0x1FBBA);	// @ (0x3F77 * 8 + 2)
#define                                 CCP3CTS2_bit        _BIT_ACCESS(CCP3CAP,2)
// CCP3CON<CCP3EN>
extern volatile __bit                   CCP3EN              __at(0x1FBB7);	// @ (0x3F76 * 8 + 7)
#define                                 CCP3EN_bit          _BIT_ACCESS(CCP3CON,7)
// CCP3CON<CCP3FMT>
extern volatile __bit                   CCP3FMT             __at(0x1FBB4);	// @ (0x3F76 * 8 + 4)
#define                                 CCP3FMT_bit         _BIT_ACCESS(CCP3CON,4)
// PIE9<CCP3IE>
extern volatile __bit                   CCP3IE              __at(0x1CCC9);	// @ (0x3999 * 8 + 1)
#define                                 CCP3IE_bit          _BIT_ACCESS(PIE9,1)
// PIR9<CCP3IF>
extern volatile __bit                   CCP3IF              __at(0x1CD49);	// @ (0x39A9 * 8 + 1)
#define                                 CCP3IF_bit          _BIT_ACCESS(PIR9,1)
// IPR9<CCP3IP>
extern volatile __bit                   CCP3IP              __at(0x1CC49);	// @ (0x3989 * 8 + 1)
#define                                 CCP3IP_bit          _BIT_ACCESS(IPR9,1)
// PMD3<CCP3MD>
extern volatile __bit                   CCP3MD              __at(0x1CE1A);	// @ (0x39C3 * 8 + 2)
#define                                 CCP3MD_bit          _BIT_ACCESS(PMD3,2)
// CCP3CON<CCP3MODE0>
extern volatile __bit                   CCP3MODE0           __at(0x1FBB0);	// @ (0x3F76 * 8 + 0)
#define                                 CCP3MODE0_bit       _BIT_ACCESS(CCP3CON,0)
// CCP3CON<CCP3MODE1>
extern volatile __bit                   CCP3MODE1           __at(0x1FBB1);	// @ (0x3F76 * 8 + 1)
#define                                 CCP3MODE1_bit       _BIT_ACCESS(CCP3CON,1)
// CCP3CON<CCP3MODE2>
extern volatile __bit                   CCP3MODE2           __at(0x1FBB2);	// @ (0x3F76 * 8 + 2)
#define                                 CCP3MODE2_bit       _BIT_ACCESS(CCP3CON,2)
// CCP3CON<CCP3MODE3>
extern volatile __bit                   CCP3MODE3           __at(0x1FBB3);	// @ (0x3F76 * 8 + 3)
#define                                 CCP3MODE3_bit       _BIT_ACCESS(CCP3CON,3)
// CCP3CON<CCP3OUT>
extern volatile __bit                   CCP3OUT             __at(0x1FBB5);	// @ (0x3F76 * 8 + 5)
#define                                 CCP3OUT_bit         _BIT_ACCESS(CCP3CON,5)
// CCP4CAP<CCP4CTS0>
extern volatile __bit                   CCP4CTS0            __at(0x1FB98);	// @ (0x3F73 * 8 + 0)
#define                                 CCP4CTS0_bit        _BIT_ACCESS(CCP4CAP,0)
// CCP4CAP<CCP4CTS1>
extern volatile __bit                   CCP4CTS1            __at(0x1FB99);	// @ (0x3F73 * 8 + 1)
#define                                 CCP4CTS1_bit        _BIT_ACCESS(CCP4CAP,1)
// CCP4CAP<CCP4CTS2>
extern volatile __bit                   CCP4CTS2            __at(0x1FB9A);	// @ (0x3F73 * 8 + 2)
#define                                 CCP4CTS2_bit        _BIT_ACCESS(CCP4CAP,2)
// CCP4CON<CCP4EN>
extern volatile __bit                   CCP4EN              __at(0x1FB97);	// @ (0x3F72 * 8 + 7)
#define                                 CCP4EN_bit          _BIT_ACCESS(CCP4CON,7)
// CCP4CON<CCP4FMT>
extern volatile __bit                   CCP4FMT             __at(0x1FB94);	// @ (0x3F72 * 8 + 4)
#define                                 CCP4FMT_bit         _BIT_ACCESS(CCP4CON,4)
// PIE10<CCP4IE>
extern volatile __bit                   CCP4IE              __at(0x1CCD0);	// @ (0x399A * 8 + 0)
#define                                 CCP4IE_bit          _BIT_ACCESS(PIE10,0)
// PIR10<CCP4IF>
extern volatile __bit                   CCP4IF              __at(0x1CD50);	// @ (0x39AA * 8 + 0)
#define                                 CCP4IF_bit          _BIT_ACCESS(PIR10,0)
// IPR10<CCP4IP>
extern volatile __bit                   CCP4IP              __at(0x1CC50);	// @ (0x398A * 8 + 0)
#define                                 CCP4IP_bit          _BIT_ACCESS(IPR10,0)
// PMD3<CCP4MD>
extern volatile __bit                   CCP4MD              __at(0x1CE1B);	// @ (0x39C3 * 8 + 3)
#define                                 CCP4MD_bit          _BIT_ACCESS(PMD3,3)
// CCP4CON<CCP4MODE0>
extern volatile __bit                   CCP4MODE0           __at(0x1FB90);	// @ (0x3F72 * 8 + 0)
#define                                 CCP4MODE0_bit       _BIT_ACCESS(CCP4CON,0)
// CCP4CON<CCP4MODE1>
extern volatile __bit                   CCP4MODE1           __at(0x1FB91);	// @ (0x3F72 * 8 + 1)
#define                                 CCP4MODE1_bit       _BIT_ACCESS(CCP4CON,1)
// CCP4CON<CCP4MODE2>
extern volatile __bit                   CCP4MODE2           __at(0x1FB92);	// @ (0x3F72 * 8 + 2)
#define                                 CCP4MODE2_bit       _BIT_ACCESS(CCP4CON,2)
// CCP4CON<CCP4MODE3>
extern volatile __bit                   CCP4MODE3           __at(0x1FB93);	// @ (0x3F72 * 8 + 3)
#define                                 CCP4MODE3_bit       _BIT_ACCESS(CCP4CON,3)
// CCP4CON<CCP4OUT>
extern volatile __bit                   CCP4OUT             __at(0x1FB95);	// @ (0x3F72 * 8 + 5)
#define                                 CCP4OUT_bit         _BIT_ACCESS(CCP4CON,5)
// FVRCON<CDAFVR0>
extern volatile __bit                   CDAFVR0             __at(0x1F60A);	// @ (0x3EC1 * 8 + 2)
#define                                 CDAFVR0_bit         _BIT_ACCESS(FVRCON,2)
// FVRCON<CDAFVR1>
extern volatile __bit                   CDAFVR1             __at(0x1F60B);	// @ (0x3EC1 * 8 + 3)
#define                                 CDAFVR1_bit         _BIT_ACCESS(FVRCON,3)
// OSCCON2<CDIV0>
extern volatile __bit                   CDIV0               __at(0x1CED0);	// @ (0x39DA * 8 + 0)
#define                                 CDIV0_bit           _BIT_ACCESS(OSCCON2,0)
// OSCCON2<CDIV1>
extern volatile __bit                   CDIV1               __at(0x1CED1);	// @ (0x39DA * 8 + 1)
#define                                 CDIV1_bit           _BIT_ACCESS(OSCCON2,1)
// OSCCON2<CDIV2>
extern volatile __bit                   CDIV2               __at(0x1CED2);	// @ (0x39DA * 8 + 2)
#define                                 CDIV2_bit           _BIT_ACCESS(OSCCON2,2)
// OSCCON2<CDIV3>
extern volatile __bit                   CDIV3               __at(0x1CED3);	// @ (0x39DA * 8 + 3)
#define                                 CDIV3_bit           _BIT_ACCESS(OSCCON2,3)
// MD1CARH<CH0>
extern volatile __bit                   CH0                 __at(0x1E7F0);	// @ (0x3CFE * 8 + 0)
#define                                 CH0_bit             _BIT_ACCESS(MD1CARH,0)
// MD1CARH<CH1>
extern volatile __bit                   CH1                 __at(0x1E7F1);	// @ (0x3CFE * 8 + 1)
#define                                 CH1_bit             _BIT_ACCESS(MD1CARH,1)
// MD1CARH<CH2>
extern volatile __bit                   CH2                 __at(0x1E7F2);	// @ (0x3CFE * 8 + 2)
#define                                 CH2_bit             _BIT_ACCESS(MD1CARH,2)
// MD1CARH<CH3>
extern volatile __bit                   CH3                 __at(0x1E7F3);	// @ (0x3CFE * 8 + 3)
#define                                 CH3_bit             _BIT_ACCESS(MD1CARH,3)
// MD1CARH<CH4>
extern volatile __bit                   CH4                 __at(0x1E7F4);	// @ (0x3CFE * 8 + 4)
#define                                 CH4_bit             _BIT_ACCESS(MD1CARH,4)
// MD1CON1<CHPOL>
extern volatile __bit                   CHPOL               __at(0x1E7DD);	// @ (0x3CFB * 8 + 5)
#define                                 CHPOL_bit           _BIT_ACCESS(MD1CON1,5)
// MD1CON1<CHSYNC>
extern volatile __bit                   CHSYNC              __at(0x1E7DC);	// @ (0x3CFB * 8 + 4)
#define                                 CHSYNC_bit          _BIT_ACCESS(MD1CON1,4)
// SPI1CON1<CKE>
extern volatile __bit                   CKE                 __at(0x1E8AE);	// @ (0x3D15 * 8 + 6)
#define                                 CKE_bit             _BIT_ACCESS(SPI1CON1,6)
// SPI1CON1<CKP>
extern volatile __bit                   CKP                 __at(0x1E8AD);	// @ (0x3D15 * 8 + 5)
#define                                 CKP_bit             _BIT_ACCESS(SPI1CON1,5)
// T0CON1<CKPS3>
extern volatile __bit                   CKPS3               __at(0x1FDCB);	// @ (0x3FB9 * 8 + 3)
#define                                 CKPS3_bit           _BIT_ACCESS(T0CON1,3)
// NCO1CLK<CKS0>
extern volatile __bit                   CKS0                __at(0x1F9F8);	// @ (0x3F3F * 8 + 0)
#define                                 CKS0_bit            _BIT_ACCESS(NCO1CLK,0)
// NCO1CLK<CKS1>
extern volatile __bit                   CKS1                __at(0x1F9F9);	// @ (0x3F3F * 8 + 1)
#define                                 CKS1_bit            _BIT_ACCESS(NCO1CLK,1)
// NCO1CLK<CKS2>
extern volatile __bit                   CKS2                __at(0x1F9FA);	// @ (0x3F3F * 8 + 2)
#define                                 CKS2_bit            _BIT_ACCESS(NCO1CLK,2)
// NCO1CLK<CKS3>
extern volatile __bit                   CKS3                __at(0x1F9FB);	// @ (0x3F3F * 8 + 3)
#define                                 CKS3_bit            _BIT_ACCESS(NCO1CLK,3)
// MD1CARL<CL0>
extern volatile __bit                   CL0                 __at(0x1E7E8);	// @ (0x3CFD * 8 + 0)
#define                                 CL0_bit             _BIT_ACCESS(MD1CARL,0)
// MD1CARL<CL1>
extern volatile __bit                   CL1                 __at(0x1E7E9);	// @ (0x3CFD * 8 + 1)
#define                                 CL1_bit             _BIT_ACCESS(MD1CARL,1)
// MD1CARL<CL2>
extern volatile __bit                   CL2                 __at(0x1E7EA);	// @ (0x3CFD * 8 + 2)
#define                                 CL2_bit             _BIT_ACCESS(MD1CARL,2)
// MD1CARL<CL3>
extern volatile __bit                   CL3                 __at(0x1E7EB);	// @ (0x3CFD * 8 + 3)
#define                                 CL3_bit             _BIT_ACCESS(MD1CARL,3)
// MD1CARL<CL4>
extern volatile __bit                   CL4                 __at(0x1E7EC);	// @ (0x3CFD * 8 + 4)
#define                                 CL4_bit             _BIT_ACCESS(MD1CARL,4)
// PIE4<CLC1IE>
extern volatile __bit                   CLC1IE              __at(0x1CCA7);	// @ (0x3994 * 8 + 7)
#define                                 CLC1IE_bit          _BIT_ACCESS(PIE4,7)
// PIR4<CLC1IF>
extern volatile __bit                   CLC1IF              __at(0x1CD27);	// @ (0x39A4 * 8 + 7)
#define                                 CLC1IF_bit          _BIT_ACCESS(PIR4,7)
// IPR4<CLC1IP>
extern volatile __bit                   CLC1IP              __at(0x1CC27);	// @ (0x3984 * 8 + 7)
#define                                 CLC1IP_bit          _BIT_ACCESS(IPR4,7)
// PMD6<CLC1MD>
extern volatile __bit                   CLC1MD              __at(0x1CE31);	// @ (0x39C6 * 8 + 1)
#define                                 CLC1MD_bit          _BIT_ACCESS(PMD6,1)
// CLCDATA0<CLC1OUT>
extern volatile __bit                   CLC1OUT             __at(0x1E3F0);	// @ (0x3C7E * 8 + 0)
#define                                 CLC1OUT_bit         _BIT_ACCESS(CLCDATA0,0)
// PIE7<CLC2IE>
extern volatile __bit                   CLC2IE              __at(0x1CCBC);	// @ (0x3997 * 8 + 4)
#define                                 CLC2IE_bit          _BIT_ACCESS(PIE7,4)
// PIR7<CLC2IF>
extern volatile __bit                   CLC2IF              __at(0x1CD3C);	// @ (0x39A7 * 8 + 4)
#define                                 CLC2IF_bit          _BIT_ACCESS(PIR7,4)
// IPR7<CLC2IP>
extern volatile __bit                   CLC2IP              __at(0x1CC3C);	// @ (0x3987 * 8 + 4)
#define                                 CLC2IP_bit          _BIT_ACCESS(IPR7,4)
// PMD6<CLC2MD>
extern volatile __bit                   CLC2MD              __at(0x1CE32);	// @ (0x39C6 * 8 + 2)
#define                                 CLC2MD_bit          _BIT_ACCESS(PMD6,2)
// CLCDATA0<CLC2OUT>
extern volatile __bit                   CLC2OUT             __at(0x1E3F1);	// @ (0x3C7E * 8 + 1)
#define                                 CLC2OUT_bit         _BIT_ACCESS(CLCDATA0,1)
// PIE9<CLC3IE>
extern volatile __bit                   CLC3IE              __at(0x1CCCB);	// @ (0x3999 * 8 + 3)
#define                                 CLC3IE_bit          _BIT_ACCESS(PIE9,3)
// PIR9<CLC3IF>
extern volatile __bit                   CLC3IF              __at(0x1CD4B);	// @ (0x39A9 * 8 + 3)
#define                                 CLC3IF_bit          _BIT_ACCESS(PIR9,3)
// IPR9<CLC3IP>
extern volatile __bit                   CLC3IP              __at(0x1CC4B);	// @ (0x3989 * 8 + 3)
#define                                 CLC3IP_bit          _BIT_ACCESS(IPR9,3)
// PMD6<CLC3MD>
extern volatile __bit                   CLC3MD              __at(0x1CE33);	// @ (0x39C6 * 8 + 3)
#define                                 CLC3MD_bit          _BIT_ACCESS(PMD6,3)
// CLCDATA0<CLC3OUT>
extern volatile __bit                   CLC3OUT             __at(0x1E3F2);	// @ (0x3C7E * 8 + 2)
#define                                 CLC3OUT_bit         _BIT_ACCESS(CLCDATA0,2)
// PIE10<CLC4IE>
extern volatile __bit                   CLC4IE              __at(0x1CCD1);	// @ (0x399A * 8 + 1)
#define                                 CLC4IE_bit          _BIT_ACCESS(PIE10,1)
// PIR10<CLC4IF>
extern volatile __bit                   CLC4IF              __at(0x1CD51);	// @ (0x39AA * 8 + 1)
#define                                 CLC4IF_bit          _BIT_ACCESS(PIR10,1)
// IPR10<CLC4IP>
extern volatile __bit                   CLC4IP              __at(0x1CC51);	// @ (0x398A * 8 + 1)
#define                                 CLC4IP_bit          _BIT_ACCESS(IPR10,1)
// PMD6<CLC4MD>
extern volatile __bit                   CLC4MD              __at(0x1CE34);	// @ (0x39C6 * 8 + 4)
#define                                 CLC4MD_bit          _BIT_ACCESS(PMD6,4)
// CLCDATA0<CLC4OUT>
extern volatile __bit                   CLC4OUT             __at(0x1E3F3);	// @ (0x3C7E * 8 + 3)
#define                                 CLC4OUT_bit         _BIT_ACCESS(CLCDATA0,3)
// CLKRCLK<CLKRCLK0>
extern volatile __bit                   CLKRCLK0            __at(0x1E730);	// @ (0x3CE6 * 8 + 0)
#define                                 CLKRCLK0_bit        _BIT_ACCESS(CLKRCLK,0)
// CLKRCLK<CLKRCLK1>
extern volatile __bit                   CLKRCLK1            __at(0x1E731);	// @ (0x3CE6 * 8 + 1)
#define                                 CLKRCLK1_bit        _BIT_ACCESS(CLKRCLK,1)
// CLKRCLK<CLKRCLK2>
extern volatile __bit                   CLKRCLK2            __at(0x1E732);	// @ (0x3CE6 * 8 + 2)
#define                                 CLKRCLK2_bit        _BIT_ACCESS(CLKRCLK,2)
// CLKRCLK<CLKRCLK3>
extern volatile __bit                   CLKRCLK3            __at(0x1E733);	// @ (0x3CE6 * 8 + 3)
#define                                 CLKRCLK3_bit        _BIT_ACCESS(CLKRCLK,3)
// CLKRCON<CLKRDC0>
extern volatile __bit                   CLKRDC0             __at(0x1E72B);	// @ (0x3CE5 * 8 + 3)
#define                                 CLKRDC0_bit         _BIT_ACCESS(CLKRCON,3)
// CLKRCON<CLKRDC1>
extern volatile __bit                   CLKRDC1             __at(0x1E72C);	// @ (0x3CE5 * 8 + 4)
#define                                 CLKRDC1_bit         _BIT_ACCESS(CLKRCON,4)
// CLKRCON<CLKRDIV0>
extern volatile __bit                   CLKRDIV0            __at(0x1E728);	// @ (0x3CE5 * 8 + 0)
#define                                 CLKRDIV0_bit        _BIT_ACCESS(CLKRCON,0)
// CLKRCON<CLKRDIV1>
extern volatile __bit                   CLKRDIV1            __at(0x1E729);	// @ (0x3CE5 * 8 + 1)
#define                                 CLKRDIV1_bit        _BIT_ACCESS(CLKRCON,1)
// CLKRCON<CLKRDIV2>
extern volatile __bit                   CLKRDIV2            __at(0x1E72A);	// @ (0x3CE5 * 8 + 2)
#define                                 CLKRDIV2_bit        _BIT_ACCESS(CLKRCON,2)
// CLKRCON<CLKREN>
extern volatile __bit                   CLKREN              __at(0x1E72F);	// @ (0x3CE5 * 8 + 7)
#define                                 CLKREN_bit          _BIT_ACCESS(CLKRCON,7)
// PMD0<CLKRMD>
extern volatile __bit                   CLKRMD              __at(0x1CE01);	// @ (0x39C0 * 8 + 1)
#define                                 CLKRMD_bit          _BIT_ACCESS(PMD0,1)
// SPI1CLK<CLKSEL0>
extern volatile __bit                   CLKSEL0             __at(0x1E8E0);	// @ (0x3D1C * 8 + 0)
#define                                 CLKSEL0_bit         _BIT_ACCESS(SPI1CLK,0)
// SPI1CLK<CLKSEL1>
extern volatile __bit                   CLKSEL1             __at(0x1E8E1);	// @ (0x3D1C * 8 + 1)
#define                                 CLKSEL1_bit         _BIT_ACCESS(SPI1CLK,1)
// SPI1CLK<CLKSEL2>
extern volatile __bit                   CLKSEL2             __at(0x1E8E2);	// @ (0x3D1C * 8 + 2)
#define                                 CLKSEL2_bit         _BIT_ACCESS(SPI1CLK,2)
// SPI1CLK<CLKSEL3>
extern volatile __bit                   CLKSEL3             __at(0x1E8E3);	// @ (0x3D1C * 8 + 3)
#define                                 CLKSEL3_bit         _BIT_ACCESS(SPI1CLK,3)
// MD1CON1<CLPOL>
extern volatile __bit                   CLPOL               __at(0x1E7D9);	// @ (0x3CFB * 8 + 1)
#define                                 CLPOL_bit           _BIT_ACCESS(MD1CON1,1)
// MD1CON1<CLSYNC>
extern volatile __bit                   CLSYNC              __at(0x1E7D8);	// @ (0x3CFB * 8 + 0)
#define                                 CLSYNC_bit          _BIT_ACCESS(MD1CON1,0)
// PMD2<CMP1MD>
extern volatile __bit                   CMP1MD              __at(0x1CE11);	// @ (0x39C2 * 8 + 1)
#define                                 CMP1MD_bit          _BIT_ACCESS(PMD2,1)
// PMD2<CMP2MD>
extern volatile __bit                   CMP2MD              __at(0x1CE12);	// @ (0x39C2 * 8 + 2)
#define                                 CMP2MD_bit          _BIT_ACCESS(PMD2,2)
// I2C1PIE<CNT1IE>
extern volatile __bit                   CNT1IE              __at(0x1EBD7);	// @ (0x3D7A * 8 + 7)
#define                                 CNT1IE_bit          _BIT_ACCESS(I2C1PIE,7)
// I2C1PIR<CNT1IF>
extern volatile __bit                   CNT1IF              __at(0x1EBCF);	// @ (0x3D79 * 8 + 7)
#define                                 CNT1IF_bit          _BIT_ACCESS(I2C1PIR,7)
// I2C2PIE<CNT2IE>
extern volatile __bit                   CNT2IE              __at(0x1EB27);	// @ (0x3D64 * 8 + 7)
#define                                 CNT2IE_bit          _BIT_ACCESS(I2C2PIE,7)
// I2C2PIR<CNT2IF>
extern volatile __bit                   CNT2IF              __at(0x1EB1F);	// @ (0x3D63 * 8 + 7)
#define                                 CNT2IF_bit          _BIT_ACCESS(I2C2PIR,7)
// ADCON0<CONT>
extern volatile __bit                   CONT                __at(0x1F7C6);	// @ (0x3EF8 * 8 + 6)
#define                                 CONT_bit            _BIT_ACCESS(ADCON0,6)
// OSCCON2<COSC0>
extern volatile __bit                   COSC0               __at(0x1CED4);	// @ (0x39DA * 8 + 4)
#define                                 COSC0_bit           _BIT_ACCESS(OSCCON2,4)
// OSCCON2<COSC1>
extern volatile __bit                   COSC1               __at(0x1CED5);	// @ (0x39DA * 8 + 5)
#define                                 COSC1_bit           _BIT_ACCESS(OSCCON2,5)
// OSCCON2<COSC2>
extern volatile __bit                   COSC2               __at(0x1CED6);	// @ (0x39DA * 8 + 6)
#define                                 COSC2_bit           _BIT_ACCESS(OSCCON2,6)
// SMT1CON0<CPOL>
extern volatile __bit                   CPOL                __at(0x1F8F2);	// @ (0x3F1E * 8 + 2)
#define                                 CPOL_bit            _BIT_ACCESS(SMT1CON0,2)
// ADCP<CPON>
extern volatile __bit                   CPON                __at(0x1F6BF);	// @ (0x3ED7 * 8 + 7)
#define                                 CPON_bit            _BIT_ACCESS(ADCP,7)
// SMT1CPRL<CPR0>
extern volatile __bit                   CPR0                __at(0x1F8A8);	// @ (0x3F15 * 8 + 0)
#define                                 CPR0_bit            _BIT_ACCESS(SMT1CPRL,0)
// SMT1CPRL<CPR1>
extern volatile __bit                   CPR1                __at(0x1F8A9);	// @ (0x3F15 * 8 + 1)
#define                                 CPR1_bit            _BIT_ACCESS(SMT1CPRL,1)
// SMT1CPRH<CPR10>
extern volatile __bit                   CPR10               __at(0x1F8B2);	// @ (0x3F16 * 8 + 2)
#define                                 CPR10_bit           _BIT_ACCESS(SMT1CPRH,2)
// SMT1CPRH<CPR11>
extern volatile __bit                   CPR11               __at(0x1F8B3);	// @ (0x3F16 * 8 + 3)
#define                                 CPR11_bit           _BIT_ACCESS(SMT1CPRH,3)
// SMT1CPRH<CPR12>
extern volatile __bit                   CPR12               __at(0x1F8B4);	// @ (0x3F16 * 8 + 4)
#define                                 CPR12_bit           _BIT_ACCESS(SMT1CPRH,4)
// SMT1CPRH<CPR13>
extern volatile __bit                   CPR13               __at(0x1F8B5);	// @ (0x3F16 * 8 + 5)
#define                                 CPR13_bit           _BIT_ACCESS(SMT1CPRH,5)
// SMT1CPRH<CPR14>
extern volatile __bit                   CPR14               __at(0x1F8B6);	// @ (0x3F16 * 8 + 6)
#define                                 CPR14_bit           _BIT_ACCESS(SMT1CPRH,6)
// SMT1CPRH<CPR15>
extern volatile __bit                   CPR15               __at(0x1F8B7);	// @ (0x3F16 * 8 + 7)
#define                                 CPR15_bit           _BIT_ACCESS(SMT1CPRH,7)
// SMT1CPRU<CPR16>
extern volatile __bit                   CPR16               __at(0x1F8B8);	// @ (0x3F17 * 8 + 0)
#define                                 CPR16_bit           _BIT_ACCESS(SMT1CPRU,0)
// SMT1CPRU<CPR17>
extern volatile __bit                   CPR17               __at(0x1F8B9);	// @ (0x3F17 * 8 + 1)
#define                                 CPR17_bit           _BIT_ACCESS(SMT1CPRU,1)
// SMT1CPRU<CPR18>
extern volatile __bit                   CPR18               __at(0x1F8BA);	// @ (0x3F17 * 8 + 2)
#define                                 CPR18_bit           _BIT_ACCESS(SMT1CPRU,2)
// SMT1CPRU<CPR19>
extern volatile __bit                   CPR19               __at(0x1F8BB);	// @ (0x3F17 * 8 + 3)
#define                                 CPR19_bit           _BIT_ACCESS(SMT1CPRU,3)
// SMT1CPRL<CPR2>
extern volatile __bit                   CPR2                __at(0x1F8AA);	// @ (0x3F15 * 8 + 2)
#define                                 CPR2_bit            _BIT_ACCESS(SMT1CPRL,2)
// SMT1CPRU<CPR20>
extern volatile __bit                   CPR20               __at(0x1F8BC);	// @ (0x3F17 * 8 + 4)
#define                                 CPR20_bit           _BIT_ACCESS(SMT1CPRU,4)
// SMT1CPRU<CPR21>
extern volatile __bit                   CPR21               __at(0x1F8BD);	// @ (0x3F17 * 8 + 5)
#define                                 CPR21_bit           _BIT_ACCESS(SMT1CPRU,5)
// SMT1CPRU<CPR22>
extern volatile __bit                   CPR22               __at(0x1F8BE);	// @ (0x3F17 * 8 + 6)
#define                                 CPR22_bit           _BIT_ACCESS(SMT1CPRU,6)
// SMT1CPRU<CPR23>
extern volatile __bit                   CPR23               __at(0x1F8BF);	// @ (0x3F17 * 8 + 7)
#define                                 CPR23_bit           _BIT_ACCESS(SMT1CPRU,7)
// SMT1CPRL<CPR3>
extern volatile __bit                   CPR3                __at(0x1F8AB);	// @ (0x3F15 * 8 + 3)
#define                                 CPR3_bit            _BIT_ACCESS(SMT1CPRL,3)
// SMT1CPRL<CPR4>
extern volatile __bit                   CPR4                __at(0x1F8AC);	// @ (0x3F15 * 8 + 4)
#define                                 CPR4_bit            _BIT_ACCESS(SMT1CPRL,4)
// SMT1CPRL<CPR5>
extern volatile __bit                   CPR5                __at(0x1F8AD);	// @ (0x3F15 * 8 + 5)
#define                                 CPR5_bit            _BIT_ACCESS(SMT1CPRL,5)
// SMT1CPRL<CPR6>
extern volatile __bit                   CPR6                __at(0x1F8AE);	// @ (0x3F15 * 8 + 6)
#define                                 CPR6_bit            _BIT_ACCESS(SMT1CPRL,6)
// SMT1CPRL<CPR7>
extern volatile __bit                   CPR7                __at(0x1F8AF);	// @ (0x3F15 * 8 + 7)
#define                                 CPR7_bit            _BIT_ACCESS(SMT1CPRL,7)
// SMT1CPRH<CPR8>
extern volatile __bit                   CPR8                __at(0x1F8B0);	// @ (0x3F16 * 8 + 0)
#define                                 CPR8_bit            _BIT_ACCESS(SMT1CPRH,0)
// SMT1CPRH<CPR9>
extern volatile __bit                   CPR9                __at(0x1F8B1);	// @ (0x3F16 * 8 + 1)
#define                                 CPR9_bit            _BIT_ACCESS(SMT1CPRH,1)
// ADCP<CPRDY>
extern volatile __bit                   CPRDY               __at(0x1F6B8);	// @ (0x3ED7 * 8 + 0)
#define                                 CPRDY_bit           _BIT_ACCESS(ADCP,0)
// SMT1STAT<CPRUP>
extern volatile __bit                   CPRUP               __at(0x1F907);	// @ (0x3F20 * 8 + 7)
#define                                 CPRUP_bit           _BIT_ACCESS(SMT1STAT,7)
// SMT1CPWL<CPW0>
extern volatile __bit                   CPW0                __at(0x1F8C0);	// @ (0x3F18 * 8 + 0)
#define                                 CPW0_bit            _BIT_ACCESS(SMT1CPWL,0)
// SMT1CPWL<CPW1>
extern volatile __bit                   CPW1                __at(0x1F8C1);	// @ (0x3F18 * 8 + 1)
#define                                 CPW1_bit            _BIT_ACCESS(SMT1CPWL,1)
// SMT1CPWH<CPW10>
extern volatile __bit                   CPW10               __at(0x1F8CA);	// @ (0x3F19 * 8 + 2)
#define                                 CPW10_bit           _BIT_ACCESS(SMT1CPWH,2)
// SMT1CPWH<CPW11>
extern volatile __bit                   CPW11               __at(0x1F8CB);	// @ (0x3F19 * 8 + 3)
#define                                 CPW11_bit           _BIT_ACCESS(SMT1CPWH,3)
// SMT1CPWH<CPW12>
extern volatile __bit                   CPW12               __at(0x1F8CC);	// @ (0x3F19 * 8 + 4)
#define                                 CPW12_bit           _BIT_ACCESS(SMT1CPWH,4)
// SMT1CPWH<CPW13>
extern volatile __bit                   CPW13               __at(0x1F8CD);	// @ (0x3F19 * 8 + 5)
#define                                 CPW13_bit           _BIT_ACCESS(SMT1CPWH,5)
// SMT1CPWH<CPW14>
extern volatile __bit                   CPW14               __at(0x1F8CE);	// @ (0x3F19 * 8 + 6)
#define                                 CPW14_bit           _BIT_ACCESS(SMT1CPWH,6)
// SMT1CPWH<CPW15>
extern volatile __bit                   CPW15               __at(0x1F8CF);	// @ (0x3F19 * 8 + 7)
#define                                 CPW15_bit           _BIT_ACCESS(SMT1CPWH,7)
// SMT1CPWU<CPW16>
extern volatile __bit                   CPW16               __at(0x1F8D0);	// @ (0x3F1A * 8 + 0)
#define                                 CPW16_bit           _BIT_ACCESS(SMT1CPWU,0)
// SMT1CPWU<CPW17>
extern volatile __bit                   CPW17               __at(0x1F8D1);	// @ (0x3F1A * 8 + 1)
#define                                 CPW17_bit           _BIT_ACCESS(SMT1CPWU,1)
// SMT1CPWU<CPW18>
extern volatile __bit                   CPW18               __at(0x1F8D2);	// @ (0x3F1A * 8 + 2)
#define                                 CPW18_bit           _BIT_ACCESS(SMT1CPWU,2)
// SMT1CPWU<CPW19>
extern volatile __bit                   CPW19               __at(0x1F8D3);	// @ (0x3F1A * 8 + 3)
#define                                 CPW19_bit           _BIT_ACCESS(SMT1CPWU,3)
// SMT1CPWL<CPW2>
extern volatile __bit                   CPW2                __at(0x1F8C2);	// @ (0x3F18 * 8 + 2)
#define                                 CPW2_bit            _BIT_ACCESS(SMT1CPWL,2)
// SMT1CPWU<CPW20>
extern volatile __bit                   CPW20               __at(0x1F8D4);	// @ (0x3F1A * 8 + 4)
#define                                 CPW20_bit           _BIT_ACCESS(SMT1CPWU,4)
// SMT1CPWU<CPW21>
extern volatile __bit                   CPW21               __at(0x1F8D5);	// @ (0x3F1A * 8 + 5)
#define                                 CPW21_bit           _BIT_ACCESS(SMT1CPWU,5)
// SMT1CPWU<CPW22>
extern volatile __bit                   CPW22               __at(0x1F8D6);	// @ (0x3F1A * 8 + 6)
#define                                 CPW22_bit           _BIT_ACCESS(SMT1CPWU,6)
// SMT1CPWU<CPW23>
extern volatile __bit                   CPW23               __at(0x1F8D7);	// @ (0x3F1A * 8 + 7)
#define                                 CPW23_bit           _BIT_ACCESS(SMT1CPWU,7)
// SMT1CPWL<CPW3>
extern volatile __bit                   CPW3                __at(0x1F8C3);	// @ (0x3F18 * 8 + 3)
#define                                 CPW3_bit            _BIT_ACCESS(SMT1CPWL,3)
// SMT1CPWL<CPW4>
extern volatile __bit                   CPW4                __at(0x1F8C4);	// @ (0x3F18 * 8 + 4)
#define                                 CPW4_bit            _BIT_ACCESS(SMT1CPWL,4)
// SMT1CPWL<CPW5>
extern volatile __bit                   CPW5                __at(0x1F8C5);	// @ (0x3F18 * 8 + 5)
#define                                 CPW5_bit            _BIT_ACCESS(SMT1CPWL,5)
// SMT1CPWL<CPW6>
extern volatile __bit                   CPW6                __at(0x1F8C6);	// @ (0x3F18 * 8 + 6)
#define                                 CPW6_bit            _BIT_ACCESS(SMT1CPWL,6)
// SMT1CPWL<CPW7>
extern volatile __bit                   CPW7                __at(0x1F8C7);	// @ (0x3F18 * 8 + 7)
#define                                 CPW7_bit            _BIT_ACCESS(SMT1CPWL,7)
// SMT1CPWH<CPW8>
extern volatile __bit                   CPW8                __at(0x1F8C8);	// @ (0x3F19 * 8 + 0)
#define                                 CPW8_bit            _BIT_ACCESS(SMT1CPWH,0)
// SMT1CPWH<CPW9>
extern volatile __bit                   CPW9                __at(0x1F8C9);	// @ (0x3F19 * 8 + 1)
#define                                 CPW9_bit            _BIT_ACCESS(SMT1CPWH,1)
// SMT1STAT<CPWUP>
extern volatile __bit                   CPWUP               __at(0x1F906);	// @ (0x3F20 * 8 + 6)
#define                                 CPWUP_bit           _BIT_ACCESS(SMT1STAT,6)
// CRCCON0<CRCEN>
extern volatile __bit                   CRCEN               __at(0x1CB47);	// @ (0x3968 * 8 + 7)
#define                                 CRCEN_bit           _BIT_ACCESS(CRCCON0,7)
// CRCCON0<CRCGO>
extern volatile __bit                   CRCGO               __at(0x1CB46);	// @ (0x3968 * 8 + 6)
#define                                 CRCGO_bit           _BIT_ACCESS(CRCCON0,6)
// PIE0<CRCIE>
extern volatile __bit                   CRCIE               __at(0x1CC86);	// @ (0x3990 * 8 + 6)
#define                                 CRCIE_bit           _BIT_ACCESS(PIE0,6)
// PIR0<CRCIF>
extern volatile __bit                   CRCIF               __at(0x1CD06);	// @ (0x39A0 * 8 + 6)
#define                                 CRCIF_bit           _BIT_ACCESS(PIR0,6)
// IPR0<CRCIP>
extern volatile __bit                   CRCIP               __at(0x1CC06);	// @ (0x3980 * 8 + 6)
#define                                 CRCIP_bit           _BIT_ACCESS(IPR0,6)
// PMD0<CRCMD>
extern volatile __bit                   CRCMD               __at(0x1CE04);	// @ (0x39C0 * 8 + 4)
#define                                 CRCMD_bit           _BIT_ACCESS(PMD0,4)
// ADCON2<CRS0>
extern volatile __bit                   CRS0                __at(0x1F7D4);	// @ (0x3EFA * 8 + 4)
#define                                 CRS0_bit            _BIT_ACCESS(ADCON2,4)
// ADCON2<CRS1>
extern volatile __bit                   CRS1                __at(0x1F7D5);	// @ (0x3EFA * 8 + 5)
#define                                 CRS1_bit            _BIT_ACCESS(ADCON2,5)
// ADCON2<CRS2>
extern volatile __bit                   CRS2                __at(0x1F7D6);	// @ (0x3EFA * 8 + 6)
#define                                 CRS2_bit            _BIT_ACCESS(ADCON2,6)
// ADCLK<CS5>
extern volatile __bit                   CS5                 __at(0x1F7FD);	// @ (0x3EFF * 8 + 5)
#define                                 CS5_bit             _BIT_ACCESS(ADCLK,5)
// SMT1CLK<CSEL0>
extern volatile __bit                   CSEL0               __at(0x1F908);	// @ (0x3F21 * 8 + 0)
#define                                 CSEL0_bit           _BIT_ACCESS(SMT1CLK,0)
// SMT1CLK<CSEL1>
extern volatile __bit                   CSEL1               __at(0x1F909);	// @ (0x3F21 * 8 + 1)
#define                                 CSEL1_bit           _BIT_ACCESS(SMT1CLK,1)
// SMT1CLK<CSEL2>
extern volatile __bit                   CSEL2               __at(0x1F90A);	// @ (0x3F21 * 8 + 2)
#define                                 CSEL2_bit           _BIT_ACCESS(SMT1CLK,2)
// OSCCON3<CSWHOLD>
extern volatile __bit                   CSWHOLD             __at(0x1CEDF);	// @ (0x39DB * 8 + 7)
#define                                 CSWHOLD_bit         _BIT_ACCESS(OSCCON3,7)
// PIE0<CSWIE>
extern volatile __bit                   CSWIE               __at(0x1CC83);	// @ (0x3990 * 8 + 3)
#define                                 CSWIE_bit           _BIT_ACCESS(PIE0,3)
// PIR0<CSWIF>
extern volatile __bit                   CSWIF               __at(0x1CD03);	// @ (0x39A0 * 8 + 3)
#define                                 CSWIF_bit           _BIT_ACCESS(PIR0,3)
// IPR0<CSWIP>
extern volatile __bit                   CSWIP               __at(0x1CC03);	// @ (0x3980 * 8 + 3)
#define                                 CSWIP_bit           _BIT_ACCESS(IPR0,3)
// CWG1CLK<CWG1CS>
extern volatile __bit                   CWG1CS              __at(0x1FA90);	// @ (0x3F52 * 8 + 0)
#define                                 CWG1CS_bit          _BIT_ACCESS(CWG1CLK,0)
// CWG1DBF<CWG1DBF0>
extern volatile __bit                   CWG1DBF0            __at(0x1FAA8);	// @ (0x3F55 * 8 + 0)
#define                                 CWG1DBF0_bit        _BIT_ACCESS(CWG1DBF,0)
// CWG1DBF<CWG1DBF1>
extern volatile __bit                   CWG1DBF1            __at(0x1FAA9);	// @ (0x3F55 * 8 + 1)
#define                                 CWG1DBF1_bit        _BIT_ACCESS(CWG1DBF,1)
// CWG1DBF<CWG1DBF2>
extern volatile __bit                   CWG1DBF2            __at(0x1FAAA);	// @ (0x3F55 * 8 + 2)
#define                                 CWG1DBF2_bit        _BIT_ACCESS(CWG1DBF,2)
// CWG1DBF<CWG1DBF3>
extern volatile __bit                   CWG1DBF3            __at(0x1FAAB);	// @ (0x3F55 * 8 + 3)
#define                                 CWG1DBF3_bit        _BIT_ACCESS(CWG1DBF,3)
// CWG1DBF<CWG1DBF4>
extern volatile __bit                   CWG1DBF4            __at(0x1FAAC);	// @ (0x3F55 * 8 + 4)
#define                                 CWG1DBF4_bit        _BIT_ACCESS(CWG1DBF,4)
// CWG1DBF<CWG1DBF5>
extern volatile __bit                   CWG1DBF5            __at(0x1FAAD);	// @ (0x3F55 * 8 + 5)
#define                                 CWG1DBF5_bit        _BIT_ACCESS(CWG1DBF,5)
// CWG1DBR<CWG1DBR0>
extern volatile __bit                   CWG1DBR0            __at(0x1FAA0);	// @ (0x3F54 * 8 + 0)
#define                                 CWG1DBR0_bit        _BIT_ACCESS(CWG1DBR,0)
// CWG1DBR<CWG1DBR1>
extern volatile __bit                   CWG1DBR1            __at(0x1FAA1);	// @ (0x3F54 * 8 + 1)
#define                                 CWG1DBR1_bit        _BIT_ACCESS(CWG1DBR,1)
// CWG1DBR<CWG1DBR2>
extern volatile __bit                   CWG1DBR2            __at(0x1FAA2);	// @ (0x3F54 * 8 + 2)
#define                                 CWG1DBR2_bit        _BIT_ACCESS(CWG1DBR,2)
// CWG1DBR<CWG1DBR3>
extern volatile __bit                   CWG1DBR3            __at(0x1FAA3);	// @ (0x3F54 * 8 + 3)
#define                                 CWG1DBR3_bit        _BIT_ACCESS(CWG1DBR,3)
// CWG1DBR<CWG1DBR4>
extern volatile __bit                   CWG1DBR4            __at(0x1FAA4);	// @ (0x3F54 * 8 + 4)
#define                                 CWG1DBR4_bit        _BIT_ACCESS(CWG1DBR,4)
// CWG1DBR<CWG1DBR5>
extern volatile __bit                   CWG1DBR5            __at(0x1FAA5);	// @ (0x3F54 * 8 + 5)
#define                                 CWG1DBR5_bit        _BIT_ACCESS(CWG1DBR,5)
// CWG1CON0<CWG1EN>
extern volatile __bit                   CWG1EN              __at(0x1FAB7);	// @ (0x3F56 * 8 + 7)
#define                                 CWG1EN_bit          _BIT_ACCESS(CWG1CON0,7)
// PIE4<CWG1IE>
extern volatile __bit                   CWG1IE              __at(0x1CCA6);	// @ (0x3994 * 8 + 6)
#define                                 CWG1IE_bit          _BIT_ACCESS(PIE4,6)
// PIR4<CWG1IF>
extern volatile __bit                   CWG1IF              __at(0x1CD26);	// @ (0x39A4 * 8 + 6)
#define                                 CWG1IF_bit          _BIT_ACCESS(PIR4,6)
// CWG1CON1<CWG1IN>
extern volatile __bit                   CWG1IN              __at(0x1FABD);	// @ (0x3F57 * 8 + 5)
#define                                 CWG1IN_bit          _BIT_ACCESS(CWG1CON1,5)
// IPR4<CWG1IP>
extern volatile __bit                   CWG1IP              __at(0x1CC26);	// @ (0x3984 * 8 + 6)
#define                                 CWG1IP_bit          _BIT_ACCESS(IPR4,6)
// CWG1CON0<CWG1LD>
extern volatile __bit                   CWG1LD              __at(0x1FAB6);	// @ (0x3F56 * 8 + 6)
#define                                 CWG1LD_bit          _BIT_ACCESS(CWG1CON0,6)
// CWG1AS0<CWG1LSAC0>
extern volatile __bit                   CWG1LSAC0           __at(0x1FAC2);	// @ (0x3F58 * 8 + 2)
#define                                 CWG1LSAC0_bit       _BIT_ACCESS(CWG1AS0,2)
// CWG1AS0<CWG1LSAC1>
extern volatile __bit                   CWG1LSAC1           __at(0x1FAC3);	// @ (0x3F58 * 8 + 3)
#define                                 CWG1LSAC1_bit       _BIT_ACCESS(CWG1AS0,3)
// CWG1AS0<CWG1LSBD0>
extern volatile __bit                   CWG1LSBD0           __at(0x1FAC4);	// @ (0x3F58 * 8 + 4)
#define                                 CWG1LSBD0_bit       _BIT_ACCESS(CWG1AS0,4)
// CWG1AS0<CWG1LSBD1>
extern volatile __bit                   CWG1LSBD1           __at(0x1FAC5);	// @ (0x3F58 * 8 + 5)
#define                                 CWG1LSBD1_bit       _BIT_ACCESS(CWG1AS0,5)
// CWG1AS0<CWG1LSDB0>
extern volatile __bit                   CWG1LSDB0           __at(0x1FAC4);	// @ (0x3F58 * 8 + 4)
#define                                 CWG1LSDB0_bit       _BIT_ACCESS(CWG1AS0,4)
// CWG1AS0<CWG1LSDB1>
extern volatile __bit                   CWG1LSDB1           __at(0x1FAC5);	// @ (0x3F58 * 8 + 5)
#define                                 CWG1LSDB1_bit       _BIT_ACCESS(CWG1AS0,5)
// PMD4<CWG1MD>
extern volatile __bit                   CWG1MD              __at(0x1CE25);	// @ (0x39C4 * 8 + 5)
#define                                 CWG1MD_bit          _BIT_ACCESS(PMD4,5)
// CWG1CON0<CWG1MODE0>
extern volatile __bit                   CWG1MODE0           __at(0x1FAB0);	// @ (0x3F56 * 8 + 0)
#define                                 CWG1MODE0_bit       _BIT_ACCESS(CWG1CON0,0)
// CWG1CON0<CWG1MODE1>
extern volatile __bit                   CWG1MODE1           __at(0x1FAB1);	// @ (0x3F56 * 8 + 1)
#define                                 CWG1MODE1_bit       _BIT_ACCESS(CWG1CON0,1)
// CWG1CON0<CWG1MODE2>
extern volatile __bit                   CWG1MODE2           __at(0x1FAB2);	// @ (0x3F56 * 8 + 2)
#define                                 CWG1MODE2_bit       _BIT_ACCESS(CWG1CON0,2)
// CWG1STR<CWG1OVRA>
extern volatile __bit                   CWG1OVRA            __at(0x1FAD4);	// @ (0x3F5A * 8 + 4)
#define                                 CWG1OVRA_bit        _BIT_ACCESS(CWG1STR,4)
// CWG1STR<CWG1OVRB>
extern volatile __bit                   CWG1OVRB            __at(0x1FAD5);	// @ (0x3F5A * 8 + 5)
#define                                 CWG1OVRB_bit        _BIT_ACCESS(CWG1STR,5)
// CWG1STR<CWG1OVRC>
extern volatile __bit                   CWG1OVRC            __at(0x1FAD6);	// @ (0x3F5A * 8 + 6)
#define                                 CWG1OVRC_bit        _BIT_ACCESS(CWG1STR,6)
// CWG1STR<CWG1OVRD>
extern volatile __bit                   CWG1OVRD            __at(0x1FAD7);	// @ (0x3F5A * 8 + 7)
#define                                 CWG1OVRD_bit        _BIT_ACCESS(CWG1STR,7)
// CWG1CON1<CWG1POLA>
extern volatile __bit                   CWG1POLA            __at(0x1FAB8);	// @ (0x3F57 * 8 + 0)
#define                                 CWG1POLA_bit        _BIT_ACCESS(CWG1CON1,0)
// CWG1CON1<CWG1POLB>
extern volatile __bit                   CWG1POLB            __at(0x1FAB9);	// @ (0x3F57 * 8 + 1)
#define                                 CWG1POLB_bit        _BIT_ACCESS(CWG1CON1,1)
// CWG1CON1<CWG1POLC>
extern volatile __bit                   CWG1POLC            __at(0x1FABA);	// @ (0x3F57 * 8 + 2)
#define                                 CWG1POLC_bit        _BIT_ACCESS(CWG1CON1,2)
// CWG1CON1<CWG1POLD>
extern volatile __bit                   CWG1POLD            __at(0x1FABB);	// @ (0x3F57 * 8 + 3)
#define                                 CWG1POLD_bit        _BIT_ACCESS(CWG1CON1,3)
// CWG1STR<CWG1STRA>
extern volatile __bit                   CWG1STRA            __at(0x1FAD0);	// @ (0x3F5A * 8 + 0)
#define                                 CWG1STRA_bit        _BIT_ACCESS(CWG1STR,0)
// CWG1STR<CWG1STRB>
extern volatile __bit                   CWG1STRB            __at(0x1FAD1);	// @ (0x3F5A * 8 + 1)
#define                                 CWG1STRB_bit        _BIT_ACCESS(CWG1STR,1)
// CWG1STR<CWG1STRC>
extern volatile __bit                   CWG1STRC            __at(0x1FAD2);	// @ (0x3F5A * 8 + 2)
#define                                 CWG1STRC_bit        _BIT_ACCESS(CWG1STR,2)
// CWG1STR<CWG1STRD>
extern volatile __bit                   CWG1STRD            __at(0x1FAD3);	// @ (0x3F5A * 8 + 3)
#define                                 CWG1STRD_bit        _BIT_ACCESS(CWG1STR,3)
// CWG2CLK<CWG2CS>
extern volatile __bit                   CWG2CS              __at(0x1FA48);	// @ (0x3F49 * 8 + 0)
#define                                 CWG2CS_bit          _BIT_ACCESS(CWG2CLK,0)
// CWG2DBF<CWG2DBF0>
extern volatile __bit                   CWG2DBF0            __at(0x1FA60);	// @ (0x3F4C * 8 + 0)
#define                                 CWG2DBF0_bit        _BIT_ACCESS(CWG2DBF,0)
// CWG2DBF<CWG2DBF1>
extern volatile __bit                   CWG2DBF1            __at(0x1FA61);	// @ (0x3F4C * 8 + 1)
#define                                 CWG2DBF1_bit        _BIT_ACCESS(CWG2DBF,1)
// CWG2DBF<CWG2DBF2>
extern volatile __bit                   CWG2DBF2            __at(0x1FA62);	// @ (0x3F4C * 8 + 2)
#define                                 CWG2DBF2_bit        _BIT_ACCESS(CWG2DBF,2)
// CWG2DBF<CWG2DBF3>
extern volatile __bit                   CWG2DBF3            __at(0x1FA63);	// @ (0x3F4C * 8 + 3)
#define                                 CWG2DBF3_bit        _BIT_ACCESS(CWG2DBF,3)
// CWG2DBF<CWG2DBF4>
extern volatile __bit                   CWG2DBF4            __at(0x1FA64);	// @ (0x3F4C * 8 + 4)
#define                                 CWG2DBF4_bit        _BIT_ACCESS(CWG2DBF,4)
// CWG2DBF<CWG2DBF5>
extern volatile __bit                   CWG2DBF5            __at(0x1FA65);	// @ (0x3F4C * 8 + 5)
#define                                 CWG2DBF5_bit        _BIT_ACCESS(CWG2DBF,5)
// CWG2DBR<CWG2DBR0>
extern volatile __bit                   CWG2DBR0            __at(0x1FA58);	// @ (0x3F4B * 8 + 0)
#define                                 CWG2DBR0_bit        _BIT_ACCESS(CWG2DBR,0)
// CWG2DBR<CWG2DBR1>
extern volatile __bit                   CWG2DBR1            __at(0x1FA59);	// @ (0x3F4B * 8 + 1)
#define                                 CWG2DBR1_bit        _BIT_ACCESS(CWG2DBR,1)
// CWG2DBR<CWG2DBR2>
extern volatile __bit                   CWG2DBR2            __at(0x1FA5A);	// @ (0x3F4B * 8 + 2)
#define                                 CWG2DBR2_bit        _BIT_ACCESS(CWG2DBR,2)
// CWG2DBR<CWG2DBR3>
extern volatile __bit                   CWG2DBR3            __at(0x1FA5B);	// @ (0x3F4B * 8 + 3)
#define                                 CWG2DBR3_bit        _BIT_ACCESS(CWG2DBR,3)
// CWG2DBR<CWG2DBR4>
extern volatile __bit                   CWG2DBR4            __at(0x1FA5C);	// @ (0x3F4B * 8 + 4)
#define                                 CWG2DBR4_bit        _BIT_ACCESS(CWG2DBR,4)
// CWG2DBR<CWG2DBR5>
extern volatile __bit                   CWG2DBR5            __at(0x1FA5D);	// @ (0x3F4B * 8 + 5)
#define                                 CWG2DBR5_bit        _BIT_ACCESS(CWG2DBR,5)
// CWG2CON0<CWG2EN>
extern volatile __bit                   CWG2EN              __at(0x1FA6F);	// @ (0x3F4D * 8 + 7)
#define                                 CWG2EN_bit          _BIT_ACCESS(CWG2CON0,7)
// PIE7<CWG2IE>
extern volatile __bit                   CWG2IE              __at(0x1CCBB);	// @ (0x3997 * 8 + 3)
#define                                 CWG2IE_bit          _BIT_ACCESS(PIE7,3)
// PIR7<CWG2IF>
extern volatile __bit                   CWG2IF              __at(0x1CD3B);	// @ (0x39A7 * 8 + 3)
#define                                 CWG2IF_bit          _BIT_ACCESS(PIR7,3)
// CWG2CON1<CWG2IN>
extern volatile __bit                   CWG2IN              __at(0x1FA75);	// @ (0x3F4E * 8 + 5)
#define                                 CWG2IN_bit          _BIT_ACCESS(CWG2CON1,5)
// IPR7<CWG2IP>
extern volatile __bit                   CWG2IP              __at(0x1CC3B);	// @ (0x3987 * 8 + 3)
#define                                 CWG2IP_bit          _BIT_ACCESS(IPR7,3)
// CWG2CON0<CWG2LD>
extern volatile __bit                   CWG2LD              __at(0x1FA6E);	// @ (0x3F4D * 8 + 6)
#define                                 CWG2LD_bit          _BIT_ACCESS(CWG2CON0,6)
// CWG2AS0<CWG2LSAC0>
extern volatile __bit                   CWG2LSAC0           __at(0x1FA7A);	// @ (0x3F4F * 8 + 2)
#define                                 CWG2LSAC0_bit       _BIT_ACCESS(CWG2AS0,2)
// CWG2AS0<CWG2LSAC1>
extern volatile __bit                   CWG2LSAC1           __at(0x1FA7B);	// @ (0x3F4F * 8 + 3)
#define                                 CWG2LSAC1_bit       _BIT_ACCESS(CWG2AS0,3)
// CWG2AS0<CWG2LSBD0>
extern volatile __bit                   CWG2LSBD0           __at(0x1FA7C);	// @ (0x3F4F * 8 + 4)
#define                                 CWG2LSBD0_bit       _BIT_ACCESS(CWG2AS0,4)
// CWG2AS0<CWG2LSBD1>
extern volatile __bit                   CWG2LSBD1           __at(0x1FA7D);	// @ (0x3F4F * 8 + 5)
#define                                 CWG2LSBD1_bit       _BIT_ACCESS(CWG2AS0,5)
// CWG2AS0<CWG2LSDB0>
extern volatile __bit                   CWG2LSDB0           __at(0x1FA7C);	// @ (0x3F4F * 8 + 4)
#define                                 CWG2LSDB0_bit       _BIT_ACCESS(CWG2AS0,4)
// CWG2AS0<CWG2LSDB1>
extern volatile __bit                   CWG2LSDB1           __at(0x1FA7D);	// @ (0x3F4F * 8 + 5)
#define                                 CWG2LSDB1_bit       _BIT_ACCESS(CWG2AS0,5)
// PMD4<CWG2MD>
extern volatile __bit                   CWG2MD              __at(0x1CE26);	// @ (0x39C4 * 8 + 6)
#define                                 CWG2MD_bit          _BIT_ACCESS(PMD4,6)
// CWG2CON0<CWG2MODE0>
extern volatile __bit                   CWG2MODE0           __at(0x1FA68);	// @ (0x3F4D * 8 + 0)
#define                                 CWG2MODE0_bit       _BIT_ACCESS(CWG2CON0,0)
// CWG2CON0<CWG2MODE1>
extern volatile __bit                   CWG2MODE1           __at(0x1FA69);	// @ (0x3F4D * 8 + 1)
#define                                 CWG2MODE1_bit       _BIT_ACCESS(CWG2CON0,1)
// CWG2CON0<CWG2MODE2>
extern volatile __bit                   CWG2MODE2           __at(0x1FA6A);	// @ (0x3F4D * 8 + 2)
#define                                 CWG2MODE2_bit       _BIT_ACCESS(CWG2CON0,2)
// CWG2STR<CWG2OVRA>
extern volatile __bit                   CWG2OVRA            __at(0x1FA8C);	// @ (0x3F51 * 8 + 4)
#define                                 CWG2OVRA_bit        _BIT_ACCESS(CWG2STR,4)
// CWG2STR<CWG2OVRB>
extern volatile __bit                   CWG2OVRB            __at(0x1FA8D);	// @ (0x3F51 * 8 + 5)
#define                                 CWG2OVRB_bit        _BIT_ACCESS(CWG2STR,5)
// CWG2STR<CWG2OVRC>
extern volatile __bit                   CWG2OVRC            __at(0x1FA8E);	// @ (0x3F51 * 8 + 6)
#define                                 CWG2OVRC_bit        _BIT_ACCESS(CWG2STR,6)
// CWG2STR<CWG2OVRD>
extern volatile __bit                   CWG2OVRD            __at(0x1FA8F);	// @ (0x3F51 * 8 + 7)
#define                                 CWG2OVRD_bit        _BIT_ACCESS(CWG2STR,7)
// CWG2CON1<CWG2POLA>
extern volatile __bit                   CWG2POLA            __at(0x1FA70);	// @ (0x3F4E * 8 + 0)
#define                                 CWG2POLA_bit        _BIT_ACCESS(CWG2CON1,0)
// CWG2CON1<CWG2POLB>
extern volatile __bit                   CWG2POLB            __at(0x1FA71);	// @ (0x3F4E * 8 + 1)
#define                                 CWG2POLB_bit        _BIT_ACCESS(CWG2CON1,1)
// CWG2CON1<CWG2POLC>
extern volatile __bit                   CWG2POLC            __at(0x1FA72);	// @ (0x3F4E * 8 + 2)
#define                                 CWG2POLC_bit        _BIT_ACCESS(CWG2CON1,2)
// CWG2CON1<CWG2POLD>
extern volatile __bit                   CWG2POLD            __at(0x1FA73);	// @ (0x3F4E * 8 + 3)
#define                                 CWG2POLD_bit        _BIT_ACCESS(CWG2CON1,3)
// CWG2STR<CWG2STRA>
extern volatile __bit                   CWG2STRA            __at(0x1FA88);	// @ (0x3F51 * 8 + 0)
#define                                 CWG2STRA_bit        _BIT_ACCESS(CWG2STR,0)
// CWG2STR<CWG2STRB>
extern volatile __bit                   CWG2STRB            __at(0x1FA89);	// @ (0x3F51 * 8 + 1)
#define                                 CWG2STRB_bit        _BIT_ACCESS(CWG2STR,1)
// CWG2STR<CWG2STRC>
extern volatile __bit                   CWG2STRC            __at(0x1FA8A);	// @ (0x3F51 * 8 + 2)
#define                                 CWG2STRC_bit        _BIT_ACCESS(CWG2STR,2)
// CWG2STR<CWG2STRD>
extern volatile __bit                   CWG2STRD            __at(0x1FA8B);	// @ (0x3F51 * 8 + 3)
#define                                 CWG2STRD_bit        _BIT_ACCESS(CWG2STR,3)
// CWG3CLK<CWG3CS>
extern volatile __bit                   CWG3CS              __at(0x1FA00);	// @ (0x3F40 * 8 + 0)
#define                                 CWG3CS_bit          _BIT_ACCESS(CWG3CLK,0)
// CWG3DBF<CWG3DBF0>
extern volatile __bit                   CWG3DBF0            __at(0x1FA18);	// @ (0x3F43 * 8 + 0)
#define                                 CWG3DBF0_bit        _BIT_ACCESS(CWG3DBF,0)
// CWG3DBF<CWG3DBF1>
extern volatile __bit                   CWG3DBF1            __at(0x1FA19);	// @ (0x3F43 * 8 + 1)
#define                                 CWG3DBF1_bit        _BIT_ACCESS(CWG3DBF,1)
// CWG3DBF<CWG3DBF2>
extern volatile __bit                   CWG3DBF2            __at(0x1FA1A);	// @ (0x3F43 * 8 + 2)
#define                                 CWG3DBF2_bit        _BIT_ACCESS(CWG3DBF,2)
// CWG3DBF<CWG3DBF3>
extern volatile __bit                   CWG3DBF3            __at(0x1FA1B);	// @ (0x3F43 * 8 + 3)
#define                                 CWG3DBF3_bit        _BIT_ACCESS(CWG3DBF,3)
// CWG3DBF<CWG3DBF4>
extern volatile __bit                   CWG3DBF4            __at(0x1FA1C);	// @ (0x3F43 * 8 + 4)
#define                                 CWG3DBF4_bit        _BIT_ACCESS(CWG3DBF,4)
// CWG3DBF<CWG3DBF5>
extern volatile __bit                   CWG3DBF5            __at(0x1FA1D);	// @ (0x3F43 * 8 + 5)
#define                                 CWG3DBF5_bit        _BIT_ACCESS(CWG3DBF,5)
// CWG3DBR<CWG3DBR0>
extern volatile __bit                   CWG3DBR0            __at(0x1FA10);	// @ (0x3F42 * 8 + 0)
#define                                 CWG3DBR0_bit        _BIT_ACCESS(CWG3DBR,0)
// CWG3DBR<CWG3DBR1>
extern volatile __bit                   CWG3DBR1            __at(0x1FA11);	// @ (0x3F42 * 8 + 1)
#define                                 CWG3DBR1_bit        _BIT_ACCESS(CWG3DBR,1)
// CWG3DBR<CWG3DBR2>
extern volatile __bit                   CWG3DBR2            __at(0x1FA12);	// @ (0x3F42 * 8 + 2)
#define                                 CWG3DBR2_bit        _BIT_ACCESS(CWG3DBR,2)
// CWG3DBR<CWG3DBR3>
extern volatile __bit                   CWG3DBR3            __at(0x1FA13);	// @ (0x3F42 * 8 + 3)
#define                                 CWG3DBR3_bit        _BIT_ACCESS(CWG3DBR,3)
// CWG3DBR<CWG3DBR4>
extern volatile __bit                   CWG3DBR4            __at(0x1FA14);	// @ (0x3F42 * 8 + 4)
#define                                 CWG3DBR4_bit        _BIT_ACCESS(CWG3DBR,4)
// CWG3DBR<CWG3DBR5>
extern volatile __bit                   CWG3DBR5            __at(0x1FA15);	// @ (0x3F42 * 8 + 5)
#define                                 CWG3DBR5_bit        _BIT_ACCESS(CWG3DBR,5)
// CWG3CON0<CWG3EN>
extern volatile __bit                   CWG3EN              __at(0x1FA27);	// @ (0x3F44 * 8 + 7)
#define                                 CWG3EN_bit          _BIT_ACCESS(CWG3CON0,7)
// PIE9<CWG3IE>
extern volatile __bit                   CWG3IE              __at(0x1CCCA);	// @ (0x3999 * 8 + 2)
#define                                 CWG3IE_bit          _BIT_ACCESS(PIE9,2)
// PIR9<CWG3IF>
extern volatile __bit                   CWG3IF              __at(0x1CD4A);	// @ (0x39A9 * 8 + 2)
#define                                 CWG3IF_bit          _BIT_ACCESS(PIR9,2)
// CWG3CON1<CWG3IN>
extern volatile __bit                   CWG3IN              __at(0x1FA2D);	// @ (0x3F45 * 8 + 5)
#define                                 CWG3IN_bit          _BIT_ACCESS(CWG3CON1,5)
// IPR9<CWG3IP>
extern volatile __bit                   CWG3IP              __at(0x1CC4A);	// @ (0x3989 * 8 + 2)
#define                                 CWG3IP_bit          _BIT_ACCESS(IPR9,2)
// CWG3CON0<CWG3LD>
extern volatile __bit                   CWG3LD              __at(0x1FA26);	// @ (0x3F44 * 8 + 6)
#define                                 CWG3LD_bit          _BIT_ACCESS(CWG3CON0,6)
// CWG3AS0<CWG3LSAC0>
extern volatile __bit                   CWG3LSAC0           __at(0x1FA32);	// @ (0x3F46 * 8 + 2)
#define                                 CWG3LSAC0_bit       _BIT_ACCESS(CWG3AS0,2)
// CWG3AS0<CWG3LSAC1>
extern volatile __bit                   CWG3LSAC1           __at(0x1FA33);	// @ (0x3F46 * 8 + 3)
#define                                 CWG3LSAC1_bit       _BIT_ACCESS(CWG3AS0,3)
// CWG3AS0<CWG3LSBD0>
extern volatile __bit                   CWG3LSBD0           __at(0x1FA34);	// @ (0x3F46 * 8 + 4)
#define                                 CWG3LSBD0_bit       _BIT_ACCESS(CWG3AS0,4)
// CWG3AS0<CWG3LSBD1>
extern volatile __bit                   CWG3LSBD1           __at(0x1FA35);	// @ (0x3F46 * 8 + 5)
#define                                 CWG3LSBD1_bit       _BIT_ACCESS(CWG3AS0,5)
// CWG3AS0<CWG3LSDB0>
extern volatile __bit                   CWG3LSDB0           __at(0x1FA34);	// @ (0x3F46 * 8 + 4)
#define                                 CWG3LSDB0_bit       _BIT_ACCESS(CWG3AS0,4)
// CWG3AS0<CWG3LSDB1>
extern volatile __bit                   CWG3LSDB1           __at(0x1FA35);	// @ (0x3F46 * 8 + 5)
#define                                 CWG3LSDB1_bit       _BIT_ACCESS(CWG3AS0,5)
// PMD4<CWG3MD>
extern volatile __bit                   CWG3MD              __at(0x1CE27);	// @ (0x39C4 * 8 + 7)
#define                                 CWG3MD_bit          _BIT_ACCESS(PMD4,7)
// CWG3CON0<CWG3MODE0>
extern volatile __bit                   CWG3MODE0           __at(0x1FA20);	// @ (0x3F44 * 8 + 0)
#define                                 CWG3MODE0_bit       _BIT_ACCESS(CWG3CON0,0)
// CWG3CON0<CWG3MODE1>
extern volatile __bit                   CWG3MODE1           __at(0x1FA21);	// @ (0x3F44 * 8 + 1)
#define                                 CWG3MODE1_bit       _BIT_ACCESS(CWG3CON0,1)
// CWG3CON0<CWG3MODE2>
extern volatile __bit                   CWG3MODE2           __at(0x1FA22);	// @ (0x3F44 * 8 + 2)
#define                                 CWG3MODE2_bit       _BIT_ACCESS(CWG3CON0,2)
// CWG3STR<CWG3OVRA>
extern volatile __bit                   CWG3OVRA            __at(0x1FA44);	// @ (0x3F48 * 8 + 4)
#define                                 CWG3OVRA_bit        _BIT_ACCESS(CWG3STR,4)
// CWG3STR<CWG3OVRB>
extern volatile __bit                   CWG3OVRB            __at(0x1FA45);	// @ (0x3F48 * 8 + 5)
#define                                 CWG3OVRB_bit        _BIT_ACCESS(CWG3STR,5)
// CWG3STR<CWG3OVRC>
extern volatile __bit                   CWG3OVRC            __at(0x1FA46);	// @ (0x3F48 * 8 + 6)
#define                                 CWG3OVRC_bit        _BIT_ACCESS(CWG3STR,6)
// CWG3STR<CWG3OVRD>
extern volatile __bit                   CWG3OVRD            __at(0x1FA47);	// @ (0x3F48 * 8 + 7)
#define                                 CWG3OVRD_bit        _BIT_ACCESS(CWG3STR,7)
// CWG3CON1<CWG3POLA>
extern volatile __bit                   CWG3POLA            __at(0x1FA28);	// @ (0x3F45 * 8 + 0)
#define                                 CWG3POLA_bit        _BIT_ACCESS(CWG3CON1,0)
// CWG3CON1<CWG3POLB>
extern volatile __bit                   CWG3POLB            __at(0x1FA29);	// @ (0x3F45 * 8 + 1)
#define                                 CWG3POLB_bit        _BIT_ACCESS(CWG3CON1,1)
// CWG3CON1<CWG3POLC>
extern volatile __bit                   CWG3POLC            __at(0x1FA2A);	// @ (0x3F45 * 8 + 2)
#define                                 CWG3POLC_bit        _BIT_ACCESS(CWG3CON1,2)
// CWG3CON1<CWG3POLD>
extern volatile __bit                   CWG3POLD            __at(0x1FA2B);	// @ (0x3F45 * 8 + 3)
#define                                 CWG3POLD_bit        _BIT_ACCESS(CWG3CON1,3)
// CWG3STR<CWG3STRA>
extern volatile __bit                   CWG3STRA            __at(0x1FA40);	// @ (0x3F48 * 8 + 0)
#define                                 CWG3STRA_bit        _BIT_ACCESS(CWG3STR,0)
// CWG3STR<CWG3STRB>
extern volatile __bit                   CWG3STRB            __at(0x1FA41);	// @ (0x3F48 * 8 + 1)
#define                                 CWG3STRB_bit        _BIT_ACCESS(CWG3STR,1)
// CWG3STR<CWG3STRC>
extern volatile __bit                   CWG3STRC            __at(0x1FA42);	// @ (0x3F48 * 8 + 2)
#define                                 CWG3STRC_bit        _BIT_ACCESS(CWG3STR,2)
// CWG3STR<CWG3STRD>
extern volatile __bit                   CWG3STRD            __at(0x1FA43);	// @ (0x3F48 * 8 + 3)
#define                                 CWG3STRD_bit        _BIT_ACCESS(CWG3STR,3)
// DAC1CON0<DAC1EN>
extern volatile __bit                   DAC1EN              __at(0x1F4F7);	// @ (0x3E9E * 8 + 7)
#define                                 DAC1EN_bit          _BIT_ACCESS(DAC1CON0,7)
// DAC1CON0<DAC1NSS>
extern volatile __bit                   DAC1NSS             __at(0x1F4F0);	// @ (0x3E9E * 8 + 0)
#define                                 DAC1NSS_bit         _BIT_ACCESS(DAC1CON0,0)
// DAC1CON0<DAC1OE1>
extern volatile __bit                   DAC1OE1             __at(0x1F4F5);	// @ (0x3E9E * 8 + 5)
#define                                 DAC1OE1_bit         _BIT_ACCESS(DAC1CON0,5)
// DAC1CON0<DAC1OE2>
extern volatile __bit                   DAC1OE2             __at(0x1F4F4);	// @ (0x3E9E * 8 + 4)
#define                                 DAC1OE2_bit         _BIT_ACCESS(DAC1CON0,4)
// DAC1CON0<DAC1PSS0>
extern volatile __bit                   DAC1PSS0            __at(0x1F4F2);	// @ (0x3E9E * 8 + 2)
#define                                 DAC1PSS0_bit        _BIT_ACCESS(DAC1CON0,2)
// DAC1CON0<DAC1PSS1>
extern volatile __bit                   DAC1PSS1            __at(0x1F4F3);	// @ (0x3E9E * 8 + 3)
#define                                 DAC1PSS1_bit        _BIT_ACCESS(DAC1CON0,3)
// DAC1CON1<DAC1R0>
extern volatile __bit                   DAC1R0              __at(0x1F4E0);	// @ (0x3E9C * 8 + 0)
#define                                 DAC1R0_bit          _BIT_ACCESS(DAC1CON1,0)
// DAC1CON1<DAC1R1>
extern volatile __bit                   DAC1R1              __at(0x1F4E1);	// @ (0x3E9C * 8 + 1)
#define                                 DAC1R1_bit          _BIT_ACCESS(DAC1CON1,1)
// DAC1CON1<DAC1R2>
extern volatile __bit                   DAC1R2              __at(0x1F4E2);	// @ (0x3E9C * 8 + 2)
#define                                 DAC1R2_bit          _BIT_ACCESS(DAC1CON1,2)
// DAC1CON1<DAC1R3>
extern volatile __bit                   DAC1R3              __at(0x1F4E3);	// @ (0x3E9C * 8 + 3)
#define                                 DAC1R3_bit          _BIT_ACCESS(DAC1CON1,3)
// DAC1CON1<DAC1R4>
extern volatile __bit                   DAC1R4              __at(0x1F4E4);	// @ (0x3E9C * 8 + 4)
#define                                 DAC1R4_bit          _BIT_ACCESS(DAC1CON1,4)
// PMD2<DACMD>
extern volatile __bit                   DACMD               __at(0x1CE16);	// @ (0x39C2 * 8 + 6)
#define                                 DACMD_bit           _BIT_ACCESS(PMD2,6)
// NVMDAT<DAT0>
extern volatile __bit                   DAT0                __at(0x1CF18);	// @ (0x39E3 * 8 + 0)
#define                                 DAT0_bit            _BIT_ACCESS(NVMDAT,0)
// NVMDAT<DAT1>
extern volatile __bit                   DAT1                __at(0x1CF19);	// @ (0x39E3 * 8 + 1)
#define                                 DAT1_bit            _BIT_ACCESS(NVMDAT,1)
// NVMDAT<DAT2>
extern volatile __bit                   DAT2                __at(0x1CF1A);	// @ (0x39E3 * 8 + 2)
#define                                 DAT2_bit            _BIT_ACCESS(NVMDAT,2)
// NVMDAT<DAT3>
extern volatile __bit                   DAT3                __at(0x1CF1B);	// @ (0x39E3 * 8 + 3)
#define                                 DAT3_bit            _BIT_ACCESS(NVMDAT,3)
// NVMDAT<DAT4>
extern volatile __bit                   DAT4                __at(0x1CF1C);	// @ (0x39E3 * 8 + 4)
#define                                 DAT4_bit            _BIT_ACCESS(NVMDAT,4)
// NVMDAT<DAT5>
extern volatile __bit                   DAT5                __at(0x1CF1D);	// @ (0x39E3 * 8 + 5)
#define                                 DAT5_bit            _BIT_ACCESS(NVMDAT,5)
// NVMDAT<DAT6>
extern volatile __bit                   DAT6                __at(0x1CF1E);	// @ (0x39E3 * 8 + 6)
#define                                 DAT6_bit            _BIT_ACCESS(NVMDAT,6)
// NVMDAT<DAT7>
extern volatile __bit                   DAT7                __at(0x1CF1F);	// @ (0x39E3 * 8 + 7)
#define                                 DAT7_bit            _BIT_ACCESS(NVMDAT,7)
// CRCDATL<DATA0>
extern volatile __bit                   DATA0               __at(0x1CB00);	// @ (0x3960 * 8 + 0)
#define                                 DATA0_bit           _BIT_ACCESS(CRCDATL,0)
// CRCDATL<DATA1>
extern volatile __bit                   DATA1               __at(0x1CB01);	// @ (0x3960 * 8 + 1)
#define                                 DATA1_bit           _BIT_ACCESS(CRCDATL,1)
// CRCDATH<DATA10>
extern volatile __bit                   DATA10              __at(0x1CB0A);	// @ (0x3961 * 8 + 2)
#define                                 DATA10_bit          _BIT_ACCESS(CRCDATH,2)
// CRCDATH<DATA11>
extern volatile __bit                   DATA11              __at(0x1CB0B);	// @ (0x3961 * 8 + 3)
#define                                 DATA11_bit          _BIT_ACCESS(CRCDATH,3)
// CRCDATH<DATA12>
extern volatile __bit                   DATA12              __at(0x1CB0C);	// @ (0x3961 * 8 + 4)
#define                                 DATA12_bit          _BIT_ACCESS(CRCDATH,4)
// CRCDATH<DATA13>
extern volatile __bit                   DATA13              __at(0x1CB0D);	// @ (0x3961 * 8 + 5)
#define                                 DATA13_bit          _BIT_ACCESS(CRCDATH,5)
// CRCDATH<DATA14>
extern volatile __bit                   DATA14              __at(0x1CB0E);	// @ (0x3961 * 8 + 6)
#define                                 DATA14_bit          _BIT_ACCESS(CRCDATH,6)
// CRCDATH<DATA15>
extern volatile __bit                   DATA15              __at(0x1CB0F);	// @ (0x3961 * 8 + 7)
#define                                 DATA15_bit          _BIT_ACCESS(CRCDATH,7)
// CRCDATL<DATA2>
extern volatile __bit                   DATA2               __at(0x1CB02);	// @ (0x3960 * 8 + 2)
#define                                 DATA2_bit           _BIT_ACCESS(CRCDATL,2)
// CRCDATL<DATA3>
extern volatile __bit                   DATA3               __at(0x1CB03);	// @ (0x3960 * 8 + 3)
#define                                 DATA3_bit           _BIT_ACCESS(CRCDATL,3)
// CRCDATL<DATA4>
extern volatile __bit                   DATA4               __at(0x1CB04);	// @ (0x3960 * 8 + 4)
#define                                 DATA4_bit           _BIT_ACCESS(CRCDATL,4)
// CRCDATL<DATA5>
extern volatile __bit                   DATA5               __at(0x1CB05);	// @ (0x3960 * 8 + 5)
#define                                 DATA5_bit           _BIT_ACCESS(CRCDATL,5)
// CRCDATL<DATA6>
extern volatile __bit                   DATA6               __at(0x1CB06);	// @ (0x3960 * 8 + 6)
#define                                 DATA6_bit           _BIT_ACCESS(CRCDATL,6)
// CRCDATL<DATA7>
extern volatile __bit                   DATA7               __at(0x1CB07);	// @ (0x3960 * 8 + 7)
#define                                 DATA7_bit           _BIT_ACCESS(CRCDATL,7)
// CRCDATH<DATA8>
extern volatile __bit                   DATA8               __at(0x1CB08);	// @ (0x3961 * 8 + 0)
#define                                 DATA8_bit           _BIT_ACCESS(CRCDATH,0)
// CRCDATH<DATA9>
extern volatile __bit                   DATA9               __at(0x1CB09);	// @ (0x3961 * 8 + 1)
#define                                 DATA9_bit           _BIT_ACCESS(CRCDATH,1)
// CRCCON1<DLEN0>
extern volatile __bit                   DLEN0               __at(0x1CB4C);	// @ (0x3969 * 8 + 4)
#define                                 DLEN0_bit           _BIT_ACCESS(CRCCON1,4)
// CRCCON1<DLEN1>
extern volatile __bit                   DLEN1               __at(0x1CB4D);	// @ (0x3969 * 8 + 5)
#define                                 DLEN1_bit           _BIT_ACCESS(CRCCON1,5)
// CRCCON1<DLEN2>
extern volatile __bit                   DLEN2               __at(0x1CB4E);	// @ (0x3969 * 8 + 6)
#define                                 DLEN2_bit           _BIT_ACCESS(CRCCON1,6)
// CRCCON1<DLEN3>
extern volatile __bit                   DLEN3               __at(0x1CB4F);	// @ (0x3969 * 8 + 7)
#define                                 DLEN3_bit           _BIT_ACCESS(CRCCON1,7)
// PIE2<DMA1AIE>
extern volatile __bit                   DMA1AIE             __at(0x1CC93);	// @ (0x3992 * 8 + 3)
#define                                 DMA1AIE_bit         _BIT_ACCESS(PIE2,3)
// PIR2<DMA1AIF>
extern volatile __bit                   DMA1AIF             __at(0x1CD13);	// @ (0x39A2 * 8 + 3)
#define                                 DMA1AIF_bit         _BIT_ACCESS(PIR2,3)
// IPR2<DMA1AIP>
extern volatile __bit                   DMA1AIP             __at(0x1CC13);	// @ (0x3982 * 8 + 3)
#define                                 DMA1AIP_bit         _BIT_ACCESS(IPR2,3)
// DMA1AIRQ<DMA1AIRQ0>
extern volatile __bit                   DMA1AIRQ0           __at(0x1DFF0);	// @ (0x3BFE * 8 + 0)
#define                                 DMA1AIRQ0_bit       _BIT_ACCESS(DMA1AIRQ,0)
// DMA1AIRQ<DMA1AIRQ1>
extern volatile __bit                   DMA1AIRQ1           __at(0x1DFF1);	// @ (0x3BFE * 8 + 1)
#define                                 DMA1AIRQ1_bit       _BIT_ACCESS(DMA1AIRQ,1)
// DMA1AIRQ<DMA1AIRQ2>
extern volatile __bit                   DMA1AIRQ2           __at(0x1DFF2);	// @ (0x3BFE * 8 + 2)
#define                                 DMA1AIRQ2_bit       _BIT_ACCESS(DMA1AIRQ,2)
// DMA1AIRQ<DMA1AIRQ3>
extern volatile __bit                   DMA1AIRQ3           __at(0x1DFF3);	// @ (0x3BFE * 8 + 3)
#define                                 DMA1AIRQ3_bit       _BIT_ACCESS(DMA1AIRQ,3)
// DMA1AIRQ<DMA1AIRQ4>
extern volatile __bit                   DMA1AIRQ4           __at(0x1DFF4);	// @ (0x3BFE * 8 + 4)
#define                                 DMA1AIRQ4_bit       _BIT_ACCESS(DMA1AIRQ,4)
// DMA1AIRQ<DMA1AIRQ5>
extern volatile __bit                   DMA1AIRQ5           __at(0x1DFF5);	// @ (0x3BFE * 8 + 5)
#define                                 DMA1AIRQ5_bit       _BIT_ACCESS(DMA1AIRQ,5)
// DMA1AIRQ<DMA1AIRQ6>
extern volatile __bit                   DMA1AIRQ6           __at(0x1DFF6);	// @ (0x3BFE * 8 + 6)
#define                                 DMA1AIRQ6_bit       _BIT_ACCESS(DMA1AIRQ,6)
// DMA1CON0<DMA1AIRQEN>
extern volatile __bit                   DMA1AIRQEN          __at(0x1DFE2);	// @ (0x3BFC * 8 + 2)
#define                                 DMA1AIRQEN_bit      _BIT_ACCESS(DMA1CON0,2)
// DMA1BUF<DMA1BUF0>
extern volatile __bit                   DMA1BUF0            __at(0x1DF48);	// @ (0x3BE9 * 8 + 0)
#define                                 DMA1BUF0_bit        _BIT_ACCESS(DMA1BUF,0)
// DMA1BUF<DMA1BUF1>
extern volatile __bit                   DMA1BUF1            __at(0x1DF49);	// @ (0x3BE9 * 8 + 1)
#define                                 DMA1BUF1_bit        _BIT_ACCESS(DMA1BUF,1)
// DMA1BUF<DMA1BUF2>
extern volatile __bit                   DMA1BUF2            __at(0x1DF4A);	// @ (0x3BE9 * 8 + 2)
#define                                 DMA1BUF2_bit        _BIT_ACCESS(DMA1BUF,2)
// DMA1BUF<DMA1BUF3>
extern volatile __bit                   DMA1BUF3            __at(0x1DF4B);	// @ (0x3BE9 * 8 + 3)
#define                                 DMA1BUF3_bit        _BIT_ACCESS(DMA1BUF,3)
// DMA1BUF<DMA1BUF4>
extern volatile __bit                   DMA1BUF4            __at(0x1DF4C);	// @ (0x3BE9 * 8 + 4)
#define                                 DMA1BUF4_bit        _BIT_ACCESS(DMA1BUF,4)
// DMA1BUF<DMA1BUF5>
extern volatile __bit                   DMA1BUF5            __at(0x1DF4D);	// @ (0x3BE9 * 8 + 5)
#define                                 DMA1BUF5_bit        _BIT_ACCESS(DMA1BUF,5)
// DMA1BUF<DMA1BUF6>
extern volatile __bit                   DMA1BUF6            __at(0x1DF4E);	// @ (0x3BE9 * 8 + 6)
#define                                 DMA1BUF6_bit        _BIT_ACCESS(DMA1BUF,6)
// DMA1BUF<DMA1BUF7>
extern volatile __bit                   DMA1BUF7            __at(0x1DF4F);	// @ (0x3BE9 * 8 + 7)
#define                                 DMA1BUF7_bit        _BIT_ACCESS(DMA1BUF,7)
// DMA1DCNTL<DMA1DCNT0>
extern volatile __bit                   DMA1DCNT0           __at(0x1DF50);	// @ (0x3BEA * 8 + 0)
#define                                 DMA1DCNT0_bit       _BIT_ACCESS(DMA1DCNTL,0)
// DMA1DCNTL<DMA1DCNT1>
extern volatile __bit                   DMA1DCNT1           __at(0x1DF51);	// @ (0x3BEA * 8 + 1)
#define                                 DMA1DCNT1_bit       _BIT_ACCESS(DMA1DCNTL,1)
// DMA1DCNTH<DMA1DCNT10>
extern volatile __bit                   DMA1DCNT10          __at(0x1DF5A);	// @ (0x3BEB * 8 + 2)
#define                                 DMA1DCNT10_bit      _BIT_ACCESS(DMA1DCNTH,2)
// DMA1DCNTH<DMA1DCNT11>
extern volatile __bit                   DMA1DCNT11          __at(0x1DF5B);	// @ (0x3BEB * 8 + 3)
#define                                 DMA1DCNT11_bit      _BIT_ACCESS(DMA1DCNTH,3)
// DMA1DCNTL<DMA1DCNT2>
extern volatile __bit                   DMA1DCNT2           __at(0x1DF52);	// @ (0x3BEA * 8 + 2)
#define                                 DMA1DCNT2_bit       _BIT_ACCESS(DMA1DCNTL,2)
// DMA1DCNTL<DMA1DCNT3>
extern volatile __bit                   DMA1DCNT3           __at(0x1DF53);	// @ (0x3BEA * 8 + 3)
#define                                 DMA1DCNT3_bit       _BIT_ACCESS(DMA1DCNTL,3)
// DMA1DCNTL<DMA1DCNT4>
extern volatile __bit                   DMA1DCNT4           __at(0x1DF54);	// @ (0x3BEA * 8 + 4)
#define                                 DMA1DCNT4_bit       _BIT_ACCESS(DMA1DCNTL,4)
// DMA1DCNTL<DMA1DCNT5>
extern volatile __bit                   DMA1DCNT5           __at(0x1DF55);	// @ (0x3BEA * 8 + 5)
#define                                 DMA1DCNT5_bit       _BIT_ACCESS(DMA1DCNTL,5)
// DMA1DCNTL<DMA1DCNT6>
extern volatile __bit                   DMA1DCNT6           __at(0x1DF56);	// @ (0x3BEA * 8 + 6)
#define                                 DMA1DCNT6_bit       _BIT_ACCESS(DMA1DCNTL,6)
// DMA1DCNTL<DMA1DCNT7>
extern volatile __bit                   DMA1DCNT7           __at(0x1DF57);	// @ (0x3BEA * 8 + 7)
#define                                 DMA1DCNT7_bit       _BIT_ACCESS(DMA1DCNTL,7)
// DMA1DCNTH<DMA1DCNT8>
extern volatile __bit                   DMA1DCNT8           __at(0x1DF58);	// @ (0x3BEB * 8 + 0)
#define                                 DMA1DCNT8_bit       _BIT_ACCESS(DMA1DCNTH,0)
// DMA1DCNTH<DMA1DCNT9>
extern volatile __bit                   DMA1DCNT9           __at(0x1DF59);	// @ (0x3BEB * 8 + 1)
#define                                 DMA1DCNT9_bit       _BIT_ACCESS(DMA1DCNTH,1)
// PIE2<DMA1DCNTIE>
extern volatile __bit                   DMA1DCNTIE          __at(0x1CC91);	// @ (0x3992 * 8 + 1)
#define                                 DMA1DCNTIE_bit      _BIT_ACCESS(PIE2,1)
// PIR2<DMA1DCNTIF>
extern volatile __bit                   DMA1DCNTIF          __at(0x1CD11);	// @ (0x39A2 * 8 + 1)
#define                                 DMA1DCNTIF_bit      _BIT_ACCESS(PIR2,1)
// IPR2<DMA1DCNTIP>
extern volatile __bit                   DMA1DCNTIP          __at(0x1CC11);	// @ (0x3982 * 8 + 1)
#define                                 DMA1DCNTIP_bit      _BIT_ACCESS(IPR2,1)
// DMA1CON0<DMA1DGO>
extern volatile __bit                   DMA1DGO             __at(0x1DFE5);	// @ (0x3BFC * 8 + 5)
#define                                 DMA1DGO_bit         _BIT_ACCESS(DMA1CON0,5)
// DMA1DPTRL<DMA1DPTR0>
extern volatile __bit                   DMA1DPTR0           __at(0x1DF60);	// @ (0x3BEC * 8 + 0)
#define                                 DMA1DPTR0_bit       _BIT_ACCESS(DMA1DPTRL,0)
// DMA1DPTRL<DMA1DPTR1>
extern volatile __bit                   DMA1DPTR1           __at(0x1DF61);	// @ (0x3BEC * 8 + 1)
#define                                 DMA1DPTR1_bit       _BIT_ACCESS(DMA1DPTRL,1)
// DMA1DPTRH<DMA1DPTR10>
extern volatile __bit                   DMA1DPTR10          __at(0x1DF6A);	// @ (0x3BED * 8 + 2)
#define                                 DMA1DPTR10_bit      _BIT_ACCESS(DMA1DPTRH,2)
// DMA1DPTRH<DMA1DPTR11>
extern volatile __bit                   DMA1DPTR11          __at(0x1DF6B);	// @ (0x3BED * 8 + 3)
#define                                 DMA1DPTR11_bit      _BIT_ACCESS(DMA1DPTRH,3)
// DMA1DPTRH<DMA1DPTR12>
extern volatile __bit                   DMA1DPTR12          __at(0x1DF6C);	// @ (0x3BED * 8 + 4)
#define                                 DMA1DPTR12_bit      _BIT_ACCESS(DMA1DPTRH,4)
// DMA1DPTRH<DMA1DPTR13>
extern volatile __bit                   DMA1DPTR13          __at(0x1DF6D);	// @ (0x3BED * 8 + 5)
#define                                 DMA1DPTR13_bit      _BIT_ACCESS(DMA1DPTRH,5)
// DMA1DPTRH<DMA1DPTR14>
extern volatile __bit                   DMA1DPTR14          __at(0x1DF6E);	// @ (0x3BED * 8 + 6)
#define                                 DMA1DPTR14_bit      _BIT_ACCESS(DMA1DPTRH,6)
// DMA1DPTRH<DMA1DPTR15>
extern volatile __bit                   DMA1DPTR15          __at(0x1DF6F);	// @ (0x3BED * 8 + 7)
#define                                 DMA1DPTR15_bit      _BIT_ACCESS(DMA1DPTRH,7)
// DMA1DPTRL<DMA1DPTR2>
extern volatile __bit                   DMA1DPTR2           __at(0x1DF62);	// @ (0x3BEC * 8 + 2)
#define                                 DMA1DPTR2_bit       _BIT_ACCESS(DMA1DPTRL,2)
// DMA1DPTRL<DMA1DPTR3>
extern volatile __bit                   DMA1DPTR3           __at(0x1DF63);	// @ (0x3BEC * 8 + 3)
#define                                 DMA1DPTR3_bit       _BIT_ACCESS(DMA1DPTRL,3)
// DMA1DPTRL<DMA1DPTR4>
extern volatile __bit                   DMA1DPTR4           __at(0x1DF64);	// @ (0x3BEC * 8 + 4)
#define                                 DMA1DPTR4_bit       _BIT_ACCESS(DMA1DPTRL,4)
// DMA1DPTRL<DMA1DPTR5>
extern volatile __bit                   DMA1DPTR5           __at(0x1DF65);	// @ (0x3BEC * 8 + 5)
#define                                 DMA1DPTR5_bit       _BIT_ACCESS(DMA1DPTRL,5)
// DMA1DPTRL<DMA1DPTR6>
extern volatile __bit                   DMA1DPTR6           __at(0x1DF66);	// @ (0x3BEC * 8 + 6)
#define                                 DMA1DPTR6_bit       _BIT_ACCESS(DMA1DPTRL,6)
// DMA1DPTRL<DMA1DPTR7>
extern volatile __bit                   DMA1DPTR7           __at(0x1DF67);	// @ (0x3BEC * 8 + 7)
#define                                 DMA1DPTR7_bit       _BIT_ACCESS(DMA1DPTRL,7)
// DMA1DPTRH<DMA1DPTR8>
extern volatile __bit                   DMA1DPTR8           __at(0x1DF68);	// @ (0x3BED * 8 + 0)
#define                                 DMA1DPTR8_bit       _BIT_ACCESS(DMA1DPTRH,0)
// DMA1DPTRH<DMA1DPTR9>
extern volatile __bit                   DMA1DPTR9           __at(0x1DF69);	// @ (0x3BED * 8 + 1)
#define                                 DMA1DPTR9_bit       _BIT_ACCESS(DMA1DPTRH,1)
// DMA1DSAL<DMA1DSA0>
extern volatile __bit                   DMA1DSA0            __at(0x1DF80);	// @ (0x3BF0 * 8 + 0)
#define                                 DMA1DSA0_bit        _BIT_ACCESS(DMA1DSAL,0)
// DMA1DSAL<DMA1DSA1>
extern volatile __bit                   DMA1DSA1            __at(0x1DF81);	// @ (0x3BF0 * 8 + 1)
#define                                 DMA1DSA1_bit        _BIT_ACCESS(DMA1DSAL,1)
// DMA1DSAH<DMA1DSA10>
extern volatile __bit                   DMA1DSA10           __at(0x1DF8A);	// @ (0x3BF1 * 8 + 2)
#define                                 DMA1DSA10_bit       _BIT_ACCESS(DMA1DSAH,2)
// DMA1DSAH<DMA1DSA11>
extern volatile __bit                   DMA1DSA11           __at(0x1DF8B);	// @ (0x3BF1 * 8 + 3)
#define                                 DMA1DSA11_bit       _BIT_ACCESS(DMA1DSAH,3)
// DMA1DSAH<DMA1DSA12>
extern volatile __bit                   DMA1DSA12           __at(0x1DF8C);	// @ (0x3BF1 * 8 + 4)
#define                                 DMA1DSA12_bit       _BIT_ACCESS(DMA1DSAH,4)
// DMA1DSAH<DMA1DSA13>
extern volatile __bit                   DMA1DSA13           __at(0x1DF8D);	// @ (0x3BF1 * 8 + 5)
#define                                 DMA1DSA13_bit       _BIT_ACCESS(DMA1DSAH,5)
// DMA1DSAH<DMA1DSA14>
extern volatile __bit                   DMA1DSA14           __at(0x1DF8E);	// @ (0x3BF1 * 8 + 6)
#define                                 DMA1DSA14_bit       _BIT_ACCESS(DMA1DSAH,6)
// DMA1DSAH<DMA1DSA15>
extern volatile __bit                   DMA1DSA15           __at(0x1DF8F);	// @ (0x3BF1 * 8 + 7)
#define                                 DMA1DSA15_bit       _BIT_ACCESS(DMA1DSAH,7)
// DMA1DSAL<DMA1DSA2>
extern volatile __bit                   DMA1DSA2            __at(0x1DF82);	// @ (0x3BF0 * 8 + 2)
#define                                 DMA1DSA2_bit        _BIT_ACCESS(DMA1DSAL,2)
// DMA1DSAL<DMA1DSA3>
extern volatile __bit                   DMA1DSA3            __at(0x1DF83);	// @ (0x3BF0 * 8 + 3)
#define                                 DMA1DSA3_bit        _BIT_ACCESS(DMA1DSAL,3)
// DMA1DSAL<DMA1DSA4>
extern volatile __bit                   DMA1DSA4            __at(0x1DF84);	// @ (0x3BF0 * 8 + 4)
#define                                 DMA1DSA4_bit        _BIT_ACCESS(DMA1DSAL,4)
// DMA1DSAL<DMA1DSA5>
extern volatile __bit                   DMA1DSA5            __at(0x1DF85);	// @ (0x3BF0 * 8 + 5)
#define                                 DMA1DSA5_bit        _BIT_ACCESS(DMA1DSAL,5)
// DMA1DSAL<DMA1DSA6>
extern volatile __bit                   DMA1DSA6            __at(0x1DF86);	// @ (0x3BF0 * 8 + 6)
#define                                 DMA1DSA6_bit        _BIT_ACCESS(DMA1DSAL,6)
// DMA1DSAL<DMA1DSA7>
extern volatile __bit                   DMA1DSA7            __at(0x1DF87);	// @ (0x3BF0 * 8 + 7)
#define                                 DMA1DSA7_bit        _BIT_ACCESS(DMA1DSAL,7)
// DMA1DSAH<DMA1DSA8>
extern volatile __bit                   DMA1DSA8            __at(0x1DF88);	// @ (0x3BF1 * 8 + 0)
#define                                 DMA1DSA8_bit        _BIT_ACCESS(DMA1DSAH,0)
// DMA1DSAH<DMA1DSA9>
extern volatile __bit                   DMA1DSA9            __at(0x1DF89);	// @ (0x3BF1 * 8 + 1)
#define                                 DMA1DSA9_bit        _BIT_ACCESS(DMA1DSAH,1)
// DMA1DSZL<DMA1DSZ0>
extern volatile __bit                   DMA1DSZ0            __at(0x1DF70);	// @ (0x3BEE * 8 + 0)
#define                                 DMA1DSZ0_bit        _BIT_ACCESS(DMA1DSZL,0)
// DMA1DSZL<DMA1DSZ1>
extern volatile __bit                   DMA1DSZ1            __at(0x1DF71);	// @ (0x3BEE * 8 + 1)
#define                                 DMA1DSZ1_bit        _BIT_ACCESS(DMA1DSZL,1)
// DMA1DSZH<DMA1DSZ10>
extern volatile __bit                   DMA1DSZ10           __at(0x1DF7A);	// @ (0x3BEF * 8 + 2)
#define                                 DMA1DSZ10_bit       _BIT_ACCESS(DMA1DSZH,2)
// DMA1DSZH<DMA1DSZ11>
extern volatile __bit                   DMA1DSZ11           __at(0x1DF7B);	// @ (0x3BEF * 8 + 3)
#define                                 DMA1DSZ11_bit       _BIT_ACCESS(DMA1DSZH,3)
// DMA1DSZL<DMA1DSZ2>
extern volatile __bit                   DMA1DSZ2            __at(0x1DF72);	// @ (0x3BEE * 8 + 2)
#define                                 DMA1DSZ2_bit        _BIT_ACCESS(DMA1DSZL,2)
// DMA1DSZL<DMA1DSZ3>
extern volatile __bit                   DMA1DSZ3            __at(0x1DF73);	// @ (0x3BEE * 8 + 3)
#define                                 DMA1DSZ3_bit        _BIT_ACCESS(DMA1DSZL,3)
// DMA1DSZL<DMA1DSZ4>
extern volatile __bit                   DMA1DSZ4            __at(0x1DF74);	// @ (0x3BEE * 8 + 4)
#define                                 DMA1DSZ4_bit        _BIT_ACCESS(DMA1DSZL,4)
// DMA1DSZL<DMA1DSZ5>
extern volatile __bit                   DMA1DSZ5            __at(0x1DF75);	// @ (0x3BEE * 8 + 5)
#define                                 DMA1DSZ5_bit        _BIT_ACCESS(DMA1DSZL,5)
// DMA1DSZL<DMA1DSZ6>
extern volatile __bit                   DMA1DSZ6            __at(0x1DF76);	// @ (0x3BEE * 8 + 6)
#define                                 DMA1DSZ6_bit        _BIT_ACCESS(DMA1DSZL,6)
// DMA1DSZL<DMA1DSZ7>
extern volatile __bit                   DMA1DSZ7            __at(0x1DF77);	// @ (0x3BEE * 8 + 7)
#define                                 DMA1DSZ7_bit        _BIT_ACCESS(DMA1DSZL,7)
// DMA1DSZH<DMA1DSZ8>
extern volatile __bit                   DMA1DSZ8            __at(0x1DF78);	// @ (0x3BEF * 8 + 0)
#define                                 DMA1DSZ8_bit        _BIT_ACCESS(DMA1DSZH,0)
// DMA1DSZH<DMA1DSZ9>
extern volatile __bit                   DMA1DSZ9            __at(0x1DF79);	// @ (0x3BEF * 8 + 1)
#define                                 DMA1DSZ9_bit        _BIT_ACCESS(DMA1DSZH,1)
// DMA1CON0<DMA1EN>
extern volatile __bit                   DMA1EN              __at(0x1DFE7);	// @ (0x3BFC * 8 + 7)
#define                                 DMA1EN_bit          _BIT_ACCESS(DMA1CON0,7)
// PMD7<DMA1MD>
extern volatile __bit                   DMA1MD              __at(0x1CE38);	// @ (0x39C7 * 8 + 0)
#define                                 DMA1MD_bit          _BIT_ACCESS(PMD7,0)
// PIE2<DMA1ORIE>
extern volatile __bit                   DMA1ORIE            __at(0x1CC92);	// @ (0x3992 * 8 + 2)
#define                                 DMA1ORIE_bit        _BIT_ACCESS(PIE2,2)
// PIR2<DMA1ORIF>
extern volatile __bit                   DMA1ORIF            __at(0x1CD12);	// @ (0x39A2 * 8 + 2)
#define                                 DMA1ORIF_bit        _BIT_ACCESS(PIR2,2)
// IPR2<DMA1ORIP>
extern volatile __bit                   DMA1ORIP            __at(0x1CC12);	// @ (0x3982 * 8 + 2)
#define                                 DMA1ORIP_bit        _BIT_ACCESS(IPR2,2)
// DMA1PR<DMA1PR0>
extern volatile __bit                   DMA1PR0             __at(0x1CF98);	// @ (0x39F3 * 8 + 0)
#define                                 DMA1PR0_bit         _BIT_ACCESS(DMA1PR,0)
// DMA1PR<DMA1PR1>
extern volatile __bit                   DMA1PR1             __at(0x1CF99);	// @ (0x39F3 * 8 + 1)
#define                                 DMA1PR1_bit         _BIT_ACCESS(DMA1PR,1)
// DMA1PR<DMA1PR2>
extern volatile __bit                   DMA1PR2             __at(0x1CF9A);	// @ (0x39F3 * 8 + 2)
#define                                 DMA1PR2_bit         _BIT_ACCESS(DMA1PR,2)
// DMA1SCNTL<DMA1SCNT0>
extern volatile __bit                   DMA1SCNT0           __at(0x1DF90);	// @ (0x3BF2 * 8 + 0)
#define                                 DMA1SCNT0_bit       _BIT_ACCESS(DMA1SCNTL,0)
// DMA1SCNTL<DMA1SCNT1>
extern volatile __bit                   DMA1SCNT1           __at(0x1DF91);	// @ (0x3BF2 * 8 + 1)
#define                                 DMA1SCNT1_bit       _BIT_ACCESS(DMA1SCNTL,1)
// DMA1SCNTH<DMA1SCNT10>
extern volatile __bit                   DMA1SCNT10          __at(0x1DF9A);	// @ (0x3BF3 * 8 + 2)
#define                                 DMA1SCNT10_bit      _BIT_ACCESS(DMA1SCNTH,2)
// DMA1SCNTH<DMA1SCNT11>
extern volatile __bit                   DMA1SCNT11          __at(0x1DF9B);	// @ (0x3BF3 * 8 + 3)
#define                                 DMA1SCNT11_bit      _BIT_ACCESS(DMA1SCNTH,3)
// DMA1SCNTL<DMA1SCNT2>
extern volatile __bit                   DMA1SCNT2           __at(0x1DF92);	// @ (0x3BF2 * 8 + 2)
#define                                 DMA1SCNT2_bit       _BIT_ACCESS(DMA1SCNTL,2)
// DMA1SCNTL<DMA1SCNT3>
extern volatile __bit                   DMA1SCNT3           __at(0x1DF93);	// @ (0x3BF2 * 8 + 3)
#define                                 DMA1SCNT3_bit       _BIT_ACCESS(DMA1SCNTL,3)
// DMA1SCNTL<DMA1SCNT4>
extern volatile __bit                   DMA1SCNT4           __at(0x1DF94);	// @ (0x3BF2 * 8 + 4)
#define                                 DMA1SCNT4_bit       _BIT_ACCESS(DMA1SCNTL,4)
// DMA1SCNTL<DMA1SCNT5>
extern volatile __bit                   DMA1SCNT5           __at(0x1DF95);	// @ (0x3BF2 * 8 + 5)
#define                                 DMA1SCNT5_bit       _BIT_ACCESS(DMA1SCNTL,5)
// DMA1SCNTL<DMA1SCNT6>
extern volatile __bit                   DMA1SCNT6           __at(0x1DF96);	// @ (0x3BF2 * 8 + 6)
#define                                 DMA1SCNT6_bit       _BIT_ACCESS(DMA1SCNTL,6)
// DMA1SCNTL<DMA1SCNT7>
extern volatile __bit                   DMA1SCNT7           __at(0x1DF97);	// @ (0x3BF2 * 8 + 7)
#define                                 DMA1SCNT7_bit       _BIT_ACCESS(DMA1SCNTL,7)
// DMA1SCNTH<DMA1SCNT8>
extern volatile __bit                   DMA1SCNT8           __at(0x1DF98);	// @ (0x3BF3 * 8 + 0)
#define                                 DMA1SCNT8_bit       _BIT_ACCESS(DMA1SCNTH,0)
// DMA1SCNTH<DMA1SCNT9>
extern volatile __bit                   DMA1SCNT9           __at(0x1DF99);	// @ (0x3BF3 * 8 + 1)
#define                                 DMA1SCNT9_bit       _BIT_ACCESS(DMA1SCNTH,1)
// PIE2<DMA1SCNTIE>
extern volatile __bit                   DMA1SCNTIE          __at(0x1CC90);	// @ (0x3992 * 8 + 0)
#define                                 DMA1SCNTIE_bit      _BIT_ACCESS(PIE2,0)
// PIR2<DMA1SCNTIF>
extern volatile __bit                   DMA1SCNTIF          __at(0x1CD10);	// @ (0x39A2 * 8 + 0)
#define                                 DMA1SCNTIF_bit      _BIT_ACCESS(PIR2,0)
// IPR2<DMA1SCNTIP>
extern volatile __bit                   DMA1SCNTIP          __at(0x1CC10);	// @ (0x3982 * 8 + 0)
#define                                 DMA1SCNTIP_bit      _BIT_ACCESS(IPR2,0)
// DMA1SIRQ<DMA1SIRQ0>
extern volatile __bit                   DMA1SIRQ0           __at(0x1DFF8);	// @ (0x3BFF * 8 + 0)
#define                                 DMA1SIRQ0_bit       _BIT_ACCESS(DMA1SIRQ,0)
// DMA1SIRQ<DMA1SIRQ1>
extern volatile __bit                   DMA1SIRQ1           __at(0x1DFF9);	// @ (0x3BFF * 8 + 1)
#define                                 DMA1SIRQ1_bit       _BIT_ACCESS(DMA1SIRQ,1)
// DMA1SIRQ<DMA1SIRQ2>
extern volatile __bit                   DMA1SIRQ2           __at(0x1DFFA);	// @ (0x3BFF * 8 + 2)
#define                                 DMA1SIRQ2_bit       _BIT_ACCESS(DMA1SIRQ,2)
// DMA1SIRQ<DMA1SIRQ3>
extern volatile __bit                   DMA1SIRQ3           __at(0x1DFFB);	// @ (0x3BFF * 8 + 3)
#define                                 DMA1SIRQ3_bit       _BIT_ACCESS(DMA1SIRQ,3)
// DMA1SIRQ<DMA1SIRQ4>
extern volatile __bit                   DMA1SIRQ4           __at(0x1DFFC);	// @ (0x3BFF * 8 + 4)
#define                                 DMA1SIRQ4_bit       _BIT_ACCESS(DMA1SIRQ,4)
// DMA1SIRQ<DMA1SIRQ5>
extern volatile __bit                   DMA1SIRQ5           __at(0x1DFFD);	// @ (0x3BFF * 8 + 5)
#define                                 DMA1SIRQ5_bit       _BIT_ACCESS(DMA1SIRQ,5)
// DMA1SIRQ<DMA1SIRQ6>
extern volatile __bit                   DMA1SIRQ6           __at(0x1DFFE);	// @ (0x3BFF * 8 + 6)
#define                                 DMA1SIRQ6_bit       _BIT_ACCESS(DMA1SIRQ,6)
// DMA1CON0<DMA1SIRQEN>
extern volatile __bit                   DMA1SIRQEN          __at(0x1DFE6);	// @ (0x3BFC * 8 + 6)
#define                                 DMA1SIRQEN_bit      _BIT_ACCESS(DMA1CON0,6)
// DMA1SPTRL<DMA1SPTR0>
extern volatile __bit                   DMA1SPTR0           __at(0x1DFA0);	// @ (0x3BF4 * 8 + 0)
#define                                 DMA1SPTR0_bit       _BIT_ACCESS(DMA1SPTRL,0)
// DMA1SPTRL<DMA1SPTR1>
extern volatile __bit                   DMA1SPTR1           __at(0x1DFA1);	// @ (0x3BF4 * 8 + 1)
#define                                 DMA1SPTR1_bit       _BIT_ACCESS(DMA1SPTRL,1)
// DMA1SPTRH<DMA1SPTR10>
extern volatile __bit                   DMA1SPTR10          __at(0x1DFAA);	// @ (0x3BF5 * 8 + 2)
#define                                 DMA1SPTR10_bit      _BIT_ACCESS(DMA1SPTRH,2)
// DMA1SPTRH<DMA1SPTR11>
extern volatile __bit                   DMA1SPTR11          __at(0x1DFAB);	// @ (0x3BF5 * 8 + 3)
#define                                 DMA1SPTR11_bit      _BIT_ACCESS(DMA1SPTRH,3)
// DMA1SPTRH<DMA1SPTR12>
extern volatile __bit                   DMA1SPTR12          __at(0x1DFAC);	// @ (0x3BF5 * 8 + 4)
#define                                 DMA1SPTR12_bit      _BIT_ACCESS(DMA1SPTRH,4)
// DMA1SPTRH<DMA1SPTR13>
extern volatile __bit                   DMA1SPTR13          __at(0x1DFAD);	// @ (0x3BF5 * 8 + 5)
#define                                 DMA1SPTR13_bit      _BIT_ACCESS(DMA1SPTRH,5)
// DMA1SPTRH<DMA1SPTR14>
extern volatile __bit                   DMA1SPTR14          __at(0x1DFAE);	// @ (0x3BF5 * 8 + 6)
#define                                 DMA1SPTR14_bit      _BIT_ACCESS(DMA1SPTRH,6)
// DMA1SPTRH<DMA1SPTR15>
extern volatile __bit                   DMA1SPTR15          __at(0x1DFAF);	// @ (0x3BF5 * 8 + 7)
#define                                 DMA1SPTR15_bit      _BIT_ACCESS(DMA1SPTRH,7)
// DMA1SPTRU<DMA1SPTR16>
extern volatile __bit                   DMA1SPTR16          __at(0x1DFB0);	// @ (0x3BF6 * 8 + 0)
#define                                 DMA1SPTR16_bit      _BIT_ACCESS(DMA1SPTRU,0)
// DMA1SPTRU<DMA1SPTR17>
extern volatile __bit                   DMA1SPTR17          __at(0x1DFB1);	// @ (0x3BF6 * 8 + 1)
#define                                 DMA1SPTR17_bit      _BIT_ACCESS(DMA1SPTRU,1)
// DMA1SPTRU<DMA1SPTR18>
extern volatile __bit                   DMA1SPTR18          __at(0x1DFB2);	// @ (0x3BF6 * 8 + 2)
#define                                 DMA1SPTR18_bit      _BIT_ACCESS(DMA1SPTRU,2)
// DMA1SPTRU<DMA1SPTR19>
extern volatile __bit                   DMA1SPTR19          __at(0x1DFB3);	// @ (0x3BF6 * 8 + 3)
#define                                 DMA1SPTR19_bit      _BIT_ACCESS(DMA1SPTRU,3)
// DMA1SPTRL<DMA1SPTR2>
extern volatile __bit                   DMA1SPTR2           __at(0x1DFA2);	// @ (0x3BF4 * 8 + 2)
#define                                 DMA1SPTR2_bit       _BIT_ACCESS(DMA1SPTRL,2)
// DMA1SPTRU<DMA1SPTR20>
extern volatile __bit                   DMA1SPTR20          __at(0x1DFB4);	// @ (0x3BF6 * 8 + 4)
#define                                 DMA1SPTR20_bit      _BIT_ACCESS(DMA1SPTRU,4)
// DMA1SPTRU<DMA1SPTR21>
extern volatile __bit                   DMA1SPTR21          __at(0x1DFB5);	// @ (0x3BF6 * 8 + 5)
#define                                 DMA1SPTR21_bit      _BIT_ACCESS(DMA1SPTRU,5)
// DMA1SPTRL<DMA1SPTR3>
extern volatile __bit                   DMA1SPTR3           __at(0x1DFA3);	// @ (0x3BF4 * 8 + 3)
#define                                 DMA1SPTR3_bit       _BIT_ACCESS(DMA1SPTRL,3)
// DMA1SPTRL<DMA1SPTR4>
extern volatile __bit                   DMA1SPTR4           __at(0x1DFA4);	// @ (0x3BF4 * 8 + 4)
#define                                 DMA1SPTR4_bit       _BIT_ACCESS(DMA1SPTRL,4)
// DMA1SPTRL<DMA1SPTR5>
extern volatile __bit                   DMA1SPTR5           __at(0x1DFA5);	// @ (0x3BF4 * 8 + 5)
#define                                 DMA1SPTR5_bit       _BIT_ACCESS(DMA1SPTRL,5)
// DMA1SPTRL<DMA1SPTR6>
extern volatile __bit                   DMA1SPTR6           __at(0x1DFA6);	// @ (0x3BF4 * 8 + 6)
#define                                 DMA1SPTR6_bit       _BIT_ACCESS(DMA1SPTRL,6)
// DMA1SPTRL<DMA1SPTR7>
extern volatile __bit                   DMA1SPTR7           __at(0x1DFA7);	// @ (0x3BF4 * 8 + 7)
#define                                 DMA1SPTR7_bit       _BIT_ACCESS(DMA1SPTRL,7)
// DMA1SPTRH<DMA1SPTR8>
extern volatile __bit                   DMA1SPTR8           __at(0x1DFA8);	// @ (0x3BF5 * 8 + 0)
#define                                 DMA1SPTR8_bit       _BIT_ACCESS(DMA1SPTRH,0)
// DMA1SPTRH<DMA1SPTR9>
extern volatile __bit                   DMA1SPTR9           __at(0x1DFA9);	// @ (0x3BF5 * 8 + 1)
#define                                 DMA1SPTR9_bit       _BIT_ACCESS(DMA1SPTRH,1)
// DMA1SSAL<DMA1SSA0>
extern volatile __bit                   DMA1SSA0            __at(0x1DFC8);	// @ (0x3BF9 * 8 + 0)
#define                                 DMA1SSA0_bit        _BIT_ACCESS(DMA1SSAL,0)
// DMA1SSAL<DMA1SSA1>
extern volatile __bit                   DMA1SSA1            __at(0x1DFC9);	// @ (0x3BF9 * 8 + 1)
#define                                 DMA1SSA1_bit        _BIT_ACCESS(DMA1SSAL,1)
// DMA1SSAH<DMA1SSA10>
extern volatile __bit                   DMA1SSA10           __at(0x1DFD2);	// @ (0x3BFA * 8 + 2)
#define                                 DMA1SSA10_bit       _BIT_ACCESS(DMA1SSAH,2)
// DMA1SSAH<DMA1SSA11>
extern volatile __bit                   DMA1SSA11           __at(0x1DFD3);	// @ (0x3BFA * 8 + 3)
#define                                 DMA1SSA11_bit       _BIT_ACCESS(DMA1SSAH,3)
// DMA1SSAH<DMA1SSA12>
extern volatile __bit                   DMA1SSA12           __at(0x1DFD4);	// @ (0x3BFA * 8 + 4)
#define                                 DMA1SSA12_bit       _BIT_ACCESS(DMA1SSAH,4)
// DMA1SSAH<DMA1SSA13>
extern volatile __bit                   DMA1SSA13           __at(0x1DFD5);	// @ (0x3BFA * 8 + 5)
#define                                 DMA1SSA13_bit       _BIT_ACCESS(DMA1SSAH,5)
// DMA1SSAH<DMA1SSA14>
extern volatile __bit                   DMA1SSA14           __at(0x1DFD6);	// @ (0x3BFA * 8 + 6)
#define                                 DMA1SSA14_bit       _BIT_ACCESS(DMA1SSAH,6)
// DMA1SSAH<DMA1SSA15>
extern volatile __bit                   DMA1SSA15           __at(0x1DFD7);	// @ (0x3BFA * 8 + 7)
#define                                 DMA1SSA15_bit       _BIT_ACCESS(DMA1SSAH,7)
// DMA1SSAU<DMA1SSA16>
extern volatile __bit                   DMA1SSA16           __at(0x1DFD8);	// @ (0x3BFB * 8 + 0)
#define                                 DMA1SSA16_bit       _BIT_ACCESS(DMA1SSAU,0)
// DMA1SSAU<DMA1SSA17>
extern volatile __bit                   DMA1SSA17           __at(0x1DFD9);	// @ (0x3BFB * 8 + 1)
#define                                 DMA1SSA17_bit       _BIT_ACCESS(DMA1SSAU,1)
// DMA1SSAU<DMA1SSA18>
extern volatile __bit                   DMA1SSA18           __at(0x1DFDA);	// @ (0x3BFB * 8 + 2)
#define                                 DMA1SSA18_bit       _BIT_ACCESS(DMA1SSAU,2)
// DMA1SSAU<DMA1SSA19>
extern volatile __bit                   DMA1SSA19           __at(0x1DFDB);	// @ (0x3BFB * 8 + 3)
#define                                 DMA1SSA19_bit       _BIT_ACCESS(DMA1SSAU,3)
// DMA1SSAL<DMA1SSA2>
extern volatile __bit                   DMA1SSA2            __at(0x1DFCA);	// @ (0x3BF9 * 8 + 2)
#define                                 DMA1SSA2_bit        _BIT_ACCESS(DMA1SSAL,2)
// DMA1SSAU<DMA1SSA20>
extern volatile __bit                   DMA1SSA20           __at(0x1DFDC);	// @ (0x3BFB * 8 + 4)
#define                                 DMA1SSA20_bit       _BIT_ACCESS(DMA1SSAU,4)
// DMA1SSAU<DMA1SSA21>
extern volatile __bit                   DMA1SSA21           __at(0x1DFDD);	// @ (0x3BFB * 8 + 5)
#define                                 DMA1SSA21_bit       _BIT_ACCESS(DMA1SSAU,5)
// DMA1SSAL<DMA1SSA3>
extern volatile __bit                   DMA1SSA3            __at(0x1DFCB);	// @ (0x3BF9 * 8 + 3)
#define                                 DMA1SSA3_bit        _BIT_ACCESS(DMA1SSAL,3)
// DMA1SSAL<DMA1SSA4>
extern volatile __bit                   DMA1SSA4            __at(0x1DFCC);	// @ (0x3BF9 * 8 + 4)
#define                                 DMA1SSA4_bit        _BIT_ACCESS(DMA1SSAL,4)
// DMA1SSAL<DMA1SSA5>
extern volatile __bit                   DMA1SSA5            __at(0x1DFCD);	// @ (0x3BF9 * 8 + 5)
#define                                 DMA1SSA5_bit        _BIT_ACCESS(DMA1SSAL,5)
// DMA1SSAL<DMA1SSA6>
extern volatile __bit                   DMA1SSA6            __at(0x1DFCE);	// @ (0x3BF9 * 8 + 6)
#define                                 DMA1SSA6_bit        _BIT_ACCESS(DMA1SSAL,6)
// DMA1SSAL<DMA1SSA7>
extern volatile __bit                   DMA1SSA7            __at(0x1DFCF);	// @ (0x3BF9 * 8 + 7)
#define                                 DMA1SSA7_bit        _BIT_ACCESS(DMA1SSAL,7)
// DMA1SSAH<DMA1SSA8>
extern volatile __bit                   DMA1SSA8            __at(0x1DFD0);	// @ (0x3BFA * 8 + 0)
#define                                 DMA1SSA8_bit        _BIT_ACCESS(DMA1SSAH,0)
// DMA1SSAH<DMA1SSA9>
extern volatile __bit                   DMA1SSA9            __at(0x1DFD1);	// @ (0x3BFA * 8 + 1)
#define                                 DMA1SSA9_bit        _BIT_ACCESS(DMA1SSAH,1)
// DMA1SSZL<DMA1SSZ0>
extern volatile __bit                   DMA1SSZ0            __at(0x1DFB8);	// @ (0x3BF7 * 8 + 0)
#define                                 DMA1SSZ0_bit        _BIT_ACCESS(DMA1SSZL,0)
// DMA1SSZL<DMA1SSZ1>
extern volatile __bit                   DMA1SSZ1            __at(0x1DFB9);	// @ (0x3BF7 * 8 + 1)
#define                                 DMA1SSZ1_bit        _BIT_ACCESS(DMA1SSZL,1)
// DMA1SSZH<DMA1SSZ10>
extern volatile __bit                   DMA1SSZ10           __at(0x1DFC2);	// @ (0x3BF8 * 8 + 2)
#define                                 DMA1SSZ10_bit       _BIT_ACCESS(DMA1SSZH,2)
// DMA1SSZH<DMA1SSZ11>
extern volatile __bit                   DMA1SSZ11           __at(0x1DFC3);	// @ (0x3BF8 * 8 + 3)
#define                                 DMA1SSZ11_bit       _BIT_ACCESS(DMA1SSZH,3)
// DMA1SSZL<DMA1SSZ2>
extern volatile __bit                   DMA1SSZ2            __at(0x1DFBA);	// @ (0x3BF7 * 8 + 2)
#define                                 DMA1SSZ2_bit        _BIT_ACCESS(DMA1SSZL,2)
// DMA1SSZL<DMA1SSZ3>
extern volatile __bit                   DMA1SSZ3            __at(0x1DFBB);	// @ (0x3BF7 * 8 + 3)
#define                                 DMA1SSZ3_bit        _BIT_ACCESS(DMA1SSZL,3)
// DMA1SSZL<DMA1SSZ4>
extern volatile __bit                   DMA1SSZ4            __at(0x1DFBC);	// @ (0x3BF7 * 8 + 4)
#define                                 DMA1SSZ4_bit        _BIT_ACCESS(DMA1SSZL,4)
// DMA1SSZL<DMA1SSZ5>
extern volatile __bit                   DMA1SSZ5            __at(0x1DFBD);	// @ (0x3BF7 * 8 + 5)
#define                                 DMA1SSZ5_bit        _BIT_ACCESS(DMA1SSZL,5)
// DMA1SSZL<DMA1SSZ6>
extern volatile __bit                   DMA1SSZ6            __at(0x1DFBE);	// @ (0x3BF7 * 8 + 6)
#define                                 DMA1SSZ6_bit        _BIT_ACCESS(DMA1SSZL,6)
// DMA1SSZL<DMA1SSZ7>
extern volatile __bit                   DMA1SSZ7            __at(0x1DFBF);	// @ (0x3BF7 * 8 + 7)
#define                                 DMA1SSZ7_bit        _BIT_ACCESS(DMA1SSZL,7)
// DMA1SSZH<DMA1SSZ8>
extern volatile __bit                   DMA1SSZ8            __at(0x1DFC0);	// @ (0x3BF8 * 8 + 0)
#define                                 DMA1SSZ8_bit        _BIT_ACCESS(DMA1SSZH,0)
// DMA1SSZH<DMA1SSZ9>
extern volatile __bit                   DMA1SSZ9            __at(0x1DFC1);	// @ (0x3BF8 * 8 + 1)
#define                                 DMA1SSZ9_bit        _BIT_ACCESS(DMA1SSZH,1)
// DMA1CON0<DMA1XIP>
extern volatile __bit                   DMA1XIP             __at(0x1DFE0);	// @ (0x3BFC * 8 + 0)
#define                                 DMA1XIP_bit         _BIT_ACCESS(DMA1CON0,0)
// PIE5<DMA2AIE>
extern volatile __bit                   DMA2AIE             __at(0x1CCAD);	// @ (0x3995 * 8 + 5)
#define                                 DMA2AIE_bit         _BIT_ACCESS(PIE5,5)
// PIR5<DMA2AIF>
extern volatile __bit                   DMA2AIF             __at(0x1CD2D);	// @ (0x39A5 * 8 + 5)
#define                                 DMA2AIF_bit         _BIT_ACCESS(PIR5,5)
// IPR5<DMA2AIP>
extern volatile __bit                   DMA2AIP             __at(0x1CC2D);	// @ (0x3985 * 8 + 5)
#define                                 DMA2AIP_bit         _BIT_ACCESS(IPR5,5)
// DMA2AIRQ<DMA2AIRQ0>
extern volatile __bit                   DMA2AIRQ0           __at(0x1DEF0);	// @ (0x3BDE * 8 + 0)
#define                                 DMA2AIRQ0_bit       _BIT_ACCESS(DMA2AIRQ,0)
// DMA2AIRQ<DMA2AIRQ1>
extern volatile __bit                   DMA2AIRQ1           __at(0x1DEF1);	// @ (0x3BDE * 8 + 1)
#define                                 DMA2AIRQ1_bit       _BIT_ACCESS(DMA2AIRQ,1)
// DMA2AIRQ<DMA2AIRQ2>
extern volatile __bit                   DMA2AIRQ2           __at(0x1DEF2);	// @ (0x3BDE * 8 + 2)
#define                                 DMA2AIRQ2_bit       _BIT_ACCESS(DMA2AIRQ,2)
// DMA2AIRQ<DMA2AIRQ3>
extern volatile __bit                   DMA2AIRQ3           __at(0x1DEF3);	// @ (0x3BDE * 8 + 3)
#define                                 DMA2AIRQ3_bit       _BIT_ACCESS(DMA2AIRQ,3)
// DMA2AIRQ<DMA2AIRQ4>
extern volatile __bit                   DMA2AIRQ4           __at(0x1DEF4);	// @ (0x3BDE * 8 + 4)
#define                                 DMA2AIRQ4_bit       _BIT_ACCESS(DMA2AIRQ,4)
// DMA2AIRQ<DMA2AIRQ5>
extern volatile __bit                   DMA2AIRQ5           __at(0x1DEF5);	// @ (0x3BDE * 8 + 5)
#define                                 DMA2AIRQ5_bit       _BIT_ACCESS(DMA2AIRQ,5)
// DMA2AIRQ<DMA2AIRQ6>
extern volatile __bit                   DMA2AIRQ6           __at(0x1DEF6);	// @ (0x3BDE * 8 + 6)
#define                                 DMA2AIRQ6_bit       _BIT_ACCESS(DMA2AIRQ,6)
// DMA2CON0<DMA2AIRQEN>
extern volatile __bit                   DMA2AIRQEN          __at(0x1DEE2);	// @ (0x3BDC * 8 + 2)
#define                                 DMA2AIRQEN_bit      _BIT_ACCESS(DMA2CON0,2)
// DMA2BUF<DMA2BUF0>
extern volatile __bit                   DMA2BUF0            __at(0x1DE48);	// @ (0x3BC9 * 8 + 0)
#define                                 DMA2BUF0_bit        _BIT_ACCESS(DMA2BUF,0)
// DMA2BUF<DMA2BUF1>
extern volatile __bit                   DMA2BUF1            __at(0x1DE49);	// @ (0x3BC9 * 8 + 1)
#define                                 DMA2BUF1_bit        _BIT_ACCESS(DMA2BUF,1)
// DMA2BUF<DMA2BUF2>
extern volatile __bit                   DMA2BUF2            __at(0x1DE4A);	// @ (0x3BC9 * 8 + 2)
#define                                 DMA2BUF2_bit        _BIT_ACCESS(DMA2BUF,2)
// DMA2BUF<DMA2BUF3>
extern volatile __bit                   DMA2BUF3            __at(0x1DE4B);	// @ (0x3BC9 * 8 + 3)
#define                                 DMA2BUF3_bit        _BIT_ACCESS(DMA2BUF,3)
// DMA2BUF<DMA2BUF4>
extern volatile __bit                   DMA2BUF4            __at(0x1DE4C);	// @ (0x3BC9 * 8 + 4)
#define                                 DMA2BUF4_bit        _BIT_ACCESS(DMA2BUF,4)
// DMA2BUF<DMA2BUF5>
extern volatile __bit                   DMA2BUF5            __at(0x1DE4D);	// @ (0x3BC9 * 8 + 5)
#define                                 DMA2BUF5_bit        _BIT_ACCESS(DMA2BUF,5)
// DMA2BUF<DMA2BUF6>
extern volatile __bit                   DMA2BUF6            __at(0x1DE4E);	// @ (0x3BC9 * 8 + 6)
#define                                 DMA2BUF6_bit        _BIT_ACCESS(DMA2BUF,6)
// DMA2BUF<DMA2BUF7>
extern volatile __bit                   DMA2BUF7            __at(0x1DE4F);	// @ (0x3BC9 * 8 + 7)
#define                                 DMA2BUF7_bit        _BIT_ACCESS(DMA2BUF,7)
// DMA2DCNTL<DMA2DCNT0>
extern volatile __bit                   DMA2DCNT0           __at(0x1DE50);	// @ (0x3BCA * 8 + 0)
#define                                 DMA2DCNT0_bit       _BIT_ACCESS(DMA2DCNTL,0)
// DMA2DCNTL<DMA2DCNT1>
extern volatile __bit                   DMA2DCNT1           __at(0x1DE51);	// @ (0x3BCA * 8 + 1)
#define                                 DMA2DCNT1_bit       _BIT_ACCESS(DMA2DCNTL,1)
// DMA2DCNTH<DMA2DCNT10>
extern volatile __bit                   DMA2DCNT10          __at(0x1DE5A);	// @ (0x3BCB * 8 + 2)
#define                                 DMA2DCNT10_bit      _BIT_ACCESS(DMA2DCNTH,2)
// DMA2DCNTH<DMA2DCNT11>
extern volatile __bit                   DMA2DCNT11          __at(0x1DE5B);	// @ (0x3BCB * 8 + 3)
#define                                 DMA2DCNT11_bit      _BIT_ACCESS(DMA2DCNTH,3)
// DMA2DCNTL<DMA2DCNT2>
extern volatile __bit                   DMA2DCNT2           __at(0x1DE52);	// @ (0x3BCA * 8 + 2)
#define                                 DMA2DCNT2_bit       _BIT_ACCESS(DMA2DCNTL,2)
// DMA2DCNTL<DMA2DCNT3>
extern volatile __bit                   DMA2DCNT3           __at(0x1DE53);	// @ (0x3BCA * 8 + 3)
#define                                 DMA2DCNT3_bit       _BIT_ACCESS(DMA2DCNTL,3)
// DMA2DCNTL<DMA2DCNT4>
extern volatile __bit                   DMA2DCNT4           __at(0x1DE54);	// @ (0x3BCA * 8 + 4)
#define                                 DMA2DCNT4_bit       _BIT_ACCESS(DMA2DCNTL,4)
// DMA2DCNTL<DMA2DCNT5>
extern volatile __bit                   DMA2DCNT5           __at(0x1DE55);	// @ (0x3BCA * 8 + 5)
#define                                 DMA2DCNT5_bit       _BIT_ACCESS(DMA2DCNTL,5)
// DMA2DCNTL<DMA2DCNT6>
extern volatile __bit                   DMA2DCNT6           __at(0x1DE56);	// @ (0x3BCA * 8 + 6)
#define                                 DMA2DCNT6_bit       _BIT_ACCESS(DMA2DCNTL,6)
// DMA2DCNTL<DMA2DCNT7>
extern volatile __bit                   DMA2DCNT7           __at(0x1DE57);	// @ (0x3BCA * 8 + 7)
#define                                 DMA2DCNT7_bit       _BIT_ACCESS(DMA2DCNTL,7)
// DMA2DCNTH<DMA2DCNT8>
extern volatile __bit                   DMA2DCNT8           __at(0x1DE58);	// @ (0x3BCB * 8 + 0)
#define                                 DMA2DCNT8_bit       _BIT_ACCESS(DMA2DCNTH,0)
// DMA2DCNTH<DMA2DCNT9>
extern volatile __bit                   DMA2DCNT9           __at(0x1DE59);	// @ (0x3BCB * 8 + 1)
#define                                 DMA2DCNT9_bit       _BIT_ACCESS(DMA2DCNTH,1)
// PIE5<DMA2DCNTIE>
extern volatile __bit                   DMA2DCNTIE          __at(0x1CCAB);	// @ (0x3995 * 8 + 3)
#define                                 DMA2DCNTIE_bit      _BIT_ACCESS(PIE5,3)
// PIR5<DMA2DCNTIF>
extern volatile __bit                   DMA2DCNTIF          __at(0x1CD2B);	// @ (0x39A5 * 8 + 3)
#define                                 DMA2DCNTIF_bit      _BIT_ACCESS(PIR5,3)
// IPR5<DMA2DCNTIP>
extern volatile __bit                   DMA2DCNTIP          __at(0x1CC2B);	// @ (0x3985 * 8 + 3)
#define                                 DMA2DCNTIP_bit      _BIT_ACCESS(IPR5,3)
// DMA2CON0<DMA2DGO>
extern volatile __bit                   DMA2DGO             __at(0x1DEE5);	// @ (0x3BDC * 8 + 5)
#define                                 DMA2DGO_bit         _BIT_ACCESS(DMA2CON0,5)
// DMA2DPTRL<DMA2DPTR0>
extern volatile __bit                   DMA2DPTR0           __at(0x1DE60);	// @ (0x3BCC * 8 + 0)
#define                                 DMA2DPTR0_bit       _BIT_ACCESS(DMA2DPTRL,0)
// DMA2DPTRL<DMA2DPTR1>
extern volatile __bit                   DMA2DPTR1           __at(0x1DE61);	// @ (0x3BCC * 8 + 1)
#define                                 DMA2DPTR1_bit       _BIT_ACCESS(DMA2DPTRL,1)
// DMA2DPTRH<DMA2DPTR10>
extern volatile __bit                   DMA2DPTR10          __at(0x1DE6A);	// @ (0x3BCD * 8 + 2)
#define                                 DMA2DPTR10_bit      _BIT_ACCESS(DMA2DPTRH,2)
// DMA2DPTRH<DMA2DPTR11>
extern volatile __bit                   DMA2DPTR11          __at(0x1DE6B);	// @ (0x3BCD * 8 + 3)
#define                                 DMA2DPTR11_bit      _BIT_ACCESS(DMA2DPTRH,3)
// DMA2DPTRH<DMA2DPTR12>
extern volatile __bit                   DMA2DPTR12          __at(0x1DE6C);	// @ (0x3BCD * 8 + 4)
#define                                 DMA2DPTR12_bit      _BIT_ACCESS(DMA2DPTRH,4)
// DMA2DPTRH<DMA2DPTR13>
extern volatile __bit                   DMA2DPTR13          __at(0x1DE6D);	// @ (0x3BCD * 8 + 5)
#define                                 DMA2DPTR13_bit      _BIT_ACCESS(DMA2DPTRH,5)
// DMA2DPTRH<DMA2DPTR14>
extern volatile __bit                   DMA2DPTR14          __at(0x1DE6E);	// @ (0x3BCD * 8 + 6)
#define                                 DMA2DPTR14_bit      _BIT_ACCESS(DMA2DPTRH,6)
// DMA2DPTRH<DMA2DPTR15>
extern volatile __bit                   DMA2DPTR15          __at(0x1DE6F);	// @ (0x3BCD * 8 + 7)
#define                                 DMA2DPTR15_bit      _BIT_ACCESS(DMA2DPTRH,7)
// DMA2DPTRL<DMA2DPTR2>
extern volatile __bit                   DMA2DPTR2           __at(0x1DE62);	// @ (0x3BCC * 8 + 2)
#define                                 DMA2DPTR2_bit       _BIT_ACCESS(DMA2DPTRL,2)
// DMA2DPTRL<DMA2DPTR3>
extern volatile __bit                   DMA2DPTR3           __at(0x1DE63);	// @ (0x3BCC * 8 + 3)
#define                                 DMA2DPTR3_bit       _BIT_ACCESS(DMA2DPTRL,3)
// DMA2DPTRL<DMA2DPTR4>
extern volatile __bit                   DMA2DPTR4           __at(0x1DE64);	// @ (0x3BCC * 8 + 4)
#define                                 DMA2DPTR4_bit       _BIT_ACCESS(DMA2DPTRL,4)
// DMA2DPTRL<DMA2DPTR5>
extern volatile __bit                   DMA2DPTR5           __at(0x1DE65);	// @ (0x3BCC * 8 + 5)
#define                                 DMA2DPTR5_bit       _BIT_ACCESS(DMA2DPTRL,5)
// DMA2DPTRL<DMA2DPTR6>
extern volatile __bit                   DMA2DPTR6           __at(0x1DE66);	// @ (0x3BCC * 8 + 6)
#define                                 DMA2DPTR6_bit       _BIT_ACCESS(DMA2DPTRL,6)
// DMA2DPTRL<DMA2DPTR7>
extern volatile __bit                   DMA2DPTR7           __at(0x1DE67);	// @ (0x3BCC * 8 + 7)
#define                                 DMA2DPTR7_bit       _BIT_ACCESS(DMA2DPTRL,7)
// DMA2DPTRH<DMA2DPTR8>
extern volatile __bit                   DMA2DPTR8           __at(0x1DE68);	// @ (0x3BCD * 8 + 0)
#define                                 DMA2DPTR8_bit       _BIT_ACCESS(DMA2DPTRH,0)
// DMA2DPTRH<DMA2DPTR9>
extern volatile __bit                   DMA2DPTR9           __at(0x1DE69);	// @ (0x3BCD * 8 + 1)
#define                                 DMA2DPTR9_bit       _BIT_ACCESS(DMA2DPTRH,1)
// DMA2DSAL<DMA2DSA0>
extern volatile __bit                   DMA2DSA0            __at(0x1DE80);	// @ (0x3BD0 * 8 + 0)
#define                                 DMA2DSA0_bit        _BIT_ACCESS(DMA2DSAL,0)
// DMA2DSAL<DMA2DSA1>
extern volatile __bit                   DMA2DSA1            __at(0x1DE81);	// @ (0x3BD0 * 8 + 1)
#define                                 DMA2DSA1_bit        _BIT_ACCESS(DMA2DSAL,1)
// DMA2DSAH<DMA2DSA10>
extern volatile __bit                   DMA2DSA10           __at(0x1DE8A);	// @ (0x3BD1 * 8 + 2)
#define                                 DMA2DSA10_bit       _BIT_ACCESS(DMA2DSAH,2)
// DMA2DSAH<DMA2DSA11>
extern volatile __bit                   DMA2DSA11           __at(0x1DE8B);	// @ (0x3BD1 * 8 + 3)
#define                                 DMA2DSA11_bit       _BIT_ACCESS(DMA2DSAH,3)
// DMA2DSAH<DMA2DSA12>
extern volatile __bit                   DMA2DSA12           __at(0x1DE8C);	// @ (0x3BD1 * 8 + 4)
#define                                 DMA2DSA12_bit       _BIT_ACCESS(DMA2DSAH,4)
// DMA2DSAH<DMA2DSA13>
extern volatile __bit                   DMA2DSA13           __at(0x1DE8D);	// @ (0x3BD1 * 8 + 5)
#define                                 DMA2DSA13_bit       _BIT_ACCESS(DMA2DSAH,5)
// DMA2DSAH<DMA2DSA14>
extern volatile __bit                   DMA2DSA14           __at(0x1DE8E);	// @ (0x3BD1 * 8 + 6)
#define                                 DMA2DSA14_bit       _BIT_ACCESS(DMA2DSAH,6)
// DMA2DSAH<DMA2DSA15>
extern volatile __bit                   DMA2DSA15           __at(0x1DE8F);	// @ (0x3BD1 * 8 + 7)
#define                                 DMA2DSA15_bit       _BIT_ACCESS(DMA2DSAH,7)
// DMA2DSAL<DMA2DSA2>
extern volatile __bit                   DMA2DSA2            __at(0x1DE82);	// @ (0x3BD0 * 8 + 2)
#define                                 DMA2DSA2_bit        _BIT_ACCESS(DMA2DSAL,2)
// DMA2DSAL<DMA2DSA3>
extern volatile __bit                   DMA2DSA3            __at(0x1DE83);	// @ (0x3BD0 * 8 + 3)
#define                                 DMA2DSA3_bit        _BIT_ACCESS(DMA2DSAL,3)
// DMA2DSAL<DMA2DSA4>
extern volatile __bit                   DMA2DSA4            __at(0x1DE84);	// @ (0x3BD0 * 8 + 4)
#define                                 DMA2DSA4_bit        _BIT_ACCESS(DMA2DSAL,4)
// DMA2DSAL<DMA2DSA5>
extern volatile __bit                   DMA2DSA5            __at(0x1DE85);	// @ (0x3BD0 * 8 + 5)
#define                                 DMA2DSA5_bit        _BIT_ACCESS(DMA2DSAL,5)
// DMA2DSAL<DMA2DSA6>
extern volatile __bit                   DMA2DSA6            __at(0x1DE86);	// @ (0x3BD0 * 8 + 6)
#define                                 DMA2DSA6_bit        _BIT_ACCESS(DMA2DSAL,6)
// DMA2DSAL<DMA2DSA7>
extern volatile __bit                   DMA2DSA7            __at(0x1DE87);	// @ (0x3BD0 * 8 + 7)
#define                                 DMA2DSA7_bit        _BIT_ACCESS(DMA2DSAL,7)
// DMA2DSAH<DMA2DSA8>
extern volatile __bit                   DMA2DSA8            __at(0x1DE88);	// @ (0x3BD1 * 8 + 0)
#define                                 DMA2DSA8_bit        _BIT_ACCESS(DMA2DSAH,0)
// DMA2DSAH<DMA2DSA9>
extern volatile __bit                   DMA2DSA9            __at(0x1DE89);	// @ (0x3BD1 * 8 + 1)
#define                                 DMA2DSA9_bit        _BIT_ACCESS(DMA2DSAH,1)
// DMA2DSZL<DMA2DSZ0>
extern volatile __bit                   DMA2DSZ0            __at(0x1DE70);	// @ (0x3BCE * 8 + 0)
#define                                 DMA2DSZ0_bit        _BIT_ACCESS(DMA2DSZL,0)
// DMA2DSZL<DMA2DSZ1>
extern volatile __bit                   DMA2DSZ1            __at(0x1DE71);	// @ (0x3BCE * 8 + 1)
#define                                 DMA2DSZ1_bit        _BIT_ACCESS(DMA2DSZL,1)
// DMA2DSZH<DMA2DSZ10>
extern volatile __bit                   DMA2DSZ10           __at(0x1DE7A);	// @ (0x3BCF * 8 + 2)
#define                                 DMA2DSZ10_bit       _BIT_ACCESS(DMA2DSZH,2)
// DMA2DSZH<DMA2DSZ11>
extern volatile __bit                   DMA2DSZ11           __at(0x1DE7B);	// @ (0x3BCF * 8 + 3)
#define                                 DMA2DSZ11_bit       _BIT_ACCESS(DMA2DSZH,3)
// DMA2DSZL<DMA2DSZ2>
extern volatile __bit                   DMA2DSZ2            __at(0x1DE72);	// @ (0x3BCE * 8 + 2)
#define                                 DMA2DSZ2_bit        _BIT_ACCESS(DMA2DSZL,2)
// DMA2DSZL<DMA2DSZ3>
extern volatile __bit                   DMA2DSZ3            __at(0x1DE73);	// @ (0x3BCE * 8 + 3)
#define                                 DMA2DSZ3_bit        _BIT_ACCESS(DMA2DSZL,3)
// DMA2DSZL<DMA2DSZ4>
extern volatile __bit                   DMA2DSZ4            __at(0x1DE74);	// @ (0x3BCE * 8 + 4)
#define                                 DMA2DSZ4_bit        _BIT_ACCESS(DMA2DSZL,4)
// DMA2DSZL<DMA2DSZ5>
extern volatile __bit                   DMA2DSZ5            __at(0x1DE75);	// @ (0x3BCE * 8 + 5)
#define                                 DMA2DSZ5_bit        _BIT_ACCESS(DMA2DSZL,5)
// DMA2DSZL<DMA2DSZ6>
extern volatile __bit                   DMA2DSZ6            __at(0x1DE76);	// @ (0x3BCE * 8 + 6)
#define                                 DMA2DSZ6_bit        _BIT_ACCESS(DMA2DSZL,6)
// DMA2DSZL<DMA2DSZ7>
extern volatile __bit                   DMA2DSZ7            __at(0x1DE77);	// @ (0x3BCE * 8 + 7)
#define                                 DMA2DSZ7_bit        _BIT_ACCESS(DMA2DSZL,7)
// DMA2DSZH<DMA2DSZ8>
extern volatile __bit                   DMA2DSZ8            __at(0x1DE78);	// @ (0x3BCF * 8 + 0)
#define                                 DMA2DSZ8_bit        _BIT_ACCESS(DMA2DSZH,0)
// DMA2DSZH<DMA2DSZ9>
extern volatile __bit                   DMA2DSZ9            __at(0x1DE79);	// @ (0x3BCF * 8 + 1)
#define                                 DMA2DSZ9_bit        _BIT_ACCESS(DMA2DSZH,1)
// DMA2CON0<DMA2EN>
extern volatile __bit                   DMA2EN              __at(0x1DEE7);	// @ (0x3BDC * 8 + 7)
#define                                 DMA2EN_bit          _BIT_ACCESS(DMA2CON0,7)
// PMD7<DMA2MD>
extern volatile __bit                   DMA2MD              __at(0x1CE39);	// @ (0x39C7 * 8 + 1)
#define                                 DMA2MD_bit          _BIT_ACCESS(PMD7,1)
// PIE5<DMA2ORIE>
extern volatile __bit                   DMA2ORIE            __at(0x1CCAC);	// @ (0x3995 * 8 + 4)
#define                                 DMA2ORIE_bit        _BIT_ACCESS(PIE5,4)
// PIR5<DMA2ORIF>
extern volatile __bit                   DMA2ORIF            __at(0x1CD2C);	// @ (0x39A5 * 8 + 4)
#define                                 DMA2ORIF_bit        _BIT_ACCESS(PIR5,4)
// IPR5<DMA2ORIP>
extern volatile __bit                   DMA2ORIP            __at(0x1CC2C);	// @ (0x3985 * 8 + 4)
#define                                 DMA2ORIP_bit        _BIT_ACCESS(IPR5,4)
// DMA2PR<DMA2PR0>
extern volatile __bit                   DMA2PR0             __at(0x1CFA0);	// @ (0x39F4 * 8 + 0)
#define                                 DMA2PR0_bit         _BIT_ACCESS(DMA2PR,0)
// DMA2PR<DMA2PR1>
extern volatile __bit                   DMA2PR1             __at(0x1CFA1);	// @ (0x39F4 * 8 + 1)
#define                                 DMA2PR1_bit         _BIT_ACCESS(DMA2PR,1)
// DMA2PR<DMA2PR2>
extern volatile __bit                   DMA2PR2             __at(0x1CFA2);	// @ (0x39F4 * 8 + 2)
#define                                 DMA2PR2_bit         _BIT_ACCESS(DMA2PR,2)
// DMA2SCNTL<DMA2SCNT0>
extern volatile __bit                   DMA2SCNT0           __at(0x1DE90);	// @ (0x3BD2 * 8 + 0)
#define                                 DMA2SCNT0_bit       _BIT_ACCESS(DMA2SCNTL,0)
// DMA2SCNTL<DMA2SCNT1>
extern volatile __bit                   DMA2SCNT1           __at(0x1DE91);	// @ (0x3BD2 * 8 + 1)
#define                                 DMA2SCNT1_bit       _BIT_ACCESS(DMA2SCNTL,1)
// DMA2SCNTH<DMA2SCNT10>
extern volatile __bit                   DMA2SCNT10          __at(0x1DE9A);	// @ (0x3BD3 * 8 + 2)
#define                                 DMA2SCNT10_bit      _BIT_ACCESS(DMA2SCNTH,2)
// DMA2SCNTH<DMA2SCNT11>
extern volatile __bit                   DMA2SCNT11          __at(0x1DE9B);	// @ (0x3BD3 * 8 + 3)
#define                                 DMA2SCNT11_bit      _BIT_ACCESS(DMA2SCNTH,3)
// DMA2SCNTL<DMA2SCNT2>
extern volatile __bit                   DMA2SCNT2           __at(0x1DE92);	// @ (0x3BD2 * 8 + 2)
#define                                 DMA2SCNT2_bit       _BIT_ACCESS(DMA2SCNTL,2)
// DMA2SCNTL<DMA2SCNT3>
extern volatile __bit                   DMA2SCNT3           __at(0x1DE93);	// @ (0x3BD2 * 8 + 3)
#define                                 DMA2SCNT3_bit       _BIT_ACCESS(DMA2SCNTL,3)
// DMA2SCNTL<DMA2SCNT4>
extern volatile __bit                   DMA2SCNT4           __at(0x1DE94);	// @ (0x3BD2 * 8 + 4)
#define                                 DMA2SCNT4_bit       _BIT_ACCESS(DMA2SCNTL,4)
// DMA2SCNTL<DMA2SCNT5>
extern volatile __bit                   DMA2SCNT5           __at(0x1DE95);	// @ (0x3BD2 * 8 + 5)
#define                                 DMA2SCNT5_bit       _BIT_ACCESS(DMA2SCNTL,5)
// DMA2SCNTL<DMA2SCNT6>
extern volatile __bit                   DMA2SCNT6           __at(0x1DE96);	// @ (0x3BD2 * 8 + 6)
#define                                 DMA2SCNT6_bit       _BIT_ACCESS(DMA2SCNTL,6)
// DMA2SCNTL<DMA2SCNT7>
extern volatile __bit                   DMA2SCNT7           __at(0x1DE97);	// @ (0x3BD2 * 8 + 7)
#define                                 DMA2SCNT7_bit       _BIT_ACCESS(DMA2SCNTL,7)
// DMA2SCNTH<DMA2SCNT8>
extern volatile __bit                   DMA2SCNT8           __at(0x1DE98);	// @ (0x3BD3 * 8 + 0)
#define                                 DMA2SCNT8_bit       _BIT_ACCESS(DMA2SCNTH,0)
// DMA2SCNTH<DMA2SCNT9>
extern volatile __bit                   DMA2SCNT9           __at(0x1DE99);	// @ (0x3BD3 * 8 + 1)
#define                                 DMA2SCNT9_bit       _BIT_ACCESS(DMA2SCNTH,1)
// PIE5<DMA2SCNTIE>
extern volatile __bit                   DMA2SCNTIE          __at(0x1CCAA);	// @ (0x3995 * 8 + 2)
#define                                 DMA2SCNTIE_bit      _BIT_ACCESS(PIE5,2)
// PIR5<DMA2SCNTIF>
extern volatile __bit                   DMA2SCNTIF          __at(0x1CD2A);	// @ (0x39A5 * 8 + 2)
#define                                 DMA2SCNTIF_bit      _BIT_ACCESS(PIR5,2)
// IPR5<DMA2SCNTIP>
extern volatile __bit                   DMA2SCNTIP          __at(0x1CC2A);	// @ (0x3985 * 8 + 2)
#define                                 DMA2SCNTIP_bit      _BIT_ACCESS(IPR5,2)
// DMA2SIRQ<DMA2SIRQ0>
extern volatile __bit                   DMA2SIRQ0           __at(0x1DEF8);	// @ (0x3BDF * 8 + 0)
#define                                 DMA2SIRQ0_bit       _BIT_ACCESS(DMA2SIRQ,0)
// DMA2SIRQ<DMA2SIRQ1>
extern volatile __bit                   DMA2SIRQ1           __at(0x1DEF9);	// @ (0x3BDF * 8 + 1)
#define                                 DMA2SIRQ1_bit       _BIT_ACCESS(DMA2SIRQ,1)
// DMA2SIRQ<DMA2SIRQ2>
extern volatile __bit                   DMA2SIRQ2           __at(0x1DEFA);	// @ (0x3BDF * 8 + 2)
#define                                 DMA2SIRQ2_bit       _BIT_ACCESS(DMA2SIRQ,2)
// DMA2SIRQ<DMA2SIRQ3>
extern volatile __bit                   DMA2SIRQ3           __at(0x1DEFB);	// @ (0x3BDF * 8 + 3)
#define                                 DMA2SIRQ3_bit       _BIT_ACCESS(DMA2SIRQ,3)
// DMA2SIRQ<DMA2SIRQ4>
extern volatile __bit                   DMA2SIRQ4           __at(0x1DEFC);	// @ (0x3BDF * 8 + 4)
#define                                 DMA2SIRQ4_bit       _BIT_ACCESS(DMA2SIRQ,4)
// DMA2SIRQ<DMA2SIRQ5>
extern volatile __bit                   DMA2SIRQ5           __at(0x1DEFD);	// @ (0x3BDF * 8 + 5)
#define                                 DMA2SIRQ5_bit       _BIT_ACCESS(DMA2SIRQ,5)
// DMA2SIRQ<DMA2SIRQ6>
extern volatile __bit                   DMA2SIRQ6           __at(0x1DEFE);	// @ (0x3BDF * 8 + 6)
#define                                 DMA2SIRQ6_bit       _BIT_ACCESS(DMA2SIRQ,6)
// DMA2CON0<DMA2SIRQEN>
extern volatile __bit                   DMA2SIRQEN          __at(0x1DEE6);	// @ (0x3BDC * 8 + 6)
#define                                 DMA2SIRQEN_bit      _BIT_ACCESS(DMA2CON0,6)
// DMA2SPTRL<DMA2SPTR0>
extern volatile __bit                   DMA2SPTR0           __at(0x1DEA0);	// @ (0x3BD4 * 8 + 0)
#define                                 DMA2SPTR0_bit       _BIT_ACCESS(DMA2SPTRL,0)
// DMA2SPTRL<DMA2SPTR1>
extern volatile __bit                   DMA2SPTR1           __at(0x1DEA1);	// @ (0x3BD4 * 8 + 1)
#define                                 DMA2SPTR1_bit       _BIT_ACCESS(DMA2SPTRL,1)
// DMA2SPTRH<DMA2SPTR10>
extern volatile __bit                   DMA2SPTR10          __at(0x1DEAA);	// @ (0x3BD5 * 8 + 2)
#define                                 DMA2SPTR10_bit      _BIT_ACCESS(DMA2SPTRH,2)
// DMA2SPTRH<DMA2SPTR11>
extern volatile __bit                   DMA2SPTR11          __at(0x1DEAB);	// @ (0x3BD5 * 8 + 3)
#define                                 DMA2SPTR11_bit      _BIT_ACCESS(DMA2SPTRH,3)
// DMA2SPTRH<DMA2SPTR12>
extern volatile __bit                   DMA2SPTR12          __at(0x1DEAC);	// @ (0x3BD5 * 8 + 4)
#define                                 DMA2SPTR12_bit      _BIT_ACCESS(DMA2SPTRH,4)
// DMA2SPTRH<DMA2SPTR13>
extern volatile __bit                   DMA2SPTR13          __at(0x1DEAD);	// @ (0x3BD5 * 8 + 5)
#define                                 DMA2SPTR13_bit      _BIT_ACCESS(DMA2SPTRH,5)
// DMA2SPTRH<DMA2SPTR14>
extern volatile __bit                   DMA2SPTR14          __at(0x1DEAE);	// @ (0x3BD5 * 8 + 6)
#define                                 DMA2SPTR14_bit      _BIT_ACCESS(DMA2SPTRH,6)
// DMA2SPTRH<DMA2SPTR15>
extern volatile __bit                   DMA2SPTR15          __at(0x1DEAF);	// @ (0x3BD5 * 8 + 7)
#define                                 DMA2SPTR15_bit      _BIT_ACCESS(DMA2SPTRH,7)
// DMA2SPTRU<DMA2SPTR16>
extern volatile __bit                   DMA2SPTR16          __at(0x1DEB0);	// @ (0x3BD6 * 8 + 0)
#define                                 DMA2SPTR16_bit      _BIT_ACCESS(DMA2SPTRU,0)
// DMA2SPTRU<DMA2SPTR17>
extern volatile __bit                   DMA2SPTR17          __at(0x1DEB1);	// @ (0x3BD6 * 8 + 1)
#define                                 DMA2SPTR17_bit      _BIT_ACCESS(DMA2SPTRU,1)
// DMA2SPTRU<DMA2SPTR18>
extern volatile __bit                   DMA2SPTR18          __at(0x1DEB2);	// @ (0x3BD6 * 8 + 2)
#define                                 DMA2SPTR18_bit      _BIT_ACCESS(DMA2SPTRU,2)
// DMA2SPTRU<DMA2SPTR19>
extern volatile __bit                   DMA2SPTR19          __at(0x1DEB3);	// @ (0x3BD6 * 8 + 3)
#define                                 DMA2SPTR19_bit      _BIT_ACCESS(DMA2SPTRU,3)
// DMA2SPTRL<DMA2SPTR2>
extern volatile __bit                   DMA2SPTR2           __at(0x1DEA2);	// @ (0x3BD4 * 8 + 2)
#define                                 DMA2SPTR2_bit       _BIT_ACCESS(DMA2SPTRL,2)
// DMA2SPTRU<DMA2SPTR20>
extern volatile __bit                   DMA2SPTR20          __at(0x1DEB4);	// @ (0x3BD6 * 8 + 4)
#define                                 DMA2SPTR20_bit      _BIT_ACCESS(DMA2SPTRU,4)
// DMA2SPTRU<DMA2SPTR21>
extern volatile __bit                   DMA2SPTR21          __at(0x1DEB5);	// @ (0x3BD6 * 8 + 5)
#define                                 DMA2SPTR21_bit      _BIT_ACCESS(DMA2SPTRU,5)
// DMA2SPTRL<DMA2SPTR3>
extern volatile __bit                   DMA2SPTR3           __at(0x1DEA3);	// @ (0x3BD4 * 8 + 3)
#define                                 DMA2SPTR3_bit       _BIT_ACCESS(DMA2SPTRL,3)
// DMA2SPTRL<DMA2SPTR4>
extern volatile __bit                   DMA2SPTR4           __at(0x1DEA4);	// @ (0x3BD4 * 8 + 4)
#define                                 DMA2SPTR4_bit       _BIT_ACCESS(DMA2SPTRL,4)
// DMA2SPTRL<DMA2SPTR5>
extern volatile __bit                   DMA2SPTR5           __at(0x1DEA5);	// @ (0x3BD4 * 8 + 5)
#define                                 DMA2SPTR5_bit       _BIT_ACCESS(DMA2SPTRL,5)
// DMA2SPTRL<DMA2SPTR6>
extern volatile __bit                   DMA2SPTR6           __at(0x1DEA6);	// @ (0x3BD4 * 8 + 6)
#define                                 DMA2SPTR6_bit       _BIT_ACCESS(DMA2SPTRL,6)
// DMA2SPTRL<DMA2SPTR7>
extern volatile __bit                   DMA2SPTR7           __at(0x1DEA7);	// @ (0x3BD4 * 8 + 7)
#define                                 DMA2SPTR7_bit       _BIT_ACCESS(DMA2SPTRL,7)
// DMA2SPTRH<DMA2SPTR8>
extern volatile __bit                   DMA2SPTR8           __at(0x1DEA8);	// @ (0x3BD5 * 8 + 0)
#define                                 DMA2SPTR8_bit       _BIT_ACCESS(DMA2SPTRH,0)
// DMA2SPTRH<DMA2SPTR9>
extern volatile __bit                   DMA2SPTR9           __at(0x1DEA9);	// @ (0x3BD5 * 8 + 1)
#define                                 DMA2SPTR9_bit       _BIT_ACCESS(DMA2SPTRH,1)
// DMA2SSAL<DMA2SSA0>
extern volatile __bit                   DMA2SSA0            __at(0x1DEC8);	// @ (0x3BD9 * 8 + 0)
#define                                 DMA2SSA0_bit        _BIT_ACCESS(DMA2SSAL,0)
// DMA2SSAL<DMA2SSA1>
extern volatile __bit                   DMA2SSA1            __at(0x1DEC9);	// @ (0x3BD9 * 8 + 1)
#define                                 DMA2SSA1_bit        _BIT_ACCESS(DMA2SSAL,1)
// DMA2SSAH<DMA2SSA10>
extern volatile __bit                   DMA2SSA10           __at(0x1DED2);	// @ (0x3BDA * 8 + 2)
#define                                 DMA2SSA10_bit       _BIT_ACCESS(DMA2SSAH,2)
// DMA2SSAH<DMA2SSA11>
extern volatile __bit                   DMA2SSA11           __at(0x1DED3);	// @ (0x3BDA * 8 + 3)
#define                                 DMA2SSA11_bit       _BIT_ACCESS(DMA2SSAH,3)
// DMA2SSAH<DMA2SSA12>
extern volatile __bit                   DMA2SSA12           __at(0x1DED4);	// @ (0x3BDA * 8 + 4)
#define                                 DMA2SSA12_bit       _BIT_ACCESS(DMA2SSAH,4)
// DMA2SSAH<DMA2SSA13>
extern volatile __bit                   DMA2SSA13           __at(0x1DED5);	// @ (0x3BDA * 8 + 5)
#define                                 DMA2SSA13_bit       _BIT_ACCESS(DMA2SSAH,5)
// DMA2SSAH<DMA2SSA14>
extern volatile __bit                   DMA2SSA14           __at(0x1DED6);	// @ (0x3BDA * 8 + 6)
#define                                 DMA2SSA14_bit       _BIT_ACCESS(DMA2SSAH,6)
// DMA2SSAH<DMA2SSA15>
extern volatile __bit                   DMA2SSA15           __at(0x1DED7);	// @ (0x3BDA * 8 + 7)
#define                                 DMA2SSA15_bit       _BIT_ACCESS(DMA2SSAH,7)
// DMA2SSAU<DMA2SSA16>
extern volatile __bit                   DMA2SSA16           __at(0x1DED8);	// @ (0x3BDB * 8 + 0)
#define                                 DMA2SSA16_bit       _BIT_ACCESS(DMA2SSAU,0)
// DMA2SSAU<DMA2SSA17>
extern volatile __bit                   DMA2SSA17           __at(0x1DED9);	// @ (0x3BDB * 8 + 1)
#define                                 DMA2SSA17_bit       _BIT_ACCESS(DMA2SSAU,1)
// DMA2SSAU<DMA2SSA18>
extern volatile __bit                   DMA2SSA18           __at(0x1DEDA);	// @ (0x3BDB * 8 + 2)
#define                                 DMA2SSA18_bit       _BIT_ACCESS(DMA2SSAU,2)
// DMA2SSAU<DMA2SSA19>
extern volatile __bit                   DMA2SSA19           __at(0x1DEDB);	// @ (0x3BDB * 8 + 3)
#define                                 DMA2SSA19_bit       _BIT_ACCESS(DMA2SSAU,3)
// DMA2SSAL<DMA2SSA2>
extern volatile __bit                   DMA2SSA2            __at(0x1DECA);	// @ (0x3BD9 * 8 + 2)
#define                                 DMA2SSA2_bit        _BIT_ACCESS(DMA2SSAL,2)
// DMA2SSAU<DMA2SSA20>
extern volatile __bit                   DMA2SSA20           __at(0x1DEDC);	// @ (0x3BDB * 8 + 4)
#define                                 DMA2SSA20_bit       _BIT_ACCESS(DMA2SSAU,4)
// DMA2SSAU<DMA2SSA21>
extern volatile __bit                   DMA2SSA21           __at(0x1DEDD);	// @ (0x3BDB * 8 + 5)
#define                                 DMA2SSA21_bit       _BIT_ACCESS(DMA2SSAU,5)
// DMA2SSAL<DMA2SSA3>
extern volatile __bit                   DMA2SSA3            __at(0x1DECB);	// @ (0x3BD9 * 8 + 3)
#define                                 DMA2SSA3_bit        _BIT_ACCESS(DMA2SSAL,3)
// DMA2SSAL<DMA2SSA4>
extern volatile __bit                   DMA2SSA4            __at(0x1DECC);	// @ (0x3BD9 * 8 + 4)
#define                                 DMA2SSA4_bit        _BIT_ACCESS(DMA2SSAL,4)
// DMA2SSAL<DMA2SSA5>
extern volatile __bit                   DMA2SSA5            __at(0x1DECD);	// @ (0x3BD9 * 8 + 5)
#define                                 DMA2SSA5_bit        _BIT_ACCESS(DMA2SSAL,5)
// DMA2SSAL<DMA2SSA6>
extern volatile __bit                   DMA2SSA6            __at(0x1DECE);	// @ (0x3BD9 * 8 + 6)
#define                                 DMA2SSA6_bit        _BIT_ACCESS(DMA2SSAL,6)
// DMA2SSAL<DMA2SSA7>
extern volatile __bit                   DMA2SSA7            __at(0x1DECF);	// @ (0x3BD9 * 8 + 7)
#define                                 DMA2SSA7_bit        _BIT_ACCESS(DMA2SSAL,7)
// DMA2SSAH<DMA2SSA8>
extern volatile __bit                   DMA2SSA8            __at(0x1DED0);	// @ (0x3BDA * 8 + 0)
#define                                 DMA2SSA8_bit        _BIT_ACCESS(DMA2SSAH,0)
// DMA2SSAH<DMA2SSA9>
extern volatile __bit                   DMA2SSA9            __at(0x1DED1);	// @ (0x3BDA * 8 + 1)
#define                                 DMA2SSA9_bit        _BIT_ACCESS(DMA2SSAH,1)
// DMA2SSZL<DMA2SSZ0>
extern volatile __bit                   DMA2SSZ0            __at(0x1DEB8);	// @ (0x3BD7 * 8 + 0)
#define                                 DMA2SSZ0_bit        _BIT_ACCESS(DMA2SSZL,0)
// DMA2SSZL<DMA2SSZ1>
extern volatile __bit                   DMA2SSZ1            __at(0x1DEB9);	// @ (0x3BD7 * 8 + 1)
#define                                 DMA2SSZ1_bit        _BIT_ACCESS(DMA2SSZL,1)
// DMA2SSZH<DMA2SSZ10>
extern volatile __bit                   DMA2SSZ10           __at(0x1DEC2);	// @ (0x3BD8 * 8 + 2)
#define                                 DMA2SSZ10_bit       _BIT_ACCESS(DMA2SSZH,2)
// DMA2SSZH<DMA2SSZ11>
extern volatile __bit                   DMA2SSZ11           __at(0x1DEC3);	// @ (0x3BD8 * 8 + 3)
#define                                 DMA2SSZ11_bit       _BIT_ACCESS(DMA2SSZH,3)
// DMA2SSZL<DMA2SSZ2>
extern volatile __bit                   DMA2SSZ2            __at(0x1DEBA);	// @ (0x3BD7 * 8 + 2)
#define                                 DMA2SSZ2_bit        _BIT_ACCESS(DMA2SSZL,2)
// DMA2SSZL<DMA2SSZ3>
extern volatile __bit                   DMA2SSZ3            __at(0x1DEBB);	// @ (0x3BD7 * 8 + 3)
#define                                 DMA2SSZ3_bit        _BIT_ACCESS(DMA2SSZL,3)
// DMA2SSZL<DMA2SSZ4>
extern volatile __bit                   DMA2SSZ4            __at(0x1DEBC);	// @ (0x3BD7 * 8 + 4)
#define                                 DMA2SSZ4_bit        _BIT_ACCESS(DMA2SSZL,4)
// DMA2SSZL<DMA2SSZ5>
extern volatile __bit                   DMA2SSZ5            __at(0x1DEBD);	// @ (0x3BD7 * 8 + 5)
#define                                 DMA2SSZ5_bit        _BIT_ACCESS(DMA2SSZL,5)
// DMA2SSZL<DMA2SSZ6>
extern volatile __bit                   DMA2SSZ6            __at(0x1DEBE);	// @ (0x3BD7 * 8 + 6)
#define                                 DMA2SSZ6_bit        _BIT_ACCESS(DMA2SSZL,6)
// DMA2SSZL<DMA2SSZ7>
extern volatile __bit                   DMA2SSZ7            __at(0x1DEBF);	// @ (0x3BD7 * 8 + 7)
#define                                 DMA2SSZ7_bit        _BIT_ACCESS(DMA2SSZL,7)
// DMA2SSZH<DMA2SSZ8>
extern volatile __bit                   DMA2SSZ8            __at(0x1DEC0);	// @ (0x3BD8 * 8 + 0)
#define                                 DMA2SSZ8_bit        _BIT_ACCESS(DMA2SSZH,0)
// DMA2SSZH<DMA2SSZ9>
extern volatile __bit                   DMA2SSZ9            __at(0x1DEC1);	// @ (0x3BD8 * 8 + 1)
#define                                 DMA2SSZ9_bit        _BIT_ACCESS(DMA2SSZH,1)
// DMA2CON0<DMA2XIP>
extern volatile __bit                   DMA2XIP             __at(0x1DEE0);	// @ (0x3BDC * 8 + 0)
#define                                 DMA2XIP_bit         _BIT_ACCESS(DMA2CON0,0)
// CPUDOZE<DOE>
extern volatile __bit                   DOE                 __at(0x1CEC4);	// @ (0x39D8 * 8 + 4)
#define                                 DOE_bit             _BIT_ACCESS(CPUDOZE,4)
// ADCON0<DONE>
extern volatile __bit                   DONE                __at(0x1F7C0);	// @ (0x3EF8 * 8 + 0)
#define                                 DONE_bit            _BIT_ACCESS(ADCON0,0)
// CPUDOZE<DOZE0>
extern volatile __bit                   DOZE0               __at(0x1CEC0);	// @ (0x39D8 * 8 + 0)
#define                                 DOZE0_bit           _BIT_ACCESS(CPUDOZE,0)
// CPUDOZE<DOZE1>
extern volatile __bit                   DOZE1               __at(0x1CEC1);	// @ (0x39D8 * 8 + 1)
#define                                 DOZE1_bit           _BIT_ACCESS(CPUDOZE,1)
// CPUDOZE<DOZE2>
extern volatile __bit                   DOZE2               __at(0x1CEC2);	// @ (0x39D8 * 8 + 2)
#define                                 DOZE2_bit           _BIT_ACCESS(CPUDOZE,2)
// CPUDOZE<DOZEN>
extern volatile __bit                   DOZEN               __at(0x1CEC6);	// @ (0x39D8 * 8 + 6)
#define                                 DOZEN_bit           _BIT_ACCESS(CPUDOZE,6)
// ADCON1<DSEN>
extern volatile __bit                   DSEN                __at(0x1F7C8);	// @ (0x3EF9 * 8 + 0)
#define                                 DSEN_bit            _BIT_ACCESS(ADCON1,0)
// PMD6<DSMMD>
extern volatile __bit                   DSMMD               __at(0x1CE30);	// @ (0x39C6 * 8 + 0)
#define                                 DSMMD_bit           _BIT_ACCESS(PMD6,0)
// SPI1INTE<EOSIE>
extern volatile __bit                   EOSIE               __at(0x1E8DC);	// @ (0x3D1B * 8 + 4)
#define                                 EOSIE_bit           _BIT_ACCESS(SPI1INTE,4)
// SPI1INTF<EOSIF>
extern volatile __bit                   EOSIF               __at(0x1E8D4);	// @ (0x3D1A * 8 + 4)
#define                                 EOSIF_bit           _BIT_ACCESS(SPI1INTF,4)
// ADERRL<ERR0>
extern volatile __bit                   ERR0                __at(0x1F710);	// @ (0x3EE2 * 8 + 0)
#define                                 ERR0_bit            _BIT_ACCESS(ADERRL,0)
// ADERRL<ERR1>
extern volatile __bit                   ERR1                __at(0x1F711);	// @ (0x3EE2 * 8 + 1)
#define                                 ERR1_bit            _BIT_ACCESS(ADERRL,1)
// ADERRH<ERR10>
extern volatile __bit                   ERR10               __at(0x1F71A);	// @ (0x3EE3 * 8 + 2)
#define                                 ERR10_bit           _BIT_ACCESS(ADERRH,2)
// ADERRH<ERR11>
extern volatile __bit                   ERR11               __at(0x1F71B);	// @ (0x3EE3 * 8 + 3)
#define                                 ERR11_bit           _BIT_ACCESS(ADERRH,3)
// ADERRH<ERR12>
extern volatile __bit                   ERR12               __at(0x1F71C);	// @ (0x3EE3 * 8 + 4)
#define                                 ERR12_bit           _BIT_ACCESS(ADERRH,4)
// ADERRH<ERR13>
extern volatile __bit                   ERR13               __at(0x1F71D);	// @ (0x3EE3 * 8 + 5)
#define                                 ERR13_bit           _BIT_ACCESS(ADERRH,5)
// ADERRH<ERR14>
extern volatile __bit                   ERR14               __at(0x1F71E);	// @ (0x3EE3 * 8 + 6)
#define                                 ERR14_bit           _BIT_ACCESS(ADERRH,6)
// ADERRH<ERR15>
extern volatile __bit                   ERR15               __at(0x1F71F);	// @ (0x3EE3 * 8 + 7)
#define                                 ERR15_bit           _BIT_ACCESS(ADERRH,7)
// ADERRL<ERR2>
extern volatile __bit                   ERR2                __at(0x1F712);	// @ (0x3EE2 * 8 + 2)
#define                                 ERR2_bit            _BIT_ACCESS(ADERRL,2)
// ADERRL<ERR3>
extern volatile __bit                   ERR3                __at(0x1F713);	// @ (0x3EE2 * 8 + 3)
#define                                 ERR3_bit            _BIT_ACCESS(ADERRL,3)
// ADERRL<ERR4>
extern volatile __bit                   ERR4                __at(0x1F714);	// @ (0x3EE2 * 8 + 4)
#define                                 ERR4_bit            _BIT_ACCESS(ADERRL,4)
// ADERRL<ERR5>
extern volatile __bit                   ERR5                __at(0x1F715);	// @ (0x3EE2 * 8 + 5)
#define                                 ERR5_bit            _BIT_ACCESS(ADERRL,5)
// ADERRL<ERR6>
extern volatile __bit                   ERR6                __at(0x1F716);	// @ (0x3EE2 * 8 + 6)
#define                                 ERR6_bit            _BIT_ACCESS(ADERRL,6)
// ADERRL<ERR7>
extern volatile __bit                   ERR7                __at(0x1F717);	// @ (0x3EE2 * 8 + 7)
#define                                 ERR7_bit            _BIT_ACCESS(ADERRL,7)
// ADERRH<ERR8>
extern volatile __bit                   ERR8                __at(0x1F718);	// @ (0x3EE3 * 8 + 0)
#define                                 ERR8_bit            _BIT_ACCESS(ADERRH,0)
// ADERRH<ERR9>
extern volatile __bit                   ERR9                __at(0x1F719);	// @ (0x3EE3 * 8 + 1)
#define                                 ERR9_bit            _BIT_ACCESS(ADERRH,1)
// OSCEN<EXTOEN>
extern volatile __bit                   EXTOEN              __at(0x1CEEF);	// @ (0x39DD * 8 + 7)
#define                                 EXTOEN_bit          _BIT_ACCESS(OSCEN,7)
// OSCSTAT<EXTOR>
extern volatile __bit                   EXTOR               __at(0x1CEE7);	// @ (0x39DC * 8 + 7)
#define                                 EXTOR_bit           _BIT_ACCESS(OSCSTAT,7)
// ADFLTRL<FLTR0>
extern volatile __bit                   FLTR0               __at(0x1F730);	// @ (0x3EE6 * 8 + 0)
#define                                 FLTR0_bit           _BIT_ACCESS(ADFLTRL,0)
// ADFLTRL<FLTR1>
extern volatile __bit                   FLTR1               __at(0x1F731);	// @ (0x3EE6 * 8 + 1)
#define                                 FLTR1_bit           _BIT_ACCESS(ADFLTRL,1)
// ADFLTRH<FLTR10>
extern volatile __bit                   FLTR10              __at(0x1F73A);	// @ (0x3EE7 * 8 + 2)
#define                                 FLTR10_bit          _BIT_ACCESS(ADFLTRH,2)
// ADFLTRH<FLTR11>
extern volatile __bit                   FLTR11              __at(0x1F73B);	// @ (0x3EE7 * 8 + 3)
#define                                 FLTR11_bit          _BIT_ACCESS(ADFLTRH,3)
// ADFLTRH<FLTR12>
extern volatile __bit                   FLTR12              __at(0x1F73C);	// @ (0x3EE7 * 8 + 4)
#define                                 FLTR12_bit          _BIT_ACCESS(ADFLTRH,4)
// ADFLTRH<FLTR13>
extern volatile __bit                   FLTR13              __at(0x1F73D);	// @ (0x3EE7 * 8 + 5)
#define                                 FLTR13_bit          _BIT_ACCESS(ADFLTRH,5)
// ADFLTRH<FLTR14>
extern volatile __bit                   FLTR14              __at(0x1F73E);	// @ (0x3EE7 * 8 + 6)
#define                                 FLTR14_bit          _BIT_ACCESS(ADFLTRH,6)
// ADFLTRH<FLTR15>
extern volatile __bit                   FLTR15              __at(0x1F73F);	// @ (0x3EE7 * 8 + 7)
#define                                 FLTR15_bit          _BIT_ACCESS(ADFLTRH,7)
// ADFLTRL<FLTR2>
extern volatile __bit                   FLTR2               __at(0x1F732);	// @ (0x3EE6 * 8 + 2)
#define                                 FLTR2_bit           _BIT_ACCESS(ADFLTRL,2)
// ADFLTRL<FLTR3>
extern volatile __bit                   FLTR3               __at(0x1F733);	// @ (0x3EE6 * 8 + 3)
#define                                 FLTR3_bit           _BIT_ACCESS(ADFLTRL,3)
// ADFLTRL<FLTR4>
extern volatile __bit                   FLTR4               __at(0x1F734);	// @ (0x3EE6 * 8 + 4)
#define                                 FLTR4_bit           _BIT_ACCESS(ADFLTRL,4)
// ADFLTRL<FLTR5>
extern volatile __bit                   FLTR5               __at(0x1F735);	// @ (0x3EE6 * 8 + 5)
#define                                 FLTR5_bit           _BIT_ACCESS(ADFLTRL,5)
// ADFLTRL<FLTR6>
extern volatile __bit                   FLTR6               __at(0x1F736);	// @ (0x3EE6 * 8 + 6)
#define                                 FLTR6_bit           _BIT_ACCESS(ADFLTRL,6)
// ADFLTRL<FLTR7>
extern volatile __bit                   FLTR7               __at(0x1F737);	// @ (0x3EE6 * 8 + 7)
#define                                 FLTR7_bit           _BIT_ACCESS(ADFLTRL,7)
// ADFLTRH<FLTR8>
extern volatile __bit                   FLTR8               __at(0x1F738);	// @ (0x3EE7 * 8 + 0)
#define                                 FLTR8_bit           _BIT_ACCESS(ADFLTRH,0)
// ADFLTRH<FLTR9>
extern volatile __bit                   FLTR9               __at(0x1F739);	// @ (0x3EE7 * 8 + 1)
#define                                 FLTR9_bit           _BIT_ACCESS(ADFLTRH,1)
// ADCON0<FM0>
extern volatile __bit                   FM0                 __at(0x1F7C2);	// @ (0x3EF8 * 8 + 2)
#define                                 FM0_bit             _BIT_ACCESS(ADCON0,2)
// NVMCON1<FREE>
extern volatile __bit                   FREE                __at(0x1CF2C);	// @ (0x39E5 * 8 + 4)
#define                                 FREE_bit            _BIT_ACCESS(NVMCON1,4)
// OSCFRQ<FRQ0>
extern volatile __bit                   FRQ0                __at(0x1CEF8);	// @ (0x39DF * 8 + 0)
#define                                 FRQ0_bit            _BIT_ACCESS(OSCFRQ,0)
// OSCFRQ<FRQ1>
extern volatile __bit                   FRQ1                __at(0x1CEF9);	// @ (0x39DF * 8 + 1)
#define                                 FRQ1_bit            _BIT_ACCESS(OSCFRQ,1)
// OSCFRQ<FRQ2>
extern volatile __bit                   FRQ2                __at(0x1CEFA);	// @ (0x39DF * 8 + 2)
#define                                 FRQ2_bit            _BIT_ACCESS(OSCFRQ,2)
// OSCFRQ<FRQ3>
extern volatile __bit                   FRQ3                __at(0x1CEFB);	// @ (0x39DF * 8 + 3)
#define                                 FRQ3_bit            _BIT_ACCESS(OSCFRQ,3)
// SPI1CON1<FST>
extern volatile __bit                   FST                 __at(0x1E8AC);	// @ (0x3D15 * 8 + 4)
#define                                 FST_bit             _BIT_ACCESS(SPI1CON1,4)
// CRCCON0<FULL>
extern volatile __bit                   FULL                __at(0x1CB40);	// @ (0x3968 * 8 + 0)
#define                                 FULL_bit            _BIT_ACCESS(CRCCON0,0)
// FVRCON<FVREN>
extern volatile __bit                   FVREN               __at(0x1F60F);	// @ (0x3EC1 * 8 + 7)
#define                                 FVREN_bit           _BIT_ACCESS(FVRCON,7)
// PMD0<FVRMD>
extern volatile __bit                   FVRMD               __at(0x1CE06);	// @ (0x39C0 * 8 + 6)
#define                                 FVRMD_bit           _BIT_ACCESS(PMD0,6)
// FVRCON<FVRRDY>
extern volatile __bit                   FVRRDY              __at(0x1F60E);	// @ (0x3EC1 * 8 + 6)
#define                                 FVRRDY_bit          _BIT_ACCESS(FVRCON,6)
// CWG1CON0<G1EN>
extern volatile __bit                   G1EN                __at(0x1FAB7);	// @ (0x3F56 * 8 + 7)
#define                                 G1EN_bit            _BIT_ACCESS(CWG1CON0,7)
// CWG2CON0<G2EN>
extern volatile __bit                   G2EN                __at(0x1FA6F);	// @ (0x3F4D * 8 + 7)
#define                                 G2EN_bit            _BIT_ACCESS(CWG2CON0,7)
// CWG3CON0<G3EN>
extern volatile __bit                   G3EN                __at(0x1FA27);	// @ (0x3F44 * 8 + 7)
#define                                 G3EN_bit            _BIT_ACCESS(CWG3CON0,7)
// INTCON0<GIE>
extern volatile __bit                   GIE                 __at(0x1FE97);	// @ (0x3FD2 * 8 + 7)
#define                                 GIE_bit             _BIT_ACCESS(INTCON0,7)
// INTCON0<GIEH>
extern volatile __bit                   GIEH                __at(0x1FE97);	// @ (0x3FD2 * 8 + 7)
#define                                 GIEH_bit            _BIT_ACCESS(INTCON0,7)
// INTCON0<GIEL>
extern volatile __bit                   GIEL                __at(0x1FE96);	// @ (0x3FD2 * 8 + 6)
#define                                 GIEL_bit            _BIT_ACCESS(INTCON0,6)
// ADCON0<GO_NOT_DONE>
extern volatile __bit                   GO_NOT_DONE         __at(0x1F7C0);	// @ (0x3EF8 * 8 + 0)
#define                                 GO_NOT_DONE_bit     _BIT_ACCESS(ADCON0,0)
// ADCON0<GO_nDONE>
extern volatile __bit                   GO_nDONE            __at(0x1F7C0);	// @ (0x3EF8 * 8 + 0)
#define                                 GO_nDONE_bit        _BIT_ACCESS(ADCON0,0)
// SCANHADRL<HADR0>
extern volatile __bit                   HADR0               __at(0x1CBC8);	// @ (0x3979 * 8 + 0)
#define                                 HADR0_bit           _BIT_ACCESS(SCANHADRL,0)
// SCANHADRL<HADR1>
extern volatile __bit                   HADR1               __at(0x1CBC9);	// @ (0x3979 * 8 + 1)
#define                                 HADR1_bit           _BIT_ACCESS(SCANHADRL,1)
// SCANHADRH<HADR10>
extern volatile __bit                   HADR10              __at(0x1CBD2);	// @ (0x397A * 8 + 2)
#define                                 HADR10_bit          _BIT_ACCESS(SCANHADRH,2)
// SCANHADRH<HADR11>
extern volatile __bit                   HADR11              __at(0x1CBD3);	// @ (0x397A * 8 + 3)
#define                                 HADR11_bit          _BIT_ACCESS(SCANHADRH,3)
// SCANHADRH<HADR12>
extern volatile __bit                   HADR12              __at(0x1CBD4);	// @ (0x397A * 8 + 4)
#define                                 HADR12_bit          _BIT_ACCESS(SCANHADRH,4)
// SCANHADRH<HADR13>
extern volatile __bit                   HADR13              __at(0x1CBD5);	// @ (0x397A * 8 + 5)
#define                                 HADR13_bit          _BIT_ACCESS(SCANHADRH,5)
// SCANHADRH<HADR14>
extern volatile __bit                   HADR14              __at(0x1CBD6);	// @ (0x397A * 8 + 6)
#define                                 HADR14_bit          _BIT_ACCESS(SCANHADRH,6)
// SCANHADRH<HADR15>
extern volatile __bit                   HADR15              __at(0x1CBD7);	// @ (0x397A * 8 + 7)
#define                                 HADR15_bit          _BIT_ACCESS(SCANHADRH,7)
// SCANHADRU<HADR16>
extern volatile __bit                   HADR16              __at(0x1CBD8);	// @ (0x397B * 8 + 0)
#define                                 HADR16_bit          _BIT_ACCESS(SCANHADRU,0)
// SCANHADRU<HADR17>
extern volatile __bit                   HADR17              __at(0x1CBD9);	// @ (0x397B * 8 + 1)
#define                                 HADR17_bit          _BIT_ACCESS(SCANHADRU,1)
// SCANHADRU<HADR18>
extern volatile __bit                   HADR18              __at(0x1CBDA);	// @ (0x397B * 8 + 2)
#define                                 HADR18_bit          _BIT_ACCESS(SCANHADRU,2)
// SCANHADRU<HADR19>
extern volatile __bit                   HADR19              __at(0x1CBDB);	// @ (0x397B * 8 + 3)
#define                                 HADR19_bit          _BIT_ACCESS(SCANHADRU,3)
// SCANHADRL<HADR2>
extern volatile __bit                   HADR2               __at(0x1CBCA);	// @ (0x3979 * 8 + 2)
#define                                 HADR2_bit           _BIT_ACCESS(SCANHADRL,2)
// SCANHADRU<HADR20>
extern volatile __bit                   HADR20              __at(0x1CBDC);	// @ (0x397B * 8 + 4)
#define                                 HADR20_bit          _BIT_ACCESS(SCANHADRU,4)
// SCANHADRU<HADR21>
extern volatile __bit                   HADR21              __at(0x1CBDD);	// @ (0x397B * 8 + 5)
#define                                 HADR21_bit          _BIT_ACCESS(SCANHADRU,5)
// SCANHADRL<HADR3>
extern volatile __bit                   HADR3               __at(0x1CBCB);	// @ (0x3979 * 8 + 3)
#define                                 HADR3_bit           _BIT_ACCESS(SCANHADRL,3)
// SCANHADRL<HADR4>
extern volatile __bit                   HADR4               __at(0x1CBCC);	// @ (0x3979 * 8 + 4)
#define                                 HADR4_bit           _BIT_ACCESS(SCANHADRL,4)
// SCANHADRL<HADR5>
extern volatile __bit                   HADR5               __at(0x1CBCD);	// @ (0x3979 * 8 + 5)
#define                                 HADR5_bit           _BIT_ACCESS(SCANHADRL,5)
// SCANHADRL<HADR6>
extern volatile __bit                   HADR6               __at(0x1CBCE);	// @ (0x3979 * 8 + 6)
#define                                 HADR6_bit           _BIT_ACCESS(SCANHADRL,6)
// SCANHADRL<HADR7>
extern volatile __bit                   HADR7               __at(0x1CBCF);	// @ (0x3979 * 8 + 7)
#define                                 HADR7_bit           _BIT_ACCESS(SCANHADRL,7)
// SCANHADRH<HADR8>
extern volatile __bit                   HADR8               __at(0x1CBD0);	// @ (0x397A * 8 + 0)
#define                                 HADR8_bit           _BIT_ACCESS(SCANHADRH,0)
// SCANHADRH<HADR9>
extern volatile __bit                   HADR9               __at(0x1CBD1);	// @ (0x397A * 8 + 1)
#define                                 HADR9_bit           _BIT_ACCESS(SCANHADRH,1)
// OSCFRQ<HFFRQ0>
extern volatile __bit                   HFFRQ0              __at(0x1CEF8);	// @ (0x39DF * 8 + 0)
#define                                 HFFRQ0_bit          _BIT_ACCESS(OSCFRQ,0)
// OSCFRQ<HFFRQ1>
extern volatile __bit                   HFFRQ1              __at(0x1CEF9);	// @ (0x39DF * 8 + 1)
#define                                 HFFRQ1_bit          _BIT_ACCESS(OSCFRQ,1)
// OSCFRQ<HFFRQ2>
extern volatile __bit                   HFFRQ2              __at(0x1CEFA);	// @ (0x39DF * 8 + 2)
#define                                 HFFRQ2_bit          _BIT_ACCESS(OSCFRQ,2)
// OSCFRQ<HFFRQ3>
extern volatile __bit                   HFFRQ3              __at(0x1CEFB);	// @ (0x39DF * 8 + 3)
#define                                 HFFRQ3_bit          _BIT_ACCESS(OSCFRQ,3)
// OSCEN<HFOEN>
extern volatile __bit                   HFOEN               __at(0x1CEEE);	// @ (0x39DD * 8 + 6)
#define                                 HFOEN_bit           _BIT_ACCESS(OSCEN,6)
// OSCSTAT<HFOR>
extern volatile __bit                   HFOR                __at(0x1CEE6);	// @ (0x39DC * 8 + 6)
#define                                 HFOR_bit            _BIT_ACCESS(OSCSTAT,6)
// OSCTUNE<HFTUN0>
extern volatile __bit                   HFTUN0              __at(0x1CEF0);	// @ (0x39DE * 8 + 0)
#define                                 HFTUN0_bit          _BIT_ACCESS(OSCTUNE,0)
// OSCTUNE<HFTUN1>
extern volatile __bit                   HFTUN1              __at(0x1CEF1);	// @ (0x39DE * 8 + 1)
#define                                 HFTUN1_bit          _BIT_ACCESS(OSCTUNE,1)
// OSCTUNE<HFTUN2>
extern volatile __bit                   HFTUN2              __at(0x1CEF2);	// @ (0x39DE * 8 + 2)
#define                                 HFTUN2_bit          _BIT_ACCESS(OSCTUNE,2)
// OSCTUNE<HFTUN3>
extern volatile __bit                   HFTUN3              __at(0x1CEF3);	// @ (0x39DE * 8 + 3)
#define                                 HFTUN3_bit          _BIT_ACCESS(OSCTUNE,3)
// OSCTUNE<HFTUN4>
extern volatile __bit                   HFTUN4              __at(0x1CEF4);	// @ (0x39DE * 8 + 4)
#define                                 HFTUN4_bit          _BIT_ACCESS(OSCTUNE,4)
// OSCTUNE<HFTUN5>
extern volatile __bit                   HFTUN5              __at(0x1CEF5);	// @ (0x39DE * 8 + 5)
#define                                 HFTUN5_bit          _BIT_ACCESS(OSCTUNE,5)
// HLVDCON0<HLVDEN>
extern volatile __bit                   HLVDEN              __at(0x1F64F);	// @ (0x3EC9 * 8 + 7)
#define                                 HLVDEN_bit          _BIT_ACCESS(HLVDCON0,7)
// PIE0<HLVDIE>
extern volatile __bit                   HLVDIE              __at(0x1CC81);	// @ (0x3990 * 8 + 1)
#define                                 HLVDIE_bit          _BIT_ACCESS(PIE0,1)
// PIR0<HLVDIF>
extern volatile __bit                   HLVDIF              __at(0x1CD01);	// @ (0x39A0 * 8 + 1)
#define                                 HLVDIF_bit          _BIT_ACCESS(PIR0,1)
// HLVDCON0<HLVDINTH>
extern volatile __bit                   HLVDINTH            __at(0x1F649);	// @ (0x3EC9 * 8 + 1)
#define                                 HLVDINTH_bit        _BIT_ACCESS(HLVDCON0,1)
// HLVDCON0<HLVDINTL>
extern volatile __bit                   HLVDINTL            __at(0x1F648);	// @ (0x3EC9 * 8 + 0)
#define                                 HLVDINTL_bit        _BIT_ACCESS(HLVDCON0,0)
// IPR0<HLVDIP>
extern volatile __bit                   HLVDIP              __at(0x1CC01);	// @ (0x3980 * 8 + 1)
#define                                 HLVDIP_bit          _BIT_ACCESS(IPR0,1)
// PMD0<HLVDMD>
extern volatile __bit                   HLVDMD              __at(0x1CE05);	// @ (0x39C0 * 8 + 5)
#define                                 HLVDMD_bit          _BIT_ACCESS(PMD0,5)
// HLVDCON0<HLVDOUT>
extern volatile __bit                   HLVDOUT             __at(0x1F64D);	// @ (0x3EC9 * 8 + 5)
#define                                 HLVDOUT_bit         _BIT_ACCESS(HLVDCON0,5)
// HLVDCON0<HLVDRDY>
extern volatile __bit                   HLVDRDY             __at(0x1F64C);	// @ (0x3EC9 * 8 + 4)
#define                                 HLVDRDY_bit         _BIT_ACCESS(HLVDCON0,4)
// HLVDCON1<HLVDSEL0>
extern volatile __bit                   HLVDSEL0            __at(0x1F650);	// @ (0x3ECA * 8 + 0)
#define                                 HLVDSEL0_bit        _BIT_ACCESS(HLVDCON1,0)
// HLVDCON1<HLVDSEL1>
extern volatile __bit                   HLVDSEL1            __at(0x1F651);	// @ (0x3ECA * 8 + 1)
#define                                 HLVDSEL1_bit        _BIT_ACCESS(HLVDCON1,1)
// HLVDCON1<HLVDSEL2>
extern volatile __bit                   HLVDSEL2            __at(0x1F652);	// @ (0x3ECA * 8 + 2)
#define                                 HLVDSEL2_bit        _BIT_ACCESS(HLVDCON1,2)
// HLVDCON1<HLVDSEL3>
extern volatile __bit                   HLVDSEL3            __at(0x1F653);	// @ (0x3ECA * 8 + 3)
#define                                 HLVDSEL3_bit        _BIT_ACCESS(HLVDCON1,3)
// PIE3<I2C1EIE>
extern volatile __bit                   I2C1EIE             __at(0x1CC9A);	// @ (0x3993 * 8 + 2)
#define                                 I2C1EIE_bit         _BIT_ACCESS(PIE3,2)
// PIR3<I2C1EIF>
extern volatile __bit                   I2C1EIF             __at(0x1CD1A);	// @ (0x39A3 * 8 + 2)
#define                                 I2C1EIF_bit         _BIT_ACCESS(PIR3,2)
// IPR3<I2C1EIP>
extern volatile __bit                   I2C1EIP             __at(0x1CC1A);	// @ (0x3983 * 8 + 2)
#define                                 I2C1EIP_bit         _BIT_ACCESS(IPR3,2)
// PIE3<I2C1IE>
extern volatile __bit                   I2C1IE              __at(0x1CC99);	// @ (0x3993 * 8 + 1)
#define                                 I2C1IE_bit          _BIT_ACCESS(PIE3,1)
// PIR3<I2C1IF>
extern volatile __bit                   I2C1IF              __at(0x1CD19);	// @ (0x39A3 * 8 + 1)
#define                                 I2C1IF_bit          _BIT_ACCESS(PIR3,1)
// IPR3<I2C1IP>
extern volatile __bit                   I2C1IP              __at(0x1CC19);	// @ (0x3983 * 8 + 1)
#define                                 I2C1IP_bit          _BIT_ACCESS(IPR3,1)
// PMD5<I2C1MD>
extern volatile __bit                   I2C1MD              __at(0x1CE28);	// @ (0x39C5 * 8 + 0)
#define                                 I2C1MD_bit          _BIT_ACCESS(PMD5,0)
// PIE2<I2C1RXIE>
extern volatile __bit                   I2C1RXIE            __at(0x1CC97);	// @ (0x3992 * 8 + 7)
#define                                 I2C1RXIE_bit        _BIT_ACCESS(PIE2,7)
// PIR2<I2C1RXIF>
extern volatile __bit                   I2C1RXIF            __at(0x1CD17);	// @ (0x39A2 * 8 + 7)
#define                                 I2C1RXIF_bit        _BIT_ACCESS(PIR2,7)
// IPR2<I2C1RXIP>
extern volatile __bit                   I2C1RXIP            __at(0x1CC17);	// @ (0x3982 * 8 + 7)
#define                                 I2C1RXIP_bit        _BIT_ACCESS(IPR2,7)
// PIE3<I2C1TXIE>
extern volatile __bit                   I2C1TXIE            __at(0x1CC98);	// @ (0x3993 * 8 + 0)
#define                                 I2C1TXIE_bit        _BIT_ACCESS(PIE3,0)
// PIR3<I2C1TXIF>
extern volatile __bit                   I2C1TXIF            __at(0x1CD18);	// @ (0x39A3 * 8 + 0)
#define                                 I2C1TXIF_bit        _BIT_ACCESS(PIR3,0)
// IPR3<I2C1TXIP>
extern volatile __bit                   I2C1TXIP            __at(0x1CC18);	// @ (0x3983 * 8 + 0)
#define                                 I2C1TXIP_bit        _BIT_ACCESS(IPR3,0)
// PIE6<I2C2EIE>
extern volatile __bit                   I2C2EIE             __at(0x1CCB1);	// @ (0x3996 * 8 + 1)
#define                                 I2C2EIE_bit         _BIT_ACCESS(PIE6,1)
// PIR6<I2C2EIF>
extern volatile __bit                   I2C2EIF             __at(0x1CD31);	// @ (0x39A6 * 8 + 1)
#define                                 I2C2EIF_bit         _BIT_ACCESS(PIR6,1)
// IPR6<I2C2EIP>
extern volatile __bit                   I2C2EIP             __at(0x1CC31);	// @ (0x3986 * 8 + 1)
#define                                 I2C2EIP_bit         _BIT_ACCESS(IPR6,1)
// PIE6<I2C2IE>
extern volatile __bit                   I2C2IE              __at(0x1CCB0);	// @ (0x3996 * 8 + 0)
#define                                 I2C2IE_bit          _BIT_ACCESS(PIE6,0)
// PIR6<I2C2IF>
extern volatile __bit                   I2C2IF              __at(0x1CD30);	// @ (0x39A6 * 8 + 0)
#define                                 I2C2IF_bit          _BIT_ACCESS(PIR6,0)
// IPR6<I2C2IP>
extern volatile __bit                   I2C2IP              __at(0x1CC30);	// @ (0x3986 * 8 + 0)
#define                                 I2C2IP_bit          _BIT_ACCESS(IPR6,0)
// PMD5<I2C2MD>
extern volatile __bit                   I2C2MD              __at(0x1CE29);	// @ (0x39C5 * 8 + 1)
#define                                 I2C2MD_bit          _BIT_ACCESS(PMD5,1)
// PIE5<I2C2RXIE>
extern volatile __bit                   I2C2RXIE            __at(0x1CCAE);	// @ (0x3995 * 8 + 6)
#define                                 I2C2RXIE_bit        _BIT_ACCESS(PIE5,6)
// PIR5<I2C2RXIF>
extern volatile __bit                   I2C2RXIF            __at(0x1CD2E);	// @ (0x39A5 * 8 + 6)
#define                                 I2C2RXIF_bit        _BIT_ACCESS(PIR5,6)
// IPR5<I2C2RXIP>
extern volatile __bit                   I2C2RXIP            __at(0x1CC2E);	// @ (0x3985 * 8 + 6)
#define                                 I2C2RXIP_bit        _BIT_ACCESS(IPR5,6)
// PIE5<I2C2TXIE>
extern volatile __bit                   I2C2TXIE            __at(0x1CCAF);	// @ (0x3995 * 8 + 7)
#define                                 I2C2TXIE_bit        _BIT_ACCESS(PIE5,7)
// PIR5<I2C2TXIF>
extern volatile __bit                   I2C2TXIF            __at(0x1CD2F);	// @ (0x39A5 * 8 + 7)
#define                                 I2C2TXIF_bit        _BIT_ACCESS(PIR5,7)
// IPR5<I2C2TXIP>
extern volatile __bit                   I2C2TXIP            __at(0x1CC2F);	// @ (0x3985 * 8 + 7)
#define                                 I2C2TXIP_bit        _BIT_ACCESS(IPR5,7)
// CPUDOZE<IDLEN>
extern volatile __bit                   IDLEN               __at(0x1CEC7);	// @ (0x39D8 * 8 + 7)
#define                                 IDLEN_bit           _BIT_ACCESS(CPUDOZE,7)
// NCO1INCL<INC0>
extern volatile __bit                   INC0                __at(0x1F9D8);	// @ (0x3F3B * 8 + 0)
#define                                 INC0_bit            _BIT_ACCESS(NCO1INCL,0)
// NCO1INCL<INC1>
extern volatile __bit                   INC1                __at(0x1F9D9);	// @ (0x3F3B * 8 + 1)
#define                                 INC1_bit            _BIT_ACCESS(NCO1INCL,1)
// NCO1INCH<INC10>
extern volatile __bit                   INC10               __at(0x1F9E2);	// @ (0x3F3C * 8 + 2)
#define                                 INC10_bit           _BIT_ACCESS(NCO1INCH,2)
// NCO1INCH<INC11>
extern volatile __bit                   INC11               __at(0x1F9E3);	// @ (0x3F3C * 8 + 3)
#define                                 INC11_bit           _BIT_ACCESS(NCO1INCH,3)
// NCO1INCH<INC12>
extern volatile __bit                   INC12               __at(0x1F9E4);	// @ (0x3F3C * 8 + 4)
#define                                 INC12_bit           _BIT_ACCESS(NCO1INCH,4)
// NCO1INCH<INC13>
extern volatile __bit                   INC13               __at(0x1F9E5);	// @ (0x3F3C * 8 + 5)
#define                                 INC13_bit           _BIT_ACCESS(NCO1INCH,5)
// NCO1INCH<INC14>
extern volatile __bit                   INC14               __at(0x1F9E6);	// @ (0x3F3C * 8 + 6)
#define                                 INC14_bit           _BIT_ACCESS(NCO1INCH,6)
// NCO1INCH<INC15>
extern volatile __bit                   INC15               __at(0x1F9E7);	// @ (0x3F3C * 8 + 7)
#define                                 INC15_bit           _BIT_ACCESS(NCO1INCH,7)
// NCO1INCU<INC16>
extern volatile __bit                   INC16               __at(0x1F9E8);	// @ (0x3F3D * 8 + 0)
#define                                 INC16_bit           _BIT_ACCESS(NCO1INCU,0)
// NCO1INCU<INC17>
extern volatile __bit                   INC17               __at(0x1F9E9);	// @ (0x3F3D * 8 + 1)
#define                                 INC17_bit           _BIT_ACCESS(NCO1INCU,1)
// NCO1INCU<INC18>
extern volatile __bit                   INC18               __at(0x1F9EA);	// @ (0x3F3D * 8 + 2)
#define                                 INC18_bit           _BIT_ACCESS(NCO1INCU,2)
// NCO1INCU<INC19>
extern volatile __bit                   INC19               __at(0x1F9EB);	// @ (0x3F3D * 8 + 3)
#define                                 INC19_bit           _BIT_ACCESS(NCO1INCU,3)
// NCO1INCL<INC2>
extern volatile __bit                   INC2                __at(0x1F9DA);	// @ (0x3F3B * 8 + 2)
#define                                 INC2_bit            _BIT_ACCESS(NCO1INCL,2)
// NCO1INCL<INC3>
extern volatile __bit                   INC3                __at(0x1F9DB);	// @ (0x3F3B * 8 + 3)
#define                                 INC3_bit            _BIT_ACCESS(NCO1INCL,3)
// NCO1INCL<INC4>
extern volatile __bit                   INC4                __at(0x1F9DC);	// @ (0x3F3B * 8 + 4)
#define                                 INC4_bit            _BIT_ACCESS(NCO1INCL,4)
// NCO1INCL<INC5>
extern volatile __bit                   INC5                __at(0x1F9DD);	// @ (0x3F3B * 8 + 5)
#define                                 INC5_bit            _BIT_ACCESS(NCO1INCL,5)
// NCO1INCL<INC6>
extern volatile __bit                   INC6                __at(0x1F9DE);	// @ (0x3F3B * 8 + 6)
#define                                 INC6_bit            _BIT_ACCESS(NCO1INCL,6)
// NCO1INCL<INC7>
extern volatile __bit                   INC7                __at(0x1F9DF);	// @ (0x3F3B * 8 + 7)
#define                                 INC7_bit            _BIT_ACCESS(NCO1INCL,7)
// NCO1INCH<INC8>
extern volatile __bit                   INC8                __at(0x1F9E0);	// @ (0x3F3C * 8 + 0)
#define                                 INC8_bit            _BIT_ACCESS(NCO1INCH,0)
// NCO1INCH<INC9>
extern volatile __bit                   INC9                __at(0x1F9E1);	// @ (0x3F3C * 8 + 1)
#define                                 INC9_bit            _BIT_ACCESS(NCO1INCH,1)
// INLVLA<INLVLA0>
extern volatile __bit                   INLVLA0             __at(0x1D220);	// @ (0x3A44 * 8 + 0)
#define                                 INLVLA0_bit         _BIT_ACCESS(INLVLA,0)
// INLVLA<INLVLA1>
extern volatile __bit                   INLVLA1             __at(0x1D221);	// @ (0x3A44 * 8 + 1)
#define                                 INLVLA1_bit         _BIT_ACCESS(INLVLA,1)
// INLVLA<INLVLA2>
extern volatile __bit                   INLVLA2             __at(0x1D222);	// @ (0x3A44 * 8 + 2)
#define                                 INLVLA2_bit         _BIT_ACCESS(INLVLA,2)
// INLVLA<INLVLA3>
extern volatile __bit                   INLVLA3             __at(0x1D223);	// @ (0x3A44 * 8 + 3)
#define                                 INLVLA3_bit         _BIT_ACCESS(INLVLA,3)
// INLVLA<INLVLA4>
extern volatile __bit                   INLVLA4             __at(0x1D224);	// @ (0x3A44 * 8 + 4)
#define                                 INLVLA4_bit         _BIT_ACCESS(INLVLA,4)
// INLVLA<INLVLA5>
extern volatile __bit                   INLVLA5             __at(0x1D225);	// @ (0x3A44 * 8 + 5)
#define                                 INLVLA5_bit         _BIT_ACCESS(INLVLA,5)
// INLVLA<INLVLA6>
extern volatile __bit                   INLVLA6             __at(0x1D226);	// @ (0x3A44 * 8 + 6)
#define                                 INLVLA6_bit         _BIT_ACCESS(INLVLA,6)
// INLVLA<INLVLA7>
extern volatile __bit                   INLVLA7             __at(0x1D227);	// @ (0x3A44 * 8 + 7)
#define                                 INLVLA7_bit         _BIT_ACCESS(INLVLA,7)
// INLVLB<INLVLB0>
extern volatile __bit                   INLVLB0             __at(0x1D2A0);	// @ (0x3A54 * 8 + 0)
#define                                 INLVLB0_bit         _BIT_ACCESS(INLVLB,0)
// INLVLB<INLVLB1>
extern volatile __bit                   INLVLB1             __at(0x1D2A1);	// @ (0x3A54 * 8 + 1)
#define                                 INLVLB1_bit         _BIT_ACCESS(INLVLB,1)
// INLVLB<INLVLB2>
extern volatile __bit                   INLVLB2             __at(0x1D2A2);	// @ (0x3A54 * 8 + 2)
#define                                 INLVLB2_bit         _BIT_ACCESS(INLVLB,2)
// INLVLB<INLVLB3>
extern volatile __bit                   INLVLB3             __at(0x1D2A3);	// @ (0x3A54 * 8 + 3)
#define                                 INLVLB3_bit         _BIT_ACCESS(INLVLB,3)
// INLVLB<INLVLB4>
extern volatile __bit                   INLVLB4             __at(0x1D2A4);	// @ (0x3A54 * 8 + 4)
#define                                 INLVLB4_bit         _BIT_ACCESS(INLVLB,4)
// INLVLB<INLVLB5>
extern volatile __bit                   INLVLB5             __at(0x1D2A5);	// @ (0x3A54 * 8 + 5)
#define                                 INLVLB5_bit         _BIT_ACCESS(INLVLB,5)
// INLVLB<INLVLB6>
extern volatile __bit                   INLVLB6             __at(0x1D2A6);	// @ (0x3A54 * 8 + 6)
#define                                 INLVLB6_bit         _BIT_ACCESS(INLVLB,6)
// INLVLB<INLVLB7>
extern volatile __bit                   INLVLB7             __at(0x1D2A7);	// @ (0x3A54 * 8 + 7)
#define                                 INLVLB7_bit         _BIT_ACCESS(INLVLB,7)
// INLVLC<INLVLC0>
extern volatile __bit                   INLVLC0             __at(0x1D320);	// @ (0x3A64 * 8 + 0)
#define                                 INLVLC0_bit         _BIT_ACCESS(INLVLC,0)
// INLVLC<INLVLC1>
extern volatile __bit                   INLVLC1             __at(0x1D321);	// @ (0x3A64 * 8 + 1)
#define                                 INLVLC1_bit         _BIT_ACCESS(INLVLC,1)
// INLVLC<INLVLC2>
extern volatile __bit                   INLVLC2             __at(0x1D322);	// @ (0x3A64 * 8 + 2)
#define                                 INLVLC2_bit         _BIT_ACCESS(INLVLC,2)
// INLVLC<INLVLC3>
extern volatile __bit                   INLVLC3             __at(0x1D323);	// @ (0x3A64 * 8 + 3)
#define                                 INLVLC3_bit         _BIT_ACCESS(INLVLC,3)
// INLVLC<INLVLC4>
extern volatile __bit                   INLVLC4             __at(0x1D324);	// @ (0x3A64 * 8 + 4)
#define                                 INLVLC4_bit         _BIT_ACCESS(INLVLC,4)
// INLVLC<INLVLC5>
extern volatile __bit                   INLVLC5             __at(0x1D325);	// @ (0x3A64 * 8 + 5)
#define                                 INLVLC5_bit         _BIT_ACCESS(INLVLC,5)
// INLVLC<INLVLC6>
extern volatile __bit                   INLVLC6             __at(0x1D326);	// @ (0x3A64 * 8 + 6)
#define                                 INLVLC6_bit         _BIT_ACCESS(INLVLC,6)
// INLVLC<INLVLC7>
extern volatile __bit                   INLVLC7             __at(0x1D327);	// @ (0x3A64 * 8 + 7)
#define                                 INLVLC7_bit         _BIT_ACCESS(INLVLC,7)
// INLVLE<INLVLE3>
extern volatile __bit                   INLVLE3             __at(0x1D423);	// @ (0x3A84 * 8 + 3)
#define                                 INLVLE3_bit         _BIT_ACCESS(INLVLE,3)
// INTCON0<INT0EDG>
extern volatile __bit                   INT0EDG             __at(0x1FE90);	// @ (0x3FD2 * 8 + 0)
#define                                 INT0EDG_bit         _BIT_ACCESS(INTCON0,0)
// PIE1<INT0IE>
extern volatile __bit                   INT0IE              __at(0x1CC88);	// @ (0x3991 * 8 + 0)
#define                                 INT0IE_bit          _BIT_ACCESS(PIE1,0)
// PIR1<INT0IF>
extern volatile __bit                   INT0IF              __at(0x1CD08);	// @ (0x39A1 * 8 + 0)
#define                                 INT0IF_bit          _BIT_ACCESS(PIR1,0)
// IPR1<INT0IP>
extern volatile __bit                   INT0IP              __at(0x1CC08);	// @ (0x3981 * 8 + 0)
#define                                 INT0IP_bit          _BIT_ACCESS(IPR1,0)
// INTCON0<INT1EDG>
extern volatile __bit                   INT1EDG             __at(0x1FE91);	// @ (0x3FD2 * 8 + 1)
#define                                 INT1EDG_bit         _BIT_ACCESS(INTCON0,1)
// PIE5<INT1IE>
extern volatile __bit                   INT1IE              __at(0x1CCA8);	// @ (0x3995 * 8 + 0)
#define                                 INT1IE_bit          _BIT_ACCESS(PIE5,0)
// PIR5<INT1IF>
extern volatile __bit                   INT1IF              __at(0x1CD28);	// @ (0x39A5 * 8 + 0)
#define                                 INT1IF_bit          _BIT_ACCESS(PIR5,0)
// IPR5<INT1IP>
extern volatile __bit                   INT1IP              __at(0x1CC28);	// @ (0x3985 * 8 + 0)
#define                                 INT1IP_bit          _BIT_ACCESS(IPR5,0)
// INTCON0<INT2EDG>
extern volatile __bit                   INT2EDG             __at(0x1FE92);	// @ (0x3FD2 * 8 + 2)
#define                                 INT2EDG_bit         _BIT_ACCESS(INTCON0,2)
// PIE7<INT2IE>
extern volatile __bit                   INT2IE              __at(0x1CCBD);	// @ (0x3997 * 8 + 5)
#define                                 INT2IE_bit          _BIT_ACCESS(PIE7,5)
// PIR7<INT2IF>
extern volatile __bit                   INT2IF              __at(0x1CD3D);	// @ (0x39A7 * 8 + 5)
#define                                 INT2IF_bit          _BIT_ACCESS(PIR7,5)
// IPR7<INT2IP>
extern volatile __bit                   INT2IP              __at(0x1CC3D);	// @ (0x3987 * 8 + 5)
#define                                 INT2IP_bit          _BIT_ACCESS(IPR7,5)
// HLVDCON0<INTH>
extern volatile __bit                   INTH                __at(0x1F649);	// @ (0x3EC9 * 8 + 1)
#define                                 INTH_bit            _BIT_ACCESS(HLVDCON0,1)
// HLVDCON0<INTL>
extern volatile __bit                   INTL                __at(0x1F648);	// @ (0x3EC9 * 8 + 0)
#define                                 INTL_bit            _BIT_ACCESS(HLVDCON0,0)
// IOCAF<IOCAF0>
extern volatile __bit                   IOCAF0              __at(0x1D238);	// @ (0x3A47 * 8 + 0)
#define                                 IOCAF0_bit          _BIT_ACCESS(IOCAF,0)
// IOCAF<IOCAF1>
extern volatile __bit                   IOCAF1              __at(0x1D239);	// @ (0x3A47 * 8 + 1)
#define                                 IOCAF1_bit          _BIT_ACCESS(IOCAF,1)
// IOCAF<IOCAF2>
extern volatile __bit                   IOCAF2              __at(0x1D23A);	// @ (0x3A47 * 8 + 2)
#define                                 IOCAF2_bit          _BIT_ACCESS(IOCAF,2)
// IOCAF<IOCAF3>
extern volatile __bit                   IOCAF3              __at(0x1D23B);	// @ (0x3A47 * 8 + 3)
#define                                 IOCAF3_bit          _BIT_ACCESS(IOCAF,3)
// IOCAF<IOCAF4>
extern volatile __bit                   IOCAF4              __at(0x1D23C);	// @ (0x3A47 * 8 + 4)
#define                                 IOCAF4_bit          _BIT_ACCESS(IOCAF,4)
// IOCAF<IOCAF5>
extern volatile __bit                   IOCAF5              __at(0x1D23D);	// @ (0x3A47 * 8 + 5)
#define                                 IOCAF5_bit          _BIT_ACCESS(IOCAF,5)
// IOCAF<IOCAF6>
extern volatile __bit                   IOCAF6              __at(0x1D23E);	// @ (0x3A47 * 8 + 6)
#define                                 IOCAF6_bit          _BIT_ACCESS(IOCAF,6)
// IOCAF<IOCAF7>
extern volatile __bit                   IOCAF7              __at(0x1D23F);	// @ (0x3A47 * 8 + 7)
#define                                 IOCAF7_bit          _BIT_ACCESS(IOCAF,7)
// IOCAN<IOCAN0>
extern volatile __bit                   IOCAN0              __at(0x1D230);	// @ (0x3A46 * 8 + 0)
#define                                 IOCAN0_bit          _BIT_ACCESS(IOCAN,0)
// IOCAN<IOCAN1>
extern volatile __bit                   IOCAN1              __at(0x1D231);	// @ (0x3A46 * 8 + 1)
#define                                 IOCAN1_bit          _BIT_ACCESS(IOCAN,1)
// IOCAN<IOCAN2>
extern volatile __bit                   IOCAN2              __at(0x1D232);	// @ (0x3A46 * 8 + 2)
#define                                 IOCAN2_bit          _BIT_ACCESS(IOCAN,2)
// IOCAN<IOCAN3>
extern volatile __bit                   IOCAN3              __at(0x1D233);	// @ (0x3A46 * 8 + 3)
#define                                 IOCAN3_bit          _BIT_ACCESS(IOCAN,3)
// IOCAN<IOCAN4>
extern volatile __bit                   IOCAN4              __at(0x1D234);	// @ (0x3A46 * 8 + 4)
#define                                 IOCAN4_bit          _BIT_ACCESS(IOCAN,4)
// IOCAN<IOCAN5>
extern volatile __bit                   IOCAN5              __at(0x1D235);	// @ (0x3A46 * 8 + 5)
#define                                 IOCAN5_bit          _BIT_ACCESS(IOCAN,5)
// IOCAN<IOCAN6>
extern volatile __bit                   IOCAN6              __at(0x1D236);	// @ (0x3A46 * 8 + 6)
#define                                 IOCAN6_bit          _BIT_ACCESS(IOCAN,6)
// IOCAN<IOCAN7>
extern volatile __bit                   IOCAN7              __at(0x1D237);	// @ (0x3A46 * 8 + 7)
#define                                 IOCAN7_bit          _BIT_ACCESS(IOCAN,7)
// IOCAP<IOCAP0>
extern volatile __bit                   IOCAP0              __at(0x1D228);	// @ (0x3A45 * 8 + 0)
#define                                 IOCAP0_bit          _BIT_ACCESS(IOCAP,0)
// IOCAP<IOCAP1>
extern volatile __bit                   IOCAP1              __at(0x1D229);	// @ (0x3A45 * 8 + 1)
#define                                 IOCAP1_bit          _BIT_ACCESS(IOCAP,1)
// IOCAP<IOCAP2>
extern volatile __bit                   IOCAP2              __at(0x1D22A);	// @ (0x3A45 * 8 + 2)
#define                                 IOCAP2_bit          _BIT_ACCESS(IOCAP,2)
// IOCAP<IOCAP3>
extern volatile __bit                   IOCAP3              __at(0x1D22B);	// @ (0x3A45 * 8 + 3)
#define                                 IOCAP3_bit          _BIT_ACCESS(IOCAP,3)
// IOCAP<IOCAP4>
extern volatile __bit                   IOCAP4              __at(0x1D22C);	// @ (0x3A45 * 8 + 4)
#define                                 IOCAP4_bit          _BIT_ACCESS(IOCAP,4)
// IOCAP<IOCAP5>
extern volatile __bit                   IOCAP5              __at(0x1D22D);	// @ (0x3A45 * 8 + 5)
#define                                 IOCAP5_bit          _BIT_ACCESS(IOCAP,5)
// IOCAP<IOCAP6>
extern volatile __bit                   IOCAP6              __at(0x1D22E);	// @ (0x3A45 * 8 + 6)
#define                                 IOCAP6_bit          _BIT_ACCESS(IOCAP,6)
// IOCAP<IOCAP7>
extern volatile __bit                   IOCAP7              __at(0x1D22F);	// @ (0x3A45 * 8 + 7)
#define                                 IOCAP7_bit          _BIT_ACCESS(IOCAP,7)
// IOCBF<IOCBF0>
extern volatile __bit                   IOCBF0              __at(0x1D2B8);	// @ (0x3A57 * 8 + 0)
#define                                 IOCBF0_bit          _BIT_ACCESS(IOCBF,0)
// IOCBF<IOCBF1>
extern volatile __bit                   IOCBF1              __at(0x1D2B9);	// @ (0x3A57 * 8 + 1)
#define                                 IOCBF1_bit          _BIT_ACCESS(IOCBF,1)
// IOCBF<IOCBF2>
extern volatile __bit                   IOCBF2              __at(0x1D2BA);	// @ (0x3A57 * 8 + 2)
#define                                 IOCBF2_bit          _BIT_ACCESS(IOCBF,2)
// IOCBF<IOCBF3>
extern volatile __bit                   IOCBF3              __at(0x1D2BB);	// @ (0x3A57 * 8 + 3)
#define                                 IOCBF3_bit          _BIT_ACCESS(IOCBF,3)
// IOCBF<IOCBF4>
extern volatile __bit                   IOCBF4              __at(0x1D2BC);	// @ (0x3A57 * 8 + 4)
#define                                 IOCBF4_bit          _BIT_ACCESS(IOCBF,4)
// IOCBF<IOCBF5>
extern volatile __bit                   IOCBF5              __at(0x1D2BD);	// @ (0x3A57 * 8 + 5)
#define                                 IOCBF5_bit          _BIT_ACCESS(IOCBF,5)
// IOCBF<IOCBF6>
extern volatile __bit                   IOCBF6              __at(0x1D2BE);	// @ (0x3A57 * 8 + 6)
#define                                 IOCBF6_bit          _BIT_ACCESS(IOCBF,6)
// IOCBF<IOCBF7>
extern volatile __bit                   IOCBF7              __at(0x1D2BF);	// @ (0x3A57 * 8 + 7)
#define                                 IOCBF7_bit          _BIT_ACCESS(IOCBF,7)
// IOCBN<IOCBN0>
extern volatile __bit                   IOCBN0              __at(0x1D2B0);	// @ (0x3A56 * 8 + 0)
#define                                 IOCBN0_bit          _BIT_ACCESS(IOCBN,0)
// IOCBN<IOCBN1>
extern volatile __bit                   IOCBN1              __at(0x1D2B1);	// @ (0x3A56 * 8 + 1)
#define                                 IOCBN1_bit          _BIT_ACCESS(IOCBN,1)
// IOCBN<IOCBN2>
extern volatile __bit                   IOCBN2              __at(0x1D2B2);	// @ (0x3A56 * 8 + 2)
#define                                 IOCBN2_bit          _BIT_ACCESS(IOCBN,2)
// IOCBN<IOCBN3>
extern volatile __bit                   IOCBN3              __at(0x1D2B3);	// @ (0x3A56 * 8 + 3)
#define                                 IOCBN3_bit          _BIT_ACCESS(IOCBN,3)
// IOCBN<IOCBN4>
extern volatile __bit                   IOCBN4              __at(0x1D2B4);	// @ (0x3A56 * 8 + 4)
#define                                 IOCBN4_bit          _BIT_ACCESS(IOCBN,4)
// IOCBN<IOCBN5>
extern volatile __bit                   IOCBN5              __at(0x1D2B5);	// @ (0x3A56 * 8 + 5)
#define                                 IOCBN5_bit          _BIT_ACCESS(IOCBN,5)
// IOCBN<IOCBN6>
extern volatile __bit                   IOCBN6              __at(0x1D2B6);	// @ (0x3A56 * 8 + 6)
#define                                 IOCBN6_bit          _BIT_ACCESS(IOCBN,6)
// IOCBN<IOCBN7>
extern volatile __bit                   IOCBN7              __at(0x1D2B7);	// @ (0x3A56 * 8 + 7)
#define                                 IOCBN7_bit          _BIT_ACCESS(IOCBN,7)
// IOCBP<IOCBP0>
extern volatile __bit                   IOCBP0              __at(0x1D2A8);	// @ (0x3A55 * 8 + 0)
#define                                 IOCBP0_bit          _BIT_ACCESS(IOCBP,0)
// IOCBP<IOCBP1>
extern volatile __bit                   IOCBP1              __at(0x1D2A9);	// @ (0x3A55 * 8 + 1)
#define                                 IOCBP1_bit          _BIT_ACCESS(IOCBP,1)
// IOCBP<IOCBP2>
extern volatile __bit                   IOCBP2              __at(0x1D2AA);	// @ (0x3A55 * 8 + 2)
#define                                 IOCBP2_bit          _BIT_ACCESS(IOCBP,2)
// IOCBP<IOCBP3>
extern volatile __bit                   IOCBP3              __at(0x1D2AB);	// @ (0x3A55 * 8 + 3)
#define                                 IOCBP3_bit          _BIT_ACCESS(IOCBP,3)
// IOCBP<IOCBP4>
extern volatile __bit                   IOCBP4              __at(0x1D2AC);	// @ (0x3A55 * 8 + 4)
#define                                 IOCBP4_bit          _BIT_ACCESS(IOCBP,4)
// IOCBP<IOCBP5>
extern volatile __bit                   IOCBP5              __at(0x1D2AD);	// @ (0x3A55 * 8 + 5)
#define                                 IOCBP5_bit          _BIT_ACCESS(IOCBP,5)
// IOCBP<IOCBP6>
extern volatile __bit                   IOCBP6              __at(0x1D2AE);	// @ (0x3A55 * 8 + 6)
#define                                 IOCBP6_bit          _BIT_ACCESS(IOCBP,6)
// IOCBP<IOCBP7>
extern volatile __bit                   IOCBP7              __at(0x1D2AF);	// @ (0x3A55 * 8 + 7)
#define                                 IOCBP7_bit          _BIT_ACCESS(IOCBP,7)
// IOCCF<IOCCF0>
extern volatile __bit                   IOCCF0              __at(0x1D338);	// @ (0x3A67 * 8 + 0)
#define                                 IOCCF0_bit          _BIT_ACCESS(IOCCF,0)
// IOCCF<IOCCF1>
extern volatile __bit                   IOCCF1              __at(0x1D339);	// @ (0x3A67 * 8 + 1)
#define                                 IOCCF1_bit          _BIT_ACCESS(IOCCF,1)
// IOCCF<IOCCF2>
extern volatile __bit                   IOCCF2              __at(0x1D33A);	// @ (0x3A67 * 8 + 2)
#define                                 IOCCF2_bit          _BIT_ACCESS(IOCCF,2)
// IOCCF<IOCCF3>
extern volatile __bit                   IOCCF3              __at(0x1D33B);	// @ (0x3A67 * 8 + 3)
#define                                 IOCCF3_bit          _BIT_ACCESS(IOCCF,3)
// IOCCF<IOCCF4>
extern volatile __bit                   IOCCF4              __at(0x1D33C);	// @ (0x3A67 * 8 + 4)
#define                                 IOCCF4_bit          _BIT_ACCESS(IOCCF,4)
// IOCCF<IOCCF5>
extern volatile __bit                   IOCCF5              __at(0x1D33D);	// @ (0x3A67 * 8 + 5)
#define                                 IOCCF5_bit          _BIT_ACCESS(IOCCF,5)
// IOCCF<IOCCF6>
extern volatile __bit                   IOCCF6              __at(0x1D33E);	// @ (0x3A67 * 8 + 6)
#define                                 IOCCF6_bit          _BIT_ACCESS(IOCCF,6)
// IOCCF<IOCCF7>
extern volatile __bit                   IOCCF7              __at(0x1D33F);	// @ (0x3A67 * 8 + 7)
#define                                 IOCCF7_bit          _BIT_ACCESS(IOCCF,7)
// IOCCN<IOCCN0>
extern volatile __bit                   IOCCN0              __at(0x1D330);	// @ (0x3A66 * 8 + 0)
#define                                 IOCCN0_bit          _BIT_ACCESS(IOCCN,0)
// IOCCN<IOCCN1>
extern volatile __bit                   IOCCN1              __at(0x1D331);	// @ (0x3A66 * 8 + 1)
#define                                 IOCCN1_bit          _BIT_ACCESS(IOCCN,1)
// IOCCN<IOCCN2>
extern volatile __bit                   IOCCN2              __at(0x1D332);	// @ (0x3A66 * 8 + 2)
#define                                 IOCCN2_bit          _BIT_ACCESS(IOCCN,2)
// IOCCN<IOCCN3>
extern volatile __bit                   IOCCN3              __at(0x1D333);	// @ (0x3A66 * 8 + 3)
#define                                 IOCCN3_bit          _BIT_ACCESS(IOCCN,3)
// IOCCN<IOCCN4>
extern volatile __bit                   IOCCN4              __at(0x1D334);	// @ (0x3A66 * 8 + 4)
#define                                 IOCCN4_bit          _BIT_ACCESS(IOCCN,4)
// IOCCN<IOCCN5>
extern volatile __bit                   IOCCN5              __at(0x1D335);	// @ (0x3A66 * 8 + 5)
#define                                 IOCCN5_bit          _BIT_ACCESS(IOCCN,5)
// IOCCN<IOCCN6>
extern volatile __bit                   IOCCN6              __at(0x1D336);	// @ (0x3A66 * 8 + 6)
#define                                 IOCCN6_bit          _BIT_ACCESS(IOCCN,6)
// IOCCN<IOCCN7>
extern volatile __bit                   IOCCN7              __at(0x1D337);	// @ (0x3A66 * 8 + 7)
#define                                 IOCCN7_bit          _BIT_ACCESS(IOCCN,7)
// IOCCP<IOCCP0>
extern volatile __bit                   IOCCP0              __at(0x1D328);	// @ (0x3A65 * 8 + 0)
#define                                 IOCCP0_bit          _BIT_ACCESS(IOCCP,0)
// IOCCP<IOCCP1>
extern volatile __bit                   IOCCP1              __at(0x1D329);	// @ (0x3A65 * 8 + 1)
#define                                 IOCCP1_bit          _BIT_ACCESS(IOCCP,1)
// IOCCP<IOCCP2>
extern volatile __bit                   IOCCP2              __at(0x1D32A);	// @ (0x3A65 * 8 + 2)
#define                                 IOCCP2_bit          _BIT_ACCESS(IOCCP,2)
// IOCCP<IOCCP3>
extern volatile __bit                   IOCCP3              __at(0x1D32B);	// @ (0x3A65 * 8 + 3)
#define                                 IOCCP3_bit          _BIT_ACCESS(IOCCP,3)
// IOCCP<IOCCP4>
extern volatile __bit                   IOCCP4              __at(0x1D32C);	// @ (0x3A65 * 8 + 4)
#define                                 IOCCP4_bit          _BIT_ACCESS(IOCCP,4)
// IOCCP<IOCCP5>
extern volatile __bit                   IOCCP5              __at(0x1D32D);	// @ (0x3A65 * 8 + 5)
#define                                 IOCCP5_bit          _BIT_ACCESS(IOCCP,5)
// IOCCP<IOCCP6>
extern volatile __bit                   IOCCP6              __at(0x1D32E);	// @ (0x3A65 * 8 + 6)
#define                                 IOCCP6_bit          _BIT_ACCESS(IOCCP,6)
// IOCCP<IOCCP7>
extern volatile __bit                   IOCCP7              __at(0x1D32F);	// @ (0x3A65 * 8 + 7)
#define                                 IOCCP7_bit          _BIT_ACCESS(IOCCP,7)
// IOCEF<IOCEF3>
extern volatile __bit                   IOCEF3              __at(0x1D43B);	// @ (0x3A87 * 8 + 3)
#define                                 IOCEF3_bit          _BIT_ACCESS(IOCEF,3)
// IOCEN<IOCEN3>
extern volatile __bit                   IOCEN3              __at(0x1D433);	// @ (0x3A86 * 8 + 3)
#define                                 IOCEN3_bit          _BIT_ACCESS(IOCEN,3)
// IOCEP<IOCEP3>
extern volatile __bit                   IOCEP3              __at(0x1D42B);	// @ (0x3A85 * 8 + 3)
#define                                 IOCEP3_bit          _BIT_ACCESS(IOCEP,3)
// PIE0<IOCIE>
extern volatile __bit                   IOCIE               __at(0x1CC87);	// @ (0x3990 * 8 + 7)
#define                                 IOCIE_bit           _BIT_ACCESS(PIE0,7)
// PIR0<IOCIF>
extern volatile __bit                   IOCIF               __at(0x1CD07);	// @ (0x39A0 * 8 + 7)
#define                                 IOCIF_bit           _BIT_ACCESS(PIR0,7)
// IPR0<IOCIP>
extern volatile __bit                   IOCIP               __at(0x1CC07);	// @ (0x3980 * 8 + 7)
#define                                 IOCIP_bit           _BIT_ACCESS(IPR0,7)
// PMD0<IOCMD>
extern volatile __bit                   IOCMD               __at(0x1CE00);	// @ (0x39C0 * 8 + 0)
#define                                 IOCMD_bit           _BIT_ACCESS(PMD0,0)
// ISRPR<ISRPR0>
extern volatile __bit                   ISRPR0              __at(0x1CF88);	// @ (0x39F1 * 8 + 0)
#define                                 ISRPR0_bit          _BIT_ACCESS(ISRPR,0)
// ISRPR<ISRPR1>
extern volatile __bit                   ISRPR1              __at(0x1CF89);	// @ (0x39F1 * 8 + 1)
#define                                 ISRPR1_bit          _BIT_ACCESS(ISRPR,1)
// ISRPR<ISRPR2>
extern volatile __bit                   ISRPR2              __at(0x1CF8A);	// @ (0x39F1 * 8 + 2)
#define                                 ISRPR2_bit          _BIT_ACCESS(ISRPR,2)
// IVTLOCK<IVTLOCKED>
extern volatile __bit                   IVTLOCKED           __at(0x1FEA0);	// @ (0x3FD4 * 8 + 0)
#define                                 IVTLOCKED_bit       _BIT_ACCESS(IVTLOCK,0)
// LATA<LA0>
extern volatile __bit                   LA0                 __at(0x1FDD0);	// @ (0x3FBA * 8 + 0)
#define                                 LA0_bit             _BIT_ACCESS(LATA,0)
// LATA<LA1>
extern volatile __bit                   LA1                 __at(0x1FDD1);	// @ (0x3FBA * 8 + 1)
#define                                 LA1_bit             _BIT_ACCESS(LATA,1)
// LATA<LA2>
extern volatile __bit                   LA2                 __at(0x1FDD2);	// @ (0x3FBA * 8 + 2)
#define                                 LA2_bit             _BIT_ACCESS(LATA,2)
// LATA<LA3>
extern volatile __bit                   LA3                 __at(0x1FDD3);	// @ (0x3FBA * 8 + 3)
#define                                 LA3_bit             _BIT_ACCESS(LATA,3)
// LATA<LA4>
extern volatile __bit                   LA4                 __at(0x1FDD4);	// @ (0x3FBA * 8 + 4)
#define                                 LA4_bit             _BIT_ACCESS(LATA,4)
// LATA<LA5>
extern volatile __bit                   LA5                 __at(0x1FDD5);	// @ (0x3FBA * 8 + 5)
#define                                 LA5_bit             _BIT_ACCESS(LATA,5)
// LATA<LA6>
extern volatile __bit                   LA6                 __at(0x1FDD6);	// @ (0x3FBA * 8 + 6)
#define                                 LA6_bit             _BIT_ACCESS(LATA,6)
// LATA<LA7>
extern volatile __bit                   LA7                 __at(0x1FDD7);	// @ (0x3FBA * 8 + 7)
#define                                 LA7_bit             _BIT_ACCESS(LATA,7)
// SCANLADRL<LADR0>
extern volatile __bit                   LADR0               __at(0x1CBB0);	// @ (0x3976 * 8 + 0)
#define                                 LADR0_bit           _BIT_ACCESS(SCANLADRL,0)
// SCANLADRL<LADR1>
extern volatile __bit                   LADR1               __at(0x1CBB1);	// @ (0x3976 * 8 + 1)
#define                                 LADR1_bit           _BIT_ACCESS(SCANLADRL,1)
// SCANLADRH<LADR10>
extern volatile __bit                   LADR10              __at(0x1CBBA);	// @ (0x3977 * 8 + 2)
#define                                 LADR10_bit          _BIT_ACCESS(SCANLADRH,2)
// SCANLADRH<LADR11>
extern volatile __bit                   LADR11              __at(0x1CBBB);	// @ (0x3977 * 8 + 3)
#define                                 LADR11_bit          _BIT_ACCESS(SCANLADRH,3)
// SCANLADRH<LADR12>
extern volatile __bit                   LADR12              __at(0x1CBBC);	// @ (0x3977 * 8 + 4)
#define                                 LADR12_bit          _BIT_ACCESS(SCANLADRH,4)
// SCANLADRH<LADR13>
extern volatile __bit                   LADR13              __at(0x1CBBD);	// @ (0x3977 * 8 + 5)
#define                                 LADR13_bit          _BIT_ACCESS(SCANLADRH,5)
// SCANLADRH<LADR14>
extern volatile __bit                   LADR14              __at(0x1CBBE);	// @ (0x3977 * 8 + 6)
#define                                 LADR14_bit          _BIT_ACCESS(SCANLADRH,6)
// SCANLADRH<LADR15>
extern volatile __bit                   LADR15              __at(0x1CBBF);	// @ (0x3977 * 8 + 7)
#define                                 LADR15_bit          _BIT_ACCESS(SCANLADRH,7)
// SCANLADRU<LADR16>
extern volatile __bit                   LADR16              __at(0x1CBC0);	// @ (0x3978 * 8 + 0)
#define                                 LADR16_bit          _BIT_ACCESS(SCANLADRU,0)
// SCANLADRU<LADR17>
extern volatile __bit                   LADR17              __at(0x1CBC1);	// @ (0x3978 * 8 + 1)
#define                                 LADR17_bit          _BIT_ACCESS(SCANLADRU,1)
// SCANLADRU<LADR18>
extern volatile __bit                   LADR18              __at(0x1CBC2);	// @ (0x3978 * 8 + 2)
#define                                 LADR18_bit          _BIT_ACCESS(SCANLADRU,2)
// SCANLADRU<LADR19>
extern volatile __bit                   LADR19              __at(0x1CBC3);	// @ (0x3978 * 8 + 3)
#define                                 LADR19_bit          _BIT_ACCESS(SCANLADRU,3)
// SCANLADRL<LADR2>
extern volatile __bit                   LADR2               __at(0x1CBB2);	// @ (0x3976 * 8 + 2)
#define                                 LADR2_bit           _BIT_ACCESS(SCANLADRL,2)
// SCANLADRU<LADR20>
extern volatile __bit                   LADR20              __at(0x1CBC4);	// @ (0x3978 * 8 + 4)
#define                                 LADR20_bit          _BIT_ACCESS(SCANLADRU,4)
// SCANLADRU<LADR21>
extern volatile __bit                   LADR21              __at(0x1CBC5);	// @ (0x3978 * 8 + 5)
#define                                 LADR21_bit          _BIT_ACCESS(SCANLADRU,5)
// SCANLADRL<LADR3>
extern volatile __bit                   LADR3               __at(0x1CBB3);	// @ (0x3976 * 8 + 3)
#define                                 LADR3_bit           _BIT_ACCESS(SCANLADRL,3)
// SCANLADRL<LADR4>
extern volatile __bit                   LADR4               __at(0x1CBB4);	// @ (0x3976 * 8 + 4)
#define                                 LADR4_bit           _BIT_ACCESS(SCANLADRL,4)
// SCANLADRL<LADR5>
extern volatile __bit                   LADR5               __at(0x1CBB5);	// @ (0x3976 * 8 + 5)
#define                                 LADR5_bit           _BIT_ACCESS(SCANLADRL,5)
// SCANLADRL<LADR6>
extern volatile __bit                   LADR6               __at(0x1CBB6);	// @ (0x3976 * 8 + 6)
#define                                 LADR6_bit           _BIT_ACCESS(SCANLADRL,6)
// SCANLADRL<LADR7>
extern volatile __bit                   LADR7               __at(0x1CBB7);	// @ (0x3976 * 8 + 7)
#define                                 LADR7_bit           _BIT_ACCESS(SCANLADRL,7)
// SCANLADRH<LADR8>
extern volatile __bit                   LADR8               __at(0x1CBB8);	// @ (0x3977 * 8 + 0)
#define                                 LADR8_bit           _BIT_ACCESS(SCANLADRH,0)
// SCANLADRH<LADR9>
extern volatile __bit                   LADR9               __at(0x1CBB9);	// @ (0x3977 * 8 + 1)
#define                                 LADR9_bit           _BIT_ACCESS(SCANLADRH,1)
// LATA<LATA0>
extern volatile __bit                   LATA0               __at(0x1FDD0);	// @ (0x3FBA * 8 + 0)
#define                                 LATA0_bit           _BIT_ACCESS(LATA,0)
// LATA<LATA1>
extern volatile __bit                   LATA1               __at(0x1FDD1);	// @ (0x3FBA * 8 + 1)
#define                                 LATA1_bit           _BIT_ACCESS(LATA,1)
// LATA<LATA2>
extern volatile __bit                   LATA2               __at(0x1FDD2);	// @ (0x3FBA * 8 + 2)
#define                                 LATA2_bit           _BIT_ACCESS(LATA,2)
// LATA<LATA3>
extern volatile __bit                   LATA3               __at(0x1FDD3);	// @ (0x3FBA * 8 + 3)
#define                                 LATA3_bit           _BIT_ACCESS(LATA,3)
// LATA<LATA4>
extern volatile __bit                   LATA4               __at(0x1FDD4);	// @ (0x3FBA * 8 + 4)
#define                                 LATA4_bit           _BIT_ACCESS(LATA,4)
// LATA<LATA5>
extern volatile __bit                   LATA5               __at(0x1FDD5);	// @ (0x3FBA * 8 + 5)
#define                                 LATA5_bit           _BIT_ACCESS(LATA,5)
// LATA<LATA6>
extern volatile __bit                   LATA6               __at(0x1FDD6);	// @ (0x3FBA * 8 + 6)
#define                                 LATA6_bit           _BIT_ACCESS(LATA,6)
// LATA<LATA7>
extern volatile __bit                   LATA7               __at(0x1FDD7);	// @ (0x3FBA * 8 + 7)
#define                                 LATA7_bit           _BIT_ACCESS(LATA,7)
// LATB<LATB0>
extern volatile __bit                   LATB0               __at(0x1FDD8);	// @ (0x3FBB * 8 + 0)
#define                                 LATB0_bit           _BIT_ACCESS(LATB,0)
// LATB<LATB1>
extern volatile __bit                   LATB1               __at(0x1FDD9);	// @ (0x3FBB * 8 + 1)
#define                                 LATB1_bit           _BIT_ACCESS(LATB,1)
// LATB<LATB2>
extern volatile __bit                   LATB2               __at(0x1FDDA);	// @ (0x3FBB * 8 + 2)
#define                                 LATB2_bit           _BIT_ACCESS(LATB,2)
// LATB<LATB3>
extern volatile __bit                   LATB3               __at(0x1FDDB);	// @ (0x3FBB * 8 + 3)
#define                                 LATB3_bit           _BIT_ACCESS(LATB,3)
// LATB<LATB4>
extern volatile __bit                   LATB4               __at(0x1FDDC);	// @ (0x3FBB * 8 + 4)
#define                                 LATB4_bit           _BIT_ACCESS(LATB,4)
// LATB<LATB5>
extern volatile __bit                   LATB5               __at(0x1FDDD);	// @ (0x3FBB * 8 + 5)
#define                                 LATB5_bit           _BIT_ACCESS(LATB,5)
// LATB<LATB6>
extern volatile __bit                   LATB6               __at(0x1FDDE);	// @ (0x3FBB * 8 + 6)
#define                                 LATB6_bit           _BIT_ACCESS(LATB,6)
// LATB<LATB7>
extern volatile __bit                   LATB7               __at(0x1FDDF);	// @ (0x3FBB * 8 + 7)
#define                                 LATB7_bit           _BIT_ACCESS(LATB,7)
// LATC<LATC0>
extern volatile __bit                   LATC0               __at(0x1FDE0);	// @ (0x3FBC * 8 + 0)
#define                                 LATC0_bit           _BIT_ACCESS(LATC,0)
// LATC<LATC1>
extern volatile __bit                   LATC1               __at(0x1FDE1);	// @ (0x3FBC * 8 + 1)
#define                                 LATC1_bit           _BIT_ACCESS(LATC,1)
// LATC<LATC2>
extern volatile __bit                   LATC2               __at(0x1FDE2);	// @ (0x3FBC * 8 + 2)
#define                                 LATC2_bit           _BIT_ACCESS(LATC,2)
// LATC<LATC3>
extern volatile __bit                   LATC3               __at(0x1FDE3);	// @ (0x3FBC * 8 + 3)
#define                                 LATC3_bit           _BIT_ACCESS(LATC,3)
// LATC<LATC4>
extern volatile __bit                   LATC4               __at(0x1FDE4);	// @ (0x3FBC * 8 + 4)
#define                                 LATC4_bit           _BIT_ACCESS(LATC,4)
// LATC<LATC5>
extern volatile __bit                   LATC5               __at(0x1FDE5);	// @ (0x3FBC * 8 + 5)
#define                                 LATC5_bit           _BIT_ACCESS(LATC,5)
// LATC<LATC6>
extern volatile __bit                   LATC6               __at(0x1FDE6);	// @ (0x3FBC * 8 + 6)
#define                                 LATC6_bit           _BIT_ACCESS(LATC,6)
// LATC<LATC7>
extern volatile __bit                   LATC7               __at(0x1FDE7);	// @ (0x3FBC * 8 + 7)
#define                                 LATC7_bit           _BIT_ACCESS(LATC,7)
// LATB<LB0>
extern volatile __bit                   LB0                 __at(0x1FDD8);	// @ (0x3FBB * 8 + 0)
#define                                 LB0_bit             _BIT_ACCESS(LATB,0)
// LATB<LB1>
extern volatile __bit                   LB1                 __at(0x1FDD9);	// @ (0x3FBB * 8 + 1)
#define                                 LB1_bit             _BIT_ACCESS(LATB,1)
// LATB<LB2>
extern volatile __bit                   LB2                 __at(0x1FDDA);	// @ (0x3FBB * 8 + 2)
#define                                 LB2_bit             _BIT_ACCESS(LATB,2)
// LATB<LB3>
extern volatile __bit                   LB3                 __at(0x1FDDB);	// @ (0x3FBB * 8 + 3)
#define                                 LB3_bit             _BIT_ACCESS(LATB,3)
// LATB<LB4>
extern volatile __bit                   LB4                 __at(0x1FDDC);	// @ (0x3FBB * 8 + 4)
#define                                 LB4_bit             _BIT_ACCESS(LATB,4)
// LATB<LB5>
extern volatile __bit                   LB5                 __at(0x1FDDD);	// @ (0x3FBB * 8 + 5)
#define                                 LB5_bit             _BIT_ACCESS(LATB,5)
// LATB<LB6>
extern volatile __bit                   LB6                 __at(0x1FDDE);	// @ (0x3FBB * 8 + 6)
#define                                 LB6_bit             _BIT_ACCESS(LATB,6)
// LATB<LB7>
extern volatile __bit                   LB7                 __at(0x1FDDF);	// @ (0x3FBB * 8 + 7)
#define                                 LB7_bit             _BIT_ACCESS(LATB,7)
// LATC<LC0>
extern volatile __bit                   LC0                 __at(0x1FDE0);	// @ (0x3FBC * 8 + 0)
#define                                 LC0_bit             _BIT_ACCESS(LATC,0)
// LATC<LC1>
extern volatile __bit                   LC1                 __at(0x1FDE1);	// @ (0x3FBC * 8 + 1)
#define                                 LC1_bit             _BIT_ACCESS(LATC,1)
// CLC1SEL0<LC1D1S0>
extern volatile __bit                   LC1D1S0             __at(0x1E3B0);	// @ (0x3C76 * 8 + 0)
#define                                 LC1D1S0_bit         _BIT_ACCESS(CLC1SEL0,0)
// CLC1SEL0<LC1D1S1>
extern volatile __bit                   LC1D1S1             __at(0x1E3B1);	// @ (0x3C76 * 8 + 1)
#define                                 LC1D1S1_bit         _BIT_ACCESS(CLC1SEL0,1)
// CLC1SEL0<LC1D1S2>
extern volatile __bit                   LC1D1S2             __at(0x1E3B2);	// @ (0x3C76 * 8 + 2)
#define                                 LC1D1S2_bit         _BIT_ACCESS(CLC1SEL0,2)
// CLC1SEL0<LC1D1S3>
extern volatile __bit                   LC1D1S3             __at(0x1E3B3);	// @ (0x3C76 * 8 + 3)
#define                                 LC1D1S3_bit         _BIT_ACCESS(CLC1SEL0,3)
// CLC1SEL0<LC1D1S4>
extern volatile __bit                   LC1D1S4             __at(0x1E3B4);	// @ (0x3C76 * 8 + 4)
#define                                 LC1D1S4_bit         _BIT_ACCESS(CLC1SEL0,4)
// CLC1SEL0<LC1D1S5>
extern volatile __bit                   LC1D1S5             __at(0x1E3B5);	// @ (0x3C76 * 8 + 5)
#define                                 LC1D1S5_bit         _BIT_ACCESS(CLC1SEL0,5)
// CLC1SEL0<LC1D1S6>
extern volatile __bit                   LC1D1S6             __at(0x1E3B6);	// @ (0x3C76 * 8 + 6)
#define                                 LC1D1S6_bit         _BIT_ACCESS(CLC1SEL0,6)
// CLC1SEL0<LC1D1S7>
extern volatile __bit                   LC1D1S7             __at(0x1E3B7);	// @ (0x3C76 * 8 + 7)
#define                                 LC1D1S7_bit         _BIT_ACCESS(CLC1SEL0,7)
// CLC1SEL1<LC1D2S0>
extern volatile __bit                   LC1D2S0             __at(0x1E3B8);	// @ (0x3C77 * 8 + 0)
#define                                 LC1D2S0_bit         _BIT_ACCESS(CLC1SEL1,0)
// CLC1SEL1<LC1D2S1>
extern volatile __bit                   LC1D2S1             __at(0x1E3B9);	// @ (0x3C77 * 8 + 1)
#define                                 LC1D2S1_bit         _BIT_ACCESS(CLC1SEL1,1)
// CLC1SEL1<LC1D2S2>
extern volatile __bit                   LC1D2S2             __at(0x1E3BA);	// @ (0x3C77 * 8 + 2)
#define                                 LC1D2S2_bit         _BIT_ACCESS(CLC1SEL1,2)
// CLC1SEL1<LC1D2S3>
extern volatile __bit                   LC1D2S3             __at(0x1E3BB);	// @ (0x3C77 * 8 + 3)
#define                                 LC1D2S3_bit         _BIT_ACCESS(CLC1SEL1,3)
// CLC1SEL1<LC1D2S4>
extern volatile __bit                   LC1D2S4             __at(0x1E3BC);	// @ (0x3C77 * 8 + 4)
#define                                 LC1D2S4_bit         _BIT_ACCESS(CLC1SEL1,4)
// CLC1SEL1<LC1D2S5>
extern volatile __bit                   LC1D2S5             __at(0x1E3BD);	// @ (0x3C77 * 8 + 5)
#define                                 LC1D2S5_bit         _BIT_ACCESS(CLC1SEL1,5)
// CLC1SEL1<LC1D2S6>
extern volatile __bit                   LC1D2S6             __at(0x1E3BE);	// @ (0x3C77 * 8 + 6)
#define                                 LC1D2S6_bit         _BIT_ACCESS(CLC1SEL1,6)
// CLC1SEL1<LC1D2S7>
extern volatile __bit                   LC1D2S7             __at(0x1E3BF);	// @ (0x3C77 * 8 + 7)
#define                                 LC1D2S7_bit         _BIT_ACCESS(CLC1SEL1,7)
// CLC1SEL2<LC1D3S0>
extern volatile __bit                   LC1D3S0             __at(0x1E3C0);	// @ (0x3C78 * 8 + 0)
#define                                 LC1D3S0_bit         _BIT_ACCESS(CLC1SEL2,0)
// CLC1SEL2<LC1D3S1>
extern volatile __bit                   LC1D3S1             __at(0x1E3C1);	// @ (0x3C78 * 8 + 1)
#define                                 LC1D3S1_bit         _BIT_ACCESS(CLC1SEL2,1)
// CLC1SEL2<LC1D3S2>
extern volatile __bit                   LC1D3S2             __at(0x1E3C2);	// @ (0x3C78 * 8 + 2)
#define                                 LC1D3S2_bit         _BIT_ACCESS(CLC1SEL2,2)
// CLC1SEL2<LC1D3S3>
extern volatile __bit                   LC1D3S3             __at(0x1E3C3);	// @ (0x3C78 * 8 + 3)
#define                                 LC1D3S3_bit         _BIT_ACCESS(CLC1SEL2,3)
// CLC1SEL2<LC1D3S4>
extern volatile __bit                   LC1D3S4             __at(0x1E3C4);	// @ (0x3C78 * 8 + 4)
#define                                 LC1D3S4_bit         _BIT_ACCESS(CLC1SEL2,4)
// CLC1SEL2<LC1D3S5>
extern volatile __bit                   LC1D3S5             __at(0x1E3C5);	// @ (0x3C78 * 8 + 5)
#define                                 LC1D3S5_bit         _BIT_ACCESS(CLC1SEL2,5)
// CLC1SEL2<LC1D3S6>
extern volatile __bit                   LC1D3S6             __at(0x1E3C6);	// @ (0x3C78 * 8 + 6)
#define                                 LC1D3S6_bit         _BIT_ACCESS(CLC1SEL2,6)
// CLC1SEL2<LC1D3S7>
extern volatile __bit                   LC1D3S7             __at(0x1E3C7);	// @ (0x3C78 * 8 + 7)
#define                                 LC1D3S7_bit         _BIT_ACCESS(CLC1SEL2,7)
// CLC1SEL3<LC1D4S0>
extern volatile __bit                   LC1D4S0             __at(0x1E3C8);	// @ (0x3C79 * 8 + 0)
#define                                 LC1D4S0_bit         _BIT_ACCESS(CLC1SEL3,0)
// CLC1SEL3<LC1D4S1>
extern volatile __bit                   LC1D4S1             __at(0x1E3C9);	// @ (0x3C79 * 8 + 1)
#define                                 LC1D4S1_bit         _BIT_ACCESS(CLC1SEL3,1)
// CLC1SEL3<LC1D4S2>
extern volatile __bit                   LC1D4S2             __at(0x1E3CA);	// @ (0x3C79 * 8 + 2)
#define                                 LC1D4S2_bit         _BIT_ACCESS(CLC1SEL3,2)
// CLC1SEL3<LC1D4S3>
extern volatile __bit                   LC1D4S3             __at(0x1E3CB);	// @ (0x3C79 * 8 + 3)
#define                                 LC1D4S3_bit         _BIT_ACCESS(CLC1SEL3,3)
// CLC1SEL3<LC1D4S4>
extern volatile __bit                   LC1D4S4             __at(0x1E3CC);	// @ (0x3C79 * 8 + 4)
#define                                 LC1D4S4_bit         _BIT_ACCESS(CLC1SEL3,4)
// CLC1SEL3<LC1D4S5>
extern volatile __bit                   LC1D4S5             __at(0x1E3CD);	// @ (0x3C79 * 8 + 5)
#define                                 LC1D4S5_bit         _BIT_ACCESS(CLC1SEL3,5)
// CLC1SEL3<LC1D4S6>
extern volatile __bit                   LC1D4S6             __at(0x1E3CE);	// @ (0x3C79 * 8 + 6)
#define                                 LC1D4S6_bit         _BIT_ACCESS(CLC1SEL3,6)
// CLC1SEL3<LC1D4S7>
extern volatile __bit                   LC1D4S7             __at(0x1E3CF);	// @ (0x3C79 * 8 + 7)
#define                                 LC1D4S7_bit         _BIT_ACCESS(CLC1SEL3,7)
// CLC1CON<LC1EN>
extern volatile __bit                   LC1EN               __at(0x1E3A7);	// @ (0x3C74 * 8 + 7)
#define                                 LC1EN_bit           _BIT_ACCESS(CLC1CON,7)
// CLC1GLS0<LC1G1D1N>
extern volatile __bit                   LC1G1D1N            __at(0x1E3D0);	// @ (0x3C7A * 8 + 0)
#define                                 LC1G1D1N_bit        _BIT_ACCESS(CLC1GLS0,0)
// CLC1GLS0<LC1G1D1T>
extern volatile __bit                   LC1G1D1T            __at(0x1E3D1);	// @ (0x3C7A * 8 + 1)
#define                                 LC1G1D1T_bit        _BIT_ACCESS(CLC1GLS0,1)
// CLC1GLS0<LC1G1D2N>
extern volatile __bit                   LC1G1D2N            __at(0x1E3D2);	// @ (0x3C7A * 8 + 2)
#define                                 LC1G1D2N_bit        _BIT_ACCESS(CLC1GLS0,2)
// CLC1GLS0<LC1G1D2T>
extern volatile __bit                   LC1G1D2T            __at(0x1E3D3);	// @ (0x3C7A * 8 + 3)
#define                                 LC1G1D2T_bit        _BIT_ACCESS(CLC1GLS0,3)
// CLC1GLS0<LC1G1D3N>
extern volatile __bit                   LC1G1D3N            __at(0x1E3D4);	// @ (0x3C7A * 8 + 4)
#define                                 LC1G1D3N_bit        _BIT_ACCESS(CLC1GLS0,4)
// CLC1GLS0<LC1G1D3T>
extern volatile __bit                   LC1G1D3T            __at(0x1E3D5);	// @ (0x3C7A * 8 + 5)
#define                                 LC1G1D3T_bit        _BIT_ACCESS(CLC1GLS0,5)
// CLC1GLS0<LC1G1D4N>
extern volatile __bit                   LC1G1D4N            __at(0x1E3D6);	// @ (0x3C7A * 8 + 6)
#define                                 LC1G1D4N_bit        _BIT_ACCESS(CLC1GLS0,6)
// CLC1GLS0<LC1G1D4T>
extern volatile __bit                   LC1G1D4T            __at(0x1E3D7);	// @ (0x3C7A * 8 + 7)
#define                                 LC1G1D4T_bit        _BIT_ACCESS(CLC1GLS0,7)
// CLC1POL<LC1G1POL>
extern volatile __bit                   LC1G1POL            __at(0x1E3A8);	// @ (0x3C75 * 8 + 0)
#define                                 LC1G1POL_bit        _BIT_ACCESS(CLC1POL,0)
// CLC1GLS1<LC1G2D1N>
extern volatile __bit                   LC1G2D1N            __at(0x1E3D8);	// @ (0x3C7B * 8 + 0)
#define                                 LC1G2D1N_bit        _BIT_ACCESS(CLC1GLS1,0)
// CLC1GLS1<LC1G2D1T>
extern volatile __bit                   LC1G2D1T            __at(0x1E3D9);	// @ (0x3C7B * 8 + 1)
#define                                 LC1G2D1T_bit        _BIT_ACCESS(CLC1GLS1,1)
// CLC1GLS1<LC1G2D2N>
extern volatile __bit                   LC1G2D2N            __at(0x1E3DA);	// @ (0x3C7B * 8 + 2)
#define                                 LC1G2D2N_bit        _BIT_ACCESS(CLC1GLS1,2)
// CLC1GLS1<LC1G2D2T>
extern volatile __bit                   LC1G2D2T            __at(0x1E3DB);	// @ (0x3C7B * 8 + 3)
#define                                 LC1G2D2T_bit        _BIT_ACCESS(CLC1GLS1,3)
// CLC1GLS1<LC1G2D3N>
extern volatile __bit                   LC1G2D3N            __at(0x1E3DC);	// @ (0x3C7B * 8 + 4)
#define                                 LC1G2D3N_bit        _BIT_ACCESS(CLC1GLS1,4)
// CLC1GLS1<LC1G2D3T>
extern volatile __bit                   LC1G2D3T            __at(0x1E3DD);	// @ (0x3C7B * 8 + 5)
#define                                 LC1G2D3T_bit        _BIT_ACCESS(CLC1GLS1,5)
// CLC1GLS1<LC1G2D4N>
extern volatile __bit                   LC1G2D4N            __at(0x1E3DE);	// @ (0x3C7B * 8 + 6)
#define                                 LC1G2D4N_bit        _BIT_ACCESS(CLC1GLS1,6)
// CLC1GLS1<LC1G2D4T>
extern volatile __bit                   LC1G2D4T            __at(0x1E3DF);	// @ (0x3C7B * 8 + 7)
#define                                 LC1G2D4T_bit        _BIT_ACCESS(CLC1GLS1,7)
// CLC1POL<LC1G2POL>
extern volatile __bit                   LC1G2POL            __at(0x1E3A9);	// @ (0x3C75 * 8 + 1)
#define                                 LC1G2POL_bit        _BIT_ACCESS(CLC1POL,1)
// CLC1GLS2<LC1G3D1N>
extern volatile __bit                   LC1G3D1N            __at(0x1E3E0);	// @ (0x3C7C * 8 + 0)
#define                                 LC1G3D1N_bit        _BIT_ACCESS(CLC1GLS2,0)
// CLC1GLS2<LC1G3D1T>
extern volatile __bit                   LC1G3D1T            __at(0x1E3E1);	// @ (0x3C7C * 8 + 1)
#define                                 LC1G3D1T_bit        _BIT_ACCESS(CLC1GLS2,1)
// CLC1GLS2<LC1G3D2N>
extern volatile __bit                   LC1G3D2N            __at(0x1E3E2);	// @ (0x3C7C * 8 + 2)
#define                                 LC1G3D2N_bit        _BIT_ACCESS(CLC1GLS2,2)
// CLC1GLS2<LC1G3D2T>
extern volatile __bit                   LC1G3D2T            __at(0x1E3E3);	// @ (0x3C7C * 8 + 3)
#define                                 LC1G3D2T_bit        _BIT_ACCESS(CLC1GLS2,3)
// CLC1GLS2<LC1G3D3N>
extern volatile __bit                   LC1G3D3N            __at(0x1E3E4);	// @ (0x3C7C * 8 + 4)
#define                                 LC1G3D3N_bit        _BIT_ACCESS(CLC1GLS2,4)
// CLC1GLS2<LC1G3D3T>
extern volatile __bit                   LC1G3D3T            __at(0x1E3E5);	// @ (0x3C7C * 8 + 5)
#define                                 LC1G3D3T_bit        _BIT_ACCESS(CLC1GLS2,5)
// CLC1GLS2<LC1G3D4N>
extern volatile __bit                   LC1G3D4N            __at(0x1E3E6);	// @ (0x3C7C * 8 + 6)
#define                                 LC1G3D4N_bit        _BIT_ACCESS(CLC1GLS2,6)
// CLC1GLS2<LC1G3D4T>
extern volatile __bit                   LC1G3D4T            __at(0x1E3E7);	// @ (0x3C7C * 8 + 7)
#define                                 LC1G3D4T_bit        _BIT_ACCESS(CLC1GLS2,7)
// CLC1POL<LC1G3POL>
extern volatile __bit                   LC1G3POL            __at(0x1E3AA);	// @ (0x3C75 * 8 + 2)
#define                                 LC1G3POL_bit        _BIT_ACCESS(CLC1POL,2)
// CLC1GLS3<LC1G4D1N>
extern volatile __bit                   LC1G4D1N            __at(0x1E3E8);	// @ (0x3C7D * 8 + 0)
#define                                 LC1G4D1N_bit        _BIT_ACCESS(CLC1GLS3,0)
// CLC1GLS3<LC1G4D1T>
extern volatile __bit                   LC1G4D1T            __at(0x1E3E9);	// @ (0x3C7D * 8 + 1)
#define                                 LC1G4D1T_bit        _BIT_ACCESS(CLC1GLS3,1)
// CLC1GLS3<LC1G4D2N>
extern volatile __bit                   LC1G4D2N            __at(0x1E3EA);	// @ (0x3C7D * 8 + 2)
#define                                 LC1G4D2N_bit        _BIT_ACCESS(CLC1GLS3,2)
// CLC1GLS3<LC1G4D2T>
extern volatile __bit                   LC1G4D2T            __at(0x1E3EB);	// @ (0x3C7D * 8 + 3)
#define                                 LC1G4D2T_bit        _BIT_ACCESS(CLC1GLS3,3)
// CLC1GLS3<LC1G4D3N>
extern volatile __bit                   LC1G4D3N            __at(0x1E3EC);	// @ (0x3C7D * 8 + 4)
#define                                 LC1G4D3N_bit        _BIT_ACCESS(CLC1GLS3,4)
// CLC1GLS3<LC1G4D3T>
extern volatile __bit                   LC1G4D3T            __at(0x1E3ED);	// @ (0x3C7D * 8 + 5)
#define                                 LC1G4D3T_bit        _BIT_ACCESS(CLC1GLS3,5)
// CLC1GLS3<LC1G4D4N>
extern volatile __bit                   LC1G4D4N            __at(0x1E3EE);	// @ (0x3C7D * 8 + 6)
#define                                 LC1G4D4N_bit        _BIT_ACCESS(CLC1GLS3,6)
// CLC1GLS3<LC1G4D4T>
extern volatile __bit                   LC1G4D4T            __at(0x1E3EF);	// @ (0x3C7D * 8 + 7)
#define                                 LC1G4D4T_bit        _BIT_ACCESS(CLC1GLS3,7)
// CLC1POL<LC1G4POL>
extern volatile __bit                   LC1G4POL            __at(0x1E3AB);	// @ (0x3C75 * 8 + 3)
#define                                 LC1G4POL_bit        _BIT_ACCESS(CLC1POL,3)
// CLC1CON<LC1INTN>
extern volatile __bit                   LC1INTN             __at(0x1E3A3);	// @ (0x3C74 * 8 + 3)
#define                                 LC1INTN_bit         _BIT_ACCESS(CLC1CON,3)
// CLC1CON<LC1INTP>
extern volatile __bit                   LC1INTP             __at(0x1E3A4);	// @ (0x3C74 * 8 + 4)
#define                                 LC1INTP_bit         _BIT_ACCESS(CLC1CON,4)
// CLC1CON<LC1MODE0>
extern volatile __bit                   LC1MODE0            __at(0x1E3A0);	// @ (0x3C74 * 8 + 0)
#define                                 LC1MODE0_bit        _BIT_ACCESS(CLC1CON,0)
// CLC1CON<LC1MODE1>
extern volatile __bit                   LC1MODE1            __at(0x1E3A1);	// @ (0x3C74 * 8 + 1)
#define                                 LC1MODE1_bit        _BIT_ACCESS(CLC1CON,1)
// CLC1CON<LC1MODE2>
extern volatile __bit                   LC1MODE2            __at(0x1E3A2);	// @ (0x3C74 * 8 + 2)
#define                                 LC1MODE2_bit        _BIT_ACCESS(CLC1CON,2)
// CLC1CON<LC1OE>
extern volatile __bit                   LC1OE               __at(0x1E3A6);	// @ (0x3C74 * 8 + 6)
#define                                 LC1OE_bit           _BIT_ACCESS(CLC1CON,6)
// CLC1CON<LC1OUT>
extern volatile __bit                   LC1OUT              __at(0x1E3A5);	// @ (0x3C74 * 8 + 5)
#define                                 LC1OUT_bit          _BIT_ACCESS(CLC1CON,5)
// CLC1POL<LC1POL>
extern volatile __bit                   LC1POL              __at(0x1E3AF);	// @ (0x3C75 * 8 + 7)
#define                                 LC1POL_bit          _BIT_ACCESS(CLC1POL,7)
// LATC<LC2>
extern volatile __bit                   LC2                 __at(0x1FDE2);	// @ (0x3FBC * 8 + 2)
#define                                 LC2_bit             _BIT_ACCESS(LATC,2)
// CLC2SEL0<LC2D1S0>
extern volatile __bit                   LC2D1S0             __at(0x1E360);	// @ (0x3C6C * 8 + 0)
#define                                 LC2D1S0_bit         _BIT_ACCESS(CLC2SEL0,0)
// CLC2SEL0<LC2D1S1>
extern volatile __bit                   LC2D1S1             __at(0x1E361);	// @ (0x3C6C * 8 + 1)
#define                                 LC2D1S1_bit         _BIT_ACCESS(CLC2SEL0,1)
// CLC2SEL0<LC2D1S2>
extern volatile __bit                   LC2D1S2             __at(0x1E362);	// @ (0x3C6C * 8 + 2)
#define                                 LC2D1S2_bit         _BIT_ACCESS(CLC2SEL0,2)
// CLC2SEL0<LC2D1S3>
extern volatile __bit                   LC2D1S3             __at(0x1E363);	// @ (0x3C6C * 8 + 3)
#define                                 LC2D1S3_bit         _BIT_ACCESS(CLC2SEL0,3)
// CLC2SEL0<LC2D1S4>
extern volatile __bit                   LC2D1S4             __at(0x1E364);	// @ (0x3C6C * 8 + 4)
#define                                 LC2D1S4_bit         _BIT_ACCESS(CLC2SEL0,4)
// CLC2SEL0<LC2D1S5>
extern volatile __bit                   LC2D1S5             __at(0x1E365);	// @ (0x3C6C * 8 + 5)
#define                                 LC2D1S5_bit         _BIT_ACCESS(CLC2SEL0,5)
// CLC2SEL0<LC2D1S6>
extern volatile __bit                   LC2D1S6             __at(0x1E366);	// @ (0x3C6C * 8 + 6)
#define                                 LC2D1S6_bit         _BIT_ACCESS(CLC2SEL0,6)
// CLC2SEL0<LC2D1S7>
extern volatile __bit                   LC2D1S7             __at(0x1E367);	// @ (0x3C6C * 8 + 7)
#define                                 LC2D1S7_bit         _BIT_ACCESS(CLC2SEL0,7)
// CLC2SEL1<LC2D2S0>
extern volatile __bit                   LC2D2S0             __at(0x1E368);	// @ (0x3C6D * 8 + 0)
#define                                 LC2D2S0_bit         _BIT_ACCESS(CLC2SEL1,0)
// CLC2SEL1<LC2D2S1>
extern volatile __bit                   LC2D2S1             __at(0x1E369);	// @ (0x3C6D * 8 + 1)
#define                                 LC2D2S1_bit         _BIT_ACCESS(CLC2SEL1,1)
// CLC2SEL1<LC2D2S2>
extern volatile __bit                   LC2D2S2             __at(0x1E36A);	// @ (0x3C6D * 8 + 2)
#define                                 LC2D2S2_bit         _BIT_ACCESS(CLC2SEL1,2)
// CLC2SEL1<LC2D2S3>
extern volatile __bit                   LC2D2S3             __at(0x1E36B);	// @ (0x3C6D * 8 + 3)
#define                                 LC2D2S3_bit         _BIT_ACCESS(CLC2SEL1,3)
// CLC2SEL1<LC2D2S4>
extern volatile __bit                   LC2D2S4             __at(0x1E36C);	// @ (0x3C6D * 8 + 4)
#define                                 LC2D2S4_bit         _BIT_ACCESS(CLC2SEL1,4)
// CLC2SEL1<LC2D2S5>
extern volatile __bit                   LC2D2S5             __at(0x1E36D);	// @ (0x3C6D * 8 + 5)
#define                                 LC2D2S5_bit         _BIT_ACCESS(CLC2SEL1,5)
// CLC2SEL1<LC2D2S6>
extern volatile __bit                   LC2D2S6             __at(0x1E36E);	// @ (0x3C6D * 8 + 6)
#define                                 LC2D2S6_bit         _BIT_ACCESS(CLC2SEL1,6)
// CLC2SEL1<LC2D2S7>
extern volatile __bit                   LC2D2S7             __at(0x1E36F);	// @ (0x3C6D * 8 + 7)
#define                                 LC2D2S7_bit         _BIT_ACCESS(CLC2SEL1,7)
// CLC2SEL2<LC2D3S0>
extern volatile __bit                   LC2D3S0             __at(0x1E370);	// @ (0x3C6E * 8 + 0)
#define                                 LC2D3S0_bit         _BIT_ACCESS(CLC2SEL2,0)
// CLC2SEL2<LC2D3S1>
extern volatile __bit                   LC2D3S1             __at(0x1E371);	// @ (0x3C6E * 8 + 1)
#define                                 LC2D3S1_bit         _BIT_ACCESS(CLC2SEL2,1)
// CLC2SEL2<LC2D3S2>
extern volatile __bit                   LC2D3S2             __at(0x1E372);	// @ (0x3C6E * 8 + 2)
#define                                 LC2D3S2_bit         _BIT_ACCESS(CLC2SEL2,2)
// CLC2SEL2<LC2D3S3>
extern volatile __bit                   LC2D3S3             __at(0x1E373);	// @ (0x3C6E * 8 + 3)
#define                                 LC2D3S3_bit         _BIT_ACCESS(CLC2SEL2,3)
// CLC2SEL2<LC2D3S4>
extern volatile __bit                   LC2D3S4             __at(0x1E374);	// @ (0x3C6E * 8 + 4)
#define                                 LC2D3S4_bit         _BIT_ACCESS(CLC2SEL2,4)
// CLC2SEL2<LC2D3S5>
extern volatile __bit                   LC2D3S5             __at(0x1E375);	// @ (0x3C6E * 8 + 5)
#define                                 LC2D3S5_bit         _BIT_ACCESS(CLC2SEL2,5)
// CLC2SEL2<LC2D3S6>
extern volatile __bit                   LC2D3S6             __at(0x1E376);	// @ (0x3C6E * 8 + 6)
#define                                 LC2D3S6_bit         _BIT_ACCESS(CLC2SEL2,6)
// CLC2SEL2<LC2D3S7>
extern volatile __bit                   LC2D3S7             __at(0x1E377);	// @ (0x3C6E * 8 + 7)
#define                                 LC2D3S7_bit         _BIT_ACCESS(CLC2SEL2,7)
// CLC2SEL3<LC2D4S0>
extern volatile __bit                   LC2D4S0             __at(0x1E378);	// @ (0x3C6F * 8 + 0)
#define                                 LC2D4S0_bit         _BIT_ACCESS(CLC2SEL3,0)
// CLC2SEL3<LC2D4S1>
extern volatile __bit                   LC2D4S1             __at(0x1E379);	// @ (0x3C6F * 8 + 1)
#define                                 LC2D4S1_bit         _BIT_ACCESS(CLC2SEL3,1)
// CLC2SEL3<LC2D4S2>
extern volatile __bit                   LC2D4S2             __at(0x1E37A);	// @ (0x3C6F * 8 + 2)
#define                                 LC2D4S2_bit         _BIT_ACCESS(CLC2SEL3,2)
// CLC2SEL3<LC2D4S3>
extern volatile __bit                   LC2D4S3             __at(0x1E37B);	// @ (0x3C6F * 8 + 3)
#define                                 LC2D4S3_bit         _BIT_ACCESS(CLC2SEL3,3)
// CLC2SEL3<LC2D4S4>
extern volatile __bit                   LC2D4S4             __at(0x1E37C);	// @ (0x3C6F * 8 + 4)
#define                                 LC2D4S4_bit         _BIT_ACCESS(CLC2SEL3,4)
// CLC2SEL3<LC2D4S5>
extern volatile __bit                   LC2D4S5             __at(0x1E37D);	// @ (0x3C6F * 8 + 5)
#define                                 LC2D4S5_bit         _BIT_ACCESS(CLC2SEL3,5)
// CLC2SEL3<LC2D4S6>
extern volatile __bit                   LC2D4S6             __at(0x1E37E);	// @ (0x3C6F * 8 + 6)
#define                                 LC2D4S6_bit         _BIT_ACCESS(CLC2SEL3,6)
// CLC2SEL3<LC2D4S7>
extern volatile __bit                   LC2D4S7             __at(0x1E37F);	// @ (0x3C6F * 8 + 7)
#define                                 LC2D4S7_bit         _BIT_ACCESS(CLC2SEL3,7)
// CLC2CON<LC2EN>
extern volatile __bit                   LC2EN               __at(0x1E357);	// @ (0x3C6A * 8 + 7)
#define                                 LC2EN_bit           _BIT_ACCESS(CLC2CON,7)
// CLC2GLS0<LC2G1D1N>
extern volatile __bit                   LC2G1D1N            __at(0x1E380);	// @ (0x3C70 * 8 + 0)
#define                                 LC2G1D1N_bit        _BIT_ACCESS(CLC2GLS0,0)
// CLC2GLS0<LC2G1D1T>
extern volatile __bit                   LC2G1D1T            __at(0x1E381);	// @ (0x3C70 * 8 + 1)
#define                                 LC2G1D1T_bit        _BIT_ACCESS(CLC2GLS0,1)
// CLC2GLS0<LC2G1D2N>
extern volatile __bit                   LC2G1D2N            __at(0x1E382);	// @ (0x3C70 * 8 + 2)
#define                                 LC2G1D2N_bit        _BIT_ACCESS(CLC2GLS0,2)
// CLC2GLS0<LC2G1D2T>
extern volatile __bit                   LC2G1D2T            __at(0x1E383);	// @ (0x3C70 * 8 + 3)
#define                                 LC2G1D2T_bit        _BIT_ACCESS(CLC2GLS0,3)
// CLC2GLS0<LC2G1D3N>
extern volatile __bit                   LC2G1D3N            __at(0x1E384);	// @ (0x3C70 * 8 + 4)
#define                                 LC2G1D3N_bit        _BIT_ACCESS(CLC2GLS0,4)
// CLC2GLS0<LC2G1D3T>
extern volatile __bit                   LC2G1D3T            __at(0x1E385);	// @ (0x3C70 * 8 + 5)
#define                                 LC2G1D3T_bit        _BIT_ACCESS(CLC2GLS0,5)
// CLC2GLS0<LC2G1D4N>
extern volatile __bit                   LC2G1D4N            __at(0x1E386);	// @ (0x3C70 * 8 + 6)
#define                                 LC2G1D4N_bit        _BIT_ACCESS(CLC2GLS0,6)
// CLC2GLS0<LC2G1D4T>
extern volatile __bit                   LC2G1D4T            __at(0x1E387);	// @ (0x3C70 * 8 + 7)
#define                                 LC2G1D4T_bit        _BIT_ACCESS(CLC2GLS0,7)
// CLC2POL<LC2G1POL>
extern volatile __bit                   LC2G1POL            __at(0x1E358);	// @ (0x3C6B * 8 + 0)
#define                                 LC2G1POL_bit        _BIT_ACCESS(CLC2POL,0)
// CLC2GLS1<LC2G2D1N>
extern volatile __bit                   LC2G2D1N            __at(0x1E388);	// @ (0x3C71 * 8 + 0)
#define                                 LC2G2D1N_bit        _BIT_ACCESS(CLC2GLS1,0)
// CLC2GLS1<LC2G2D1T>
extern volatile __bit                   LC2G2D1T            __at(0x1E389);	// @ (0x3C71 * 8 + 1)
#define                                 LC2G2D1T_bit        _BIT_ACCESS(CLC2GLS1,1)
// CLC2GLS1<LC2G2D2N>
extern volatile __bit                   LC2G2D2N            __at(0x1E38A);	// @ (0x3C71 * 8 + 2)
#define                                 LC2G2D2N_bit        _BIT_ACCESS(CLC2GLS1,2)
// CLC2GLS1<LC2G2D2T>
extern volatile __bit                   LC2G2D2T            __at(0x1E38B);	// @ (0x3C71 * 8 + 3)
#define                                 LC2G2D2T_bit        _BIT_ACCESS(CLC2GLS1,3)
// CLC2GLS1<LC2G2D3N>
extern volatile __bit                   LC2G2D3N            __at(0x1E38C);	// @ (0x3C71 * 8 + 4)
#define                                 LC2G2D3N_bit        _BIT_ACCESS(CLC2GLS1,4)
// CLC2GLS1<LC2G2D3T>
extern volatile __bit                   LC2G2D3T            __at(0x1E38D);	// @ (0x3C71 * 8 + 5)
#define                                 LC2G2D3T_bit        _BIT_ACCESS(CLC2GLS1,5)
// CLC2GLS1<LC2G2D4N>
extern volatile __bit                   LC2G2D4N            __at(0x1E38E);	// @ (0x3C71 * 8 + 6)
#define                                 LC2G2D4N_bit        _BIT_ACCESS(CLC2GLS1,6)
// CLC2GLS1<LC2G2D4T>
extern volatile __bit                   LC2G2D4T            __at(0x1E38F);	// @ (0x3C71 * 8 + 7)
#define                                 LC2G2D4T_bit        _BIT_ACCESS(CLC2GLS1,7)
// CLC2POL<LC2G2POL>
extern volatile __bit                   LC2G2POL            __at(0x1E359);	// @ (0x3C6B * 8 + 1)
#define                                 LC2G2POL_bit        _BIT_ACCESS(CLC2POL,1)
// CLC2GLS2<LC2G3D1N>
extern volatile __bit                   LC2G3D1N            __at(0x1E390);	// @ (0x3C72 * 8 + 0)
#define                                 LC2G3D1N_bit        _BIT_ACCESS(CLC2GLS2,0)
// CLC2GLS2<LC2G3D1T>
extern volatile __bit                   LC2G3D1T            __at(0x1E391);	// @ (0x3C72 * 8 + 1)
#define                                 LC2G3D1T_bit        _BIT_ACCESS(CLC2GLS2,1)
// CLC2GLS2<LC2G3D2N>
extern volatile __bit                   LC2G3D2N            __at(0x1E392);	// @ (0x3C72 * 8 + 2)
#define                                 LC2G3D2N_bit        _BIT_ACCESS(CLC2GLS2,2)
// CLC2GLS2<LC2G3D2T>
extern volatile __bit                   LC2G3D2T            __at(0x1E393);	// @ (0x3C72 * 8 + 3)
#define                                 LC2G3D2T_bit        _BIT_ACCESS(CLC2GLS2,3)
// CLC2GLS2<LC2G3D3N>
extern volatile __bit                   LC2G3D3N            __at(0x1E394);	// @ (0x3C72 * 8 + 4)
#define                                 LC2G3D3N_bit        _BIT_ACCESS(CLC2GLS2,4)
// CLC2GLS2<LC2G3D3T>
extern volatile __bit                   LC2G3D3T            __at(0x1E395);	// @ (0x3C72 * 8 + 5)
#define                                 LC2G3D3T_bit        _BIT_ACCESS(CLC2GLS2,5)
// CLC2GLS2<LC2G3D4N>
extern volatile __bit                   LC2G3D4N            __at(0x1E396);	// @ (0x3C72 * 8 + 6)
#define                                 LC2G3D4N_bit        _BIT_ACCESS(CLC2GLS2,6)
// CLC2GLS2<LC2G3D4T>
extern volatile __bit                   LC2G3D4T            __at(0x1E397);	// @ (0x3C72 * 8 + 7)
#define                                 LC2G3D4T_bit        _BIT_ACCESS(CLC2GLS2,7)
// CLC2POL<LC2G3POL>
extern volatile __bit                   LC2G3POL            __at(0x1E35A);	// @ (0x3C6B * 8 + 2)
#define                                 LC2G3POL_bit        _BIT_ACCESS(CLC2POL,2)
// CLC2GLS3<LC2G4D1N>
extern volatile __bit                   LC2G4D1N            __at(0x1E398);	// @ (0x3C73 * 8 + 0)
#define                                 LC2G4D1N_bit        _BIT_ACCESS(CLC2GLS3,0)
// CLC2GLS3<LC2G4D1T>
extern volatile __bit                   LC2G4D1T            __at(0x1E399);	// @ (0x3C73 * 8 + 1)
#define                                 LC2G4D1T_bit        _BIT_ACCESS(CLC2GLS3,1)
// CLC2GLS3<LC2G4D2N>
extern volatile __bit                   LC2G4D2N            __at(0x1E39A);	// @ (0x3C73 * 8 + 2)
#define                                 LC2G4D2N_bit        _BIT_ACCESS(CLC2GLS3,2)
// CLC2GLS3<LC2G4D2T>
extern volatile __bit                   LC2G4D2T            __at(0x1E39B);	// @ (0x3C73 * 8 + 3)
#define                                 LC2G4D2T_bit        _BIT_ACCESS(CLC2GLS3,3)
// CLC2GLS3<LC2G4D3N>
extern volatile __bit                   LC2G4D3N            __at(0x1E39C);	// @ (0x3C73 * 8 + 4)
#define                                 LC2G4D3N_bit        _BIT_ACCESS(CLC2GLS3,4)
// CLC2GLS3<LC2G4D3T>
extern volatile __bit                   LC2G4D3T            __at(0x1E39D);	// @ (0x3C73 * 8 + 5)
#define                                 LC2G4D3T_bit        _BIT_ACCESS(CLC2GLS3,5)
// CLC2GLS3<LC2G4D4N>
extern volatile __bit                   LC2G4D4N            __at(0x1E39E);	// @ (0x3C73 * 8 + 6)
#define                                 LC2G4D4N_bit        _BIT_ACCESS(CLC2GLS3,6)
// CLC2GLS3<LC2G4D4T>
extern volatile __bit                   LC2G4D4T            __at(0x1E39F);	// @ (0x3C73 * 8 + 7)
#define                                 LC2G4D4T_bit        _BIT_ACCESS(CLC2GLS3,7)
// CLC2POL<LC2G4POL>
extern volatile __bit                   LC2G4POL            __at(0x1E35B);	// @ (0x3C6B * 8 + 3)
#define                                 LC2G4POL_bit        _BIT_ACCESS(CLC2POL,3)
// CLC2CON<LC2INTN>
extern volatile __bit                   LC2INTN             __at(0x1E353);	// @ (0x3C6A * 8 + 3)
#define                                 LC2INTN_bit         _BIT_ACCESS(CLC2CON,3)
// CLC2CON<LC2INTP>
extern volatile __bit                   LC2INTP             __at(0x1E354);	// @ (0x3C6A * 8 + 4)
#define                                 LC2INTP_bit         _BIT_ACCESS(CLC2CON,4)
// CLC2CON<LC2MODE0>
extern volatile __bit                   LC2MODE0            __at(0x1E350);	// @ (0x3C6A * 8 + 0)
#define                                 LC2MODE0_bit        _BIT_ACCESS(CLC2CON,0)
// CLC2CON<LC2MODE1>
extern volatile __bit                   LC2MODE1            __at(0x1E351);	// @ (0x3C6A * 8 + 1)
#define                                 LC2MODE1_bit        _BIT_ACCESS(CLC2CON,1)
// CLC2CON<LC2MODE2>
extern volatile __bit                   LC2MODE2            __at(0x1E352);	// @ (0x3C6A * 8 + 2)
#define                                 LC2MODE2_bit        _BIT_ACCESS(CLC2CON,2)
// CLC2CON<LC2OE>
extern volatile __bit                   LC2OE               __at(0x1E356);	// @ (0x3C6A * 8 + 6)
#define                                 LC2OE_bit           _BIT_ACCESS(CLC2CON,6)
// CLC2CON<LC2OUT>
extern volatile __bit                   LC2OUT              __at(0x1E355);	// @ (0x3C6A * 8 + 5)
#define                                 LC2OUT_bit          _BIT_ACCESS(CLC2CON,5)
// CLC2POL<LC2POL>
extern volatile __bit                   LC2POL              __at(0x1E35F);	// @ (0x3C6B * 8 + 7)
#define                                 LC2POL_bit          _BIT_ACCESS(CLC2POL,7)
// LATC<LC3>
extern volatile __bit                   LC3                 __at(0x1FDE3);	// @ (0x3FBC * 8 + 3)
#define                                 LC3_bit             _BIT_ACCESS(LATC,3)
// CLC3SEL0<LC3D1S0>
extern volatile __bit                   LC3D1S0             __at(0x1E310);	// @ (0x3C62 * 8 + 0)
#define                                 LC3D1S0_bit         _BIT_ACCESS(CLC3SEL0,0)
// CLC3SEL0<LC3D1S1>
extern volatile __bit                   LC3D1S1             __at(0x1E311);	// @ (0x3C62 * 8 + 1)
#define                                 LC3D1S1_bit         _BIT_ACCESS(CLC3SEL0,1)
// CLC3SEL0<LC3D1S2>
extern volatile __bit                   LC3D1S2             __at(0x1E312);	// @ (0x3C62 * 8 + 2)
#define                                 LC3D1S2_bit         _BIT_ACCESS(CLC3SEL0,2)
// CLC3SEL0<LC3D1S3>
extern volatile __bit                   LC3D1S3             __at(0x1E313);	// @ (0x3C62 * 8 + 3)
#define                                 LC3D1S3_bit         _BIT_ACCESS(CLC3SEL0,3)
// CLC3SEL0<LC3D1S4>
extern volatile __bit                   LC3D1S4             __at(0x1E314);	// @ (0x3C62 * 8 + 4)
#define                                 LC3D1S4_bit         _BIT_ACCESS(CLC3SEL0,4)
// CLC3SEL0<LC3D1S5>
extern volatile __bit                   LC3D1S5             __at(0x1E315);	// @ (0x3C62 * 8 + 5)
#define                                 LC3D1S5_bit         _BIT_ACCESS(CLC3SEL0,5)
// CLC3SEL0<LC3D1S6>
extern volatile __bit                   LC3D1S6             __at(0x1E316);	// @ (0x3C62 * 8 + 6)
#define                                 LC3D1S6_bit         _BIT_ACCESS(CLC3SEL0,6)
// CLC3SEL0<LC3D1S7>
extern volatile __bit                   LC3D1S7             __at(0x1E317);	// @ (0x3C62 * 8 + 7)
#define                                 LC3D1S7_bit         _BIT_ACCESS(CLC3SEL0,7)
// CLC3SEL1<LC3D2S0>
extern volatile __bit                   LC3D2S0             __at(0x1E318);	// @ (0x3C63 * 8 + 0)
#define                                 LC3D2S0_bit         _BIT_ACCESS(CLC3SEL1,0)
// CLC3SEL1<LC3D2S1>
extern volatile __bit                   LC3D2S1             __at(0x1E319);	// @ (0x3C63 * 8 + 1)
#define                                 LC3D2S1_bit         _BIT_ACCESS(CLC3SEL1,1)
// CLC3SEL1<LC3D2S2>
extern volatile __bit                   LC3D2S2             __at(0x1E31A);	// @ (0x3C63 * 8 + 2)
#define                                 LC3D2S2_bit         _BIT_ACCESS(CLC3SEL1,2)
// CLC3SEL1<LC3D2S3>
extern volatile __bit                   LC3D2S3             __at(0x1E31B);	// @ (0x3C63 * 8 + 3)
#define                                 LC3D2S3_bit         _BIT_ACCESS(CLC3SEL1,3)
// CLC3SEL1<LC3D2S4>
extern volatile __bit                   LC3D2S4             __at(0x1E31C);	// @ (0x3C63 * 8 + 4)
#define                                 LC3D2S4_bit         _BIT_ACCESS(CLC3SEL1,4)
// CLC3SEL1<LC3D2S5>
extern volatile __bit                   LC3D2S5             __at(0x1E31D);	// @ (0x3C63 * 8 + 5)
#define                                 LC3D2S5_bit         _BIT_ACCESS(CLC3SEL1,5)
// CLC3SEL1<LC3D2S6>
extern volatile __bit                   LC3D2S6             __at(0x1E31E);	// @ (0x3C63 * 8 + 6)
#define                                 LC3D2S6_bit         _BIT_ACCESS(CLC3SEL1,6)
// CLC3SEL1<LC3D2S7>
extern volatile __bit                   LC3D2S7             __at(0x1E31F);	// @ (0x3C63 * 8 + 7)
#define                                 LC3D2S7_bit         _BIT_ACCESS(CLC3SEL1,7)
// CLC3SEL2<LC3D3S0>
extern volatile __bit                   LC3D3S0             __at(0x1E320);	// @ (0x3C64 * 8 + 0)
#define                                 LC3D3S0_bit         _BIT_ACCESS(CLC3SEL2,0)
// CLC3SEL2<LC3D3S1>
extern volatile __bit                   LC3D3S1             __at(0x1E321);	// @ (0x3C64 * 8 + 1)
#define                                 LC3D3S1_bit         _BIT_ACCESS(CLC3SEL2,1)
// CLC3SEL2<LC3D3S2>
extern volatile __bit                   LC3D3S2             __at(0x1E322);	// @ (0x3C64 * 8 + 2)
#define                                 LC3D3S2_bit         _BIT_ACCESS(CLC3SEL2,2)
// CLC3SEL2<LC3D3S3>
extern volatile __bit                   LC3D3S3             __at(0x1E323);	// @ (0x3C64 * 8 + 3)
#define                                 LC3D3S3_bit         _BIT_ACCESS(CLC3SEL2,3)
// CLC3SEL2<LC3D3S4>
extern volatile __bit                   LC3D3S4             __at(0x1E324);	// @ (0x3C64 * 8 + 4)
#define                                 LC3D3S4_bit         _BIT_ACCESS(CLC3SEL2,4)
// CLC3SEL2<LC3D3S5>
extern volatile __bit                   LC3D3S5             __at(0x1E325);	// @ (0x3C64 * 8 + 5)
#define                                 LC3D3S5_bit         _BIT_ACCESS(CLC3SEL2,5)
// CLC3SEL2<LC3D3S6>
extern volatile __bit                   LC3D3S6             __at(0x1E326);	// @ (0x3C64 * 8 + 6)
#define                                 LC3D3S6_bit         _BIT_ACCESS(CLC3SEL2,6)
// CLC3SEL2<LC3D3S7>
extern volatile __bit                   LC3D3S7             __at(0x1E327);	// @ (0x3C64 * 8 + 7)
#define                                 LC3D3S7_bit         _BIT_ACCESS(CLC3SEL2,7)
// CLC3SEL3<LC3D4S0>
extern volatile __bit                   LC3D4S0             __at(0x1E328);	// @ (0x3C65 * 8 + 0)
#define                                 LC3D4S0_bit         _BIT_ACCESS(CLC3SEL3,0)
// CLC3SEL3<LC3D4S1>
extern volatile __bit                   LC3D4S1             __at(0x1E329);	// @ (0x3C65 * 8 + 1)
#define                                 LC3D4S1_bit         _BIT_ACCESS(CLC3SEL3,1)
// CLC3SEL3<LC3D4S2>
extern volatile __bit                   LC3D4S2             __at(0x1E32A);	// @ (0x3C65 * 8 + 2)
#define                                 LC3D4S2_bit         _BIT_ACCESS(CLC3SEL3,2)
// CLC3SEL3<LC3D4S3>
extern volatile __bit                   LC3D4S3             __at(0x1E32B);	// @ (0x3C65 * 8 + 3)
#define                                 LC3D4S3_bit         _BIT_ACCESS(CLC3SEL3,3)
// CLC3SEL3<LC3D4S4>
extern volatile __bit                   LC3D4S4             __at(0x1E32C);	// @ (0x3C65 * 8 + 4)
#define                                 LC3D4S4_bit         _BIT_ACCESS(CLC3SEL3,4)
// CLC3SEL3<LC3D4S5>
extern volatile __bit                   LC3D4S5             __at(0x1E32D);	// @ (0x3C65 * 8 + 5)
#define                                 LC3D4S5_bit         _BIT_ACCESS(CLC3SEL3,5)
// CLC3SEL3<LC3D4S6>
extern volatile __bit                   LC3D4S6             __at(0x1E32E);	// @ (0x3C65 * 8 + 6)
#define                                 LC3D4S6_bit         _BIT_ACCESS(CLC3SEL3,6)
// CLC3SEL3<LC3D4S7>
extern volatile __bit                   LC3D4S7             __at(0x1E32F);	// @ (0x3C65 * 8 + 7)
#define                                 LC3D4S7_bit         _BIT_ACCESS(CLC3SEL3,7)
// CLC3CON<LC3EN>
extern volatile __bit                   LC3EN               __at(0x1E307);	// @ (0x3C60 * 8 + 7)
#define                                 LC3EN_bit           _BIT_ACCESS(CLC3CON,7)
// CLC3GLS0<LC3G1D1N>
extern volatile __bit                   LC3G1D1N            __at(0x1E330);	// @ (0x3C66 * 8 + 0)
#define                                 LC3G1D1N_bit        _BIT_ACCESS(CLC3GLS0,0)
// CLC3GLS0<LC3G1D1T>
extern volatile __bit                   LC3G1D1T            __at(0x1E331);	// @ (0x3C66 * 8 + 1)
#define                                 LC3G1D1T_bit        _BIT_ACCESS(CLC3GLS0,1)
// CLC3GLS0<LC3G1D2N>
extern volatile __bit                   LC3G1D2N            __at(0x1E332);	// @ (0x3C66 * 8 + 2)
#define                                 LC3G1D2N_bit        _BIT_ACCESS(CLC3GLS0,2)
// CLC3GLS0<LC3G1D2T>
extern volatile __bit                   LC3G1D2T            __at(0x1E333);	// @ (0x3C66 * 8 + 3)
#define                                 LC3G1D2T_bit        _BIT_ACCESS(CLC3GLS0,3)
// CLC3GLS0<LC3G1D3N>
extern volatile __bit                   LC3G1D3N            __at(0x1E334);	// @ (0x3C66 * 8 + 4)
#define                                 LC3G1D3N_bit        _BIT_ACCESS(CLC3GLS0,4)
// CLC3GLS0<LC3G1D3T>
extern volatile __bit                   LC3G1D3T            __at(0x1E335);	// @ (0x3C66 * 8 + 5)
#define                                 LC3G1D3T_bit        _BIT_ACCESS(CLC3GLS0,5)
// CLC3GLS0<LC3G1D4N>
extern volatile __bit                   LC3G1D4N            __at(0x1E336);	// @ (0x3C66 * 8 + 6)
#define                                 LC3G1D4N_bit        _BIT_ACCESS(CLC3GLS0,6)
// CLC3GLS0<LC3G1D4T>
extern volatile __bit                   LC3G1D4T            __at(0x1E337);	// @ (0x3C66 * 8 + 7)
#define                                 LC3G1D4T_bit        _BIT_ACCESS(CLC3GLS0,7)
// CLC3POL<LC3G1POL>
extern volatile __bit                   LC3G1POL            __at(0x1E308);	// @ (0x3C61 * 8 + 0)
#define                                 LC3G1POL_bit        _BIT_ACCESS(CLC3POL,0)
// CLC3GLS1<LC3G2D1N>
extern volatile __bit                   LC3G2D1N            __at(0x1E338);	// @ (0x3C67 * 8 + 0)
#define                                 LC3G2D1N_bit        _BIT_ACCESS(CLC3GLS1,0)
// CLC3GLS1<LC3G2D1T>
extern volatile __bit                   LC3G2D1T            __at(0x1E339);	// @ (0x3C67 * 8 + 1)
#define                                 LC3G2D1T_bit        _BIT_ACCESS(CLC3GLS1,1)
// CLC3GLS1<LC3G2D2N>
extern volatile __bit                   LC3G2D2N            __at(0x1E33A);	// @ (0x3C67 * 8 + 2)
#define                                 LC3G2D2N_bit        _BIT_ACCESS(CLC3GLS1,2)
// CLC3GLS1<LC3G2D2T>
extern volatile __bit                   LC3G2D2T            __at(0x1E33B);	// @ (0x3C67 * 8 + 3)
#define                                 LC3G2D2T_bit        _BIT_ACCESS(CLC3GLS1,3)
// CLC3GLS1<LC3G2D3N>
extern volatile __bit                   LC3G2D3N            __at(0x1E33C);	// @ (0x3C67 * 8 + 4)
#define                                 LC3G2D3N_bit        _BIT_ACCESS(CLC3GLS1,4)
// CLC3GLS1<LC3G2D3T>
extern volatile __bit                   LC3G2D3T            __at(0x1E33D);	// @ (0x3C67 * 8 + 5)
#define                                 LC3G2D3T_bit        _BIT_ACCESS(CLC3GLS1,5)
// CLC3GLS1<LC3G2D4N>
extern volatile __bit                   LC3G2D4N            __at(0x1E33E);	// @ (0x3C67 * 8 + 6)
#define                                 LC3G2D4N_bit        _BIT_ACCESS(CLC3GLS1,6)
// CLC3GLS1<LC3G2D4T>
extern volatile __bit                   LC3G2D4T            __at(0x1E33F);	// @ (0x3C67 * 8 + 7)
#define                                 LC3G2D4T_bit        _BIT_ACCESS(CLC3GLS1,7)
// CLC3POL<LC3G2POL>
extern volatile __bit                   LC3G2POL            __at(0x1E309);	// @ (0x3C61 * 8 + 1)
#define                                 LC3G2POL_bit        _BIT_ACCESS(CLC3POL,1)
// CLC3GLS2<LC3G3D1N>
extern volatile __bit                   LC3G3D1N            __at(0x1E340);	// @ (0x3C68 * 8 + 0)
#define                                 LC3G3D1N_bit        _BIT_ACCESS(CLC3GLS2,0)
// CLC3GLS2<LC3G3D1T>
extern volatile __bit                   LC3G3D1T            __at(0x1E341);	// @ (0x3C68 * 8 + 1)
#define                                 LC3G3D1T_bit        _BIT_ACCESS(CLC3GLS2,1)
// CLC3GLS2<LC3G3D2N>
extern volatile __bit                   LC3G3D2N            __at(0x1E342);	// @ (0x3C68 * 8 + 2)
#define                                 LC3G3D2N_bit        _BIT_ACCESS(CLC3GLS2,2)
// CLC3GLS2<LC3G3D2T>
extern volatile __bit                   LC3G3D2T            __at(0x1E343);	// @ (0x3C68 * 8 + 3)
#define                                 LC3G3D2T_bit        _BIT_ACCESS(CLC3GLS2,3)
// CLC3GLS2<LC3G3D3N>
extern volatile __bit                   LC3G3D3N            __at(0x1E344);	// @ (0x3C68 * 8 + 4)
#define                                 LC3G3D3N_bit        _BIT_ACCESS(CLC3GLS2,4)
// CLC3GLS2<LC3G3D3T>
extern volatile __bit                   LC3G3D3T            __at(0x1E345);	// @ (0x3C68 * 8 + 5)
#define                                 LC3G3D3T_bit        _BIT_ACCESS(CLC3GLS2,5)
// CLC3GLS2<LC3G3D4N>
extern volatile __bit                   LC3G3D4N            __at(0x1E346);	// @ (0x3C68 * 8 + 6)
#define                                 LC3G3D4N_bit        _BIT_ACCESS(CLC3GLS2,6)
// CLC3GLS2<LC3G3D4T>
extern volatile __bit                   LC3G3D4T            __at(0x1E347);	// @ (0x3C68 * 8 + 7)
#define                                 LC3G3D4T_bit        _BIT_ACCESS(CLC3GLS2,7)
// CLC3POL<LC3G3POL>
extern volatile __bit                   LC3G3POL            __at(0x1E30A);	// @ (0x3C61 * 8 + 2)
#define                                 LC3G3POL_bit        _BIT_ACCESS(CLC3POL,2)
// CLC3GLS3<LC3G4D1N>
extern volatile __bit                   LC3G4D1N            __at(0x1E348);	// @ (0x3C69 * 8 + 0)
#define                                 LC3G4D1N_bit        _BIT_ACCESS(CLC3GLS3,0)
// CLC3GLS3<LC3G4D1T>
extern volatile __bit                   LC3G4D1T            __at(0x1E349);	// @ (0x3C69 * 8 + 1)
#define                                 LC3G4D1T_bit        _BIT_ACCESS(CLC3GLS3,1)
// CLC3GLS3<LC3G4D2N>
extern volatile __bit                   LC3G4D2N            __at(0x1E34A);	// @ (0x3C69 * 8 + 2)
#define                                 LC3G4D2N_bit        _BIT_ACCESS(CLC3GLS3,2)
// CLC3GLS3<LC3G4D2T>
extern volatile __bit                   LC3G4D2T            __at(0x1E34B);	// @ (0x3C69 * 8 + 3)
#define                                 LC3G4D2T_bit        _BIT_ACCESS(CLC3GLS3,3)
// CLC3GLS3<LC3G4D3N>
extern volatile __bit                   LC3G4D3N            __at(0x1E34C);	// @ (0x3C69 * 8 + 4)
#define                                 LC3G4D3N_bit        _BIT_ACCESS(CLC3GLS3,4)
// CLC3GLS3<LC3G4D3T>
extern volatile __bit                   LC3G4D3T            __at(0x1E34D);	// @ (0x3C69 * 8 + 5)
#define                                 LC3G4D3T_bit        _BIT_ACCESS(CLC3GLS3,5)
// CLC3GLS3<LC3G4D4N>
extern volatile __bit                   LC3G4D4N            __at(0x1E34E);	// @ (0x3C69 * 8 + 6)
#define                                 LC3G4D4N_bit        _BIT_ACCESS(CLC3GLS3,6)
// CLC3GLS3<LC3G4D4T>
extern volatile __bit                   LC3G4D4T            __at(0x1E34F);	// @ (0x3C69 * 8 + 7)
#define                                 LC3G4D4T_bit        _BIT_ACCESS(CLC3GLS3,7)
// CLC3POL<LC3G4POL>
extern volatile __bit                   LC3G4POL            __at(0x1E30B);	// @ (0x3C61 * 8 + 3)
#define                                 LC3G4POL_bit        _BIT_ACCESS(CLC3POL,3)
// CLC3CON<LC3INTN>
extern volatile __bit                   LC3INTN             __at(0x1E303);	// @ (0x3C60 * 8 + 3)
#define                                 LC3INTN_bit         _BIT_ACCESS(CLC3CON,3)
// CLC3CON<LC3INTP>
extern volatile __bit                   LC3INTP             __at(0x1E304);	// @ (0x3C60 * 8 + 4)
#define                                 LC3INTP_bit         _BIT_ACCESS(CLC3CON,4)
// CLC3CON<LC3MODE0>
extern volatile __bit                   LC3MODE0            __at(0x1E300);	// @ (0x3C60 * 8 + 0)
#define                                 LC3MODE0_bit        _BIT_ACCESS(CLC3CON,0)
// CLC3CON<LC3MODE1>
extern volatile __bit                   LC3MODE1            __at(0x1E301);	// @ (0x3C60 * 8 + 1)
#define                                 LC3MODE1_bit        _BIT_ACCESS(CLC3CON,1)
// CLC3CON<LC3MODE2>
extern volatile __bit                   LC3MODE2            __at(0x1E302);	// @ (0x3C60 * 8 + 2)
#define                                 LC3MODE2_bit        _BIT_ACCESS(CLC3CON,2)
// CLC3CON<LC3OE>
extern volatile __bit                   LC3OE               __at(0x1E306);	// @ (0x3C60 * 8 + 6)
#define                                 LC3OE_bit           _BIT_ACCESS(CLC3CON,6)
// CLC3CON<LC3OUT>
extern volatile __bit                   LC3OUT              __at(0x1E305);	// @ (0x3C60 * 8 + 5)
#define                                 LC3OUT_bit          _BIT_ACCESS(CLC3CON,5)
// CLC3POL<LC3POL>
extern volatile __bit                   LC3POL              __at(0x1E30F);	// @ (0x3C61 * 8 + 7)
#define                                 LC3POL_bit          _BIT_ACCESS(CLC3POL,7)
// LATC<LC4>
extern volatile __bit                   LC4                 __at(0x1FDE4);	// @ (0x3FBC * 8 + 4)
#define                                 LC4_bit             _BIT_ACCESS(LATC,4)
// CLC4SEL0<LC4D1S0>
extern volatile __bit                   LC4D1S0             __at(0x1E2C0);	// @ (0x3C58 * 8 + 0)
#define                                 LC4D1S0_bit         _BIT_ACCESS(CLC4SEL0,0)
// CLC4SEL0<LC4D1S1>
extern volatile __bit                   LC4D1S1             __at(0x1E2C1);	// @ (0x3C58 * 8 + 1)
#define                                 LC4D1S1_bit         _BIT_ACCESS(CLC4SEL0,1)
// CLC4SEL0<LC4D1S2>
extern volatile __bit                   LC4D1S2             __at(0x1E2C2);	// @ (0x3C58 * 8 + 2)
#define                                 LC4D1S2_bit         _BIT_ACCESS(CLC4SEL0,2)
// CLC4SEL0<LC4D1S3>
extern volatile __bit                   LC4D1S3             __at(0x1E2C3);	// @ (0x3C58 * 8 + 3)
#define                                 LC4D1S3_bit         _BIT_ACCESS(CLC4SEL0,3)
// CLC4SEL0<LC4D1S4>
extern volatile __bit                   LC4D1S4             __at(0x1E2C4);	// @ (0x3C58 * 8 + 4)
#define                                 LC4D1S4_bit         _BIT_ACCESS(CLC4SEL0,4)
// CLC4SEL0<LC4D1S5>
extern volatile __bit                   LC4D1S5             __at(0x1E2C5);	// @ (0x3C58 * 8 + 5)
#define                                 LC4D1S5_bit         _BIT_ACCESS(CLC4SEL0,5)
// CLC4SEL0<LC4D1S6>
extern volatile __bit                   LC4D1S6             __at(0x1E2C6);	// @ (0x3C58 * 8 + 6)
#define                                 LC4D1S6_bit         _BIT_ACCESS(CLC4SEL0,6)
// CLC4SEL0<LC4D1S7>
extern volatile __bit                   LC4D1S7             __at(0x1E2C7);	// @ (0x3C58 * 8 + 7)
#define                                 LC4D1S7_bit         _BIT_ACCESS(CLC4SEL0,7)
// CLC4SEL1<LC4D2S0>
extern volatile __bit                   LC4D2S0             __at(0x1E2C8);	// @ (0x3C59 * 8 + 0)
#define                                 LC4D2S0_bit         _BIT_ACCESS(CLC4SEL1,0)
// CLC4SEL1<LC4D2S1>
extern volatile __bit                   LC4D2S1             __at(0x1E2C9);	// @ (0x3C59 * 8 + 1)
#define                                 LC4D2S1_bit         _BIT_ACCESS(CLC4SEL1,1)
// CLC4SEL1<LC4D2S2>
extern volatile __bit                   LC4D2S2             __at(0x1E2CA);	// @ (0x3C59 * 8 + 2)
#define                                 LC4D2S2_bit         _BIT_ACCESS(CLC4SEL1,2)
// CLC4SEL1<LC4D2S3>
extern volatile __bit                   LC4D2S3             __at(0x1E2CB);	// @ (0x3C59 * 8 + 3)
#define                                 LC4D2S3_bit         _BIT_ACCESS(CLC4SEL1,3)
// CLC4SEL1<LC4D2S4>
extern volatile __bit                   LC4D2S4             __at(0x1E2CC);	// @ (0x3C59 * 8 + 4)
#define                                 LC4D2S4_bit         _BIT_ACCESS(CLC4SEL1,4)
// CLC4SEL1<LC4D2S5>
extern volatile __bit                   LC4D2S5             __at(0x1E2CD);	// @ (0x3C59 * 8 + 5)
#define                                 LC4D2S5_bit         _BIT_ACCESS(CLC4SEL1,5)
// CLC4SEL1<LC4D2S6>
extern volatile __bit                   LC4D2S6             __at(0x1E2CE);	// @ (0x3C59 * 8 + 6)
#define                                 LC4D2S6_bit         _BIT_ACCESS(CLC4SEL1,6)
// CLC4SEL1<LC4D2S7>
extern volatile __bit                   LC4D2S7             __at(0x1E2CF);	// @ (0x3C59 * 8 + 7)
#define                                 LC4D2S7_bit         _BIT_ACCESS(CLC4SEL1,7)
// CLC4SEL2<LC4D3S0>
extern volatile __bit                   LC4D3S0             __at(0x1E2D0);	// @ (0x3C5A * 8 + 0)
#define                                 LC4D3S0_bit         _BIT_ACCESS(CLC4SEL2,0)
// CLC4SEL2<LC4D3S1>
extern volatile __bit                   LC4D3S1             __at(0x1E2D1);	// @ (0x3C5A * 8 + 1)
#define                                 LC4D3S1_bit         _BIT_ACCESS(CLC4SEL2,1)
// CLC4SEL2<LC4D3S2>
extern volatile __bit                   LC4D3S2             __at(0x1E2D2);	// @ (0x3C5A * 8 + 2)
#define                                 LC4D3S2_bit         _BIT_ACCESS(CLC4SEL2,2)
// CLC4SEL2<LC4D3S3>
extern volatile __bit                   LC4D3S3             __at(0x1E2D3);	// @ (0x3C5A * 8 + 3)
#define                                 LC4D3S3_bit         _BIT_ACCESS(CLC4SEL2,3)
// CLC4SEL2<LC4D3S4>
extern volatile __bit                   LC4D3S4             __at(0x1E2D4);	// @ (0x3C5A * 8 + 4)
#define                                 LC4D3S4_bit         _BIT_ACCESS(CLC4SEL2,4)
// CLC4SEL2<LC4D3S5>
extern volatile __bit                   LC4D3S5             __at(0x1E2D5);	// @ (0x3C5A * 8 + 5)
#define                                 LC4D3S5_bit         _BIT_ACCESS(CLC4SEL2,5)
// CLC4SEL2<LC4D3S6>
extern volatile __bit                   LC4D3S6             __at(0x1E2D6);	// @ (0x3C5A * 8 + 6)
#define                                 LC4D3S6_bit         _BIT_ACCESS(CLC4SEL2,6)
// CLC4SEL2<LC4D3S7>
extern volatile __bit                   LC4D3S7             __at(0x1E2D7);	// @ (0x3C5A * 8 + 7)
#define                                 LC4D3S7_bit         _BIT_ACCESS(CLC4SEL2,7)
// CLC4SEL3<LC4D4S0>
extern volatile __bit                   LC4D4S0             __at(0x1E2D8);	// @ (0x3C5B * 8 + 0)
#define                                 LC4D4S0_bit         _BIT_ACCESS(CLC4SEL3,0)
// CLC4SEL3<LC4D4S1>
extern volatile __bit                   LC4D4S1             __at(0x1E2D9);	// @ (0x3C5B * 8 + 1)
#define                                 LC4D4S1_bit         _BIT_ACCESS(CLC4SEL3,1)
// CLC4SEL3<LC4D4S2>
extern volatile __bit                   LC4D4S2             __at(0x1E2DA);	// @ (0x3C5B * 8 + 2)
#define                                 LC4D4S2_bit         _BIT_ACCESS(CLC4SEL3,2)
// CLC4SEL3<LC4D4S3>
extern volatile __bit                   LC4D4S3             __at(0x1E2DB);	// @ (0x3C5B * 8 + 3)
#define                                 LC4D4S3_bit         _BIT_ACCESS(CLC4SEL3,3)
// CLC4SEL3<LC4D4S4>
extern volatile __bit                   LC4D4S4             __at(0x1E2DC);	// @ (0x3C5B * 8 + 4)
#define                                 LC4D4S4_bit         _BIT_ACCESS(CLC4SEL3,4)
// CLC4SEL3<LC4D4S5>
extern volatile __bit                   LC4D4S5             __at(0x1E2DD);	// @ (0x3C5B * 8 + 5)
#define                                 LC4D4S5_bit         _BIT_ACCESS(CLC4SEL3,5)
// CLC4SEL3<LC4D4S6>
extern volatile __bit                   LC4D4S6             __at(0x1E2DE);	// @ (0x3C5B * 8 + 6)
#define                                 LC4D4S6_bit         _BIT_ACCESS(CLC4SEL3,6)
// CLC4SEL3<LC4D4S7>
extern volatile __bit                   LC4D4S7             __at(0x1E2DF);	// @ (0x3C5B * 8 + 7)
#define                                 LC4D4S7_bit         _BIT_ACCESS(CLC4SEL3,7)
// CLC4CON<LC4EN>
extern volatile __bit                   LC4EN               __at(0x1E2B7);	// @ (0x3C56 * 8 + 7)
#define                                 LC4EN_bit           _BIT_ACCESS(CLC4CON,7)
// CLC4GLS0<LC4G1D1N>
extern volatile __bit                   LC4G1D1N            __at(0x1E2E0);	// @ (0x3C5C * 8 + 0)
#define                                 LC4G1D1N_bit        _BIT_ACCESS(CLC4GLS0,0)
// CLC4GLS0<LC4G1D1T>
extern volatile __bit                   LC4G1D1T            __at(0x1E2E1);	// @ (0x3C5C * 8 + 1)
#define                                 LC4G1D1T_bit        _BIT_ACCESS(CLC4GLS0,1)
// CLC4GLS0<LC4G1D2N>
extern volatile __bit                   LC4G1D2N            __at(0x1E2E2);	// @ (0x3C5C * 8 + 2)
#define                                 LC4G1D2N_bit        _BIT_ACCESS(CLC4GLS0,2)
// CLC4GLS0<LC4G1D2T>
extern volatile __bit                   LC4G1D2T            __at(0x1E2E3);	// @ (0x3C5C * 8 + 3)
#define                                 LC4G1D2T_bit        _BIT_ACCESS(CLC4GLS0,3)
// CLC4GLS0<LC4G1D3N>
extern volatile __bit                   LC4G1D3N            __at(0x1E2E4);	// @ (0x3C5C * 8 + 4)
#define                                 LC4G1D3N_bit        _BIT_ACCESS(CLC4GLS0,4)
// CLC4GLS0<LC4G1D3T>
extern volatile __bit                   LC4G1D3T            __at(0x1E2E5);	// @ (0x3C5C * 8 + 5)
#define                                 LC4G1D3T_bit        _BIT_ACCESS(CLC4GLS0,5)
// CLC4GLS0<LC4G1D4N>
extern volatile __bit                   LC4G1D4N            __at(0x1E2E6);	// @ (0x3C5C * 8 + 6)
#define                                 LC4G1D4N_bit        _BIT_ACCESS(CLC4GLS0,6)
// CLC4GLS0<LC4G1D4T>
extern volatile __bit                   LC4G1D4T            __at(0x1E2E7);	// @ (0x3C5C * 8 + 7)
#define                                 LC4G1D4T_bit        _BIT_ACCESS(CLC4GLS0,7)
// CLC4POL<LC4G1POL>
extern volatile __bit                   LC4G1POL            __at(0x1E2B8);	// @ (0x3C57 * 8 + 0)
#define                                 LC4G1POL_bit        _BIT_ACCESS(CLC4POL,0)
// CLC4GLS1<LC4G2D1N>
extern volatile __bit                   LC4G2D1N            __at(0x1E2E8);	// @ (0x3C5D * 8 + 0)
#define                                 LC4G2D1N_bit        _BIT_ACCESS(CLC4GLS1,0)
// CLC4GLS1<LC4G2D1T>
extern volatile __bit                   LC4G2D1T            __at(0x1E2E9);	// @ (0x3C5D * 8 + 1)
#define                                 LC4G2D1T_bit        _BIT_ACCESS(CLC4GLS1,1)
// CLC4GLS1<LC4G2D2N>
extern volatile __bit                   LC4G2D2N            __at(0x1E2EA);	// @ (0x3C5D * 8 + 2)
#define                                 LC4G2D2N_bit        _BIT_ACCESS(CLC4GLS1,2)
// CLC4GLS1<LC4G2D2T>
extern volatile __bit                   LC4G2D2T            __at(0x1E2EB);	// @ (0x3C5D * 8 + 3)
#define                                 LC4G2D2T_bit        _BIT_ACCESS(CLC4GLS1,3)
// CLC4GLS1<LC4G2D3N>
extern volatile __bit                   LC4G2D3N            __at(0x1E2EC);	// @ (0x3C5D * 8 + 4)
#define                                 LC4G2D3N_bit        _BIT_ACCESS(CLC4GLS1,4)
// CLC4GLS1<LC4G2D3T>
extern volatile __bit                   LC4G2D3T            __at(0x1E2ED);	// @ (0x3C5D * 8 + 5)
#define                                 LC4G2D3T_bit        _BIT_ACCESS(CLC4GLS1,5)
// CLC4GLS1<LC4G2D4N>
extern volatile __bit                   LC4G2D4N            __at(0x1E2EE);	// @ (0x3C5D * 8 + 6)
#define                                 LC4G2D4N_bit        _BIT_ACCESS(CLC4GLS1,6)
// CLC4GLS1<LC4G2D4T>
extern volatile __bit                   LC4G2D4T            __at(0x1E2EF);	// @ (0x3C5D * 8 + 7)
#define                                 LC4G2D4T_bit        _BIT_ACCESS(CLC4GLS1,7)
// CLC4POL<LC4G2POL>
extern volatile __bit                   LC4G2POL            __at(0x1E2B9);	// @ (0x3C57 * 8 + 1)
#define                                 LC4G2POL_bit        _BIT_ACCESS(CLC4POL,1)
// CLC4GLS2<LC4G3D1N>
extern volatile __bit                   LC4G3D1N            __at(0x1E2F0);	// @ (0x3C5E * 8 + 0)
#define                                 LC4G3D1N_bit        _BIT_ACCESS(CLC4GLS2,0)
// CLC4GLS2<LC4G3D1T>
extern volatile __bit                   LC4G3D1T            __at(0x1E2F1);	// @ (0x3C5E * 8 + 1)
#define                                 LC4G3D1T_bit        _BIT_ACCESS(CLC4GLS2,1)
// CLC4GLS2<LC4G3D2N>
extern volatile __bit                   LC4G3D2N            __at(0x1E2F2);	// @ (0x3C5E * 8 + 2)
#define                                 LC4G3D2N_bit        _BIT_ACCESS(CLC4GLS2,2)
// CLC4GLS2<LC4G3D2T>
extern volatile __bit                   LC4G3D2T            __at(0x1E2F3);	// @ (0x3C5E * 8 + 3)
#define                                 LC4G3D2T_bit        _BIT_ACCESS(CLC4GLS2,3)
// CLC4GLS2<LC4G3D3N>
extern volatile __bit                   LC4G3D3N            __at(0x1E2F4);	// @ (0x3C5E * 8 + 4)
#define                                 LC4G3D3N_bit        _BIT_ACCESS(CLC4GLS2,4)
// CLC4GLS2<LC4G3D3T>
extern volatile __bit                   LC4G3D3T            __at(0x1E2F5);	// @ (0x3C5E * 8 + 5)
#define                                 LC4G3D3T_bit        _BIT_ACCESS(CLC4GLS2,5)
// CLC4GLS2<LC4G3D4N>
extern volatile __bit                   LC4G3D4N            __at(0x1E2F6);	// @ (0x3C5E * 8 + 6)
#define                                 LC4G3D4N_bit        _BIT_ACCESS(CLC4GLS2,6)
// CLC4GLS2<LC4G3D4T>
extern volatile __bit                   LC4G3D4T            __at(0x1E2F7);	// @ (0x3C5E * 8 + 7)
#define                                 LC4G3D4T_bit        _BIT_ACCESS(CLC4GLS2,7)
// CLC4POL<LC4G3POL>
extern volatile __bit                   LC4G3POL            __at(0x1E2BA);	// @ (0x3C57 * 8 + 2)
#define                                 LC4G3POL_bit        _BIT_ACCESS(CLC4POL,2)
// CLC4GLS3<LC4G4D1N>
extern volatile __bit                   LC4G4D1N            __at(0x1E2F8);	// @ (0x3C5F * 8 + 0)
#define                                 LC4G4D1N_bit        _BIT_ACCESS(CLC4GLS3,0)
// CLC4GLS3<LC4G4D1T>
extern volatile __bit                   LC4G4D1T            __at(0x1E2F9);	// @ (0x3C5F * 8 + 1)
#define                                 LC4G4D1T_bit        _BIT_ACCESS(CLC4GLS3,1)
// CLC4GLS3<LC4G4D2N>
extern volatile __bit                   LC4G4D2N            __at(0x1E2FA);	// @ (0x3C5F * 8 + 2)
#define                                 LC4G4D2N_bit        _BIT_ACCESS(CLC4GLS3,2)
// CLC4GLS3<LC4G4D2T>
extern volatile __bit                   LC4G4D2T            __at(0x1E2FB);	// @ (0x3C5F * 8 + 3)
#define                                 LC4G4D2T_bit        _BIT_ACCESS(CLC4GLS3,3)
// CLC4GLS3<LC4G4D3N>
extern volatile __bit                   LC4G4D3N            __at(0x1E2FC);	// @ (0x3C5F * 8 + 4)
#define                                 LC4G4D3N_bit        _BIT_ACCESS(CLC4GLS3,4)
// CLC4GLS3<LC4G4D3T>
extern volatile __bit                   LC4G4D3T            __at(0x1E2FD);	// @ (0x3C5F * 8 + 5)
#define                                 LC4G4D3T_bit        _BIT_ACCESS(CLC4GLS3,5)
// CLC4GLS3<LC4G4D4N>
extern volatile __bit                   LC4G4D4N            __at(0x1E2FE);	// @ (0x3C5F * 8 + 6)
#define                                 LC4G4D4N_bit        _BIT_ACCESS(CLC4GLS3,6)
// CLC4GLS3<LC4G4D4T>
extern volatile __bit                   LC4G4D4T            __at(0x1E2FF);	// @ (0x3C5F * 8 + 7)
#define                                 LC4G4D4T_bit        _BIT_ACCESS(CLC4GLS3,7)
// CLC4POL<LC4G4POL>
extern volatile __bit                   LC4G4POL            __at(0x1E2BB);	// @ (0x3C57 * 8 + 3)
#define                                 LC4G4POL_bit        _BIT_ACCESS(CLC4POL,3)
// CLC4CON<LC4INTN>
extern volatile __bit                   LC4INTN             __at(0x1E2B3);	// @ (0x3C56 * 8 + 3)
#define                                 LC4INTN_bit         _BIT_ACCESS(CLC4CON,3)
// CLC4CON<LC4INTP>
extern volatile __bit                   LC4INTP             __at(0x1E2B4);	// @ (0x3C56 * 8 + 4)
#define                                 LC4INTP_bit         _BIT_ACCESS(CLC4CON,4)
// CLC4CON<LC4MODE0>
extern volatile __bit                   LC4MODE0            __at(0x1E2B0);	// @ (0x3C56 * 8 + 0)
#define                                 LC4MODE0_bit        _BIT_ACCESS(CLC4CON,0)
// CLC4CON<LC4MODE1>
extern volatile __bit                   LC4MODE1            __at(0x1E2B1);	// @ (0x3C56 * 8 + 1)
#define                                 LC4MODE1_bit        _BIT_ACCESS(CLC4CON,1)
// CLC4CON<LC4MODE2>
extern volatile __bit                   LC4MODE2            __at(0x1E2B2);	// @ (0x3C56 * 8 + 2)
#define                                 LC4MODE2_bit        _BIT_ACCESS(CLC4CON,2)
// CLC4CON<LC4OE>
extern volatile __bit                   LC4OE               __at(0x1E2B6);	// @ (0x3C56 * 8 + 6)
#define                                 LC4OE_bit           _BIT_ACCESS(CLC4CON,6)
// CLC4CON<LC4OUT>
extern volatile __bit                   LC4OUT              __at(0x1E2B5);	// @ (0x3C56 * 8 + 5)
#define                                 LC4OUT_bit          _BIT_ACCESS(CLC4CON,5)
// CLC4POL<LC4POL>
extern volatile __bit                   LC4POL              __at(0x1E2BF);	// @ (0x3C57 * 8 + 7)
#define                                 LC4POL_bit          _BIT_ACCESS(CLC4POL,7)
// LATC<LC5>
extern volatile __bit                   LC5                 __at(0x1FDE5);	// @ (0x3FBC * 8 + 5)
#define                                 LC5_bit             _BIT_ACCESS(LATC,5)
// LATC<LC6>
extern volatile __bit                   LC6                 __at(0x1FDE6);	// @ (0x3FBC * 8 + 6)
#define                                 LC6_bit             _BIT_ACCESS(LATC,6)
// LATC<LC7>
extern volatile __bit                   LC7                 __at(0x1FDE7);	// @ (0x3FBC * 8 + 7)
#define                                 LC7_bit             _BIT_ACCESS(LATC,7)
// OSCEN<LFOEN>
extern volatile __bit                   LFOEN               __at(0x1CEEC);	// @ (0x39DD * 8 + 4)
#define                                 LFOEN_bit           _BIT_ACCESS(OSCEN,4)
// OSCSTAT<LFOR>
extern volatile __bit                   LFOR                __at(0x1CEE4);	// @ (0x39DC * 8 + 4)
#define                                 LFOR_bit            _BIT_ACCESS(OSCSTAT,4)
// SPI1CON0<LSBF>
extern volatile __bit                   LSBF                __at(0x1E8A2);	// @ (0x3D14 * 8 + 2)
#define                                 LSBF_bit            _BIT_ACCESS(SPI1CON0,2)
// ADLTHL<LTH0>
extern volatile __bit                   LTH0                __at(0x1F6F0);	// @ (0x3EDE * 8 + 0)
#define                                 LTH0_bit            _BIT_ACCESS(ADLTHL,0)
// ADLTHL<LTH1>
extern volatile __bit                   LTH1                __at(0x1F6F1);	// @ (0x3EDE * 8 + 1)
#define                                 LTH1_bit            _BIT_ACCESS(ADLTHL,1)
// ADLTHH<LTH10>
extern volatile __bit                   LTH10               __at(0x1F6FA);	// @ (0x3EDF * 8 + 2)
#define                                 LTH10_bit           _BIT_ACCESS(ADLTHH,2)
// ADLTHH<LTH11>
extern volatile __bit                   LTH11               __at(0x1F6FB);	// @ (0x3EDF * 8 + 3)
#define                                 LTH11_bit           _BIT_ACCESS(ADLTHH,3)
// ADLTHH<LTH12>
extern volatile __bit                   LTH12               __at(0x1F6FC);	// @ (0x3EDF * 8 + 4)
#define                                 LTH12_bit           _BIT_ACCESS(ADLTHH,4)
// ADLTHH<LTH13>
extern volatile __bit                   LTH13               __at(0x1F6FD);	// @ (0x3EDF * 8 + 5)
#define                                 LTH13_bit           _BIT_ACCESS(ADLTHH,5)
// ADLTHH<LTH14>
extern volatile __bit                   LTH14               __at(0x1F6FE);	// @ (0x3EDF * 8 + 6)
#define                                 LTH14_bit           _BIT_ACCESS(ADLTHH,6)
// ADLTHH<LTH15>
extern volatile __bit                   LTH15               __at(0x1F6FF);	// @ (0x3EDF * 8 + 7)
#define                                 LTH15_bit           _BIT_ACCESS(ADLTHH,7)
// ADLTHL<LTH2>
extern volatile __bit                   LTH2                __at(0x1F6F2);	// @ (0x3EDE * 8 + 2)
#define                                 LTH2_bit            _BIT_ACCESS(ADLTHL,2)
// ADLTHL<LTH3>
extern volatile __bit                   LTH3                __at(0x1F6F3);	// @ (0x3EDE * 8 + 3)
#define                                 LTH3_bit            _BIT_ACCESS(ADLTHL,3)
// ADLTHL<LTH4>
extern volatile __bit                   LTH4                __at(0x1F6F4);	// @ (0x3EDE * 8 + 4)
#define                                 LTH4_bit            _BIT_ACCESS(ADLTHL,4)
// ADLTHL<LTH5>
extern volatile __bit                   LTH5                __at(0x1F6F5);	// @ (0x3EDE * 8 + 5)
#define                                 LTH5_bit            _BIT_ACCESS(ADLTHL,5)
// ADLTHL<LTH6>
extern volatile __bit                   LTH6                __at(0x1F6F6);	// @ (0x3EDE * 8 + 6)
#define                                 LTH6_bit            _BIT_ACCESS(ADLTHL,6)
// ADLTHL<LTH7>
extern volatile __bit                   LTH7                __at(0x1F6F7);	// @ (0x3EDE * 8 + 7)
#define                                 LTH7_bit            _BIT_ACCESS(ADLTHL,7)
// ADLTHH<LTH8>
extern volatile __bit                   LTH8                __at(0x1F6F8);	// @ (0x3EDF * 8 + 0)
#define                                 LTH8_bit            _BIT_ACCESS(ADLTHH,0)
// ADLTHH<LTH9>
extern volatile __bit                   LTH9                __at(0x1F6F9);	// @ (0x3EDF * 8 + 1)
#define                                 LTH9_bit            _BIT_ACCESS(ADLTHH,1)
// ADSTAT<LTHR>
extern volatile __bit                   LTHR                __at(0x1F7E5);	// @ (0x3EFC * 8 + 5)
#define                                 LTHR_bit            _BIT_ACCESS(ADSTAT,5)
// MAINPR<MAINPR0>
extern volatile __bit                   MAINPR0             __at(0x1CF90);	// @ (0x39F2 * 8 + 0)
#define                                 MAINPR0_bit         _BIT_ACCESS(MAINPR,0)
// MAINPR<MAINPR1>
extern volatile __bit                   MAINPR1             __at(0x1CF91);	// @ (0x39F2 * 8 + 1)
#define                                 MAINPR1_bit         _BIT_ACCESS(MAINPR,1)
// MAINPR<MAINPR2>
extern volatile __bit                   MAINPR2             __at(0x1CF92);	// @ (0x39F2 * 8 + 2)
#define                                 MAINPR2_bit         _BIT_ACCESS(MAINPR,2)
// ADSTAT<MATH>
extern volatile __bit                   MATH                __at(0x1F7E4);	// @ (0x3EFC * 8 + 4)
#define                                 MATH_bit            _BIT_ACCESS(ADSTAT,4)
// ADCON2<MD0>
extern volatile __bit                   MD0                 __at(0x1F7D0);	// @ (0x3EFA * 8 + 0)
#define                                 MD0_bit             _BIT_ACCESS(ADCON2,0)
// ADCON2<MD1>
extern volatile __bit                   MD1                 __at(0x1F7D1);	// @ (0x3EFA * 8 + 1)
#define                                 MD1_bit             _BIT_ACCESS(ADCON2,1)
// T0CON0<MD16>
extern volatile __bit                   MD16                __at(0x1FDC4);	// @ (0x3FB8 * 8 + 4)
#define                                 MD16_bit            _BIT_ACCESS(T0CON0,4)
// MD1CON0<MD1BIT>
extern volatile __bit                   MD1BIT              __at(0x1E7D0);	// @ (0x3CFA * 8 + 0)
#define                                 MD1BIT_bit          _BIT_ACCESS(MD1CON0,0)
// MD1CARH<MD1CH0>
extern volatile __bit                   MD1CH0              __at(0x1E7F0);	// @ (0x3CFE * 8 + 0)
#define                                 MD1CH0_bit          _BIT_ACCESS(MD1CARH,0)
// MD1CARH<MD1CH1>
extern volatile __bit                   MD1CH1              __at(0x1E7F1);	// @ (0x3CFE * 8 + 1)
#define                                 MD1CH1_bit          _BIT_ACCESS(MD1CARH,1)
// MD1CARH<MD1CH2>
extern volatile __bit                   MD1CH2              __at(0x1E7F2);	// @ (0x3CFE * 8 + 2)
#define                                 MD1CH2_bit          _BIT_ACCESS(MD1CARH,2)
// MD1CARH<MD1CH3>
extern volatile __bit                   MD1CH3              __at(0x1E7F3);	// @ (0x3CFE * 8 + 3)
#define                                 MD1CH3_bit          _BIT_ACCESS(MD1CARH,3)
// MD1CARH<MD1CH4>
extern volatile __bit                   MD1CH4              __at(0x1E7F4);	// @ (0x3CFE * 8 + 4)
#define                                 MD1CH4_bit          _BIT_ACCESS(MD1CARH,4)
// MD1CON1<MD1CHPOL>
extern volatile __bit                   MD1CHPOL            __at(0x1E7DD);	// @ (0x3CFB * 8 + 5)
#define                                 MD1CHPOL_bit        _BIT_ACCESS(MD1CON1,5)
// MD1CON1<MD1CHSYNC>
extern volatile __bit                   MD1CHSYNC           __at(0x1E7DC);	// @ (0x3CFB * 8 + 4)
#define                                 MD1CHSYNC_bit       _BIT_ACCESS(MD1CON1,4)
// MD1CARL<MD1CL0>
extern volatile __bit                   MD1CL0              __at(0x1E7E8);	// @ (0x3CFD * 8 + 0)
#define                                 MD1CL0_bit          _BIT_ACCESS(MD1CARL,0)
// MD1CARL<MD1CL1>
extern volatile __bit                   MD1CL1              __at(0x1E7E9);	// @ (0x3CFD * 8 + 1)
#define                                 MD1CL1_bit          _BIT_ACCESS(MD1CARL,1)
// MD1CARL<MD1CL2>
extern volatile __bit                   MD1CL2              __at(0x1E7EA);	// @ (0x3CFD * 8 + 2)
#define                                 MD1CL2_bit          _BIT_ACCESS(MD1CARL,2)
// MD1CARL<MD1CL3>
extern volatile __bit                   MD1CL3              __at(0x1E7EB);	// @ (0x3CFD * 8 + 3)
#define                                 MD1CL3_bit          _BIT_ACCESS(MD1CARL,3)
// MD1CARL<MD1CL4>
extern volatile __bit                   MD1CL4              __at(0x1E7EC);	// @ (0x3CFD * 8 + 4)
#define                                 MD1CL4_bit          _BIT_ACCESS(MD1CARL,4)
// MD1CON1<MD1CLPOL>
extern volatile __bit                   MD1CLPOL            __at(0x1E7D9);	// @ (0x3CFB * 8 + 1)
#define                                 MD1CLPOL_bit        _BIT_ACCESS(MD1CON1,1)
// MD1CON1<MD1CLSYNC>
extern volatile __bit                   MD1CLSYNC           __at(0x1E7D8);	// @ (0x3CFB * 8 + 0)
#define                                 MD1CLSYNC_bit       _BIT_ACCESS(MD1CON1,0)
// MD1CON0<MD1EN>
extern volatile __bit                   MD1EN               __at(0x1E7D7);	// @ (0x3CFA * 8 + 7)
#define                                 MD1EN_bit           _BIT_ACCESS(MD1CON0,7)
// MD1SRC<MD1MS0>
extern volatile __bit                   MD1MS0              __at(0x1E7E0);	// @ (0x3CFC * 8 + 0)
#define                                 MD1MS0_bit          _BIT_ACCESS(MD1SRC,0)
// MD1SRC<MD1MS1>
extern volatile __bit                   MD1MS1              __at(0x1E7E1);	// @ (0x3CFC * 8 + 1)
#define                                 MD1MS1_bit          _BIT_ACCESS(MD1SRC,1)
// MD1SRC<MD1MS2>
extern volatile __bit                   MD1MS2              __at(0x1E7E2);	// @ (0x3CFC * 8 + 2)
#define                                 MD1MS2_bit          _BIT_ACCESS(MD1SRC,2)
// MD1SRC<MD1MS3>
extern volatile __bit                   MD1MS3              __at(0x1E7E3);	// @ (0x3CFC * 8 + 3)
#define                                 MD1MS3_bit          _BIT_ACCESS(MD1SRC,3)
// MD1SRC<MD1MS4>
extern volatile __bit                   MD1MS4              __at(0x1E7E4);	// @ (0x3CFC * 8 + 4)
#define                                 MD1MS4_bit          _BIT_ACCESS(MD1SRC,4)
// MD1CON0<MD1OPOL>
extern volatile __bit                   MD1OPOL             __at(0x1E7D4);	// @ (0x3CFA * 8 + 4)
#define                                 MD1OPOL_bit         _BIT_ACCESS(MD1CON0,4)
// MD1CON0<MD1OUT>
extern volatile __bit                   MD1OUT              __at(0x1E7D5);	// @ (0x3CFA * 8 + 5)
#define                                 MD1OUT_bit          _BIT_ACCESS(MD1CON0,5)
// ADCON2<MD2>
extern volatile __bit                   MD2                 __at(0x1F7D2);	// @ (0x3EFA * 8 + 2)
#define                                 MD2_bit             _BIT_ACCESS(ADCON2,2)
// PCON1<MEMV>
extern volatile __bit                   MEMV                __at(0x1FF89);	// @ (0x3FF1 * 8 + 1)
#define                                 MEMV_bit            _BIT_ACCESS(PCON1,1)
// OSCEN<MFOEN>
extern volatile __bit                   MFOEN               __at(0x1CEED);	// @ (0x39DD * 8 + 5)
#define                                 MFOEN_bit           _BIT_ACCESS(OSCEN,5)
// OSCSTAT<MFOR>
extern volatile __bit                   MFOR                __at(0x1CEE5);	// @ (0x39DC * 8 + 5)
#define                                 MFOR_bit            _BIT_ACCESS(OSCSTAT,5)
// SCANCON0<MREG>
extern volatile __bit                   MREG                __at(0x1CBE2);	// @ (0x397C * 8 + 2)
#define                                 MREG_bit            _BIT_ACCESS(SCANCON0,2)
// MD1SRC<MS0>
extern volatile __bit                   MS0                 __at(0x1E7E0);	// @ (0x3CFC * 8 + 0)
#define                                 MS0_bit             _BIT_ACCESS(MD1SRC,0)
// MD1SRC<MS1>
extern volatile __bit                   MS1                 __at(0x1E7E1);	// @ (0x3CFC * 8 + 1)
#define                                 MS1_bit             _BIT_ACCESS(MD1SRC,1)
// MD1SRC<MS2>
extern volatile __bit                   MS2                 __at(0x1E7E2);	// @ (0x3CFC * 8 + 2)
#define                                 MS2_bit             _BIT_ACCESS(MD1SRC,2)
// MD1SRC<MS3>
extern volatile __bit                   MS3                 __at(0x1E7E3);	// @ (0x3CFC * 8 + 3)
#define                                 MS3_bit             _BIT_ACCESS(MD1SRC,3)
// MD1SRC<MS4>
extern volatile __bit                   MS4                 __at(0x1E7E4);	// @ (0x3CFC * 8 + 4)
#define                                 MS4_bit             _BIT_ACCESS(MD1SRC,4)
// SPI1CON0<MST>
extern volatile __bit                   MST                 __at(0x1E8A1);	// @ (0x3D14 * 8 + 1)
#define                                 MST_bit             _BIT_ACCESS(SPI1CON0,1)
// I2C1ERR<NACK1IE>
extern volatile __bit                   NACK1IE             __at(0x1EBB0);	// @ (0x3D76 * 8 + 0)
#define                                 NACK1IE_bit         _BIT_ACCESS(I2C1ERR,0)
// I2C1ERR<NACK1IF>
extern volatile __bit                   NACK1IF             __at(0x1EBB4);	// @ (0x3D76 * 8 + 4)
#define                                 NACK1IF_bit         _BIT_ACCESS(I2C1ERR,4)
// I2C2ERR<NACK2IE>
extern volatile __bit                   NACK2IE             __at(0x1EB00);	// @ (0x3D60 * 8 + 0)
#define                                 NACK2IE_bit         _BIT_ACCESS(I2C2ERR,0)
// I2C2ERR<NACK2IF>
extern volatile __bit                   NACK2IF             __at(0x1EB04);	// @ (0x3D60 * 8 + 4)
#define                                 NACK2IF_bit         _BIT_ACCESS(I2C2ERR,4)
// NCO1ACCL<NCO1ACC0>
extern volatile __bit                   NCO1ACC0            __at(0x1F9C0);	// @ (0x3F38 * 8 + 0)
#define                                 NCO1ACC0_bit        _BIT_ACCESS(NCO1ACCL,0)
// NCO1ACCL<NCO1ACC1>
extern volatile __bit                   NCO1ACC1            __at(0x1F9C1);	// @ (0x3F38 * 8 + 1)
#define                                 NCO1ACC1_bit        _BIT_ACCESS(NCO1ACCL,1)
// NCO1ACCH<NCO1ACC10>
extern volatile __bit                   NCO1ACC10           __at(0x1F9CA);	// @ (0x3F39 * 8 + 2)
#define                                 NCO1ACC10_bit       _BIT_ACCESS(NCO1ACCH,2)
// NCO1ACCH<NCO1ACC11>
extern volatile __bit                   NCO1ACC11           __at(0x1F9CB);	// @ (0x3F39 * 8 + 3)
#define                                 NCO1ACC11_bit       _BIT_ACCESS(NCO1ACCH,3)
// NCO1ACCH<NCO1ACC12>
extern volatile __bit                   NCO1ACC12           __at(0x1F9CC);	// @ (0x3F39 * 8 + 4)
#define                                 NCO1ACC12_bit       _BIT_ACCESS(NCO1ACCH,4)
// NCO1ACCH<NCO1ACC13>
extern volatile __bit                   NCO1ACC13           __at(0x1F9CD);	// @ (0x3F39 * 8 + 5)
#define                                 NCO1ACC13_bit       _BIT_ACCESS(NCO1ACCH,5)
// NCO1ACCH<NCO1ACC14>
extern volatile __bit                   NCO1ACC14           __at(0x1F9CE);	// @ (0x3F39 * 8 + 6)
#define                                 NCO1ACC14_bit       _BIT_ACCESS(NCO1ACCH,6)
// NCO1ACCH<NCO1ACC15>
extern volatile __bit                   NCO1ACC15           __at(0x1F9CF);	// @ (0x3F39 * 8 + 7)
#define                                 NCO1ACC15_bit       _BIT_ACCESS(NCO1ACCH,7)
// NCO1ACCU<NCO1ACC16>
extern volatile __bit                   NCO1ACC16           __at(0x1F9D0);	// @ (0x3F3A * 8 + 0)
#define                                 NCO1ACC16_bit       _BIT_ACCESS(NCO1ACCU,0)
// NCO1ACCU<NCO1ACC17>
extern volatile __bit                   NCO1ACC17           __at(0x1F9D1);	// @ (0x3F3A * 8 + 1)
#define                                 NCO1ACC17_bit       _BIT_ACCESS(NCO1ACCU,1)
// NCO1ACCU<NCO1ACC18>
extern volatile __bit                   NCO1ACC18           __at(0x1F9D2);	// @ (0x3F3A * 8 + 2)
#define                                 NCO1ACC18_bit       _BIT_ACCESS(NCO1ACCU,2)
// NCO1ACCU<NCO1ACC19>
extern volatile __bit                   NCO1ACC19           __at(0x1F9D3);	// @ (0x3F3A * 8 + 3)
#define                                 NCO1ACC19_bit       _BIT_ACCESS(NCO1ACCU,3)
// NCO1ACCL<NCO1ACC2>
extern volatile __bit                   NCO1ACC2            __at(0x1F9C2);	// @ (0x3F38 * 8 + 2)
#define                                 NCO1ACC2_bit        _BIT_ACCESS(NCO1ACCL,2)
// NCO1ACCL<NCO1ACC3>
extern volatile __bit                   NCO1ACC3            __at(0x1F9C3);	// @ (0x3F38 * 8 + 3)
#define                                 NCO1ACC3_bit        _BIT_ACCESS(NCO1ACCL,3)
// NCO1ACCL<NCO1ACC4>
extern volatile __bit                   NCO1ACC4            __at(0x1F9C4);	// @ (0x3F38 * 8 + 4)
#define                                 NCO1ACC4_bit        _BIT_ACCESS(NCO1ACCL,4)
// NCO1ACCL<NCO1ACC5>
extern volatile __bit                   NCO1ACC5            __at(0x1F9C5);	// @ (0x3F38 * 8 + 5)
#define                                 NCO1ACC5_bit        _BIT_ACCESS(NCO1ACCL,5)
// NCO1ACCL<NCO1ACC6>
extern volatile __bit                   NCO1ACC6            __at(0x1F9C6);	// @ (0x3F38 * 8 + 6)
#define                                 NCO1ACC6_bit        _BIT_ACCESS(NCO1ACCL,6)
// NCO1ACCL<NCO1ACC7>
extern volatile __bit                   NCO1ACC7            __at(0x1F9C7);	// @ (0x3F38 * 8 + 7)
#define                                 NCO1ACC7_bit        _BIT_ACCESS(NCO1ACCL,7)
// NCO1ACCH<NCO1ACC8>
extern volatile __bit                   NCO1ACC8            __at(0x1F9C8);	// @ (0x3F39 * 8 + 0)
#define                                 NCO1ACC8_bit        _BIT_ACCESS(NCO1ACCH,0)
// NCO1ACCH<NCO1ACC9>
extern volatile __bit                   NCO1ACC9            __at(0x1F9C9);	// @ (0x3F39 * 8 + 1)
#define                                 NCO1ACC9_bit        _BIT_ACCESS(NCO1ACCH,1)
// NCO1CLK<NCO1CKS0>
extern volatile __bit                   NCO1CKS0            __at(0x1F9F8);	// @ (0x3F3F * 8 + 0)
#define                                 NCO1CKS0_bit        _BIT_ACCESS(NCO1CLK,0)
// NCO1CLK<NCO1CKS1>
extern volatile __bit                   NCO1CKS1            __at(0x1F9F9);	// @ (0x3F3F * 8 + 1)
#define                                 NCO1CKS1_bit        _BIT_ACCESS(NCO1CLK,1)
// NCO1CLK<NCO1CKS2>
extern volatile __bit                   NCO1CKS2            __at(0x1F9FA);	// @ (0x3F3F * 8 + 2)
#define                                 NCO1CKS2_bit        _BIT_ACCESS(NCO1CLK,2)
// NCO1CLK<NCO1CKS3>
extern volatile __bit                   NCO1CKS3            __at(0x1F9FB);	// @ (0x3F3F * 8 + 3)
#define                                 NCO1CKS3_bit        _BIT_ACCESS(NCO1CLK,3)
// NCO1CON<NCO1EN>
extern volatile __bit                   NCO1EN              __at(0x1F9F7);	// @ (0x3F3E * 8 + 7)
#define                                 NCO1EN_bit          _BIT_ACCESS(NCO1CON,7)
// PIE4<NCO1IE>
extern volatile __bit                   NCO1IE              __at(0x1CCA5);	// @ (0x3994 * 8 + 5)
#define                                 NCO1IE_bit          _BIT_ACCESS(PIE4,5)
// PIR4<NCO1IF>
extern volatile __bit                   NCO1IF              __at(0x1CD25);	// @ (0x39A4 * 8 + 5)
#define                                 NCO1IF_bit          _BIT_ACCESS(PIR4,5)
// NCO1INCL<NCO1INC0>
extern volatile __bit                   NCO1INC0            __at(0x1F9D8);	// @ (0x3F3B * 8 + 0)
#define                                 NCO1INC0_bit        _BIT_ACCESS(NCO1INCL,0)
// NCO1INCL<NCO1INC1>
extern volatile __bit                   NCO1INC1            __at(0x1F9D9);	// @ (0x3F3B * 8 + 1)
#define                                 NCO1INC1_bit        _BIT_ACCESS(NCO1INCL,1)
// NCO1INCH<NCO1INC10>
extern volatile __bit                   NCO1INC10           __at(0x1F9E2);	// @ (0x3F3C * 8 + 2)
#define                                 NCO1INC10_bit       _BIT_ACCESS(NCO1INCH,2)
// NCO1INCH<NCO1INC11>
extern volatile __bit                   NCO1INC11           __at(0x1F9E3);	// @ (0x3F3C * 8 + 3)
#define                                 NCO1INC11_bit       _BIT_ACCESS(NCO1INCH,3)
// NCO1INCH<NCO1INC12>
extern volatile __bit                   NCO1INC12           __at(0x1F9E4);	// @ (0x3F3C * 8 + 4)
#define                                 NCO1INC12_bit       _BIT_ACCESS(NCO1INCH,4)
// NCO1INCH<NCO1INC13>
extern volatile __bit                   NCO1INC13           __at(0x1F9E5);	// @ (0x3F3C * 8 + 5)
#define                                 NCO1INC13_bit       _BIT_ACCESS(NCO1INCH,5)
// NCO1INCH<NCO1INC14>
extern volatile __bit                   NCO1INC14           __at(0x1F9E6);	// @ (0x3F3C * 8 + 6)
#define                                 NCO1INC14_bit       _BIT_ACCESS(NCO1INCH,6)
// NCO1INCH<NCO1INC15>
extern volatile __bit                   NCO1INC15           __at(0x1F9E7);	// @ (0x3F3C * 8 + 7)
#define                                 NCO1INC15_bit       _BIT_ACCESS(NCO1INCH,7)
// NCO1INCU<NCO1INC16>
extern volatile __bit                   NCO1INC16           __at(0x1F9E8);	// @ (0x3F3D * 8 + 0)
#define                                 NCO1INC16_bit       _BIT_ACCESS(NCO1INCU,0)
// NCO1INCU<NCO1INC17>
extern volatile __bit                   NCO1INC17           __at(0x1F9E9);	// @ (0x3F3D * 8 + 1)
#define                                 NCO1INC17_bit       _BIT_ACCESS(NCO1INCU,1)
// NCO1INCU<NCO1INC18>
extern volatile __bit                   NCO1INC18           __at(0x1F9EA);	// @ (0x3F3D * 8 + 2)
#define                                 NCO1INC18_bit       _BIT_ACCESS(NCO1INCU,2)
// NCO1INCU<NCO1INC19>
extern volatile __bit                   NCO1INC19           __at(0x1F9EB);	// @ (0x3F3D * 8 + 3)
#define                                 NCO1INC19_bit       _BIT_ACCESS(NCO1INCU,3)
// NCO1INCL<NCO1INC2>
extern volatile __bit                   NCO1INC2            __at(0x1F9DA);	// @ (0x3F3B * 8 + 2)
#define                                 NCO1INC2_bit        _BIT_ACCESS(NCO1INCL,2)
// NCO1INCL<NCO1INC3>
extern volatile __bit                   NCO1INC3            __at(0x1F9DB);	// @ (0x3F3B * 8 + 3)
#define                                 NCO1INC3_bit        _BIT_ACCESS(NCO1INCL,3)
// NCO1INCL<NCO1INC4>
extern volatile __bit                   NCO1INC4            __at(0x1F9DC);	// @ (0x3F3B * 8 + 4)
#define                                 NCO1INC4_bit        _BIT_ACCESS(NCO1INCL,4)
// NCO1INCL<NCO1INC5>
extern volatile __bit                   NCO1INC5            __at(0x1F9DD);	// @ (0x3F3B * 8 + 5)
#define                                 NCO1INC5_bit        _BIT_ACCESS(NCO1INCL,5)
// NCO1INCL<NCO1INC6>
extern volatile __bit                   NCO1INC6            __at(0x1F9DE);	// @ (0x3F3B * 8 + 6)
#define                                 NCO1INC6_bit        _BIT_ACCESS(NCO1INCL,6)
// NCO1INCL<NCO1INC7>
extern volatile __bit                   NCO1INC7            __at(0x1F9DF);	// @ (0x3F3B * 8 + 7)
#define                                 NCO1INC7_bit        _BIT_ACCESS(NCO1INCL,7)
// NCO1INCH<NCO1INC8>
extern volatile __bit                   NCO1INC8            __at(0x1F9E0);	// @ (0x3F3C * 8 + 0)
#define                                 NCO1INC8_bit        _BIT_ACCESS(NCO1INCH,0)
// NCO1INCH<NCO1INC9>
extern volatile __bit                   NCO1INC9            __at(0x1F9E1);	// @ (0x3F3C * 8 + 1)
#define                                 NCO1INC9_bit        _BIT_ACCESS(NCO1INCH,1)
// IPR4<NCO1IP>
extern volatile __bit                   NCO1IP              __at(0x1CC25);	// @ (0x3984 * 8 + 5)
#define                                 NCO1IP_bit          _BIT_ACCESS(IPR4,5)
// PMD1<NCO1MD>
extern volatile __bit                   NCO1MD              __at(0x1CE0F);	// @ (0x39C1 * 8 + 7)
#define                                 NCO1MD_bit          _BIT_ACCESS(PMD1,7)
// NCO1CON<NCO1OUT>
extern volatile __bit                   NCO1OUT             __at(0x1F9F5);	// @ (0x3F3E * 8 + 5)
#define                                 NCO1OUT_bit         _BIT_ACCESS(NCO1CON,5)
// NCO1CON<NCO1PFM>
extern volatile __bit                   NCO1PFM             __at(0x1F9F0);	// @ (0x3F3E * 8 + 0)
#define                                 NCO1PFM_bit         _BIT_ACCESS(NCO1CON,0)
// NCO1CON<NCO1POL>
extern volatile __bit                   NCO1POL             __at(0x1F9F4);	// @ (0x3F3E * 8 + 4)
#define                                 NCO1POL_bit         _BIT_ACCESS(NCO1CON,4)
// NCO1CLK<NCO1PWS0>
extern volatile __bit                   NCO1PWS0            __at(0x1F9FD);	// @ (0x3F3F * 8 + 5)
#define                                 NCO1PWS0_bit        _BIT_ACCESS(NCO1CLK,5)
// NCO1CLK<NCO1PWS1>
extern volatile __bit                   NCO1PWS1            __at(0x1F9FE);	// @ (0x3F3F * 8 + 6)
#define                                 NCO1PWS1_bit        _BIT_ACCESS(NCO1CLK,6)
// NCO1CLK<NCO1PWS2>
extern volatile __bit                   NCO1PWS2            __at(0x1F9FF);	// @ (0x3F3F * 8 + 7)
#define                                 NCO1PWS2_bit        _BIT_ACCESS(NCO1CLK,7)
// OSCCON1<NDIV0>
extern volatile __bit                   NDIV0               __at(0x1CEC8);	// @ (0x39D9 * 8 + 0)
#define                                 NDIV0_bit           _BIT_ACCESS(OSCCON1,0)
// OSCCON1<NDIV1>
extern volatile __bit                   NDIV1               __at(0x1CEC9);	// @ (0x39D9 * 8 + 1)
#define                                 NDIV1_bit           _BIT_ACCESS(OSCCON1,1)
// OSCCON1<NDIV2>
extern volatile __bit                   NDIV2               __at(0x1CECA);	// @ (0x39D9 * 8 + 2)
#define                                 NDIV2_bit           _BIT_ACCESS(OSCCON1,2)
// OSCCON1<NDIV3>
extern volatile __bit                   NDIV3               __at(0x1CECB);	// @ (0x39D9 * 8 + 3)
#define                                 NDIV3_bit           _BIT_ACCESS(OSCCON1,3)
// STATUS<NEGATIVE>
extern volatile __bit                   NEGATIVE            __at(0x1FEC4);	// @ (0x3FD8 * 8 + 4)
#define                                 NEGATIVE_bit        _BIT_ACCESS(STATUS,4)
// OSCCON1<NOSC0>
extern volatile __bit                   NOSC0               __at(0x1CECC);	// @ (0x39D9 * 8 + 4)
#define                                 NOSC0_bit           _BIT_ACCESS(OSCCON1,4)
// OSCCON1<NOSC1>
extern volatile __bit                   NOSC1               __at(0x1CECD);	// @ (0x39D9 * 8 + 5)
#define                                 NOSC1_bit           _BIT_ACCESS(OSCCON1,5)
// OSCCON1<NOSC2>
extern volatile __bit                   NOSC2               __at(0x1CECE);	// @ (0x39D9 * 8 + 6)
#define                                 NOSC2_bit           _BIT_ACCESS(OSCCON1,6)
// OSCCON3<NOSCR>
extern volatile __bit                   NOSCR               __at(0x1CEDB);	// @ (0x39DB * 8 + 3)
#define                                 NOSCR_bit           _BIT_ACCESS(OSCCON3,3)
// PCON0<NOT_BOR>
extern volatile __bit                   NOT_BOR             __at(0x1FF80);	// @ (0x3FF0 * 8 + 0)
#define                                 NOT_BOR_bit         _BIT_ACCESS(PCON0,0)
// PCON1<NOT_MEMV>
extern volatile __bit                   NOT_MEMV            __at(0x1FF89);	// @ (0x3FF1 * 8 + 1)
#define                                 NOT_MEMV_bit        _BIT_ACCESS(PCON1,1)
// PCON0<NOT_POR>
extern volatile __bit                   NOT_POR             __at(0x1FF81);	// @ (0x3FF0 * 8 + 1)
#define                                 NOT_POR_bit         _BIT_ACCESS(PCON0,1)
// PCON0<NOT_RI>
extern volatile __bit                   NOT_RI              __at(0x1FF82);	// @ (0x3FF0 * 8 + 2)
#define                                 NOT_RI_bit          _BIT_ACCESS(PCON0,2)
// PCON0<NOT_RMCLR>
extern volatile __bit                   NOT_RMCLR           __at(0x1FF83);	// @ (0x3FF0 * 8 + 3)
#define                                 NOT_RMCLR_bit       _BIT_ACCESS(PCON0,3)
// PCON0<NOT_RWDT>
extern volatile __bit                   NOT_RWDT            __at(0x1FF84);	// @ (0x3FF0 * 8 + 4)
#define                                 NOT_RWDT_bit        _BIT_ACCESS(PCON0,4)
// T1GCON<NOT_T1DONE>
extern volatile __bit                   NOT_T1DONE          __at(0x1FD9B);	// @ (0x3FB3 * 8 + 3)
#define                                 NOT_T1DONE_bit      _BIT_ACCESS(T1GCON,3)
// T1CON<NOT_T1SYNC>
extern volatile __bit                   NOT_T1SYNC          __at(0x1FD92);	// @ (0x3FB2 * 8 + 2)
#define                                 NOT_T1SYNC_bit      _BIT_ACCESS(T1CON,2)
// T3GCON<NOT_T3DONE>
extern volatile __bit                   NOT_T3DONE          __at(0x1FD3B);	// @ (0x3FA7 * 8 + 3)
#define                                 NOT_T3DONE_bit      _BIT_ACCESS(T3GCON,3)
// T3CON<NOT_T3SYNC>
extern volatile __bit                   NOT_T3SYNC          __at(0x1FD32);	// @ (0x3FA6 * 8 + 2)
#define                                 NOT_T3SYNC_bit      _BIT_ACCESS(T3CON,2)
// T5GCON<NOT_T5DONE>
extern volatile __bit                   NOT_T5DONE          __at(0x1FCDB);	// @ (0x3F9B * 8 + 3)
#define                                 NOT_T5DONE_bit      _BIT_ACCESS(T5GCON,3)
// T5CON<NOT_T5SYNC>
extern volatile __bit                   NOT_T5SYNC          __at(0x1FCD2);	// @ (0x3F9A * 8 + 2)
#define                                 NOT_T5SYNC_bit      _BIT_ACCESS(T5CON,2)
// PCON0<NOT_WDTWV>
extern volatile __bit                   NOT_WDTWV           __at(0x1FF85);	// @ (0x3FF0 * 8 + 5)
#define                                 NOT_WDTWV_bit       _BIT_ACCESS(PCON0,5)
// ADREF<NREF0>
extern volatile __bit                   NREF0               __at(0x1F7EC);	// @ (0x3EFD * 8 + 4)
#define                                 NREF0_bit           _BIT_ACCESS(ADREF,4)
// DAC1CON0<NSS>
extern volatile __bit                   NSS                 __at(0x1F4F0);	// @ (0x3E9E * 8 + 0)
#define                                 NSS_bit             _BIT_ACCESS(DAC1CON0,0)
// NVMADRL<NVMADR0>
extern volatile __bit                   NVMADR0             __at(0x1CF00);	// @ (0x39E0 * 8 + 0)
#define                                 NVMADR0_bit         _BIT_ACCESS(NVMADRL,0)
// NVMADRL<NVMADR1>
extern volatile __bit                   NVMADR1             __at(0x1CF01);	// @ (0x39E0 * 8 + 1)
#define                                 NVMADR1_bit         _BIT_ACCESS(NVMADRL,1)
// NVMADRL<NVMADR2>
extern volatile __bit                   NVMADR2             __at(0x1CF02);	// @ (0x39E0 * 8 + 2)
#define                                 NVMADR2_bit         _BIT_ACCESS(NVMADRL,2)
// NVMADRL<NVMADR3>
extern volatile __bit                   NVMADR3             __at(0x1CF03);	// @ (0x39E0 * 8 + 3)
#define                                 NVMADR3_bit         _BIT_ACCESS(NVMADRL,3)
// NVMADRL<NVMADR4>
extern volatile __bit                   NVMADR4             __at(0x1CF04);	// @ (0x39E0 * 8 + 4)
#define                                 NVMADR4_bit         _BIT_ACCESS(NVMADRL,4)
// NVMADRL<NVMADR5>
extern volatile __bit                   NVMADR5             __at(0x1CF05);	// @ (0x39E0 * 8 + 5)
#define                                 NVMADR5_bit         _BIT_ACCESS(NVMADRL,5)
// NVMADRL<NVMADR6>
extern volatile __bit                   NVMADR6             __at(0x1CF06);	// @ (0x39E0 * 8 + 6)
#define                                 NVMADR6_bit         _BIT_ACCESS(NVMADRL,6)
// NVMADRL<NVMADR7>
extern volatile __bit                   NVMADR7             __at(0x1CF07);	// @ (0x39E0 * 8 + 7)
#define                                 NVMADR7_bit         _BIT_ACCESS(NVMADRL,7)
// NVMADRH<NVMADR8>
extern volatile __bit                   NVMADR8             __at(0x1CF08);	// @ (0x39E1 * 8 + 0)
#define                                 NVMADR8_bit         _BIT_ACCESS(NVMADRH,0)
// NVMADRH<NVMADR9>
extern volatile __bit                   NVMADR9             __at(0x1CF09);	// @ (0x39E1 * 8 + 1)
#define                                 NVMADR9_bit         _BIT_ACCESS(NVMADRH,1)
// NVMDAT<NVMDAT0>
extern volatile __bit                   NVMDAT0             __at(0x1CF18);	// @ (0x39E3 * 8 + 0)
#define                                 NVMDAT0_bit         _BIT_ACCESS(NVMDAT,0)
// NVMDAT<NVMDAT1>
extern volatile __bit                   NVMDAT1             __at(0x1CF19);	// @ (0x39E3 * 8 + 1)
#define                                 NVMDAT1_bit         _BIT_ACCESS(NVMDAT,1)
// NVMDAT<NVMDAT2>
extern volatile __bit                   NVMDAT2             __at(0x1CF1A);	// @ (0x39E3 * 8 + 2)
#define                                 NVMDAT2_bit         _BIT_ACCESS(NVMDAT,2)
// NVMDAT<NVMDAT3>
extern volatile __bit                   NVMDAT3             __at(0x1CF1B);	// @ (0x39E3 * 8 + 3)
#define                                 NVMDAT3_bit         _BIT_ACCESS(NVMDAT,3)
// NVMDAT<NVMDAT4>
extern volatile __bit                   NVMDAT4             __at(0x1CF1C);	// @ (0x39E3 * 8 + 4)
#define                                 NVMDAT4_bit         _BIT_ACCESS(NVMDAT,4)
// NVMDAT<NVMDAT5>
extern volatile __bit                   NVMDAT5             __at(0x1CF1D);	// @ (0x39E3 * 8 + 5)
#define                                 NVMDAT5_bit         _BIT_ACCESS(NVMDAT,5)
// NVMDAT<NVMDAT6>
extern volatile __bit                   NVMDAT6             __at(0x1CF1E);	// @ (0x39E3 * 8 + 6)
#define                                 NVMDAT6_bit         _BIT_ACCESS(NVMDAT,6)
// NVMDAT<NVMDAT7>
extern volatile __bit                   NVMDAT7             __at(0x1CF1F);	// @ (0x39E3 * 8 + 7)
#define                                 NVMDAT7_bit         _BIT_ACCESS(NVMDAT,7)
// PIE0<NVMIE>
extern volatile __bit                   NVMIE               __at(0x1CC84);	// @ (0x3990 * 8 + 4)
#define                                 NVMIE_bit           _BIT_ACCESS(PIE0,4)
// PIR0<NVMIF>
extern volatile __bit                   NVMIF               __at(0x1CD04);	// @ (0x39A0 * 8 + 4)
#define                                 NVMIF_bit           _BIT_ACCESS(PIR0,4)
// IPR0<NVMIP>
extern volatile __bit                   NVMIP               __at(0x1CC04);	// @ (0x3980 * 8 + 4)
#define                                 NVMIP_bit           _BIT_ACCESS(IPR0,4)
// PMD0<NVMMD>
extern volatile __bit                   NVMMD               __at(0x1CE02);	// @ (0x39C0 * 8 + 2)
#define                                 NVMMD_bit           _BIT_ACCESS(PMD0,2)
// NVMCON1<NVMREG0>
extern volatile __bit                   NVMREG0             __at(0x1CF2E);	// @ (0x39E5 * 8 + 6)
#define                                 NVMREG0_bit         _BIT_ACCESS(NVMCON1,6)
// NVMCON1<NVMREG1>
extern volatile __bit                   NVMREG1             __at(0x1CF2F);	// @ (0x39E5 * 8 + 7)
#define                                 NVMREG1_bit         _BIT_ACCESS(NVMCON1,7)
// ODCONA<ODCA0>
extern volatile __bit                   ODCA0               __at(0x1D210);	// @ (0x3A42 * 8 + 0)
#define                                 ODCA0_bit           _BIT_ACCESS(ODCONA,0)
// ODCONA<ODCA1>
extern volatile __bit                   ODCA1               __at(0x1D211);	// @ (0x3A42 * 8 + 1)
#define                                 ODCA1_bit           _BIT_ACCESS(ODCONA,1)
// ODCONA<ODCA2>
extern volatile __bit                   ODCA2               __at(0x1D212);	// @ (0x3A42 * 8 + 2)
#define                                 ODCA2_bit           _BIT_ACCESS(ODCONA,2)
// ODCONA<ODCA3>
extern volatile __bit                   ODCA3               __at(0x1D213);	// @ (0x3A42 * 8 + 3)
#define                                 ODCA3_bit           _BIT_ACCESS(ODCONA,3)
// ODCONA<ODCA4>
extern volatile __bit                   ODCA4               __at(0x1D214);	// @ (0x3A42 * 8 + 4)
#define                                 ODCA4_bit           _BIT_ACCESS(ODCONA,4)
// ODCONA<ODCA5>
extern volatile __bit                   ODCA5               __at(0x1D215);	// @ (0x3A42 * 8 + 5)
#define                                 ODCA5_bit           _BIT_ACCESS(ODCONA,5)
// ODCONA<ODCA6>
extern volatile __bit                   ODCA6               __at(0x1D216);	// @ (0x3A42 * 8 + 6)
#define                                 ODCA6_bit           _BIT_ACCESS(ODCONA,6)
// ODCONA<ODCA7>
extern volatile __bit                   ODCA7               __at(0x1D217);	// @ (0x3A42 * 8 + 7)
#define                                 ODCA7_bit           _BIT_ACCESS(ODCONA,7)
// ODCONB<ODCB0>
extern volatile __bit                   ODCB0               __at(0x1D290);	// @ (0x3A52 * 8 + 0)
#define                                 ODCB0_bit           _BIT_ACCESS(ODCONB,0)
// ODCONB<ODCB1>
extern volatile __bit                   ODCB1               __at(0x1D291);	// @ (0x3A52 * 8 + 1)
#define                                 ODCB1_bit           _BIT_ACCESS(ODCONB,1)
// ODCONB<ODCB2>
extern volatile __bit                   ODCB2               __at(0x1D292);	// @ (0x3A52 * 8 + 2)
#define                                 ODCB2_bit           _BIT_ACCESS(ODCONB,2)
// ODCONB<ODCB3>
extern volatile __bit                   ODCB3               __at(0x1D293);	// @ (0x3A52 * 8 + 3)
#define                                 ODCB3_bit           _BIT_ACCESS(ODCONB,3)
// ODCONB<ODCB4>
extern volatile __bit                   ODCB4               __at(0x1D294);	// @ (0x3A52 * 8 + 4)
#define                                 ODCB4_bit           _BIT_ACCESS(ODCONB,4)
// ODCONB<ODCB5>
extern volatile __bit                   ODCB5               __at(0x1D295);	// @ (0x3A52 * 8 + 5)
#define                                 ODCB5_bit           _BIT_ACCESS(ODCONB,5)
// ODCONB<ODCB6>
extern volatile __bit                   ODCB6               __at(0x1D296);	// @ (0x3A52 * 8 + 6)
#define                                 ODCB6_bit           _BIT_ACCESS(ODCONB,6)
// ODCONB<ODCB7>
extern volatile __bit                   ODCB7               __at(0x1D297);	// @ (0x3A52 * 8 + 7)
#define                                 ODCB7_bit           _BIT_ACCESS(ODCONB,7)
// ODCONC<ODCC0>
extern volatile __bit                   ODCC0               __at(0x1D310);	// @ (0x3A62 * 8 + 0)
#define                                 ODCC0_bit           _BIT_ACCESS(ODCONC,0)
// ODCONC<ODCC1>
extern volatile __bit                   ODCC1               __at(0x1D311);	// @ (0x3A62 * 8 + 1)
#define                                 ODCC1_bit           _BIT_ACCESS(ODCONC,1)
// ODCONC<ODCC2>
extern volatile __bit                   ODCC2               __at(0x1D312);	// @ (0x3A62 * 8 + 2)
#define                                 ODCC2_bit           _BIT_ACCESS(ODCONC,2)
// ODCONC<ODCC3>
extern volatile __bit                   ODCC3               __at(0x1D313);	// @ (0x3A62 * 8 + 3)
#define                                 ODCC3_bit           _BIT_ACCESS(ODCONC,3)
// ODCONC<ODCC4>
extern volatile __bit                   ODCC4               __at(0x1D314);	// @ (0x3A62 * 8 + 4)
#define                                 ODCC4_bit           _BIT_ACCESS(ODCONC,4)
// ODCONC<ODCC5>
extern volatile __bit                   ODCC5               __at(0x1D315);	// @ (0x3A62 * 8 + 5)
#define                                 ODCC5_bit           _BIT_ACCESS(ODCONC,5)
// ODCONC<ODCC6>
extern volatile __bit                   ODCC6               __at(0x1D316);	// @ (0x3A62 * 8 + 6)
#define                                 ODCC6_bit           _BIT_ACCESS(ODCONC,6)
// ODCONC<ODCC7>
extern volatile __bit                   ODCC7               __at(0x1D317);	// @ (0x3A62 * 8 + 7)
#define                                 ODCC7_bit           _BIT_ACCESS(ODCONC,7)
// DAC1CON0<OE1>
extern volatile __bit                   OE1                 __at(0x1F4F5);	// @ (0x3E9E * 8 + 5)
#define                                 OE1_bit             _BIT_ACCESS(DAC1CON0,5)
// DAC1CON0<OE2>
extern volatile __bit                   OE2                 __at(0x1F4F4);	// @ (0x3E9E * 8 + 4)
#define                                 OE2_bit             _BIT_ACCESS(DAC1CON0,4)
// MD1CON0<OPOL>
extern volatile __bit                   OPOL                __at(0x1E7D4);	// @ (0x3CFA * 8 + 4)
#define                                 OPOL_bit            _BIT_ACCESS(MD1CON0,4)
// OSCCON3<ORDY>
extern volatile __bit                   ORDY                __at(0x1CEDC);	// @ (0x39DB * 8 + 4)
#define                                 ORDY_bit            _BIT_ACCESS(OSCCON3,4)
// PIE0<OSFIE>
extern volatile __bit                   OSFIE               __at(0x1CC82);	// @ (0x3990 * 8 + 2)
#define                                 OSFIE_bit           _BIT_ACCESS(PIE0,2)
// PIR0<OSFIF>
extern volatile __bit                   OSFIF               __at(0x1CD02);	// @ (0x39A0 * 8 + 2)
#define                                 OSFIF_bit           _BIT_ACCESS(PIR0,2)
// IPR0<OSFIP>
extern volatile __bit                   OSFIP               __at(0x1CC02);	// @ (0x3980 * 8 + 2)
#define                                 OSFIP_bit           _BIT_ACCESS(IPR0,2)
// STATUS<OVERFLOW>
extern volatile __bit                   OVERFLOW            __at(0x1FEC3);	// @ (0x3FD8 * 8 + 3)
#define                                 OVERFLOW_bit        _BIT_ACCESS(STATUS,3)
// U1P1H<P1H>
extern volatile __bit                   P1H                 __at(0x1EF68);	// @ (0x3DED * 8 + 0)
#define                                 P1H_bit             _BIT_ACCESS(U1P1H,0)
// U1P2H<P2H>
extern volatile __bit                   P2H                 __at(0x1EF78);	// @ (0x3DEF * 8 + 0)
#define                                 P2H_bit             _BIT_ACCESS(U1P2H,0)
// U1P3H<P3H>
extern volatile __bit                   P3H                 __at(0x1EF88);	// @ (0x3DF1 * 8 + 0)
#define                                 P3H_bit             _BIT_ACCESS(U1P3H,0)
// CCPTMRS1<P5TSEL0>
extern volatile __bit                   P5TSEL0             __at(0x1FAF8);	// @ (0x3F5F * 8 + 0)
#define                                 P5TSEL0_bit         _BIT_ACCESS(CCPTMRS1,0)
// CCPTMRS1<P5TSEL1>
extern volatile __bit                   P5TSEL1             __at(0x1FAF9);	// @ (0x3F5F * 8 + 1)
#define                                 P5TSEL1_bit         _BIT_ACCESS(CCPTMRS1,1)
// CCPTMRS1<P6TSEL0>
extern volatile __bit                   P6TSEL0             __at(0x1FAFA);	// @ (0x3F5F * 8 + 2)
#define                                 P6TSEL0_bit         _BIT_ACCESS(CCPTMRS1,2)
// CCPTMRS1<P6TSEL1>
extern volatile __bit                   P6TSEL1             __at(0x1FAFB);	// @ (0x3F5F * 8 + 3)
#define                                 P6TSEL1_bit         _BIT_ACCESS(CCPTMRS1,3)
// CCPTMRS1<P7TSEL0>
extern volatile __bit                   P7TSEL0             __at(0x1FAFC);	// @ (0x3F5F * 8 + 4)
#define                                 P7TSEL0_bit         _BIT_ACCESS(CCPTMRS1,4)
// CCPTMRS1<P7TSEL1>
extern volatile __bit                   P7TSEL1             __at(0x1FAFD);	// @ (0x3F5F * 8 + 5)
#define                                 P7TSEL1_bit         _BIT_ACCESS(CCPTMRS1,5)
// CCPTMRS1<P8TSEL0>
extern volatile __bit                   P8TSEL0             __at(0x1FAFE);	// @ (0x3F5F * 8 + 6)
#define                                 P8TSEL0_bit         _BIT_ACCESS(CCPTMRS1,6)
// CCPTMRS1<P8TSEL1>
extern volatile __bit                   P8TSEL1             __at(0x1FAFF);	// @ (0x3F5F * 8 + 7)
#define                                 P8TSEL1_bit         _BIT_ACCESS(CCPTMRS1,7)
// I2C1PIE<PC1IE>
extern volatile __bit                   PC1IE               __at(0x1EBD2);	// @ (0x3D7A * 8 + 2)
#define                                 PC1IE_bit           _BIT_ACCESS(I2C1PIE,2)
// I2C1PIR<PC1IF>
extern volatile __bit                   PC1IF               __at(0x1EBCA);	// @ (0x3D79 * 8 + 2)
#define                                 PC1IF_bit           _BIT_ACCESS(I2C1PIR,2)
// I2C2PIE<PC2IE>
extern volatile __bit                   PC2IE               __at(0x1EB22);	// @ (0x3D64 * 8 + 2)
#define                                 PC2IE_bit           _BIT_ACCESS(I2C2PIE,2)
// I2C2PIR<PC2IF>
extern volatile __bit                   PC2IF               __at(0x1EB1A);	// @ (0x3D63 * 8 + 2)
#define                                 PC2IF_bit           _BIT_ACCESS(I2C2PIR,2)
// ADPCH<PCH3>
extern volatile __bit                   PCH3                __at(0x1F78B);	// @ (0x3EF1 * 8 + 3)
#define                                 PCH3_bit            _BIT_ACCESS(ADPCH,3)
// ADPCH<PCH4>
extern volatile __bit                   PCH4                __at(0x1F78C);	// @ (0x3EF1 * 8 + 4)
#define                                 PCH4_bit            _BIT_ACCESS(ADPCH,4)
// ADPCH<PCH5>
extern volatile __bit                   PCH5                __at(0x1F78D);	// @ (0x3EF1 * 8 + 5)
#define                                 PCH5_bit            _BIT_ACCESS(ADPCH,5)
// NCO1CON<PFM>
extern volatile __bit                   PFM                 __at(0x1F9F0);	// @ (0x3F3E * 8 + 0)
#define                                 PFM_bit             _BIT_ACCESS(NCO1CON,0)
// CRCCON1<PLEN0>
extern volatile __bit                   PLEN0               __at(0x1CB48);	// @ (0x3969 * 8 + 0)
#define                                 PLEN0_bit           _BIT_ACCESS(CRCCON1,0)
// CRCCON1<PLEN1>
extern volatile __bit                   PLEN1               __at(0x1CB49);	// @ (0x3969 * 8 + 1)
#define                                 PLEN1_bit           _BIT_ACCESS(CRCCON1,1)
// CRCCON1<PLEN2>
extern volatile __bit                   PLEN2               __at(0x1CB4A);	// @ (0x3969 * 8 + 2)
#define                                 PLEN2_bit           _BIT_ACCESS(CRCCON1,2)
// CRCCON1<PLEN3>
extern volatile __bit                   PLEN3               __at(0x1CB4B);	// @ (0x3969 * 8 + 3)
#define                                 PLEN3_bit           _BIT_ACCESS(CRCCON1,3)
// OSCSTAT<PLLR>
extern volatile __bit                   PLLR                __at(0x1CEE0);	// @ (0x39DC * 8 + 0)
#define                                 PLLR_bit            _BIT_ACCESS(OSCSTAT,0)
// PCON0<POR>
extern volatile __bit                   POR                 __at(0x1FF81);	// @ (0x3FF0 * 8 + 1)
#define                                 POR_bit             _BIT_ACCESS(PCON0,1)
// ADCON1<PPOL>
extern volatile __bit                   PPOL                __at(0x1F7CF);	// @ (0x3EF9 * 8 + 7)
#define                                 PPOL_bit            _BIT_ACCESS(ADCON1,7)
// PPSLOCK<PPSLOCKED>
extern volatile __bit                   PPSLOCKED           __at(0x1D5F8);	// @ (0x3ABF * 8 + 0)
#define                                 PPSLOCKED_bit       _BIT_ACCESS(PPSLOCK,0)
// SMT1PRH<PR10>
extern volatile __bit                   PR10                __at(0x1F8E2);	// @ (0x3F1C * 8 + 2)
#define                                 PR10_bit            _BIT_ACCESS(SMT1PRH,2)
// SMT1PRH<PR11>
extern volatile __bit                   PR11                __at(0x1F8E3);	// @ (0x3F1C * 8 + 3)
#define                                 PR11_bit            _BIT_ACCESS(SMT1PRH,3)
// SMT1PRH<PR12>
extern volatile __bit                   PR12                __at(0x1F8E4);	// @ (0x3F1C * 8 + 4)
#define                                 PR12_bit            _BIT_ACCESS(SMT1PRH,4)
// SMT1PRH<PR13>
extern volatile __bit                   PR13                __at(0x1F8E5);	// @ (0x3F1C * 8 + 5)
#define                                 PR13_bit            _BIT_ACCESS(SMT1PRH,5)
// SMT1PRH<PR14>
extern volatile __bit                   PR14                __at(0x1F8E6);	// @ (0x3F1C * 8 + 6)
#define                                 PR14_bit            _BIT_ACCESS(SMT1PRH,6)
// SMT1PRH<PR15>
extern volatile __bit                   PR15                __at(0x1F8E7);	// @ (0x3F1C * 8 + 7)
#define                                 PR15_bit            _BIT_ACCESS(SMT1PRH,7)
// SMT1PRU<PR16>
extern volatile __bit                   PR16                __at(0x1F8E8);	// @ (0x3F1D * 8 + 0)
#define                                 PR16_bit            _BIT_ACCESS(SMT1PRU,0)
// SMT1PRU<PR17>
extern volatile __bit                   PR17                __at(0x1F8E9);	// @ (0x3F1D * 8 + 1)
#define                                 PR17_bit            _BIT_ACCESS(SMT1PRU,1)
// SMT1PRU<PR18>
extern volatile __bit                   PR18                __at(0x1F8EA);	// @ (0x3F1D * 8 + 2)
#define                                 PR18_bit            _BIT_ACCESS(SMT1PRU,2)
// SMT1PRU<PR19>
extern volatile __bit                   PR19                __at(0x1F8EB);	// @ (0x3F1D * 8 + 3)
#define                                 PR19_bit            _BIT_ACCESS(SMT1PRU,3)
// SMT1PRU<PR20>
extern volatile __bit                   PR20                __at(0x1F8EC);	// @ (0x3F1D * 8 + 4)
#define                                 PR20_bit            _BIT_ACCESS(SMT1PRU,4)
// SMT1PRU<PR21>
extern volatile __bit                   PR21                __at(0x1F8ED);	// @ (0x3F1D * 8 + 5)
#define                                 PR21_bit            _BIT_ACCESS(SMT1PRU,5)
// SMT1PRU<PR22>
extern volatile __bit                   PR22                __at(0x1F8EE);	// @ (0x3F1D * 8 + 6)
#define                                 PR22_bit            _BIT_ACCESS(SMT1PRU,6)
// SMT1PRU<PR23>
extern volatile __bit                   PR23                __at(0x1F8EF);	// @ (0x3F1D * 8 + 7)
#define                                 PR23_bit            _BIT_ACCESS(SMT1PRU,7)
// SMT1PRL<PR3>
extern volatile __bit                   PR3                 __at(0x1F8DB);	// @ (0x3F1B * 8 + 3)
#define                                 PR3_bit             _BIT_ACCESS(SMT1PRL,3)
// SMT1PRL<PR5>
extern volatile __bit                   PR5                 __at(0x1F8DD);	// @ (0x3F1B * 8 + 5)
#define                                 PR5_bit             _BIT_ACCESS(SMT1PRL,5)
// SMT1PRL<PR7>
extern volatile __bit                   PR7                 __at(0x1F8DF);	// @ (0x3F1B * 8 + 7)
#define                                 PR7_bit             _BIT_ACCESS(SMT1PRL,7)
// SMT1PRH<PR8>
extern volatile __bit                   PR8                 __at(0x1F8E0);	// @ (0x3F1C * 8 + 0)
#define                                 PR8_bit             _BIT_ACCESS(SMT1PRH,0)
// SMT1PRH<PR9>
extern volatile __bit                   PR9                 __at(0x1F8E1);	// @ (0x3F1C * 8 + 1)
#define                                 PR9_bit             _BIT_ACCESS(SMT1PRH,1)
// ADPREL<PRE0>
extern volatile __bit                   PRE0                __at(0x1F7B0);	// @ (0x3EF6 * 8 + 0)
#define                                 PRE0_bit            _BIT_ACCESS(ADPREL,0)
// ADPREL<PRE1>
extern volatile __bit                   PRE1                __at(0x1F7B1);	// @ (0x3EF6 * 8 + 1)
#define                                 PRE1_bit            _BIT_ACCESS(ADPREL,1)
// ADPREH<PRE10>
extern volatile __bit                   PRE10               __at(0x1F7BA);	// @ (0x3EF7 * 8 + 2)
#define                                 PRE10_bit           _BIT_ACCESS(ADPREH,2)
// ADPREH<PRE11>
extern volatile __bit                   PRE11               __at(0x1F7BB);	// @ (0x3EF7 * 8 + 3)
#define                                 PRE11_bit           _BIT_ACCESS(ADPREH,3)
// ADPREH<PRE12>
extern volatile __bit                   PRE12               __at(0x1F7BC);	// @ (0x3EF7 * 8 + 4)
#define                                 PRE12_bit           _BIT_ACCESS(ADPREH,4)
// ADPREL<PRE2>
extern volatile __bit                   PRE2                __at(0x1F7B2);	// @ (0x3EF6 * 8 + 2)
#define                                 PRE2_bit            _BIT_ACCESS(ADPREL,2)
// ADPREL<PRE3>
extern volatile __bit                   PRE3                __at(0x1F7B3);	// @ (0x3EF6 * 8 + 3)
#define                                 PRE3_bit            _BIT_ACCESS(ADPREL,3)
// ADPREL<PRE4>
extern volatile __bit                   PRE4                __at(0x1F7B4);	// @ (0x3EF6 * 8 + 4)
#define                                 PRE4_bit            _BIT_ACCESS(ADPREL,4)
// ADPREL<PRE5>
extern volatile __bit                   PRE5                __at(0x1F7B5);	// @ (0x3EF6 * 8 + 5)
#define                                 PRE5_bit            _BIT_ACCESS(ADPREL,5)
// ADPREL<PRE6>
extern volatile __bit                   PRE6                __at(0x1F7B6);	// @ (0x3EF6 * 8 + 6)
#define                                 PRE6_bit            _BIT_ACCESS(ADPREL,6)
// ADPREL<PRE7>
extern volatile __bit                   PRE7                __at(0x1F7B7);	// @ (0x3EF6 * 8 + 7)
#define                                 PRE7_bit            _BIT_ACCESS(ADPREL,7)
// ADPREH<PRE8>
extern volatile __bit                   PRE8                __at(0x1F7B8);	// @ (0x3EF7 * 8 + 0)
#define                                 PRE8_bit            _BIT_ACCESS(ADPREH,0)
// ADPREH<PRE9>
extern volatile __bit                   PRE9                __at(0x1F7B9);	// @ (0x3EF7 * 8 + 1)
#define                                 PRE9_bit            _BIT_ACCESS(ADPREH,1)
// ADREF<PREF0>
extern volatile __bit                   PREF0               __at(0x1F7E8);	// @ (0x3EFD * 8 + 0)
#define                                 PREF0_bit           _BIT_ACCESS(ADREF,0)
// ADREF<PREF1>
extern volatile __bit                   PREF1               __at(0x1F7E9);	// @ (0x3EFD * 8 + 1)
#define                                 PREF1_bit           _BIT_ACCESS(ADREF,1)
// ADPREVL<PREV0>
extern volatile __bit                   PREV0               __at(0x1F768);	// @ (0x3EED * 8 + 0)
#define                                 PREV0_bit           _BIT_ACCESS(ADPREVL,0)
// ADPREVL<PREV1>
extern volatile __bit                   PREV1               __at(0x1F769);	// @ (0x3EED * 8 + 1)
#define                                 PREV1_bit           _BIT_ACCESS(ADPREVL,1)
// ADPREVH<PREV10>
extern volatile __bit                   PREV10              __at(0x1F772);	// @ (0x3EEE * 8 + 2)
#define                                 PREV10_bit          _BIT_ACCESS(ADPREVH,2)
// ADPREVH<PREV11>
extern volatile __bit                   PREV11              __at(0x1F773);	// @ (0x3EEE * 8 + 3)
#define                                 PREV11_bit          _BIT_ACCESS(ADPREVH,3)
// ADPREVH<PREV12>
extern volatile __bit                   PREV12              __at(0x1F774);	// @ (0x3EEE * 8 + 4)
#define                                 PREV12_bit          _BIT_ACCESS(ADPREVH,4)
// ADPREVH<PREV13>
extern volatile __bit                   PREV13              __at(0x1F775);	// @ (0x3EEE * 8 + 5)
#define                                 PREV13_bit          _BIT_ACCESS(ADPREVH,5)
// ADPREVH<PREV14>
extern volatile __bit                   PREV14              __at(0x1F776);	// @ (0x3EEE * 8 + 6)
#define                                 PREV14_bit          _BIT_ACCESS(ADPREVH,6)
// ADPREVH<PREV15>
extern volatile __bit                   PREV15              __at(0x1F777);	// @ (0x3EEE * 8 + 7)
#define                                 PREV15_bit          _BIT_ACCESS(ADPREVH,7)
// ADPREVL<PREV2>
extern volatile __bit                   PREV2               __at(0x1F76A);	// @ (0x3EED * 8 + 2)
#define                                 PREV2_bit           _BIT_ACCESS(ADPREVL,2)
// ADPREVL<PREV3>
extern volatile __bit                   PREV3               __at(0x1F76B);	// @ (0x3EED * 8 + 3)
#define                                 PREV3_bit           _BIT_ACCESS(ADPREVL,3)
// ADPREVL<PREV4>
extern volatile __bit                   PREV4               __at(0x1F76C);	// @ (0x3EED * 8 + 4)
#define                                 PREV4_bit           _BIT_ACCESS(ADPREVL,4)
// ADPREVL<PREV5>
extern volatile __bit                   PREV5               __at(0x1F76D);	// @ (0x3EED * 8 + 5)
#define                                 PREV5_bit           _BIT_ACCESS(ADPREVL,5)
// ADPREVL<PREV6>
extern volatile __bit                   PREV6               __at(0x1F76E);	// @ (0x3EED * 8 + 6)
#define                                 PREV6_bit           _BIT_ACCESS(ADPREVL,6)
// ADPREVL<PREV7>
extern volatile __bit                   PREV7               __at(0x1F76F);	// @ (0x3EED * 8 + 7)
#define                                 PREV7_bit           _BIT_ACCESS(ADPREVL,7)
// ADPREVH<PREV8>
extern volatile __bit                   PREV8               __at(0x1F770);	// @ (0x3EEE * 8 + 0)
#define                                 PREV8_bit           _BIT_ACCESS(ADPREVH,0)
// ADPREVH<PREV9>
extern volatile __bit                   PREV9               __at(0x1F771);	// @ (0x3EEE * 8 + 1)
#define                                 PREV9_bit           _BIT_ACCESS(ADPREVH,1)
// PRLOCK<PRLOCKED>
extern volatile __bit                   PRLOCKED            __at(0x1CF78);	// @ (0x39EF * 8 + 0)
#define                                 PRLOCKED_bit        _BIT_ACCESS(PRLOCK,0)
// SMT1CON0<PS0>
extern volatile __bit                   PS0                 __at(0x1F8F0);	// @ (0x3F1E * 8 + 0)
#define                                 PS0_bit             _BIT_ACCESS(SMT1CON0,0)
// SMT1CON0<PS1>
extern volatile __bit                   PS1                 __at(0x1F8F1);	// @ (0x3F1E * 8 + 1)
#define                                 PS1_bit             _BIT_ACCESS(SMT1CON0,1)
// WDTPSL<PSCNT0>
extern volatile __bit                   PSCNT0              __at(0x1CAE8);	// @ (0x395D * 8 + 0)
#define                                 PSCNT0_bit          _BIT_ACCESS(WDTPSL,0)
// WDTPSL<PSCNT1>
extern volatile __bit                   PSCNT1              __at(0x1CAE9);	// @ (0x395D * 8 + 1)
#define                                 PSCNT1_bit          _BIT_ACCESS(WDTPSL,1)
// WDTPSH<PSCNT10>
extern volatile __bit                   PSCNT10             __at(0x1CAF2);	// @ (0x395E * 8 + 2)
#define                                 PSCNT10_bit         _BIT_ACCESS(WDTPSH,2)
// WDTPSH<PSCNT11>
extern volatile __bit                   PSCNT11             __at(0x1CAF3);	// @ (0x395E * 8 + 3)
#define                                 PSCNT11_bit         _BIT_ACCESS(WDTPSH,3)
// WDTPSH<PSCNT12>
extern volatile __bit                   PSCNT12             __at(0x1CAF4);	// @ (0x395E * 8 + 4)
#define                                 PSCNT12_bit         _BIT_ACCESS(WDTPSH,4)
// WDTPSH<PSCNT13>
extern volatile __bit                   PSCNT13             __at(0x1CAF5);	// @ (0x395E * 8 + 5)
#define                                 PSCNT13_bit         _BIT_ACCESS(WDTPSH,5)
// WDTPSH<PSCNT14>
extern volatile __bit                   PSCNT14             __at(0x1CAF6);	// @ (0x395E * 8 + 6)
#define                                 PSCNT14_bit         _BIT_ACCESS(WDTPSH,6)
// WDTPSH<PSCNT15>
extern volatile __bit                   PSCNT15             __at(0x1CAF7);	// @ (0x395E * 8 + 7)
#define                                 PSCNT15_bit         _BIT_ACCESS(WDTPSH,7)
// WDTTMR<PSCNT16>
extern volatile __bit                   PSCNT16             __at(0x1CAF8);	// @ (0x395F * 8 + 0)
#define                                 PSCNT16_bit         _BIT_ACCESS(WDTTMR,0)
// WDTTMR<PSCNT17>
extern volatile __bit                   PSCNT17             __at(0x1CAF9);	// @ (0x395F * 8 + 1)
#define                                 PSCNT17_bit         _BIT_ACCESS(WDTTMR,1)
// WDTPSL<PSCNT2>
extern volatile __bit                   PSCNT2              __at(0x1CAEA);	// @ (0x395D * 8 + 2)
#define                                 PSCNT2_bit          _BIT_ACCESS(WDTPSL,2)
// WDTPSL<PSCNT3>
extern volatile __bit                   PSCNT3              __at(0x1CAEB);	// @ (0x395D * 8 + 3)
#define                                 PSCNT3_bit          _BIT_ACCESS(WDTPSL,3)
// WDTPSL<PSCNT4>
extern volatile __bit                   PSCNT4              __at(0x1CAEC);	// @ (0x395D * 8 + 4)
#define                                 PSCNT4_bit          _BIT_ACCESS(WDTPSL,4)
// WDTPSL<PSCNT5>
extern volatile __bit                   PSCNT5              __at(0x1CAED);	// @ (0x395D * 8 + 5)
#define                                 PSCNT5_bit          _BIT_ACCESS(WDTPSL,5)
// WDTPSL<PSCNT6>
extern volatile __bit                   PSCNT6              __at(0x1CAEE);	// @ (0x395D * 8 + 6)
#define                                 PSCNT6_bit          _BIT_ACCESS(WDTPSL,6)
// WDTPSL<PSCNT7>
extern volatile __bit                   PSCNT7              __at(0x1CAEF);	// @ (0x395D * 8 + 7)
#define                                 PSCNT7_bit          _BIT_ACCESS(WDTPSL,7)
// WDTPSH<PSCNT8>
extern volatile __bit                   PSCNT8              __at(0x1CAF0);	// @ (0x395E * 8 + 0)
#define                                 PSCNT8_bit          _BIT_ACCESS(WDTPSH,0)
// WDTPSH<PSCNT9>
extern volatile __bit                   PSCNT9              __at(0x1CAF1);	// @ (0x395E * 8 + 1)
#define                                 PSCNT9_bit          _BIT_ACCESS(WDTPSH,1)
// ADCON2<PSIS>
extern volatile __bit                   PSIS                __at(0x1F7D7);	// @ (0x3EFA * 8 + 7)
#define                                 PSIS_bit            _BIT_ACCESS(ADCON2,7)
// DAC1CON0<PSS0>
extern volatile __bit                   PSS0                __at(0x1F4F2);	// @ (0x3E9E * 8 + 2)
#define                                 PSS0_bit            _BIT_ACCESS(DAC1CON0,2)
// DAC1CON0<PSS1>
extern volatile __bit                   PSS1                __at(0x1F4F3);	// @ (0x3E9E * 8 + 3)
#define                                 PSS1_bit            _BIT_ACCESS(DAC1CON0,3)
// PWM5DCL<PWM5DC0>
extern volatile __bit                   PWM5DC0             __at(0x1FB66);	// @ (0x3F6C * 8 + 6)
#define                                 PWM5DC0_bit         _BIT_ACCESS(PWM5DCL,6)
// PWM5DCL<PWM5DC1>
extern volatile __bit                   PWM5DC1             __at(0x1FB67);	// @ (0x3F6C * 8 + 7)
#define                                 PWM5DC1_bit         _BIT_ACCESS(PWM5DCL,7)
// PWM5DCH<PWM5DC2>
extern volatile __bit                   PWM5DC2             __at(0x1FB68);	// @ (0x3F6D * 8 + 0)
#define                                 PWM5DC2_bit         _BIT_ACCESS(PWM5DCH,0)
// PWM5DCH<PWM5DC3>
extern volatile __bit                   PWM5DC3             __at(0x1FB69);	// @ (0x3F6D * 8 + 1)
#define                                 PWM5DC3_bit         _BIT_ACCESS(PWM5DCH,1)
// PWM5DCH<PWM5DC4>
extern volatile __bit                   PWM5DC4             __at(0x1FB6A);	// @ (0x3F6D * 8 + 2)
#define                                 PWM5DC4_bit         _BIT_ACCESS(PWM5DCH,2)
// PWM5DCH<PWM5DC5>
extern volatile __bit                   PWM5DC5             __at(0x1FB6B);	// @ (0x3F6D * 8 + 3)
#define                                 PWM5DC5_bit         _BIT_ACCESS(PWM5DCH,3)
// PWM5DCH<PWM5DC6>
extern volatile __bit                   PWM5DC6             __at(0x1FB6C);	// @ (0x3F6D * 8 + 4)
#define                                 PWM5DC6_bit         _BIT_ACCESS(PWM5DCH,4)
// PWM5DCH<PWM5DC7>
extern volatile __bit                   PWM5DC7             __at(0x1FB6D);	// @ (0x3F6D * 8 + 5)
#define                                 PWM5DC7_bit         _BIT_ACCESS(PWM5DCH,5)
// PWM5DCH<PWM5DC8>
extern volatile __bit                   PWM5DC8             __at(0x1FB6E);	// @ (0x3F6D * 8 + 6)
#define                                 PWM5DC8_bit         _BIT_ACCESS(PWM5DCH,6)
// PWM5DCH<PWM5DC9>
extern volatile __bit                   PWM5DC9             __at(0x1FB6F);	// @ (0x3F6D * 8 + 7)
#define                                 PWM5DC9_bit         _BIT_ACCESS(PWM5DCH,7)
// PWM5CON<PWM5EN>
extern volatile __bit                   PWM5EN              __at(0x1FB77);	// @ (0x3F6E * 8 + 7)
#define                                 PWM5EN_bit          _BIT_ACCESS(PWM5CON,7)
// PMD3<PWM5MD>
extern volatile __bit                   PWM5MD              __at(0x1CE1C);	// @ (0x39C3 * 8 + 4)
#define                                 PWM5MD_bit          _BIT_ACCESS(PMD3,4)
// PWM5CON<PWM5OUT>
extern volatile __bit                   PWM5OUT             __at(0x1FB75);	// @ (0x3F6E * 8 + 5)
#define                                 PWM5OUT_bit         _BIT_ACCESS(PWM5CON,5)
// PWM5CON<PWM5POL>
extern volatile __bit                   PWM5POL             __at(0x1FB74);	// @ (0x3F6E * 8 + 4)
#define                                 PWM5POL_bit         _BIT_ACCESS(PWM5CON,4)
// PWM6DCL<PWM6DC0>
extern volatile __bit                   PWM6DC0             __at(0x1FB46);	// @ (0x3F68 * 8 + 6)
#define                                 PWM6DC0_bit         _BIT_ACCESS(PWM6DCL,6)
// PWM6DCL<PWM6DC1>
extern volatile __bit                   PWM6DC1             __at(0x1FB47);	// @ (0x3F68 * 8 + 7)
#define                                 PWM6DC1_bit         _BIT_ACCESS(PWM6DCL,7)
// PWM6DCH<PWM6DC2>
extern volatile __bit                   PWM6DC2             __at(0x1FB48);	// @ (0x3F69 * 8 + 0)
#define                                 PWM6DC2_bit         _BIT_ACCESS(PWM6DCH,0)
// PWM6DCH<PWM6DC3>
extern volatile __bit                   PWM6DC3             __at(0x1FB49);	// @ (0x3F69 * 8 + 1)
#define                                 PWM6DC3_bit         _BIT_ACCESS(PWM6DCH,1)
// PWM6DCH<PWM6DC4>
extern volatile __bit                   PWM6DC4             __at(0x1FB4A);	// @ (0x3F69 * 8 + 2)
#define                                 PWM6DC4_bit         _BIT_ACCESS(PWM6DCH,2)
// PWM6DCH<PWM6DC5>
extern volatile __bit                   PWM6DC5             __at(0x1FB4B);	// @ (0x3F69 * 8 + 3)
#define                                 PWM6DC5_bit         _BIT_ACCESS(PWM6DCH,3)
// PWM6DCH<PWM6DC6>
extern volatile __bit                   PWM6DC6             __at(0x1FB4C);	// @ (0x3F69 * 8 + 4)
#define                                 PWM6DC6_bit         _BIT_ACCESS(PWM6DCH,4)
// PWM6DCH<PWM6DC7>
extern volatile __bit                   PWM6DC7             __at(0x1FB4D);	// @ (0x3F69 * 8 + 5)
#define                                 PWM6DC7_bit         _BIT_ACCESS(PWM6DCH,5)
// PWM6DCH<PWM6DC8>
extern volatile __bit                   PWM6DC8             __at(0x1FB4E);	// @ (0x3F69 * 8 + 6)
#define                                 PWM6DC8_bit         _BIT_ACCESS(PWM6DCH,6)
// PWM6DCH<PWM6DC9>
extern volatile __bit                   PWM6DC9             __at(0x1FB4F);	// @ (0x3F69 * 8 + 7)
#define                                 PWM6DC9_bit         _BIT_ACCESS(PWM6DCH,7)
// PWM6CON<PWM6EN>
extern volatile __bit                   PWM6EN              __at(0x1FB57);	// @ (0x3F6A * 8 + 7)
#define                                 PWM6EN_bit          _BIT_ACCESS(PWM6CON,7)
// PMD3<PWM6MD>
extern volatile __bit                   PWM6MD              __at(0x1CE1D);	// @ (0x39C3 * 8 + 5)
#define                                 PWM6MD_bit          _BIT_ACCESS(PMD3,5)
// PWM6CON<PWM6OUT>
extern volatile __bit                   PWM6OUT             __at(0x1FB55);	// @ (0x3F6A * 8 + 5)
#define                                 PWM6OUT_bit         _BIT_ACCESS(PWM6CON,5)
// PWM6CON<PWM6POL>
extern volatile __bit                   PWM6POL             __at(0x1FB54);	// @ (0x3F6A * 8 + 4)
#define                                 PWM6POL_bit         _BIT_ACCESS(PWM6CON,4)
// PWM7DCL<PWM7DC0>
extern volatile __bit                   PWM7DC0             __at(0x1FB26);	// @ (0x3F64 * 8 + 6)
#define                                 PWM7DC0_bit         _BIT_ACCESS(PWM7DCL,6)
// PWM7DCL<PWM7DC1>
extern volatile __bit                   PWM7DC1             __at(0x1FB27);	// @ (0x3F64 * 8 + 7)
#define                                 PWM7DC1_bit         _BIT_ACCESS(PWM7DCL,7)
// PWM7DCH<PWM7DC2>
extern volatile __bit                   PWM7DC2             __at(0x1FB28);	// @ (0x3F65 * 8 + 0)
#define                                 PWM7DC2_bit         _BIT_ACCESS(PWM7DCH,0)
// PWM7DCH<PWM7DC3>
extern volatile __bit                   PWM7DC3             __at(0x1FB29);	// @ (0x3F65 * 8 + 1)
#define                                 PWM7DC3_bit         _BIT_ACCESS(PWM7DCH,1)
// PWM7DCH<PWM7DC4>
extern volatile __bit                   PWM7DC4             __at(0x1FB2A);	// @ (0x3F65 * 8 + 2)
#define                                 PWM7DC4_bit         _BIT_ACCESS(PWM7DCH,2)
// PWM7DCH<PWM7DC5>
extern volatile __bit                   PWM7DC5             __at(0x1FB2B);	// @ (0x3F65 * 8 + 3)
#define                                 PWM7DC5_bit         _BIT_ACCESS(PWM7DCH,3)
// PWM7DCH<PWM7DC6>
extern volatile __bit                   PWM7DC6             __at(0x1FB2C);	// @ (0x3F65 * 8 + 4)
#define                                 PWM7DC6_bit         _BIT_ACCESS(PWM7DCH,4)
// PWM7DCH<PWM7DC7>
extern volatile __bit                   PWM7DC7             __at(0x1FB2D);	// @ (0x3F65 * 8 + 5)
#define                                 PWM7DC7_bit         _BIT_ACCESS(PWM7DCH,5)
// PWM7DCH<PWM7DC8>
extern volatile __bit                   PWM7DC8             __at(0x1FB2E);	// @ (0x3F65 * 8 + 6)
#define                                 PWM7DC8_bit         _BIT_ACCESS(PWM7DCH,6)
// PWM7DCH<PWM7DC9>
extern volatile __bit                   PWM7DC9             __at(0x1FB2F);	// @ (0x3F65 * 8 + 7)
#define                                 PWM7DC9_bit         _BIT_ACCESS(PWM7DCH,7)
// PWM7CON<PWM7EN>
extern volatile __bit                   PWM7EN              __at(0x1FB37);	// @ (0x3F66 * 8 + 7)
#define                                 PWM7EN_bit          _BIT_ACCESS(PWM7CON,7)
// PMD3<PWM7MD>
extern volatile __bit                   PWM7MD              __at(0x1CE1E);	// @ (0x39C3 * 8 + 6)
#define                                 PWM7MD_bit          _BIT_ACCESS(PMD3,6)
// PWM7CON<PWM7OUT>
extern volatile __bit                   PWM7OUT             __at(0x1FB35);	// @ (0x3F66 * 8 + 5)
#define                                 PWM7OUT_bit         _BIT_ACCESS(PWM7CON,5)
// PWM7CON<PWM7POL>
extern volatile __bit                   PWM7POL             __at(0x1FB34);	// @ (0x3F66 * 8 + 4)
#define                                 PWM7POL_bit         _BIT_ACCESS(PWM7CON,4)
// PWM8DCL<PWM8DC0>
extern volatile __bit                   PWM8DC0             __at(0x1FB06);	// @ (0x3F60 * 8 + 6)
#define                                 PWM8DC0_bit         _BIT_ACCESS(PWM8DCL,6)
// PWM8DCL<PWM8DC1>
extern volatile __bit                   PWM8DC1             __at(0x1FB07);	// @ (0x3F60 * 8 + 7)
#define                                 PWM8DC1_bit         _BIT_ACCESS(PWM8DCL,7)
// PWM8DCH<PWM8DC2>
extern volatile __bit                   PWM8DC2             __at(0x1FB08);	// @ (0x3F61 * 8 + 0)
#define                                 PWM8DC2_bit         _BIT_ACCESS(PWM8DCH,0)
// PWM8DCH<PWM8DC3>
extern volatile __bit                   PWM8DC3             __at(0x1FB09);	// @ (0x3F61 * 8 + 1)
#define                                 PWM8DC3_bit         _BIT_ACCESS(PWM8DCH,1)
// PWM8DCH<PWM8DC4>
extern volatile __bit                   PWM8DC4             __at(0x1FB0A);	// @ (0x3F61 * 8 + 2)
#define                                 PWM8DC4_bit         _BIT_ACCESS(PWM8DCH,2)
// PWM8DCH<PWM8DC5>
extern volatile __bit                   PWM8DC5             __at(0x1FB0B);	// @ (0x3F61 * 8 + 3)
#define                                 PWM8DC5_bit         _BIT_ACCESS(PWM8DCH,3)
// PWM8DCH<PWM8DC6>
extern volatile __bit                   PWM8DC6             __at(0x1FB0C);	// @ (0x3F61 * 8 + 4)
#define                                 PWM8DC6_bit         _BIT_ACCESS(PWM8DCH,4)
// PWM8DCH<PWM8DC7>
extern volatile __bit                   PWM8DC7             __at(0x1FB0D);	// @ (0x3F61 * 8 + 5)
#define                                 PWM8DC7_bit         _BIT_ACCESS(PWM8DCH,5)
// PWM8DCH<PWM8DC8>
extern volatile __bit                   PWM8DC8             __at(0x1FB0E);	// @ (0x3F61 * 8 + 6)
#define                                 PWM8DC8_bit         _BIT_ACCESS(PWM8DCH,6)
// PWM8DCH<PWM8DC9>
extern volatile __bit                   PWM8DC9             __at(0x1FB0F);	// @ (0x3F61 * 8 + 7)
#define                                 PWM8DC9_bit         _BIT_ACCESS(PWM8DCH,7)
// PWM8CON<PWM8EN>
extern volatile __bit                   PWM8EN              __at(0x1FB17);	// @ (0x3F62 * 8 + 7)
#define                                 PWM8EN_bit          _BIT_ACCESS(PWM8CON,7)
// PMD3<PWM8MD>
extern volatile __bit                   PWM8MD              __at(0x1CE1F);	// @ (0x39C3 * 8 + 7)
#define                                 PWM8MD_bit          _BIT_ACCESS(PMD3,7)
// PWM8CON<PWM8OUT>
extern volatile __bit                   PWM8OUT             __at(0x1FB15);	// @ (0x3F62 * 8 + 5)
#define                                 PWM8OUT_bit         _BIT_ACCESS(PWM8CON,5)
// PWM8CON<PWM8POL>
extern volatile __bit                   PWM8POL             __at(0x1FB14);	// @ (0x3F62 * 8 + 4)
#define                                 PWM8POL_bit         _BIT_ACCESS(PWM8CON,4)
// NCO1CLK<PWS0>
extern volatile __bit                   PWS0                __at(0x1F9FD);	// @ (0x3F3F * 8 + 5)
#define                                 PWS0_bit            _BIT_ACCESS(NCO1CLK,5)
// NCO1CLK<PWS1>
extern volatile __bit                   PWS1                __at(0x1F9FE);	// @ (0x3F3F * 8 + 6)
#define                                 PWS1_bit            _BIT_ACCESS(NCO1CLK,6)
// NCO1CLK<PWS2>
extern volatile __bit                   PWS2                __at(0x1F9FF);	// @ (0x3F3F * 8 + 7)
#define                                 PWS2_bit            _BIT_ACCESS(NCO1CLK,7)
// PORTA<RA0>
extern volatile __bit                   RA0                 __at(0x1FE50);	// @ (0x3FCA * 8 + 0)
#define                                 RA0_bit             _BIT_ACCESS(PORTA,0)
// RA0PPS<RA0PPS0>
extern volatile __bit                   RA0PPS0             __at(0x1D000);	// @ (0x3A00 * 8 + 0)
#define                                 RA0PPS0_bit         _BIT_ACCESS(RA0PPS,0)
// RA0PPS<RA0PPS1>
extern volatile __bit                   RA0PPS1             __at(0x1D001);	// @ (0x3A00 * 8 + 1)
#define                                 RA0PPS1_bit         _BIT_ACCESS(RA0PPS,1)
// RA0PPS<RA0PPS2>
extern volatile __bit                   RA0PPS2             __at(0x1D002);	// @ (0x3A00 * 8 + 2)
#define                                 RA0PPS2_bit         _BIT_ACCESS(RA0PPS,2)
// RA0PPS<RA0PPS3>
extern volatile __bit                   RA0PPS3             __at(0x1D003);	// @ (0x3A00 * 8 + 3)
#define                                 RA0PPS3_bit         _BIT_ACCESS(RA0PPS,3)
// RA0PPS<RA0PPS4>
extern volatile __bit                   RA0PPS4             __at(0x1D004);	// @ (0x3A00 * 8 + 4)
#define                                 RA0PPS4_bit         _BIT_ACCESS(RA0PPS,4)
// RA0PPS<RA0PPS5>
extern volatile __bit                   RA0PPS5             __at(0x1D005);	// @ (0x3A00 * 8 + 5)
#define                                 RA0PPS5_bit         _BIT_ACCESS(RA0PPS,5)
// PORTA<RA1>
extern volatile __bit                   RA1                 __at(0x1FE51);	// @ (0x3FCA * 8 + 1)
#define                                 RA1_bit             _BIT_ACCESS(PORTA,1)
// RA1PPS<RA1PPS0>
extern volatile __bit                   RA1PPS0             __at(0x1D008);	// @ (0x3A01 * 8 + 0)
#define                                 RA1PPS0_bit         _BIT_ACCESS(RA1PPS,0)
// RA1PPS<RA1PPS1>
extern volatile __bit                   RA1PPS1             __at(0x1D009);	// @ (0x3A01 * 8 + 1)
#define                                 RA1PPS1_bit         _BIT_ACCESS(RA1PPS,1)
// RA1PPS<RA1PPS2>
extern volatile __bit                   RA1PPS2             __at(0x1D00A);	// @ (0x3A01 * 8 + 2)
#define                                 RA1PPS2_bit         _BIT_ACCESS(RA1PPS,2)
// RA1PPS<RA1PPS3>
extern volatile __bit                   RA1PPS3             __at(0x1D00B);	// @ (0x3A01 * 8 + 3)
#define                                 RA1PPS3_bit         _BIT_ACCESS(RA1PPS,3)
// RA1PPS<RA1PPS4>
extern volatile __bit                   RA1PPS4             __at(0x1D00C);	// @ (0x3A01 * 8 + 4)
#define                                 RA1PPS4_bit         _BIT_ACCESS(RA1PPS,4)
// RA1PPS<RA1PPS5>
extern volatile __bit                   RA1PPS5             __at(0x1D00D);	// @ (0x3A01 * 8 + 5)
#define                                 RA1PPS5_bit         _BIT_ACCESS(RA1PPS,5)
// PORTA<RA2>
extern volatile __bit                   RA2                 __at(0x1FE52);	// @ (0x3FCA * 8 + 2)
#define                                 RA2_bit             _BIT_ACCESS(PORTA,2)
// RA2PPS<RA2PPS0>
extern volatile __bit                   RA2PPS0             __at(0x1D010);	// @ (0x3A02 * 8 + 0)
#define                                 RA2PPS0_bit         _BIT_ACCESS(RA2PPS,0)
// RA2PPS<RA2PPS1>
extern volatile __bit                   RA2PPS1             __at(0x1D011);	// @ (0x3A02 * 8 + 1)
#define                                 RA2PPS1_bit         _BIT_ACCESS(RA2PPS,1)
// RA2PPS<RA2PPS2>
extern volatile __bit                   RA2PPS2             __at(0x1D012);	// @ (0x3A02 * 8 + 2)
#define                                 RA2PPS2_bit         _BIT_ACCESS(RA2PPS,2)
// RA2PPS<RA2PPS3>
extern volatile __bit                   RA2PPS3             __at(0x1D013);	// @ (0x3A02 * 8 + 3)
#define                                 RA2PPS3_bit         _BIT_ACCESS(RA2PPS,3)
// RA2PPS<RA2PPS4>
extern volatile __bit                   RA2PPS4             __at(0x1D014);	// @ (0x3A02 * 8 + 4)
#define                                 RA2PPS4_bit         _BIT_ACCESS(RA2PPS,4)
// RA2PPS<RA2PPS5>
extern volatile __bit                   RA2PPS5             __at(0x1D015);	// @ (0x3A02 * 8 + 5)
#define                                 RA2PPS5_bit         _BIT_ACCESS(RA2PPS,5)
// PORTA<RA3>
extern volatile __bit                   RA3                 __at(0x1FE53);	// @ (0x3FCA * 8 + 3)
#define                                 RA3_bit             _BIT_ACCESS(PORTA,3)
// RA3PPS<RA3PPS0>
extern volatile __bit                   RA3PPS0             __at(0x1D018);	// @ (0x3A03 * 8 + 0)
#define                                 RA3PPS0_bit         _BIT_ACCESS(RA3PPS,0)
// RA3PPS<RA3PPS1>
extern volatile __bit                   RA3PPS1             __at(0x1D019);	// @ (0x3A03 * 8 + 1)
#define                                 RA3PPS1_bit         _BIT_ACCESS(RA3PPS,1)
// RA3PPS<RA3PPS2>
extern volatile __bit                   RA3PPS2             __at(0x1D01A);	// @ (0x3A03 * 8 + 2)
#define                                 RA3PPS2_bit         _BIT_ACCESS(RA3PPS,2)
// RA3PPS<RA3PPS3>
extern volatile __bit                   RA3PPS3             __at(0x1D01B);	// @ (0x3A03 * 8 + 3)
#define                                 RA3PPS3_bit         _BIT_ACCESS(RA3PPS,3)
// RA3PPS<RA3PPS4>
extern volatile __bit                   RA3PPS4             __at(0x1D01C);	// @ (0x3A03 * 8 + 4)
#define                                 RA3PPS4_bit         _BIT_ACCESS(RA3PPS,4)
// RA3PPS<RA3PPS5>
extern volatile __bit                   RA3PPS5             __at(0x1D01D);	// @ (0x3A03 * 8 + 5)
#define                                 RA3PPS5_bit         _BIT_ACCESS(RA3PPS,5)
// PORTA<RA4>
extern volatile __bit                   RA4                 __at(0x1FE54);	// @ (0x3FCA * 8 + 4)
#define                                 RA4_bit             _BIT_ACCESS(PORTA,4)
// RA4PPS<RA4PPS0>
extern volatile __bit                   RA4PPS0             __at(0x1D020);	// @ (0x3A04 * 8 + 0)
#define                                 RA4PPS0_bit         _BIT_ACCESS(RA4PPS,0)
// RA4PPS<RA4PPS1>
extern volatile __bit                   RA4PPS1             __at(0x1D021);	// @ (0x3A04 * 8 + 1)
#define                                 RA4PPS1_bit         _BIT_ACCESS(RA4PPS,1)
// RA4PPS<RA4PPS2>
extern volatile __bit                   RA4PPS2             __at(0x1D022);	// @ (0x3A04 * 8 + 2)
#define                                 RA4PPS2_bit         _BIT_ACCESS(RA4PPS,2)
// RA4PPS<RA4PPS3>
extern volatile __bit                   RA4PPS3             __at(0x1D023);	// @ (0x3A04 * 8 + 3)
#define                                 RA4PPS3_bit         _BIT_ACCESS(RA4PPS,3)
// RA4PPS<RA4PPS4>
extern volatile __bit                   RA4PPS4             __at(0x1D024);	// @ (0x3A04 * 8 + 4)
#define                                 RA4PPS4_bit         _BIT_ACCESS(RA4PPS,4)
// RA4PPS<RA4PPS5>
extern volatile __bit                   RA4PPS5             __at(0x1D025);	// @ (0x3A04 * 8 + 5)
#define                                 RA4PPS5_bit         _BIT_ACCESS(RA4PPS,5)
// PORTA<RA5>
extern volatile __bit                   RA5                 __at(0x1FE55);	// @ (0x3FCA * 8 + 5)
#define                                 RA5_bit             _BIT_ACCESS(PORTA,5)
// RA5PPS<RA5PPS0>
extern volatile __bit                   RA5PPS0             __at(0x1D028);	// @ (0x3A05 * 8 + 0)
#define                                 RA5PPS0_bit         _BIT_ACCESS(RA5PPS,0)
// RA5PPS<RA5PPS1>
extern volatile __bit                   RA5PPS1             __at(0x1D029);	// @ (0x3A05 * 8 + 1)
#define                                 RA5PPS1_bit         _BIT_ACCESS(RA5PPS,1)
// RA5PPS<RA5PPS2>
extern volatile __bit                   RA5PPS2             __at(0x1D02A);	// @ (0x3A05 * 8 + 2)
#define                                 RA5PPS2_bit         _BIT_ACCESS(RA5PPS,2)
// RA5PPS<RA5PPS3>
extern volatile __bit                   RA5PPS3             __at(0x1D02B);	// @ (0x3A05 * 8 + 3)
#define                                 RA5PPS3_bit         _BIT_ACCESS(RA5PPS,3)
// RA5PPS<RA5PPS4>
extern volatile __bit                   RA5PPS4             __at(0x1D02C);	// @ (0x3A05 * 8 + 4)
#define                                 RA5PPS4_bit         _BIT_ACCESS(RA5PPS,4)
// RA5PPS<RA5PPS5>
extern volatile __bit                   RA5PPS5             __at(0x1D02D);	// @ (0x3A05 * 8 + 5)
#define                                 RA5PPS5_bit         _BIT_ACCESS(RA5PPS,5)
// PORTA<RA6>
extern volatile __bit                   RA6                 __at(0x1FE56);	// @ (0x3FCA * 8 + 6)
#define                                 RA6_bit             _BIT_ACCESS(PORTA,6)
// RA6PPS<RA6PPS0>
extern volatile __bit                   RA6PPS0             __at(0x1D030);	// @ (0x3A06 * 8 + 0)
#define                                 RA6PPS0_bit         _BIT_ACCESS(RA6PPS,0)
// RA6PPS<RA6PPS1>
extern volatile __bit                   RA6PPS1             __at(0x1D031);	// @ (0x3A06 * 8 + 1)
#define                                 RA6PPS1_bit         _BIT_ACCESS(RA6PPS,1)
// RA6PPS<RA6PPS2>
extern volatile __bit                   RA6PPS2             __at(0x1D032);	// @ (0x3A06 * 8 + 2)
#define                                 RA6PPS2_bit         _BIT_ACCESS(RA6PPS,2)
// RA6PPS<RA6PPS3>
extern volatile __bit                   RA6PPS3             __at(0x1D033);	// @ (0x3A06 * 8 + 3)
#define                                 RA6PPS3_bit         _BIT_ACCESS(RA6PPS,3)
// RA6PPS<RA6PPS4>
extern volatile __bit                   RA6PPS4             __at(0x1D034);	// @ (0x3A06 * 8 + 4)
#define                                 RA6PPS4_bit         _BIT_ACCESS(RA6PPS,4)
// RA6PPS<RA6PPS5>
extern volatile __bit                   RA6PPS5             __at(0x1D035);	// @ (0x3A06 * 8 + 5)
#define                                 RA6PPS5_bit         _BIT_ACCESS(RA6PPS,5)
// PORTA<RA7>
extern volatile __bit                   RA7                 __at(0x1FE57);	// @ (0x3FCA * 8 + 7)
#define                                 RA7_bit             _BIT_ACCESS(PORTA,7)
// RA7PPS<RA7PPS0>
extern volatile __bit                   RA7PPS0             __at(0x1D038);	// @ (0x3A07 * 8 + 0)
#define                                 RA7PPS0_bit         _BIT_ACCESS(RA7PPS,0)
// RA7PPS<RA7PPS1>
extern volatile __bit                   RA7PPS1             __at(0x1D039);	// @ (0x3A07 * 8 + 1)
#define                                 RA7PPS1_bit         _BIT_ACCESS(RA7PPS,1)
// RA7PPS<RA7PPS2>
extern volatile __bit                   RA7PPS2             __at(0x1D03A);	// @ (0x3A07 * 8 + 2)
#define                                 RA7PPS2_bit         _BIT_ACCESS(RA7PPS,2)
// RA7PPS<RA7PPS3>
extern volatile __bit                   RA7PPS3             __at(0x1D03B);	// @ (0x3A07 * 8 + 3)
#define                                 RA7PPS3_bit         _BIT_ACCESS(RA7PPS,3)
// RA7PPS<RA7PPS4>
extern volatile __bit                   RA7PPS4             __at(0x1D03C);	// @ (0x3A07 * 8 + 4)
#define                                 RA7PPS4_bit         _BIT_ACCESS(RA7PPS,4)
// RA7PPS<RA7PPS5>
extern volatile __bit                   RA7PPS5             __at(0x1D03D);	// @ (0x3A07 * 8 + 5)
#define                                 RA7PPS5_bit         _BIT_ACCESS(RA7PPS,5)
// PORTB<RB0>
extern volatile __bit                   RB0                 __at(0x1FE58);	// @ (0x3FCB * 8 + 0)
#define                                 RB0_bit             _BIT_ACCESS(PORTB,0)
// RB0PPS<RB0PPS0>
extern volatile __bit                   RB0PPS0             __at(0x1D040);	// @ (0x3A08 * 8 + 0)
#define                                 RB0PPS0_bit         _BIT_ACCESS(RB0PPS,0)
// RB0PPS<RB0PPS1>
extern volatile __bit                   RB0PPS1             __at(0x1D041);	// @ (0x3A08 * 8 + 1)
#define                                 RB0PPS1_bit         _BIT_ACCESS(RB0PPS,1)
// RB0PPS<RB0PPS2>
extern volatile __bit                   RB0PPS2             __at(0x1D042);	// @ (0x3A08 * 8 + 2)
#define                                 RB0PPS2_bit         _BIT_ACCESS(RB0PPS,2)
// RB0PPS<RB0PPS3>
extern volatile __bit                   RB0PPS3             __at(0x1D043);	// @ (0x3A08 * 8 + 3)
#define                                 RB0PPS3_bit         _BIT_ACCESS(RB0PPS,3)
// RB0PPS<RB0PPS4>
extern volatile __bit                   RB0PPS4             __at(0x1D044);	// @ (0x3A08 * 8 + 4)
#define                                 RB0PPS4_bit         _BIT_ACCESS(RB0PPS,4)
// RB0PPS<RB0PPS5>
extern volatile __bit                   RB0PPS5             __at(0x1D045);	// @ (0x3A08 * 8 + 5)
#define                                 RB0PPS5_bit         _BIT_ACCESS(RB0PPS,5)
// PORTB<RB1>
extern volatile __bit                   RB1                 __at(0x1FE59);	// @ (0x3FCB * 8 + 1)
#define                                 RB1_bit             _BIT_ACCESS(PORTB,1)
// RB1PPS<RB1PPS0>
extern volatile __bit                   RB1PPS0             __at(0x1D048);	// @ (0x3A09 * 8 + 0)
#define                                 RB1PPS0_bit         _BIT_ACCESS(RB1PPS,0)
// RB1PPS<RB1PPS1>
extern volatile __bit                   RB1PPS1             __at(0x1D049);	// @ (0x3A09 * 8 + 1)
#define                                 RB1PPS1_bit         _BIT_ACCESS(RB1PPS,1)
// RB1PPS<RB1PPS2>
extern volatile __bit                   RB1PPS2             __at(0x1D04A);	// @ (0x3A09 * 8 + 2)
#define                                 RB1PPS2_bit         _BIT_ACCESS(RB1PPS,2)
// RB1PPS<RB1PPS3>
extern volatile __bit                   RB1PPS3             __at(0x1D04B);	// @ (0x3A09 * 8 + 3)
#define                                 RB1PPS3_bit         _BIT_ACCESS(RB1PPS,3)
// RB1PPS<RB1PPS4>
extern volatile __bit                   RB1PPS4             __at(0x1D04C);	// @ (0x3A09 * 8 + 4)
#define                                 RB1PPS4_bit         _BIT_ACCESS(RB1PPS,4)
// RB1PPS<RB1PPS5>
extern volatile __bit                   RB1PPS5             __at(0x1D04D);	// @ (0x3A09 * 8 + 5)
#define                                 RB1PPS5_bit         _BIT_ACCESS(RB1PPS,5)
// PORTB<RB2>
extern volatile __bit                   RB2                 __at(0x1FE5A);	// @ (0x3FCB * 8 + 2)
#define                                 RB2_bit             _BIT_ACCESS(PORTB,2)
// RB2PPS<RB2PPS0>
extern volatile __bit                   RB2PPS0             __at(0x1D050);	// @ (0x3A0A * 8 + 0)
#define                                 RB2PPS0_bit         _BIT_ACCESS(RB2PPS,0)
// RB2PPS<RB2PPS1>
extern volatile __bit                   RB2PPS1             __at(0x1D051);	// @ (0x3A0A * 8 + 1)
#define                                 RB2PPS1_bit         _BIT_ACCESS(RB2PPS,1)
// RB2PPS<RB2PPS2>
extern volatile __bit                   RB2PPS2             __at(0x1D052);	// @ (0x3A0A * 8 + 2)
#define                                 RB2PPS2_bit         _BIT_ACCESS(RB2PPS,2)
// RB2PPS<RB2PPS3>
extern volatile __bit                   RB2PPS3             __at(0x1D053);	// @ (0x3A0A * 8 + 3)
#define                                 RB2PPS3_bit         _BIT_ACCESS(RB2PPS,3)
// RB2PPS<RB2PPS4>
extern volatile __bit                   RB2PPS4             __at(0x1D054);	// @ (0x3A0A * 8 + 4)
#define                                 RB2PPS4_bit         _BIT_ACCESS(RB2PPS,4)
// RB2PPS<RB2PPS5>
extern volatile __bit                   RB2PPS5             __at(0x1D055);	// @ (0x3A0A * 8 + 5)
#define                                 RB2PPS5_bit         _BIT_ACCESS(RB2PPS,5)
// PORTB<RB3>
extern volatile __bit                   RB3                 __at(0x1FE5B);	// @ (0x3FCB * 8 + 3)
#define                                 RB3_bit             _BIT_ACCESS(PORTB,3)
// RB3PPS<RB3PPS0>
extern volatile __bit                   RB3PPS0             __at(0x1D058);	// @ (0x3A0B * 8 + 0)
#define                                 RB3PPS0_bit         _BIT_ACCESS(RB3PPS,0)
// RB3PPS<RB3PPS1>
extern volatile __bit                   RB3PPS1             __at(0x1D059);	// @ (0x3A0B * 8 + 1)
#define                                 RB3PPS1_bit         _BIT_ACCESS(RB3PPS,1)
// RB3PPS<RB3PPS2>
extern volatile __bit                   RB3PPS2             __at(0x1D05A);	// @ (0x3A0B * 8 + 2)
#define                                 RB3PPS2_bit         _BIT_ACCESS(RB3PPS,2)
// RB3PPS<RB3PPS3>
extern volatile __bit                   RB3PPS3             __at(0x1D05B);	// @ (0x3A0B * 8 + 3)
#define                                 RB3PPS3_bit         _BIT_ACCESS(RB3PPS,3)
// RB3PPS<RB3PPS4>
extern volatile __bit                   RB3PPS4             __at(0x1D05C);	// @ (0x3A0B * 8 + 4)
#define                                 RB3PPS4_bit         _BIT_ACCESS(RB3PPS,4)
// RB3PPS<RB3PPS5>
extern volatile __bit                   RB3PPS5             __at(0x1D05D);	// @ (0x3A0B * 8 + 5)
#define                                 RB3PPS5_bit         _BIT_ACCESS(RB3PPS,5)
// PORTB<RB4>
extern volatile __bit                   RB4                 __at(0x1FE5C);	// @ (0x3FCB * 8 + 4)
#define                                 RB4_bit             _BIT_ACCESS(PORTB,4)
// RB4PPS<RB4PPS0>
extern volatile __bit                   RB4PPS0             __at(0x1D060);	// @ (0x3A0C * 8 + 0)
#define                                 RB4PPS0_bit         _BIT_ACCESS(RB4PPS,0)
// RB4PPS<RB4PPS1>
extern volatile __bit                   RB4PPS1             __at(0x1D061);	// @ (0x3A0C * 8 + 1)
#define                                 RB4PPS1_bit         _BIT_ACCESS(RB4PPS,1)
// RB4PPS<RB4PPS2>
extern volatile __bit                   RB4PPS2             __at(0x1D062);	// @ (0x3A0C * 8 + 2)
#define                                 RB4PPS2_bit         _BIT_ACCESS(RB4PPS,2)
// RB4PPS<RB4PPS3>
extern volatile __bit                   RB4PPS3             __at(0x1D063);	// @ (0x3A0C * 8 + 3)
#define                                 RB4PPS3_bit         _BIT_ACCESS(RB4PPS,3)
// RB4PPS<RB4PPS4>
extern volatile __bit                   RB4PPS4             __at(0x1D064);	// @ (0x3A0C * 8 + 4)
#define                                 RB4PPS4_bit         _BIT_ACCESS(RB4PPS,4)
// RB4PPS<RB4PPS5>
extern volatile __bit                   RB4PPS5             __at(0x1D065);	// @ (0x3A0C * 8 + 5)
#define                                 RB4PPS5_bit         _BIT_ACCESS(RB4PPS,5)
// PORTB<RB5>
extern volatile __bit                   RB5                 __at(0x1FE5D);	// @ (0x3FCB * 8 + 5)
#define                                 RB5_bit             _BIT_ACCESS(PORTB,5)
// RB5PPS<RB5PPS0>
extern volatile __bit                   RB5PPS0             __at(0x1D068);	// @ (0x3A0D * 8 + 0)
#define                                 RB5PPS0_bit         _BIT_ACCESS(RB5PPS,0)
// RB5PPS<RB5PPS1>
extern volatile __bit                   RB5PPS1             __at(0x1D069);	// @ (0x3A0D * 8 + 1)
#define                                 RB5PPS1_bit         _BIT_ACCESS(RB5PPS,1)
// RB5PPS<RB5PPS2>
extern volatile __bit                   RB5PPS2             __at(0x1D06A);	// @ (0x3A0D * 8 + 2)
#define                                 RB5PPS2_bit         _BIT_ACCESS(RB5PPS,2)
// RB5PPS<RB5PPS3>
extern volatile __bit                   RB5PPS3             __at(0x1D06B);	// @ (0x3A0D * 8 + 3)
#define                                 RB5PPS3_bit         _BIT_ACCESS(RB5PPS,3)
// RB5PPS<RB5PPS4>
extern volatile __bit                   RB5PPS4             __at(0x1D06C);	// @ (0x3A0D * 8 + 4)
#define                                 RB5PPS4_bit         _BIT_ACCESS(RB5PPS,4)
// RB5PPS<RB5PPS5>
extern volatile __bit                   RB5PPS5             __at(0x1D06D);	// @ (0x3A0D * 8 + 5)
#define                                 RB5PPS5_bit         _BIT_ACCESS(RB5PPS,5)
// PORTB<RB6>
extern volatile __bit                   RB6                 __at(0x1FE5E);	// @ (0x3FCB * 8 + 6)
#define                                 RB6_bit             _BIT_ACCESS(PORTB,6)
// RB6PPS<RB6PPS0>
extern volatile __bit                   RB6PPS0             __at(0x1D070);	// @ (0x3A0E * 8 + 0)
#define                                 RB6PPS0_bit         _BIT_ACCESS(RB6PPS,0)
// RB6PPS<RB6PPS1>
extern volatile __bit                   RB6PPS1             __at(0x1D071);	// @ (0x3A0E * 8 + 1)
#define                                 RB6PPS1_bit         _BIT_ACCESS(RB6PPS,1)
// RB6PPS<RB6PPS2>
extern volatile __bit                   RB6PPS2             __at(0x1D072);	// @ (0x3A0E * 8 + 2)
#define                                 RB6PPS2_bit         _BIT_ACCESS(RB6PPS,2)
// RB6PPS<RB6PPS3>
extern volatile __bit                   RB6PPS3             __at(0x1D073);	// @ (0x3A0E * 8 + 3)
#define                                 RB6PPS3_bit         _BIT_ACCESS(RB6PPS,3)
// RB6PPS<RB6PPS4>
extern volatile __bit                   RB6PPS4             __at(0x1D074);	// @ (0x3A0E * 8 + 4)
#define                                 RB6PPS4_bit         _BIT_ACCESS(RB6PPS,4)
// RB6PPS<RB6PPS5>
extern volatile __bit                   RB6PPS5             __at(0x1D075);	// @ (0x3A0E * 8 + 5)
#define                                 RB6PPS5_bit         _BIT_ACCESS(RB6PPS,5)
// PORTB<RB7>
extern volatile __bit                   RB7                 __at(0x1FE5F);	// @ (0x3FCB * 8 + 7)
#define                                 RB7_bit             _BIT_ACCESS(PORTB,7)
// RB7PPS<RB7PPS0>
extern volatile __bit                   RB7PPS0             __at(0x1D078);	// @ (0x3A0F * 8 + 0)
#define                                 RB7PPS0_bit         _BIT_ACCESS(RB7PPS,0)
// RB7PPS<RB7PPS1>
extern volatile __bit                   RB7PPS1             __at(0x1D079);	// @ (0x3A0F * 8 + 1)
#define                                 RB7PPS1_bit         _BIT_ACCESS(RB7PPS,1)
// RB7PPS<RB7PPS2>
extern volatile __bit                   RB7PPS2             __at(0x1D07A);	// @ (0x3A0F * 8 + 2)
#define                                 RB7PPS2_bit         _BIT_ACCESS(RB7PPS,2)
// RB7PPS<RB7PPS3>
extern volatile __bit                   RB7PPS3             __at(0x1D07B);	// @ (0x3A0F * 8 + 3)
#define                                 RB7PPS3_bit         _BIT_ACCESS(RB7PPS,3)
// RB7PPS<RB7PPS4>
extern volatile __bit                   RB7PPS4             __at(0x1D07C);	// @ (0x3A0F * 8 + 4)
#define                                 RB7PPS4_bit         _BIT_ACCESS(RB7PPS,4)
// RB7PPS<RB7PPS5>
extern volatile __bit                   RB7PPS5             __at(0x1D07D);	// @ (0x3A0F * 8 + 5)
#define                                 RB7PPS5_bit         _BIT_ACCESS(RB7PPS,5)
// PORTC<RC0>
extern volatile __bit                   RC0                 __at(0x1FE60);	// @ (0x3FCC * 8 + 0)
#define                                 RC0_bit             _BIT_ACCESS(PORTC,0)
// RC0PPS<RC0PPS0>
extern volatile __bit                   RC0PPS0             __at(0x1D080);	// @ (0x3A10 * 8 + 0)
#define                                 RC0PPS0_bit         _BIT_ACCESS(RC0PPS,0)
// RC0PPS<RC0PPS1>
extern volatile __bit                   RC0PPS1             __at(0x1D081);	// @ (0x3A10 * 8 + 1)
#define                                 RC0PPS1_bit         _BIT_ACCESS(RC0PPS,1)
// RC0PPS<RC0PPS2>
extern volatile __bit                   RC0PPS2             __at(0x1D082);	// @ (0x3A10 * 8 + 2)
#define                                 RC0PPS2_bit         _BIT_ACCESS(RC0PPS,2)
// RC0PPS<RC0PPS3>
extern volatile __bit                   RC0PPS3             __at(0x1D083);	// @ (0x3A10 * 8 + 3)
#define                                 RC0PPS3_bit         _BIT_ACCESS(RC0PPS,3)
// RC0PPS<RC0PPS4>
extern volatile __bit                   RC0PPS4             __at(0x1D084);	// @ (0x3A10 * 8 + 4)
#define                                 RC0PPS4_bit         _BIT_ACCESS(RC0PPS,4)
// RC0PPS<RC0PPS5>
extern volatile __bit                   RC0PPS5             __at(0x1D085);	// @ (0x3A10 * 8 + 5)
#define                                 RC0PPS5_bit         _BIT_ACCESS(RC0PPS,5)
// PORTC<RC1>
extern volatile __bit                   RC1                 __at(0x1FE61);	// @ (0x3FCC * 8 + 1)
#define                                 RC1_bit             _BIT_ACCESS(PORTC,1)
// RC1PPS<RC1PPS0>
extern volatile __bit                   RC1PPS0             __at(0x1D088);	// @ (0x3A11 * 8 + 0)
#define                                 RC1PPS0_bit         _BIT_ACCESS(RC1PPS,0)
// RC1PPS<RC1PPS1>
extern volatile __bit                   RC1PPS1             __at(0x1D089);	// @ (0x3A11 * 8 + 1)
#define                                 RC1PPS1_bit         _BIT_ACCESS(RC1PPS,1)
// RC1PPS<RC1PPS2>
extern volatile __bit                   RC1PPS2             __at(0x1D08A);	// @ (0x3A11 * 8 + 2)
#define                                 RC1PPS2_bit         _BIT_ACCESS(RC1PPS,2)
// RC1PPS<RC1PPS3>
extern volatile __bit                   RC1PPS3             __at(0x1D08B);	// @ (0x3A11 * 8 + 3)
#define                                 RC1PPS3_bit         _BIT_ACCESS(RC1PPS,3)
// RC1PPS<RC1PPS4>
extern volatile __bit                   RC1PPS4             __at(0x1D08C);	// @ (0x3A11 * 8 + 4)
#define                                 RC1PPS4_bit         _BIT_ACCESS(RC1PPS,4)
// RC1PPS<RC1PPS5>
extern volatile __bit                   RC1PPS5             __at(0x1D08D);	// @ (0x3A11 * 8 + 5)
#define                                 RC1PPS5_bit         _BIT_ACCESS(RC1PPS,5)
// PORTC<RC2>
extern volatile __bit                   RC2                 __at(0x1FE62);	// @ (0x3FCC * 8 + 2)
#define                                 RC2_bit             _BIT_ACCESS(PORTC,2)
// RC2PPS<RC2PPS0>
extern volatile __bit                   RC2PPS0             __at(0x1D090);	// @ (0x3A12 * 8 + 0)
#define                                 RC2PPS0_bit         _BIT_ACCESS(RC2PPS,0)
// RC2PPS<RC2PPS1>
extern volatile __bit                   RC2PPS1             __at(0x1D091);	// @ (0x3A12 * 8 + 1)
#define                                 RC2PPS1_bit         _BIT_ACCESS(RC2PPS,1)
// RC2PPS<RC2PPS2>
extern volatile __bit                   RC2PPS2             __at(0x1D092);	// @ (0x3A12 * 8 + 2)
#define                                 RC2PPS2_bit         _BIT_ACCESS(RC2PPS,2)
// RC2PPS<RC2PPS3>
extern volatile __bit                   RC2PPS3             __at(0x1D093);	// @ (0x3A12 * 8 + 3)
#define                                 RC2PPS3_bit         _BIT_ACCESS(RC2PPS,3)
// RC2PPS<RC2PPS4>
extern volatile __bit                   RC2PPS4             __at(0x1D094);	// @ (0x3A12 * 8 + 4)
#define                                 RC2PPS4_bit         _BIT_ACCESS(RC2PPS,4)
// RC2PPS<RC2PPS5>
extern volatile __bit                   RC2PPS5             __at(0x1D095);	// @ (0x3A12 * 8 + 5)
#define                                 RC2PPS5_bit         _BIT_ACCESS(RC2PPS,5)
// PORTC<RC3>
extern volatile __bit                   RC3                 __at(0x1FE63);	// @ (0x3FCC * 8 + 3)
#define                                 RC3_bit             _BIT_ACCESS(PORTC,3)
// RC3PPS<RC3PPS0>
extern volatile __bit                   RC3PPS0             __at(0x1D098);	// @ (0x3A13 * 8 + 0)
#define                                 RC3PPS0_bit         _BIT_ACCESS(RC3PPS,0)
// RC3PPS<RC3PPS1>
extern volatile __bit                   RC3PPS1             __at(0x1D099);	// @ (0x3A13 * 8 + 1)
#define                                 RC3PPS1_bit         _BIT_ACCESS(RC3PPS,1)
// RC3PPS<RC3PPS2>
extern volatile __bit                   RC3PPS2             __at(0x1D09A);	// @ (0x3A13 * 8 + 2)
#define                                 RC3PPS2_bit         _BIT_ACCESS(RC3PPS,2)
// RC3PPS<RC3PPS3>
extern volatile __bit                   RC3PPS3             __at(0x1D09B);	// @ (0x3A13 * 8 + 3)
#define                                 RC3PPS3_bit         _BIT_ACCESS(RC3PPS,3)
// RC3PPS<RC3PPS4>
extern volatile __bit                   RC3PPS4             __at(0x1D09C);	// @ (0x3A13 * 8 + 4)
#define                                 RC3PPS4_bit         _BIT_ACCESS(RC3PPS,4)
// RC3PPS<RC3PPS5>
extern volatile __bit                   RC3PPS5             __at(0x1D09D);	// @ (0x3A13 * 8 + 5)
#define                                 RC3PPS5_bit         _BIT_ACCESS(RC3PPS,5)
// PORTC<RC4>
extern volatile __bit                   RC4                 __at(0x1FE64);	// @ (0x3FCC * 8 + 4)
#define                                 RC4_bit             _BIT_ACCESS(PORTC,4)
// RC4PPS<RC4PPS0>
extern volatile __bit                   RC4PPS0             __at(0x1D0A0);	// @ (0x3A14 * 8 + 0)
#define                                 RC4PPS0_bit         _BIT_ACCESS(RC4PPS,0)
// RC4PPS<RC4PPS1>
extern volatile __bit                   RC4PPS1             __at(0x1D0A1);	// @ (0x3A14 * 8 + 1)
#define                                 RC4PPS1_bit         _BIT_ACCESS(RC4PPS,1)
// RC4PPS<RC4PPS2>
extern volatile __bit                   RC4PPS2             __at(0x1D0A2);	// @ (0x3A14 * 8 + 2)
#define                                 RC4PPS2_bit         _BIT_ACCESS(RC4PPS,2)
// RC4PPS<RC4PPS3>
extern volatile __bit                   RC4PPS3             __at(0x1D0A3);	// @ (0x3A14 * 8 + 3)
#define                                 RC4PPS3_bit         _BIT_ACCESS(RC4PPS,3)
// RC4PPS<RC4PPS4>
extern volatile __bit                   RC4PPS4             __at(0x1D0A4);	// @ (0x3A14 * 8 + 4)
#define                                 RC4PPS4_bit         _BIT_ACCESS(RC4PPS,4)
// RC4PPS<RC4PPS5>
extern volatile __bit                   RC4PPS5             __at(0x1D0A5);	// @ (0x3A14 * 8 + 5)
#define                                 RC4PPS5_bit         _BIT_ACCESS(RC4PPS,5)
// PORTC<RC5>
extern volatile __bit                   RC5                 __at(0x1FE65);	// @ (0x3FCC * 8 + 5)
#define                                 RC5_bit             _BIT_ACCESS(PORTC,5)
// RC5PPS<RC5PPS0>
extern volatile __bit                   RC5PPS0             __at(0x1D0A8);	// @ (0x3A15 * 8 + 0)
#define                                 RC5PPS0_bit         _BIT_ACCESS(RC5PPS,0)
// RC5PPS<RC5PPS1>
extern volatile __bit                   RC5PPS1             __at(0x1D0A9);	// @ (0x3A15 * 8 + 1)
#define                                 RC5PPS1_bit         _BIT_ACCESS(RC5PPS,1)
// RC5PPS<RC5PPS2>
extern volatile __bit                   RC5PPS2             __at(0x1D0AA);	// @ (0x3A15 * 8 + 2)
#define                                 RC5PPS2_bit         _BIT_ACCESS(RC5PPS,2)
// RC5PPS<RC5PPS3>
extern volatile __bit                   RC5PPS3             __at(0x1D0AB);	// @ (0x3A15 * 8 + 3)
#define                                 RC5PPS3_bit         _BIT_ACCESS(RC5PPS,3)
// RC5PPS<RC5PPS4>
extern volatile __bit                   RC5PPS4             __at(0x1D0AC);	// @ (0x3A15 * 8 + 4)
#define                                 RC5PPS4_bit         _BIT_ACCESS(RC5PPS,4)
// RC5PPS<RC5PPS5>
extern volatile __bit                   RC5PPS5             __at(0x1D0AD);	// @ (0x3A15 * 8 + 5)
#define                                 RC5PPS5_bit         _BIT_ACCESS(RC5PPS,5)
// PORTC<RC6>
extern volatile __bit                   RC6                 __at(0x1FE66);	// @ (0x3FCC * 8 + 6)
#define                                 RC6_bit             _BIT_ACCESS(PORTC,6)
// RC6PPS<RC6PPS0>
extern volatile __bit                   RC6PPS0             __at(0x1D0B0);	// @ (0x3A16 * 8 + 0)
#define                                 RC6PPS0_bit         _BIT_ACCESS(RC6PPS,0)
// RC6PPS<RC6PPS1>
extern volatile __bit                   RC6PPS1             __at(0x1D0B1);	// @ (0x3A16 * 8 + 1)
#define                                 RC6PPS1_bit         _BIT_ACCESS(RC6PPS,1)
// RC6PPS<RC6PPS2>
extern volatile __bit                   RC6PPS2             __at(0x1D0B2);	// @ (0x3A16 * 8 + 2)
#define                                 RC6PPS2_bit         _BIT_ACCESS(RC6PPS,2)
// RC6PPS<RC6PPS3>
extern volatile __bit                   RC6PPS3             __at(0x1D0B3);	// @ (0x3A16 * 8 + 3)
#define                                 RC6PPS3_bit         _BIT_ACCESS(RC6PPS,3)
// RC6PPS<RC6PPS4>
extern volatile __bit                   RC6PPS4             __at(0x1D0B4);	// @ (0x3A16 * 8 + 4)
#define                                 RC6PPS4_bit         _BIT_ACCESS(RC6PPS,4)
// RC6PPS<RC6PPS5>
extern volatile __bit                   RC6PPS5             __at(0x1D0B5);	// @ (0x3A16 * 8 + 5)
#define                                 RC6PPS5_bit         _BIT_ACCESS(RC6PPS,5)
// PORTC<RC7>
extern volatile __bit                   RC7                 __at(0x1FE67);	// @ (0x3FCC * 8 + 7)
#define                                 RC7_bit             _BIT_ACCESS(PORTC,7)
// RC7PPS<RC7PPS0>
extern volatile __bit                   RC7PPS0             __at(0x1D0B8);	// @ (0x3A17 * 8 + 0)
#define                                 RC7PPS0_bit         _BIT_ACCESS(RC7PPS,0)
// RC7PPS<RC7PPS1>
extern volatile __bit                   RC7PPS1             __at(0x1D0B9);	// @ (0x3A17 * 8 + 1)
#define                                 RC7PPS1_bit         _BIT_ACCESS(RC7PPS,1)
// RC7PPS<RC7PPS2>
extern volatile __bit                   RC7PPS2             __at(0x1D0BA);	// @ (0x3A17 * 8 + 2)
#define                                 RC7PPS2_bit         _BIT_ACCESS(RC7PPS,2)
// RC7PPS<RC7PPS3>
extern volatile __bit                   RC7PPS3             __at(0x1D0BB);	// @ (0x3A17 * 8 + 3)
#define                                 RC7PPS3_bit         _BIT_ACCESS(RC7PPS,3)
// RC7PPS<RC7PPS4>
extern volatile __bit                   RC7PPS4             __at(0x1D0BC);	// @ (0x3A17 * 8 + 4)
#define                                 RC7PPS4_bit         _BIT_ACCESS(RC7PPS,4)
// RC7PPS<RC7PPS5>
extern volatile __bit                   RC7PPS5             __at(0x1D0BD);	// @ (0x3A17 * 8 + 5)
#define                                 RC7PPS5_bit         _BIT_ACCESS(RC7PPS,5)
// NVMCON1<RD>
extern volatile __bit                   RD                  __at(0x1CF28);	// @ (0x39E5 * 8 + 0)
#define                                 RD_bit              _BIT_ACCESS(NVMCON1,0)
// T1CON<RD161>
extern volatile __bit                   RD161               __at(0x1FD91);	// @ (0x3FB2 * 8 + 1)
#define                                 RD161_bit           _BIT_ACCESS(T1CON,1)
// T3CON<RD163>
extern volatile __bit                   RD163               __at(0x1FD31);	// @ (0x3FA6 * 8 + 1)
#define                                 RD163_bit           _BIT_ACCESS(T3CON,1)
// T5CON<RD165>
extern volatile __bit                   RD165               __at(0x1FCD1);	// @ (0x3F9A * 8 + 1)
#define                                 RD165_bit           _BIT_ACCESS(T5CON,1)
// PORTE<RE3>
extern volatile __bit                   RE3                 __at(0x1FE73);	// @ (0x3FCE * 8 + 3)
#define                                 RE3_bit             _BIT_ACCESS(PORTE,3)
// NVMCON1<REG0>
extern volatile __bit                   REG0                __at(0x1CF2E);	// @ (0x39E5 * 8 + 6)
#define                                 REG0_bit            _BIT_ACCESS(NVMCON1,6)
// NVMCON1<REG1>
extern volatile __bit                   REG1                __at(0x1CF2F);	// @ (0x39E5 * 8 + 7)
#define                                 REG1_bit            _BIT_ACCESS(NVMCON1,7)
// SMT1CON1<REPEAT>
extern volatile __bit                   REPEAT              __at(0x1F8FE);	// @ (0x3F1F * 8 + 6)
#define                                 REPEAT_bit          _BIT_ACCESS(SMT1CON1,6)
// ADRESL<RES0>
extern volatile __bit                   RES0                __at(0x1F778);	// @ (0x3EEF * 8 + 0)
#define                                 RES0_bit            _BIT_ACCESS(ADRESL,0)
// ADRESL<RES1>
extern volatile __bit                   RES1                __at(0x1F779);	// @ (0x3EEF * 8 + 1)
#define                                 RES1_bit            _BIT_ACCESS(ADRESL,1)
// ADRESH<RES10>
extern volatile __bit                   RES10               __at(0x1F782);	// @ (0x3EF0 * 8 + 2)
#define                                 RES10_bit           _BIT_ACCESS(ADRESH,2)
// ADRESH<RES11>
extern volatile __bit                   RES11               __at(0x1F783);	// @ (0x3EF0 * 8 + 3)
#define                                 RES11_bit           _BIT_ACCESS(ADRESH,3)
// ADRESH<RES12>
extern volatile __bit                   RES12               __at(0x1F784);	// @ (0x3EF0 * 8 + 4)
#define                                 RES12_bit           _BIT_ACCESS(ADRESH,4)
// ADRESH<RES13>
extern volatile __bit                   RES13               __at(0x1F785);	// @ (0x3EF0 * 8 + 5)
#define                                 RES13_bit           _BIT_ACCESS(ADRESH,5)
// ADRESH<RES14>
extern volatile __bit                   RES14               __at(0x1F786);	// @ (0x3EF0 * 8 + 6)
#define                                 RES14_bit           _BIT_ACCESS(ADRESH,6)
// ADRESH<RES15>
extern volatile __bit                   RES15               __at(0x1F787);	// @ (0x3EF0 * 8 + 7)
#define                                 RES15_bit           _BIT_ACCESS(ADRESH,7)
// ADRESL<RES2>
extern volatile __bit                   RES2                __at(0x1F77A);	// @ (0x3EEF * 8 + 2)
#define                                 RES2_bit            _BIT_ACCESS(ADRESL,2)
// ADRESL<RES3>
extern volatile __bit                   RES3                __at(0x1F77B);	// @ (0x3EEF * 8 + 3)
#define                                 RES3_bit            _BIT_ACCESS(ADRESL,3)
// ADRESL<RES4>
extern volatile __bit                   RES4                __at(0x1F77C);	// @ (0x3EEF * 8 + 4)
#define                                 RES4_bit            _BIT_ACCESS(ADRESL,4)
// ADRESL<RES5>
extern volatile __bit                   RES5                __at(0x1F77D);	// @ (0x3EEF * 8 + 5)
#define                                 RES5_bit            _BIT_ACCESS(ADRESL,5)
// ADRESL<RES6>
extern volatile __bit                   RES6                __at(0x1F77E);	// @ (0x3EEF * 8 + 6)
#define                                 RES6_bit            _BIT_ACCESS(ADRESL,6)
// ADRESL<RES7>
extern volatile __bit                   RES7                __at(0x1F77F);	// @ (0x3EEF * 8 + 7)
#define                                 RES7_bit            _BIT_ACCESS(ADRESL,7)
// ADRESH<RES8>
extern volatile __bit                   RES8                __at(0x1F780);	// @ (0x3EF0 * 8 + 0)
#define                                 RES8_bit            _BIT_ACCESS(ADRESH,0)
// ADRESH<RES9>
extern volatile __bit                   RES9                __at(0x1F781);	// @ (0x3EF0 * 8 + 1)
#define                                 RES9_bit            _BIT_ACCESS(ADRESH,1)
// PCON0<RI>
extern volatile __bit                   RI                  __at(0x1FF82);	// @ (0x3FF0 * 8 + 2)
#define                                 RI_bit              _BIT_ACCESS(PCON0,2)
// PCON0<RMCLR>
extern volatile __bit                   RMCLR               __at(0x1FF83);	// @ (0x3FF0 * 8 + 3)
#define                                 RMCLR_bit           _BIT_ACCESS(PCON0,3)
// CPUDOZE<ROI>
extern volatile __bit                   ROI                 __at(0x1CEC5);	// @ (0x39D8 * 8 + 5)
#define                                 ROI_bit             _BIT_ACCESS(CPUDOZE,5)
// ADRPT<RPT0>
extern volatile __bit                   RPT0                __at(0x1F760);	// @ (0x3EEC * 8 + 0)
#define                                 RPT0_bit            _BIT_ACCESS(ADRPT,0)
// ADRPT<RPT1>
extern volatile __bit                   RPT1                __at(0x1F761);	// @ (0x3EEC * 8 + 1)
#define                                 RPT1_bit            _BIT_ACCESS(ADRPT,1)
// ADRPT<RPT2>
extern volatile __bit                   RPT2                __at(0x1F762);	// @ (0x3EEC * 8 + 2)
#define                                 RPT2_bit            _BIT_ACCESS(ADRPT,2)
// ADRPT<RPT3>
extern volatile __bit                   RPT3                __at(0x1F763);	// @ (0x3EEC * 8 + 3)
#define                                 RPT3_bit            _BIT_ACCESS(ADRPT,3)
// ADRPT<RPT4>
extern volatile __bit                   RPT4                __at(0x1F764);	// @ (0x3EEC * 8 + 4)
#define                                 RPT4_bit            _BIT_ACCESS(ADRPT,4)
// ADRPT<RPT5>
extern volatile __bit                   RPT5                __at(0x1F765);	// @ (0x3EEC * 8 + 5)
#define                                 RPT5_bit            _BIT_ACCESS(ADRPT,5)
// ADRPT<RPT6>
extern volatile __bit                   RPT6                __at(0x1F766);	// @ (0x3EEC * 8 + 6)
#define                                 RPT6_bit            _BIT_ACCESS(ADRPT,6)
// ADRPT<RPT7>
extern volatile __bit                   RPT7                __at(0x1F767);	// @ (0x3EEC * 8 + 7)
#define                                 RPT7_bit            _BIT_ACCESS(ADRPT,7)
// I2C1PIE<RSC1IE>
extern volatile __bit                   RSC1IE              __at(0x1EBD1);	// @ (0x3D7A * 8 + 1)
#define                                 RSC1IE_bit          _BIT_ACCESS(I2C1PIE,1)
// I2C1PIR<RSC1IF>
extern volatile __bit                   RSC1IF              __at(0x1EBC9);	// @ (0x3D79 * 8 + 1)
#define                                 RSC1IF_bit          _BIT_ACCESS(I2C1PIR,1)
// I2C2PIE<RSC2IE>
extern volatile __bit                   RSC2IE              __at(0x1EB21);	// @ (0x3D64 * 8 + 1)
#define                                 RSC2IE_bit          _BIT_ACCESS(I2C2PIE,1)
// I2C2PIR<RSC2IF>
extern volatile __bit                   RSC2IF              __at(0x1EB19);	// @ (0x3D63 * 8 + 1)
#define                                 RSC2IF_bit          _BIT_ACCESS(I2C2PIR,1)
// SMT1STAT<RST>
extern volatile __bit                   RST                 __at(0x1F905);	// @ (0x3F20 * 8 + 5)
#define                                 RST_bit             _BIT_ACCESS(SMT1STAT,5)
// PCON0<RWDT>
extern volatile __bit                   RWDT                __at(0x1FF84);	// @ (0x3FF0 * 8 + 4)
#define                                 RWDT_bit            _BIT_ACCESS(PCON0,4)
// SPI1RXB<RXB0>
extern volatile __bit                   RXB0                __at(0x1E880);	// @ (0x3D10 * 8 + 0)
#define                                 RXB0_bit            _BIT_ACCESS(SPI1RXB,0)
// SPI1RXB<RXB1>
extern volatile __bit                   RXB1                __at(0x1E881);	// @ (0x3D10 * 8 + 1)
#define                                 RXB1_bit            _BIT_ACCESS(SPI1RXB,1)
// SPI1RXB<RXB2>
extern volatile __bit                   RXB2                __at(0x1E882);	// @ (0x3D10 * 8 + 2)
#define                                 RXB2_bit            _BIT_ACCESS(SPI1RXB,2)
// SPI1RXB<RXB3>
extern volatile __bit                   RXB3                __at(0x1E883);	// @ (0x3D10 * 8 + 3)
#define                                 RXB3_bit            _BIT_ACCESS(SPI1RXB,3)
// SPI1RXB<RXB4>
extern volatile __bit                   RXB4                __at(0x1E884);	// @ (0x3D10 * 8 + 4)
#define                                 RXB4_bit            _BIT_ACCESS(SPI1RXB,4)
// SPI1RXB<RXB5>
extern volatile __bit                   RXB5                __at(0x1E885);	// @ (0x3D10 * 8 + 5)
#define                                 RXB5_bit            _BIT_ACCESS(SPI1RXB,5)
// SPI1RXB<RXB6>
extern volatile __bit                   RXB6                __at(0x1E886);	// @ (0x3D10 * 8 + 6)
#define                                 RXB6_bit            _BIT_ACCESS(SPI1RXB,6)
// SPI1RXB<RXB7>
extern volatile __bit                   RXB7                __at(0x1E887);	// @ (0x3D10 * 8 + 7)
#define                                 RXB7_bit            _BIT_ACCESS(SPI1RXB,7)
// SPI1INTE<RXOIE>
extern volatile __bit                   RXOIE               __at(0x1E8DA);	// @ (0x3D1B * 8 + 2)
#define                                 RXOIE_bit           _BIT_ACCESS(SPI1INTE,2)
// SPI1INTF<RXOIF>
extern volatile __bit                   RXOIF               __at(0x1E8D2);	// @ (0x3D1A * 8 + 2)
#define                                 RXOIF_bit           _BIT_ACCESS(SPI1INTF,2)
// SPI1CON2<RXR>
extern volatile __bit                   RXR                 __at(0x1E8B0);	// @ (0x3D16 * 8 + 0)
#define                                 RXR_bit             _BIT_ACCESS(SPI1CON2,0)
// BORCON<SBOREN>
extern volatile __bit                   SBOREN              __at(0x1CE87);	// @ (0x39D0 * 8 + 7)
#define                                 SBOREN_bit          _BIT_ACCESS(BORCON,7)
// I2C1PIE<SC1IE>
extern volatile __bit                   SC1IE               __at(0x1EBD0);	// @ (0x3D7A * 8 + 0)
#define                                 SC1IE_bit           _BIT_ACCESS(I2C1PIE,0)
// I2C1PIR<SC1IF>
extern volatile __bit                   SC1IF               __at(0x1EBC8);	// @ (0x3D79 * 8 + 0)
#define                                 SC1IF_bit           _BIT_ACCESS(I2C1PIR,0)
// I2C2PIE<SC2IE>
extern volatile __bit                   SC2IE               __at(0x1EB20);	// @ (0x3D64 * 8 + 0)
#define                                 SC2IE_bit           _BIT_ACCESS(I2C2PIE,0)
// I2C2PIR<SC2IF>
extern volatile __bit                   SC2IF               __at(0x1EB18);	// @ (0x3D63 * 8 + 0)
#define                                 SC2IF_bit           _BIT_ACCESS(I2C2PIR,0)
// SCANHADRL<SCANHADR0>
extern volatile __bit                   SCANHADR0           __at(0x1CBC8);	// @ (0x3979 * 8 + 0)
#define                                 SCANHADR0_bit       _BIT_ACCESS(SCANHADRL,0)
// SCANHADRL<SCANHADR1>
extern volatile __bit                   SCANHADR1           __at(0x1CBC9);	// @ (0x3979 * 8 + 1)
#define                                 SCANHADR1_bit       _BIT_ACCESS(SCANHADRL,1)
// SCANHADRH<SCANHADR10>
extern volatile __bit                   SCANHADR10          __at(0x1CBD2);	// @ (0x397A * 8 + 2)
#define                                 SCANHADR10_bit      _BIT_ACCESS(SCANHADRH,2)
// SCANHADRH<SCANHADR11>
extern volatile __bit                   SCANHADR11          __at(0x1CBD3);	// @ (0x397A * 8 + 3)
#define                                 SCANHADR11_bit      _BIT_ACCESS(SCANHADRH,3)
// SCANHADRH<SCANHADR12>
extern volatile __bit                   SCANHADR12          __at(0x1CBD4);	// @ (0x397A * 8 + 4)
#define                                 SCANHADR12_bit      _BIT_ACCESS(SCANHADRH,4)
// SCANHADRH<SCANHADR13>
extern volatile __bit                   SCANHADR13          __at(0x1CBD5);	// @ (0x397A * 8 + 5)
#define                                 SCANHADR13_bit      _BIT_ACCESS(SCANHADRH,5)
// SCANHADRH<SCANHADR14>
extern volatile __bit                   SCANHADR14          __at(0x1CBD6);	// @ (0x397A * 8 + 6)
#define                                 SCANHADR14_bit      _BIT_ACCESS(SCANHADRH,6)
// SCANHADRH<SCANHADR15>
extern volatile __bit                   SCANHADR15          __at(0x1CBD7);	// @ (0x397A * 8 + 7)
#define                                 SCANHADR15_bit      _BIT_ACCESS(SCANHADRH,7)
// SCANHADRU<SCANHADR16>
extern volatile __bit                   SCANHADR16          __at(0x1CBD8);	// @ (0x397B * 8 + 0)
#define                                 SCANHADR16_bit      _BIT_ACCESS(SCANHADRU,0)
// SCANHADRU<SCANHADR17>
extern volatile __bit                   SCANHADR17          __at(0x1CBD9);	// @ (0x397B * 8 + 1)
#define                                 SCANHADR17_bit      _BIT_ACCESS(SCANHADRU,1)
// SCANHADRU<SCANHADR18>
extern volatile __bit                   SCANHADR18          __at(0x1CBDA);	// @ (0x397B * 8 + 2)
#define                                 SCANHADR18_bit      _BIT_ACCESS(SCANHADRU,2)
// SCANHADRU<SCANHADR19>
extern volatile __bit                   SCANHADR19          __at(0x1CBDB);	// @ (0x397B * 8 + 3)
#define                                 SCANHADR19_bit      _BIT_ACCESS(SCANHADRU,3)
// SCANHADRL<SCANHADR2>
extern volatile __bit                   SCANHADR2           __at(0x1CBCA);	// @ (0x3979 * 8 + 2)
#define                                 SCANHADR2_bit       _BIT_ACCESS(SCANHADRL,2)
// SCANHADRU<SCANHADR20>
extern volatile __bit                   SCANHADR20          __at(0x1CBDC);	// @ (0x397B * 8 + 4)
#define                                 SCANHADR20_bit      _BIT_ACCESS(SCANHADRU,4)
// SCANHADRU<SCANHADR21>
extern volatile __bit                   SCANHADR21          __at(0x1CBDD);	// @ (0x397B * 8 + 5)
#define                                 SCANHADR21_bit      _BIT_ACCESS(SCANHADRU,5)
// SCANHADRL<SCANHADR3>
extern volatile __bit                   SCANHADR3           __at(0x1CBCB);	// @ (0x3979 * 8 + 3)
#define                                 SCANHADR3_bit       _BIT_ACCESS(SCANHADRL,3)
// SCANHADRL<SCANHADR4>
extern volatile __bit                   SCANHADR4           __at(0x1CBCC);	// @ (0x3979 * 8 + 4)
#define                                 SCANHADR4_bit       _BIT_ACCESS(SCANHADRL,4)
// SCANHADRL<SCANHADR5>
extern volatile __bit                   SCANHADR5           __at(0x1CBCD);	// @ (0x3979 * 8 + 5)
#define                                 SCANHADR5_bit       _BIT_ACCESS(SCANHADRL,5)
// SCANHADRL<SCANHADR6>
extern volatile __bit                   SCANHADR6           __at(0x1CBCE);	// @ (0x3979 * 8 + 6)
#define                                 SCANHADR6_bit       _BIT_ACCESS(SCANHADRL,6)
// SCANHADRL<SCANHADR7>
extern volatile __bit                   SCANHADR7           __at(0x1CBCF);	// @ (0x3979 * 8 + 7)
#define                                 SCANHADR7_bit       _BIT_ACCESS(SCANHADRL,7)
// SCANHADRH<SCANHADR8>
extern volatile __bit                   SCANHADR8           __at(0x1CBD0);	// @ (0x397A * 8 + 0)
#define                                 SCANHADR8_bit       _BIT_ACCESS(SCANHADRH,0)
// SCANHADRH<SCANHADR9>
extern volatile __bit                   SCANHADR9           __at(0x1CBD1);	// @ (0x397A * 8 + 1)
#define                                 SCANHADR9_bit       _BIT_ACCESS(SCANHADRH,1)
// PIE0<SCANIE>
extern volatile __bit                   SCANIE              __at(0x1CC85);	// @ (0x3990 * 8 + 5)
#define                                 SCANIE_bit          _BIT_ACCESS(PIE0,5)
// PIR0<SCANIF>
extern volatile __bit                   SCANIF              __at(0x1CD05);	// @ (0x39A0 * 8 + 5)
#define                                 SCANIF_bit          _BIT_ACCESS(PIR0,5)
// IPR0<SCANIP>
extern volatile __bit                   SCANIP              __at(0x1CC05);	// @ (0x3980 * 8 + 5)
#define                                 SCANIP_bit          _BIT_ACCESS(IPR0,5)
// SCANLADRL<SCANLADR0>
extern volatile __bit                   SCANLADR0           __at(0x1CBB0);	// @ (0x3976 * 8 + 0)
#define                                 SCANLADR0_bit       _BIT_ACCESS(SCANLADRL,0)
// SCANLADRL<SCANLADR1>
extern volatile __bit                   SCANLADR1           __at(0x1CBB1);	// @ (0x3976 * 8 + 1)
#define                                 SCANLADR1_bit       _BIT_ACCESS(SCANLADRL,1)
// SCANLADRH<SCANLADR10>
extern volatile __bit                   SCANLADR10          __at(0x1CBBA);	// @ (0x3977 * 8 + 2)
#define                                 SCANLADR10_bit      _BIT_ACCESS(SCANLADRH,2)
// SCANLADRH<SCANLADR11>
extern volatile __bit                   SCANLADR11          __at(0x1CBBB);	// @ (0x3977 * 8 + 3)
#define                                 SCANLADR11_bit      _BIT_ACCESS(SCANLADRH,3)
// SCANLADRH<SCANLADR12>
extern volatile __bit                   SCANLADR12          __at(0x1CBBC);	// @ (0x3977 * 8 + 4)
#define                                 SCANLADR12_bit      _BIT_ACCESS(SCANLADRH,4)
// SCANLADRH<SCANLADR13>
extern volatile __bit                   SCANLADR13          __at(0x1CBBD);	// @ (0x3977 * 8 + 5)
#define                                 SCANLADR13_bit      _BIT_ACCESS(SCANLADRH,5)
// SCANLADRH<SCANLADR14>
extern volatile __bit                   SCANLADR14          __at(0x1CBBE);	// @ (0x3977 * 8 + 6)
#define                                 SCANLADR14_bit      _BIT_ACCESS(SCANLADRH,6)
// SCANLADRH<SCANLADR15>
extern volatile __bit                   SCANLADR15          __at(0x1CBBF);	// @ (0x3977 * 8 + 7)
#define                                 SCANLADR15_bit      _BIT_ACCESS(SCANLADRH,7)
// SCANLADRU<SCANLADR16>
extern volatile __bit                   SCANLADR16          __at(0x1CBC0);	// @ (0x3978 * 8 + 0)
#define                                 SCANLADR16_bit      _BIT_ACCESS(SCANLADRU,0)
// SCANLADRU<SCANLADR17>
extern volatile __bit                   SCANLADR17          __at(0x1CBC1);	// @ (0x3978 * 8 + 1)
#define                                 SCANLADR17_bit      _BIT_ACCESS(SCANLADRU,1)
// SCANLADRU<SCANLADR18>
extern volatile __bit                   SCANLADR18          __at(0x1CBC2);	// @ (0x3978 * 8 + 2)
#define                                 SCANLADR18_bit      _BIT_ACCESS(SCANLADRU,2)
// SCANLADRU<SCANLADR19>
extern volatile __bit                   SCANLADR19          __at(0x1CBC3);	// @ (0x3978 * 8 + 3)
#define                                 SCANLADR19_bit      _BIT_ACCESS(SCANLADRU,3)
// SCANLADRL<SCANLADR2>
extern volatile __bit                   SCANLADR2           __at(0x1CBB2);	// @ (0x3976 * 8 + 2)
#define                                 SCANLADR2_bit       _BIT_ACCESS(SCANLADRL,2)
// SCANLADRU<SCANLADR20>
extern volatile __bit                   SCANLADR20          __at(0x1CBC4);	// @ (0x3978 * 8 + 4)
#define                                 SCANLADR20_bit      _BIT_ACCESS(SCANLADRU,4)
// SCANLADRU<SCANLADR21>
extern volatile __bit                   SCANLADR21          __at(0x1CBC5);	// @ (0x3978 * 8 + 5)
#define                                 SCANLADR21_bit      _BIT_ACCESS(SCANLADRU,5)
// SCANLADRL<SCANLADR3>
extern volatile __bit                   SCANLADR3           __at(0x1CBB3);	// @ (0x3976 * 8 + 3)
#define                                 SCANLADR3_bit       _BIT_ACCESS(SCANLADRL,3)
// SCANLADRL<SCANLADR4>
extern volatile __bit                   SCANLADR4           __at(0x1CBB4);	// @ (0x3976 * 8 + 4)
#define                                 SCANLADR4_bit       _BIT_ACCESS(SCANLADRL,4)
// SCANLADRL<SCANLADR5>
extern volatile __bit                   SCANLADR5           __at(0x1CBB5);	// @ (0x3976 * 8 + 5)
#define                                 SCANLADR5_bit       _BIT_ACCESS(SCANLADRL,5)
// SCANLADRL<SCANLADR6>
extern volatile __bit                   SCANLADR6           __at(0x1CBB6);	// @ (0x3976 * 8 + 6)
#define                                 SCANLADR6_bit       _BIT_ACCESS(SCANLADRL,6)
// SCANLADRL<SCANLADR7>
extern volatile __bit                   SCANLADR7           __at(0x1CBB7);	// @ (0x3976 * 8 + 7)
#define                                 SCANLADR7_bit       _BIT_ACCESS(SCANLADRL,7)
// SCANLADRH<SCANLADR8>
extern volatile __bit                   SCANLADR8           __at(0x1CBB8);	// @ (0x3977 * 8 + 0)
#define                                 SCANLADR8_bit       _BIT_ACCESS(SCANLADRH,0)
// SCANLADRH<SCANLADR9>
extern volatile __bit                   SCANLADR9           __at(0x1CBB9);	// @ (0x3977 * 8 + 1)
#define                                 SCANLADR9_bit       _BIT_ACCESS(SCANLADRH,1)
// PMD0<SCANMD>
extern volatile __bit                   SCANMD              __at(0x1CE03);	// @ (0x39C0 * 8 + 3)
#define                                 SCANMD_bit          _BIT_ACCESS(PMD0,3)
// SCANPR<SCANPR0>
extern volatile __bit                   SCANPR0             __at(0x1CFB8);	// @ (0x39F7 * 8 + 0)
#define                                 SCANPR0_bit         _BIT_ACCESS(SCANPR,0)
// SCANPR<SCANPR1>
extern volatile __bit                   SCANPR1             __at(0x1CFB9);	// @ (0x39F7 * 8 + 1)
#define                                 SCANPR1_bit         _BIT_ACCESS(SCANPR,1)
// SCANPR<SCANPR2>
extern volatile __bit                   SCANPR2             __at(0x1CFBA);	// @ (0x39F7 * 8 + 2)
#define                                 SCANPR2_bit         _BIT_ACCESS(SCANPR,2)
// SPI1CON1<SDIP>
extern volatile __bit                   SDIP                __at(0x1E8A9);	// @ (0x3D15 * 8 + 1)
#define                                 SDIP_bit            _BIT_ACCESS(SPI1CON1,1)
// SPI1CON1<SDOP>
extern volatile __bit                   SDOP                __at(0x1E8A8);	// @ (0x3D15 * 8 + 0)
#define                                 SDOP_bit            _BIT_ACCESS(SPI1CON1,0)
// HLVDCON1<SEL0>
extern volatile __bit                   SEL0                __at(0x1F650);	// @ (0x3ECA * 8 + 0)
#define                                 SEL0_bit            _BIT_ACCESS(HLVDCON1,0)
// HLVDCON1<SEL1>
extern volatile __bit                   SEL1                __at(0x1F651);	// @ (0x3ECA * 8 + 1)
#define                                 SEL1_bit            _BIT_ACCESS(HLVDCON1,1)
// HLVDCON1<SEL2>
extern volatile __bit                   SEL2                __at(0x1F652);	// @ (0x3ECA * 8 + 2)
#define                                 SEL2_bit            _BIT_ACCESS(HLVDCON1,2)
// HLVDCON1<SEL3>
extern volatile __bit                   SEL3                __at(0x1F653);	// @ (0x3ECA * 8 + 3)
#define                                 SEL3_bit            _BIT_ACCESS(HLVDCON1,3)
// SCANCON0<SGO>
extern volatile __bit                   SGO                 __at(0x1CBE5);	// @ (0x397C * 8 + 5)
#define                                 SGO_bit             _BIT_ACCESS(SCANCON0,5)
// SHADCON<SHADLO>
extern volatile __bit                   SHADLO              __at(0x1C418);	// @ (0x3883 * 8 + 0)
#define                                 SHADLO_bit          _BIT_ACCESS(SHADCON,0)
// CRCSHIFTL<SHFT0>
extern volatile __bit                   SHFT0               __at(0x1CB20);	// @ (0x3964 * 8 + 0)
#define                                 SHFT0_bit           _BIT_ACCESS(CRCSHIFTL,0)
// CRCSHIFTL<SHFT1>
extern volatile __bit                   SHFT1               __at(0x1CB21);	// @ (0x3964 * 8 + 1)
#define                                 SHFT1_bit           _BIT_ACCESS(CRCSHIFTL,1)
// CRCSHIFTH<SHFT10>
extern volatile __bit                   SHFT10              __at(0x1CB2A);	// @ (0x3965 * 8 + 2)
#define                                 SHFT10_bit          _BIT_ACCESS(CRCSHIFTH,2)
// CRCSHIFTH<SHFT11>
extern volatile __bit                   SHFT11              __at(0x1CB2B);	// @ (0x3965 * 8 + 3)
#define                                 SHFT11_bit          _BIT_ACCESS(CRCSHIFTH,3)
// CRCSHIFTH<SHFT12>
extern volatile __bit                   SHFT12              __at(0x1CB2C);	// @ (0x3965 * 8 + 4)
#define                                 SHFT12_bit          _BIT_ACCESS(CRCSHIFTH,4)
// CRCSHIFTH<SHFT13>
extern volatile __bit                   SHFT13              __at(0x1CB2D);	// @ (0x3965 * 8 + 5)
#define                                 SHFT13_bit          _BIT_ACCESS(CRCSHIFTH,5)
// CRCSHIFTH<SHFT14>
extern volatile __bit                   SHFT14              __at(0x1CB2E);	// @ (0x3965 * 8 + 6)
#define                                 SHFT14_bit          _BIT_ACCESS(CRCSHIFTH,6)
// CRCSHIFTH<SHFT15>
extern volatile __bit                   SHFT15              __at(0x1CB2F);	// @ (0x3965 * 8 + 7)
#define                                 SHFT15_bit          _BIT_ACCESS(CRCSHIFTH,7)
// CRCSHIFTL<SHFT2>
extern volatile __bit                   SHFT2               __at(0x1CB22);	// @ (0x3964 * 8 + 2)
#define                                 SHFT2_bit           _BIT_ACCESS(CRCSHIFTL,2)
// CRCSHIFTL<SHFT3>
extern volatile __bit                   SHFT3               __at(0x1CB23);	// @ (0x3964 * 8 + 3)
#define                                 SHFT3_bit           _BIT_ACCESS(CRCSHIFTL,3)
// CRCSHIFTL<SHFT4>
extern volatile __bit                   SHFT4               __at(0x1CB24);	// @ (0x3964 * 8 + 4)
#define                                 SHFT4_bit           _BIT_ACCESS(CRCSHIFTL,4)
// CRCSHIFTL<SHFT5>
extern volatile __bit                   SHFT5               __at(0x1CB25);	// @ (0x3964 * 8 + 5)
#define                                 SHFT5_bit           _BIT_ACCESS(CRCSHIFTL,5)
// CRCSHIFTL<SHFT6>
extern volatile __bit                   SHFT6               __at(0x1CB26);	// @ (0x3964 * 8 + 6)
#define                                 SHFT6_bit           _BIT_ACCESS(CRCSHIFTL,6)
// CRCSHIFTL<SHFT7>
extern volatile __bit                   SHFT7               __at(0x1CB27);	// @ (0x3964 * 8 + 7)
#define                                 SHFT7_bit           _BIT_ACCESS(CRCSHIFTL,7)
// CRCSHIFTH<SHFT8>
extern volatile __bit                   SHFT8               __at(0x1CB28);	// @ (0x3965 * 8 + 0)
#define                                 SHFT8_bit           _BIT_ACCESS(CRCSHIFTH,0)
// CRCSHIFTH<SHFT9>
extern volatile __bit                   SHFT9               __at(0x1CB29);	// @ (0x3965 * 8 + 1)
#define                                 SHFT9_bit           _BIT_ACCESS(CRCSHIFTH,1)
// CRCCON0<SHIFTM>
extern volatile __bit                   SHIFTM              __at(0x1CB41);	// @ (0x3968 * 8 + 1)
#define                                 SHIFTM_bit          _BIT_ACCESS(CRCCON0,1)
// SLRCONA<SLRA0>
extern volatile __bit                   SLRA0               __at(0x1D218);	// @ (0x3A43 * 8 + 0)
#define                                 SLRA0_bit           _BIT_ACCESS(SLRCONA,0)
// SLRCONA<SLRA1>
extern volatile __bit                   SLRA1               __at(0x1D219);	// @ (0x3A43 * 8 + 1)
#define                                 SLRA1_bit           _BIT_ACCESS(SLRCONA,1)
// SLRCONA<SLRA2>
extern volatile __bit                   SLRA2               __at(0x1D21A);	// @ (0x3A43 * 8 + 2)
#define                                 SLRA2_bit           _BIT_ACCESS(SLRCONA,2)
// SLRCONA<SLRA3>
extern volatile __bit                   SLRA3               __at(0x1D21B);	// @ (0x3A43 * 8 + 3)
#define                                 SLRA3_bit           _BIT_ACCESS(SLRCONA,3)
// SLRCONA<SLRA4>
extern volatile __bit                   SLRA4               __at(0x1D21C);	// @ (0x3A43 * 8 + 4)
#define                                 SLRA4_bit           _BIT_ACCESS(SLRCONA,4)
// SLRCONA<SLRA5>
extern volatile __bit                   SLRA5               __at(0x1D21D);	// @ (0x3A43 * 8 + 5)
#define                                 SLRA5_bit           _BIT_ACCESS(SLRCONA,5)
// SLRCONA<SLRA6>
extern volatile __bit                   SLRA6               __at(0x1D21E);	// @ (0x3A43 * 8 + 6)
#define                                 SLRA6_bit           _BIT_ACCESS(SLRCONA,6)
// SLRCONA<SLRA7>
extern volatile __bit                   SLRA7               __at(0x1D21F);	// @ (0x3A43 * 8 + 7)
#define                                 SLRA7_bit           _BIT_ACCESS(SLRCONA,7)
// SLRCONB<SLRB0>
extern volatile __bit                   SLRB0               __at(0x1D298);	// @ (0x3A53 * 8 + 0)
#define                                 SLRB0_bit           _BIT_ACCESS(SLRCONB,0)
// SLRCONB<SLRB1>
extern volatile __bit                   SLRB1               __at(0x1D299);	// @ (0x3A53 * 8 + 1)
#define                                 SLRB1_bit           _BIT_ACCESS(SLRCONB,1)
// SLRCONB<SLRB2>
extern volatile __bit                   SLRB2               __at(0x1D29A);	// @ (0x3A53 * 8 + 2)
#define                                 SLRB2_bit           _BIT_ACCESS(SLRCONB,2)
// SLRCONB<SLRB3>
extern volatile __bit                   SLRB3               __at(0x1D29B);	// @ (0x3A53 * 8 + 3)
#define                                 SLRB3_bit           _BIT_ACCESS(SLRCONB,3)
// SLRCONB<SLRB4>
extern volatile __bit                   SLRB4               __at(0x1D29C);	// @ (0x3A53 * 8 + 4)
#define                                 SLRB4_bit           _BIT_ACCESS(SLRCONB,4)
// SLRCONB<SLRB5>
extern volatile __bit                   SLRB5               __at(0x1D29D);	// @ (0x3A53 * 8 + 5)
#define                                 SLRB5_bit           _BIT_ACCESS(SLRCONB,5)
// SLRCONB<SLRB6>
extern volatile __bit                   SLRB6               __at(0x1D29E);	// @ (0x3A53 * 8 + 6)
#define                                 SLRB6_bit           _BIT_ACCESS(SLRCONB,6)
// SLRCONB<SLRB7>
extern volatile __bit                   SLRB7               __at(0x1D29F);	// @ (0x3A53 * 8 + 7)
#define                                 SLRB7_bit           _BIT_ACCESS(SLRCONB,7)
// SLRCONC<SLRC0>
extern volatile __bit                   SLRC0               __at(0x1D318);	// @ (0x3A63 * 8 + 0)
#define                                 SLRC0_bit           _BIT_ACCESS(SLRCONC,0)
// SLRCONC<SLRC1>
extern volatile __bit                   SLRC1               __at(0x1D319);	// @ (0x3A63 * 8 + 1)
#define                                 SLRC1_bit           _BIT_ACCESS(SLRCONC,1)
// SLRCONC<SLRC2>
extern volatile __bit                   SLRC2               __at(0x1D31A);	// @ (0x3A63 * 8 + 2)
#define                                 SLRC2_bit           _BIT_ACCESS(SLRCONC,2)
// SLRCONC<SLRC3>
extern volatile __bit                   SLRC3               __at(0x1D31B);	// @ (0x3A63 * 8 + 3)
#define                                 SLRC3_bit           _BIT_ACCESS(SLRCONC,3)
// SLRCONC<SLRC4>
extern volatile __bit                   SLRC4               __at(0x1D31C);	// @ (0x3A63 * 8 + 4)
#define                                 SLRC4_bit           _BIT_ACCESS(SLRCONC,4)
// SLRCONC<SLRC5>
extern volatile __bit                   SLRC5               __at(0x1D31D);	// @ (0x3A63 * 8 + 5)
#define                                 SLRC5_bit           _BIT_ACCESS(SLRCONC,5)
// SLRCONC<SLRC6>
extern volatile __bit                   SLRC6               __at(0x1D31E);	// @ (0x3A63 * 8 + 6)
#define                                 SLRC6_bit           _BIT_ACCESS(SLRCONC,6)
// SLRCONC<SLRC7>
extern volatile __bit                   SLRC7               __at(0x1D31F);	// @ (0x3A63 * 8 + 7)
#define                                 SLRC7_bit           _BIT_ACCESS(SLRCONC,7)
// SPI1CON1<SMP>
extern volatile __bit                   SMP                 __at(0x1E8AF);	// @ (0x3D15 * 8 + 7)
#define                                 SMP_bit             _BIT_ACCESS(SPI1CON1,7)
// SMT1STAT<SMT1AS>
extern volatile __bit                   SMT1AS              __at(0x1F900);	// @ (0x3F20 * 8 + 0)
#define                                 SMT1AS_bit          _BIT_ACCESS(SMT1STAT,0)
// SMT1CON0<SMT1CPOL>
extern volatile __bit                   SMT1CPOL            __at(0x1F8F2);	// @ (0x3F1E * 8 + 2)
#define                                 SMT1CPOL_bit        _BIT_ACCESS(SMT1CON0,2)
// SMT1CPRL<SMT1CPR0>
extern volatile __bit                   SMT1CPR0            __at(0x1F8A8);	// @ (0x3F15 * 8 + 0)
#define                                 SMT1CPR0_bit        _BIT_ACCESS(SMT1CPRL,0)
// SMT1CPRL<SMT1CPR1>
extern volatile __bit                   SMT1CPR1            __at(0x1F8A9);	// @ (0x3F15 * 8 + 1)
#define                                 SMT1CPR1_bit        _BIT_ACCESS(SMT1CPRL,1)
// SMT1CPRH<SMT1CPR10>
extern volatile __bit                   SMT1CPR10           __at(0x1F8B2);	// @ (0x3F16 * 8 + 2)
#define                                 SMT1CPR10_bit       _BIT_ACCESS(SMT1CPRH,2)
// SMT1CPRH<SMT1CPR11>
extern volatile __bit                   SMT1CPR11           __at(0x1F8B3);	// @ (0x3F16 * 8 + 3)
#define                                 SMT1CPR11_bit       _BIT_ACCESS(SMT1CPRH,3)
// SMT1CPRH<SMT1CPR12>
extern volatile __bit                   SMT1CPR12           __at(0x1F8B4);	// @ (0x3F16 * 8 + 4)
#define                                 SMT1CPR12_bit       _BIT_ACCESS(SMT1CPRH,4)
// SMT1CPRH<SMT1CPR13>
extern volatile __bit                   SMT1CPR13           __at(0x1F8B5);	// @ (0x3F16 * 8 + 5)
#define                                 SMT1CPR13_bit       _BIT_ACCESS(SMT1CPRH,5)
// SMT1CPRH<SMT1CPR14>
extern volatile __bit                   SMT1CPR14           __at(0x1F8B6);	// @ (0x3F16 * 8 + 6)
#define                                 SMT1CPR14_bit       _BIT_ACCESS(SMT1CPRH,6)
// SMT1CPRH<SMT1CPR15>
extern volatile __bit                   SMT1CPR15           __at(0x1F8B7);	// @ (0x3F16 * 8 + 7)
#define                                 SMT1CPR15_bit       _BIT_ACCESS(SMT1CPRH,7)
// SMT1CPRU<SMT1CPR16>
extern volatile __bit                   SMT1CPR16           __at(0x1F8B8);	// @ (0x3F17 * 8 + 0)
#define                                 SMT1CPR16_bit       _BIT_ACCESS(SMT1CPRU,0)
// SMT1CPRU<SMT1CPR17>
extern volatile __bit                   SMT1CPR17           __at(0x1F8B9);	// @ (0x3F17 * 8 + 1)
#define                                 SMT1CPR17_bit       _BIT_ACCESS(SMT1CPRU,1)
// SMT1CPRU<SMT1CPR18>
extern volatile __bit                   SMT1CPR18           __at(0x1F8BA);	// @ (0x3F17 * 8 + 2)
#define                                 SMT1CPR18_bit       _BIT_ACCESS(SMT1CPRU,2)
// SMT1CPRU<SMT1CPR19>
extern volatile __bit                   SMT1CPR19           __at(0x1F8BB);	// @ (0x3F17 * 8 + 3)
#define                                 SMT1CPR19_bit       _BIT_ACCESS(SMT1CPRU,3)
// SMT1CPRL<SMT1CPR2>
extern volatile __bit                   SMT1CPR2            __at(0x1F8AA);	// @ (0x3F15 * 8 + 2)
#define                                 SMT1CPR2_bit        _BIT_ACCESS(SMT1CPRL,2)
// SMT1CPRU<SMT1CPR20>
extern volatile __bit                   SMT1CPR20           __at(0x1F8BC);	// @ (0x3F17 * 8 + 4)
#define                                 SMT1CPR20_bit       _BIT_ACCESS(SMT1CPRU,4)
// SMT1CPRU<SMT1CPR21>
extern volatile __bit                   SMT1CPR21           __at(0x1F8BD);	// @ (0x3F17 * 8 + 5)
#define                                 SMT1CPR21_bit       _BIT_ACCESS(SMT1CPRU,5)
// SMT1CPRU<SMT1CPR22>
extern volatile __bit                   SMT1CPR22           __at(0x1F8BE);	// @ (0x3F17 * 8 + 6)
#define                                 SMT1CPR22_bit       _BIT_ACCESS(SMT1CPRU,6)
// SMT1CPRU<SMT1CPR23>
extern volatile __bit                   SMT1CPR23           __at(0x1F8BF);	// @ (0x3F17 * 8 + 7)
#define                                 SMT1CPR23_bit       _BIT_ACCESS(SMT1CPRU,7)
// SMT1CPRL<SMT1CPR3>
extern volatile __bit                   SMT1CPR3            __at(0x1F8AB);	// @ (0x3F15 * 8 + 3)
#define                                 SMT1CPR3_bit        _BIT_ACCESS(SMT1CPRL,3)
// SMT1CPRL<SMT1CPR4>
extern volatile __bit                   SMT1CPR4            __at(0x1F8AC);	// @ (0x3F15 * 8 + 4)
#define                                 SMT1CPR4_bit        _BIT_ACCESS(SMT1CPRL,4)
// SMT1CPRL<SMT1CPR5>
extern volatile __bit                   SMT1CPR5            __at(0x1F8AD);	// @ (0x3F15 * 8 + 5)
#define                                 SMT1CPR5_bit        _BIT_ACCESS(SMT1CPRL,5)
// SMT1CPRL<SMT1CPR6>
extern volatile __bit                   SMT1CPR6            __at(0x1F8AE);	// @ (0x3F15 * 8 + 6)
#define                                 SMT1CPR6_bit        _BIT_ACCESS(SMT1CPRL,6)
// SMT1CPRL<SMT1CPR7>
extern volatile __bit                   SMT1CPR7            __at(0x1F8AF);	// @ (0x3F15 * 8 + 7)
#define                                 SMT1CPR7_bit        _BIT_ACCESS(SMT1CPRL,7)
// SMT1CPRH<SMT1CPR8>
extern volatile __bit                   SMT1CPR8            __at(0x1F8B0);	// @ (0x3F16 * 8 + 0)
#define                                 SMT1CPR8_bit        _BIT_ACCESS(SMT1CPRH,0)
// SMT1CPRH<SMT1CPR9>
extern volatile __bit                   SMT1CPR9            __at(0x1F8B1);	// @ (0x3F16 * 8 + 1)
#define                                 SMT1CPR9_bit        _BIT_ACCESS(SMT1CPRH,1)
// SMT1STAT<SMT1CPRUP>
extern volatile __bit                   SMT1CPRUP           __at(0x1F907);	// @ (0x3F20 * 8 + 7)
#define                                 SMT1CPRUP_bit       _BIT_ACCESS(SMT1STAT,7)
// SMT1CPWL<SMT1CPW0>
extern volatile __bit                   SMT1CPW0            __at(0x1F8C0);	// @ (0x3F18 * 8 + 0)
#define                                 SMT1CPW0_bit        _BIT_ACCESS(SMT1CPWL,0)
// SMT1CPWL<SMT1CPW1>
extern volatile __bit                   SMT1CPW1            __at(0x1F8C1);	// @ (0x3F18 * 8 + 1)
#define                                 SMT1CPW1_bit        _BIT_ACCESS(SMT1CPWL,1)
// SMT1CPWH<SMT1CPW10>
extern volatile __bit                   SMT1CPW10           __at(0x1F8CA);	// @ (0x3F19 * 8 + 2)
#define                                 SMT1CPW10_bit       _BIT_ACCESS(SMT1CPWH,2)
// SMT1CPWH<SMT1CPW11>
extern volatile __bit                   SMT1CPW11           __at(0x1F8CB);	// @ (0x3F19 * 8 + 3)
#define                                 SMT1CPW11_bit       _BIT_ACCESS(SMT1CPWH,3)
// SMT1CPWH<SMT1CPW12>
extern volatile __bit                   SMT1CPW12           __at(0x1F8CC);	// @ (0x3F19 * 8 + 4)
#define                                 SMT1CPW12_bit       _BIT_ACCESS(SMT1CPWH,4)
// SMT1CPWH<SMT1CPW13>
extern volatile __bit                   SMT1CPW13           __at(0x1F8CD);	// @ (0x3F19 * 8 + 5)
#define                                 SMT1CPW13_bit       _BIT_ACCESS(SMT1CPWH,5)
// SMT1CPWH<SMT1CPW14>
extern volatile __bit                   SMT1CPW14           __at(0x1F8CE);	// @ (0x3F19 * 8 + 6)
#define                                 SMT1CPW14_bit       _BIT_ACCESS(SMT1CPWH,6)
// SMT1CPWH<SMT1CPW15>
extern volatile __bit                   SMT1CPW15           __at(0x1F8CF);	// @ (0x3F19 * 8 + 7)
#define                                 SMT1CPW15_bit       _BIT_ACCESS(SMT1CPWH,7)
// SMT1CPWU<SMT1CPW16>
extern volatile __bit                   SMT1CPW16           __at(0x1F8D0);	// @ (0x3F1A * 8 + 0)
#define                                 SMT1CPW16_bit       _BIT_ACCESS(SMT1CPWU,0)
// SMT1CPWU<SMT1CPW17>
extern volatile __bit                   SMT1CPW17           __at(0x1F8D1);	// @ (0x3F1A * 8 + 1)
#define                                 SMT1CPW17_bit       _BIT_ACCESS(SMT1CPWU,1)
// SMT1CPWU<SMT1CPW18>
extern volatile __bit                   SMT1CPW18           __at(0x1F8D2);	// @ (0x3F1A * 8 + 2)
#define                                 SMT1CPW18_bit       _BIT_ACCESS(SMT1CPWU,2)
// SMT1CPWU<SMT1CPW19>
extern volatile __bit                   SMT1CPW19           __at(0x1F8D3);	// @ (0x3F1A * 8 + 3)
#define                                 SMT1CPW19_bit       _BIT_ACCESS(SMT1CPWU,3)
// SMT1CPWL<SMT1CPW2>
extern volatile __bit                   SMT1CPW2            __at(0x1F8C2);	// @ (0x3F18 * 8 + 2)
#define                                 SMT1CPW2_bit        _BIT_ACCESS(SMT1CPWL,2)
// SMT1CPWU<SMT1CPW20>
extern volatile __bit                   SMT1CPW20           __at(0x1F8D4);	// @ (0x3F1A * 8 + 4)
#define                                 SMT1CPW20_bit       _BIT_ACCESS(SMT1CPWU,4)
// SMT1CPWU<SMT1CPW21>
extern volatile __bit                   SMT1CPW21           __at(0x1F8D5);	// @ (0x3F1A * 8 + 5)
#define                                 SMT1CPW21_bit       _BIT_ACCESS(SMT1CPWU,5)
// SMT1CPWU<SMT1CPW22>
extern volatile __bit                   SMT1CPW22           __at(0x1F8D6);	// @ (0x3F1A * 8 + 6)
#define                                 SMT1CPW22_bit       _BIT_ACCESS(SMT1CPWU,6)
// SMT1CPWU<SMT1CPW23>
extern volatile __bit                   SMT1CPW23           __at(0x1F8D7);	// @ (0x3F1A * 8 + 7)
#define                                 SMT1CPW23_bit       _BIT_ACCESS(SMT1CPWU,7)
// SMT1CPWL<SMT1CPW3>
extern volatile __bit                   SMT1CPW3            __at(0x1F8C3);	// @ (0x3F18 * 8 + 3)
#define                                 SMT1CPW3_bit        _BIT_ACCESS(SMT1CPWL,3)
// SMT1CPWL<SMT1CPW4>
extern volatile __bit                   SMT1CPW4            __at(0x1F8C4);	// @ (0x3F18 * 8 + 4)
#define                                 SMT1CPW4_bit        _BIT_ACCESS(SMT1CPWL,4)
// SMT1CPWL<SMT1CPW5>
extern volatile __bit                   SMT1CPW5            __at(0x1F8C5);	// @ (0x3F18 * 8 + 5)
#define                                 SMT1CPW5_bit        _BIT_ACCESS(SMT1CPWL,5)
// SMT1CPWL<SMT1CPW6>
extern volatile __bit                   SMT1CPW6            __at(0x1F8C6);	// @ (0x3F18 * 8 + 6)
#define                                 SMT1CPW6_bit        _BIT_ACCESS(SMT1CPWL,6)
// SMT1CPWL<SMT1CPW7>
extern volatile __bit                   SMT1CPW7            __at(0x1F8C7);	// @ (0x3F18 * 8 + 7)
#define                                 SMT1CPW7_bit        _BIT_ACCESS(SMT1CPWL,7)
// SMT1CPWH<SMT1CPW8>
extern volatile __bit                   SMT1CPW8            __at(0x1F8C8);	// @ (0x3F19 * 8 + 0)
#define                                 SMT1CPW8_bit        _BIT_ACCESS(SMT1CPWH,0)
// SMT1CPWH<SMT1CPW9>
extern volatile __bit                   SMT1CPW9            __at(0x1F8C9);	// @ (0x3F19 * 8 + 1)
#define                                 SMT1CPW9_bit        _BIT_ACCESS(SMT1CPWH,1)
// SMT1STAT<SMT1CPWUP>
extern volatile __bit                   SMT1CPWUP           __at(0x1F906);	// @ (0x3F20 * 8 + 6)
#define                                 SMT1CPWUP_bit       _BIT_ACCESS(SMT1STAT,6)
// SMT1CLK<SMT1CSEL0>
extern volatile __bit                   SMT1CSEL0           __at(0x1F908);	// @ (0x3F21 * 8 + 0)
#define                                 SMT1CSEL0_bit       _BIT_ACCESS(SMT1CLK,0)
// SMT1CLK<SMT1CSEL1>
extern volatile __bit                   SMT1CSEL1           __at(0x1F909);	// @ (0x3F21 * 8 + 1)
#define                                 SMT1CSEL1_bit       _BIT_ACCESS(SMT1CLK,1)
// SMT1CLK<SMT1CSEL2>
extern volatile __bit                   SMT1CSEL2           __at(0x1F90A);	// @ (0x3F21 * 8 + 2)
#define                                 SMT1CSEL2_bit       _BIT_ACCESS(SMT1CLK,2)
// SMT1CON0<SMT1EN>
extern volatile __bit                   SMT1EN              __at(0x1F8F7);	// @ (0x3F1E * 8 + 7)
#define                                 SMT1EN_bit          _BIT_ACCESS(SMT1CON0,7)
// SMT1CON1<SMT1GO>
extern volatile __bit                   SMT1GO              __at(0x1F8FF);	// @ (0x3F1F * 8 + 7)
#define                                 SMT1GO_bit          _BIT_ACCESS(SMT1CON1,7)
// PIE1<SMT1IE>
extern volatile __bit                   SMT1IE              __at(0x1CC8D);	// @ (0x3991 * 8 + 5)
#define                                 SMT1IE_bit          _BIT_ACCESS(PIE1,5)
// PIR1<SMT1IF>
extern volatile __bit                   SMT1IF              __at(0x1CD0D);	// @ (0x39A1 * 8 + 5)
#define                                 SMT1IF_bit          _BIT_ACCESS(PIR1,5)
// IPR1<SMT1IP>
extern volatile __bit                   SMT1IP              __at(0x1CC0D);	// @ (0x3981 * 8 + 5)
#define                                 SMT1IP_bit          _BIT_ACCESS(IPR1,5)
// PMD6<SMT1MD>
extern volatile __bit                   SMT1MD              __at(0x1CE35);	// @ (0x39C6 * 8 + 5)
#define                                 SMT1MD_bit          _BIT_ACCESS(PMD6,5)
// SMT1PRL<SMT1PR0>
extern volatile __bit                   SMT1PR0             __at(0x1F8D8);	// @ (0x3F1B * 8 + 0)
#define                                 SMT1PR0_bit         _BIT_ACCESS(SMT1PRL,0)
// SMT1PRL<SMT1PR1>
extern volatile __bit                   SMT1PR1             __at(0x1F8D9);	// @ (0x3F1B * 8 + 1)
#define                                 SMT1PR1_bit         _BIT_ACCESS(SMT1PRL,1)
// SMT1PRH<SMT1PR10>
extern volatile __bit                   SMT1PR10            __at(0x1F8E2);	// @ (0x3F1C * 8 + 2)
#define                                 SMT1PR10_bit        _BIT_ACCESS(SMT1PRH,2)
// SMT1PRH<SMT1PR11>
extern volatile __bit                   SMT1PR11            __at(0x1F8E3);	// @ (0x3F1C * 8 + 3)
#define                                 SMT1PR11_bit        _BIT_ACCESS(SMT1PRH,3)
// SMT1PRH<SMT1PR12>
extern volatile __bit                   SMT1PR12            __at(0x1F8E4);	// @ (0x3F1C * 8 + 4)
#define                                 SMT1PR12_bit        _BIT_ACCESS(SMT1PRH,4)
// SMT1PRH<SMT1PR13>
extern volatile __bit                   SMT1PR13            __at(0x1F8E5);	// @ (0x3F1C * 8 + 5)
#define                                 SMT1PR13_bit        _BIT_ACCESS(SMT1PRH,5)
// SMT1PRH<SMT1PR14>
extern volatile __bit                   SMT1PR14            __at(0x1F8E6);	// @ (0x3F1C * 8 + 6)
#define                                 SMT1PR14_bit        _BIT_ACCESS(SMT1PRH,6)
// SMT1PRH<SMT1PR15>
extern volatile __bit                   SMT1PR15            __at(0x1F8E7);	// @ (0x3F1C * 8 + 7)
#define                                 SMT1PR15_bit        _BIT_ACCESS(SMT1PRH,7)
// SMT1PRU<SMT1PR16>
extern volatile __bit                   SMT1PR16            __at(0x1F8E8);	// @ (0x3F1D * 8 + 0)
#define                                 SMT1PR16_bit        _BIT_ACCESS(SMT1PRU,0)
// SMT1PRU<SMT1PR17>
extern volatile __bit                   SMT1PR17            __at(0x1F8E9);	// @ (0x3F1D * 8 + 1)
#define                                 SMT1PR17_bit        _BIT_ACCESS(SMT1PRU,1)
// SMT1PRU<SMT1PR18>
extern volatile __bit                   SMT1PR18            __at(0x1F8EA);	// @ (0x3F1D * 8 + 2)
#define                                 SMT1PR18_bit        _BIT_ACCESS(SMT1PRU,2)
// SMT1PRU<SMT1PR19>
extern volatile __bit                   SMT1PR19            __at(0x1F8EB);	// @ (0x3F1D * 8 + 3)
#define                                 SMT1PR19_bit        _BIT_ACCESS(SMT1PRU,3)
// SMT1PRL<SMT1PR2>
extern volatile __bit                   SMT1PR2             __at(0x1F8DA);	// @ (0x3F1B * 8 + 2)
#define                                 SMT1PR2_bit         _BIT_ACCESS(SMT1PRL,2)
// SMT1PRU<SMT1PR20>
extern volatile __bit                   SMT1PR20            __at(0x1F8EC);	// @ (0x3F1D * 8 + 4)
#define                                 SMT1PR20_bit        _BIT_ACCESS(SMT1PRU,4)
// SMT1PRU<SMT1PR21>
extern volatile __bit                   SMT1PR21            __at(0x1F8ED);	// @ (0x3F1D * 8 + 5)
#define                                 SMT1PR21_bit        _BIT_ACCESS(SMT1PRU,5)
// SMT1PRU<SMT1PR22>
extern volatile __bit                   SMT1PR22            __at(0x1F8EE);	// @ (0x3F1D * 8 + 6)
#define                                 SMT1PR22_bit        _BIT_ACCESS(SMT1PRU,6)
// SMT1PRU<SMT1PR23>
extern volatile __bit                   SMT1PR23            __at(0x1F8EF);	// @ (0x3F1D * 8 + 7)
#define                                 SMT1PR23_bit        _BIT_ACCESS(SMT1PRU,7)
// SMT1PRL<SMT1PR3>
extern volatile __bit                   SMT1PR3             __at(0x1F8DB);	// @ (0x3F1B * 8 + 3)
#define                                 SMT1PR3_bit         _BIT_ACCESS(SMT1PRL,3)
// SMT1PRL<SMT1PR4>
extern volatile __bit                   SMT1PR4             __at(0x1F8DC);	// @ (0x3F1B * 8 + 4)
#define                                 SMT1PR4_bit         _BIT_ACCESS(SMT1PRL,4)
// SMT1PRL<SMT1PR5>
extern volatile __bit                   SMT1PR5             __at(0x1F8DD);	// @ (0x3F1B * 8 + 5)
#define                                 SMT1PR5_bit         _BIT_ACCESS(SMT1PRL,5)
// SMT1PRL<SMT1PR6>
extern volatile __bit                   SMT1PR6             __at(0x1F8DE);	// @ (0x3F1B * 8 + 6)
#define                                 SMT1PR6_bit         _BIT_ACCESS(SMT1PRL,6)
// SMT1PRL<SMT1PR7>
extern volatile __bit                   SMT1PR7             __at(0x1F8DF);	// @ (0x3F1B * 8 + 7)
#define                                 SMT1PR7_bit         _BIT_ACCESS(SMT1PRL,7)
// SMT1PRH<SMT1PR8>
extern volatile __bit                   SMT1PR8             __at(0x1F8E0);	// @ (0x3F1C * 8 + 0)
#define                                 SMT1PR8_bit         _BIT_ACCESS(SMT1PRH,0)
// SMT1PRH<SMT1PR9>
extern volatile __bit                   SMT1PR9             __at(0x1F8E1);	// @ (0x3F1C * 8 + 1)
#define                                 SMT1PR9_bit         _BIT_ACCESS(SMT1PRH,1)
// PIE1<SMT1PRAIE>
extern volatile __bit                   SMT1PRAIE           __at(0x1CC8E);	// @ (0x3991 * 8 + 6)
#define                                 SMT1PRAIE_bit       _BIT_ACCESS(PIE1,6)
// PIR1<SMT1PRAIF>
extern volatile __bit                   SMT1PRAIF           __at(0x1CD0E);	// @ (0x39A1 * 8 + 6)
#define                                 SMT1PRAIF_bit       _BIT_ACCESS(PIR1,6)
// IPR1<SMT1PRAIP>
extern volatile __bit                   SMT1PRAIP           __at(0x1CC0E);	// @ (0x3981 * 8 + 6)
#define                                 SMT1PRAIP_bit       _BIT_ACCESS(IPR1,6)
// SMT1CON0<SMT1PS0>
extern volatile __bit                   SMT1PS0             __at(0x1F8F0);	// @ (0x3F1E * 8 + 0)
#define                                 SMT1PS0_bit         _BIT_ACCESS(SMT1CON0,0)
// SMT1CON0<SMT1PS1>
extern volatile __bit                   SMT1PS1             __at(0x1F8F1);	// @ (0x3F1E * 8 + 1)
#define                                 SMT1PS1_bit         _BIT_ACCESS(SMT1CON0,1)
// PIE1<SMT1PWAIE>
extern volatile __bit                   SMT1PWAIE           __at(0x1CC8F);	// @ (0x3991 * 8 + 7)
#define                                 SMT1PWAIE_bit       _BIT_ACCESS(PIE1,7)
// PIR1<SMT1PWAIF>
extern volatile __bit                   SMT1PWAIF           __at(0x1CD0F);	// @ (0x39A1 * 8 + 7)
#define                                 SMT1PWAIF_bit       _BIT_ACCESS(PIR1,7)
// IPR1<SMT1PWAIP>
extern volatile __bit                   SMT1PWAIP           __at(0x1CC0F);	// @ (0x3981 * 8 + 7)
#define                                 SMT1PWAIP_bit       _BIT_ACCESS(IPR1,7)
// SMT1CON1<SMT1REPEAT>
extern volatile __bit                   SMT1REPEAT          __at(0x1F8FE);	// @ (0x3F1F * 8 + 6)
#define                                 SMT1REPEAT_bit      _BIT_ACCESS(SMT1CON1,6)
// SMT1STAT<SMT1RESET>
extern volatile __bit                   SMT1RESET           __at(0x1F905);	// @ (0x3F20 * 8 + 5)
#define                                 SMT1RESET_bit       _BIT_ACCESS(SMT1STAT,5)
// SMT1STAT<SMT1RST>
extern volatile __bit                   SMT1RST             __at(0x1F905);	// @ (0x3F20 * 8 + 5)
#define                                 SMT1RST_bit         _BIT_ACCESS(SMT1STAT,5)
// SMT1CON0<SMT1SPOL>
extern volatile __bit                   SMT1SPOL            __at(0x1F8F3);	// @ (0x3F1E * 8 + 3)
#define                                 SMT1SPOL_bit        _BIT_ACCESS(SMT1CON0,3)
// SMT1SIG<SMT1SSEL0>
extern volatile __bit                   SMT1SSEL0           __at(0x1F910);	// @ (0x3F22 * 8 + 0)
#define                                 SMT1SSEL0_bit       _BIT_ACCESS(SMT1SIG,0)
// SMT1SIG<SMT1SSEL1>
extern volatile __bit                   SMT1SSEL1           __at(0x1F911);	// @ (0x3F22 * 8 + 1)
#define                                 SMT1SSEL1_bit       _BIT_ACCESS(SMT1SIG,1)
// SMT1SIG<SMT1SSEL2>
extern volatile __bit                   SMT1SSEL2           __at(0x1F912);	// @ (0x3F22 * 8 + 2)
#define                                 SMT1SSEL2_bit       _BIT_ACCESS(SMT1SIG,2)
// SMT1SIG<SMT1SSEL3>
extern volatile __bit                   SMT1SSEL3           __at(0x1F913);	// @ (0x3F22 * 8 + 3)
#define                                 SMT1SSEL3_bit       _BIT_ACCESS(SMT1SIG,3)
// SMT1SIG<SMT1SSEL4>
extern volatile __bit                   SMT1SSEL4           __at(0x1F914);	// @ (0x3F22 * 8 + 4)
#define                                 SMT1SSEL4_bit       _BIT_ACCESS(SMT1SIG,4)
// SMT1CON0<SMT1STP>
extern volatile __bit                   SMT1STP             __at(0x1F8F5);	// @ (0x3F1E * 8 + 5)
#define                                 SMT1STP_bit         _BIT_ACCESS(SMT1CON0,5)
// SMT1TMRL<SMT1TMR0>
extern volatile __bit                   SMT1TMR0            __at(0x1F890);	// @ (0x3F12 * 8 + 0)
#define                                 SMT1TMR0_bit        _BIT_ACCESS(SMT1TMRL,0)
// SMT1TMRL<SMT1TMR1>
extern volatile __bit                   SMT1TMR1            __at(0x1F891);	// @ (0x3F12 * 8 + 1)
#define                                 SMT1TMR1_bit        _BIT_ACCESS(SMT1TMRL,1)
// SMT1TMRH<SMT1TMR10>
extern volatile __bit                   SMT1TMR10           __at(0x1F89A);	// @ (0x3F13 * 8 + 2)
#define                                 SMT1TMR10_bit       _BIT_ACCESS(SMT1TMRH,2)
// SMT1TMRH<SMT1TMR11>
extern volatile __bit                   SMT1TMR11           __at(0x1F89B);	// @ (0x3F13 * 8 + 3)
#define                                 SMT1TMR11_bit       _BIT_ACCESS(SMT1TMRH,3)
// SMT1TMRH<SMT1TMR12>
extern volatile __bit                   SMT1TMR12           __at(0x1F89C);	// @ (0x3F13 * 8 + 4)
#define                                 SMT1TMR12_bit       _BIT_ACCESS(SMT1TMRH,4)
// SMT1TMRH<SMT1TMR13>
extern volatile __bit                   SMT1TMR13           __at(0x1F89D);	// @ (0x3F13 * 8 + 5)
#define                                 SMT1TMR13_bit       _BIT_ACCESS(SMT1TMRH,5)
// SMT1TMRH<SMT1TMR14>
extern volatile __bit                   SMT1TMR14           __at(0x1F89E);	// @ (0x3F13 * 8 + 6)
#define                                 SMT1TMR14_bit       _BIT_ACCESS(SMT1TMRH,6)
// SMT1TMRH<SMT1TMR15>
extern volatile __bit                   SMT1TMR15           __at(0x1F89F);	// @ (0x3F13 * 8 + 7)
#define                                 SMT1TMR15_bit       _BIT_ACCESS(SMT1TMRH,7)
// SMT1TMRU<SMT1TMR16>
extern volatile __bit                   SMT1TMR16           __at(0x1F8A0);	// @ (0x3F14 * 8 + 0)
#define                                 SMT1TMR16_bit       _BIT_ACCESS(SMT1TMRU,0)
// SMT1TMRU<SMT1TMR17>
extern volatile __bit                   SMT1TMR17           __at(0x1F8A1);	// @ (0x3F14 * 8 + 1)
#define                                 SMT1TMR17_bit       _BIT_ACCESS(SMT1TMRU,1)
// SMT1TMRU<SMT1TMR18>
extern volatile __bit                   SMT1TMR18           __at(0x1F8A2);	// @ (0x3F14 * 8 + 2)
#define                                 SMT1TMR18_bit       _BIT_ACCESS(SMT1TMRU,2)
// SMT1TMRU<SMT1TMR19>
extern volatile __bit                   SMT1TMR19           __at(0x1F8A3);	// @ (0x3F14 * 8 + 3)
#define                                 SMT1TMR19_bit       _BIT_ACCESS(SMT1TMRU,3)
// SMT1TMRL<SMT1TMR2>
extern volatile __bit                   SMT1TMR2            __at(0x1F892);	// @ (0x3F12 * 8 + 2)
#define                                 SMT1TMR2_bit        _BIT_ACCESS(SMT1TMRL,2)
// SMT1TMRU<SMT1TMR20>
extern volatile __bit                   SMT1TMR20           __at(0x1F8A4);	// @ (0x3F14 * 8 + 4)
#define                                 SMT1TMR20_bit       _BIT_ACCESS(SMT1TMRU,4)
// SMT1TMRU<SMT1TMR21>
extern volatile __bit                   SMT1TMR21           __at(0x1F8A5);	// @ (0x3F14 * 8 + 5)
#define                                 SMT1TMR21_bit       _BIT_ACCESS(SMT1TMRU,5)
// SMT1TMRU<SMT1TMR22>
extern volatile __bit                   SMT1TMR22           __at(0x1F8A6);	// @ (0x3F14 * 8 + 6)
#define                                 SMT1TMR22_bit       _BIT_ACCESS(SMT1TMRU,6)
// SMT1TMRU<SMT1TMR23>
extern volatile __bit                   SMT1TMR23           __at(0x1F8A7);	// @ (0x3F14 * 8 + 7)
#define                                 SMT1TMR23_bit       _BIT_ACCESS(SMT1TMRU,7)
// SMT1TMRL<SMT1TMR3>
extern volatile __bit                   SMT1TMR3            __at(0x1F893);	// @ (0x3F12 * 8 + 3)
#define                                 SMT1TMR3_bit        _BIT_ACCESS(SMT1TMRL,3)
// SMT1TMRL<SMT1TMR4>
extern volatile __bit                   SMT1TMR4            __at(0x1F894);	// @ (0x3F12 * 8 + 4)
#define                                 SMT1TMR4_bit        _BIT_ACCESS(SMT1TMRL,4)
// SMT1TMRL<SMT1TMR5>
extern volatile __bit                   SMT1TMR5            __at(0x1F895);	// @ (0x3F12 * 8 + 5)
#define                                 SMT1TMR5_bit        _BIT_ACCESS(SMT1TMRL,5)
// SMT1TMRL<SMT1TMR6>
extern volatile __bit                   SMT1TMR6            __at(0x1F896);	// @ (0x3F12 * 8 + 6)
#define                                 SMT1TMR6_bit        _BIT_ACCESS(SMT1TMRL,6)
// SMT1TMRL<SMT1TMR7>
extern volatile __bit                   SMT1TMR7            __at(0x1F897);	// @ (0x3F12 * 8 + 7)
#define                                 SMT1TMR7_bit        _BIT_ACCESS(SMT1TMRL,7)
// SMT1TMRH<SMT1TMR8>
extern volatile __bit                   SMT1TMR8            __at(0x1F898);	// @ (0x3F13 * 8 + 0)
#define                                 SMT1TMR8_bit        _BIT_ACCESS(SMT1TMRH,0)
// SMT1TMRH<SMT1TMR9>
extern volatile __bit                   SMT1TMR9            __at(0x1F899);	// @ (0x3F13 * 8 + 1)
#define                                 SMT1TMR9_bit        _BIT_ACCESS(SMT1TMRH,1)
// SMT1STAT<SMT1TS>
extern volatile __bit                   SMT1TS              __at(0x1F902);	// @ (0x3F20 * 8 + 2)
#define                                 SMT1TS_bit          _BIT_ACCESS(SMT1STAT,2)
// SMT1CON0<SMT1WOL>
extern volatile __bit                   SMT1WOL             __at(0x1F8F4);	// @ (0x3F1E * 8 + 4)
#define                                 SMT1WOL_bit         _BIT_ACCESS(SMT1CON0,4)
// SMT1STAT<SMT1WS>
extern volatile __bit                   SMT1WS              __at(0x1F901);	// @ (0x3F20 * 8 + 1)
#define                                 SMT1WS_bit          _BIT_ACCESS(SMT1STAT,1)
// SMT1WIN<SMT1WSEL0>
extern volatile __bit                   SMT1WSEL0           __at(0x1F918);	// @ (0x3F23 * 8 + 0)
#define                                 SMT1WSEL0_bit       _BIT_ACCESS(SMT1WIN,0)
// SMT1WIN<SMT1WSEL1>
extern volatile __bit                   SMT1WSEL1           __at(0x1F919);	// @ (0x3F23 * 8 + 1)
#define                                 SMT1WSEL1_bit       _BIT_ACCESS(SMT1WIN,1)
// SMT1WIN<SMT1WSEL2>
extern volatile __bit                   SMT1WSEL2           __at(0x1F91A);	// @ (0x3F23 * 8 + 2)
#define                                 SMT1WSEL2_bit       _BIT_ACCESS(SMT1WIN,2)
// SMT1WIN<SMT1WSEL3>
extern volatile __bit                   SMT1WSEL3           __at(0x1F91B);	// @ (0x3F23 * 8 + 3)
#define                                 SMT1WSEL3_bit       _BIT_ACCESS(SMT1WIN,3)
// SMT1WIN<SMT1WSEL4>
extern volatile __bit                   SMT1WSEL4           __at(0x1F91C);	// @ (0x3F23 * 8 + 4)
#define                                 SMT1WSEL4_bit       _BIT_ACCESS(SMT1WIN,4)
// ADCON3<SOI>
extern volatile __bit                   SOI                 __at(0x1F7DB);	// @ (0x3EFB * 8 + 3)
#define                                 SOI_bit             _BIT_ACCESS(ADCON3,3)
// OSCSTAT<SOR>
extern volatile __bit                   SOR                 __at(0x1CEE3);	// @ (0x39DC * 8 + 3)
#define                                 SOR_bit             _BIT_ACCESS(OSCSTAT,3)
// OSCEN<SOSCEN>
extern volatile __bit                   SOSCEN              __at(0x1CEEB);	// @ (0x39DD * 8 + 3)
#define                                 SOSCEN_bit          _BIT_ACCESS(OSCEN,3)
// OSCCON3<SOSCPWR>
extern volatile __bit                   SOSCPWR             __at(0x1CEDE);	// @ (0x39DB * 8 + 6)
#define                                 SOSCPWR_bit         _BIT_ACCESS(OSCCON3,6)
// SPI1INTE<SOSIE>
extern volatile __bit                   SOSIE               __at(0x1E8DD);	// @ (0x3D1B * 8 + 5)
#define                                 SOSIE_bit           _BIT_ACCESS(SPI1INTE,5)
// SPI1INTF<SOSIF>
extern volatile __bit                   SOSIF               __at(0x1E8D5);	// @ (0x3D1A * 8 + 5)
#define                                 SOSIF_bit           _BIT_ACCESS(SPI1INTF,5)
// STKPTR<SP0>
extern volatile __bit                   SP0                 __at(0x1FFE0);	// @ (0x3FFC * 8 + 0)
#define                                 SP0_bit             _BIT_ACCESS(STKPTR,0)
// STKPTR<SP1>
extern volatile __bit                   SP1                 __at(0x1FFE1);	// @ (0x3FFC * 8 + 1)
#define                                 SP1_bit             _BIT_ACCESS(STKPTR,1)
// STKPTR<SP2>
extern volatile __bit                   SP2                 __at(0x1FFE2);	// @ (0x3FFC * 8 + 2)
#define                                 SP2_bit             _BIT_ACCESS(STKPTR,2)
// STKPTR<SP3>
extern volatile __bit                   SP3                 __at(0x1FFE3);	// @ (0x3FFC * 8 + 3)
#define                                 SP3_bit             _BIT_ACCESS(STKPTR,3)
// STKPTR<SP4>
extern volatile __bit                   SP4                 __at(0x1FFE4);	// @ (0x3FFC * 8 + 4)
#define                                 SP4_bit             _BIT_ACCESS(STKPTR,4)
// SPI1CON0<SPI1BMODE>
extern volatile __bit                   SPI1BMODE           __at(0x1E8A0);	// @ (0x3D14 * 8 + 0)
#define                                 SPI1BMODE_bit       _BIT_ACCESS(SPI1CON0,0)
// SPI1CON2<SPI1BUSY>
extern volatile __bit                   SPI1BUSY            __at(0x1E8B7);	// @ (0x3D16 * 8 + 7)
#define                                 SPI1BUSY_bit        _BIT_ACCESS(SPI1CON2,7)
// SPI1CON1<SPI1CKE>
extern volatile __bit                   SPI1CKE             __at(0x1E8AE);	// @ (0x3D15 * 8 + 6)
#define                                 SPI1CKE_bit         _BIT_ACCESS(SPI1CON1,6)
// SPI1CON1<SPI1CKP>
extern volatile __bit                   SPI1CKP             __at(0x1E8AD);	// @ (0x3D15 * 8 + 5)
#define                                 SPI1CKP_bit         _BIT_ACCESS(SPI1CON1,5)
// SPI1CLK<SPI1CLKSEL0>
extern volatile __bit                   SPI1CLKSEL0         __at(0x1E8E0);	// @ (0x3D1C * 8 + 0)
#define                                 SPI1CLKSEL0_bit     _BIT_ACCESS(SPI1CLK,0)
// SPI1CLK<SPI1CLKSEL1>
extern volatile __bit                   SPI1CLKSEL1         __at(0x1E8E1);	// @ (0x3D1C * 8 + 1)
#define                                 SPI1CLKSEL1_bit     _BIT_ACCESS(SPI1CLK,1)
// SPI1CLK<SPI1CLKSEL2>
extern volatile __bit                   SPI1CLKSEL2         __at(0x1E8E2);	// @ (0x3D1C * 8 + 2)
#define                                 SPI1CLKSEL2_bit     _BIT_ACCESS(SPI1CLK,2)
// SPI1CLK<SPI1CLKSEL3>
extern volatile __bit                   SPI1CLKSEL3         __at(0x1E8E3);	// @ (0x3D1C * 8 + 3)
#define                                 SPI1CLKSEL3_bit     _BIT_ACCESS(SPI1CLK,3)
// SPI1STATUS<SPI1CLRBF>
extern volatile __bit                   SPI1CLRBF           __at(0x1E8BA);	// @ (0x3D17 * 8 + 2)
#define                                 SPI1CLRBF_bit       _BIT_ACCESS(SPI1STATUS,2)
// SPI1INTE<SPI1EOSIE>
extern volatile __bit                   SPI1EOSIE           __at(0x1E8DC);	// @ (0x3D1B * 8 + 4)
#define                                 SPI1EOSIE_bit       _BIT_ACCESS(SPI1INTE,4)
// SPI1INTF<SPI1EOSIF>
extern volatile __bit                   SPI1EOSIF           __at(0x1E8D4);	// @ (0x3D1A * 8 + 4)
#define                                 SPI1EOSIF_bit       _BIT_ACCESS(SPI1INTF,4)
// SPI1CON1<SPI1FST>
extern volatile __bit                   SPI1FST             __at(0x1E8AC);	// @ (0x3D15 * 8 + 4)
#define                                 SPI1FST_bit         _BIT_ACCESS(SPI1CON1,4)
// PIE2<SPI1IE>
extern volatile __bit                   SPI1IE              __at(0x1CC96);	// @ (0x3992 * 8 + 6)
#define                                 SPI1IE_bit          _BIT_ACCESS(PIE2,6)
// PIR2<SPI1IF>
extern volatile __bit                   SPI1IF              __at(0x1CD16);	// @ (0x39A2 * 8 + 6)
#define                                 SPI1IF_bit          _BIT_ACCESS(PIR2,6)
// IPR2<SPI1IP>
extern volatile __bit                   SPI1IP              __at(0x1CC16);	// @ (0x3982 * 8 + 6)
#define                                 SPI1IP_bit          _BIT_ACCESS(IPR2,6)
// SPI1CON0<SPI1LSBF>
extern volatile __bit                   SPI1LSBF            __at(0x1E8A2);	// @ (0x3D14 * 8 + 2)
#define                                 SPI1LSBF_bit        _BIT_ACCESS(SPI1CON0,2)
// PMD5<SPI1MD>
extern volatile __bit                   SPI1MD              __at(0x1CE2A);	// @ (0x39C5 * 8 + 2)
#define                                 SPI1MD_bit          _BIT_ACCESS(PMD5,2)
// SPI1CON0<SPI1MST>
extern volatile __bit                   SPI1MST             __at(0x1E8A1);	// @ (0x3D14 * 8 + 1)
#define                                 SPI1MST_bit         _BIT_ACCESS(SPI1CON0,1)
// SPI1STATUS<SPI1RXBF>
extern volatile __bit                   SPI1RXBF            __at(0x1E8B8);	// @ (0x3D17 * 8 + 0)
#define                                 SPI1RXBF_bit        _BIT_ACCESS(SPI1STATUS,0)
// PIE2<SPI1RXIE>
extern volatile __bit                   SPI1RXIE            __at(0x1CC94);	// @ (0x3992 * 8 + 4)
#define                                 SPI1RXIE_bit        _BIT_ACCESS(PIE2,4)
// PIR2<SPI1RXIF>
extern volatile __bit                   SPI1RXIF            __at(0x1CD14);	// @ (0x39A2 * 8 + 4)
#define                                 SPI1RXIF_bit        _BIT_ACCESS(PIR2,4)
// IPR2<SPI1RXIP>
extern volatile __bit                   SPI1RXIP            __at(0x1CC14);	// @ (0x3982 * 8 + 4)
#define                                 SPI1RXIP_bit        _BIT_ACCESS(IPR2,4)
// SPI1INTE<SPI1RXOIE>
extern volatile __bit                   SPI1RXOIE           __at(0x1E8DA);	// @ (0x3D1B * 8 + 2)
#define                                 SPI1RXOIE_bit       _BIT_ACCESS(SPI1INTE,2)
// SPI1INTF<SPI1RXOIF>
extern volatile __bit                   SPI1RXOIF           __at(0x1E8D2);	// @ (0x3D1A * 8 + 2)
#define                                 SPI1RXOIF_bit       _BIT_ACCESS(SPI1INTF,2)
// SPI1CON2<SPI1RXR>
extern volatile __bit                   SPI1RXR             __at(0x1E8B0);	// @ (0x3D16 * 8 + 0)
#define                                 SPI1RXR_bit         _BIT_ACCESS(SPI1CON2,0)
// SPI1STATUS<SPI1RXRE>
extern volatile __bit                   SPI1RXRE            __at(0x1E8BB);	// @ (0x3D17 * 8 + 3)
#define                                 SPI1RXRE_bit        _BIT_ACCESS(SPI1STATUS,3)
// SPI1CON1<SPI1SDIP>
extern volatile __bit                   SPI1SDIP            __at(0x1E8A9);	// @ (0x3D15 * 8 + 1)
#define                                 SPI1SDIP_bit        _BIT_ACCESS(SPI1CON1,1)
// SPI1CON1<SPI1SDOP>
extern volatile __bit                   SPI1SDOP            __at(0x1E8A8);	// @ (0x3D15 * 8 + 0)
#define                                 SPI1SDOP_bit        _BIT_ACCESS(SPI1CON1,0)
// SPI1CON1<SPI1SMP>
extern volatile __bit                   SPI1SMP             __at(0x1E8AF);	// @ (0x3D15 * 8 + 7)
#define                                 SPI1SMP_bit         _BIT_ACCESS(SPI1CON1,7)
// SPI1INTE<SPI1SOSIE>
extern volatile __bit                   SPI1SOSIE           __at(0x1E8DD);	// @ (0x3D1B * 8 + 5)
#define                                 SPI1SOSIE_bit       _BIT_ACCESS(SPI1INTE,5)
// SPI1INTF<SPI1SOSIF>
extern volatile __bit                   SPI1SOSIF           __at(0x1E8D5);	// @ (0x3D1A * 8 + 5)
#define                                 SPI1SOSIF_bit       _BIT_ACCESS(SPI1INTF,5)
// SPI1CON0<SPI1SPIEN>
extern volatile __bit                   SPI1SPIEN           __at(0x1E8A7);	// @ (0x3D14 * 8 + 7)
#define                                 SPI1SPIEN_bit       _BIT_ACCESS(SPI1CON0,7)
// SPI1INTE<SPI1SRMTIE>
extern volatile __bit                   SPI1SRMTIE          __at(0x1E8DF);	// @ (0x3D1B * 8 + 7)
#define                                 SPI1SRMTIE_bit      _BIT_ACCESS(SPI1INTE,7)
// SPI1INTF<SPI1SRMTIF>
extern volatile __bit                   SPI1SRMTIF          __at(0x1E8D7);	// @ (0x3D1A * 8 + 7)
#define                                 SPI1SRMTIF_bit      _BIT_ACCESS(SPI1INTF,7)
// SPI1CON2<SPI1SSET>
extern volatile __bit                   SPI1SSET            __at(0x1E8B2);	// @ (0x3D16 * 8 + 2)
#define                                 SPI1SSET_bit        _BIT_ACCESS(SPI1CON2,2)
// SPI1CON2<SPI1SSFLT>
extern volatile __bit                   SPI1SSFLT           __at(0x1E8B6);	// @ (0x3D16 * 8 + 6)
#define                                 SPI1SSFLT_bit       _BIT_ACCESS(SPI1CON2,6)
// SPI1CON1<SPI1SSP>
extern volatile __bit                   SPI1SSP             __at(0x1E8AA);	// @ (0x3D15 * 8 + 2)
#define                                 SPI1SSP_bit         _BIT_ACCESS(SPI1CON1,2)
// SPI1INTE<SPI1TCZIE>
extern volatile __bit                   SPI1TCZIE           __at(0x1E8DE);	// @ (0x3D1B * 8 + 6)
#define                                 SPI1TCZIE_bit       _BIT_ACCESS(SPI1INTE,6)
// SPI1INTF<SPI1TCZIF>
extern volatile __bit                   SPI1TCZIF           __at(0x1E8D6);	// @ (0x3D1A * 8 + 6)
#define                                 SPI1TCZIF_bit       _BIT_ACCESS(SPI1INTF,6)
// SPI1STATUS<SPI1TXBE>
extern volatile __bit                   SPI1TXBE            __at(0x1E8BD);	// @ (0x3D17 * 8 + 5)
#define                                 SPI1TXBE_bit        _BIT_ACCESS(SPI1STATUS,5)
// PIE2<SPI1TXIE>
extern volatile __bit                   SPI1TXIE            __at(0x1CC95);	// @ (0x3992 * 8 + 5)
#define                                 SPI1TXIE_bit        _BIT_ACCESS(PIE2,5)
// PIR2<SPI1TXIF>
extern volatile __bit                   SPI1TXIF            __at(0x1CD15);	// @ (0x39A2 * 8 + 5)
#define                                 SPI1TXIF_bit        _BIT_ACCESS(PIR2,5)
// IPR2<SPI1TXIP>
extern volatile __bit                   SPI1TXIP            __at(0x1CC15);	// @ (0x3982 * 8 + 5)
#define                                 SPI1TXIP_bit        _BIT_ACCESS(IPR2,5)
// SPI1CON2<SPI1TXR>
extern volatile __bit                   SPI1TXR             __at(0x1E8B1);	// @ (0x3D16 * 8 + 1)
#define                                 SPI1TXR_bit         _BIT_ACCESS(SPI1CON2,1)
// SPI1INTE<SPI1TXUIE>
extern volatile __bit                   SPI1TXUIE           __at(0x1E8D9);	// @ (0x3D1B * 8 + 1)
#define                                 SPI1TXUIE_bit       _BIT_ACCESS(SPI1INTE,1)
// SPI1INTF<SPI1TXUIF>
extern volatile __bit                   SPI1TXUIF           __at(0x1E8D1);	// @ (0x3D1A * 8 + 1)
#define                                 SPI1TXUIF_bit       _BIT_ACCESS(SPI1INTF,1)
// SPI1STATUS<SPI1TXWE>
extern volatile __bit                   SPI1TXWE            __at(0x1E8BF);	// @ (0x3D17 * 8 + 7)
#define                                 SPI1TXWE_bit        _BIT_ACCESS(SPI1STATUS,7)
// SMT1CON0<SPOL>
extern volatile __bit                   SPOL                __at(0x1F8F3);	// @ (0x3F1E * 8 + 3)
#define                                 SPOL_bit            _BIT_ACCESS(SMT1CON0,3)
// SPI1INTE<SRMTIE>
extern volatile __bit                   SRMTIE              __at(0x1E8DF);	// @ (0x3D1B * 8 + 7)
#define                                 SRMTIE_bit          _BIT_ACCESS(SPI1INTE,7)
// SPI1INTF<SRMTIF>
extern volatile __bit                   SRMTIF              __at(0x1E8D7);	// @ (0x3D1A * 8 + 7)
#define                                 SRMTIF_bit          _BIT_ACCESS(SPI1INTF,7)
// SMT1SIG<SSEL0>
extern volatile __bit                   SSEL0               __at(0x1F910);	// @ (0x3F22 * 8 + 0)
#define                                 SSEL0_bit           _BIT_ACCESS(SMT1SIG,0)
// SMT1SIG<SSEL1>
extern volatile __bit                   SSEL1               __at(0x1F911);	// @ (0x3F22 * 8 + 1)
#define                                 SSEL1_bit           _BIT_ACCESS(SMT1SIG,1)
// SMT1SIG<SSEL2>
extern volatile __bit                   SSEL2               __at(0x1F912);	// @ (0x3F22 * 8 + 2)
#define                                 SSEL2_bit           _BIT_ACCESS(SMT1SIG,2)
// SMT1SIG<SSEL3>
extern volatile __bit                   SSEL3               __at(0x1F913);	// @ (0x3F22 * 8 + 3)
#define                                 SSEL3_bit           _BIT_ACCESS(SMT1SIG,3)
// SMT1SIG<SSEL4>
extern volatile __bit                   SSEL4               __at(0x1F914);	// @ (0x3F22 * 8 + 4)
#define                                 SSEL4_bit           _BIT_ACCESS(SMT1SIG,4)
// SPI1CON2<SSET>
extern volatile __bit                   SSET                __at(0x1E8B2);	// @ (0x3D16 * 8 + 2)
#define                                 SSET_bit            _BIT_ACCESS(SPI1CON2,2)
// SPI1CON2<SSFLT>
extern volatile __bit                   SSFLT               __at(0x1E8B6);	// @ (0x3D16 * 8 + 6)
#define                                 SSFLT_bit           _BIT_ACCESS(SPI1CON2,6)
// SPI1CON1<SSP>
extern volatile __bit                   SSP                 __at(0x1E8AA);	// @ (0x3D15 * 8 + 2)
#define                                 SSP_bit             _BIT_ACCESS(SPI1CON1,2)
// ADSTAT<STAT2>
extern volatile __bit                   STAT2               __at(0x1F7E2);	// @ (0x3EFC * 8 + 2)
#define                                 STAT2_bit           _BIT_ACCESS(ADSTAT,2)
// WDTTMR<STATE>
extern volatile __bit                   STATE               __at(0x1CAFA);	// @ (0x395F * 8 + 2)
#define                                 STATE_bit           _BIT_ACCESS(WDTTMR,2)
// PCON0<STKOVF>
extern volatile __bit                   STKOVF              __at(0x1FF87);	// @ (0x3FF0 * 8 + 7)
#define                                 STKOVF_bit          _BIT_ACCESS(PCON0,7)
// STKPTR<STKPTR0>
extern volatile __bit                   STKPTR0             __at(0x1FFE0);	// @ (0x3FFC * 8 + 0)
#define                                 STKPTR0_bit         _BIT_ACCESS(STKPTR,0)
// STKPTR<STKPTR1>
extern volatile __bit                   STKPTR1             __at(0x1FFE1);	// @ (0x3FFC * 8 + 1)
#define                                 STKPTR1_bit         _BIT_ACCESS(STKPTR,1)
// STKPTR<STKPTR2>
extern volatile __bit                   STKPTR2             __at(0x1FFE2);	// @ (0x3FFC * 8 + 2)
#define                                 STKPTR2_bit         _BIT_ACCESS(STKPTR,2)
// STKPTR<STKPTR3>
extern volatile __bit                   STKPTR3             __at(0x1FFE3);	// @ (0x3FFC * 8 + 3)
#define                                 STKPTR3_bit         _BIT_ACCESS(STKPTR,3)
// STKPTR<STKPTR4>
extern volatile __bit                   STKPTR4             __at(0x1FFE4);	// @ (0x3FFC * 8 + 4)
#define                                 STKPTR4_bit         _BIT_ACCESS(STKPTR,4)
// PCON0<STKUNF>
extern volatile __bit                   STKUNF              __at(0x1FF86);	// @ (0x3FF0 * 8 + 6)
#define                                 STKUNF_bit          _BIT_ACCESS(PCON0,6)
// SMT1CON0<STP>
extern volatile __bit                   STP                 __at(0x1F8F5);	// @ (0x3F1E * 8 + 5)
#define                                 STP_bit             _BIT_ACCESS(SMT1CON0,5)
// ADSTPTL<STPT0>
extern volatile __bit                   STPT0               __at(0x1F720);	// @ (0x3EE4 * 8 + 0)
#define                                 STPT0_bit           _BIT_ACCESS(ADSTPTL,0)
// ADSTPTL<STPT1>
extern volatile __bit                   STPT1               __at(0x1F721);	// @ (0x3EE4 * 8 + 1)
#define                                 STPT1_bit           _BIT_ACCESS(ADSTPTL,1)
// ADSTPTH<STPT10>
extern volatile __bit                   STPT10              __at(0x1F72A);	// @ (0x3EE5 * 8 + 2)
#define                                 STPT10_bit          _BIT_ACCESS(ADSTPTH,2)
// ADSTPTH<STPT11>
extern volatile __bit                   STPT11              __at(0x1F72B);	// @ (0x3EE5 * 8 + 3)
#define                                 STPT11_bit          _BIT_ACCESS(ADSTPTH,3)
// ADSTPTH<STPT12>
extern volatile __bit                   STPT12              __at(0x1F72C);	// @ (0x3EE5 * 8 + 4)
#define                                 STPT12_bit          _BIT_ACCESS(ADSTPTH,4)
// ADSTPTH<STPT13>
extern volatile __bit                   STPT13              __at(0x1F72D);	// @ (0x3EE5 * 8 + 5)
#define                                 STPT13_bit          _BIT_ACCESS(ADSTPTH,5)
// ADSTPTH<STPT15>
extern volatile __bit                   STPT15              __at(0x1F72E);	// @ (0x3EE5 * 8 + 6)
#define                                 STPT15_bit          _BIT_ACCESS(ADSTPTH,6)
// ADSTPTH<STPT16>
extern volatile __bit                   STPT16              __at(0x1F72F);	// @ (0x3EE5 * 8 + 7)
#define                                 STPT16_bit          _BIT_ACCESS(ADSTPTH,7)
// ADSTPTL<STPT2>
extern volatile __bit                   STPT2               __at(0x1F722);	// @ (0x3EE4 * 8 + 2)
#define                                 STPT2_bit           _BIT_ACCESS(ADSTPTL,2)
// ADSTPTL<STPT3>
extern volatile __bit                   STPT3               __at(0x1F723);	// @ (0x3EE4 * 8 + 3)
#define                                 STPT3_bit           _BIT_ACCESS(ADSTPTL,3)
// ADSTPTL<STPT4>
extern volatile __bit                   STPT4               __at(0x1F724);	// @ (0x3EE4 * 8 + 4)
#define                                 STPT4_bit           _BIT_ACCESS(ADSTPTL,4)
// ADSTPTL<STPT5>
extern volatile __bit                   STPT5               __at(0x1F725);	// @ (0x3EE4 * 8 + 5)
#define                                 STPT5_bit           _BIT_ACCESS(ADSTPTL,5)
// ADSTPTL<STPT6>
extern volatile __bit                   STPT6               __at(0x1F726);	// @ (0x3EE4 * 8 + 6)
#define                                 STPT6_bit           _BIT_ACCESS(ADSTPTL,6)
// ADSTPTL<STPT7>
extern volatile __bit                   STPT7               __at(0x1F727);	// @ (0x3EE4 * 8 + 7)
#define                                 STPT7_bit           _BIT_ACCESS(ADSTPTL,7)
// ADSTPTH<STPT8>
extern volatile __bit                   STPT8               __at(0x1F728);	// @ (0x3EE5 * 8 + 0)
#define                                 STPT8_bit           _BIT_ACCESS(ADSTPTH,0)
// ADSTPTH<STPT9>
extern volatile __bit                   STPT9               __at(0x1F729);	// @ (0x3EE5 * 8 + 1)
#define                                 STPT9_bit           _BIT_ACCESS(ADSTPTH,1)
// WDTCON0<SWDTEN>
extern volatile __bit                   SWDTEN              __at(0x1CAD8);	// @ (0x395B * 8 + 0)
#define                                 SWDTEN_bit          _BIT_ACCESS(WDTCON0,0)
// PIE0<SWIE>
extern volatile __bit                   SWIE                __at(0x1CC80);	// @ (0x3990 * 8 + 0)
#define                                 SWIE_bit            _BIT_ACCESS(PIE0,0)
// PIR0<SWIF>
extern volatile __bit                   SWIF                __at(0x1CD00);	// @ (0x39A0 * 8 + 0)
#define                                 SWIF_bit            _BIT_ACCESS(PIR0,0)
// IPR0<SWIP>
extern volatile __bit                   SWIP                __at(0x1CC00);	// @ (0x3980 * 8 + 0)
#define                                 SWIP_bit            _BIT_ACCESS(IPR0,0)
// PMD0<SYSCMD>
extern volatile __bit                   SYSCMD              __at(0x1CE07);	// @ (0x39C0 * 8 + 7)
#define                                 SYSCMD_bit          _BIT_ACCESS(PMD0,7)
// T0CON0<T016BIT>
extern volatile __bit                   T016BIT             __at(0x1FDC4);	// @ (0x3FB8 * 8 + 4)
#define                                 T016BIT_bit         _BIT_ACCESS(T0CON0,4)
// T0CON1<T0ASYNC>
extern volatile __bit                   T0ASYNC             __at(0x1FDCC);	// @ (0x3FB9 * 8 + 4)
#define                                 T0ASYNC_bit         _BIT_ACCESS(T0CON1,4)
// T0CON1<T0CKPS0>
extern volatile __bit                   T0CKPS0             __at(0x1FDC8);	// @ (0x3FB9 * 8 + 0)
#define                                 T0CKPS0_bit         _BIT_ACCESS(T0CON1,0)
// T0CON1<T0CKPS1>
extern volatile __bit                   T0CKPS1             __at(0x1FDC9);	// @ (0x3FB9 * 8 + 1)
#define                                 T0CKPS1_bit         _BIT_ACCESS(T0CON1,1)
// T0CON1<T0CKPS2>
extern volatile __bit                   T0CKPS2             __at(0x1FDCA);	// @ (0x3FB9 * 8 + 2)
#define                                 T0CKPS2_bit         _BIT_ACCESS(T0CON1,2)
// T0CON1<T0CKPS3>
extern volatile __bit                   T0CKPS3             __at(0x1FDCB);	// @ (0x3FB9 * 8 + 3)
#define                                 T0CKPS3_bit         _BIT_ACCESS(T0CON1,3)
// T0CON1<T0CS0>
extern volatile __bit                   T0CS0               __at(0x1FDCD);	// @ (0x3FB9 * 8 + 5)
#define                                 T0CS0_bit           _BIT_ACCESS(T0CON1,5)
// T0CON1<T0CS1>
extern volatile __bit                   T0CS1               __at(0x1FDCE);	// @ (0x3FB9 * 8 + 6)
#define                                 T0CS1_bit           _BIT_ACCESS(T0CON1,6)
// T0CON1<T0CS2>
extern volatile __bit                   T0CS2               __at(0x1FDCF);	// @ (0x3FB9 * 8 + 7)
#define                                 T0CS2_bit           _BIT_ACCESS(T0CON1,7)
// T0CON0<T0EN>
extern volatile __bit                   T0EN                __at(0x1FDC7);	// @ (0x3FB8 * 8 + 7)
#define                                 T0EN_bit            _BIT_ACCESS(T0CON0,7)
// T0CON0<T0MD16>
extern volatile __bit                   T0MD16              __at(0x1FDC4);	// @ (0x3FB8 * 8 + 4)
#define                                 T0MD16_bit          _BIT_ACCESS(T0CON0,4)
// T0CON0<T0OUT>
extern volatile __bit                   T0OUT               __at(0x1FDC5);	// @ (0x3FB8 * 8 + 5)
#define                                 T0OUT_bit           _BIT_ACCESS(T0CON0,5)
// TMR0H<T0PR0>
extern volatile __bit                   T0PR0               __at(0x1FDB8);	// @ (0x3FB7 * 8 + 0)
#define                                 T0PR0_bit           _BIT_ACCESS(TMR0H,0)
// TMR0H<T0PR1>
extern volatile __bit                   T0PR1               __at(0x1FDB9);	// @ (0x3FB7 * 8 + 1)
#define                                 T0PR1_bit           _BIT_ACCESS(TMR0H,1)
// TMR0H<T0PR2>
extern volatile __bit                   T0PR2               __at(0x1FDBA);	// @ (0x3FB7 * 8 + 2)
#define                                 T0PR2_bit           _BIT_ACCESS(TMR0H,2)
// TMR0H<T0PR3>
extern volatile __bit                   T0PR3               __at(0x1FDBB);	// @ (0x3FB7 * 8 + 3)
#define                                 T0PR3_bit           _BIT_ACCESS(TMR0H,3)
// TMR0H<T0PR4>
extern volatile __bit                   T0PR4               __at(0x1FDBC);	// @ (0x3FB7 * 8 + 4)
#define                                 T0PR4_bit           _BIT_ACCESS(TMR0H,4)
// TMR0H<T0PR5>
extern volatile __bit                   T0PR5               __at(0x1FDBD);	// @ (0x3FB7 * 8 + 5)
#define                                 T0PR5_bit           _BIT_ACCESS(TMR0H,5)
// TMR0H<T0PR6>
extern volatile __bit                   T0PR6               __at(0x1FDBE);	// @ (0x3FB7 * 8 + 6)
#define                                 T0PR6_bit           _BIT_ACCESS(TMR0H,6)
// TMR0H<T0PR7>
extern volatile __bit                   T0PR7               __at(0x1FDBF);	// @ (0x3FB7 * 8 + 7)
#define                                 T0PR7_bit           _BIT_ACCESS(TMR0H,7)
// T1CON<T1CKPS0>
extern volatile __bit                   T1CKPS0             __at(0x1FD94);	// @ (0x3FB2 * 8 + 4)
#define                                 T1CKPS0_bit         _BIT_ACCESS(T1CON,4)
// T1CON<T1CKPS1>
extern volatile __bit                   T1CKPS1             __at(0x1FD95);	// @ (0x3FB2 * 8 + 5)
#define                                 T1CKPS1_bit         _BIT_ACCESS(T1CON,5)
// T1CLK<T1CS0>
extern volatile __bit                   T1CS0               __at(0x1FDA8);	// @ (0x3FB5 * 8 + 0)
#define                                 T1CS0_bit           _BIT_ACCESS(T1CLK,0)
// T1CLK<T1CS1>
extern volatile __bit                   T1CS1               __at(0x1FDA9);	// @ (0x3FB5 * 8 + 1)
#define                                 T1CS1_bit           _BIT_ACCESS(T1CLK,1)
// T1CLK<T1CS2>
extern volatile __bit                   T1CS2               __at(0x1FDAA);	// @ (0x3FB5 * 8 + 2)
#define                                 T1CS2_bit           _BIT_ACCESS(T1CLK,2)
// T1CLK<T1CS3>
extern volatile __bit                   T1CS3               __at(0x1FDAB);	// @ (0x3FB5 * 8 + 3)
#define                                 T1CS3_bit           _BIT_ACCESS(T1CLK,3)
// T1CLK<T1CS4>
extern volatile __bit                   T1CS4               __at(0x1FDAC);	// @ (0x3FB5 * 8 + 4)
#define                                 T1CS4_bit           _BIT_ACCESS(T1CLK,4)
// T1GCON<T1GE>
extern volatile __bit                   T1GE                __at(0x1FD9F);	// @ (0x3FB3 * 8 + 7)
#define                                 T1GE_bit            _BIT_ACCESS(T1GCON,7)
// T1GCON<T1GGO>
extern volatile __bit                   T1GGO               __at(0x1FD9B);	// @ (0x3FB3 * 8 + 3)
#define                                 T1GGO_bit           _BIT_ACCESS(T1GCON,3)
// T1GCON<T1GPOL>
extern volatile __bit                   T1GPOL              __at(0x1FD9E);	// @ (0x3FB3 * 8 + 6)
#define                                 T1GPOL_bit          _BIT_ACCESS(T1GCON,6)
// T1GCON<T1GSPM>
extern volatile __bit                   T1GSPM              __at(0x1FD9C);	// @ (0x3FB3 * 8 + 4)
#define                                 T1GSPM_bit          _BIT_ACCESS(T1GCON,4)
// T1GATE<T1GSS0>
extern volatile __bit                   T1GSS0              __at(0x1FDA0);	// @ (0x3FB4 * 8 + 0)
#define                                 T1GSS0_bit          _BIT_ACCESS(T1GATE,0)
// T1GATE<T1GSS1>
extern volatile __bit                   T1GSS1              __at(0x1FDA1);	// @ (0x3FB4 * 8 + 1)
#define                                 T1GSS1_bit          _BIT_ACCESS(T1GATE,1)
// T1GATE<T1GSS2>
extern volatile __bit                   T1GSS2              __at(0x1FDA2);	// @ (0x3FB4 * 8 + 2)
#define                                 T1GSS2_bit          _BIT_ACCESS(T1GATE,2)
// T1GATE<T1GSS3>
extern volatile __bit                   T1GSS3              __at(0x1FDA3);	// @ (0x3FB4 * 8 + 3)
#define                                 T1GSS3_bit          _BIT_ACCESS(T1GATE,3)
// T1GATE<T1GSS4>
extern volatile __bit                   T1GSS4              __at(0x1FDA4);	// @ (0x3FB4 * 8 + 4)
#define                                 T1GSS4_bit          _BIT_ACCESS(T1GATE,4)
// T1GCON<T1GTM>
extern volatile __bit                   T1GTM               __at(0x1FD9D);	// @ (0x3FB3 * 8 + 5)
#define                                 T1GTM_bit           _BIT_ACCESS(T1GCON,5)
// T1GCON<T1GVAL>
extern volatile __bit                   T1GVAL              __at(0x1FD9A);	// @ (0x3FB3 * 8 + 2)
#define                                 T1GVAL_bit          _BIT_ACCESS(T1GCON,2)
// T1CON<T1RD16>
extern volatile __bit                   T1RD16              __at(0x1FD91);	// @ (0x3FB2 * 8 + 1)
#define                                 T1RD16_bit          _BIT_ACCESS(T1CON,1)
// T2HLT<T2CKPOL>
extern volatile __bit                   T2CKPOL             __at(0x1FD6E);	// @ (0x3FAD * 8 + 6)
#define                                 T2CKPOL_bit         _BIT_ACCESS(T2HLT,6)
// T2CON<T2CKPS0>
extern volatile __bit                   T2CKPS0             __at(0x1FD64);	// @ (0x3FAC * 8 + 4)
#define                                 T2CKPS0_bit         _BIT_ACCESS(T2CON,4)
// T2CON<T2CKPS1>
extern volatile __bit                   T2CKPS1             __at(0x1FD65);	// @ (0x3FAC * 8 + 5)
#define                                 T2CKPS1_bit         _BIT_ACCESS(T2CON,5)
// T2CON<T2CKPS2>
extern volatile __bit                   T2CKPS2             __at(0x1FD66);	// @ (0x3FAC * 8 + 6)
#define                                 T2CKPS2_bit         _BIT_ACCESS(T2CON,6)
// T2HLT<T2CKSYNC>
extern volatile __bit                   T2CKSYNC            __at(0x1FD6D);	// @ (0x3FAD * 8 + 5)
#define                                 T2CKSYNC_bit        _BIT_ACCESS(T2HLT,5)
// T2CLKCON<T2CS0>
extern volatile __bit                   T2CS0               __at(0x1FD70);	// @ (0x3FAE * 8 + 0)
#define                                 T2CS0_bit           _BIT_ACCESS(T2CLKCON,0)
// T2CLKCON<T2CS1>
extern volatile __bit                   T2CS1               __at(0x1FD71);	// @ (0x3FAE * 8 + 1)
#define                                 T2CS1_bit           _BIT_ACCESS(T2CLKCON,1)
// T2CLKCON<T2CS2>
extern volatile __bit                   T2CS2               __at(0x1FD72);	// @ (0x3FAE * 8 + 2)
#define                                 T2CS2_bit           _BIT_ACCESS(T2CLKCON,2)
// T2CLKCON<T2CS3>
extern volatile __bit                   T2CS3               __at(0x1FD73);	// @ (0x3FAE * 8 + 3)
#define                                 T2CS3_bit           _BIT_ACCESS(T2CLKCON,3)
// T2HLT<T2MODE0>
extern volatile __bit                   T2MODE0             __at(0x1FD68);	// @ (0x3FAD * 8 + 0)
#define                                 T2MODE0_bit         _BIT_ACCESS(T2HLT,0)
// T2HLT<T2MODE1>
extern volatile __bit                   T2MODE1             __at(0x1FD69);	// @ (0x3FAD * 8 + 1)
#define                                 T2MODE1_bit         _BIT_ACCESS(T2HLT,1)
// T2HLT<T2MODE2>
extern volatile __bit                   T2MODE2             __at(0x1FD6A);	// @ (0x3FAD * 8 + 2)
#define                                 T2MODE2_bit         _BIT_ACCESS(T2HLT,2)
// T2HLT<T2MODE3>
extern volatile __bit                   T2MODE3             __at(0x1FD6B);	// @ (0x3FAD * 8 + 3)
#define                                 T2MODE3_bit         _BIT_ACCESS(T2HLT,3)
// T2HLT<T2MODE4>
extern volatile __bit                   T2MODE4             __at(0x1FD6C);	// @ (0x3FAD * 8 + 4)
#define                                 T2MODE4_bit         _BIT_ACCESS(T2HLT,4)
// T2CON<T2ON>
extern volatile __bit                   T2ON                __at(0x1FD67);	// @ (0x3FAC * 8 + 7)
#define                                 T2ON_bit            _BIT_ACCESS(T2CON,7)
// T2CON<T2OUTPS0>
extern volatile __bit                   T2OUTPS0            __at(0x1FD60);	// @ (0x3FAC * 8 + 0)
#define                                 T2OUTPS0_bit        _BIT_ACCESS(T2CON,0)
// T2CON<T2OUTPS1>
extern volatile __bit                   T2OUTPS1            __at(0x1FD61);	// @ (0x3FAC * 8 + 1)
#define                                 T2OUTPS1_bit        _BIT_ACCESS(T2CON,1)
// T2CON<T2OUTPS2>
extern volatile __bit                   T2OUTPS2            __at(0x1FD62);	// @ (0x3FAC * 8 + 2)
#define                                 T2OUTPS2_bit        _BIT_ACCESS(T2CON,2)
// T2CON<T2OUTPS3>
extern volatile __bit                   T2OUTPS3            __at(0x1FD63);	// @ (0x3FAC * 8 + 3)
#define                                 T2OUTPS3_bit        _BIT_ACCESS(T2CON,3)
// T2HLT<T2PSYNC>
extern volatile __bit                   T2PSYNC             __at(0x1FD6F);	// @ (0x3FAD * 8 + 7)
#define                                 T2PSYNC_bit         _BIT_ACCESS(T2HLT,7)
// T2RST<T2RSEL0>
extern volatile __bit                   T2RSEL0             __at(0x1FD78);	// @ (0x3FAF * 8 + 0)
#define                                 T2RSEL0_bit         _BIT_ACCESS(T2RST,0)
// T2RST<T2RSEL1>
extern volatile __bit                   T2RSEL1             __at(0x1FD79);	// @ (0x3FAF * 8 + 1)
#define                                 T2RSEL1_bit         _BIT_ACCESS(T2RST,1)
// T2RST<T2RSEL2>
extern volatile __bit                   T2RSEL2             __at(0x1FD7A);	// @ (0x3FAF * 8 + 2)
#define                                 T2RSEL2_bit         _BIT_ACCESS(T2RST,2)
// T2RST<T2RSEL3>
extern volatile __bit                   T2RSEL3             __at(0x1FD7B);	// @ (0x3FAF * 8 + 3)
#define                                 T2RSEL3_bit         _BIT_ACCESS(T2RST,3)
// T2RST<T2RSEL4>
extern volatile __bit                   T2RSEL4             __at(0x1FD7C);	// @ (0x3FAF * 8 + 4)
#define                                 T2RSEL4_bit         _BIT_ACCESS(T2RST,4)
// T3CON<T3CKPS0>
extern volatile __bit                   T3CKPS0             __at(0x1FD34);	// @ (0x3FA6 * 8 + 4)
#define                                 T3CKPS0_bit         _BIT_ACCESS(T3CON,4)
// T3CON<T3CKPS1>
extern volatile __bit                   T3CKPS1             __at(0x1FD35);	// @ (0x3FA6 * 8 + 5)
#define                                 T3CKPS1_bit         _BIT_ACCESS(T3CON,5)
// T3CLK<T3CS0>
extern volatile __bit                   T3CS0               __at(0x1FD48);	// @ (0x3FA9 * 8 + 0)
#define                                 T3CS0_bit           _BIT_ACCESS(T3CLK,0)
// T3CLK<T3CS1>
extern volatile __bit                   T3CS1               __at(0x1FD49);	// @ (0x3FA9 * 8 + 1)
#define                                 T3CS1_bit           _BIT_ACCESS(T3CLK,1)
// T3CLK<T3CS2>
extern volatile __bit                   T3CS2               __at(0x1FD4A);	// @ (0x3FA9 * 8 + 2)
#define                                 T3CS2_bit           _BIT_ACCESS(T3CLK,2)
// T3CLK<T3CS3>
extern volatile __bit                   T3CS3               __at(0x1FD4B);	// @ (0x3FA9 * 8 + 3)
#define                                 T3CS3_bit           _BIT_ACCESS(T3CLK,3)
// T3CLK<T3CS4>
extern volatile __bit                   T3CS4               __at(0x1FD4C);	// @ (0x3FA9 * 8 + 4)
#define                                 T3CS4_bit           _BIT_ACCESS(T3CLK,4)
// T3GCON<T3GE>
extern volatile __bit                   T3GE                __at(0x1FD3F);	// @ (0x3FA7 * 8 + 7)
#define                                 T3GE_bit            _BIT_ACCESS(T3GCON,7)
// T3GCON<T3GGO>
extern volatile __bit                   T3GGO               __at(0x1FD3B);	// @ (0x3FA7 * 8 + 3)
#define                                 T3GGO_bit           _BIT_ACCESS(T3GCON,3)
// T3GCON<T3GPOL>
extern volatile __bit                   T3GPOL              __at(0x1FD3E);	// @ (0x3FA7 * 8 + 6)
#define                                 T3GPOL_bit          _BIT_ACCESS(T3GCON,6)
// T3GCON<T3GSPM>
extern volatile __bit                   T3GSPM              __at(0x1FD3C);	// @ (0x3FA7 * 8 + 4)
#define                                 T3GSPM_bit          _BIT_ACCESS(T3GCON,4)
// T3GATE<T3GSS0>
extern volatile __bit                   T3GSS0              __at(0x1FD40);	// @ (0x3FA8 * 8 + 0)
#define                                 T3GSS0_bit          _BIT_ACCESS(T3GATE,0)
// T3GATE<T3GSS1>
extern volatile __bit                   T3GSS1              __at(0x1FD41);	// @ (0x3FA8 * 8 + 1)
#define                                 T3GSS1_bit          _BIT_ACCESS(T3GATE,1)
// T3GATE<T3GSS2>
extern volatile __bit                   T3GSS2              __at(0x1FD42);	// @ (0x3FA8 * 8 + 2)
#define                                 T3GSS2_bit          _BIT_ACCESS(T3GATE,2)
// T3GATE<T3GSS3>
extern volatile __bit                   T3GSS3              __at(0x1FD43);	// @ (0x3FA8 * 8 + 3)
#define                                 T3GSS3_bit          _BIT_ACCESS(T3GATE,3)
// T3GATE<T3GSS4>
extern volatile __bit                   T3GSS4              __at(0x1FD44);	// @ (0x3FA8 * 8 + 4)
#define                                 T3GSS4_bit          _BIT_ACCESS(T3GATE,4)
// T3GCON<T3GTM>
extern volatile __bit                   T3GTM               __at(0x1FD3D);	// @ (0x3FA7 * 8 + 5)
#define                                 T3GTM_bit           _BIT_ACCESS(T3GCON,5)
// T3GCON<T3GVAL>
extern volatile __bit                   T3GVAL              __at(0x1FD3A);	// @ (0x3FA7 * 8 + 2)
#define                                 T3GVAL_bit          _BIT_ACCESS(T3GCON,2)
// T3CON<T3RD16>
extern volatile __bit                   T3RD16              __at(0x1FD31);	// @ (0x3FA6 * 8 + 1)
#define                                 T3RD16_bit          _BIT_ACCESS(T3CON,1)
// T4HLT<T4CKPOL>
extern volatile __bit                   T4CKPOL             __at(0x1FD0E);	// @ (0x3FA1 * 8 + 6)
#define                                 T4CKPOL_bit         _BIT_ACCESS(T4HLT,6)
// T4CON<T4CKPS0>
extern volatile __bit                   T4CKPS0             __at(0x1FD04);	// @ (0x3FA0 * 8 + 4)
#define                                 T4CKPS0_bit         _BIT_ACCESS(T4CON,4)
// T4CON<T4CKPS1>
extern volatile __bit                   T4CKPS1             __at(0x1FD05);	// @ (0x3FA0 * 8 + 5)
#define                                 T4CKPS1_bit         _BIT_ACCESS(T4CON,5)
// T4CON<T4CKPS2>
extern volatile __bit                   T4CKPS2             __at(0x1FD06);	// @ (0x3FA0 * 8 + 6)
#define                                 T4CKPS2_bit         _BIT_ACCESS(T4CON,6)
// T4HLT<T4CKSYNC>
extern volatile __bit                   T4CKSYNC            __at(0x1FD0D);	// @ (0x3FA1 * 8 + 5)
#define                                 T4CKSYNC_bit        _BIT_ACCESS(T4HLT,5)
// T4CLKCON<T4CS0>
extern volatile __bit                   T4CS0               __at(0x1FD10);	// @ (0x3FA2 * 8 + 0)
#define                                 T4CS0_bit           _BIT_ACCESS(T4CLKCON,0)
// T4CLKCON<T4CS1>
extern volatile __bit                   T4CS1               __at(0x1FD11);	// @ (0x3FA2 * 8 + 1)
#define                                 T4CS1_bit           _BIT_ACCESS(T4CLKCON,1)
// T4CLKCON<T4CS2>
extern volatile __bit                   T4CS2               __at(0x1FD12);	// @ (0x3FA2 * 8 + 2)
#define                                 T4CS2_bit           _BIT_ACCESS(T4CLKCON,2)
// T4CLKCON<T4CS3>
extern volatile __bit                   T4CS3               __at(0x1FD13);	// @ (0x3FA2 * 8 + 3)
#define                                 T4CS3_bit           _BIT_ACCESS(T4CLKCON,3)
// T4HLT<T4MODE0>
extern volatile __bit                   T4MODE0             __at(0x1FD08);	// @ (0x3FA1 * 8 + 0)
#define                                 T4MODE0_bit         _BIT_ACCESS(T4HLT,0)
// T4HLT<T4MODE1>
extern volatile __bit                   T4MODE1             __at(0x1FD09);	// @ (0x3FA1 * 8 + 1)
#define                                 T4MODE1_bit         _BIT_ACCESS(T4HLT,1)
// T4HLT<T4MODE2>
extern volatile __bit                   T4MODE2             __at(0x1FD0A);	// @ (0x3FA1 * 8 + 2)
#define                                 T4MODE2_bit         _BIT_ACCESS(T4HLT,2)
// T4HLT<T4MODE3>
extern volatile __bit                   T4MODE3             __at(0x1FD0B);	// @ (0x3FA1 * 8 + 3)
#define                                 T4MODE3_bit         _BIT_ACCESS(T4HLT,3)
// T4HLT<T4MODE4>
extern volatile __bit                   T4MODE4             __at(0x1FD0C);	// @ (0x3FA1 * 8 + 4)
#define                                 T4MODE4_bit         _BIT_ACCESS(T4HLT,4)
// T4CON<T4ON>
extern volatile __bit                   T4ON                __at(0x1FD07);	// @ (0x3FA0 * 8 + 7)
#define                                 T4ON_bit            _BIT_ACCESS(T4CON,7)
// T4CON<T4OUTPS0>
extern volatile __bit                   T4OUTPS0            __at(0x1FD00);	// @ (0x3FA0 * 8 + 0)
#define                                 T4OUTPS0_bit        _BIT_ACCESS(T4CON,0)
// T4CON<T4OUTPS1>
extern volatile __bit                   T4OUTPS1            __at(0x1FD01);	// @ (0x3FA0 * 8 + 1)
#define                                 T4OUTPS1_bit        _BIT_ACCESS(T4CON,1)
// T4CON<T4OUTPS2>
extern volatile __bit                   T4OUTPS2            __at(0x1FD02);	// @ (0x3FA0 * 8 + 2)
#define                                 T4OUTPS2_bit        _BIT_ACCESS(T4CON,2)
// T4CON<T4OUTPS3>
extern volatile __bit                   T4OUTPS3            __at(0x1FD03);	// @ (0x3FA0 * 8 + 3)
#define                                 T4OUTPS3_bit        _BIT_ACCESS(T4CON,3)
// T4HLT<T4PSYNC>
extern volatile __bit                   T4PSYNC             __at(0x1FD0F);	// @ (0x3FA1 * 8 + 7)
#define                                 T4PSYNC_bit         _BIT_ACCESS(T4HLT,7)
// T4RST<T4RSEL0>
extern volatile __bit                   T4RSEL0             __at(0x1FD18);	// @ (0x3FA3 * 8 + 0)
#define                                 T4RSEL0_bit         _BIT_ACCESS(T4RST,0)
// T4RST<T4RSEL1>
extern volatile __bit                   T4RSEL1             __at(0x1FD19);	// @ (0x3FA3 * 8 + 1)
#define                                 T4RSEL1_bit         _BIT_ACCESS(T4RST,1)
// T4RST<T4RSEL2>
extern volatile __bit                   T4RSEL2             __at(0x1FD1A);	// @ (0x3FA3 * 8 + 2)
#define                                 T4RSEL2_bit         _BIT_ACCESS(T4RST,2)
// T4RST<T4RSEL3>
extern volatile __bit                   T4RSEL3             __at(0x1FD1B);	// @ (0x3FA3 * 8 + 3)
#define                                 T4RSEL3_bit         _BIT_ACCESS(T4RST,3)
// T4RST<T4RSEL4>
extern volatile __bit                   T4RSEL4             __at(0x1FD1C);	// @ (0x3FA3 * 8 + 4)
#define                                 T4RSEL4_bit         _BIT_ACCESS(T4RST,4)
// T5CON<T5CKPS0>
extern volatile __bit                   T5CKPS0             __at(0x1FCD4);	// @ (0x3F9A * 8 + 4)
#define                                 T5CKPS0_bit         _BIT_ACCESS(T5CON,4)
// T5CON<T5CKPS1>
extern volatile __bit                   T5CKPS1             __at(0x1FCD5);	// @ (0x3F9A * 8 + 5)
#define                                 T5CKPS1_bit         _BIT_ACCESS(T5CON,5)
// T5CLK<T5CS0>
extern volatile __bit                   T5CS0               __at(0x1FCE8);	// @ (0x3F9D * 8 + 0)
#define                                 T5CS0_bit           _BIT_ACCESS(T5CLK,0)
// T5CLK<T5CS1>
extern volatile __bit                   T5CS1               __at(0x1FCE9);	// @ (0x3F9D * 8 + 1)
#define                                 T5CS1_bit           _BIT_ACCESS(T5CLK,1)
// T5CLK<T5CS2>
extern volatile __bit                   T5CS2               __at(0x1FCEA);	// @ (0x3F9D * 8 + 2)
#define                                 T5CS2_bit           _BIT_ACCESS(T5CLK,2)
// T5CLK<T5CS3>
extern volatile __bit                   T5CS3               __at(0x1FCEB);	// @ (0x3F9D * 8 + 3)
#define                                 T5CS3_bit           _BIT_ACCESS(T5CLK,3)
// T5CLK<T5CS4>
extern volatile __bit                   T5CS4               __at(0x1FCEC);	// @ (0x3F9D * 8 + 4)
#define                                 T5CS4_bit           _BIT_ACCESS(T5CLK,4)
// T5GCON<T5GE>
extern volatile __bit                   T5GE                __at(0x1FCDF);	// @ (0x3F9B * 8 + 7)
#define                                 T5GE_bit            _BIT_ACCESS(T5GCON,7)
// T5GCON<T5GGO>
extern volatile __bit                   T5GGO               __at(0x1FCDB);	// @ (0x3F9B * 8 + 3)
#define                                 T5GGO_bit           _BIT_ACCESS(T5GCON,3)
// T5GCON<T5GPOL>
extern volatile __bit                   T5GPOL              __at(0x1FCDE);	// @ (0x3F9B * 8 + 6)
#define                                 T5GPOL_bit          _BIT_ACCESS(T5GCON,6)
// T5GCON<T5GSPM>
extern volatile __bit                   T5GSPM              __at(0x1FCDC);	// @ (0x3F9B * 8 + 4)
#define                                 T5GSPM_bit          _BIT_ACCESS(T5GCON,4)
// T5GATE<T5GSS0>
extern volatile __bit                   T5GSS0              __at(0x1FCE0);	// @ (0x3F9C * 8 + 0)
#define                                 T5GSS0_bit          _BIT_ACCESS(T5GATE,0)
// T5GATE<T5GSS1>
extern volatile __bit                   T5GSS1              __at(0x1FCE1);	// @ (0x3F9C * 8 + 1)
#define                                 T5GSS1_bit          _BIT_ACCESS(T5GATE,1)
// T5GATE<T5GSS2>
extern volatile __bit                   T5GSS2              __at(0x1FCE2);	// @ (0x3F9C * 8 + 2)
#define                                 T5GSS2_bit          _BIT_ACCESS(T5GATE,2)
// T5GATE<T5GSS3>
extern volatile __bit                   T5GSS3              __at(0x1FCE3);	// @ (0x3F9C * 8 + 3)
#define                                 T5GSS3_bit          _BIT_ACCESS(T5GATE,3)
// T5GATE<T5GSS4>
extern volatile __bit                   T5GSS4              __at(0x1FCE4);	// @ (0x3F9C * 8 + 4)
#define                                 T5GSS4_bit          _BIT_ACCESS(T5GATE,4)
// T5GCON<T5GTM>
extern volatile __bit                   T5GTM               __at(0x1FCDD);	// @ (0x3F9B * 8 + 5)
#define                                 T5GTM_bit           _BIT_ACCESS(T5GCON,5)
// T5GCON<T5GVAL>
extern volatile __bit                   T5GVAL              __at(0x1FCDA);	// @ (0x3F9B * 8 + 2)
#define                                 T5GVAL_bit          _BIT_ACCESS(T5GCON,2)
// T5CON<T5RD16>
extern volatile __bit                   T5RD16              __at(0x1FCD1);	// @ (0x3F9A * 8 + 1)
#define                                 T5RD16_bit          _BIT_ACCESS(T5CON,1)
// T6HLT<T6CKPOL>
extern volatile __bit                   T6CKPOL             __at(0x1FCAE);	// @ (0x3F95 * 8 + 6)
#define                                 T6CKPOL_bit         _BIT_ACCESS(T6HLT,6)
// T6CON<T6CKPS0>
extern volatile __bit                   T6CKPS0             __at(0x1FCA4);	// @ (0x3F94 * 8 + 4)
#define                                 T6CKPS0_bit         _BIT_ACCESS(T6CON,4)
// T6CON<T6CKPS1>
extern volatile __bit                   T6CKPS1             __at(0x1FCA5);	// @ (0x3F94 * 8 + 5)
#define                                 T6CKPS1_bit         _BIT_ACCESS(T6CON,5)
// T6CON<T6CKPS2>
extern volatile __bit                   T6CKPS2             __at(0x1FCA6);	// @ (0x3F94 * 8 + 6)
#define                                 T6CKPS2_bit         _BIT_ACCESS(T6CON,6)
// T6HLT<T6CKSYNC>
extern volatile __bit                   T6CKSYNC            __at(0x1FCAD);	// @ (0x3F95 * 8 + 5)
#define                                 T6CKSYNC_bit        _BIT_ACCESS(T6HLT,5)
// T6CLKCON<T6CS0>
extern volatile __bit                   T6CS0               __at(0x1FCB0);	// @ (0x3F96 * 8 + 0)
#define                                 T6CS0_bit           _BIT_ACCESS(T6CLKCON,0)
// T6CLKCON<T6CS1>
extern volatile __bit                   T6CS1               __at(0x1FCB1);	// @ (0x3F96 * 8 + 1)
#define                                 T6CS1_bit           _BIT_ACCESS(T6CLKCON,1)
// T6CLKCON<T6CS2>
extern volatile __bit                   T6CS2               __at(0x1FCB2);	// @ (0x3F96 * 8 + 2)
#define                                 T6CS2_bit           _BIT_ACCESS(T6CLKCON,2)
// T6CLKCON<T6CS3>
extern volatile __bit                   T6CS3               __at(0x1FCB3);	// @ (0x3F96 * 8 + 3)
#define                                 T6CS3_bit           _BIT_ACCESS(T6CLKCON,3)
// T6HLT<T6MODE0>
extern volatile __bit                   T6MODE0             __at(0x1FCA8);	// @ (0x3F95 * 8 + 0)
#define                                 T6MODE0_bit         _BIT_ACCESS(T6HLT,0)
// T6HLT<T6MODE1>
extern volatile __bit                   T6MODE1             __at(0x1FCA9);	// @ (0x3F95 * 8 + 1)
#define                                 T6MODE1_bit         _BIT_ACCESS(T6HLT,1)
// T6HLT<T6MODE2>
extern volatile __bit                   T6MODE2             __at(0x1FCAA);	// @ (0x3F95 * 8 + 2)
#define                                 T6MODE2_bit         _BIT_ACCESS(T6HLT,2)
// T6HLT<T6MODE3>
extern volatile __bit                   T6MODE3             __at(0x1FCAB);	// @ (0x3F95 * 8 + 3)
#define                                 T6MODE3_bit         _BIT_ACCESS(T6HLT,3)
// T6HLT<T6MODE4>
extern volatile __bit                   T6MODE4             __at(0x1FCAC);	// @ (0x3F95 * 8 + 4)
#define                                 T6MODE4_bit         _BIT_ACCESS(T6HLT,4)
// T6CON<T6ON>
extern volatile __bit                   T6ON                __at(0x1FCA7);	// @ (0x3F94 * 8 + 7)
#define                                 T6ON_bit            _BIT_ACCESS(T6CON,7)
// T6CON<T6OUTPS0>
extern volatile __bit                   T6OUTPS0            __at(0x1FCA0);	// @ (0x3F94 * 8 + 0)
#define                                 T6OUTPS0_bit        _BIT_ACCESS(T6CON,0)
// T6CON<T6OUTPS1>
extern volatile __bit                   T6OUTPS1            __at(0x1FCA1);	// @ (0x3F94 * 8 + 1)
#define                                 T6OUTPS1_bit        _BIT_ACCESS(T6CON,1)
// T6CON<T6OUTPS2>
extern volatile __bit                   T6OUTPS2            __at(0x1FCA2);	// @ (0x3F94 * 8 + 2)
#define                                 T6OUTPS2_bit        _BIT_ACCESS(T6CON,2)
// T6CON<T6OUTPS3>
extern volatile __bit                   T6OUTPS3            __at(0x1FCA3);	// @ (0x3F94 * 8 + 3)
#define                                 T6OUTPS3_bit        _BIT_ACCESS(T6CON,3)
// T6HLT<T6PSYNC>
extern volatile __bit                   T6PSYNC             __at(0x1FCAF);	// @ (0x3F95 * 8 + 7)
#define                                 T6PSYNC_bit         _BIT_ACCESS(T6HLT,7)
// T6RST<T6RSEL0>
extern volatile __bit                   T6RSEL0             __at(0x1FCB8);	// @ (0x3F97 * 8 + 0)
#define                                 T6RSEL0_bit         _BIT_ACCESS(T6RST,0)
// T6RST<T6RSEL1>
extern volatile __bit                   T6RSEL1             __at(0x1FCB9);	// @ (0x3F97 * 8 + 1)
#define                                 T6RSEL1_bit         _BIT_ACCESS(T6RST,1)
// T6RST<T6RSEL2>
extern volatile __bit                   T6RSEL2             __at(0x1FCBA);	// @ (0x3F97 * 8 + 2)
#define                                 T6RSEL2_bit         _BIT_ACCESS(T6RST,2)
// T6RST<T6RSEL3>
extern volatile __bit                   T6RSEL3             __at(0x1FCBB);	// @ (0x3F97 * 8 + 3)
#define                                 T6RSEL3_bit         _BIT_ACCESS(T6RST,3)
// T6RST<T6RSEL4>
extern volatile __bit                   T6RSEL4             __at(0x1FCBC);	// @ (0x3F97 * 8 + 4)
#define                                 T6RSEL4_bit         _BIT_ACCESS(T6RST,4)
// SPI1INTE<TCZIE>
extern volatile __bit                   TCZIE               __at(0x1E8DE);	// @ (0x3D1B * 8 + 6)
#define                                 TCZIE_bit           _BIT_ACCESS(SPI1INTE,6)
// SPI1INTF<TCZIF>
extern volatile __bit                   TCZIF               __at(0x1E8D6);	// @ (0x3D1A * 8 + 6)
#define                                 TCZIF_bit           _BIT_ACCESS(SPI1INTF,6)
// ADCON3<TMD0>
extern volatile __bit                   TMD0                __at(0x1F7D8);	// @ (0x3EFB * 8 + 0)
#define                                 TMD0_bit            _BIT_ACCESS(ADCON3,0)
// ADCON3<TMD1>
extern volatile __bit                   TMD1                __at(0x1F7D9);	// @ (0x3EFB * 8 + 1)
#define                                 TMD1_bit            _BIT_ACCESS(ADCON3,1)
// ADCON3<TMD2>
extern volatile __bit                   TMD2                __at(0x1F7DA);	// @ (0x3EFB * 8 + 2)
#define                                 TMD2_bit            _BIT_ACCESS(ADCON3,2)
// TMR0H<TMR0H0>
extern volatile __bit                   TMR0H0              __at(0x1FDB8);	// @ (0x3FB7 * 8 + 0)
#define                                 TMR0H0_bit          _BIT_ACCESS(TMR0H,0)
// TMR0H<TMR0H1>
extern volatile __bit                   TMR0H1              __at(0x1FDB9);	// @ (0x3FB7 * 8 + 1)
#define                                 TMR0H1_bit          _BIT_ACCESS(TMR0H,1)
// TMR0H<TMR0H2>
extern volatile __bit                   TMR0H2              __at(0x1FDBA);	// @ (0x3FB7 * 8 + 2)
#define                                 TMR0H2_bit          _BIT_ACCESS(TMR0H,2)
// TMR0H<TMR0H3>
extern volatile __bit                   TMR0H3              __at(0x1FDBB);	// @ (0x3FB7 * 8 + 3)
#define                                 TMR0H3_bit          _BIT_ACCESS(TMR0H,3)
// TMR0H<TMR0H4>
extern volatile __bit                   TMR0H4              __at(0x1FDBC);	// @ (0x3FB7 * 8 + 4)
#define                                 TMR0H4_bit          _BIT_ACCESS(TMR0H,4)
// TMR0H<TMR0H5>
extern volatile __bit                   TMR0H5              __at(0x1FDBD);	// @ (0x3FB7 * 8 + 5)
#define                                 TMR0H5_bit          _BIT_ACCESS(TMR0H,5)
// TMR0H<TMR0H6>
extern volatile __bit                   TMR0H6              __at(0x1FDBE);	// @ (0x3FB7 * 8 + 6)
#define                                 TMR0H6_bit          _BIT_ACCESS(TMR0H,6)
// TMR0H<TMR0H7>
extern volatile __bit                   TMR0H7              __at(0x1FDBF);	// @ (0x3FB7 * 8 + 7)
#define                                 TMR0H7_bit          _BIT_ACCESS(TMR0H,7)
// PIE3<TMR0IE>
extern volatile __bit                   TMR0IE              __at(0x1CC9F);	// @ (0x3993 * 8 + 7)
#define                                 TMR0IE_bit          _BIT_ACCESS(PIE3,7)
// PIR3<TMR0IF>
extern volatile __bit                   TMR0IF              __at(0x1CD1F);	// @ (0x39A3 * 8 + 7)
#define                                 TMR0IF_bit          _BIT_ACCESS(PIR3,7)
// IPR3<TMR0IP>
extern volatile __bit                   TMR0IP              __at(0x1CC1F);	// @ (0x3983 * 8 + 7)
#define                                 TMR0IP_bit          _BIT_ACCESS(IPR3,7)
// TMR0L<TMR0L0>
extern volatile __bit                   TMR0L0              __at(0x1FDB0);	// @ (0x3FB6 * 8 + 0)
#define                                 TMR0L0_bit          _BIT_ACCESS(TMR0L,0)
// TMR0L<TMR0L1>
extern volatile __bit                   TMR0L1              __at(0x1FDB1);	// @ (0x3FB6 * 8 + 1)
#define                                 TMR0L1_bit          _BIT_ACCESS(TMR0L,1)
// TMR0L<TMR0L2>
extern volatile __bit                   TMR0L2              __at(0x1FDB2);	// @ (0x3FB6 * 8 + 2)
#define                                 TMR0L2_bit          _BIT_ACCESS(TMR0L,2)
// TMR0L<TMR0L3>
extern volatile __bit                   TMR0L3              __at(0x1FDB3);	// @ (0x3FB6 * 8 + 3)
#define                                 TMR0L3_bit          _BIT_ACCESS(TMR0L,3)
// TMR0L<TMR0L4>
extern volatile __bit                   TMR0L4              __at(0x1FDB4);	// @ (0x3FB6 * 8 + 4)
#define                                 TMR0L4_bit          _BIT_ACCESS(TMR0L,4)
// TMR0L<TMR0L5>
extern volatile __bit                   TMR0L5              __at(0x1FDB5);	// @ (0x3FB6 * 8 + 5)
#define                                 TMR0L5_bit          _BIT_ACCESS(TMR0L,5)
// TMR0L<TMR0L6>
extern volatile __bit                   TMR0L6              __at(0x1FDB6);	// @ (0x3FB6 * 8 + 6)
#define                                 TMR0L6_bit          _BIT_ACCESS(TMR0L,6)
// TMR0L<TMR0L7>
extern volatile __bit                   TMR0L7              __at(0x1FDB7);	// @ (0x3FB6 * 8 + 7)
#define                                 TMR0L7_bit          _BIT_ACCESS(TMR0L,7)
// PMD1<TMR0MD>
extern volatile __bit                   TMR0MD              __at(0x1CE08);	// @ (0x39C1 * 8 + 0)
#define                                 TMR0MD_bit          _BIT_ACCESS(PMD1,0)
// SMT1TMRL<TMR1>
extern volatile __bit                   TMR1                __at(0x1F891);	// @ (0x3F12 * 8 + 1)
#define                                 TMR1_bit            _BIT_ACCESS(SMT1TMRL,1)
// SMT1TMRH<TMR10>
extern volatile __bit                   TMR10               __at(0x1F89A);	// @ (0x3F13 * 8 + 2)
#define                                 TMR10_bit           _BIT_ACCESS(SMT1TMRH,2)
// SMT1TMRH<TMR11>
extern volatile __bit                   TMR11               __at(0x1F89B);	// @ (0x3F13 * 8 + 3)
#define                                 TMR11_bit           _BIT_ACCESS(SMT1TMRH,3)
// SMT1TMRH<TMR12>
extern volatile __bit                   TMR12               __at(0x1F89C);	// @ (0x3F13 * 8 + 4)
#define                                 TMR12_bit           _BIT_ACCESS(SMT1TMRH,4)
// SMT1TMRH<TMR13>
extern volatile __bit                   TMR13               __at(0x1F89D);	// @ (0x3F13 * 8 + 5)
#define                                 TMR13_bit           _BIT_ACCESS(SMT1TMRH,5)
// SMT1TMRH<TMR14>
extern volatile __bit                   TMR14               __at(0x1F89E);	// @ (0x3F13 * 8 + 6)
#define                                 TMR14_bit           _BIT_ACCESS(SMT1TMRH,6)
// SMT1TMRH<TMR15>
extern volatile __bit                   TMR15               __at(0x1F89F);	// @ (0x3F13 * 8 + 7)
#define                                 TMR15_bit           _BIT_ACCESS(SMT1TMRH,7)
// SMT1TMRU<TMR16>
extern volatile __bit                   TMR16               __at(0x1F8A0);	// @ (0x3F14 * 8 + 0)
#define                                 TMR16_bit           _BIT_ACCESS(SMT1TMRU,0)
// SMT1TMRU<TMR17>
extern volatile __bit                   TMR17               __at(0x1F8A1);	// @ (0x3F14 * 8 + 1)
#define                                 TMR17_bit           _BIT_ACCESS(SMT1TMRU,1)
// SMT1TMRU<TMR18>
extern volatile __bit                   TMR18               __at(0x1F8A2);	// @ (0x3F14 * 8 + 2)
#define                                 TMR18_bit           _BIT_ACCESS(SMT1TMRU,2)
// SMT1TMRU<TMR19>
extern volatile __bit                   TMR19               __at(0x1F8A3);	// @ (0x3F14 * 8 + 3)
#define                                 TMR19_bit           _BIT_ACCESS(SMT1TMRU,3)
// PIE4<TMR1GIE>
extern volatile __bit                   TMR1GIE             __at(0x1CCA1);	// @ (0x3994 * 8 + 1)
#define                                 TMR1GIE_bit         _BIT_ACCESS(PIE4,1)
// PIR4<TMR1GIF>
extern volatile __bit                   TMR1GIF             __at(0x1CD21);	// @ (0x39A4 * 8 + 1)
#define                                 TMR1GIF_bit         _BIT_ACCESS(PIR4,1)
// IPR4<TMR1GIP>
extern volatile __bit                   TMR1GIP             __at(0x1CC21);	// @ (0x3984 * 8 + 1)
#define                                 TMR1GIP_bit         _BIT_ACCESS(IPR4,1)
// TMR1H<TMR1H0>
extern volatile __bit                   TMR1H0              __at(0x1FD88);	// @ (0x3FB1 * 8 + 0)
#define                                 TMR1H0_bit          _BIT_ACCESS(TMR1H,0)
// TMR1H<TMR1H1>
extern volatile __bit                   TMR1H1              __at(0x1FD89);	// @ (0x3FB1 * 8 + 1)
#define                                 TMR1H1_bit          _BIT_ACCESS(TMR1H,1)
// TMR1H<TMR1H2>
extern volatile __bit                   TMR1H2              __at(0x1FD8A);	// @ (0x3FB1 * 8 + 2)
#define                                 TMR1H2_bit          _BIT_ACCESS(TMR1H,2)
// TMR1H<TMR1H3>
extern volatile __bit                   TMR1H3              __at(0x1FD8B);	// @ (0x3FB1 * 8 + 3)
#define                                 TMR1H3_bit          _BIT_ACCESS(TMR1H,3)
// TMR1H<TMR1H4>
extern volatile __bit                   TMR1H4              __at(0x1FD8C);	// @ (0x3FB1 * 8 + 4)
#define                                 TMR1H4_bit          _BIT_ACCESS(TMR1H,4)
// TMR1H<TMR1H5>
extern volatile __bit                   TMR1H5              __at(0x1FD8D);	// @ (0x3FB1 * 8 + 5)
#define                                 TMR1H5_bit          _BIT_ACCESS(TMR1H,5)
// TMR1H<TMR1H6>
extern volatile __bit                   TMR1H6              __at(0x1FD8E);	// @ (0x3FB1 * 8 + 6)
#define                                 TMR1H6_bit          _BIT_ACCESS(TMR1H,6)
// TMR1H<TMR1H7>
extern volatile __bit                   TMR1H7              __at(0x1FD8F);	// @ (0x3FB1 * 8 + 7)
#define                                 TMR1H7_bit          _BIT_ACCESS(TMR1H,7)
// PIE4<TMR1IE>
extern volatile __bit                   TMR1IE              __at(0x1CCA0);	// @ (0x3994 * 8 + 0)
#define                                 TMR1IE_bit          _BIT_ACCESS(PIE4,0)
// PIR4<TMR1IF>
extern volatile __bit                   TMR1IF              __at(0x1CD20);	// @ (0x39A4 * 8 + 0)
#define                                 TMR1IF_bit          _BIT_ACCESS(PIR4,0)
// IPR4<TMR1IP>
extern volatile __bit                   TMR1IP              __at(0x1CC20);	// @ (0x3984 * 8 + 0)
#define                                 TMR1IP_bit          _BIT_ACCESS(IPR4,0)
// TMR1L<TMR1L0>
extern volatile __bit                   TMR1L0              __at(0x1FD80);	// @ (0x3FB0 * 8 + 0)
#define                                 TMR1L0_bit          _BIT_ACCESS(TMR1L,0)
// TMR1L<TMR1L1>
extern volatile __bit                   TMR1L1              __at(0x1FD81);	// @ (0x3FB0 * 8 + 1)
#define                                 TMR1L1_bit          _BIT_ACCESS(TMR1L,1)
// TMR1L<TMR1L2>
extern volatile __bit                   TMR1L2              __at(0x1FD82);	// @ (0x3FB0 * 8 + 2)
#define                                 TMR1L2_bit          _BIT_ACCESS(TMR1L,2)
// TMR1L<TMR1L3>
extern volatile __bit                   TMR1L3              __at(0x1FD83);	// @ (0x3FB0 * 8 + 3)
#define                                 TMR1L3_bit          _BIT_ACCESS(TMR1L,3)
// TMR1L<TMR1L4>
extern volatile __bit                   TMR1L4              __at(0x1FD84);	// @ (0x3FB0 * 8 + 4)
#define                                 TMR1L4_bit          _BIT_ACCESS(TMR1L,4)
// TMR1L<TMR1L5>
extern volatile __bit                   TMR1L5              __at(0x1FD85);	// @ (0x3FB0 * 8 + 5)
#define                                 TMR1L5_bit          _BIT_ACCESS(TMR1L,5)
// TMR1L<TMR1L6>
extern volatile __bit                   TMR1L6              __at(0x1FD86);	// @ (0x3FB0 * 8 + 6)
#define                                 TMR1L6_bit          _BIT_ACCESS(TMR1L,6)
// TMR1L<TMR1L7>
extern volatile __bit                   TMR1L7              __at(0x1FD87);	// @ (0x3FB0 * 8 + 7)
#define                                 TMR1L7_bit          _BIT_ACCESS(TMR1L,7)
// PMD1<TMR1MD>
extern volatile __bit                   TMR1MD              __at(0x1CE09);	// @ (0x39C1 * 8 + 1)
#define                                 TMR1MD_bit          _BIT_ACCESS(PMD1,1)
// T1CON<TMR1ON>
extern volatile __bit                   TMR1ON              __at(0x1FD90);	// @ (0x3FB2 * 8 + 0)
#define                                 TMR1ON_bit          _BIT_ACCESS(T1CON,0)
// SMT1TMRU<TMR20>
extern volatile __bit                   TMR20               __at(0x1F8A4);	// @ (0x3F14 * 8 + 4)
#define                                 TMR20_bit           _BIT_ACCESS(SMT1TMRU,4)
// SMT1TMRU<TMR21>
extern volatile __bit                   TMR21               __at(0x1F8A5);	// @ (0x3F14 * 8 + 5)
#define                                 TMR21_bit           _BIT_ACCESS(SMT1TMRU,5)
// SMT1TMRU<TMR22>
extern volatile __bit                   TMR22               __at(0x1F8A6);	// @ (0x3F14 * 8 + 6)
#define                                 TMR22_bit           _BIT_ACCESS(SMT1TMRU,6)
// SMT1TMRU<TMR23>
extern volatile __bit                   TMR23               __at(0x1F8A7);	// @ (0x3F14 * 8 + 7)
#define                                 TMR23_bit           _BIT_ACCESS(SMT1TMRU,7)
// PIE4<TMR2IE>
extern volatile __bit                   TMR2IE              __at(0x1CCA2);	// @ (0x3994 * 8 + 2)
#define                                 TMR2IE_bit          _BIT_ACCESS(PIE4,2)
// PIR4<TMR2IF>
extern volatile __bit                   TMR2IF              __at(0x1CD22);	// @ (0x39A4 * 8 + 2)
#define                                 TMR2IF_bit          _BIT_ACCESS(PIR4,2)
// IPR4<TMR2IP>
extern volatile __bit                   TMR2IP              __at(0x1CC22);	// @ (0x3984 * 8 + 2)
#define                                 TMR2IP_bit          _BIT_ACCESS(IPR4,2)
// PMD1<TMR2MD>
extern volatile __bit                   TMR2MD              __at(0x1CE0A);	// @ (0x39C1 * 8 + 2)
#define                                 TMR2MD_bit          _BIT_ACCESS(PMD1,2)
// T2CON<TMR2ON>
extern volatile __bit                   TMR2ON              __at(0x1FD67);	// @ (0x3FAC * 8 + 7)
#define                                 TMR2ON_bit          _BIT_ACCESS(T2CON,7)
// SMT1TMRL<TMR3>
extern volatile __bit                   TMR3                __at(0x1F893);	// @ (0x3F12 * 8 + 3)
#define                                 TMR3_bit            _BIT_ACCESS(SMT1TMRL,3)
// PIE6<TMR3GIE>
extern volatile __bit                   TMR3GIE             __at(0x1CCB7);	// @ (0x3996 * 8 + 7)
#define                                 TMR3GIE_bit         _BIT_ACCESS(PIE6,7)
// PIR6<TMR3GIF>
extern volatile __bit                   TMR3GIF             __at(0x1CD37);	// @ (0x39A6 * 8 + 7)
#define                                 TMR3GIF_bit         _BIT_ACCESS(PIR6,7)
// IPR6<TMR3GIP>
extern volatile __bit                   TMR3GIP             __at(0x1CC37);	// @ (0x3986 * 8 + 7)
#define                                 TMR3GIP_bit         _BIT_ACCESS(IPR6,7)
// TMR3H<TMR3H0>
extern volatile __bit                   TMR3H0              __at(0x1FD28);	// @ (0x3FA5 * 8 + 0)
#define                                 TMR3H0_bit          _BIT_ACCESS(TMR3H,0)
// TMR3H<TMR3H1>
extern volatile __bit                   TMR3H1              __at(0x1FD29);	// @ (0x3FA5 * 8 + 1)
#define                                 TMR3H1_bit          _BIT_ACCESS(TMR3H,1)
// TMR3H<TMR3H2>
extern volatile __bit                   TMR3H2              __at(0x1FD2A);	// @ (0x3FA5 * 8 + 2)
#define                                 TMR3H2_bit          _BIT_ACCESS(TMR3H,2)
// TMR3H<TMR3H3>
extern volatile __bit                   TMR3H3              __at(0x1FD2B);	// @ (0x3FA5 * 8 + 3)
#define                                 TMR3H3_bit          _BIT_ACCESS(TMR3H,3)
// TMR3H<TMR3H4>
extern volatile __bit                   TMR3H4              __at(0x1FD2C);	// @ (0x3FA5 * 8 + 4)
#define                                 TMR3H4_bit          _BIT_ACCESS(TMR3H,4)
// TMR3H<TMR3H5>
extern volatile __bit                   TMR3H5              __at(0x1FD2D);	// @ (0x3FA5 * 8 + 5)
#define                                 TMR3H5_bit          _BIT_ACCESS(TMR3H,5)
// TMR3H<TMR3H6>
extern volatile __bit                   TMR3H6              __at(0x1FD2E);	// @ (0x3FA5 * 8 + 6)
#define                                 TMR3H6_bit          _BIT_ACCESS(TMR3H,6)
// TMR3H<TMR3H7>
extern volatile __bit                   TMR3H7              __at(0x1FD2F);	// @ (0x3FA5 * 8 + 7)
#define                                 TMR3H7_bit          _BIT_ACCESS(TMR3H,7)
// PIE6<TMR3IE>
extern volatile __bit                   TMR3IE              __at(0x1CCB6);	// @ (0x3996 * 8 + 6)
#define                                 TMR3IE_bit          _BIT_ACCESS(PIE6,6)
// PIR6<TMR3IF>
extern volatile __bit                   TMR3IF              __at(0x1CD36);	// @ (0x39A6 * 8 + 6)
#define                                 TMR3IF_bit          _BIT_ACCESS(PIR6,6)
// IPR6<TMR3IP>
extern volatile __bit                   TMR3IP              __at(0x1CC36);	// @ (0x3986 * 8 + 6)
#define                                 TMR3IP_bit          _BIT_ACCESS(IPR6,6)
// TMR3L<TMR3L0>
extern volatile __bit                   TMR3L0              __at(0x1FD20);	// @ (0x3FA4 * 8 + 0)
#define                                 TMR3L0_bit          _BIT_ACCESS(TMR3L,0)
// TMR3L<TMR3L1>
extern volatile __bit                   TMR3L1              __at(0x1FD21);	// @ (0x3FA4 * 8 + 1)
#define                                 TMR3L1_bit          _BIT_ACCESS(TMR3L,1)
// TMR3L<TMR3L2>
extern volatile __bit                   TMR3L2              __at(0x1FD22);	// @ (0x3FA4 * 8 + 2)
#define                                 TMR3L2_bit          _BIT_ACCESS(TMR3L,2)
// TMR3L<TMR3L3>
extern volatile __bit                   TMR3L3              __at(0x1FD23);	// @ (0x3FA4 * 8 + 3)
#define                                 TMR3L3_bit          _BIT_ACCESS(TMR3L,3)
// TMR3L<TMR3L4>
extern volatile __bit                   TMR3L4              __at(0x1FD24);	// @ (0x3FA4 * 8 + 4)
#define                                 TMR3L4_bit          _BIT_ACCESS(TMR3L,4)
// TMR3L<TMR3L5>
extern volatile __bit                   TMR3L5              __at(0x1FD25);	// @ (0x3FA4 * 8 + 5)
#define                                 TMR3L5_bit          _BIT_ACCESS(TMR3L,5)
// TMR3L<TMR3L6>
extern volatile __bit                   TMR3L6              __at(0x1FD26);	// @ (0x3FA4 * 8 + 6)
#define                                 TMR3L6_bit          _BIT_ACCESS(TMR3L,6)
// TMR3L<TMR3L7>
extern volatile __bit                   TMR3L7              __at(0x1FD27);	// @ (0x3FA4 * 8 + 7)
#define                                 TMR3L7_bit          _BIT_ACCESS(TMR3L,7)
// PMD1<TMR3MD>
extern volatile __bit                   TMR3MD              __at(0x1CE0B);	// @ (0x39C1 * 8 + 3)
#define                                 TMR3MD_bit          _BIT_ACCESS(PMD1,3)
// T3CON<TMR3ON>
extern volatile __bit                   TMR3ON              __at(0x1FD30);	// @ (0x3FA6 * 8 + 0)
#define                                 TMR3ON_bit          _BIT_ACCESS(T3CON,0)
// PIE7<TMR4IE>
extern volatile __bit                   TMR4IE              __at(0x1CCB8);	// @ (0x3997 * 8 + 0)
#define                                 TMR4IE_bit          _BIT_ACCESS(PIE7,0)
// PIR7<TMR4IF>
extern volatile __bit                   TMR4IF              __at(0x1CD38);	// @ (0x39A7 * 8 + 0)
#define                                 TMR4IF_bit          _BIT_ACCESS(PIR7,0)
// IPR7<TMR4IP>
extern volatile __bit                   TMR4IP              __at(0x1CC38);	// @ (0x3987 * 8 + 0)
#define                                 TMR4IP_bit          _BIT_ACCESS(IPR7,0)
// PMD1<TMR4MD>
extern volatile __bit                   TMR4MD              __at(0x1CE0C);	// @ (0x39C1 * 8 + 4)
#define                                 TMR4MD_bit          _BIT_ACCESS(PMD1,4)
// T4CON<TMR4ON>
extern volatile __bit                   TMR4ON              __at(0x1FD07);	// @ (0x3FA0 * 8 + 7)
#define                                 TMR4ON_bit          _BIT_ACCESS(T4CON,7)
// SMT1TMRL<TMR5>
extern volatile __bit                   TMR5                __at(0x1F895);	// @ (0x3F12 * 8 + 5)
#define                                 TMR5_bit            _BIT_ACCESS(SMT1TMRL,5)
// PIE8<TMR5GIE>
extern volatile __bit                   TMR5GIE             __at(0x1CCC7);	// @ (0x3998 * 8 + 7)
#define                                 TMR5GIE_bit         _BIT_ACCESS(PIE8,7)
// PIR8<TMR5GIF>
extern volatile __bit                   TMR5GIF             __at(0x1CD47);	// @ (0x39A8 * 8 + 7)
#define                                 TMR5GIF_bit         _BIT_ACCESS(PIR8,7)
// IPR8<TMR5GIP>
extern volatile __bit                   TMR5GIP             __at(0x1CC47);	// @ (0x3988 * 8 + 7)
#define                                 TMR5GIP_bit         _BIT_ACCESS(IPR8,7)
// TMR5H<TMR5H0>
extern volatile __bit                   TMR5H0              __at(0x1FCC8);	// @ (0x3F99 * 8 + 0)
#define                                 TMR5H0_bit          _BIT_ACCESS(TMR5H,0)
// TMR5H<TMR5H1>
extern volatile __bit                   TMR5H1              __at(0x1FCC9);	// @ (0x3F99 * 8 + 1)
#define                                 TMR5H1_bit          _BIT_ACCESS(TMR5H,1)
// TMR5H<TMR5H2>
extern volatile __bit                   TMR5H2              __at(0x1FCCA);	// @ (0x3F99 * 8 + 2)
#define                                 TMR5H2_bit          _BIT_ACCESS(TMR5H,2)
// TMR5H<TMR5H3>
extern volatile __bit                   TMR5H3              __at(0x1FCCB);	// @ (0x3F99 * 8 + 3)
#define                                 TMR5H3_bit          _BIT_ACCESS(TMR5H,3)
// TMR5H<TMR5H4>
extern volatile __bit                   TMR5H4              __at(0x1FCCC);	// @ (0x3F99 * 8 + 4)
#define                                 TMR5H4_bit          _BIT_ACCESS(TMR5H,4)
// TMR5H<TMR5H5>
extern volatile __bit                   TMR5H5              __at(0x1FCCD);	// @ (0x3F99 * 8 + 5)
#define                                 TMR5H5_bit          _BIT_ACCESS(TMR5H,5)
// TMR5H<TMR5H6>
extern volatile __bit                   TMR5H6              __at(0x1FCCE);	// @ (0x3F99 * 8 + 6)
#define                                 TMR5H6_bit          _BIT_ACCESS(TMR5H,6)
// TMR5H<TMR5H7>
extern volatile __bit                   TMR5H7              __at(0x1FCCF);	// @ (0x3F99 * 8 + 7)
#define                                 TMR5H7_bit          _BIT_ACCESS(TMR5H,7)
// PIE8<TMR5IE>
extern volatile __bit                   TMR5IE              __at(0x1CCC6);	// @ (0x3998 * 8 + 6)
#define                                 TMR5IE_bit          _BIT_ACCESS(PIE8,6)
// PIR8<TMR5IF>
extern volatile __bit                   TMR5IF              __at(0x1CD46);	// @ (0x39A8 * 8 + 6)
#define                                 TMR5IF_bit          _BIT_ACCESS(PIR8,6)
// IPR8<TMR5IP>
extern volatile __bit                   TMR5IP              __at(0x1CC46);	// @ (0x3988 * 8 + 6)
#define                                 TMR5IP_bit          _BIT_ACCESS(IPR8,6)
// TMR5L<TMR5L0>
extern volatile __bit                   TMR5L0              __at(0x1FCC0);	// @ (0x3F98 * 8 + 0)
#define                                 TMR5L0_bit          _BIT_ACCESS(TMR5L,0)
// TMR5L<TMR5L1>
extern volatile __bit                   TMR5L1              __at(0x1FCC1);	// @ (0x3F98 * 8 + 1)
#define                                 TMR5L1_bit          _BIT_ACCESS(TMR5L,1)
// TMR5L<TMR5L2>
extern volatile __bit                   TMR5L2              __at(0x1FCC2);	// @ (0x3F98 * 8 + 2)
#define                                 TMR5L2_bit          _BIT_ACCESS(TMR5L,2)
// TMR5L<TMR5L3>
extern volatile __bit                   TMR5L3              __at(0x1FCC3);	// @ (0x3F98 * 8 + 3)
#define                                 TMR5L3_bit          _BIT_ACCESS(TMR5L,3)
// TMR5L<TMR5L4>
extern volatile __bit                   TMR5L4              __at(0x1FCC4);	// @ (0x3F98 * 8 + 4)
#define                                 TMR5L4_bit          _BIT_ACCESS(TMR5L,4)
// TMR5L<TMR5L5>
extern volatile __bit                   TMR5L5              __at(0x1FCC5);	// @ (0x3F98 * 8 + 5)
#define                                 TMR5L5_bit          _BIT_ACCESS(TMR5L,5)
// TMR5L<TMR5L6>
extern volatile __bit                   TMR5L6              __at(0x1FCC6);	// @ (0x3F98 * 8 + 6)
#define                                 TMR5L6_bit          _BIT_ACCESS(TMR5L,6)
// TMR5L<TMR5L7>
extern volatile __bit                   TMR5L7              __at(0x1FCC7);	// @ (0x3F98 * 8 + 7)
#define                                 TMR5L7_bit          _BIT_ACCESS(TMR5L,7)
// PMD1<TMR5MD>
extern volatile __bit                   TMR5MD              __at(0x1CE0D);	// @ (0x39C1 * 8 + 5)
#define                                 TMR5MD_bit          _BIT_ACCESS(PMD1,5)
// T5CON<TMR5ON>
extern volatile __bit                   TMR5ON              __at(0x1FCD0);	// @ (0x3F9A * 8 + 0)
#define                                 TMR5ON_bit          _BIT_ACCESS(T5CON,0)
// PIE9<TMR6IE>
extern volatile __bit                   TMR6IE              __at(0x1CCC8);	// @ (0x3999 * 8 + 0)
#define                                 TMR6IE_bit          _BIT_ACCESS(PIE9,0)
// PIR9<TMR6IF>
extern volatile __bit                   TMR6IF              __at(0x1CD48);	// @ (0x39A9 * 8 + 0)
#define                                 TMR6IF_bit          _BIT_ACCESS(PIR9,0)
// IPR9<TMR6IP>
extern volatile __bit                   TMR6IP              __at(0x1CC48);	// @ (0x3989 * 8 + 0)
#define                                 TMR6IP_bit          _BIT_ACCESS(IPR9,0)
// PMD1<TMR6MD>
extern volatile __bit                   TMR6MD              __at(0x1CE0E);	// @ (0x39C1 * 8 + 6)
#define                                 TMR6MD_bit          _BIT_ACCESS(PMD1,6)
// T6CON<TMR6ON>
extern volatile __bit                   TMR6ON              __at(0x1FCA7);	// @ (0x3F94 * 8 + 7)
#define                                 TMR6ON_bit          _BIT_ACCESS(T6CON,7)
// SMT1TMRL<TMR7>
extern volatile __bit                   TMR7                __at(0x1F897);	// @ (0x3F12 * 8 + 7)
#define                                 TMR7_bit            _BIT_ACCESS(SMT1TMRL,7)
// SMT1TMRH<TMR8>
extern volatile __bit                   TMR8                __at(0x1F898);	// @ (0x3F13 * 8 + 0)
#define                                 TMR8_bit            _BIT_ACCESS(SMT1TMRH,0)
// SMT1TMRH<TMR9>
extern volatile __bit                   TMR9                __at(0x1F899);	// @ (0x3F13 * 8 + 1)
#define                                 TMR9_bit            _BIT_ACCESS(SMT1TMRH,1)
// SCANCON0<TRIGEN>
extern volatile __bit                   TRIGEN              __at(0x1CBE6);	// @ (0x397C * 8 + 6)
#define                                 TRIGEN_bit          _BIT_ACCESS(SCANCON0,6)
// TRISA<TRISA0>
extern volatile __bit                   TRISA0              __at(0x1FE10);	// @ (0x3FC2 * 8 + 0)
#define                                 TRISA0_bit          _BIT_ACCESS(TRISA,0)
// TRISA<TRISA1>
extern volatile __bit                   TRISA1              __at(0x1FE11);	// @ (0x3FC2 * 8 + 1)
#define                                 TRISA1_bit          _BIT_ACCESS(TRISA,1)
// TRISA<TRISA2>
extern volatile __bit                   TRISA2              __at(0x1FE12);	// @ (0x3FC2 * 8 + 2)
#define                                 TRISA2_bit          _BIT_ACCESS(TRISA,2)
// TRISA<TRISA3>
extern volatile __bit                   TRISA3              __at(0x1FE13);	// @ (0x3FC2 * 8 + 3)
#define                                 TRISA3_bit          _BIT_ACCESS(TRISA,3)
// TRISA<TRISA4>
extern volatile __bit                   TRISA4              __at(0x1FE14);	// @ (0x3FC2 * 8 + 4)
#define                                 TRISA4_bit          _BIT_ACCESS(TRISA,4)
// TRISA<TRISA5>
extern volatile __bit                   TRISA5              __at(0x1FE15);	// @ (0x3FC2 * 8 + 5)
#define                                 TRISA5_bit          _BIT_ACCESS(TRISA,5)
// TRISA<TRISA6>
extern volatile __bit                   TRISA6              __at(0x1FE16);	// @ (0x3FC2 * 8 + 6)
#define                                 TRISA6_bit          _BIT_ACCESS(TRISA,6)
// TRISA<TRISA7>
extern volatile __bit                   TRISA7              __at(0x1FE17);	// @ (0x3FC2 * 8 + 7)
#define                                 TRISA7_bit          _BIT_ACCESS(TRISA,7)
// TRISB<TRISB0>
extern volatile __bit                   TRISB0              __at(0x1FE18);	// @ (0x3FC3 * 8 + 0)
#define                                 TRISB0_bit          _BIT_ACCESS(TRISB,0)
// TRISB<TRISB1>
extern volatile __bit                   TRISB1              __at(0x1FE19);	// @ (0x3FC3 * 8 + 1)
#define                                 TRISB1_bit          _BIT_ACCESS(TRISB,1)
// TRISB<TRISB2>
extern volatile __bit                   TRISB2              __at(0x1FE1A);	// @ (0x3FC3 * 8 + 2)
#define                                 TRISB2_bit          _BIT_ACCESS(TRISB,2)
// TRISB<TRISB3>
extern volatile __bit                   TRISB3              __at(0x1FE1B);	// @ (0x3FC3 * 8 + 3)
#define                                 TRISB3_bit          _BIT_ACCESS(TRISB,3)
// TRISB<TRISB4>
extern volatile __bit                   TRISB4              __at(0x1FE1C);	// @ (0x3FC3 * 8 + 4)
#define                                 TRISB4_bit          _BIT_ACCESS(TRISB,4)
// TRISB<TRISB5>
extern volatile __bit                   TRISB5              __at(0x1FE1D);	// @ (0x3FC3 * 8 + 5)
#define                                 TRISB5_bit          _BIT_ACCESS(TRISB,5)
// TRISB<TRISB6>
extern volatile __bit                   TRISB6              __at(0x1FE1E);	// @ (0x3FC3 * 8 + 6)
#define                                 TRISB6_bit          _BIT_ACCESS(TRISB,6)
// TRISB<TRISB7>
extern volatile __bit                   TRISB7              __at(0x1FE1F);	// @ (0x3FC3 * 8 + 7)
#define                                 TRISB7_bit          _BIT_ACCESS(TRISB,7)
// TRISC<TRISC0>
extern volatile __bit                   TRISC0              __at(0x1FE20);	// @ (0x3FC4 * 8 + 0)
#define                                 TRISC0_bit          _BIT_ACCESS(TRISC,0)
// TRISC<TRISC1>
extern volatile __bit                   TRISC1              __at(0x1FE21);	// @ (0x3FC4 * 8 + 1)
#define                                 TRISC1_bit          _BIT_ACCESS(TRISC,1)
// TRISC<TRISC2>
extern volatile __bit                   TRISC2              __at(0x1FE22);	// @ (0x3FC4 * 8 + 2)
#define                                 TRISC2_bit          _BIT_ACCESS(TRISC,2)
// TRISC<TRISC3>
extern volatile __bit                   TRISC3              __at(0x1FE23);	// @ (0x3FC4 * 8 + 3)
#define                                 TRISC3_bit          _BIT_ACCESS(TRISC,3)
// TRISC<TRISC4>
extern volatile __bit                   TRISC4              __at(0x1FE24);	// @ (0x3FC4 * 8 + 4)
#define                                 TRISC4_bit          _BIT_ACCESS(TRISC,4)
// TRISC<TRISC5>
extern volatile __bit                   TRISC5              __at(0x1FE25);	// @ (0x3FC4 * 8 + 5)
#define                                 TRISC5_bit          _BIT_ACCESS(TRISC,5)
// TRISC<TRISC6>
extern volatile __bit                   TRISC6              __at(0x1FE26);	// @ (0x3FC4 * 8 + 6)
#define                                 TRISC6_bit          _BIT_ACCESS(TRISC,6)
// TRISC<TRISC7>
extern volatile __bit                   TRISC7              __at(0x1FE27);	// @ (0x3FC4 * 8 + 7)
#define                                 TRISC7_bit          _BIT_ACCESS(TRISC,7)
// SMT1STAT<TS>
extern volatile __bit                   TS                  __at(0x1F902);	// @ (0x3F20 * 8 + 2)
#define                                 TS_bit              _BIT_ACCESS(SMT1STAT,2)
// FVRCON<TSEN>
extern volatile __bit                   TSEN                __at(0x1F60D);	// @ (0x3EC1 * 8 + 5)
#define                                 TSEN_bit            _BIT_ACCESS(FVRCON,5)
// FVRCON<TSRNG>
extern volatile __bit                   TSRNG               __at(0x1F60C);	// @ (0x3EC1 * 8 + 4)
#define                                 TSRNG_bit           _BIT_ACCESS(FVRCON,4)
// OSCTUNE<TUN0>
extern volatile __bit                   TUN0                __at(0x1CEF0);	// @ (0x39DE * 8 + 0)
#define                                 TUN0_bit            _BIT_ACCESS(OSCTUNE,0)
// OSCTUNE<TUN1>
extern volatile __bit                   TUN1                __at(0x1CEF1);	// @ (0x39DE * 8 + 1)
#define                                 TUN1_bit            _BIT_ACCESS(OSCTUNE,1)
// OSCTUNE<TUN2>
extern volatile __bit                   TUN2                __at(0x1CEF2);	// @ (0x39DE * 8 + 2)
#define                                 TUN2_bit            _BIT_ACCESS(OSCTUNE,2)
// OSCTUNE<TUN3>
extern volatile __bit                   TUN3                __at(0x1CEF3);	// @ (0x39DE * 8 + 3)
#define                                 TUN3_bit            _BIT_ACCESS(OSCTUNE,3)
// OSCTUNE<TUN4>
extern volatile __bit                   TUN4                __at(0x1CEF4);	// @ (0x39DE * 8 + 4)
#define                                 TUN4_bit            _BIT_ACCESS(OSCTUNE,4)
// OSCTUNE<TUN5>
extern volatile __bit                   TUN5                __at(0x1CEF5);	// @ (0x39DE * 8 + 5)
#define                                 TUN5_bit            _BIT_ACCESS(OSCTUNE,5)
// SPI1TWIDTH<TWIDTH0>
extern volatile __bit                   TWIDTH0             __at(0x1E8C0);	// @ (0x3D18 * 8 + 0)
#define                                 TWIDTH0_bit         _BIT_ACCESS(SPI1TWIDTH,0)
// SPI1TWIDTH<TWIDTH1>
extern volatile __bit                   TWIDTH1             __at(0x1E8C1);	// @ (0x3D18 * 8 + 1)
#define                                 TWIDTH1_bit         _BIT_ACCESS(SPI1TWIDTH,1)
// SPI1TWIDTH<TWIDTH2>
extern volatile __bit                   TWIDTH2             __at(0x1E8C2);	// @ (0x3D18 * 8 + 2)
#define                                 TWIDTH2_bit         _BIT_ACCESS(SPI1TWIDTH,2)
// SPI1TXB<TXB0>
extern volatile __bit                   TXB0                __at(0x1E888);	// @ (0x3D11 * 8 + 0)
#define                                 TXB0_bit            _BIT_ACCESS(SPI1TXB,0)
// SPI1TXB<TXB1>
extern volatile __bit                   TXB1                __at(0x1E889);	// @ (0x3D11 * 8 + 1)
#define                                 TXB1_bit            _BIT_ACCESS(SPI1TXB,1)
// SPI1TXB<TXB2>
extern volatile __bit                   TXB2                __at(0x1E88A);	// @ (0x3D11 * 8 + 2)
#define                                 TXB2_bit            _BIT_ACCESS(SPI1TXB,2)
// SPI1TXB<TXB3>
extern volatile __bit                   TXB3                __at(0x1E88B);	// @ (0x3D11 * 8 + 3)
#define                                 TXB3_bit            _BIT_ACCESS(SPI1TXB,3)
// SPI1TXB<TXB4>
extern volatile __bit                   TXB4                __at(0x1E88C);	// @ (0x3D11 * 8 + 4)
#define                                 TXB4_bit            _BIT_ACCESS(SPI1TXB,4)
// SPI1TXB<TXB5>
extern volatile __bit                   TXB5                __at(0x1E88D);	// @ (0x3D11 * 8 + 5)
#define                                 TXB5_bit            _BIT_ACCESS(SPI1TXB,5)
// SPI1TXB<TXB6>
extern volatile __bit                   TXB6                __at(0x1E88E);	// @ (0x3D11 * 8 + 6)
#define                                 TXB6_bit            _BIT_ACCESS(SPI1TXB,6)
// SPI1TXB<TXB7>
extern volatile __bit                   TXB7                __at(0x1E88F);	// @ (0x3D11 * 8 + 7)
#define                                 TXB7_bit            _BIT_ACCESS(SPI1TXB,7)
// SPI1CON2<TXR>
extern volatile __bit                   TXR                 __at(0x1E8B1);	// @ (0x3D16 * 8 + 1)
#define                                 TXR_bit             _BIT_ACCESS(SPI1CON2,1)
// SPI1INTE<TXUIE>
extern volatile __bit                   TXUIE               __at(0x1E8D9);	// @ (0x3D1B * 8 + 1)
#define                                 TXUIE_bit           _BIT_ACCESS(SPI1INTE,1)
// SPI1INTF<TXUIF>
extern volatile __bit                   TXUIF               __at(0x1E8D1);	// @ (0x3D1A * 8 + 1)
#define                                 TXUIF_bit           _BIT_ACCESS(SPI1INTF,1)
// U1CON0<U1ABDEN>
extern volatile __bit                   U1ABDEN             __at(0x1EF96);	// @ (0x3DF2 * 8 + 6)
#define                                 U1ABDEN_bit         _BIT_ACCESS(U1CON0,6)
// U1UIR<U1ABDIE>
extern volatile __bit                   U1ABDIE             __at(0x1EFC2);	// @ (0x3DF8 * 8 + 2)
#define                                 U1ABDIE_bit         _BIT_ACCESS(U1UIR,2)
// U1UIR<U1ABDIF>
extern volatile __bit                   U1ABDIF             __at(0x1EFC6);	// @ (0x3DF8 * 8 + 6)
#define                                 U1ABDIF_bit         _BIT_ACCESS(U1UIR,6)
// U1ERRIE<U1ABDOVE>
extern volatile __bit                   U1ABDOVE            __at(0x1EFD5);	// @ (0x3DFA * 8 + 5)
#define                                 U1ABDOVE_bit        _BIT_ACCESS(U1ERRIE,5)
// U1ERRIR<U1ABDOVF>
extern volatile __bit                   U1ABDOVF            __at(0x1EFCD);	// @ (0x3DF9 * 8 + 5)
#define                                 U1ABDOVF_bit        _BIT_ACCESS(U1ERRIR,5)
// U1CON0<U1BRGS>
extern volatile __bit                   U1BRGS              __at(0x1EF97);	// @ (0x3DF2 * 8 + 7)
#define                                 U1BRGS_bit          _BIT_ACCESS(U1CON0,7)
// U1CON1<U1BRKOVR>
extern volatile __bit                   U1BRKOVR            __at(0x1EF99);	// @ (0x3DF3 * 8 + 1)
#define                                 U1BRKOVR_bit        _BIT_ACCESS(U1CON1,1)
// U1CON2<U1C0EN>
extern volatile __bit                   U1C0EN              __at(0x1EFA3);	// @ (0x3DF4 * 8 + 3)
#define                                 U1C0EN_bit          _BIT_ACCESS(U1CON2,3)
// U1ERRIE<U1CERIE>
extern volatile __bit                   U1CERIE             __at(0x1EFD4);	// @ (0x3DFA * 8 + 4)
#define                                 U1CERIE_bit         _BIT_ACCESS(U1ERRIE,4)
// U1ERRIR<U1CERIF>
extern volatile __bit                   U1CERIF             __at(0x1EFCC);	// @ (0x3DF9 * 8 + 4)
#define                                 U1CERIF_bit         _BIT_ACCESS(U1ERRIR,4)
// PIE3<U1EIE>
extern volatile __bit                   U1EIE               __at(0x1CC9D);	// @ (0x3993 * 8 + 5)
#define                                 U1EIE_bit           _BIT_ACCESS(PIE3,5)
// PIR3<U1EIF>
extern volatile __bit                   U1EIF               __at(0x1CD1D);	// @ (0x39A3 * 8 + 5)
#define                                 U1EIF_bit           _BIT_ACCESS(PIR3,5)
// IPR3<U1EIP>
extern volatile __bit                   U1EIP               __at(0x1CC1D);	// @ (0x3983 * 8 + 5)
#define                                 U1EIP_bit           _BIT_ACCESS(IPR3,5)
// U1ERRIE<U1FERIE>
extern volatile __bit                   U1FERIE             __at(0x1EFD3);	// @ (0x3DFA * 8 + 3)
#define                                 U1FERIE_bit         _BIT_ACCESS(U1ERRIE,3)
// U1ERRIR<U1FERIF>
extern volatile __bit                   U1FERIF             __at(0x1EFCB);	// @ (0x3DF9 * 8 + 3)
#define                                 U1FERIF_bit         _BIT_ACCESS(U1ERRIR,3)
// U1CON2<U1FLO0>
extern volatile __bit                   U1FLO0              __at(0x1EFA0);	// @ (0x3DF4 * 8 + 0)
#define                                 U1FLO0_bit          _BIT_ACCESS(U1CON2,0)
// U1CON2<U1FLO1>
extern volatile __bit                   U1FLO1              __at(0x1EFA1);	// @ (0x3DF4 * 8 + 1)
#define                                 U1FLO1_bit          _BIT_ACCESS(U1CON2,1)
// PIE3<U1IE>
extern volatile __bit                   U1IE                __at(0x1CC9E);	// @ (0x3993 * 8 + 6)
#define                                 U1IE_bit            _BIT_ACCESS(PIE3,6)
// PIR3<U1IF>
extern volatile __bit                   U1IF                __at(0x1CD1E);	// @ (0x39A3 * 8 + 6)
#define                                 U1IF_bit            _BIT_ACCESS(PIR3,6)
// IPR3<U1IP>
extern volatile __bit                   U1IP                __at(0x1CC1E);	// @ (0x3983 * 8 + 6)
#define                                 U1IP_bit            _BIT_ACCESS(IPR3,6)
// PMD5<U1MD>
extern volatile __bit                   U1MD                __at(0x1CE2C);	// @ (0x39C5 * 8 + 4)
#define                                 U1MD_bit            _BIT_ACCESS(PMD5,4)
// U1CON0<U1MODE0>
extern volatile __bit                   U1MODE0             __at(0x1EF90);	// @ (0x3DF2 * 8 + 0)
#define                                 U1MODE0_bit         _BIT_ACCESS(U1CON0,0)
// U1CON0<U1MODE1>
extern volatile __bit                   U1MODE1             __at(0x1EF91);	// @ (0x3DF2 * 8 + 1)
#define                                 U1MODE1_bit         _BIT_ACCESS(U1CON0,1)
// U1CON0<U1MODE2>
extern volatile __bit                   U1MODE2             __at(0x1EF92);	// @ (0x3DF2 * 8 + 2)
#define                                 U1MODE2_bit         _BIT_ACCESS(U1CON0,2)
// U1CON0<U1MODE3>
extern volatile __bit                   U1MODE3             __at(0x1EF93);	// @ (0x3DF2 * 8 + 3)
#define                                 U1MODE3_bit         _BIT_ACCESS(U1CON0,3)
// U1CON1<U1ON>
extern volatile __bit                   U1ON                __at(0x1EF9F);	// @ (0x3DF3 * 8 + 7)
#define                                 U1ON_bit            _BIT_ACCESS(U1CON1,7)
// U1ERRIE<U1PERIE>
extern volatile __bit                   U1PERIE             __at(0x1EFD6);	// @ (0x3DFA * 8 + 6)
#define                                 U1PERIE_bit         _BIT_ACCESS(U1ERRIE,6)
// U1ERRIR<U1PERIF>
extern volatile __bit                   U1PERIF             __at(0x1EFCE);	// @ (0x3DF9 * 8 + 6)
#define                                 U1PERIF_bit         _BIT_ACCESS(U1ERRIR,6)
// U1FIFO<U1RCIDL>
extern volatile __bit                   U1RCIDL             __at(0x1EFBB);	// @ (0x3DF7 * 8 + 3)
#define                                 U1RCIDL_bit         _BIT_ACCESS(U1FIFO,3)
// U1CON2<U1RUNOVF>
extern volatile __bit                   U1RUNOVF            __at(0x1EFA7);	// @ (0x3DF4 * 8 + 7)
#define                                 U1RUNOVF_bit        _BIT_ACCESS(U1CON2,7)
// U1FIFO<U1RXBE>
extern volatile __bit                   U1RXBE              __at(0x1EFB9);	// @ (0x3DF7 * 8 + 1)
#define                                 U1RXBE_bit          _BIT_ACCESS(U1FIFO,1)
// U1FIFO<U1RXBF>
extern volatile __bit                   U1RXBF              __at(0x1EFB8);	// @ (0x3DF7 * 8 + 0)
#define                                 U1RXBF_bit          _BIT_ACCESS(U1FIFO,0)
// U1CON1<U1RXBIMD>
extern volatile __bit                   U1RXBIMD            __at(0x1EF9B);	// @ (0x3DF3 * 8 + 3)
#define                                 U1RXBIMD_bit        _BIT_ACCESS(U1CON1,3)
// U1ERRIE<U1RXBKIE>
extern volatile __bit                   U1RXBKIE            __at(0x1EFD2);	// @ (0x3DFA * 8 + 2)
#define                                 U1RXBKIE_bit        _BIT_ACCESS(U1ERRIE,2)
// U1ERRIR<U1RXBKIF>
extern volatile __bit                   U1RXBKIF            __at(0x1EFCA);	// @ (0x3DF9 * 8 + 2)
#define                                 U1RXBKIF_bit        _BIT_ACCESS(U1ERRIR,2)
// U1CON0<U1RXEN>
extern volatile __bit                   U1RXEN              __at(0x1EF94);	// @ (0x3DF2 * 8 + 4)
#define                                 U1RXEN_bit          _BIT_ACCESS(U1CON0,4)
// U1ERRIE<U1RXFOIE>
extern volatile __bit                   U1RXFOIE            __at(0x1EFD1);	// @ (0x3DFA * 8 + 1)
#define                                 U1RXFOIE_bit        _BIT_ACCESS(U1ERRIE,1)
// U1ERRIR<U1RXFOIF>
extern volatile __bit                   U1RXFOIF            __at(0x1EFC9);	// @ (0x3DF9 * 8 + 1)
#define                                 U1RXFOIF_bit        _BIT_ACCESS(U1ERRIR,1)
// U1FIFO<U1RXIDL>
extern volatile __bit                   U1RXIDL             __at(0x1EFBB);	// @ (0x3DF7 * 8 + 3)
#define                                 U1RXIDL_bit         _BIT_ACCESS(U1FIFO,3)
// PIE3<U1RXIE>
extern volatile __bit                   U1RXIE              __at(0x1CC9B);	// @ (0x3993 * 8 + 3)
#define                                 U1RXIE_bit          _BIT_ACCESS(PIE3,3)
// PIR3<U1RXIF>
extern volatile __bit                   U1RXIF              __at(0x1CD1B);	// @ (0x39A3 * 8 + 3)
#define                                 U1RXIF_bit          _BIT_ACCESS(PIR3,3)
// IPR3<U1RXIP>
extern volatile __bit                   U1RXIP              __at(0x1CC1B);	// @ (0x3983 * 8 + 3)
#define                                 U1RXIP_bit          _BIT_ACCESS(IPR3,3)
// U1CON2<U1RXPOL>
extern volatile __bit                   U1RXPOL             __at(0x1EFA6);	// @ (0x3DF4 * 8 + 6)
#define                                 U1RXPOL_bit         _BIT_ACCESS(U1CON2,6)
// U1CON1<U1SENDB>
extern volatile __bit                   U1SENDB             __at(0x1EF98);	// @ (0x3DF3 * 8 + 0)
#define                                 U1SENDB_bit         _BIT_ACCESS(U1CON1,0)
// U1CON2<U1STP0>
extern volatile __bit                   U1STP0              __at(0x1EFA4);	// @ (0x3DF4 * 8 + 4)
#define                                 U1STP0_bit          _BIT_ACCESS(U1CON2,4)
// U1CON2<U1STP1>
extern volatile __bit                   U1STP1              __at(0x1EFA5);	// @ (0x3DF4 * 8 + 5)
#define                                 U1STP1_bit          _BIT_ACCESS(U1CON2,5)
// U1FIFO<U1STPMD>
extern volatile __bit                   U1STPMD             __at(0x1EFBE);	// @ (0x3DF7 * 8 + 6)
#define                                 U1STPMD_bit         _BIT_ACCESS(U1FIFO,6)
// U1FIFO<U1TXBE>
extern volatile __bit                   U1TXBE              __at(0x1EFBD);	// @ (0x3DF7 * 8 + 5)
#define                                 U1TXBE_bit          _BIT_ACCESS(U1FIFO,5)
// U1FIFO<U1TXBF>
extern volatile __bit                   U1TXBF              __at(0x1EFBC);	// @ (0x3DF7 * 8 + 4)
#define                                 U1TXBF_bit          _BIT_ACCESS(U1FIFO,4)
// U1ERRIE<U1TXCIE>
extern volatile __bit                   U1TXCIE             __at(0x1EFD0);	// @ (0x3DFA * 8 + 0)
#define                                 U1TXCIE_bit         _BIT_ACCESS(U1ERRIE,0)
// U1ERRIR<U1TXCIF>
extern volatile __bit                   U1TXCIF             __at(0x1EFC8);	// @ (0x3DF9 * 8 + 0)
#define                                 U1TXCIF_bit         _BIT_ACCESS(U1ERRIR,0)
// U1CON0<U1TXEN>
extern volatile __bit                   U1TXEN              __at(0x1EF95);	// @ (0x3DF2 * 8 + 5)
#define                                 U1TXEN_bit          _BIT_ACCESS(U1CON0,5)
// PIE3<U1TXIE>
extern volatile __bit                   U1TXIE              __at(0x1CC9C);	// @ (0x3993 * 8 + 4)
#define                                 U1TXIE_bit          _BIT_ACCESS(PIE3,4)
// PIR3<U1TXIF>
extern volatile __bit                   U1TXIF              __at(0x1CD1C);	// @ (0x39A3 * 8 + 4)
#define                                 U1TXIF_bit          _BIT_ACCESS(PIR3,4)
// IPR3<U1TXIP>
extern volatile __bit                   U1TXIP              __at(0x1CC1C);	// @ (0x3983 * 8 + 4)
#define                                 U1TXIP_bit          _BIT_ACCESS(IPR3,4)
// U1ERRIE<U1TXMTIE>
extern volatile __bit                   U1TXMTIE            __at(0x1EFD7);	// @ (0x3DFA * 8 + 7)
#define                                 U1TXMTIE_bit        _BIT_ACCESS(U1ERRIE,7)
// U1ERRIR<U1TXMTIF>
extern volatile __bit                   U1TXMTIF            __at(0x1EFCF);	// @ (0x3DF9 * 8 + 7)
#define                                 U1TXMTIF_bit        _BIT_ACCESS(U1ERRIR,7)
// U1CON2<U1TXPOL>
extern volatile __bit                   U1TXPOL             __at(0x1EFA2);	// @ (0x3DF4 * 8 + 2)
#define                                 U1TXPOL_bit         _BIT_ACCESS(U1CON2,2)
// U1FIFO<U1TXWRE>
extern volatile __bit                   U1TXWRE             __at(0x1EFBF);	// @ (0x3DF7 * 8 + 7)
#define                                 U1TXWRE_bit         _BIT_ACCESS(U1FIFO,7)
// U1CON1<U1WUE>
extern volatile __bit                   U1WUE               __at(0x1EF9C);	// @ (0x3DF3 * 8 + 4)
#define                                 U1WUE_bit           _BIT_ACCESS(U1CON1,4)
// U1UIR<U1WUIF>
extern volatile __bit                   U1WUIF              __at(0x1EFC7);	// @ (0x3DF8 * 8 + 7)
#define                                 U1WUIF_bit          _BIT_ACCESS(U1UIR,7)
// U1FIFO<U1XON>
extern volatile __bit                   U1XON               __at(0x1EFBA);	// @ (0x3DF7 * 8 + 2)
#define                                 U1XON_bit           _BIT_ACCESS(U1FIFO,2)
// U2CON0<U2ABDEN>
extern volatile __bit                   U2ABDEN             __at(0x1EED6);	// @ (0x3DDA * 8 + 6)
#define                                 U2ABDEN_bit         _BIT_ACCESS(U2CON0,6)
// U2UIR<U2ABDIE>
extern volatile __bit                   U2ABDIE             __at(0x1EF02);	// @ (0x3DE0 * 8 + 2)
#define                                 U2ABDIE_bit         _BIT_ACCESS(U2UIR,2)
// U2UIR<U2ABDIF>
extern volatile __bit                   U2ABDIF             __at(0x1EF06);	// @ (0x3DE0 * 8 + 6)
#define                                 U2ABDIF_bit         _BIT_ACCESS(U2UIR,6)
// U2ERRIE<U2ABDOVE>
extern volatile __bit                   U2ABDOVE            __at(0x1EF15);	// @ (0x3DE2 * 8 + 5)
#define                                 U2ABDOVE_bit        _BIT_ACCESS(U2ERRIE,5)
// U2ERRIR<U2ABDOVF>
extern volatile __bit                   U2ABDOVF            __at(0x1EF0D);	// @ (0x3DE1 * 8 + 5)
#define                                 U2ABDOVF_bit        _BIT_ACCESS(U2ERRIR,5)
// U2CON0<U2BRGS>
extern volatile __bit                   U2BRGS              __at(0x1EED7);	// @ (0x3DDA * 8 + 7)
#define                                 U2BRGS_bit          _BIT_ACCESS(U2CON0,7)
// U2CON1<U2BRKOVR>
extern volatile __bit                   U2BRKOVR            __at(0x1EED9);	// @ (0x3DDB * 8 + 1)
#define                                 U2BRKOVR_bit        _BIT_ACCESS(U2CON1,1)
// U2ERRIE<U2CERIE>
extern volatile __bit                   U2CERIE             __at(0x1EF14);	// @ (0x3DE2 * 8 + 4)
#define                                 U2CERIE_bit         _BIT_ACCESS(U2ERRIE,4)
// U2ERRIR<U2CERIF>
extern volatile __bit                   U2CERIF             __at(0x1EF0C);	// @ (0x3DE1 * 8 + 4)
#define                                 U2CERIF_bit         _BIT_ACCESS(U2ERRIR,4)
// PIE6<U2EIE>
extern volatile __bit                   U2EIE               __at(0x1CCB4);	// @ (0x3996 * 8 + 4)
#define                                 U2EIE_bit           _BIT_ACCESS(PIE6,4)
// PIR6<U2EIF>
extern volatile __bit                   U2EIF               __at(0x1CD34);	// @ (0x39A6 * 8 + 4)
#define                                 U2EIF_bit           _BIT_ACCESS(PIR6,4)
// IPR6<U2EIP>
extern volatile __bit                   U2EIP               __at(0x1CC34);	// @ (0x3986 * 8 + 4)
#define                                 U2EIP_bit           _BIT_ACCESS(IPR6,4)
// U2ERRIE<U2FERIE>
extern volatile __bit                   U2FERIE             __at(0x1EF13);	// @ (0x3DE2 * 8 + 3)
#define                                 U2FERIE_bit         _BIT_ACCESS(U2ERRIE,3)
// U2ERRIR<U2FERIF>
extern volatile __bit                   U2FERIF             __at(0x1EF0B);	// @ (0x3DE1 * 8 + 3)
#define                                 U2FERIF_bit         _BIT_ACCESS(U2ERRIR,3)
// U2CON2<U2FLO0>
extern volatile __bit                   U2FLO0              __at(0x1EEE0);	// @ (0x3DDC * 8 + 0)
#define                                 U2FLO0_bit          _BIT_ACCESS(U2CON2,0)
// U2CON2<U2FLO1>
extern volatile __bit                   U2FLO1              __at(0x1EEE1);	// @ (0x3DDC * 8 + 1)
#define                                 U2FLO1_bit          _BIT_ACCESS(U2CON2,1)
// PIE6<U2IE>
extern volatile __bit                   U2IE                __at(0x1CCB5);	// @ (0x3996 * 8 + 5)
#define                                 U2IE_bit            _BIT_ACCESS(PIE6,5)
// PIR6<U2IF>
extern volatile __bit                   U2IF                __at(0x1CD35);	// @ (0x39A6 * 8 + 5)
#define                                 U2IF_bit            _BIT_ACCESS(PIR6,5)
// IPR6<U2IP>
extern volatile __bit                   U2IP                __at(0x1CC35);	// @ (0x3986 * 8 + 5)
#define                                 U2IP_bit            _BIT_ACCESS(IPR6,5)
// PMD5<U2MD>
extern volatile __bit                   U2MD                __at(0x1CE2D);	// @ (0x39C5 * 8 + 5)
#define                                 U2MD_bit            _BIT_ACCESS(PMD5,5)
// U2CON0<U2MODE0>
extern volatile __bit                   U2MODE0             __at(0x1EED0);	// @ (0x3DDA * 8 + 0)
#define                                 U2MODE0_bit         _BIT_ACCESS(U2CON0,0)
// U2CON0<U2MODE1>
extern volatile __bit                   U2MODE1             __at(0x1EED1);	// @ (0x3DDA * 8 + 1)
#define                                 U2MODE1_bit         _BIT_ACCESS(U2CON0,1)
// U2CON0<U2MODE2>
extern volatile __bit                   U2MODE2             __at(0x1EED2);	// @ (0x3DDA * 8 + 2)
#define                                 U2MODE2_bit         _BIT_ACCESS(U2CON0,2)
// U2CON1<U2ON>
extern volatile __bit                   U2ON                __at(0x1EEDF);	// @ (0x3DDB * 8 + 7)
#define                                 U2ON_bit            _BIT_ACCESS(U2CON1,7)
// U2ERRIE<U2PERIE>
extern volatile __bit                   U2PERIE             __at(0x1EF16);	// @ (0x3DE2 * 8 + 6)
#define                                 U2PERIE_bit         _BIT_ACCESS(U2ERRIE,6)
// U2ERRIR<U2PERIF>
extern volatile __bit                   U2PERIF             __at(0x1EF0E);	// @ (0x3DE1 * 8 + 6)
#define                                 U2PERIF_bit         _BIT_ACCESS(U2ERRIR,6)
// U2FIFO<U2RCIDL>
extern volatile __bit                   U2RCIDL             __at(0x1EEFB);	// @ (0x3DDF * 8 + 3)
#define                                 U2RCIDL_bit         _BIT_ACCESS(U2FIFO,3)
// U2CON2<U2RUNOVF>
extern volatile __bit                   U2RUNOVF            __at(0x1EEE7);	// @ (0x3DDC * 8 + 7)
#define                                 U2RUNOVF_bit        _BIT_ACCESS(U2CON2,7)
// U2FIFO<U2RXBE>
extern volatile __bit                   U2RXBE              __at(0x1EEF9);	// @ (0x3DDF * 8 + 1)
#define                                 U2RXBE_bit          _BIT_ACCESS(U2FIFO,1)
// U2FIFO<U2RXBF>
extern volatile __bit                   U2RXBF              __at(0x1EEF8);	// @ (0x3DDF * 8 + 0)
#define                                 U2RXBF_bit          _BIT_ACCESS(U2FIFO,0)
// U2CON1<U2RXBIMD>
extern volatile __bit                   U2RXBIMD            __at(0x1EEDB);	// @ (0x3DDB * 8 + 3)
#define                                 U2RXBIMD_bit        _BIT_ACCESS(U2CON1,3)
// U2ERRIE<U2RXBKIE>
extern volatile __bit                   U2RXBKIE            __at(0x1EF12);	// @ (0x3DE2 * 8 + 2)
#define                                 U2RXBKIE_bit        _BIT_ACCESS(U2ERRIE,2)
// U2ERRIR<U2RXBKIF>
extern volatile __bit                   U2RXBKIF            __at(0x1EF0A);	// @ (0x3DE1 * 8 + 2)
#define                                 U2RXBKIF_bit        _BIT_ACCESS(U2ERRIR,2)
// U2CON0<U2RXEN>
extern volatile __bit                   U2RXEN              __at(0x1EED4);	// @ (0x3DDA * 8 + 4)
#define                                 U2RXEN_bit          _BIT_ACCESS(U2CON0,4)
// U2ERRIE<U2RXFOIE>
extern volatile __bit                   U2RXFOIE            __at(0x1EF11);	// @ (0x3DE2 * 8 + 1)
#define                                 U2RXFOIE_bit        _BIT_ACCESS(U2ERRIE,1)
// U2ERRIR<U2RXFOIF>
extern volatile __bit                   U2RXFOIF            __at(0x1EF09);	// @ (0x3DE1 * 8 + 1)
#define                                 U2RXFOIF_bit        _BIT_ACCESS(U2ERRIR,1)
// U2FIFO<U2RXIDL>
extern volatile __bit                   U2RXIDL             __at(0x1EEFB);	// @ (0x3DDF * 8 + 3)
#define                                 U2RXIDL_bit         _BIT_ACCESS(U2FIFO,3)
// PIE6<U2RXIE>
extern volatile __bit                   U2RXIE              __at(0x1CCB2);	// @ (0x3996 * 8 + 2)
#define                                 U2RXIE_bit          _BIT_ACCESS(PIE6,2)
// PIR6<U2RXIF>
extern volatile __bit                   U2RXIF              __at(0x1CD32);	// @ (0x39A6 * 8 + 2)
#define                                 U2RXIF_bit          _BIT_ACCESS(PIR6,2)
// IPR6<U2RXIP>
extern volatile __bit                   U2RXIP              __at(0x1CC32);	// @ (0x3986 * 8 + 2)
#define                                 U2RXIP_bit          _BIT_ACCESS(IPR6,2)
// U2CON2<U2RXPOL>
extern volatile __bit                   U2RXPOL             __at(0x1EEE6);	// @ (0x3DDC * 8 + 6)
#define                                 U2RXPOL_bit         _BIT_ACCESS(U2CON2,6)
// U2CON1<U2SENDB>
extern volatile __bit                   U2SENDB             __at(0x1EED8);	// @ (0x3DDB * 8 + 0)
#define                                 U2SENDB_bit         _BIT_ACCESS(U2CON1,0)
// U2CON2<U2STP0>
extern volatile __bit                   U2STP0              __at(0x1EEE4);	// @ (0x3DDC * 8 + 4)
#define                                 U2STP0_bit          _BIT_ACCESS(U2CON2,4)
// U2CON2<U2STP1>
extern volatile __bit                   U2STP1              __at(0x1EEE5);	// @ (0x3DDC * 8 + 5)
#define                                 U2STP1_bit          _BIT_ACCESS(U2CON2,5)
// U2FIFO<U2STPMD>
extern volatile __bit                   U2STPMD             __at(0x1EEFE);	// @ (0x3DDF * 8 + 6)
#define                                 U2STPMD_bit         _BIT_ACCESS(U2FIFO,6)
// U2FIFO<U2TXBE>
extern volatile __bit                   U2TXBE              __at(0x1EEFD);	// @ (0x3DDF * 8 + 5)
#define                                 U2TXBE_bit          _BIT_ACCESS(U2FIFO,5)
// U2FIFO<U2TXBF>
extern volatile __bit                   U2TXBF              __at(0x1EEFC);	// @ (0x3DDF * 8 + 4)
#define                                 U2TXBF_bit          _BIT_ACCESS(U2FIFO,4)
// U2ERRIE<U2TXCIE>
extern volatile __bit                   U2TXCIE             __at(0x1EF10);	// @ (0x3DE2 * 8 + 0)
#define                                 U2TXCIE_bit         _BIT_ACCESS(U2ERRIE,0)
// U2ERRIR<U2TXCIF>
extern volatile __bit                   U2TXCIF             __at(0x1EF08);	// @ (0x3DE1 * 8 + 0)
#define                                 U2TXCIF_bit         _BIT_ACCESS(U2ERRIR,0)
// U2CON0<U2TXEN>
extern volatile __bit                   U2TXEN              __at(0x1EED5);	// @ (0x3DDA * 8 + 5)
#define                                 U2TXEN_bit          _BIT_ACCESS(U2CON0,5)
// PIE6<U2TXIE>
extern volatile __bit                   U2TXIE              __at(0x1CCB3);	// @ (0x3996 * 8 + 3)
#define                                 U2TXIE_bit          _BIT_ACCESS(PIE6,3)
// PIR6<U2TXIF>
extern volatile __bit                   U2TXIF              __at(0x1CD33);	// @ (0x39A6 * 8 + 3)
#define                                 U2TXIF_bit          _BIT_ACCESS(PIR6,3)
// IPR6<U2TXIP>
extern volatile __bit                   U2TXIP              __at(0x1CC33);	// @ (0x3986 * 8 + 3)
#define                                 U2TXIP_bit          _BIT_ACCESS(IPR6,3)
// U2ERRIE<U2TXMTIE>
extern volatile __bit                   U2TXMTIE            __at(0x1EF17);	// @ (0x3DE2 * 8 + 7)
#define                                 U2TXMTIE_bit        _BIT_ACCESS(U2ERRIE,7)
// U2ERRIR<U2TXMTIF>
extern volatile __bit                   U2TXMTIF            __at(0x1EF0F);	// @ (0x3DE1 * 8 + 7)
#define                                 U2TXMTIF_bit        _BIT_ACCESS(U2ERRIR,7)
// U2CON2<U2TXPOL>
extern volatile __bit                   U2TXPOL             __at(0x1EEE2);	// @ (0x3DDC * 8 + 2)
#define                                 U2TXPOL_bit         _BIT_ACCESS(U2CON2,2)
// U2FIFO<U2TXWRE>
extern volatile __bit                   U2TXWRE             __at(0x1EEFF);	// @ (0x3DDF * 8 + 7)
#define                                 U2TXWRE_bit         _BIT_ACCESS(U2FIFO,7)
// U2CON1<U2WUE>
extern volatile __bit                   U2WUE               __at(0x1EEDC);	// @ (0x3DDB * 8 + 4)
#define                                 U2WUE_bit           _BIT_ACCESS(U2CON1,4)
// U2UIR<U2WUIF>
extern volatile __bit                   U2WUIF              __at(0x1EF07);	// @ (0x3DE0 * 8 + 7)
#define                                 U2WUIF_bit          _BIT_ACCESS(U2UIR,7)
// U2FIFO<U2XON>
extern volatile __bit                   U2XON               __at(0x1EEFA);	// @ (0x3DDF * 8 + 2)
#define                                 U2XON_bit           _BIT_ACCESS(U2FIFO,2)
// ADUTHL<UTH0>
extern volatile __bit                   UTH0                __at(0x1F700);	// @ (0x3EE0 * 8 + 0)
#define                                 UTH0_bit            _BIT_ACCESS(ADUTHL,0)
// ADUTHL<UTH1>
extern volatile __bit                   UTH1                __at(0x1F701);	// @ (0x3EE0 * 8 + 1)
#define                                 UTH1_bit            _BIT_ACCESS(ADUTHL,1)
// ADUTHH<UTH10>
extern volatile __bit                   UTH10               __at(0x1F70A);	// @ (0x3EE1 * 8 + 2)
#define                                 UTH10_bit           _BIT_ACCESS(ADUTHH,2)
// ADUTHH<UTH11>
extern volatile __bit                   UTH11               __at(0x1F70B);	// @ (0x3EE1 * 8 + 3)
#define                                 UTH11_bit           _BIT_ACCESS(ADUTHH,3)
// ADUTHH<UTH12>
extern volatile __bit                   UTH12               __at(0x1F70C);	// @ (0x3EE1 * 8 + 4)
#define                                 UTH12_bit           _BIT_ACCESS(ADUTHH,4)
// ADUTHH<UTH13>
extern volatile __bit                   UTH13               __at(0x1F70D);	// @ (0x3EE1 * 8 + 5)
#define                                 UTH13_bit           _BIT_ACCESS(ADUTHH,5)
// ADUTHH<UTH14>
extern volatile __bit                   UTH14               __at(0x1F70E);	// @ (0x3EE1 * 8 + 6)
#define                                 UTH14_bit           _BIT_ACCESS(ADUTHH,6)
// ADUTHH<UTH15>
extern volatile __bit                   UTH15               __at(0x1F70F);	// @ (0x3EE1 * 8 + 7)
#define                                 UTH15_bit           _BIT_ACCESS(ADUTHH,7)
// ADUTHL<UTH2>
extern volatile __bit                   UTH2                __at(0x1F702);	// @ (0x3EE0 * 8 + 2)
#define                                 UTH2_bit            _BIT_ACCESS(ADUTHL,2)
// ADUTHL<UTH3>
extern volatile __bit                   UTH3                __at(0x1F703);	// @ (0x3EE0 * 8 + 3)
#define                                 UTH3_bit            _BIT_ACCESS(ADUTHL,3)
// ADUTHL<UTH4>
extern volatile __bit                   UTH4                __at(0x1F704);	// @ (0x3EE0 * 8 + 4)
#define                                 UTH4_bit            _BIT_ACCESS(ADUTHL,4)
// ADUTHL<UTH5>
extern volatile __bit                   UTH5                __at(0x1F705);	// @ (0x3EE0 * 8 + 5)
#define                                 UTH5_bit            _BIT_ACCESS(ADUTHL,5)
// ADUTHL<UTH6>
extern volatile __bit                   UTH6                __at(0x1F706);	// @ (0x3EE0 * 8 + 6)
#define                                 UTH6_bit            _BIT_ACCESS(ADUTHL,6)
// ADUTHL<UTH7>
extern volatile __bit                   UTH7                __at(0x1F707);	// @ (0x3EE0 * 8 + 7)
#define                                 UTH7_bit            _BIT_ACCESS(ADUTHL,7)
// ADUTHH<UTH8>
extern volatile __bit                   UTH8                __at(0x1F708);	// @ (0x3EE1 * 8 + 0)
#define                                 UTH8_bit            _BIT_ACCESS(ADUTHH,0)
// ADUTHH<UTH9>
extern volatile __bit                   UTH9                __at(0x1F709);	// @ (0x3EE1 * 8 + 1)
#define                                 UTH9_bit            _BIT_ACCESS(ADUTHH,1)
// ADSTAT<UTHR>
extern volatile __bit                   UTHR                __at(0x1F7E6);	// @ (0x3EFC * 8 + 6)
#define                                 UTHR_bit            _BIT_ACCESS(ADSTAT,6)
// WDTCON1<WDTCS0>
extern volatile __bit                   WDTCS0              __at(0x1CAE4);	// @ (0x395C * 8 + 4)
#define                                 WDTCS0_bit          _BIT_ACCESS(WDTCON1,4)
// WDTCON1<WDTCS1>
extern volatile __bit                   WDTCS1              __at(0x1CAE5);	// @ (0x395C * 8 + 5)
#define                                 WDTCS1_bit          _BIT_ACCESS(WDTCON1,5)
// WDTCON1<WDTCS2>
extern volatile __bit                   WDTCS2              __at(0x1CAE6);	// @ (0x395C * 8 + 6)
#define                                 WDTCS2_bit          _BIT_ACCESS(WDTCON1,6)
// WDTCON0<WDTPS0>
extern volatile __bit                   WDTPS0              __at(0x1CAD9);	// @ (0x395B * 8 + 1)
#define                                 WDTPS0_bit          _BIT_ACCESS(WDTCON0,1)
// WDTCON0<WDTPS1>
extern volatile __bit                   WDTPS1              __at(0x1CADA);	// @ (0x395B * 8 + 2)
#define                                 WDTPS1_bit          _BIT_ACCESS(WDTCON0,2)
// WDTCON0<WDTPS2>
extern volatile __bit                   WDTPS2              __at(0x1CADB);	// @ (0x395B * 8 + 3)
#define                                 WDTPS2_bit          _BIT_ACCESS(WDTCON0,3)
// WDTCON0<WDTPS3>
extern volatile __bit                   WDTPS3              __at(0x1CADC);	// @ (0x395B * 8 + 4)
#define                                 WDTPS3_bit          _BIT_ACCESS(WDTCON0,4)
// WDTCON0<WDTPS4>
extern volatile __bit                   WDTPS4              __at(0x1CADD);	// @ (0x395B * 8 + 5)
#define                                 WDTPS4_bit          _BIT_ACCESS(WDTCON0,5)
// WDTPSL<WDTPSCNT0>
extern volatile __bit                   WDTPSCNT0           __at(0x1CAE8);	// @ (0x395D * 8 + 0)
#define                                 WDTPSCNT0_bit       _BIT_ACCESS(WDTPSL,0)
// WDTPSL<WDTPSCNT1>
extern volatile __bit                   WDTPSCNT1           __at(0x1CAE9);	// @ (0x395D * 8 + 1)
#define                                 WDTPSCNT1_bit       _BIT_ACCESS(WDTPSL,1)
// WDTPSH<WDTPSCNT10>
extern volatile __bit                   WDTPSCNT10          __at(0x1CAF2);	// @ (0x395E * 8 + 2)
#define                                 WDTPSCNT10_bit      _BIT_ACCESS(WDTPSH,2)
// WDTPSH<WDTPSCNT11>
extern volatile __bit                   WDTPSCNT11          __at(0x1CAF3);	// @ (0x395E * 8 + 3)
#define                                 WDTPSCNT11_bit      _BIT_ACCESS(WDTPSH,3)
// WDTPSH<WDTPSCNT12>
extern volatile __bit                   WDTPSCNT12          __at(0x1CAF4);	// @ (0x395E * 8 + 4)
#define                                 WDTPSCNT12_bit      _BIT_ACCESS(WDTPSH,4)
// WDTPSH<WDTPSCNT13>
extern volatile __bit                   WDTPSCNT13          __at(0x1CAF5);	// @ (0x395E * 8 + 5)
#define                                 WDTPSCNT13_bit      _BIT_ACCESS(WDTPSH,5)
// WDTPSH<WDTPSCNT14>
extern volatile __bit                   WDTPSCNT14          __at(0x1CAF6);	// @ (0x395E * 8 + 6)
#define                                 WDTPSCNT14_bit      _BIT_ACCESS(WDTPSH,6)
// WDTPSH<WDTPSCNT15>
extern volatile __bit                   WDTPSCNT15          __at(0x1CAF7);	// @ (0x395E * 8 + 7)
#define                                 WDTPSCNT15_bit      _BIT_ACCESS(WDTPSH,7)
// WDTTMR<WDTPSCNT16>
extern volatile __bit                   WDTPSCNT16          __at(0x1CAF8);	// @ (0x395F * 8 + 0)
#define                                 WDTPSCNT16_bit      _BIT_ACCESS(WDTTMR,0)
// WDTTMR<WDTPSCNT17>
extern volatile __bit                   WDTPSCNT17          __at(0x1CAF9);	// @ (0x395F * 8 + 1)
#define                                 WDTPSCNT17_bit      _BIT_ACCESS(WDTTMR,1)
// WDTPSL<WDTPSCNT2>
extern volatile __bit                   WDTPSCNT2           __at(0x1CAEA);	// @ (0x395D * 8 + 2)
#define                                 WDTPSCNT2_bit       _BIT_ACCESS(WDTPSL,2)
// WDTPSL<WDTPSCNT3>
extern volatile __bit                   WDTPSCNT3           __at(0x1CAEB);	// @ (0x395D * 8 + 3)
#define                                 WDTPSCNT3_bit       _BIT_ACCESS(WDTPSL,3)
// WDTPSL<WDTPSCNT4>
extern volatile __bit                   WDTPSCNT4           __at(0x1CAEC);	// @ (0x395D * 8 + 4)
#define                                 WDTPSCNT4_bit       _BIT_ACCESS(WDTPSL,4)
// WDTPSL<WDTPSCNT5>
extern volatile __bit                   WDTPSCNT5           __at(0x1CAED);	// @ (0x395D * 8 + 5)
#define                                 WDTPSCNT5_bit       _BIT_ACCESS(WDTPSL,5)
// WDTPSL<WDTPSCNT6>
extern volatile __bit                   WDTPSCNT6           __at(0x1CAEE);	// @ (0x395D * 8 + 6)
#define                                 WDTPSCNT6_bit       _BIT_ACCESS(WDTPSL,6)
// WDTPSL<WDTPSCNT7>
extern volatile __bit                   WDTPSCNT7           __at(0x1CAEF);	// @ (0x395D * 8 + 7)
#define                                 WDTPSCNT7_bit       _BIT_ACCESS(WDTPSL,7)
// WDTPSH<WDTPSCNT8>
extern volatile __bit                   WDTPSCNT8           __at(0x1CAF0);	// @ (0x395E * 8 + 0)
#define                                 WDTPSCNT8_bit       _BIT_ACCESS(WDTPSH,0)
// WDTPSH<WDTPSCNT9>
extern volatile __bit                   WDTPSCNT9           __at(0x1CAF1);	// @ (0x395E * 8 + 1)
#define                                 WDTPSCNT9_bit       _BIT_ACCESS(WDTPSH,1)
// WDTCON0<WDTSEN>
extern volatile __bit                   WDTSEN              __at(0x1CAD8);	// @ (0x395B * 8 + 0)
#define                                 WDTSEN_bit          _BIT_ACCESS(WDTCON0,0)
// WDTTMR<WDTSTATE>
extern volatile __bit                   WDTSTATE            __at(0x1CAFA);	// @ (0x395F * 8 + 2)
#define                                 WDTSTATE_bit        _BIT_ACCESS(WDTTMR,2)
// WDTTMR<WDTTMR0>
extern volatile __bit                   WDTTMR0             __at(0x1CAFB);	// @ (0x395F * 8 + 3)
#define                                 WDTTMR0_bit         _BIT_ACCESS(WDTTMR,3)
// WDTTMR<WDTTMR1>
extern volatile __bit                   WDTTMR1             __at(0x1CAFC);	// @ (0x395F * 8 + 4)
#define                                 WDTTMR1_bit         _BIT_ACCESS(WDTTMR,4)
// WDTTMR<WDTTMR2>
extern volatile __bit                   WDTTMR2             __at(0x1CAFD);	// @ (0x395F * 8 + 5)
#define                                 WDTTMR2_bit         _BIT_ACCESS(WDTTMR,5)
// WDTTMR<WDTTMR3>
extern volatile __bit                   WDTTMR3             __at(0x1CAFE);	// @ (0x395F * 8 + 6)
#define                                 WDTTMR3_bit         _BIT_ACCESS(WDTTMR,6)
// WDTTMR<WDTTMR4>
extern volatile __bit                   WDTTMR4             __at(0x1CAFF);	// @ (0x395F * 8 + 7)
#define                                 WDTTMR4_bit         _BIT_ACCESS(WDTTMR,7)
// WDTCON1<WDTWINDOW0>
extern volatile __bit                   WDTWINDOW0          __at(0x1CAE0);	// @ (0x395C * 8 + 0)
#define                                 WDTWINDOW0_bit      _BIT_ACCESS(WDTCON1,0)
// WDTCON1<WDTWINDOW1>
extern volatile __bit                   WDTWINDOW1          __at(0x1CAE1);	// @ (0x395C * 8 + 1)
#define                                 WDTWINDOW1_bit      _BIT_ACCESS(WDTCON1,1)
// WDTCON1<WDTWINDOW2>
extern volatile __bit                   WDTWINDOW2          __at(0x1CAE2);	// @ (0x395C * 8 + 2)
#define                                 WDTWINDOW2_bit      _BIT_ACCESS(WDTCON1,2)
// PCON0<WDTWV>
extern volatile __bit                   WDTWV               __at(0x1FF85);	// @ (0x3FF0 * 8 + 5)
#define                                 WDTWV_bit           _BIT_ACCESS(PCON0,5)
// WDTCON1<WINDOW0>
extern volatile __bit                   WINDOW0             __at(0x1CAE0);	// @ (0x395C * 8 + 0)
#define                                 WINDOW0_bit         _BIT_ACCESS(WDTCON1,0)
// WDTCON1<WINDOW1>
extern volatile __bit                   WINDOW1             __at(0x1CAE1);	// @ (0x395C * 8 + 1)
#define                                 WINDOW1_bit         _BIT_ACCESS(WDTCON1,1)
// WDTCON1<WINDOW2>
extern volatile __bit                   WINDOW2             __at(0x1CAE2);	// @ (0x395C * 8 + 2)
#define                                 WINDOW2_bit         _BIT_ACCESS(WDTCON1,2)
// SMT1CON0<WPOL>
extern volatile __bit                   WPOL                __at(0x1F8F4);	// @ (0x3F1E * 8 + 4)
#define                                 WPOL_bit            _BIT_ACCESS(SMT1CON0,4)
// WPUA<WPUA0>
extern volatile __bit                   WPUA0               __at(0x1D208);	// @ (0x3A41 * 8 + 0)
#define                                 WPUA0_bit           _BIT_ACCESS(WPUA,0)
// WPUA<WPUA1>
extern volatile __bit                   WPUA1               __at(0x1D209);	// @ (0x3A41 * 8 + 1)
#define                                 WPUA1_bit           _BIT_ACCESS(WPUA,1)
// WPUA<WPUA2>
extern volatile __bit                   WPUA2               __at(0x1D20A);	// @ (0x3A41 * 8 + 2)
#define                                 WPUA2_bit           _BIT_ACCESS(WPUA,2)
// WPUA<WPUA3>
extern volatile __bit                   WPUA3               __at(0x1D20B);	// @ (0x3A41 * 8 + 3)
#define                                 WPUA3_bit           _BIT_ACCESS(WPUA,3)
// WPUA<WPUA4>
extern volatile __bit                   WPUA4               __at(0x1D20C);	// @ (0x3A41 * 8 + 4)
#define                                 WPUA4_bit           _BIT_ACCESS(WPUA,4)
// WPUA<WPUA5>
extern volatile __bit                   WPUA5               __at(0x1D20D);	// @ (0x3A41 * 8 + 5)
#define                                 WPUA5_bit           _BIT_ACCESS(WPUA,5)
// WPUA<WPUA6>
extern volatile __bit                   WPUA6               __at(0x1D20E);	// @ (0x3A41 * 8 + 6)
#define                                 WPUA6_bit           _BIT_ACCESS(WPUA,6)
// WPUA<WPUA7>
extern volatile __bit                   WPUA7               __at(0x1D20F);	// @ (0x3A41 * 8 + 7)
#define                                 WPUA7_bit           _BIT_ACCESS(WPUA,7)
// WPUB<WPUB0>
extern volatile __bit                   WPUB0               __at(0x1D288);	// @ (0x3A51 * 8 + 0)
#define                                 WPUB0_bit           _BIT_ACCESS(WPUB,0)
// WPUB<WPUB1>
extern volatile __bit                   WPUB1               __at(0x1D289);	// @ (0x3A51 * 8 + 1)
#define                                 WPUB1_bit           _BIT_ACCESS(WPUB,1)
// WPUB<WPUB2>
extern volatile __bit                   WPUB2               __at(0x1D28A);	// @ (0x3A51 * 8 + 2)
#define                                 WPUB2_bit           _BIT_ACCESS(WPUB,2)
// WPUB<WPUB3>
extern volatile __bit                   WPUB3               __at(0x1D28B);	// @ (0x3A51 * 8 + 3)
#define                                 WPUB3_bit           _BIT_ACCESS(WPUB,3)
// WPUB<WPUB4>
extern volatile __bit                   WPUB4               __at(0x1D28C);	// @ (0x3A51 * 8 + 4)
#define                                 WPUB4_bit           _BIT_ACCESS(WPUB,4)
// WPUB<WPUB5>
extern volatile __bit                   WPUB5               __at(0x1D28D);	// @ (0x3A51 * 8 + 5)
#define                                 WPUB5_bit           _BIT_ACCESS(WPUB,5)
// WPUB<WPUB6>
extern volatile __bit                   WPUB6               __at(0x1D28E);	// @ (0x3A51 * 8 + 6)
#define                                 WPUB6_bit           _BIT_ACCESS(WPUB,6)
// WPUB<WPUB7>
extern volatile __bit                   WPUB7               __at(0x1D28F);	// @ (0x3A51 * 8 + 7)
#define                                 WPUB7_bit           _BIT_ACCESS(WPUB,7)
// WPUC<WPUC0>
extern volatile __bit                   WPUC0               __at(0x1D308);	// @ (0x3A61 * 8 + 0)
#define                                 WPUC0_bit           _BIT_ACCESS(WPUC,0)
// WPUC<WPUC1>
extern volatile __bit                   WPUC1               __at(0x1D309);	// @ (0x3A61 * 8 + 1)
#define                                 WPUC1_bit           _BIT_ACCESS(WPUC,1)
// WPUC<WPUC2>
extern volatile __bit                   WPUC2               __at(0x1D30A);	// @ (0x3A61 * 8 + 2)
#define                                 WPUC2_bit           _BIT_ACCESS(WPUC,2)
// WPUC<WPUC3>
extern volatile __bit                   WPUC3               __at(0x1D30B);	// @ (0x3A61 * 8 + 3)
#define                                 WPUC3_bit           _BIT_ACCESS(WPUC,3)
// WPUC<WPUC4>
extern volatile __bit                   WPUC4               __at(0x1D30C);	// @ (0x3A61 * 8 + 4)
#define                                 WPUC4_bit           _BIT_ACCESS(WPUC,4)
// WPUC<WPUC5>
extern volatile __bit                   WPUC5               __at(0x1D30D);	// @ (0x3A61 * 8 + 5)
#define                                 WPUC5_bit           _BIT_ACCESS(WPUC,5)
// WPUC<WPUC6>
extern volatile __bit                   WPUC6               __at(0x1D30E);	// @ (0x3A61 * 8 + 6)
#define                                 WPUC6_bit           _BIT_ACCESS(WPUC,6)
// WPUC<WPUC7>
extern volatile __bit                   WPUC7               __at(0x1D30F);	// @ (0x3A61 * 8 + 7)
#define                                 WPUC7_bit           _BIT_ACCESS(WPUC,7)
// WPUE<WPUE3>
extern volatile __bit                   WPUE3               __at(0x1D40B);	// @ (0x3A81 * 8 + 3)
#define                                 WPUE3_bit           _BIT_ACCESS(WPUE,3)
// NVMCON1<WR>
extern volatile __bit                   WR                  __at(0x1CF29);	// @ (0x39E5 * 8 + 1)
#define                                 WR_bit              _BIT_ACCESS(NVMCON1,1)
// I2C1PIE<WR1IE>
extern volatile __bit                   WR1IE               __at(0x1EBD4);	// @ (0x3D7A * 8 + 4)
#define                                 WR1IE_bit           _BIT_ACCESS(I2C1PIE,4)
// I2C1PIR<WR1IF>
extern volatile __bit                   WR1IF               __at(0x1EBCC);	// @ (0x3D79 * 8 + 4)
#define                                 WR1IF_bit           _BIT_ACCESS(I2C1PIR,4)
// I2C2PIE<WR2IE>
extern volatile __bit                   WR2IE               __at(0x1EB24);	// @ (0x3D64 * 8 + 4)
#define                                 WR2IE_bit           _BIT_ACCESS(I2C2PIE,4)
// I2C2PIR<WR2IF>
extern volatile __bit                   WR2IF               __at(0x1EB1C);	// @ (0x3D63 * 8 + 4)
#define                                 WR2IF_bit           _BIT_ACCESS(I2C2PIR,4)
// NVMCON1<WREN>
extern volatile __bit                   WREN                __at(0x1CF2A);	// @ (0x39E5 * 8 + 2)
#define                                 WREN_bit            _BIT_ACCESS(NVMCON1,2)
// NVMCON1<WRERR>
extern volatile __bit                   WRERR               __at(0x1CF2B);	// @ (0x39E5 * 8 + 3)
#define                                 WRERR_bit           _BIT_ACCESS(NVMCON1,3)
// SMT1STAT<WS>
extern volatile __bit                   WS                  __at(0x1F901);	// @ (0x3F20 * 8 + 1)
#define                                 WS_bit              _BIT_ACCESS(SMT1STAT,1)
// SMT1WIN<WSEL0>
extern volatile __bit                   WSEL0               __at(0x1F918);	// @ (0x3F23 * 8 + 0)
#define                                 WSEL0_bit           _BIT_ACCESS(SMT1WIN,0)
// SMT1WIN<WSEL1>
extern volatile __bit                   WSEL1               __at(0x1F919);	// @ (0x3F23 * 8 + 1)
#define                                 WSEL1_bit           _BIT_ACCESS(SMT1WIN,1)
// SMT1WIN<WSEL2>
extern volatile __bit                   WSEL2               __at(0x1F91A);	// @ (0x3F23 * 8 + 2)
#define                                 WSEL2_bit           _BIT_ACCESS(SMT1WIN,2)
// SMT1WIN<WSEL3>
extern volatile __bit                   WSEL3               __at(0x1F91B);	// @ (0x3F23 * 8 + 3)
#define                                 WSEL3_bit           _BIT_ACCESS(SMT1WIN,3)
// SMT1WIN<WSEL4>
extern volatile __bit                   WSEL4               __at(0x1F91C);	// @ (0x3F23 * 8 + 4)
#define                                 WSEL4_bit           _BIT_ACCESS(SMT1WIN,4)
// CRCXORL<X1>
extern volatile __bit                   X1                  __at(0x1CB31);	// @ (0x3966 * 8 + 1)
#define                                 X1_bit              _BIT_ACCESS(CRCXORL,1)
// CRCXORH<X10>
extern volatile __bit                   X10                 __at(0x1CB3A);	// @ (0x3967 * 8 + 2)
#define                                 X10_bit             _BIT_ACCESS(CRCXORH,2)
// CRCXORH<X11>
extern volatile __bit                   X11                 __at(0x1CB3B);	// @ (0x3967 * 8 + 3)
#define                                 X11_bit             _BIT_ACCESS(CRCXORH,3)
// CRCXORH<X12>
extern volatile __bit                   X12                 __at(0x1CB3C);	// @ (0x3967 * 8 + 4)
#define                                 X12_bit             _BIT_ACCESS(CRCXORH,4)
// CRCXORH<X13>
extern volatile __bit                   X13                 __at(0x1CB3D);	// @ (0x3967 * 8 + 5)
#define                                 X13_bit             _BIT_ACCESS(CRCXORH,5)
// CRCXORH<X14>
extern volatile __bit                   X14                 __at(0x1CB3E);	// @ (0x3967 * 8 + 6)
#define                                 X14_bit             _BIT_ACCESS(CRCXORH,6)
// CRCXORH<X15>
extern volatile __bit                   X15                 __at(0x1CB3F);	// @ (0x3967 * 8 + 7)
#define                                 X15_bit             _BIT_ACCESS(CRCXORH,7)
// CRCXORL<X2>
extern volatile __bit                   X2                  __at(0x1CB32);	// @ (0x3966 * 8 + 2)
#define                                 X2_bit              _BIT_ACCESS(CRCXORL,2)
// CRCXORL<X3>
extern volatile __bit                   X3                  __at(0x1CB33);	// @ (0x3966 * 8 + 3)
#define                                 X3_bit              _BIT_ACCESS(CRCXORL,3)
// CRCXORL<X4>
extern volatile __bit                   X4                  __at(0x1CB34);	// @ (0x3966 * 8 + 4)
#define                                 X4_bit              _BIT_ACCESS(CRCXORL,4)
// CRCXORL<X5>
extern volatile __bit                   X5                  __at(0x1CB35);	// @ (0x3966 * 8 + 5)
#define                                 X5_bit              _BIT_ACCESS(CRCXORL,5)
// CRCXORL<X6>
extern volatile __bit                   X6                  __at(0x1CB36);	// @ (0x3966 * 8 + 6)
#define                                 X6_bit              _BIT_ACCESS(CRCXORL,6)
// CRCXORL<X7>
extern volatile __bit                   X7                  __at(0x1CB37);	// @ (0x3966 * 8 + 7)
#define                                 X7_bit              _BIT_ACCESS(CRCXORL,7)
// CRCXORH<X8>
extern volatile __bit                   X8                  __at(0x1CB38);	// @ (0x3967 * 8 + 0)
#define                                 X8_bit              _BIT_ACCESS(CRCXORH,0)
// CRCXORH<X9>
extern volatile __bit                   X9                  __at(0x1CB39);	// @ (0x3967 * 8 + 1)
#define                                 X9_bit              _BIT_ACCESS(CRCXORH,1)
// PIE1<ZCDIE>
extern volatile __bit                   ZCDIE               __at(0x1CC89);	// @ (0x3991 * 8 + 1)
#define                                 ZCDIE_bit           _BIT_ACCESS(PIE1,1)
// PIR1<ZCDIF>
extern volatile __bit                   ZCDIF               __at(0x1CD09);	// @ (0x39A1 * 8 + 1)
#define                                 ZCDIF_bit           _BIT_ACCESS(PIR1,1)
// ZCDCON<ZCDINTN>
extern volatile __bit                   ZCDINTN             __at(0x1F618);	// @ (0x3EC3 * 8 + 0)
#define                                 ZCDINTN_bit         _BIT_ACCESS(ZCDCON,0)
// ZCDCON<ZCDINTP>
extern volatile __bit                   ZCDINTP             __at(0x1F619);	// @ (0x3EC3 * 8 + 1)
#define                                 ZCDINTP_bit         _BIT_ACCESS(ZCDCON,1)
// IPR1<ZCDIP>
extern volatile __bit                   ZCDIP               __at(0x1CC09);	// @ (0x3981 * 8 + 1)
#define                                 ZCDIP_bit           _BIT_ACCESS(IPR1,1)
// PMD2<ZCDMD>
extern volatile __bit                   ZCDMD               __at(0x1CE10);	// @ (0x39C2 * 8 + 0)
#define                                 ZCDMD_bit           _BIT_ACCESS(PMD2,0)
// ZCDCON<ZCDOUT>
extern volatile __bit                   ZCDOUT              __at(0x1F61D);	// @ (0x3EC3 * 8 + 5)
#define                                 ZCDOUT_bit          _BIT_ACCESS(ZCDCON,5)
// ZCDCON<ZCDPOL>
extern volatile __bit                   ZCDPOL              __at(0x1F61C);	// @ (0x3EC3 * 8 + 4)
#define                                 ZCDPOL_bit          _BIT_ACCESS(ZCDCON,4)
// ZCDCON<ZCDSEN>
extern volatile __bit                   ZCDSEN              __at(0x1F61F);	// @ (0x3EC3 * 8 + 7)
#define                                 ZCDSEN_bit          _BIT_ACCESS(ZCDCON,7)
// STATUS<ZERO>
extern volatile __bit                   ZERO                __at(0x1FEC2);	// @ (0x3FD8 * 8 + 2)
#define                                 ZERO_bit            _BIT_ACCESS(STATUS,2)
// PCON0<nBOR>
extern volatile __bit                   nBOR                __at(0x1FF80);	// @ (0x3FF0 * 8 + 0)
#define                                 nBOR_bit            _BIT_ACCESS(PCON0,0)
// PCON1<nMEMV>
extern volatile __bit                   nMEMV               __at(0x1FF89);	// @ (0x3FF1 * 8 + 1)
#define                                 nMEMV_bit           _BIT_ACCESS(PCON1,1)
// PCON0<nPOR>
extern volatile __bit                   nPOR                __at(0x1FF81);	// @ (0x3FF0 * 8 + 1)
#define                                 nPOR_bit            _BIT_ACCESS(PCON0,1)
// PCON0<nRI>
extern volatile __bit                   nRI                 __at(0x1FF82);	// @ (0x3FF0 * 8 + 2)
#define                                 nRI_bit             _BIT_ACCESS(PCON0,2)
// PCON0<nRMCLR>
extern volatile __bit                   nRMCLR              __at(0x1FF83);	// @ (0x3FF0 * 8 + 3)
#define                                 nRMCLR_bit          _BIT_ACCESS(PCON0,3)
// PCON0<nRWDT>
extern volatile __bit                   nRWDT               __at(0x1FF84);	// @ (0x3FF0 * 8 + 4)
#define                                 nRWDT_bit           _BIT_ACCESS(PCON0,4)
// PCON0<nWDTWV>
extern volatile __bit                   nWDTWV              __at(0x1FF85);	// @ (0x3FF0 * 8 + 5)
#define                                 nWDTWV_bit          _BIT_ACCESS(PCON0,5)

#endif // _PIC18LF27K42_H_
