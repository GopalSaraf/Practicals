// Generated 09/02/2023 GMT

/*
 * Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
 * All rights reserved.
 * 
 * This software is developed by Microchip Technology Inc. and its subsidiaries ("Microchip").
 * 
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 * 
 *     1. Redistributions of source code must retain the above copyright notice, this list of
 *        conditions and the following disclaimer.
 * 
 *     2. Redistributions in binary form must reproduce the above copyright notice, this list
 *        of conditions and the following disclaimer in the documentation and/or other
 *        materials provided with the distribution. Publication is not required when
 *        this file is used in an embedded application.
 * 
 *     3. Microchip's name may not be used to endorse or promote products derived from this
 *        software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _PIC18F25K40_H_
#define _PIC18F25K40_H_

/*
 * C Header file for the Microchip PIC Microcontroller
 * PIC18F25K40
 */
#ifndef _XC_H_
#warning Header file pic18f25k40.h included directly. Use #include <xc.h> instead.
#endif

#include <__at.h>

/*
 * Register Definitions
 */

// Register: PPSLOCK
#define PPSLOCK PPSLOCK
extern volatile unsigned char           PPSLOCK             __at(0xEA0);
#ifndef _LIB_BUILD
asm("PPSLOCK equ 0EA0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PPSLOCKED              :1;
    };
} PPSLOCKbits_t;
extern volatile PPSLOCKbits_t PPSLOCKbits __at(0xEA0);
// bitfield macros
#define _PPSLOCK_PPSLOCKED_POSN                             0x0
#define _PPSLOCK_PPSLOCKED_POSITION                         0x0
#define _PPSLOCK_PPSLOCKED_SIZE                             0x1
#define _PPSLOCK_PPSLOCKED_LENGTH                           0x1
#define _PPSLOCK_PPSLOCKED_MASK                             0x1

// Register: INT0PPS
#define INT0PPS INT0PPS
extern volatile unsigned char           INT0PPS             __at(0xEA1);
#ifndef _LIB_BUILD
asm("INT0PPS equ 0EA1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :1;
    };
    struct {
        unsigned INT0PPS                :4;
    };
    struct {
        unsigned INT0PPS0               :1;
        unsigned INT0PPS1               :1;
        unsigned INT0PPS2               :1;
        unsigned INT0PPS3               :1;
    };
} INT0PPSbits_t;
extern volatile INT0PPSbits_t INT0PPSbits __at(0xEA1);
// bitfield macros
#define _INT0PPS_PIN_POSN                                   0x0
#define _INT0PPS_PIN_POSITION                               0x0
#define _INT0PPS_PIN_SIZE                                   0x3
#define _INT0PPS_PIN_LENGTH                                 0x3
#define _INT0PPS_PIN_MASK                                   0x7
#define _INT0PPS_PORT_POSN                                  0x3
#define _INT0PPS_PORT_POSITION                              0x3
#define _INT0PPS_PORT_SIZE                                  0x1
#define _INT0PPS_PORT_LENGTH                                0x1
#define _INT0PPS_PORT_MASK                                  0x8
#define _INT0PPS_INT0PPS_POSN                               0x0
#define _INT0PPS_INT0PPS_POSITION                           0x0
#define _INT0PPS_INT0PPS_SIZE                               0x4
#define _INT0PPS_INT0PPS_LENGTH                             0x4
#define _INT0PPS_INT0PPS_MASK                               0xF
#define _INT0PPS_INT0PPS0_POSN                              0x0
#define _INT0PPS_INT0PPS0_POSITION                          0x0
#define _INT0PPS_INT0PPS0_SIZE                              0x1
#define _INT0PPS_INT0PPS0_LENGTH                            0x1
#define _INT0PPS_INT0PPS0_MASK                              0x1
#define _INT0PPS_INT0PPS1_POSN                              0x1
#define _INT0PPS_INT0PPS1_POSITION                          0x1
#define _INT0PPS_INT0PPS1_SIZE                              0x1
#define _INT0PPS_INT0PPS1_LENGTH                            0x1
#define _INT0PPS_INT0PPS1_MASK                              0x2
#define _INT0PPS_INT0PPS2_POSN                              0x2
#define _INT0PPS_INT0PPS2_POSITION                          0x2
#define _INT0PPS_INT0PPS2_SIZE                              0x1
#define _INT0PPS_INT0PPS2_LENGTH                            0x1
#define _INT0PPS_INT0PPS2_MASK                              0x4
#define _INT0PPS_INT0PPS3_POSN                              0x3
#define _INT0PPS_INT0PPS3_POSITION                          0x3
#define _INT0PPS_INT0PPS3_SIZE                              0x1
#define _INT0PPS_INT0PPS3_LENGTH                            0x1
#define _INT0PPS_INT0PPS3_MASK                              0x8

// Register: INT1PPS
#define INT1PPS INT1PPS
extern volatile unsigned char           INT1PPS             __at(0xEA2);
#ifndef _LIB_BUILD
asm("INT1PPS equ 0EA2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :1;
    };
    struct {
        unsigned INT1PPS                :4;
    };
    struct {
        unsigned INT1PPS0               :1;
        unsigned INT1PPS1               :1;
        unsigned INT1PPS2               :1;
        unsigned INT1PPS3               :1;
    };
} INT1PPSbits_t;
extern volatile INT1PPSbits_t INT1PPSbits __at(0xEA2);
// bitfield macros
#define _INT1PPS_PIN_POSN                                   0x0
#define _INT1PPS_PIN_POSITION                               0x0
#define _INT1PPS_PIN_SIZE                                   0x3
#define _INT1PPS_PIN_LENGTH                                 0x3
#define _INT1PPS_PIN_MASK                                   0x7
#define _INT1PPS_PORT_POSN                                  0x3
#define _INT1PPS_PORT_POSITION                              0x3
#define _INT1PPS_PORT_SIZE                                  0x1
#define _INT1PPS_PORT_LENGTH                                0x1
#define _INT1PPS_PORT_MASK                                  0x8
#define _INT1PPS_INT1PPS_POSN                               0x0
#define _INT1PPS_INT1PPS_POSITION                           0x0
#define _INT1PPS_INT1PPS_SIZE                               0x4
#define _INT1PPS_INT1PPS_LENGTH                             0x4
#define _INT1PPS_INT1PPS_MASK                               0xF
#define _INT1PPS_INT1PPS0_POSN                              0x0
#define _INT1PPS_INT1PPS0_POSITION                          0x0
#define _INT1PPS_INT1PPS0_SIZE                              0x1
#define _INT1PPS_INT1PPS0_LENGTH                            0x1
#define _INT1PPS_INT1PPS0_MASK                              0x1
#define _INT1PPS_INT1PPS1_POSN                              0x1
#define _INT1PPS_INT1PPS1_POSITION                          0x1
#define _INT1PPS_INT1PPS1_SIZE                              0x1
#define _INT1PPS_INT1PPS1_LENGTH                            0x1
#define _INT1PPS_INT1PPS1_MASK                              0x2
#define _INT1PPS_INT1PPS2_POSN                              0x2
#define _INT1PPS_INT1PPS2_POSITION                          0x2
#define _INT1PPS_INT1PPS2_SIZE                              0x1
#define _INT1PPS_INT1PPS2_LENGTH                            0x1
#define _INT1PPS_INT1PPS2_MASK                              0x4
#define _INT1PPS_INT1PPS3_POSN                              0x3
#define _INT1PPS_INT1PPS3_POSITION                          0x3
#define _INT1PPS_INT1PPS3_SIZE                              0x1
#define _INT1PPS_INT1PPS3_LENGTH                            0x1
#define _INT1PPS_INT1PPS3_MASK                              0x8

// Register: INT2PPS
#define INT2PPS INT2PPS
extern volatile unsigned char           INT2PPS             __at(0xEA3);
#ifndef _LIB_BUILD
asm("INT2PPS equ 0EA3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :1;
    };
    struct {
        unsigned INT2PPS                :4;
    };
    struct {
        unsigned INT2PPS0               :1;
        unsigned INT2PPS1               :1;
        unsigned INT2PPS2               :1;
        unsigned INT2PPS3               :1;
    };
} INT2PPSbits_t;
extern volatile INT2PPSbits_t INT2PPSbits __at(0xEA3);
// bitfield macros
#define _INT2PPS_PIN_POSN                                   0x0
#define _INT2PPS_PIN_POSITION                               0x0
#define _INT2PPS_PIN_SIZE                                   0x3
#define _INT2PPS_PIN_LENGTH                                 0x3
#define _INT2PPS_PIN_MASK                                   0x7
#define _INT2PPS_PORT_POSN                                  0x3
#define _INT2PPS_PORT_POSITION                              0x3
#define _INT2PPS_PORT_SIZE                                  0x1
#define _INT2PPS_PORT_LENGTH                                0x1
#define _INT2PPS_PORT_MASK                                  0x8
#define _INT2PPS_INT2PPS_POSN                               0x0
#define _INT2PPS_INT2PPS_POSITION                           0x0
#define _INT2PPS_INT2PPS_SIZE                               0x4
#define _INT2PPS_INT2PPS_LENGTH                             0x4
#define _INT2PPS_INT2PPS_MASK                               0xF
#define _INT2PPS_INT2PPS0_POSN                              0x0
#define _INT2PPS_INT2PPS0_POSITION                          0x0
#define _INT2PPS_INT2PPS0_SIZE                              0x1
#define _INT2PPS_INT2PPS0_LENGTH                            0x1
#define _INT2PPS_INT2PPS0_MASK                              0x1
#define _INT2PPS_INT2PPS1_POSN                              0x1
#define _INT2PPS_INT2PPS1_POSITION                          0x1
#define _INT2PPS_INT2PPS1_SIZE                              0x1
#define _INT2PPS_INT2PPS1_LENGTH                            0x1
#define _INT2PPS_INT2PPS1_MASK                              0x2
#define _INT2PPS_INT2PPS2_POSN                              0x2
#define _INT2PPS_INT2PPS2_POSITION                          0x2
#define _INT2PPS_INT2PPS2_SIZE                              0x1
#define _INT2PPS_INT2PPS2_LENGTH                            0x1
#define _INT2PPS_INT2PPS2_MASK                              0x4
#define _INT2PPS_INT2PPS3_POSN                              0x3
#define _INT2PPS_INT2PPS3_POSITION                          0x3
#define _INT2PPS_INT2PPS3_SIZE                              0x1
#define _INT2PPS_INT2PPS3_LENGTH                            0x1
#define _INT2PPS_INT2PPS3_MASK                              0x8

// Register: T0CKIPPS
#define T0CKIPPS T0CKIPPS
extern volatile unsigned char           T0CKIPPS            __at(0xEA4);
#ifndef _LIB_BUILD
asm("T0CKIPPS equ 0EA4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :1;
    };
    struct {
        unsigned T0CKIPPS               :5;
    };
    struct {
        unsigned T0CKIPPS0              :1;
        unsigned T0CKIPPS1              :1;
        unsigned T0CKIPPS2              :1;
        unsigned T0CKIPPS3              :1;
    };
} T0CKIPPSbits_t;
extern volatile T0CKIPPSbits_t T0CKIPPSbits __at(0xEA4);
// bitfield macros
#define _T0CKIPPS_PIN_POSN                                  0x0
#define _T0CKIPPS_PIN_POSITION                              0x0
#define _T0CKIPPS_PIN_SIZE                                  0x3
#define _T0CKIPPS_PIN_LENGTH                                0x3
#define _T0CKIPPS_PIN_MASK                                  0x7
#define _T0CKIPPS_PORT_POSN                                 0x3
#define _T0CKIPPS_PORT_POSITION                             0x3
#define _T0CKIPPS_PORT_SIZE                                 0x1
#define _T0CKIPPS_PORT_LENGTH                               0x1
#define _T0CKIPPS_PORT_MASK                                 0x8
#define _T0CKIPPS_T0CKIPPS_POSN                             0x0
#define _T0CKIPPS_T0CKIPPS_POSITION                         0x0
#define _T0CKIPPS_T0CKIPPS_SIZE                             0x5
#define _T0CKIPPS_T0CKIPPS_LENGTH                           0x5
#define _T0CKIPPS_T0CKIPPS_MASK                             0x1F
#define _T0CKIPPS_T0CKIPPS0_POSN                            0x0
#define _T0CKIPPS_T0CKIPPS0_POSITION                        0x0
#define _T0CKIPPS_T0CKIPPS0_SIZE                            0x1
#define _T0CKIPPS_T0CKIPPS0_LENGTH                          0x1
#define _T0CKIPPS_T0CKIPPS0_MASK                            0x1
#define _T0CKIPPS_T0CKIPPS1_POSN                            0x1
#define _T0CKIPPS_T0CKIPPS1_POSITION                        0x1
#define _T0CKIPPS_T0CKIPPS1_SIZE                            0x1
#define _T0CKIPPS_T0CKIPPS1_LENGTH                          0x1
#define _T0CKIPPS_T0CKIPPS1_MASK                            0x2
#define _T0CKIPPS_T0CKIPPS2_POSN                            0x2
#define _T0CKIPPS_T0CKIPPS2_POSITION                        0x2
#define _T0CKIPPS_T0CKIPPS2_SIZE                            0x1
#define _T0CKIPPS_T0CKIPPS2_LENGTH                          0x1
#define _T0CKIPPS_T0CKIPPS2_MASK                            0x4
#define _T0CKIPPS_T0CKIPPS3_POSN                            0x3
#define _T0CKIPPS_T0CKIPPS3_POSITION                        0x3
#define _T0CKIPPS_T0CKIPPS3_SIZE                            0x1
#define _T0CKIPPS_T0CKIPPS3_LENGTH                          0x1
#define _T0CKIPPS_T0CKIPPS3_MASK                            0x8

// Register: T1CKIPPS
#define T1CKIPPS T1CKIPPS
extern volatile unsigned char           T1CKIPPS            __at(0xEA5);
#ifndef _LIB_BUILD
asm("T1CKIPPS equ 0EA5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned T1CKIPPS               :5;
    };
    struct {
        unsigned T1CKIPPS0              :1;
        unsigned T1CKIPPS1              :1;
        unsigned T1CKIPPS2              :1;
        unsigned T1CKIPPS3              :1;
        unsigned T1CKIPPS4              :1;
    };
} T1CKIPPSbits_t;
extern volatile T1CKIPPSbits_t T1CKIPPSbits __at(0xEA5);
// bitfield macros
#define _T1CKIPPS_PIN_POSN                                  0x0
#define _T1CKIPPS_PIN_POSITION                              0x0
#define _T1CKIPPS_PIN_SIZE                                  0x3
#define _T1CKIPPS_PIN_LENGTH                                0x3
#define _T1CKIPPS_PIN_MASK                                  0x7
#define _T1CKIPPS_PORT_POSN                                 0x3
#define _T1CKIPPS_PORT_POSITION                             0x3
#define _T1CKIPPS_PORT_SIZE                                 0x2
#define _T1CKIPPS_PORT_LENGTH                               0x2
#define _T1CKIPPS_PORT_MASK                                 0x18
#define _T1CKIPPS_T1CKIPPS_POSN                             0x0
#define _T1CKIPPS_T1CKIPPS_POSITION                         0x0
#define _T1CKIPPS_T1CKIPPS_SIZE                             0x5
#define _T1CKIPPS_T1CKIPPS_LENGTH                           0x5
#define _T1CKIPPS_T1CKIPPS_MASK                             0x1F
#define _T1CKIPPS_T1CKIPPS0_POSN                            0x0
#define _T1CKIPPS_T1CKIPPS0_POSITION                        0x0
#define _T1CKIPPS_T1CKIPPS0_SIZE                            0x1
#define _T1CKIPPS_T1CKIPPS0_LENGTH                          0x1
#define _T1CKIPPS_T1CKIPPS0_MASK                            0x1
#define _T1CKIPPS_T1CKIPPS1_POSN                            0x1
#define _T1CKIPPS_T1CKIPPS1_POSITION                        0x1
#define _T1CKIPPS_T1CKIPPS1_SIZE                            0x1
#define _T1CKIPPS_T1CKIPPS1_LENGTH                          0x1
#define _T1CKIPPS_T1CKIPPS1_MASK                            0x2
#define _T1CKIPPS_T1CKIPPS2_POSN                            0x2
#define _T1CKIPPS_T1CKIPPS2_POSITION                        0x2
#define _T1CKIPPS_T1CKIPPS2_SIZE                            0x1
#define _T1CKIPPS_T1CKIPPS2_LENGTH                          0x1
#define _T1CKIPPS_T1CKIPPS2_MASK                            0x4
#define _T1CKIPPS_T1CKIPPS3_POSN                            0x3
#define _T1CKIPPS_T1CKIPPS3_POSITION                        0x3
#define _T1CKIPPS_T1CKIPPS3_SIZE                            0x1
#define _T1CKIPPS_T1CKIPPS3_LENGTH                          0x1
#define _T1CKIPPS_T1CKIPPS3_MASK                            0x8
#define _T1CKIPPS_T1CKIPPS4_POSN                            0x4
#define _T1CKIPPS_T1CKIPPS4_POSITION                        0x4
#define _T1CKIPPS_T1CKIPPS4_SIZE                            0x1
#define _T1CKIPPS_T1CKIPPS4_LENGTH                          0x1
#define _T1CKIPPS_T1CKIPPS4_MASK                            0x10

// Register: T1GPPS
#define T1GPPS T1GPPS
extern volatile unsigned char           T1GPPS              __at(0xEA6);
#ifndef _LIB_BUILD
asm("T1GPPS equ 0EA6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned T1GPPS                 :5;
    };
    struct {
        unsigned T1GPPS0                :1;
        unsigned T1GPPS1                :1;
        unsigned T1GPPS2                :1;
        unsigned T1GPPS3                :1;
        unsigned T1GPPS4                :1;
    };
} T1GPPSbits_t;
extern volatile T1GPPSbits_t T1GPPSbits __at(0xEA6);
// bitfield macros
#define _T1GPPS_PIN_POSN                                    0x0
#define _T1GPPS_PIN_POSITION                                0x0
#define _T1GPPS_PIN_SIZE                                    0x3
#define _T1GPPS_PIN_LENGTH                                  0x3
#define _T1GPPS_PIN_MASK                                    0x7
#define _T1GPPS_PORT_POSN                                   0x3
#define _T1GPPS_PORT_POSITION                               0x3
#define _T1GPPS_PORT_SIZE                                   0x2
#define _T1GPPS_PORT_LENGTH                                 0x2
#define _T1GPPS_PORT_MASK                                   0x18
#define _T1GPPS_T1GPPS_POSN                                 0x0
#define _T1GPPS_T1GPPS_POSITION                             0x0
#define _T1GPPS_T1GPPS_SIZE                                 0x5
#define _T1GPPS_T1GPPS_LENGTH                               0x5
#define _T1GPPS_T1GPPS_MASK                                 0x1F
#define _T1GPPS_T1GPPS0_POSN                                0x0
#define _T1GPPS_T1GPPS0_POSITION                            0x0
#define _T1GPPS_T1GPPS0_SIZE                                0x1
#define _T1GPPS_T1GPPS0_LENGTH                              0x1
#define _T1GPPS_T1GPPS0_MASK                                0x1
#define _T1GPPS_T1GPPS1_POSN                                0x1
#define _T1GPPS_T1GPPS1_POSITION                            0x1
#define _T1GPPS_T1GPPS1_SIZE                                0x1
#define _T1GPPS_T1GPPS1_LENGTH                              0x1
#define _T1GPPS_T1GPPS1_MASK                                0x2
#define _T1GPPS_T1GPPS2_POSN                                0x2
#define _T1GPPS_T1GPPS2_POSITION                            0x2
#define _T1GPPS_T1GPPS2_SIZE                                0x1
#define _T1GPPS_T1GPPS2_LENGTH                              0x1
#define _T1GPPS_T1GPPS2_MASK                                0x4
#define _T1GPPS_T1GPPS3_POSN                                0x3
#define _T1GPPS_T1GPPS3_POSITION                            0x3
#define _T1GPPS_T1GPPS3_SIZE                                0x1
#define _T1GPPS_T1GPPS3_LENGTH                              0x1
#define _T1GPPS_T1GPPS3_MASK                                0x8
#define _T1GPPS_T1GPPS4_POSN                                0x4
#define _T1GPPS_T1GPPS4_POSITION                            0x4
#define _T1GPPS_T1GPPS4_SIZE                                0x1
#define _T1GPPS_T1GPPS4_LENGTH                              0x1
#define _T1GPPS_T1GPPS4_MASK                                0x10

// Register: T3CKIPPS
#define T3CKIPPS T3CKIPPS
extern volatile unsigned char           T3CKIPPS            __at(0xEA7);
#ifndef _LIB_BUILD
asm("T3CKIPPS equ 0EA7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned T3CKIPPS               :5;
    };
    struct {
        unsigned T3CKIPPS0              :1;
        unsigned T3CKIPPS1              :1;
        unsigned T3CKIPPS2              :1;
        unsigned T3CKIPPS3              :1;
        unsigned T3CKIPPS4              :1;
    };
} T3CKIPPSbits_t;
extern volatile T3CKIPPSbits_t T3CKIPPSbits __at(0xEA7);
// bitfield macros
#define _T3CKIPPS_PIN_POSN                                  0x0
#define _T3CKIPPS_PIN_POSITION                              0x0
#define _T3CKIPPS_PIN_SIZE                                  0x3
#define _T3CKIPPS_PIN_LENGTH                                0x3
#define _T3CKIPPS_PIN_MASK                                  0x7
#define _T3CKIPPS_PORT_POSN                                 0x3
#define _T3CKIPPS_PORT_POSITION                             0x3
#define _T3CKIPPS_PORT_SIZE                                 0x2
#define _T3CKIPPS_PORT_LENGTH                               0x2
#define _T3CKIPPS_PORT_MASK                                 0x18
#define _T3CKIPPS_T3CKIPPS_POSN                             0x0
#define _T3CKIPPS_T3CKIPPS_POSITION                         0x0
#define _T3CKIPPS_T3CKIPPS_SIZE                             0x5
#define _T3CKIPPS_T3CKIPPS_LENGTH                           0x5
#define _T3CKIPPS_T3CKIPPS_MASK                             0x1F
#define _T3CKIPPS_T3CKIPPS0_POSN                            0x0
#define _T3CKIPPS_T3CKIPPS0_POSITION                        0x0
#define _T3CKIPPS_T3CKIPPS0_SIZE                            0x1
#define _T3CKIPPS_T3CKIPPS0_LENGTH                          0x1
#define _T3CKIPPS_T3CKIPPS0_MASK                            0x1
#define _T3CKIPPS_T3CKIPPS1_POSN                            0x1
#define _T3CKIPPS_T3CKIPPS1_POSITION                        0x1
#define _T3CKIPPS_T3CKIPPS1_SIZE                            0x1
#define _T3CKIPPS_T3CKIPPS1_LENGTH                          0x1
#define _T3CKIPPS_T3CKIPPS1_MASK                            0x2
#define _T3CKIPPS_T3CKIPPS2_POSN                            0x2
#define _T3CKIPPS_T3CKIPPS2_POSITION                        0x2
#define _T3CKIPPS_T3CKIPPS2_SIZE                            0x1
#define _T3CKIPPS_T3CKIPPS2_LENGTH                          0x1
#define _T3CKIPPS_T3CKIPPS2_MASK                            0x4
#define _T3CKIPPS_T3CKIPPS3_POSN                            0x3
#define _T3CKIPPS_T3CKIPPS3_POSITION                        0x3
#define _T3CKIPPS_T3CKIPPS3_SIZE                            0x1
#define _T3CKIPPS_T3CKIPPS3_LENGTH                          0x1
#define _T3CKIPPS_T3CKIPPS3_MASK                            0x8
#define _T3CKIPPS_T3CKIPPS4_POSN                            0x4
#define _T3CKIPPS_T3CKIPPS4_POSITION                        0x4
#define _T3CKIPPS_T3CKIPPS4_SIZE                            0x1
#define _T3CKIPPS_T3CKIPPS4_LENGTH                          0x1
#define _T3CKIPPS_T3CKIPPS4_MASK                            0x10

// Register: T3GPPS
#define T3GPPS T3GPPS
extern volatile unsigned char           T3GPPS              __at(0xEA8);
#ifndef _LIB_BUILD
asm("T3GPPS equ 0EA8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned T3GPPS                 :5;
    };
    struct {
        unsigned T3GPPS0                :1;
        unsigned T3GPPS1                :1;
        unsigned T3GPPS2                :1;
        unsigned T3GPPS3                :1;
        unsigned T3GPPS4                :1;
    };
} T3GPPSbits_t;
extern volatile T3GPPSbits_t T3GPPSbits __at(0xEA8);
// bitfield macros
#define _T3GPPS_PIN_POSN                                    0x0
#define _T3GPPS_PIN_POSITION                                0x0
#define _T3GPPS_PIN_SIZE                                    0x3
#define _T3GPPS_PIN_LENGTH                                  0x3
#define _T3GPPS_PIN_MASK                                    0x7
#define _T3GPPS_PORT_POSN                                   0x3
#define _T3GPPS_PORT_POSITION                               0x3
#define _T3GPPS_PORT_SIZE                                   0x2
#define _T3GPPS_PORT_LENGTH                                 0x2
#define _T3GPPS_PORT_MASK                                   0x18
#define _T3GPPS_T3GPPS_POSN                                 0x0
#define _T3GPPS_T3GPPS_POSITION                             0x0
#define _T3GPPS_T3GPPS_SIZE                                 0x5
#define _T3GPPS_T3GPPS_LENGTH                               0x5
#define _T3GPPS_T3GPPS_MASK                                 0x1F
#define _T3GPPS_T3GPPS0_POSN                                0x0
#define _T3GPPS_T3GPPS0_POSITION                            0x0
#define _T3GPPS_T3GPPS0_SIZE                                0x1
#define _T3GPPS_T3GPPS0_LENGTH                              0x1
#define _T3GPPS_T3GPPS0_MASK                                0x1
#define _T3GPPS_T3GPPS1_POSN                                0x1
#define _T3GPPS_T3GPPS1_POSITION                            0x1
#define _T3GPPS_T3GPPS1_SIZE                                0x1
#define _T3GPPS_T3GPPS1_LENGTH                              0x1
#define _T3GPPS_T3GPPS1_MASK                                0x2
#define _T3GPPS_T3GPPS2_POSN                                0x2
#define _T3GPPS_T3GPPS2_POSITION                            0x2
#define _T3GPPS_T3GPPS2_SIZE                                0x1
#define _T3GPPS_T3GPPS2_LENGTH                              0x1
#define _T3GPPS_T3GPPS2_MASK                                0x4
#define _T3GPPS_T3GPPS3_POSN                                0x3
#define _T3GPPS_T3GPPS3_POSITION                            0x3
#define _T3GPPS_T3GPPS3_SIZE                                0x1
#define _T3GPPS_T3GPPS3_LENGTH                              0x1
#define _T3GPPS_T3GPPS3_MASK                                0x8
#define _T3GPPS_T3GPPS4_POSN                                0x4
#define _T3GPPS_T3GPPS4_POSITION                            0x4
#define _T3GPPS_T3GPPS4_SIZE                                0x1
#define _T3GPPS_T3GPPS4_LENGTH                              0x1
#define _T3GPPS_T3GPPS4_MASK                                0x10

// Register: T5CKIPPS
#define T5CKIPPS T5CKIPPS
extern volatile unsigned char           T5CKIPPS            __at(0xEA9);
#ifndef _LIB_BUILD
asm("T5CKIPPS equ 0EA9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned T5CKIPPS               :5;
    };
    struct {
        unsigned T5CKIPPS0              :1;
        unsigned T5CKIPPS1              :1;
        unsigned T5CKIPPS2              :1;
        unsigned T5CKIPPS3              :1;
        unsigned T5CKIPPS4              :1;
    };
} T5CKIPPSbits_t;
extern volatile T5CKIPPSbits_t T5CKIPPSbits __at(0xEA9);
// bitfield macros
#define _T5CKIPPS_PIN_POSN                                  0x0
#define _T5CKIPPS_PIN_POSITION                              0x0
#define _T5CKIPPS_PIN_SIZE                                  0x3
#define _T5CKIPPS_PIN_LENGTH                                0x3
#define _T5CKIPPS_PIN_MASK                                  0x7
#define _T5CKIPPS_PORT_POSN                                 0x3
#define _T5CKIPPS_PORT_POSITION                             0x3
#define _T5CKIPPS_PORT_SIZE                                 0x2
#define _T5CKIPPS_PORT_LENGTH                               0x2
#define _T5CKIPPS_PORT_MASK                                 0x18
#define _T5CKIPPS_T5CKIPPS_POSN                             0x0
#define _T5CKIPPS_T5CKIPPS_POSITION                         0x0
#define _T5CKIPPS_T5CKIPPS_SIZE                             0x5
#define _T5CKIPPS_T5CKIPPS_LENGTH                           0x5
#define _T5CKIPPS_T5CKIPPS_MASK                             0x1F
#define _T5CKIPPS_T5CKIPPS0_POSN                            0x0
#define _T5CKIPPS_T5CKIPPS0_POSITION                        0x0
#define _T5CKIPPS_T5CKIPPS0_SIZE                            0x1
#define _T5CKIPPS_T5CKIPPS0_LENGTH                          0x1
#define _T5CKIPPS_T5CKIPPS0_MASK                            0x1
#define _T5CKIPPS_T5CKIPPS1_POSN                            0x1
#define _T5CKIPPS_T5CKIPPS1_POSITION                        0x1
#define _T5CKIPPS_T5CKIPPS1_SIZE                            0x1
#define _T5CKIPPS_T5CKIPPS1_LENGTH                          0x1
#define _T5CKIPPS_T5CKIPPS1_MASK                            0x2
#define _T5CKIPPS_T5CKIPPS2_POSN                            0x2
#define _T5CKIPPS_T5CKIPPS2_POSITION                        0x2
#define _T5CKIPPS_T5CKIPPS2_SIZE                            0x1
#define _T5CKIPPS_T5CKIPPS2_LENGTH                          0x1
#define _T5CKIPPS_T5CKIPPS2_MASK                            0x4
#define _T5CKIPPS_T5CKIPPS3_POSN                            0x3
#define _T5CKIPPS_T5CKIPPS3_POSITION                        0x3
#define _T5CKIPPS_T5CKIPPS3_SIZE                            0x1
#define _T5CKIPPS_T5CKIPPS3_LENGTH                          0x1
#define _T5CKIPPS_T5CKIPPS3_MASK                            0x8
#define _T5CKIPPS_T5CKIPPS4_POSN                            0x4
#define _T5CKIPPS_T5CKIPPS4_POSITION                        0x4
#define _T5CKIPPS_T5CKIPPS4_SIZE                            0x1
#define _T5CKIPPS_T5CKIPPS4_LENGTH                          0x1
#define _T5CKIPPS_T5CKIPPS4_MASK                            0x10

// Register: T5GPPS
#define T5GPPS T5GPPS
extern volatile unsigned char           T5GPPS              __at(0xEAA);
#ifndef _LIB_BUILD
asm("T5GPPS equ 0EAAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned T5GPPS                 :5;
    };
    struct {
        unsigned T5GPPS0                :1;
        unsigned T5GPPS1                :1;
        unsigned T5GPPS2                :1;
        unsigned T5GPPS3                :1;
        unsigned T5GPPS4                :1;
    };
} T5GPPSbits_t;
extern volatile T5GPPSbits_t T5GPPSbits __at(0xEAA);
// bitfield macros
#define _T5GPPS_PIN_POSN                                    0x0
#define _T5GPPS_PIN_POSITION                                0x0
#define _T5GPPS_PIN_SIZE                                    0x3
#define _T5GPPS_PIN_LENGTH                                  0x3
#define _T5GPPS_PIN_MASK                                    0x7
#define _T5GPPS_PORT_POSN                                   0x3
#define _T5GPPS_PORT_POSITION                               0x3
#define _T5GPPS_PORT_SIZE                                   0x2
#define _T5GPPS_PORT_LENGTH                                 0x2
#define _T5GPPS_PORT_MASK                                   0x18
#define _T5GPPS_T5GPPS_POSN                                 0x0
#define _T5GPPS_T5GPPS_POSITION                             0x0
#define _T5GPPS_T5GPPS_SIZE                                 0x5
#define _T5GPPS_T5GPPS_LENGTH                               0x5
#define _T5GPPS_T5GPPS_MASK                                 0x1F
#define _T5GPPS_T5GPPS0_POSN                                0x0
#define _T5GPPS_T5GPPS0_POSITION                            0x0
#define _T5GPPS_T5GPPS0_SIZE                                0x1
#define _T5GPPS_T5GPPS0_LENGTH                              0x1
#define _T5GPPS_T5GPPS0_MASK                                0x1
#define _T5GPPS_T5GPPS1_POSN                                0x1
#define _T5GPPS_T5GPPS1_POSITION                            0x1
#define _T5GPPS_T5GPPS1_SIZE                                0x1
#define _T5GPPS_T5GPPS1_LENGTH                              0x1
#define _T5GPPS_T5GPPS1_MASK                                0x2
#define _T5GPPS_T5GPPS2_POSN                                0x2
#define _T5GPPS_T5GPPS2_POSITION                            0x2
#define _T5GPPS_T5GPPS2_SIZE                                0x1
#define _T5GPPS_T5GPPS2_LENGTH                              0x1
#define _T5GPPS_T5GPPS2_MASK                                0x4
#define _T5GPPS_T5GPPS3_POSN                                0x3
#define _T5GPPS_T5GPPS3_POSITION                            0x3
#define _T5GPPS_T5GPPS3_SIZE                                0x1
#define _T5GPPS_T5GPPS3_LENGTH                              0x1
#define _T5GPPS_T5GPPS3_MASK                                0x8
#define _T5GPPS_T5GPPS4_POSN                                0x4
#define _T5GPPS_T5GPPS4_POSITION                            0x4
#define _T5GPPS_T5GPPS4_SIZE                                0x1
#define _T5GPPS_T5GPPS4_LENGTH                              0x1
#define _T5GPPS_T5GPPS4_MASK                                0x10

// Register: T2INPPS
#define T2INPPS T2INPPS
extern volatile unsigned char           T2INPPS             __at(0xEAB);
#ifndef _LIB_BUILD
asm("T2INPPS equ 0EABh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned T2INPPS                :5;
    };
    struct {
        unsigned T2INPPS0               :1;
        unsigned T2INPPS1               :1;
        unsigned T2INPPS2               :1;
        unsigned T2INPPS3               :1;
        unsigned T2INPPS4               :1;
    };
} T2INPPSbits_t;
extern volatile T2INPPSbits_t T2INPPSbits __at(0xEAB);
// bitfield macros
#define _T2INPPS_PIN_POSN                                   0x0
#define _T2INPPS_PIN_POSITION                               0x0
#define _T2INPPS_PIN_SIZE                                   0x3
#define _T2INPPS_PIN_LENGTH                                 0x3
#define _T2INPPS_PIN_MASK                                   0x7
#define _T2INPPS_PORT_POSN                                  0x3
#define _T2INPPS_PORT_POSITION                              0x3
#define _T2INPPS_PORT_SIZE                                  0x2
#define _T2INPPS_PORT_LENGTH                                0x2
#define _T2INPPS_PORT_MASK                                  0x18
#define _T2INPPS_T2INPPS_POSN                               0x0
#define _T2INPPS_T2INPPS_POSITION                           0x0
#define _T2INPPS_T2INPPS_SIZE                               0x5
#define _T2INPPS_T2INPPS_LENGTH                             0x5
#define _T2INPPS_T2INPPS_MASK                               0x1F
#define _T2INPPS_T2INPPS0_POSN                              0x0
#define _T2INPPS_T2INPPS0_POSITION                          0x0
#define _T2INPPS_T2INPPS0_SIZE                              0x1
#define _T2INPPS_T2INPPS0_LENGTH                            0x1
#define _T2INPPS_T2INPPS0_MASK                              0x1
#define _T2INPPS_T2INPPS1_POSN                              0x1
#define _T2INPPS_T2INPPS1_POSITION                          0x1
#define _T2INPPS_T2INPPS1_SIZE                              0x1
#define _T2INPPS_T2INPPS1_LENGTH                            0x1
#define _T2INPPS_T2INPPS1_MASK                              0x2
#define _T2INPPS_T2INPPS2_POSN                              0x2
#define _T2INPPS_T2INPPS2_POSITION                          0x2
#define _T2INPPS_T2INPPS2_SIZE                              0x1
#define _T2INPPS_T2INPPS2_LENGTH                            0x1
#define _T2INPPS_T2INPPS2_MASK                              0x4
#define _T2INPPS_T2INPPS3_POSN                              0x3
#define _T2INPPS_T2INPPS3_POSITION                          0x3
#define _T2INPPS_T2INPPS3_SIZE                              0x1
#define _T2INPPS_T2INPPS3_LENGTH                            0x1
#define _T2INPPS_T2INPPS3_MASK                              0x8
#define _T2INPPS_T2INPPS4_POSN                              0x4
#define _T2INPPS_T2INPPS4_POSITION                          0x4
#define _T2INPPS_T2INPPS4_SIZE                              0x1
#define _T2INPPS_T2INPPS4_LENGTH                            0x1
#define _T2INPPS_T2INPPS4_MASK                              0x10

// Register: T4INPPS
#define T4INPPS T4INPPS
extern volatile unsigned char           T4INPPS             __at(0xEAC);
#ifndef _LIB_BUILD
asm("T4INPPS equ 0EACh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned T4INPPS                :5;
    };
    struct {
        unsigned T4INPPS0               :1;
        unsigned T4INPPS1               :1;
        unsigned T4INPPS2               :1;
        unsigned T4INPPS3               :1;
        unsigned T4INPPS4               :1;
    };
} T4INPPSbits_t;
extern volatile T4INPPSbits_t T4INPPSbits __at(0xEAC);
// bitfield macros
#define _T4INPPS_PIN_POSN                                   0x0
#define _T4INPPS_PIN_POSITION                               0x0
#define _T4INPPS_PIN_SIZE                                   0x3
#define _T4INPPS_PIN_LENGTH                                 0x3
#define _T4INPPS_PIN_MASK                                   0x7
#define _T4INPPS_PORT_POSN                                  0x3
#define _T4INPPS_PORT_POSITION                              0x3
#define _T4INPPS_PORT_SIZE                                  0x2
#define _T4INPPS_PORT_LENGTH                                0x2
#define _T4INPPS_PORT_MASK                                  0x18
#define _T4INPPS_T4INPPS_POSN                               0x0
#define _T4INPPS_T4INPPS_POSITION                           0x0
#define _T4INPPS_T4INPPS_SIZE                               0x5
#define _T4INPPS_T4INPPS_LENGTH                             0x5
#define _T4INPPS_T4INPPS_MASK                               0x1F
#define _T4INPPS_T4INPPS0_POSN                              0x0
#define _T4INPPS_T4INPPS0_POSITION                          0x0
#define _T4INPPS_T4INPPS0_SIZE                              0x1
#define _T4INPPS_T4INPPS0_LENGTH                            0x1
#define _T4INPPS_T4INPPS0_MASK                              0x1
#define _T4INPPS_T4INPPS1_POSN                              0x1
#define _T4INPPS_T4INPPS1_POSITION                          0x1
#define _T4INPPS_T4INPPS1_SIZE                              0x1
#define _T4INPPS_T4INPPS1_LENGTH                            0x1
#define _T4INPPS_T4INPPS1_MASK                              0x2
#define _T4INPPS_T4INPPS2_POSN                              0x2
#define _T4INPPS_T4INPPS2_POSITION                          0x2
#define _T4INPPS_T4INPPS2_SIZE                              0x1
#define _T4INPPS_T4INPPS2_LENGTH                            0x1
#define _T4INPPS_T4INPPS2_MASK                              0x4
#define _T4INPPS_T4INPPS3_POSN                              0x3
#define _T4INPPS_T4INPPS3_POSITION                          0x3
#define _T4INPPS_T4INPPS3_SIZE                              0x1
#define _T4INPPS_T4INPPS3_LENGTH                            0x1
#define _T4INPPS_T4INPPS3_MASK                              0x8
#define _T4INPPS_T4INPPS4_POSN                              0x4
#define _T4INPPS_T4INPPS4_POSITION                          0x4
#define _T4INPPS_T4INPPS4_SIZE                              0x1
#define _T4INPPS_T4INPPS4_LENGTH                            0x1
#define _T4INPPS_T4INPPS4_MASK                              0x10

// Register: T6INPPS
#define T6INPPS T6INPPS
extern volatile unsigned char           T6INPPS             __at(0xEAD);
#ifndef _LIB_BUILD
asm("T6INPPS equ 0EADh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned T6INPPS                :5;
    };
    struct {
        unsigned T6INPPS0               :1;
        unsigned T6INPPS1               :1;
        unsigned T6INPPS2               :1;
        unsigned T6INPPS3               :1;
        unsigned T6INPPS4               :1;
    };
} T6INPPSbits_t;
extern volatile T6INPPSbits_t T6INPPSbits __at(0xEAD);
// bitfield macros
#define _T6INPPS_PIN_POSN                                   0x0
#define _T6INPPS_PIN_POSITION                               0x0
#define _T6INPPS_PIN_SIZE                                   0x3
#define _T6INPPS_PIN_LENGTH                                 0x3
#define _T6INPPS_PIN_MASK                                   0x7
#define _T6INPPS_PORT_POSN                                  0x3
#define _T6INPPS_PORT_POSITION                              0x3
#define _T6INPPS_PORT_SIZE                                  0x2
#define _T6INPPS_PORT_LENGTH                                0x2
#define _T6INPPS_PORT_MASK                                  0x18
#define _T6INPPS_T6INPPS_POSN                               0x0
#define _T6INPPS_T6INPPS_POSITION                           0x0
#define _T6INPPS_T6INPPS_SIZE                               0x5
#define _T6INPPS_T6INPPS_LENGTH                             0x5
#define _T6INPPS_T6INPPS_MASK                               0x1F
#define _T6INPPS_T6INPPS0_POSN                              0x0
#define _T6INPPS_T6INPPS0_POSITION                          0x0
#define _T6INPPS_T6INPPS0_SIZE                              0x1
#define _T6INPPS_T6INPPS0_LENGTH                            0x1
#define _T6INPPS_T6INPPS0_MASK                              0x1
#define _T6INPPS_T6INPPS1_POSN                              0x1
#define _T6INPPS_T6INPPS1_POSITION                          0x1
#define _T6INPPS_T6INPPS1_SIZE                              0x1
#define _T6INPPS_T6INPPS1_LENGTH                            0x1
#define _T6INPPS_T6INPPS1_MASK                              0x2
#define _T6INPPS_T6INPPS2_POSN                              0x2
#define _T6INPPS_T6INPPS2_POSITION                          0x2
#define _T6INPPS_T6INPPS2_SIZE                              0x1
#define _T6INPPS_T6INPPS2_LENGTH                            0x1
#define _T6INPPS_T6INPPS2_MASK                              0x4
#define _T6INPPS_T6INPPS3_POSN                              0x3
#define _T6INPPS_T6INPPS3_POSITION                          0x3
#define _T6INPPS_T6INPPS3_SIZE                              0x1
#define _T6INPPS_T6INPPS3_LENGTH                            0x1
#define _T6INPPS_T6INPPS3_MASK                              0x8
#define _T6INPPS_T6INPPS4_POSN                              0x4
#define _T6INPPS_T6INPPS4_POSITION                          0x4
#define _T6INPPS_T6INPPS4_SIZE                              0x1
#define _T6INPPS_T6INPPS4_LENGTH                            0x1
#define _T6INPPS_T6INPPS4_MASK                              0x10

// Register: ADACTPPS
#define ADACTPPS ADACTPPS
extern volatile unsigned char           ADACTPPS            __at(0xEAE);
#ifndef _LIB_BUILD
asm("ADACTPPS equ 0EAEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned ADACTPPS               :5;
    };
    struct {
        unsigned ADACTPPS0              :1;
        unsigned ADACTPPS1              :1;
        unsigned ADACTPPS2              :1;
        unsigned ADACTPPS3              :1;
        unsigned ADACTPPS4              :1;
    };
} ADACTPPSbits_t;
extern volatile ADACTPPSbits_t ADACTPPSbits __at(0xEAE);
// bitfield macros
#define _ADACTPPS_PIN_POSN                                  0x0
#define _ADACTPPS_PIN_POSITION                              0x0
#define _ADACTPPS_PIN_SIZE                                  0x3
#define _ADACTPPS_PIN_LENGTH                                0x3
#define _ADACTPPS_PIN_MASK                                  0x7
#define _ADACTPPS_PORT_POSN                                 0x3
#define _ADACTPPS_PORT_POSITION                             0x3
#define _ADACTPPS_PORT_SIZE                                 0x2
#define _ADACTPPS_PORT_LENGTH                               0x2
#define _ADACTPPS_PORT_MASK                                 0x18
#define _ADACTPPS_ADACTPPS_POSN                             0x0
#define _ADACTPPS_ADACTPPS_POSITION                         0x0
#define _ADACTPPS_ADACTPPS_SIZE                             0x5
#define _ADACTPPS_ADACTPPS_LENGTH                           0x5
#define _ADACTPPS_ADACTPPS_MASK                             0x1F
#define _ADACTPPS_ADACTPPS0_POSN                            0x0
#define _ADACTPPS_ADACTPPS0_POSITION                        0x0
#define _ADACTPPS_ADACTPPS0_SIZE                            0x1
#define _ADACTPPS_ADACTPPS0_LENGTH                          0x1
#define _ADACTPPS_ADACTPPS0_MASK                            0x1
#define _ADACTPPS_ADACTPPS1_POSN                            0x1
#define _ADACTPPS_ADACTPPS1_POSITION                        0x1
#define _ADACTPPS_ADACTPPS1_SIZE                            0x1
#define _ADACTPPS_ADACTPPS1_LENGTH                          0x1
#define _ADACTPPS_ADACTPPS1_MASK                            0x2
#define _ADACTPPS_ADACTPPS2_POSN                            0x2
#define _ADACTPPS_ADACTPPS2_POSITION                        0x2
#define _ADACTPPS_ADACTPPS2_SIZE                            0x1
#define _ADACTPPS_ADACTPPS2_LENGTH                          0x1
#define _ADACTPPS_ADACTPPS2_MASK                            0x4
#define _ADACTPPS_ADACTPPS3_POSN                            0x3
#define _ADACTPPS_ADACTPPS3_POSITION                        0x3
#define _ADACTPPS_ADACTPPS3_SIZE                            0x1
#define _ADACTPPS_ADACTPPS3_LENGTH                          0x1
#define _ADACTPPS_ADACTPPS3_MASK                            0x8
#define _ADACTPPS_ADACTPPS4_POSN                            0x4
#define _ADACTPPS_ADACTPPS4_POSITION                        0x4
#define _ADACTPPS_ADACTPPS4_SIZE                            0x1
#define _ADACTPPS_ADACTPPS4_LENGTH                          0x1
#define _ADACTPPS_ADACTPPS4_MASK                            0x10

// Register: CCP1PPS
#define CCP1PPS CCP1PPS
extern volatile unsigned char           CCP1PPS             __at(0xEAF);
#ifndef _LIB_BUILD
asm("CCP1PPS equ 0EAFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned CCP1PPS                :5;
    };
    struct {
        unsigned CCP1PPS0               :1;
        unsigned CCP1PPS1               :1;
        unsigned CCP1PPS2               :1;
        unsigned CCP1PPS3               :1;
        unsigned CCP1PPS4               :1;
    };
} CCP1PPSbits_t;
extern volatile CCP1PPSbits_t CCP1PPSbits __at(0xEAF);
// bitfield macros
#define _CCP1PPS_PIN_POSN                                   0x0
#define _CCP1PPS_PIN_POSITION                               0x0
#define _CCP1PPS_PIN_SIZE                                   0x3
#define _CCP1PPS_PIN_LENGTH                                 0x3
#define _CCP1PPS_PIN_MASK                                   0x7
#define _CCP1PPS_PORT_POSN                                  0x3
#define _CCP1PPS_PORT_POSITION                              0x3
#define _CCP1PPS_PORT_SIZE                                  0x2
#define _CCP1PPS_PORT_LENGTH                                0x2
#define _CCP1PPS_PORT_MASK                                  0x18
#define _CCP1PPS_CCP1PPS_POSN                               0x0
#define _CCP1PPS_CCP1PPS_POSITION                           0x0
#define _CCP1PPS_CCP1PPS_SIZE                               0x5
#define _CCP1PPS_CCP1PPS_LENGTH                             0x5
#define _CCP1PPS_CCP1PPS_MASK                               0x1F
#define _CCP1PPS_CCP1PPS0_POSN                              0x0
#define _CCP1PPS_CCP1PPS0_POSITION                          0x0
#define _CCP1PPS_CCP1PPS0_SIZE                              0x1
#define _CCP1PPS_CCP1PPS0_LENGTH                            0x1
#define _CCP1PPS_CCP1PPS0_MASK                              0x1
#define _CCP1PPS_CCP1PPS1_POSN                              0x1
#define _CCP1PPS_CCP1PPS1_POSITION                          0x1
#define _CCP1PPS_CCP1PPS1_SIZE                              0x1
#define _CCP1PPS_CCP1PPS1_LENGTH                            0x1
#define _CCP1PPS_CCP1PPS1_MASK                              0x2
#define _CCP1PPS_CCP1PPS2_POSN                              0x2
#define _CCP1PPS_CCP1PPS2_POSITION                          0x2
#define _CCP1PPS_CCP1PPS2_SIZE                              0x1
#define _CCP1PPS_CCP1PPS2_LENGTH                            0x1
#define _CCP1PPS_CCP1PPS2_MASK                              0x4
#define _CCP1PPS_CCP1PPS3_POSN                              0x3
#define _CCP1PPS_CCP1PPS3_POSITION                          0x3
#define _CCP1PPS_CCP1PPS3_SIZE                              0x1
#define _CCP1PPS_CCP1PPS3_LENGTH                            0x1
#define _CCP1PPS_CCP1PPS3_MASK                              0x8
#define _CCP1PPS_CCP1PPS4_POSN                              0x4
#define _CCP1PPS_CCP1PPS4_POSITION                          0x4
#define _CCP1PPS_CCP1PPS4_SIZE                              0x1
#define _CCP1PPS_CCP1PPS4_LENGTH                            0x1
#define _CCP1PPS_CCP1PPS4_MASK                              0x10

// Register: CCP2PPS
#define CCP2PPS CCP2PPS
extern volatile unsigned char           CCP2PPS             __at(0xEB0);
#ifndef _LIB_BUILD
asm("CCP2PPS equ 0EB0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned CCP2PPS                :5;
    };
    struct {
        unsigned CCP2PPS0               :1;
        unsigned CCP2PPS1               :1;
        unsigned CCP2PPS2               :1;
        unsigned CCP2PPS3               :1;
        unsigned CCP2PPS4               :1;
    };
} CCP2PPSbits_t;
extern volatile CCP2PPSbits_t CCP2PPSbits __at(0xEB0);
// bitfield macros
#define _CCP2PPS_PIN_POSN                                   0x0
#define _CCP2PPS_PIN_POSITION                               0x0
#define _CCP2PPS_PIN_SIZE                                   0x3
#define _CCP2PPS_PIN_LENGTH                                 0x3
#define _CCP2PPS_PIN_MASK                                   0x7
#define _CCP2PPS_PORT_POSN                                  0x3
#define _CCP2PPS_PORT_POSITION                              0x3
#define _CCP2PPS_PORT_SIZE                                  0x2
#define _CCP2PPS_PORT_LENGTH                                0x2
#define _CCP2PPS_PORT_MASK                                  0x18
#define _CCP2PPS_CCP2PPS_POSN                               0x0
#define _CCP2PPS_CCP2PPS_POSITION                           0x0
#define _CCP2PPS_CCP2PPS_SIZE                               0x5
#define _CCP2PPS_CCP2PPS_LENGTH                             0x5
#define _CCP2PPS_CCP2PPS_MASK                               0x1F
#define _CCP2PPS_CCP2PPS0_POSN                              0x0
#define _CCP2PPS_CCP2PPS0_POSITION                          0x0
#define _CCP2PPS_CCP2PPS0_SIZE                              0x1
#define _CCP2PPS_CCP2PPS0_LENGTH                            0x1
#define _CCP2PPS_CCP2PPS0_MASK                              0x1
#define _CCP2PPS_CCP2PPS1_POSN                              0x1
#define _CCP2PPS_CCP2PPS1_POSITION                          0x1
#define _CCP2PPS_CCP2PPS1_SIZE                              0x1
#define _CCP2PPS_CCP2PPS1_LENGTH                            0x1
#define _CCP2PPS_CCP2PPS1_MASK                              0x2
#define _CCP2PPS_CCP2PPS2_POSN                              0x2
#define _CCP2PPS_CCP2PPS2_POSITION                          0x2
#define _CCP2PPS_CCP2PPS2_SIZE                              0x1
#define _CCP2PPS_CCP2PPS2_LENGTH                            0x1
#define _CCP2PPS_CCP2PPS2_MASK                              0x4
#define _CCP2PPS_CCP2PPS3_POSN                              0x3
#define _CCP2PPS_CCP2PPS3_POSITION                          0x3
#define _CCP2PPS_CCP2PPS3_SIZE                              0x1
#define _CCP2PPS_CCP2PPS3_LENGTH                            0x1
#define _CCP2PPS_CCP2PPS3_MASK                              0x8
#define _CCP2PPS_CCP2PPS4_POSN                              0x4
#define _CCP2PPS_CCP2PPS4_POSITION                          0x4
#define _CCP2PPS_CCP2PPS4_SIZE                              0x1
#define _CCP2PPS_CCP2PPS4_LENGTH                            0x1
#define _CCP2PPS_CCP2PPS4_MASK                              0x10

// Register: CWG1PPS
#define CWG1PPS CWG1PPS
extern volatile unsigned char           CWG1PPS             __at(0xEB1);
#ifndef _LIB_BUILD
asm("CWG1PPS equ 0EB1h");
#endif
// aliases
extern volatile unsigned char           CWGINPPS            __at(0xEB1);
#ifndef _LIB_BUILD
asm("CWGINPPS equ 0EB1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned CWGINPPS               :5;
    };
    struct {
        unsigned CWGINPPS0              :1;
        unsigned CWGINPPS1              :1;
        unsigned CWGINPPS2              :1;
        unsigned CWGINPPS3              :1;
        unsigned CWGINPPS4              :1;
    };
    struct {
        unsigned CWG1INPPS              :5;
    };
    struct {
        unsigned CWG1INPPS0             :1;
        unsigned CWG1INPPS1             :1;
        unsigned CWG1INPPS2             :1;
        unsigned CWG1INPPS3             :1;
        unsigned CWG1INPPS4             :1;
    };
} CWG1PPSbits_t;
extern volatile CWG1PPSbits_t CWG1PPSbits __at(0xEB1);
// bitfield macros
#define _CWG1PPS_PIN_POSN                                   0x0
#define _CWG1PPS_PIN_POSITION                               0x0
#define _CWG1PPS_PIN_SIZE                                   0x3
#define _CWG1PPS_PIN_LENGTH                                 0x3
#define _CWG1PPS_PIN_MASK                                   0x7
#define _CWG1PPS_PORT_POSN                                  0x3
#define _CWG1PPS_PORT_POSITION                              0x3
#define _CWG1PPS_PORT_SIZE                                  0x2
#define _CWG1PPS_PORT_LENGTH                                0x2
#define _CWG1PPS_PORT_MASK                                  0x18
#define _CWG1PPS_CWGINPPS_POSN                              0x0
#define _CWG1PPS_CWGINPPS_POSITION                          0x0
#define _CWG1PPS_CWGINPPS_SIZE                              0x5
#define _CWG1PPS_CWGINPPS_LENGTH                            0x5
#define _CWG1PPS_CWGINPPS_MASK                              0x1F
#define _CWG1PPS_CWGINPPS0_POSN                             0x0
#define _CWG1PPS_CWGINPPS0_POSITION                         0x0
#define _CWG1PPS_CWGINPPS0_SIZE                             0x1
#define _CWG1PPS_CWGINPPS0_LENGTH                           0x1
#define _CWG1PPS_CWGINPPS0_MASK                             0x1
#define _CWG1PPS_CWGINPPS1_POSN                             0x1
#define _CWG1PPS_CWGINPPS1_POSITION                         0x1
#define _CWG1PPS_CWGINPPS1_SIZE                             0x1
#define _CWG1PPS_CWGINPPS1_LENGTH                           0x1
#define _CWG1PPS_CWGINPPS1_MASK                             0x2
#define _CWG1PPS_CWGINPPS2_POSN                             0x2
#define _CWG1PPS_CWGINPPS2_POSITION                         0x2
#define _CWG1PPS_CWGINPPS2_SIZE                             0x1
#define _CWG1PPS_CWGINPPS2_LENGTH                           0x1
#define _CWG1PPS_CWGINPPS2_MASK                             0x4
#define _CWG1PPS_CWGINPPS3_POSN                             0x3
#define _CWG1PPS_CWGINPPS3_POSITION                         0x3
#define _CWG1PPS_CWGINPPS3_SIZE                             0x1
#define _CWG1PPS_CWGINPPS3_LENGTH                           0x1
#define _CWG1PPS_CWGINPPS3_MASK                             0x8
#define _CWG1PPS_CWGINPPS4_POSN                             0x4
#define _CWG1PPS_CWGINPPS4_POSITION                         0x4
#define _CWG1PPS_CWGINPPS4_SIZE                             0x1
#define _CWG1PPS_CWGINPPS4_LENGTH                           0x1
#define _CWG1PPS_CWGINPPS4_MASK                             0x10
#define _CWG1PPS_CWG1INPPS_POSN                             0x0
#define _CWG1PPS_CWG1INPPS_POSITION                         0x0
#define _CWG1PPS_CWG1INPPS_SIZE                             0x5
#define _CWG1PPS_CWG1INPPS_LENGTH                           0x5
#define _CWG1PPS_CWG1INPPS_MASK                             0x1F
#define _CWG1PPS_CWG1INPPS0_POSN                            0x0
#define _CWG1PPS_CWG1INPPS0_POSITION                        0x0
#define _CWG1PPS_CWG1INPPS0_SIZE                            0x1
#define _CWG1PPS_CWG1INPPS0_LENGTH                          0x1
#define _CWG1PPS_CWG1INPPS0_MASK                            0x1
#define _CWG1PPS_CWG1INPPS1_POSN                            0x1
#define _CWG1PPS_CWG1INPPS1_POSITION                        0x1
#define _CWG1PPS_CWG1INPPS1_SIZE                            0x1
#define _CWG1PPS_CWG1INPPS1_LENGTH                          0x1
#define _CWG1PPS_CWG1INPPS1_MASK                            0x2
#define _CWG1PPS_CWG1INPPS2_POSN                            0x2
#define _CWG1PPS_CWG1INPPS2_POSITION                        0x2
#define _CWG1PPS_CWG1INPPS2_SIZE                            0x1
#define _CWG1PPS_CWG1INPPS2_LENGTH                          0x1
#define _CWG1PPS_CWG1INPPS2_MASK                            0x4
#define _CWG1PPS_CWG1INPPS3_POSN                            0x3
#define _CWG1PPS_CWG1INPPS3_POSITION                        0x3
#define _CWG1PPS_CWG1INPPS3_SIZE                            0x1
#define _CWG1PPS_CWG1INPPS3_LENGTH                          0x1
#define _CWG1PPS_CWG1INPPS3_MASK                            0x8
#define _CWG1PPS_CWG1INPPS4_POSN                            0x4
#define _CWG1PPS_CWG1INPPS4_POSITION                        0x4
#define _CWG1PPS_CWG1INPPS4_SIZE                            0x1
#define _CWG1PPS_CWG1INPPS4_LENGTH                          0x1
#define _CWG1PPS_CWG1INPPS4_MASK                            0x10
// alias bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned CWGINPPS               :5;
    };
    struct {
        unsigned CWGINPPS0              :1;
        unsigned CWGINPPS1              :1;
        unsigned CWGINPPS2              :1;
        unsigned CWGINPPS3              :1;
        unsigned CWGINPPS4              :1;
    };
    struct {
        unsigned CWG1INPPS              :5;
    };
    struct {
        unsigned CWG1INPPS0             :1;
        unsigned CWG1INPPS1             :1;
        unsigned CWG1INPPS2             :1;
        unsigned CWG1INPPS3             :1;
        unsigned CWG1INPPS4             :1;
    };
} CWGINPPSbits_t;
extern volatile CWGINPPSbits_t CWGINPPSbits __at(0xEB1);
// bitfield macros
#define _CWGINPPS_PIN_POSN                                  0x0
#define _CWGINPPS_PIN_POSITION                              0x0
#define _CWGINPPS_PIN_SIZE                                  0x3
#define _CWGINPPS_PIN_LENGTH                                0x3
#define _CWGINPPS_PIN_MASK                                  0x7
#define _CWGINPPS_PORT_POSN                                 0x3
#define _CWGINPPS_PORT_POSITION                             0x3
#define _CWGINPPS_PORT_SIZE                                 0x2
#define _CWGINPPS_PORT_LENGTH                               0x2
#define _CWGINPPS_PORT_MASK                                 0x18
#define _CWGINPPS_CWGINPPS_POSN                             0x0
#define _CWGINPPS_CWGINPPS_POSITION                         0x0
#define _CWGINPPS_CWGINPPS_SIZE                             0x5
#define _CWGINPPS_CWGINPPS_LENGTH                           0x5
#define _CWGINPPS_CWGINPPS_MASK                             0x1F
#define _CWGINPPS_CWGINPPS0_POSN                            0x0
#define _CWGINPPS_CWGINPPS0_POSITION                        0x0
#define _CWGINPPS_CWGINPPS0_SIZE                            0x1
#define _CWGINPPS_CWGINPPS0_LENGTH                          0x1
#define _CWGINPPS_CWGINPPS0_MASK                            0x1
#define _CWGINPPS_CWGINPPS1_POSN                            0x1
#define _CWGINPPS_CWGINPPS1_POSITION                        0x1
#define _CWGINPPS_CWGINPPS1_SIZE                            0x1
#define _CWGINPPS_CWGINPPS1_LENGTH                          0x1
#define _CWGINPPS_CWGINPPS1_MASK                            0x2
#define _CWGINPPS_CWGINPPS2_POSN                            0x2
#define _CWGINPPS_CWGINPPS2_POSITION                        0x2
#define _CWGINPPS_CWGINPPS2_SIZE                            0x1
#define _CWGINPPS_CWGINPPS2_LENGTH                          0x1
#define _CWGINPPS_CWGINPPS2_MASK                            0x4
#define _CWGINPPS_CWGINPPS3_POSN                            0x3
#define _CWGINPPS_CWGINPPS3_POSITION                        0x3
#define _CWGINPPS_CWGINPPS3_SIZE                            0x1
#define _CWGINPPS_CWGINPPS3_LENGTH                          0x1
#define _CWGINPPS_CWGINPPS3_MASK                            0x8
#define _CWGINPPS_CWGINPPS4_POSN                            0x4
#define _CWGINPPS_CWGINPPS4_POSITION                        0x4
#define _CWGINPPS_CWGINPPS4_SIZE                            0x1
#define _CWGINPPS_CWGINPPS4_LENGTH                          0x1
#define _CWGINPPS_CWGINPPS4_MASK                            0x10
#define _CWGINPPS_CWG1INPPS_POSN                            0x0
#define _CWGINPPS_CWG1INPPS_POSITION                        0x0
#define _CWGINPPS_CWG1INPPS_SIZE                            0x5
#define _CWGINPPS_CWG1INPPS_LENGTH                          0x5
#define _CWGINPPS_CWG1INPPS_MASK                            0x1F
#define _CWGINPPS_CWG1INPPS0_POSN                           0x0
#define _CWGINPPS_CWG1INPPS0_POSITION                       0x0
#define _CWGINPPS_CWG1INPPS0_SIZE                           0x1
#define _CWGINPPS_CWG1INPPS0_LENGTH                         0x1
#define _CWGINPPS_CWG1INPPS0_MASK                           0x1
#define _CWGINPPS_CWG1INPPS1_POSN                           0x1
#define _CWGINPPS_CWG1INPPS1_POSITION                       0x1
#define _CWGINPPS_CWG1INPPS1_SIZE                           0x1
#define _CWGINPPS_CWG1INPPS1_LENGTH                         0x1
#define _CWGINPPS_CWG1INPPS1_MASK                           0x2
#define _CWGINPPS_CWG1INPPS2_POSN                           0x2
#define _CWGINPPS_CWG1INPPS2_POSITION                       0x2
#define _CWGINPPS_CWG1INPPS2_SIZE                           0x1
#define _CWGINPPS_CWG1INPPS2_LENGTH                         0x1
#define _CWGINPPS_CWG1INPPS2_MASK                           0x4
#define _CWGINPPS_CWG1INPPS3_POSN                           0x3
#define _CWGINPPS_CWG1INPPS3_POSITION                       0x3
#define _CWGINPPS_CWG1INPPS3_SIZE                           0x1
#define _CWGINPPS_CWG1INPPS3_LENGTH                         0x1
#define _CWGINPPS_CWG1INPPS3_MASK                           0x8
#define _CWGINPPS_CWG1INPPS4_POSN                           0x4
#define _CWGINPPS_CWG1INPPS4_POSITION                       0x4
#define _CWGINPPS_CWG1INPPS4_SIZE                           0x1
#define _CWGINPPS_CWG1INPPS4_LENGTH                         0x1
#define _CWGINPPS_CWG1INPPS4_MASK                           0x10

// Register: MDCARLPPS
#define MDCARLPPS MDCARLPPS
extern volatile unsigned char           MDCARLPPS           __at(0xEB2);
#ifndef _LIB_BUILD
asm("MDCARLPPS equ 0EB2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned MDCARLPPS              :5;
    };
    struct {
        unsigned MDCARLPPS0             :1;
        unsigned MDCARLPPS1             :1;
        unsigned MDCARLPPS2             :1;
        unsigned MDCARLPPS3             :1;
        unsigned MDCARLPPS4             :1;
    };
} MDCARLPPSbits_t;
extern volatile MDCARLPPSbits_t MDCARLPPSbits __at(0xEB2);
// bitfield macros
#define _MDCARLPPS_PIN_POSN                                 0x0
#define _MDCARLPPS_PIN_POSITION                             0x0
#define _MDCARLPPS_PIN_SIZE                                 0x3
#define _MDCARLPPS_PIN_LENGTH                               0x3
#define _MDCARLPPS_PIN_MASK                                 0x7
#define _MDCARLPPS_PORT_POSN                                0x3
#define _MDCARLPPS_PORT_POSITION                            0x3
#define _MDCARLPPS_PORT_SIZE                                0x2
#define _MDCARLPPS_PORT_LENGTH                              0x2
#define _MDCARLPPS_PORT_MASK                                0x18
#define _MDCARLPPS_MDCARLPPS_POSN                           0x0
#define _MDCARLPPS_MDCARLPPS_POSITION                       0x0
#define _MDCARLPPS_MDCARLPPS_SIZE                           0x5
#define _MDCARLPPS_MDCARLPPS_LENGTH                         0x5
#define _MDCARLPPS_MDCARLPPS_MASK                           0x1F
#define _MDCARLPPS_MDCARLPPS0_POSN                          0x0
#define _MDCARLPPS_MDCARLPPS0_POSITION                      0x0
#define _MDCARLPPS_MDCARLPPS0_SIZE                          0x1
#define _MDCARLPPS_MDCARLPPS0_LENGTH                        0x1
#define _MDCARLPPS_MDCARLPPS0_MASK                          0x1
#define _MDCARLPPS_MDCARLPPS1_POSN                          0x1
#define _MDCARLPPS_MDCARLPPS1_POSITION                      0x1
#define _MDCARLPPS_MDCARLPPS1_SIZE                          0x1
#define _MDCARLPPS_MDCARLPPS1_LENGTH                        0x1
#define _MDCARLPPS_MDCARLPPS1_MASK                          0x2
#define _MDCARLPPS_MDCARLPPS2_POSN                          0x2
#define _MDCARLPPS_MDCARLPPS2_POSITION                      0x2
#define _MDCARLPPS_MDCARLPPS2_SIZE                          0x1
#define _MDCARLPPS_MDCARLPPS2_LENGTH                        0x1
#define _MDCARLPPS_MDCARLPPS2_MASK                          0x4
#define _MDCARLPPS_MDCARLPPS3_POSN                          0x3
#define _MDCARLPPS_MDCARLPPS3_POSITION                      0x3
#define _MDCARLPPS_MDCARLPPS3_SIZE                          0x1
#define _MDCARLPPS_MDCARLPPS3_LENGTH                        0x1
#define _MDCARLPPS_MDCARLPPS3_MASK                          0x8
#define _MDCARLPPS_MDCARLPPS4_POSN                          0x4
#define _MDCARLPPS_MDCARLPPS4_POSITION                      0x4
#define _MDCARLPPS_MDCARLPPS4_SIZE                          0x1
#define _MDCARLPPS_MDCARLPPS4_LENGTH                        0x1
#define _MDCARLPPS_MDCARLPPS4_MASK                          0x10

// Register: MDCARHPPS
#define MDCARHPPS MDCARHPPS
extern volatile unsigned char           MDCARHPPS           __at(0xEB3);
#ifndef _LIB_BUILD
asm("MDCARHPPS equ 0EB3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned MDCARHPPS              :5;
    };
    struct {
        unsigned MDCARHPPS0             :1;
        unsigned MDCARHPPS1             :1;
        unsigned MDCARHPPS2             :1;
        unsigned MDCARHPPS3             :1;
        unsigned MDCARHPPS4             :1;
    };
} MDCARHPPSbits_t;
extern volatile MDCARHPPSbits_t MDCARHPPSbits __at(0xEB3);
// bitfield macros
#define _MDCARHPPS_PIN_POSN                                 0x0
#define _MDCARHPPS_PIN_POSITION                             0x0
#define _MDCARHPPS_PIN_SIZE                                 0x3
#define _MDCARHPPS_PIN_LENGTH                               0x3
#define _MDCARHPPS_PIN_MASK                                 0x7
#define _MDCARHPPS_PORT_POSN                                0x3
#define _MDCARHPPS_PORT_POSITION                            0x3
#define _MDCARHPPS_PORT_SIZE                                0x2
#define _MDCARHPPS_PORT_LENGTH                              0x2
#define _MDCARHPPS_PORT_MASK                                0x18
#define _MDCARHPPS_MDCARHPPS_POSN                           0x0
#define _MDCARHPPS_MDCARHPPS_POSITION                       0x0
#define _MDCARHPPS_MDCARHPPS_SIZE                           0x5
#define _MDCARHPPS_MDCARHPPS_LENGTH                         0x5
#define _MDCARHPPS_MDCARHPPS_MASK                           0x1F
#define _MDCARHPPS_MDCARHPPS0_POSN                          0x0
#define _MDCARHPPS_MDCARHPPS0_POSITION                      0x0
#define _MDCARHPPS_MDCARHPPS0_SIZE                          0x1
#define _MDCARHPPS_MDCARHPPS0_LENGTH                        0x1
#define _MDCARHPPS_MDCARHPPS0_MASK                          0x1
#define _MDCARHPPS_MDCARHPPS1_POSN                          0x1
#define _MDCARHPPS_MDCARHPPS1_POSITION                      0x1
#define _MDCARHPPS_MDCARHPPS1_SIZE                          0x1
#define _MDCARHPPS_MDCARHPPS1_LENGTH                        0x1
#define _MDCARHPPS_MDCARHPPS1_MASK                          0x2
#define _MDCARHPPS_MDCARHPPS2_POSN                          0x2
#define _MDCARHPPS_MDCARHPPS2_POSITION                      0x2
#define _MDCARHPPS_MDCARHPPS2_SIZE                          0x1
#define _MDCARHPPS_MDCARHPPS2_LENGTH                        0x1
#define _MDCARHPPS_MDCARHPPS2_MASK                          0x4
#define _MDCARHPPS_MDCARHPPS3_POSN                          0x3
#define _MDCARHPPS_MDCARHPPS3_POSITION                      0x3
#define _MDCARHPPS_MDCARHPPS3_SIZE                          0x1
#define _MDCARHPPS_MDCARHPPS3_LENGTH                        0x1
#define _MDCARHPPS_MDCARHPPS3_MASK                          0x8
#define _MDCARHPPS_MDCARHPPS4_POSN                          0x4
#define _MDCARHPPS_MDCARHPPS4_POSITION                      0x4
#define _MDCARHPPS_MDCARHPPS4_SIZE                          0x1
#define _MDCARHPPS_MDCARHPPS4_LENGTH                        0x1
#define _MDCARHPPS_MDCARHPPS4_MASK                          0x10

// Register: MDSRCPPS
#define MDSRCPPS MDSRCPPS
extern volatile unsigned char           MDSRCPPS            __at(0xEB4);
#ifndef _LIB_BUILD
asm("MDSRCPPS equ 0EB4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned MDSRCPPS               :5;
    };
    struct {
        unsigned MDSRCPPS0              :1;
        unsigned MDSRCPPS1              :1;
        unsigned MDSRCPPS2              :1;
        unsigned MDSRCPPS3              :1;
        unsigned MDSRCPPS4              :1;
    };
} MDSRCPPSbits_t;
extern volatile MDSRCPPSbits_t MDSRCPPSbits __at(0xEB4);
// bitfield macros
#define _MDSRCPPS_PIN_POSN                                  0x0
#define _MDSRCPPS_PIN_POSITION                              0x0
#define _MDSRCPPS_PIN_SIZE                                  0x3
#define _MDSRCPPS_PIN_LENGTH                                0x3
#define _MDSRCPPS_PIN_MASK                                  0x7
#define _MDSRCPPS_PORT_POSN                                 0x3
#define _MDSRCPPS_PORT_POSITION                             0x3
#define _MDSRCPPS_PORT_SIZE                                 0x2
#define _MDSRCPPS_PORT_LENGTH                               0x2
#define _MDSRCPPS_PORT_MASK                                 0x18
#define _MDSRCPPS_MDSRCPPS_POSN                             0x0
#define _MDSRCPPS_MDSRCPPS_POSITION                         0x0
#define _MDSRCPPS_MDSRCPPS_SIZE                             0x5
#define _MDSRCPPS_MDSRCPPS_LENGTH                           0x5
#define _MDSRCPPS_MDSRCPPS_MASK                             0x1F
#define _MDSRCPPS_MDSRCPPS0_POSN                            0x0
#define _MDSRCPPS_MDSRCPPS0_POSITION                        0x0
#define _MDSRCPPS_MDSRCPPS0_SIZE                            0x1
#define _MDSRCPPS_MDSRCPPS0_LENGTH                          0x1
#define _MDSRCPPS_MDSRCPPS0_MASK                            0x1
#define _MDSRCPPS_MDSRCPPS1_POSN                            0x1
#define _MDSRCPPS_MDSRCPPS1_POSITION                        0x1
#define _MDSRCPPS_MDSRCPPS1_SIZE                            0x1
#define _MDSRCPPS_MDSRCPPS1_LENGTH                          0x1
#define _MDSRCPPS_MDSRCPPS1_MASK                            0x2
#define _MDSRCPPS_MDSRCPPS2_POSN                            0x2
#define _MDSRCPPS_MDSRCPPS2_POSITION                        0x2
#define _MDSRCPPS_MDSRCPPS2_SIZE                            0x1
#define _MDSRCPPS_MDSRCPPS2_LENGTH                          0x1
#define _MDSRCPPS_MDSRCPPS2_MASK                            0x4
#define _MDSRCPPS_MDSRCPPS3_POSN                            0x3
#define _MDSRCPPS_MDSRCPPS3_POSITION                        0x3
#define _MDSRCPPS_MDSRCPPS3_SIZE                            0x1
#define _MDSRCPPS_MDSRCPPS3_LENGTH                          0x1
#define _MDSRCPPS_MDSRCPPS3_MASK                            0x8
#define _MDSRCPPS_MDSRCPPS4_POSN                            0x4
#define _MDSRCPPS_MDSRCPPS4_POSITION                        0x4
#define _MDSRCPPS_MDSRCPPS4_SIZE                            0x1
#define _MDSRCPPS_MDSRCPPS4_LENGTH                          0x1
#define _MDSRCPPS_MDSRCPPS4_MASK                            0x10

// Register: RX1PPS
#define RX1PPS RX1PPS
extern volatile unsigned char           RX1PPS              __at(0xEB5);
#ifndef _LIB_BUILD
asm("RX1PPS equ 0EB5h");
#endif
// aliases
extern volatile unsigned char           RXPPS               __at(0xEB5);
#ifndef _LIB_BUILD
asm("RXPPS equ 0EB5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned RXPPS                  :5;
    };
    struct {
        unsigned RXPPS0                 :1;
        unsigned RXPPS1                 :1;
        unsigned RXPPS2                 :1;
        unsigned RXPPS3                 :1;
        unsigned RXPPS4                 :1;
    };
    struct {
        unsigned RX1PPS                 :5;
    };
    struct {
        unsigned RX1PPS0                :1;
        unsigned RX1PPS1                :1;
        unsigned RX1PPS2                :1;
        unsigned RX1PPS3                :1;
        unsigned RX1PPS4                :1;
    };
} RX1PPSbits_t;
extern volatile RX1PPSbits_t RX1PPSbits __at(0xEB5);
// bitfield macros
#define _RX1PPS_PIN_POSN                                    0x0
#define _RX1PPS_PIN_POSITION                                0x0
#define _RX1PPS_PIN_SIZE                                    0x3
#define _RX1PPS_PIN_LENGTH                                  0x3
#define _RX1PPS_PIN_MASK                                    0x7
#define _RX1PPS_PORT_POSN                                   0x3
#define _RX1PPS_PORT_POSITION                               0x3
#define _RX1PPS_PORT_SIZE                                   0x2
#define _RX1PPS_PORT_LENGTH                                 0x2
#define _RX1PPS_PORT_MASK                                   0x18
#define _RX1PPS_RXPPS_POSN                                  0x0
#define _RX1PPS_RXPPS_POSITION                              0x0
#define _RX1PPS_RXPPS_SIZE                                  0x5
#define _RX1PPS_RXPPS_LENGTH                                0x5
#define _RX1PPS_RXPPS_MASK                                  0x1F
#define _RX1PPS_RXPPS0_POSN                                 0x0
#define _RX1PPS_RXPPS0_POSITION                             0x0
#define _RX1PPS_RXPPS0_SIZE                                 0x1
#define _RX1PPS_RXPPS0_LENGTH                               0x1
#define _RX1PPS_RXPPS0_MASK                                 0x1
#define _RX1PPS_RXPPS1_POSN                                 0x1
#define _RX1PPS_RXPPS1_POSITION                             0x1
#define _RX1PPS_RXPPS1_SIZE                                 0x1
#define _RX1PPS_RXPPS1_LENGTH                               0x1
#define _RX1PPS_RXPPS1_MASK                                 0x2
#define _RX1PPS_RXPPS2_POSN                                 0x2
#define _RX1PPS_RXPPS2_POSITION                             0x2
#define _RX1PPS_RXPPS2_SIZE                                 0x1
#define _RX1PPS_RXPPS2_LENGTH                               0x1
#define _RX1PPS_RXPPS2_MASK                                 0x4
#define _RX1PPS_RXPPS3_POSN                                 0x3
#define _RX1PPS_RXPPS3_POSITION                             0x3
#define _RX1PPS_RXPPS3_SIZE                                 0x1
#define _RX1PPS_RXPPS3_LENGTH                               0x1
#define _RX1PPS_RXPPS3_MASK                                 0x8
#define _RX1PPS_RXPPS4_POSN                                 0x4
#define _RX1PPS_RXPPS4_POSITION                             0x4
#define _RX1PPS_RXPPS4_SIZE                                 0x1
#define _RX1PPS_RXPPS4_LENGTH                               0x1
#define _RX1PPS_RXPPS4_MASK                                 0x10
#define _RX1PPS_RX1PPS_POSN                                 0x0
#define _RX1PPS_RX1PPS_POSITION                             0x0
#define _RX1PPS_RX1PPS_SIZE                                 0x5
#define _RX1PPS_RX1PPS_LENGTH                               0x5
#define _RX1PPS_RX1PPS_MASK                                 0x1F
#define _RX1PPS_RX1PPS0_POSN                                0x0
#define _RX1PPS_RX1PPS0_POSITION                            0x0
#define _RX1PPS_RX1PPS0_SIZE                                0x1
#define _RX1PPS_RX1PPS0_LENGTH                              0x1
#define _RX1PPS_RX1PPS0_MASK                                0x1
#define _RX1PPS_RX1PPS1_POSN                                0x1
#define _RX1PPS_RX1PPS1_POSITION                            0x1
#define _RX1PPS_RX1PPS1_SIZE                                0x1
#define _RX1PPS_RX1PPS1_LENGTH                              0x1
#define _RX1PPS_RX1PPS1_MASK                                0x2
#define _RX1PPS_RX1PPS2_POSN                                0x2
#define _RX1PPS_RX1PPS2_POSITION                            0x2
#define _RX1PPS_RX1PPS2_SIZE                                0x1
#define _RX1PPS_RX1PPS2_LENGTH                              0x1
#define _RX1PPS_RX1PPS2_MASK                                0x4
#define _RX1PPS_RX1PPS3_POSN                                0x3
#define _RX1PPS_RX1PPS3_POSITION                            0x3
#define _RX1PPS_RX1PPS3_SIZE                                0x1
#define _RX1PPS_RX1PPS3_LENGTH                              0x1
#define _RX1PPS_RX1PPS3_MASK                                0x8
#define _RX1PPS_RX1PPS4_POSN                                0x4
#define _RX1PPS_RX1PPS4_POSITION                            0x4
#define _RX1PPS_RX1PPS4_SIZE                                0x1
#define _RX1PPS_RX1PPS4_LENGTH                              0x1
#define _RX1PPS_RX1PPS4_MASK                                0x10
// alias bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned RXPPS                  :5;
    };
    struct {
        unsigned RXPPS0                 :1;
        unsigned RXPPS1                 :1;
        unsigned RXPPS2                 :1;
        unsigned RXPPS3                 :1;
        unsigned RXPPS4                 :1;
    };
    struct {
        unsigned RX1PPS                 :5;
    };
    struct {
        unsigned RX1PPS0                :1;
        unsigned RX1PPS1                :1;
        unsigned RX1PPS2                :1;
        unsigned RX1PPS3                :1;
        unsigned RX1PPS4                :1;
    };
} RXPPSbits_t;
extern volatile RXPPSbits_t RXPPSbits __at(0xEB5);
// bitfield macros
#define _RXPPS_PIN_POSN                                     0x0
#define _RXPPS_PIN_POSITION                                 0x0
#define _RXPPS_PIN_SIZE                                     0x3
#define _RXPPS_PIN_LENGTH                                   0x3
#define _RXPPS_PIN_MASK                                     0x7
#define _RXPPS_PORT_POSN                                    0x3
#define _RXPPS_PORT_POSITION                                0x3
#define _RXPPS_PORT_SIZE                                    0x2
#define _RXPPS_PORT_LENGTH                                  0x2
#define _RXPPS_PORT_MASK                                    0x18
#define _RXPPS_RXPPS_POSN                                   0x0
#define _RXPPS_RXPPS_POSITION                               0x0
#define _RXPPS_RXPPS_SIZE                                   0x5
#define _RXPPS_RXPPS_LENGTH                                 0x5
#define _RXPPS_RXPPS_MASK                                   0x1F
#define _RXPPS_RXPPS0_POSN                                  0x0
#define _RXPPS_RXPPS0_POSITION                              0x0
#define _RXPPS_RXPPS0_SIZE                                  0x1
#define _RXPPS_RXPPS0_LENGTH                                0x1
#define _RXPPS_RXPPS0_MASK                                  0x1
#define _RXPPS_RXPPS1_POSN                                  0x1
#define _RXPPS_RXPPS1_POSITION                              0x1
#define _RXPPS_RXPPS1_SIZE                                  0x1
#define _RXPPS_RXPPS1_LENGTH                                0x1
#define _RXPPS_RXPPS1_MASK                                  0x2
#define _RXPPS_RXPPS2_POSN                                  0x2
#define _RXPPS_RXPPS2_POSITION                              0x2
#define _RXPPS_RXPPS2_SIZE                                  0x1
#define _RXPPS_RXPPS2_LENGTH                                0x1
#define _RXPPS_RXPPS2_MASK                                  0x4
#define _RXPPS_RXPPS3_POSN                                  0x3
#define _RXPPS_RXPPS3_POSITION                              0x3
#define _RXPPS_RXPPS3_SIZE                                  0x1
#define _RXPPS_RXPPS3_LENGTH                                0x1
#define _RXPPS_RXPPS3_MASK                                  0x8
#define _RXPPS_RXPPS4_POSN                                  0x4
#define _RXPPS_RXPPS4_POSITION                              0x4
#define _RXPPS_RXPPS4_SIZE                                  0x1
#define _RXPPS_RXPPS4_LENGTH                                0x1
#define _RXPPS_RXPPS4_MASK                                  0x10
#define _RXPPS_RX1PPS_POSN                                  0x0
#define _RXPPS_RX1PPS_POSITION                              0x0
#define _RXPPS_RX1PPS_SIZE                                  0x5
#define _RXPPS_RX1PPS_LENGTH                                0x5
#define _RXPPS_RX1PPS_MASK                                  0x1F
#define _RXPPS_RX1PPS0_POSN                                 0x0
#define _RXPPS_RX1PPS0_POSITION                             0x0
#define _RXPPS_RX1PPS0_SIZE                                 0x1
#define _RXPPS_RX1PPS0_LENGTH                               0x1
#define _RXPPS_RX1PPS0_MASK                                 0x1
#define _RXPPS_RX1PPS1_POSN                                 0x1
#define _RXPPS_RX1PPS1_POSITION                             0x1
#define _RXPPS_RX1PPS1_SIZE                                 0x1
#define _RXPPS_RX1PPS1_LENGTH                               0x1
#define _RXPPS_RX1PPS1_MASK                                 0x2
#define _RXPPS_RX1PPS2_POSN                                 0x2
#define _RXPPS_RX1PPS2_POSITION                             0x2
#define _RXPPS_RX1PPS2_SIZE                                 0x1
#define _RXPPS_RX1PPS2_LENGTH                               0x1
#define _RXPPS_RX1PPS2_MASK                                 0x4
#define _RXPPS_RX1PPS3_POSN                                 0x3
#define _RXPPS_RX1PPS3_POSITION                             0x3
#define _RXPPS_RX1PPS3_SIZE                                 0x1
#define _RXPPS_RX1PPS3_LENGTH                               0x1
#define _RXPPS_RX1PPS3_MASK                                 0x8
#define _RXPPS_RX1PPS4_POSN                                 0x4
#define _RXPPS_RX1PPS4_POSITION                             0x4
#define _RXPPS_RX1PPS4_SIZE                                 0x1
#define _RXPPS_RX1PPS4_LENGTH                               0x1
#define _RXPPS_RX1PPS4_MASK                                 0x10

// Register: CK1PPS
#define CK1PPS CK1PPS
extern volatile unsigned char           CK1PPS              __at(0xEB6);
#ifndef _LIB_BUILD
asm("CK1PPS equ 0EB6h");
#endif
// aliases
extern volatile unsigned char           TX1PPS              __at(0xEB6);
#ifndef _LIB_BUILD
asm("TX1PPS equ 0EB6h");
#endif
extern volatile unsigned char           CKPPS               __at(0xEB6);
#ifndef _LIB_BUILD
asm("CKPPS equ 0EB6h");
#endif
extern volatile unsigned char           TXPPS               __at(0xEB6);
#ifndef _LIB_BUILD
asm("TXPPS equ 0EB6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned TXPPS                  :5;
    };
    struct {
        unsigned TXPPS0                 :1;
        unsigned TXPPS1                 :1;
        unsigned TXPPS2                 :1;
        unsigned TXPPS3                 :1;
        unsigned TXPPS4                 :1;
    };
    struct {
        unsigned TX1PPS                 :5;
    };
    struct {
        unsigned TX1PPS0                :1;
        unsigned TX1PPS1                :1;
        unsigned TX1PPS2                :1;
        unsigned TX1PPS3                :1;
        unsigned TX1PPS4                :1;
    };
} CK1PPSbits_t;
extern volatile CK1PPSbits_t CK1PPSbits __at(0xEB6);
// bitfield macros
#define _CK1PPS_PIN_POSN                                    0x0
#define _CK1PPS_PIN_POSITION                                0x0
#define _CK1PPS_PIN_SIZE                                    0x3
#define _CK1PPS_PIN_LENGTH                                  0x3
#define _CK1PPS_PIN_MASK                                    0x7
#define _CK1PPS_PORT_POSN                                   0x3
#define _CK1PPS_PORT_POSITION                               0x3
#define _CK1PPS_PORT_SIZE                                   0x2
#define _CK1PPS_PORT_LENGTH                                 0x2
#define _CK1PPS_PORT_MASK                                   0x18
#define _CK1PPS_TXPPS_POSN                                  0x0
#define _CK1PPS_TXPPS_POSITION                              0x0
#define _CK1PPS_TXPPS_SIZE                                  0x5
#define _CK1PPS_TXPPS_LENGTH                                0x5
#define _CK1PPS_TXPPS_MASK                                  0x1F
#define _CK1PPS_TXPPS0_POSN                                 0x0
#define _CK1PPS_TXPPS0_POSITION                             0x0
#define _CK1PPS_TXPPS0_SIZE                                 0x1
#define _CK1PPS_TXPPS0_LENGTH                               0x1
#define _CK1PPS_TXPPS0_MASK                                 0x1
#define _CK1PPS_TXPPS1_POSN                                 0x1
#define _CK1PPS_TXPPS1_POSITION                             0x1
#define _CK1PPS_TXPPS1_SIZE                                 0x1
#define _CK1PPS_TXPPS1_LENGTH                               0x1
#define _CK1PPS_TXPPS1_MASK                                 0x2
#define _CK1PPS_TXPPS2_POSN                                 0x2
#define _CK1PPS_TXPPS2_POSITION                             0x2
#define _CK1PPS_TXPPS2_SIZE                                 0x1
#define _CK1PPS_TXPPS2_LENGTH                               0x1
#define _CK1PPS_TXPPS2_MASK                                 0x4
#define _CK1PPS_TXPPS3_POSN                                 0x3
#define _CK1PPS_TXPPS3_POSITION                             0x3
#define _CK1PPS_TXPPS3_SIZE                                 0x1
#define _CK1PPS_TXPPS3_LENGTH                               0x1
#define _CK1PPS_TXPPS3_MASK                                 0x8
#define _CK1PPS_TXPPS4_POSN                                 0x4
#define _CK1PPS_TXPPS4_POSITION                             0x4
#define _CK1PPS_TXPPS4_SIZE                                 0x1
#define _CK1PPS_TXPPS4_LENGTH                               0x1
#define _CK1PPS_TXPPS4_MASK                                 0x10
#define _CK1PPS_TX1PPS_POSN                                 0x0
#define _CK1PPS_TX1PPS_POSITION                             0x0
#define _CK1PPS_TX1PPS_SIZE                                 0x5
#define _CK1PPS_TX1PPS_LENGTH                               0x5
#define _CK1PPS_TX1PPS_MASK                                 0x1F
#define _CK1PPS_TX1PPS0_POSN                                0x0
#define _CK1PPS_TX1PPS0_POSITION                            0x0
#define _CK1PPS_TX1PPS0_SIZE                                0x1
#define _CK1PPS_TX1PPS0_LENGTH                              0x1
#define _CK1PPS_TX1PPS0_MASK                                0x1
#define _CK1PPS_TX1PPS1_POSN                                0x1
#define _CK1PPS_TX1PPS1_POSITION                            0x1
#define _CK1PPS_TX1PPS1_SIZE                                0x1
#define _CK1PPS_TX1PPS1_LENGTH                              0x1
#define _CK1PPS_TX1PPS1_MASK                                0x2
#define _CK1PPS_TX1PPS2_POSN                                0x2
#define _CK1PPS_TX1PPS2_POSITION                            0x2
#define _CK1PPS_TX1PPS2_SIZE                                0x1
#define _CK1PPS_TX1PPS2_LENGTH                              0x1
#define _CK1PPS_TX1PPS2_MASK                                0x4
#define _CK1PPS_TX1PPS3_POSN                                0x3
#define _CK1PPS_TX1PPS3_POSITION                            0x3
#define _CK1PPS_TX1PPS3_SIZE                                0x1
#define _CK1PPS_TX1PPS3_LENGTH                              0x1
#define _CK1PPS_TX1PPS3_MASK                                0x8
#define _CK1PPS_TX1PPS4_POSN                                0x4
#define _CK1PPS_TX1PPS4_POSITION                            0x4
#define _CK1PPS_TX1PPS4_SIZE                                0x1
#define _CK1PPS_TX1PPS4_LENGTH                              0x1
#define _CK1PPS_TX1PPS4_MASK                                0x10
// alias bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned TXPPS                  :5;
    };
    struct {
        unsigned TXPPS0                 :1;
        unsigned TXPPS1                 :1;
        unsigned TXPPS2                 :1;
        unsigned TXPPS3                 :1;
        unsigned TXPPS4                 :1;
    };
    struct {
        unsigned TX1PPS                 :5;
    };
    struct {
        unsigned TX1PPS0                :1;
        unsigned TX1PPS1                :1;
        unsigned TX1PPS2                :1;
        unsigned TX1PPS3                :1;
        unsigned TX1PPS4                :1;
    };
} TX1PPSbits_t;
extern volatile TX1PPSbits_t TX1PPSbits __at(0xEB6);
// bitfield macros
#define _TX1PPS_PIN_POSN                                    0x0
#define _TX1PPS_PIN_POSITION                                0x0
#define _TX1PPS_PIN_SIZE                                    0x3
#define _TX1PPS_PIN_LENGTH                                  0x3
#define _TX1PPS_PIN_MASK                                    0x7
#define _TX1PPS_PORT_POSN                                   0x3
#define _TX1PPS_PORT_POSITION                               0x3
#define _TX1PPS_PORT_SIZE                                   0x2
#define _TX1PPS_PORT_LENGTH                                 0x2
#define _TX1PPS_PORT_MASK                                   0x18
#define _TX1PPS_TXPPS_POSN                                  0x0
#define _TX1PPS_TXPPS_POSITION                              0x0
#define _TX1PPS_TXPPS_SIZE                                  0x5
#define _TX1PPS_TXPPS_LENGTH                                0x5
#define _TX1PPS_TXPPS_MASK                                  0x1F
#define _TX1PPS_TXPPS0_POSN                                 0x0
#define _TX1PPS_TXPPS0_POSITION                             0x0
#define _TX1PPS_TXPPS0_SIZE                                 0x1
#define _TX1PPS_TXPPS0_LENGTH                               0x1
#define _TX1PPS_TXPPS0_MASK                                 0x1
#define _TX1PPS_TXPPS1_POSN                                 0x1
#define _TX1PPS_TXPPS1_POSITION                             0x1
#define _TX1PPS_TXPPS1_SIZE                                 0x1
#define _TX1PPS_TXPPS1_LENGTH                               0x1
#define _TX1PPS_TXPPS1_MASK                                 0x2
#define _TX1PPS_TXPPS2_POSN                                 0x2
#define _TX1PPS_TXPPS2_POSITION                             0x2
#define _TX1PPS_TXPPS2_SIZE                                 0x1
#define _TX1PPS_TXPPS2_LENGTH                               0x1
#define _TX1PPS_TXPPS2_MASK                                 0x4
#define _TX1PPS_TXPPS3_POSN                                 0x3
#define _TX1PPS_TXPPS3_POSITION                             0x3
#define _TX1PPS_TXPPS3_SIZE                                 0x1
#define _TX1PPS_TXPPS3_LENGTH                               0x1
#define _TX1PPS_TXPPS3_MASK                                 0x8
#define _TX1PPS_TXPPS4_POSN                                 0x4
#define _TX1PPS_TXPPS4_POSITION                             0x4
#define _TX1PPS_TXPPS4_SIZE                                 0x1
#define _TX1PPS_TXPPS4_LENGTH                               0x1
#define _TX1PPS_TXPPS4_MASK                                 0x10
#define _TX1PPS_TX1PPS_POSN                                 0x0
#define _TX1PPS_TX1PPS_POSITION                             0x0
#define _TX1PPS_TX1PPS_SIZE                                 0x5
#define _TX1PPS_TX1PPS_LENGTH                               0x5
#define _TX1PPS_TX1PPS_MASK                                 0x1F
#define _TX1PPS_TX1PPS0_POSN                                0x0
#define _TX1PPS_TX1PPS0_POSITION                            0x0
#define _TX1PPS_TX1PPS0_SIZE                                0x1
#define _TX1PPS_TX1PPS0_LENGTH                              0x1
#define _TX1PPS_TX1PPS0_MASK                                0x1
#define _TX1PPS_TX1PPS1_POSN                                0x1
#define _TX1PPS_TX1PPS1_POSITION                            0x1
#define _TX1PPS_TX1PPS1_SIZE                                0x1
#define _TX1PPS_TX1PPS1_LENGTH                              0x1
#define _TX1PPS_TX1PPS1_MASK                                0x2
#define _TX1PPS_TX1PPS2_POSN                                0x2
#define _TX1PPS_TX1PPS2_POSITION                            0x2
#define _TX1PPS_TX1PPS2_SIZE                                0x1
#define _TX1PPS_TX1PPS2_LENGTH                              0x1
#define _TX1PPS_TX1PPS2_MASK                                0x4
#define _TX1PPS_TX1PPS3_POSN                                0x3
#define _TX1PPS_TX1PPS3_POSITION                            0x3
#define _TX1PPS_TX1PPS3_SIZE                                0x1
#define _TX1PPS_TX1PPS3_LENGTH                              0x1
#define _TX1PPS_TX1PPS3_MASK                                0x8
#define _TX1PPS_TX1PPS4_POSN                                0x4
#define _TX1PPS_TX1PPS4_POSITION                            0x4
#define _TX1PPS_TX1PPS4_SIZE                                0x1
#define _TX1PPS_TX1PPS4_LENGTH                              0x1
#define _TX1PPS_TX1PPS4_MASK                                0x10
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned TXPPS                  :5;
    };
    struct {
        unsigned TXPPS0                 :1;
        unsigned TXPPS1                 :1;
        unsigned TXPPS2                 :1;
        unsigned TXPPS3                 :1;
        unsigned TXPPS4                 :1;
    };
    struct {
        unsigned TX1PPS                 :5;
    };
    struct {
        unsigned TX1PPS0                :1;
        unsigned TX1PPS1                :1;
        unsigned TX1PPS2                :1;
        unsigned TX1PPS3                :1;
        unsigned TX1PPS4                :1;
    };
} CKPPSbits_t;
extern volatile CKPPSbits_t CKPPSbits __at(0xEB6);
// bitfield macros
#define _CKPPS_PIN_POSN                                     0x0
#define _CKPPS_PIN_POSITION                                 0x0
#define _CKPPS_PIN_SIZE                                     0x3
#define _CKPPS_PIN_LENGTH                                   0x3
#define _CKPPS_PIN_MASK                                     0x7
#define _CKPPS_PORT_POSN                                    0x3
#define _CKPPS_PORT_POSITION                                0x3
#define _CKPPS_PORT_SIZE                                    0x2
#define _CKPPS_PORT_LENGTH                                  0x2
#define _CKPPS_PORT_MASK                                    0x18
#define _CKPPS_TXPPS_POSN                                   0x0
#define _CKPPS_TXPPS_POSITION                               0x0
#define _CKPPS_TXPPS_SIZE                                   0x5
#define _CKPPS_TXPPS_LENGTH                                 0x5
#define _CKPPS_TXPPS_MASK                                   0x1F
#define _CKPPS_TXPPS0_POSN                                  0x0
#define _CKPPS_TXPPS0_POSITION                              0x0
#define _CKPPS_TXPPS0_SIZE                                  0x1
#define _CKPPS_TXPPS0_LENGTH                                0x1
#define _CKPPS_TXPPS0_MASK                                  0x1
#define _CKPPS_TXPPS1_POSN                                  0x1
#define _CKPPS_TXPPS1_POSITION                              0x1
#define _CKPPS_TXPPS1_SIZE                                  0x1
#define _CKPPS_TXPPS1_LENGTH                                0x1
#define _CKPPS_TXPPS1_MASK                                  0x2
#define _CKPPS_TXPPS2_POSN                                  0x2
#define _CKPPS_TXPPS2_POSITION                              0x2
#define _CKPPS_TXPPS2_SIZE                                  0x1
#define _CKPPS_TXPPS2_LENGTH                                0x1
#define _CKPPS_TXPPS2_MASK                                  0x4
#define _CKPPS_TXPPS3_POSN                                  0x3
#define _CKPPS_TXPPS3_POSITION                              0x3
#define _CKPPS_TXPPS3_SIZE                                  0x1
#define _CKPPS_TXPPS3_LENGTH                                0x1
#define _CKPPS_TXPPS3_MASK                                  0x8
#define _CKPPS_TXPPS4_POSN                                  0x4
#define _CKPPS_TXPPS4_POSITION                              0x4
#define _CKPPS_TXPPS4_SIZE                                  0x1
#define _CKPPS_TXPPS4_LENGTH                                0x1
#define _CKPPS_TXPPS4_MASK                                  0x10
#define _CKPPS_TX1PPS_POSN                                  0x0
#define _CKPPS_TX1PPS_POSITION                              0x0
#define _CKPPS_TX1PPS_SIZE                                  0x5
#define _CKPPS_TX1PPS_LENGTH                                0x5
#define _CKPPS_TX1PPS_MASK                                  0x1F
#define _CKPPS_TX1PPS0_POSN                                 0x0
#define _CKPPS_TX1PPS0_POSITION                             0x0
#define _CKPPS_TX1PPS0_SIZE                                 0x1
#define _CKPPS_TX1PPS0_LENGTH                               0x1
#define _CKPPS_TX1PPS0_MASK                                 0x1
#define _CKPPS_TX1PPS1_POSN                                 0x1
#define _CKPPS_TX1PPS1_POSITION                             0x1
#define _CKPPS_TX1PPS1_SIZE                                 0x1
#define _CKPPS_TX1PPS1_LENGTH                               0x1
#define _CKPPS_TX1PPS1_MASK                                 0x2
#define _CKPPS_TX1PPS2_POSN                                 0x2
#define _CKPPS_TX1PPS2_POSITION                             0x2
#define _CKPPS_TX1PPS2_SIZE                                 0x1
#define _CKPPS_TX1PPS2_LENGTH                               0x1
#define _CKPPS_TX1PPS2_MASK                                 0x4
#define _CKPPS_TX1PPS3_POSN                                 0x3
#define _CKPPS_TX1PPS3_POSITION                             0x3
#define _CKPPS_TX1PPS3_SIZE                                 0x1
#define _CKPPS_TX1PPS3_LENGTH                               0x1
#define _CKPPS_TX1PPS3_MASK                                 0x8
#define _CKPPS_TX1PPS4_POSN                                 0x4
#define _CKPPS_TX1PPS4_POSITION                             0x4
#define _CKPPS_TX1PPS4_SIZE                                 0x1
#define _CKPPS_TX1PPS4_LENGTH                               0x1
#define _CKPPS_TX1PPS4_MASK                                 0x10
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned TXPPS                  :5;
    };
    struct {
        unsigned TXPPS0                 :1;
        unsigned TXPPS1                 :1;
        unsigned TXPPS2                 :1;
        unsigned TXPPS3                 :1;
        unsigned TXPPS4                 :1;
    };
    struct {
        unsigned TX1PPS                 :5;
    };
    struct {
        unsigned TX1PPS0                :1;
        unsigned TX1PPS1                :1;
        unsigned TX1PPS2                :1;
        unsigned TX1PPS3                :1;
        unsigned TX1PPS4                :1;
    };
} TXPPSbits_t;
extern volatile TXPPSbits_t TXPPSbits __at(0xEB6);
// bitfield macros
#define _TXPPS_PIN_POSN                                     0x0
#define _TXPPS_PIN_POSITION                                 0x0
#define _TXPPS_PIN_SIZE                                     0x3
#define _TXPPS_PIN_LENGTH                                   0x3
#define _TXPPS_PIN_MASK                                     0x7
#define _TXPPS_PORT_POSN                                    0x3
#define _TXPPS_PORT_POSITION                                0x3
#define _TXPPS_PORT_SIZE                                    0x2
#define _TXPPS_PORT_LENGTH                                  0x2
#define _TXPPS_PORT_MASK                                    0x18
#define _TXPPS_TXPPS_POSN                                   0x0
#define _TXPPS_TXPPS_POSITION                               0x0
#define _TXPPS_TXPPS_SIZE                                   0x5
#define _TXPPS_TXPPS_LENGTH                                 0x5
#define _TXPPS_TXPPS_MASK                                   0x1F
#define _TXPPS_TXPPS0_POSN                                  0x0
#define _TXPPS_TXPPS0_POSITION                              0x0
#define _TXPPS_TXPPS0_SIZE                                  0x1
#define _TXPPS_TXPPS0_LENGTH                                0x1
#define _TXPPS_TXPPS0_MASK                                  0x1
#define _TXPPS_TXPPS1_POSN                                  0x1
#define _TXPPS_TXPPS1_POSITION                              0x1
#define _TXPPS_TXPPS1_SIZE                                  0x1
#define _TXPPS_TXPPS1_LENGTH                                0x1
#define _TXPPS_TXPPS1_MASK                                  0x2
#define _TXPPS_TXPPS2_POSN                                  0x2
#define _TXPPS_TXPPS2_POSITION                              0x2
#define _TXPPS_TXPPS2_SIZE                                  0x1
#define _TXPPS_TXPPS2_LENGTH                                0x1
#define _TXPPS_TXPPS2_MASK                                  0x4
#define _TXPPS_TXPPS3_POSN                                  0x3
#define _TXPPS_TXPPS3_POSITION                              0x3
#define _TXPPS_TXPPS3_SIZE                                  0x1
#define _TXPPS_TXPPS3_LENGTH                                0x1
#define _TXPPS_TXPPS3_MASK                                  0x8
#define _TXPPS_TXPPS4_POSN                                  0x4
#define _TXPPS_TXPPS4_POSITION                              0x4
#define _TXPPS_TXPPS4_SIZE                                  0x1
#define _TXPPS_TXPPS4_LENGTH                                0x1
#define _TXPPS_TXPPS4_MASK                                  0x10
#define _TXPPS_TX1PPS_POSN                                  0x0
#define _TXPPS_TX1PPS_POSITION                              0x0
#define _TXPPS_TX1PPS_SIZE                                  0x5
#define _TXPPS_TX1PPS_LENGTH                                0x5
#define _TXPPS_TX1PPS_MASK                                  0x1F
#define _TXPPS_TX1PPS0_POSN                                 0x0
#define _TXPPS_TX1PPS0_POSITION                             0x0
#define _TXPPS_TX1PPS0_SIZE                                 0x1
#define _TXPPS_TX1PPS0_LENGTH                               0x1
#define _TXPPS_TX1PPS0_MASK                                 0x1
#define _TXPPS_TX1PPS1_POSN                                 0x1
#define _TXPPS_TX1PPS1_POSITION                             0x1
#define _TXPPS_TX1PPS1_SIZE                                 0x1
#define _TXPPS_TX1PPS1_LENGTH                               0x1
#define _TXPPS_TX1PPS1_MASK                                 0x2
#define _TXPPS_TX1PPS2_POSN                                 0x2
#define _TXPPS_TX1PPS2_POSITION                             0x2
#define _TXPPS_TX1PPS2_SIZE                                 0x1
#define _TXPPS_TX1PPS2_LENGTH                               0x1
#define _TXPPS_TX1PPS2_MASK                                 0x4
#define _TXPPS_TX1PPS3_POSN                                 0x3
#define _TXPPS_TX1PPS3_POSITION                             0x3
#define _TXPPS_TX1PPS3_SIZE                                 0x1
#define _TXPPS_TX1PPS3_LENGTH                               0x1
#define _TXPPS_TX1PPS3_MASK                                 0x8
#define _TXPPS_TX1PPS4_POSN                                 0x4
#define _TXPPS_TX1PPS4_POSITION                             0x4
#define _TXPPS_TX1PPS4_SIZE                                 0x1
#define _TXPPS_TX1PPS4_LENGTH                               0x1
#define _TXPPS_TX1PPS4_MASK                                 0x10

// Register: SSP1CLKPPS
#define SSP1CLKPPS SSP1CLKPPS
extern volatile unsigned char           SSP1CLKPPS          __at(0xEB7);
#ifndef _LIB_BUILD
asm("SSP1CLKPPS equ 0EB7h");
#endif
// aliases
extern volatile unsigned char           SSPCLKPPS           __at(0xEB7);
#ifndef _LIB_BUILD
asm("SSPCLKPPS equ 0EB7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned SSPCLKPPS              :5;
    };
    struct {
        unsigned SSPCLKPPS0             :1;
        unsigned SSPCLKPPS1             :1;
        unsigned SSPCLKPPS2             :1;
        unsigned SSPCLKPPS3             :1;
        unsigned SSPCLKPPS4             :1;
    };
    struct {
        unsigned SSP1CLKPPS             :5;
    };
    struct {
        unsigned SSP1CLKPPS0            :1;
        unsigned SSP1CLKPPS1            :1;
        unsigned SSP1CLKPPS2            :1;
        unsigned SSP1CLKPPS3            :1;
        unsigned SSP1CLKPPS4            :1;
    };
} SSP1CLKPPSbits_t;
extern volatile SSP1CLKPPSbits_t SSP1CLKPPSbits __at(0xEB7);
// bitfield macros
#define _SSP1CLKPPS_PIN_POSN                                0x0
#define _SSP1CLKPPS_PIN_POSITION                            0x0
#define _SSP1CLKPPS_PIN_SIZE                                0x3
#define _SSP1CLKPPS_PIN_LENGTH                              0x3
#define _SSP1CLKPPS_PIN_MASK                                0x7
#define _SSP1CLKPPS_PORT_POSN                               0x3
#define _SSP1CLKPPS_PORT_POSITION                           0x3
#define _SSP1CLKPPS_PORT_SIZE                               0x2
#define _SSP1CLKPPS_PORT_LENGTH                             0x2
#define _SSP1CLKPPS_PORT_MASK                               0x18
#define _SSP1CLKPPS_SSPCLKPPS_POSN                          0x0
#define _SSP1CLKPPS_SSPCLKPPS_POSITION                      0x0
#define _SSP1CLKPPS_SSPCLKPPS_SIZE                          0x5
#define _SSP1CLKPPS_SSPCLKPPS_LENGTH                        0x5
#define _SSP1CLKPPS_SSPCLKPPS_MASK                          0x1F
#define _SSP1CLKPPS_SSPCLKPPS0_POSN                         0x0
#define _SSP1CLKPPS_SSPCLKPPS0_POSITION                     0x0
#define _SSP1CLKPPS_SSPCLKPPS0_SIZE                         0x1
#define _SSP1CLKPPS_SSPCLKPPS0_LENGTH                       0x1
#define _SSP1CLKPPS_SSPCLKPPS0_MASK                         0x1
#define _SSP1CLKPPS_SSPCLKPPS1_POSN                         0x1
#define _SSP1CLKPPS_SSPCLKPPS1_POSITION                     0x1
#define _SSP1CLKPPS_SSPCLKPPS1_SIZE                         0x1
#define _SSP1CLKPPS_SSPCLKPPS1_LENGTH                       0x1
#define _SSP1CLKPPS_SSPCLKPPS1_MASK                         0x2
#define _SSP1CLKPPS_SSPCLKPPS2_POSN                         0x2
#define _SSP1CLKPPS_SSPCLKPPS2_POSITION                     0x2
#define _SSP1CLKPPS_SSPCLKPPS2_SIZE                         0x1
#define _SSP1CLKPPS_SSPCLKPPS2_LENGTH                       0x1
#define _SSP1CLKPPS_SSPCLKPPS2_MASK                         0x4
#define _SSP1CLKPPS_SSPCLKPPS3_POSN                         0x3
#define _SSP1CLKPPS_SSPCLKPPS3_POSITION                     0x3
#define _SSP1CLKPPS_SSPCLKPPS3_SIZE                         0x1
#define _SSP1CLKPPS_SSPCLKPPS3_LENGTH                       0x1
#define _SSP1CLKPPS_SSPCLKPPS3_MASK                         0x8
#define _SSP1CLKPPS_SSPCLKPPS4_POSN                         0x4
#define _SSP1CLKPPS_SSPCLKPPS4_POSITION                     0x4
#define _SSP1CLKPPS_SSPCLKPPS4_SIZE                         0x1
#define _SSP1CLKPPS_SSPCLKPPS4_LENGTH                       0x1
#define _SSP1CLKPPS_SSPCLKPPS4_MASK                         0x10
#define _SSP1CLKPPS_SSP1CLKPPS_POSN                         0x0
#define _SSP1CLKPPS_SSP1CLKPPS_POSITION                     0x0
#define _SSP1CLKPPS_SSP1CLKPPS_SIZE                         0x5
#define _SSP1CLKPPS_SSP1CLKPPS_LENGTH                       0x5
#define _SSP1CLKPPS_SSP1CLKPPS_MASK                         0x1F
#define _SSP1CLKPPS_SSP1CLKPPS0_POSN                        0x0
#define _SSP1CLKPPS_SSP1CLKPPS0_POSITION                    0x0
#define _SSP1CLKPPS_SSP1CLKPPS0_SIZE                        0x1
#define _SSP1CLKPPS_SSP1CLKPPS0_LENGTH                      0x1
#define _SSP1CLKPPS_SSP1CLKPPS0_MASK                        0x1
#define _SSP1CLKPPS_SSP1CLKPPS1_POSN                        0x1
#define _SSP1CLKPPS_SSP1CLKPPS1_POSITION                    0x1
#define _SSP1CLKPPS_SSP1CLKPPS1_SIZE                        0x1
#define _SSP1CLKPPS_SSP1CLKPPS1_LENGTH                      0x1
#define _SSP1CLKPPS_SSP1CLKPPS1_MASK                        0x2
#define _SSP1CLKPPS_SSP1CLKPPS2_POSN                        0x2
#define _SSP1CLKPPS_SSP1CLKPPS2_POSITION                    0x2
#define _SSP1CLKPPS_SSP1CLKPPS2_SIZE                        0x1
#define _SSP1CLKPPS_SSP1CLKPPS2_LENGTH                      0x1
#define _SSP1CLKPPS_SSP1CLKPPS2_MASK                        0x4
#define _SSP1CLKPPS_SSP1CLKPPS3_POSN                        0x3
#define _SSP1CLKPPS_SSP1CLKPPS3_POSITION                    0x3
#define _SSP1CLKPPS_SSP1CLKPPS3_SIZE                        0x1
#define _SSP1CLKPPS_SSP1CLKPPS3_LENGTH                      0x1
#define _SSP1CLKPPS_SSP1CLKPPS3_MASK                        0x8
#define _SSP1CLKPPS_SSP1CLKPPS4_POSN                        0x4
#define _SSP1CLKPPS_SSP1CLKPPS4_POSITION                    0x4
#define _SSP1CLKPPS_SSP1CLKPPS4_SIZE                        0x1
#define _SSP1CLKPPS_SSP1CLKPPS4_LENGTH                      0x1
#define _SSP1CLKPPS_SSP1CLKPPS4_MASK                        0x10
// alias bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned SSPCLKPPS              :5;
    };
    struct {
        unsigned SSPCLKPPS0             :1;
        unsigned SSPCLKPPS1             :1;
        unsigned SSPCLKPPS2             :1;
        unsigned SSPCLKPPS3             :1;
        unsigned SSPCLKPPS4             :1;
    };
    struct {
        unsigned SSP1CLKPPS             :5;
    };
    struct {
        unsigned SSP1CLKPPS0            :1;
        unsigned SSP1CLKPPS1            :1;
        unsigned SSP1CLKPPS2            :1;
        unsigned SSP1CLKPPS3            :1;
        unsigned SSP1CLKPPS4            :1;
    };
} SSPCLKPPSbits_t;
extern volatile SSPCLKPPSbits_t SSPCLKPPSbits __at(0xEB7);
// bitfield macros
#define _SSPCLKPPS_PIN_POSN                                 0x0
#define _SSPCLKPPS_PIN_POSITION                             0x0
#define _SSPCLKPPS_PIN_SIZE                                 0x3
#define _SSPCLKPPS_PIN_LENGTH                               0x3
#define _SSPCLKPPS_PIN_MASK                                 0x7
#define _SSPCLKPPS_PORT_POSN                                0x3
#define _SSPCLKPPS_PORT_POSITION                            0x3
#define _SSPCLKPPS_PORT_SIZE                                0x2
#define _SSPCLKPPS_PORT_LENGTH                              0x2
#define _SSPCLKPPS_PORT_MASK                                0x18
#define _SSPCLKPPS_SSPCLKPPS_POSN                           0x0
#define _SSPCLKPPS_SSPCLKPPS_POSITION                       0x0
#define _SSPCLKPPS_SSPCLKPPS_SIZE                           0x5
#define _SSPCLKPPS_SSPCLKPPS_LENGTH                         0x5
#define _SSPCLKPPS_SSPCLKPPS_MASK                           0x1F
#define _SSPCLKPPS_SSPCLKPPS0_POSN                          0x0
#define _SSPCLKPPS_SSPCLKPPS0_POSITION                      0x0
#define _SSPCLKPPS_SSPCLKPPS0_SIZE                          0x1
#define _SSPCLKPPS_SSPCLKPPS0_LENGTH                        0x1
#define _SSPCLKPPS_SSPCLKPPS0_MASK                          0x1
#define _SSPCLKPPS_SSPCLKPPS1_POSN                          0x1
#define _SSPCLKPPS_SSPCLKPPS1_POSITION                      0x1
#define _SSPCLKPPS_SSPCLKPPS1_SIZE                          0x1
#define _SSPCLKPPS_SSPCLKPPS1_LENGTH                        0x1
#define _SSPCLKPPS_SSPCLKPPS1_MASK                          0x2
#define _SSPCLKPPS_SSPCLKPPS2_POSN                          0x2
#define _SSPCLKPPS_SSPCLKPPS2_POSITION                      0x2
#define _SSPCLKPPS_SSPCLKPPS2_SIZE                          0x1
#define _SSPCLKPPS_SSPCLKPPS2_LENGTH                        0x1
#define _SSPCLKPPS_SSPCLKPPS2_MASK                          0x4
#define _SSPCLKPPS_SSPCLKPPS3_POSN                          0x3
#define _SSPCLKPPS_SSPCLKPPS3_POSITION                      0x3
#define _SSPCLKPPS_SSPCLKPPS3_SIZE                          0x1
#define _SSPCLKPPS_SSPCLKPPS3_LENGTH                        0x1
#define _SSPCLKPPS_SSPCLKPPS3_MASK                          0x8
#define _SSPCLKPPS_SSPCLKPPS4_POSN                          0x4
#define _SSPCLKPPS_SSPCLKPPS4_POSITION                      0x4
#define _SSPCLKPPS_SSPCLKPPS4_SIZE                          0x1
#define _SSPCLKPPS_SSPCLKPPS4_LENGTH                        0x1
#define _SSPCLKPPS_SSPCLKPPS4_MASK                          0x10
#define _SSPCLKPPS_SSP1CLKPPS_POSN                          0x0
#define _SSPCLKPPS_SSP1CLKPPS_POSITION                      0x0
#define _SSPCLKPPS_SSP1CLKPPS_SIZE                          0x5
#define _SSPCLKPPS_SSP1CLKPPS_LENGTH                        0x5
#define _SSPCLKPPS_SSP1CLKPPS_MASK                          0x1F
#define _SSPCLKPPS_SSP1CLKPPS0_POSN                         0x0
#define _SSPCLKPPS_SSP1CLKPPS0_POSITION                     0x0
#define _SSPCLKPPS_SSP1CLKPPS0_SIZE                         0x1
#define _SSPCLKPPS_SSP1CLKPPS0_LENGTH                       0x1
#define _SSPCLKPPS_SSP1CLKPPS0_MASK                         0x1
#define _SSPCLKPPS_SSP1CLKPPS1_POSN                         0x1
#define _SSPCLKPPS_SSP1CLKPPS1_POSITION                     0x1
#define _SSPCLKPPS_SSP1CLKPPS1_SIZE                         0x1
#define _SSPCLKPPS_SSP1CLKPPS1_LENGTH                       0x1
#define _SSPCLKPPS_SSP1CLKPPS1_MASK                         0x2
#define _SSPCLKPPS_SSP1CLKPPS2_POSN                         0x2
#define _SSPCLKPPS_SSP1CLKPPS2_POSITION                     0x2
#define _SSPCLKPPS_SSP1CLKPPS2_SIZE                         0x1
#define _SSPCLKPPS_SSP1CLKPPS2_LENGTH                       0x1
#define _SSPCLKPPS_SSP1CLKPPS2_MASK                         0x4
#define _SSPCLKPPS_SSP1CLKPPS3_POSN                         0x3
#define _SSPCLKPPS_SSP1CLKPPS3_POSITION                     0x3
#define _SSPCLKPPS_SSP1CLKPPS3_SIZE                         0x1
#define _SSPCLKPPS_SSP1CLKPPS3_LENGTH                       0x1
#define _SSPCLKPPS_SSP1CLKPPS3_MASK                         0x8
#define _SSPCLKPPS_SSP1CLKPPS4_POSN                         0x4
#define _SSPCLKPPS_SSP1CLKPPS4_POSITION                     0x4
#define _SSPCLKPPS_SSP1CLKPPS4_SIZE                         0x1
#define _SSPCLKPPS_SSP1CLKPPS4_LENGTH                       0x1
#define _SSPCLKPPS_SSP1CLKPPS4_MASK                         0x10

// Register: SSP1DATPPS
#define SSP1DATPPS SSP1DATPPS
extern volatile unsigned char           SSP1DATPPS          __at(0xEB8);
#ifndef _LIB_BUILD
asm("SSP1DATPPS equ 0EB8h");
#endif
// aliases
extern volatile unsigned char           SSPDATPPS           __at(0xEB8);
#ifndef _LIB_BUILD
asm("SSPDATPPS equ 0EB8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned SSPDATPPS              :5;
    };
    struct {
        unsigned SSPDATPPS0             :1;
        unsigned SSPDATPPS1             :1;
        unsigned SSPDATPPS2             :1;
        unsigned SSPDATPPS3             :1;
        unsigned SSPDATPPS4             :1;
    };
    struct {
        unsigned SSP1DATPPS             :5;
    };
    struct {
        unsigned SSP1DATPPS0            :1;
        unsigned SSP1DATPPS1            :1;
        unsigned SSP1DATPPS2            :1;
        unsigned SSP1DATPPS3            :1;
        unsigned SSP1DATPPS4            :1;
    };
} SSP1DATPPSbits_t;
extern volatile SSP1DATPPSbits_t SSP1DATPPSbits __at(0xEB8);
// bitfield macros
#define _SSP1DATPPS_PIN_POSN                                0x0
#define _SSP1DATPPS_PIN_POSITION                            0x0
#define _SSP1DATPPS_PIN_SIZE                                0x3
#define _SSP1DATPPS_PIN_LENGTH                              0x3
#define _SSP1DATPPS_PIN_MASK                                0x7
#define _SSP1DATPPS_PORT_POSN                               0x3
#define _SSP1DATPPS_PORT_POSITION                           0x3
#define _SSP1DATPPS_PORT_SIZE                               0x2
#define _SSP1DATPPS_PORT_LENGTH                             0x2
#define _SSP1DATPPS_PORT_MASK                               0x18
#define _SSP1DATPPS_SSPDATPPS_POSN                          0x0
#define _SSP1DATPPS_SSPDATPPS_POSITION                      0x0
#define _SSP1DATPPS_SSPDATPPS_SIZE                          0x5
#define _SSP1DATPPS_SSPDATPPS_LENGTH                        0x5
#define _SSP1DATPPS_SSPDATPPS_MASK                          0x1F
#define _SSP1DATPPS_SSPDATPPS0_POSN                         0x0
#define _SSP1DATPPS_SSPDATPPS0_POSITION                     0x0
#define _SSP1DATPPS_SSPDATPPS0_SIZE                         0x1
#define _SSP1DATPPS_SSPDATPPS0_LENGTH                       0x1
#define _SSP1DATPPS_SSPDATPPS0_MASK                         0x1
#define _SSP1DATPPS_SSPDATPPS1_POSN                         0x1
#define _SSP1DATPPS_SSPDATPPS1_POSITION                     0x1
#define _SSP1DATPPS_SSPDATPPS1_SIZE                         0x1
#define _SSP1DATPPS_SSPDATPPS1_LENGTH                       0x1
#define _SSP1DATPPS_SSPDATPPS1_MASK                         0x2
#define _SSP1DATPPS_SSPDATPPS2_POSN                         0x2
#define _SSP1DATPPS_SSPDATPPS2_POSITION                     0x2
#define _SSP1DATPPS_SSPDATPPS2_SIZE                         0x1
#define _SSP1DATPPS_SSPDATPPS2_LENGTH                       0x1
#define _SSP1DATPPS_SSPDATPPS2_MASK                         0x4
#define _SSP1DATPPS_SSPDATPPS3_POSN                         0x3
#define _SSP1DATPPS_SSPDATPPS3_POSITION                     0x3
#define _SSP1DATPPS_SSPDATPPS3_SIZE                         0x1
#define _SSP1DATPPS_SSPDATPPS3_LENGTH                       0x1
#define _SSP1DATPPS_SSPDATPPS3_MASK                         0x8
#define _SSP1DATPPS_SSPDATPPS4_POSN                         0x4
#define _SSP1DATPPS_SSPDATPPS4_POSITION                     0x4
#define _SSP1DATPPS_SSPDATPPS4_SIZE                         0x1
#define _SSP1DATPPS_SSPDATPPS4_LENGTH                       0x1
#define _SSP1DATPPS_SSPDATPPS4_MASK                         0x10
#define _SSP1DATPPS_SSP1DATPPS_POSN                         0x0
#define _SSP1DATPPS_SSP1DATPPS_POSITION                     0x0
#define _SSP1DATPPS_SSP1DATPPS_SIZE                         0x5
#define _SSP1DATPPS_SSP1DATPPS_LENGTH                       0x5
#define _SSP1DATPPS_SSP1DATPPS_MASK                         0x1F
#define _SSP1DATPPS_SSP1DATPPS0_POSN                        0x0
#define _SSP1DATPPS_SSP1DATPPS0_POSITION                    0x0
#define _SSP1DATPPS_SSP1DATPPS0_SIZE                        0x1
#define _SSP1DATPPS_SSP1DATPPS0_LENGTH                      0x1
#define _SSP1DATPPS_SSP1DATPPS0_MASK                        0x1
#define _SSP1DATPPS_SSP1DATPPS1_POSN                        0x1
#define _SSP1DATPPS_SSP1DATPPS1_POSITION                    0x1
#define _SSP1DATPPS_SSP1DATPPS1_SIZE                        0x1
#define _SSP1DATPPS_SSP1DATPPS1_LENGTH                      0x1
#define _SSP1DATPPS_SSP1DATPPS1_MASK                        0x2
#define _SSP1DATPPS_SSP1DATPPS2_POSN                        0x2
#define _SSP1DATPPS_SSP1DATPPS2_POSITION                    0x2
#define _SSP1DATPPS_SSP1DATPPS2_SIZE                        0x1
#define _SSP1DATPPS_SSP1DATPPS2_LENGTH                      0x1
#define _SSP1DATPPS_SSP1DATPPS2_MASK                        0x4
#define _SSP1DATPPS_SSP1DATPPS3_POSN                        0x3
#define _SSP1DATPPS_SSP1DATPPS3_POSITION                    0x3
#define _SSP1DATPPS_SSP1DATPPS3_SIZE                        0x1
#define _SSP1DATPPS_SSP1DATPPS3_LENGTH                      0x1
#define _SSP1DATPPS_SSP1DATPPS3_MASK                        0x8
#define _SSP1DATPPS_SSP1DATPPS4_POSN                        0x4
#define _SSP1DATPPS_SSP1DATPPS4_POSITION                    0x4
#define _SSP1DATPPS_SSP1DATPPS4_SIZE                        0x1
#define _SSP1DATPPS_SSP1DATPPS4_LENGTH                      0x1
#define _SSP1DATPPS_SSP1DATPPS4_MASK                        0x10
// alias bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned SSPDATPPS              :5;
    };
    struct {
        unsigned SSPDATPPS0             :1;
        unsigned SSPDATPPS1             :1;
        unsigned SSPDATPPS2             :1;
        unsigned SSPDATPPS3             :1;
        unsigned SSPDATPPS4             :1;
    };
    struct {
        unsigned SSP1DATPPS             :5;
    };
    struct {
        unsigned SSP1DATPPS0            :1;
        unsigned SSP1DATPPS1            :1;
        unsigned SSP1DATPPS2            :1;
        unsigned SSP1DATPPS3            :1;
        unsigned SSP1DATPPS4            :1;
    };
} SSPDATPPSbits_t;
extern volatile SSPDATPPSbits_t SSPDATPPSbits __at(0xEB8);
// bitfield macros
#define _SSPDATPPS_PIN_POSN                                 0x0
#define _SSPDATPPS_PIN_POSITION                             0x0
#define _SSPDATPPS_PIN_SIZE                                 0x3
#define _SSPDATPPS_PIN_LENGTH                               0x3
#define _SSPDATPPS_PIN_MASK                                 0x7
#define _SSPDATPPS_PORT_POSN                                0x3
#define _SSPDATPPS_PORT_POSITION                            0x3
#define _SSPDATPPS_PORT_SIZE                                0x2
#define _SSPDATPPS_PORT_LENGTH                              0x2
#define _SSPDATPPS_PORT_MASK                                0x18
#define _SSPDATPPS_SSPDATPPS_POSN                           0x0
#define _SSPDATPPS_SSPDATPPS_POSITION                       0x0
#define _SSPDATPPS_SSPDATPPS_SIZE                           0x5
#define _SSPDATPPS_SSPDATPPS_LENGTH                         0x5
#define _SSPDATPPS_SSPDATPPS_MASK                           0x1F
#define _SSPDATPPS_SSPDATPPS0_POSN                          0x0
#define _SSPDATPPS_SSPDATPPS0_POSITION                      0x0
#define _SSPDATPPS_SSPDATPPS0_SIZE                          0x1
#define _SSPDATPPS_SSPDATPPS0_LENGTH                        0x1
#define _SSPDATPPS_SSPDATPPS0_MASK                          0x1
#define _SSPDATPPS_SSPDATPPS1_POSN                          0x1
#define _SSPDATPPS_SSPDATPPS1_POSITION                      0x1
#define _SSPDATPPS_SSPDATPPS1_SIZE                          0x1
#define _SSPDATPPS_SSPDATPPS1_LENGTH                        0x1
#define _SSPDATPPS_SSPDATPPS1_MASK                          0x2
#define _SSPDATPPS_SSPDATPPS2_POSN                          0x2
#define _SSPDATPPS_SSPDATPPS2_POSITION                      0x2
#define _SSPDATPPS_SSPDATPPS2_SIZE                          0x1
#define _SSPDATPPS_SSPDATPPS2_LENGTH                        0x1
#define _SSPDATPPS_SSPDATPPS2_MASK                          0x4
#define _SSPDATPPS_SSPDATPPS3_POSN                          0x3
#define _SSPDATPPS_SSPDATPPS3_POSITION                      0x3
#define _SSPDATPPS_SSPDATPPS3_SIZE                          0x1
#define _SSPDATPPS_SSPDATPPS3_LENGTH                        0x1
#define _SSPDATPPS_SSPDATPPS3_MASK                          0x8
#define _SSPDATPPS_SSPDATPPS4_POSN                          0x4
#define _SSPDATPPS_SSPDATPPS4_POSITION                      0x4
#define _SSPDATPPS_SSPDATPPS4_SIZE                          0x1
#define _SSPDATPPS_SSPDATPPS4_LENGTH                        0x1
#define _SSPDATPPS_SSPDATPPS4_MASK                          0x10
#define _SSPDATPPS_SSP1DATPPS_POSN                          0x0
#define _SSPDATPPS_SSP1DATPPS_POSITION                      0x0
#define _SSPDATPPS_SSP1DATPPS_SIZE                          0x5
#define _SSPDATPPS_SSP1DATPPS_LENGTH                        0x5
#define _SSPDATPPS_SSP1DATPPS_MASK                          0x1F
#define _SSPDATPPS_SSP1DATPPS0_POSN                         0x0
#define _SSPDATPPS_SSP1DATPPS0_POSITION                     0x0
#define _SSPDATPPS_SSP1DATPPS0_SIZE                         0x1
#define _SSPDATPPS_SSP1DATPPS0_LENGTH                       0x1
#define _SSPDATPPS_SSP1DATPPS0_MASK                         0x1
#define _SSPDATPPS_SSP1DATPPS1_POSN                         0x1
#define _SSPDATPPS_SSP1DATPPS1_POSITION                     0x1
#define _SSPDATPPS_SSP1DATPPS1_SIZE                         0x1
#define _SSPDATPPS_SSP1DATPPS1_LENGTH                       0x1
#define _SSPDATPPS_SSP1DATPPS1_MASK                         0x2
#define _SSPDATPPS_SSP1DATPPS2_POSN                         0x2
#define _SSPDATPPS_SSP1DATPPS2_POSITION                     0x2
#define _SSPDATPPS_SSP1DATPPS2_SIZE                         0x1
#define _SSPDATPPS_SSP1DATPPS2_LENGTH                       0x1
#define _SSPDATPPS_SSP1DATPPS2_MASK                         0x4
#define _SSPDATPPS_SSP1DATPPS3_POSN                         0x3
#define _SSPDATPPS_SSP1DATPPS3_POSITION                     0x3
#define _SSPDATPPS_SSP1DATPPS3_SIZE                         0x1
#define _SSPDATPPS_SSP1DATPPS3_LENGTH                       0x1
#define _SSPDATPPS_SSP1DATPPS3_MASK                         0x8
#define _SSPDATPPS_SSP1DATPPS4_POSN                         0x4
#define _SSPDATPPS_SSP1DATPPS4_POSITION                     0x4
#define _SSPDATPPS_SSP1DATPPS4_SIZE                         0x1
#define _SSPDATPPS_SSP1DATPPS4_LENGTH                       0x1
#define _SSPDATPPS_SSP1DATPPS4_MASK                         0x10

// Register: SSP1SSPPS
#define SSP1SSPPS SSP1SSPPS
extern volatile unsigned char           SSP1SSPPS           __at(0xEB9);
#ifndef _LIB_BUILD
asm("SSP1SSPPS equ 0EB9h");
#endif
// aliases
extern volatile unsigned char           SSPSSPPS            __at(0xEB9);
#ifndef _LIB_BUILD
asm("SSPSSPPS equ 0EB9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned SSPSSPPS               :5;
    };
    struct {
        unsigned SSPSSPPS0              :1;
        unsigned SSPSSPPS1              :1;
        unsigned SSPSSPPS2              :1;
        unsigned SSPSSPPS3              :1;
        unsigned SSPSSPPS4              :1;
    };
    struct {
        unsigned SSP1SSPPS              :5;
    };
    struct {
        unsigned SSP1SSPPS0             :1;
        unsigned SSP1SSPPS1             :1;
        unsigned SSP1SSPPS2             :1;
        unsigned SSP1SSPPS3             :1;
        unsigned SSP1SSPPS4             :1;
    };
} SSP1SSPPSbits_t;
extern volatile SSP1SSPPSbits_t SSP1SSPPSbits __at(0xEB9);
// bitfield macros
#define _SSP1SSPPS_PIN_POSN                                 0x0
#define _SSP1SSPPS_PIN_POSITION                             0x0
#define _SSP1SSPPS_PIN_SIZE                                 0x3
#define _SSP1SSPPS_PIN_LENGTH                               0x3
#define _SSP1SSPPS_PIN_MASK                                 0x7
#define _SSP1SSPPS_PORT_POSN                                0x3
#define _SSP1SSPPS_PORT_POSITION                            0x3
#define _SSP1SSPPS_PORT_SIZE                                0x2
#define _SSP1SSPPS_PORT_LENGTH                              0x2
#define _SSP1SSPPS_PORT_MASK                                0x18
#define _SSP1SSPPS_SSPSSPPS_POSN                            0x0
#define _SSP1SSPPS_SSPSSPPS_POSITION                        0x0
#define _SSP1SSPPS_SSPSSPPS_SIZE                            0x5
#define _SSP1SSPPS_SSPSSPPS_LENGTH                          0x5
#define _SSP1SSPPS_SSPSSPPS_MASK                            0x1F
#define _SSP1SSPPS_SSPSSPPS0_POSN                           0x0
#define _SSP1SSPPS_SSPSSPPS0_POSITION                       0x0
#define _SSP1SSPPS_SSPSSPPS0_SIZE                           0x1
#define _SSP1SSPPS_SSPSSPPS0_LENGTH                         0x1
#define _SSP1SSPPS_SSPSSPPS0_MASK                           0x1
#define _SSP1SSPPS_SSPSSPPS1_POSN                           0x1
#define _SSP1SSPPS_SSPSSPPS1_POSITION                       0x1
#define _SSP1SSPPS_SSPSSPPS1_SIZE                           0x1
#define _SSP1SSPPS_SSPSSPPS1_LENGTH                         0x1
#define _SSP1SSPPS_SSPSSPPS1_MASK                           0x2
#define _SSP1SSPPS_SSPSSPPS2_POSN                           0x2
#define _SSP1SSPPS_SSPSSPPS2_POSITION                       0x2
#define _SSP1SSPPS_SSPSSPPS2_SIZE                           0x1
#define _SSP1SSPPS_SSPSSPPS2_LENGTH                         0x1
#define _SSP1SSPPS_SSPSSPPS2_MASK                           0x4
#define _SSP1SSPPS_SSPSSPPS3_POSN                           0x3
#define _SSP1SSPPS_SSPSSPPS3_POSITION                       0x3
#define _SSP1SSPPS_SSPSSPPS3_SIZE                           0x1
#define _SSP1SSPPS_SSPSSPPS3_LENGTH                         0x1
#define _SSP1SSPPS_SSPSSPPS3_MASK                           0x8
#define _SSP1SSPPS_SSPSSPPS4_POSN                           0x4
#define _SSP1SSPPS_SSPSSPPS4_POSITION                       0x4
#define _SSP1SSPPS_SSPSSPPS4_SIZE                           0x1
#define _SSP1SSPPS_SSPSSPPS4_LENGTH                         0x1
#define _SSP1SSPPS_SSPSSPPS4_MASK                           0x10
#define _SSP1SSPPS_SSP1SSPPS_POSN                           0x0
#define _SSP1SSPPS_SSP1SSPPS_POSITION                       0x0
#define _SSP1SSPPS_SSP1SSPPS_SIZE                           0x5
#define _SSP1SSPPS_SSP1SSPPS_LENGTH                         0x5
#define _SSP1SSPPS_SSP1SSPPS_MASK                           0x1F
#define _SSP1SSPPS_SSP1SSPPS0_POSN                          0x0
#define _SSP1SSPPS_SSP1SSPPS0_POSITION                      0x0
#define _SSP1SSPPS_SSP1SSPPS0_SIZE                          0x1
#define _SSP1SSPPS_SSP1SSPPS0_LENGTH                        0x1
#define _SSP1SSPPS_SSP1SSPPS0_MASK                          0x1
#define _SSP1SSPPS_SSP1SSPPS1_POSN                          0x1
#define _SSP1SSPPS_SSP1SSPPS1_POSITION                      0x1
#define _SSP1SSPPS_SSP1SSPPS1_SIZE                          0x1
#define _SSP1SSPPS_SSP1SSPPS1_LENGTH                        0x1
#define _SSP1SSPPS_SSP1SSPPS1_MASK                          0x2
#define _SSP1SSPPS_SSP1SSPPS2_POSN                          0x2
#define _SSP1SSPPS_SSP1SSPPS2_POSITION                      0x2
#define _SSP1SSPPS_SSP1SSPPS2_SIZE                          0x1
#define _SSP1SSPPS_SSP1SSPPS2_LENGTH                        0x1
#define _SSP1SSPPS_SSP1SSPPS2_MASK                          0x4
#define _SSP1SSPPS_SSP1SSPPS3_POSN                          0x3
#define _SSP1SSPPS_SSP1SSPPS3_POSITION                      0x3
#define _SSP1SSPPS_SSP1SSPPS3_SIZE                          0x1
#define _SSP1SSPPS_SSP1SSPPS3_LENGTH                        0x1
#define _SSP1SSPPS_SSP1SSPPS3_MASK                          0x8
#define _SSP1SSPPS_SSP1SSPPS4_POSN                          0x4
#define _SSP1SSPPS_SSP1SSPPS4_POSITION                      0x4
#define _SSP1SSPPS_SSP1SSPPS4_SIZE                          0x1
#define _SSP1SSPPS_SSP1SSPPS4_LENGTH                        0x1
#define _SSP1SSPPS_SSP1SSPPS4_MASK                          0x10
// alias bitfield definitions
typedef union {
    struct {
        unsigned PIN                    :3;
        unsigned PORT                   :2;
    };
    struct {
        unsigned SSPSSPPS               :5;
    };
    struct {
        unsigned SSPSSPPS0              :1;
        unsigned SSPSSPPS1              :1;
        unsigned SSPSSPPS2              :1;
        unsigned SSPSSPPS3              :1;
        unsigned SSPSSPPS4              :1;
    };
    struct {
        unsigned SSP1SSPPS              :5;
    };
    struct {
        unsigned SSP1SSPPS0             :1;
        unsigned SSP1SSPPS1             :1;
        unsigned SSP1SSPPS2             :1;
        unsigned SSP1SSPPS3             :1;
        unsigned SSP1SSPPS4             :1;
    };
} SSPSSPPSbits_t;
extern volatile SSPSSPPSbits_t SSPSSPPSbits __at(0xEB9);
// bitfield macros
#define _SSPSSPPS_PIN_POSN                                  0x0
#define _SSPSSPPS_PIN_POSITION                              0x0
#define _SSPSSPPS_PIN_SIZE                                  0x3
#define _SSPSSPPS_PIN_LENGTH                                0x3
#define _SSPSSPPS_PIN_MASK                                  0x7
#define _SSPSSPPS_PORT_POSN                                 0x3
#define _SSPSSPPS_PORT_POSITION                             0x3
#define _SSPSSPPS_PORT_SIZE                                 0x2
#define _SSPSSPPS_PORT_LENGTH                               0x2
#define _SSPSSPPS_PORT_MASK                                 0x18
#define _SSPSSPPS_SSPSSPPS_POSN                             0x0
#define _SSPSSPPS_SSPSSPPS_POSITION                         0x0
#define _SSPSSPPS_SSPSSPPS_SIZE                             0x5
#define _SSPSSPPS_SSPSSPPS_LENGTH                           0x5
#define _SSPSSPPS_SSPSSPPS_MASK                             0x1F
#define _SSPSSPPS_SSPSSPPS0_POSN                            0x0
#define _SSPSSPPS_SSPSSPPS0_POSITION                        0x0
#define _SSPSSPPS_SSPSSPPS0_SIZE                            0x1
#define _SSPSSPPS_SSPSSPPS0_LENGTH                          0x1
#define _SSPSSPPS_SSPSSPPS0_MASK                            0x1
#define _SSPSSPPS_SSPSSPPS1_POSN                            0x1
#define _SSPSSPPS_SSPSSPPS1_POSITION                        0x1
#define _SSPSSPPS_SSPSSPPS1_SIZE                            0x1
#define _SSPSSPPS_SSPSSPPS1_LENGTH                          0x1
#define _SSPSSPPS_SSPSSPPS1_MASK                            0x2
#define _SSPSSPPS_SSPSSPPS2_POSN                            0x2
#define _SSPSSPPS_SSPSSPPS2_POSITION                        0x2
#define _SSPSSPPS_SSPSSPPS2_SIZE                            0x1
#define _SSPSSPPS_SSPSSPPS2_LENGTH                          0x1
#define _SSPSSPPS_SSPSSPPS2_MASK                            0x4
#define _SSPSSPPS_SSPSSPPS3_POSN                            0x3
#define _SSPSSPPS_SSPSSPPS3_POSITION                        0x3
#define _SSPSSPPS_SSPSSPPS3_SIZE                            0x1
#define _SSPSSPPS_SSPSSPPS3_LENGTH                          0x1
#define _SSPSSPPS_SSPSSPPS3_MASK                            0x8
#define _SSPSSPPS_SSPSSPPS4_POSN                            0x4
#define _SSPSSPPS_SSPSSPPS4_POSITION                        0x4
#define _SSPSSPPS_SSPSSPPS4_SIZE                            0x1
#define _SSPSSPPS_SSPSSPPS4_LENGTH                          0x1
#define _SSPSSPPS_SSPSSPPS4_MASK                            0x10
#define _SSPSSPPS_SSP1SSPPS_POSN                            0x0
#define _SSPSSPPS_SSP1SSPPS_POSITION                        0x0
#define _SSPSSPPS_SSP1SSPPS_SIZE                            0x5
#define _SSPSSPPS_SSP1SSPPS_LENGTH                          0x5
#define _SSPSSPPS_SSP1SSPPS_MASK                            0x1F
#define _SSPSSPPS_SSP1SSPPS0_POSN                           0x0
#define _SSPSSPPS_SSP1SSPPS0_POSITION                       0x0
#define _SSPSSPPS_SSP1SSPPS0_SIZE                           0x1
#define _SSPSSPPS_SSP1SSPPS0_LENGTH                         0x1
#define _SSPSSPPS_SSP1SSPPS0_MASK                           0x1
#define _SSPSSPPS_SSP1SSPPS1_POSN                           0x1
#define _SSPSSPPS_SSP1SSPPS1_POSITION                       0x1
#define _SSPSSPPS_SSP1SSPPS1_SIZE                           0x1
#define _SSPSSPPS_SSP1SSPPS1_LENGTH                         0x1
#define _SSPSSPPS_SSP1SSPPS1_MASK                           0x2
#define _SSPSSPPS_SSP1SSPPS2_POSN                           0x2
#define _SSPSSPPS_SSP1SSPPS2_POSITION                       0x2
#define _SSPSSPPS_SSP1SSPPS2_SIZE                           0x1
#define _SSPSSPPS_SSP1SSPPS2_LENGTH                         0x1
#define _SSPSSPPS_SSP1SSPPS2_MASK                           0x4
#define _SSPSSPPS_SSP1SSPPS3_POSN                           0x3
#define _SSPSSPPS_SSP1SSPPS3_POSITION                       0x3
#define _SSPSSPPS_SSP1SSPPS3_SIZE                           0x1
#define _SSPSSPPS_SSP1SSPPS3_LENGTH                         0x1
#define _SSPSSPPS_SSP1SSPPS3_MASK                           0x8
#define _SSPSSPPS_SSP1SSPPS4_POSN                           0x4
#define _SSPSSPPS_SSP1SSPPS4_POSITION                       0x4
#define _SSPSSPPS_SSP1SSPPS4_SIZE                           0x1
#define _SSPSSPPS_SSP1SSPPS4_LENGTH                         0x1
#define _SSPSSPPS_SSP1SSPPS4_MASK                           0x10

// Register: IPR0
#define IPR0 IPR0
extern volatile unsigned char           IPR0                __at(0xEBA);
#ifndef _LIB_BUILD
asm("IPR0 equ 0EBAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INT0IP                 :1;
        unsigned INT1IP                 :1;
        unsigned INT2IP                 :1;
        unsigned                        :1;
        unsigned IOCIP                  :1;
        unsigned TMR0IP                 :1;
    };
} IPR0bits_t;
extern volatile IPR0bits_t IPR0bits __at(0xEBA);
// bitfield macros
#define _IPR0_INT0IP_POSN                                   0x0
#define _IPR0_INT0IP_POSITION                               0x0
#define _IPR0_INT0IP_SIZE                                   0x1
#define _IPR0_INT0IP_LENGTH                                 0x1
#define _IPR0_INT0IP_MASK                                   0x1
#define _IPR0_INT1IP_POSN                                   0x1
#define _IPR0_INT1IP_POSITION                               0x1
#define _IPR0_INT1IP_SIZE                                   0x1
#define _IPR0_INT1IP_LENGTH                                 0x1
#define _IPR0_INT1IP_MASK                                   0x2
#define _IPR0_INT2IP_POSN                                   0x2
#define _IPR0_INT2IP_POSITION                               0x2
#define _IPR0_INT2IP_SIZE                                   0x1
#define _IPR0_INT2IP_LENGTH                                 0x1
#define _IPR0_INT2IP_MASK                                   0x4
#define _IPR0_IOCIP_POSN                                    0x4
#define _IPR0_IOCIP_POSITION                                0x4
#define _IPR0_IOCIP_SIZE                                    0x1
#define _IPR0_IOCIP_LENGTH                                  0x1
#define _IPR0_IOCIP_MASK                                    0x10
#define _IPR0_TMR0IP_POSN                                   0x5
#define _IPR0_TMR0IP_POSITION                               0x5
#define _IPR0_TMR0IP_SIZE                                   0x1
#define _IPR0_TMR0IP_LENGTH                                 0x1
#define _IPR0_TMR0IP_MASK                                   0x20

// Register: IPR1
#define IPR1 IPR1
extern volatile unsigned char           IPR1                __at(0xEBB);
#ifndef _LIB_BUILD
asm("IPR1 equ 0EBBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADIP                   :1;
        unsigned ADTIP                  :1;
        unsigned                        :4;
        unsigned CSWIP                  :1;
        unsigned OSCFIP                 :1;
    };
    struct {
        unsigned                        :7;
        unsigned PSPIP                  :1;
    };
} IPR1bits_t;
extern volatile IPR1bits_t IPR1bits __at(0xEBB);
// bitfield macros
#define _IPR1_ADIP_POSN                                     0x0
#define _IPR1_ADIP_POSITION                                 0x0
#define _IPR1_ADIP_SIZE                                     0x1
#define _IPR1_ADIP_LENGTH                                   0x1
#define _IPR1_ADIP_MASK                                     0x1
#define _IPR1_ADTIP_POSN                                    0x1
#define _IPR1_ADTIP_POSITION                                0x1
#define _IPR1_ADTIP_SIZE                                    0x1
#define _IPR1_ADTIP_LENGTH                                  0x1
#define _IPR1_ADTIP_MASK                                    0x2
#define _IPR1_CSWIP_POSN                                    0x6
#define _IPR1_CSWIP_POSITION                                0x6
#define _IPR1_CSWIP_SIZE                                    0x1
#define _IPR1_CSWIP_LENGTH                                  0x1
#define _IPR1_CSWIP_MASK                                    0x40
#define _IPR1_OSCFIP_POSN                                   0x7
#define _IPR1_OSCFIP_POSITION                               0x7
#define _IPR1_OSCFIP_SIZE                                   0x1
#define _IPR1_OSCFIP_LENGTH                                 0x1
#define _IPR1_OSCFIP_MASK                                   0x80
#define _IPR1_PSPIP_POSN                                    0x7
#define _IPR1_PSPIP_POSITION                                0x7
#define _IPR1_PSPIP_SIZE                                    0x1
#define _IPR1_PSPIP_LENGTH                                  0x1
#define _IPR1_PSPIP_MASK                                    0x80

// Register: IPR2
#define IPR2 IPR2
extern volatile unsigned char           IPR2                __at(0xEBC);
#ifndef _LIB_BUILD
asm("IPR2 equ 0EBCh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned C1IP                   :1;
        unsigned C2IP                   :1;
        unsigned                        :4;
        unsigned ZCDIP                  :1;
        unsigned HLVDIP                 :1;
    };
    struct {
        unsigned                        :6;
        unsigned CMIP                   :1;
    };
} IPR2bits_t;
extern volatile IPR2bits_t IPR2bits __at(0xEBC);
// bitfield macros
#define _IPR2_C1IP_POSN                                     0x0
#define _IPR2_C1IP_POSITION                                 0x0
#define _IPR2_C1IP_SIZE                                     0x1
#define _IPR2_C1IP_LENGTH                                   0x1
#define _IPR2_C1IP_MASK                                     0x1
#define _IPR2_C2IP_POSN                                     0x1
#define _IPR2_C2IP_POSITION                                 0x1
#define _IPR2_C2IP_SIZE                                     0x1
#define _IPR2_C2IP_LENGTH                                   0x1
#define _IPR2_C2IP_MASK                                     0x2
#define _IPR2_ZCDIP_POSN                                    0x6
#define _IPR2_ZCDIP_POSITION                                0x6
#define _IPR2_ZCDIP_SIZE                                    0x1
#define _IPR2_ZCDIP_LENGTH                                  0x1
#define _IPR2_ZCDIP_MASK                                    0x40
#define _IPR2_HLVDIP_POSN                                   0x7
#define _IPR2_HLVDIP_POSITION                               0x7
#define _IPR2_HLVDIP_SIZE                                   0x1
#define _IPR2_HLVDIP_LENGTH                                 0x1
#define _IPR2_HLVDIP_MASK                                   0x80
#define _IPR2_CMIP_POSN                                     0x6
#define _IPR2_CMIP_POSITION                                 0x6
#define _IPR2_CMIP_SIZE                                     0x1
#define _IPR2_CMIP_LENGTH                                   0x1
#define _IPR2_CMIP_MASK                                     0x40

// Register: IPR3
#define IPR3 IPR3
extern volatile unsigned char           IPR3                __at(0xEBD);
#ifndef _LIB_BUILD
asm("IPR3 equ 0EBDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSPIP                  :1;
        unsigned BCLIP                  :1;
        unsigned                        :2;
        unsigned TXIP                   :1;
        unsigned RCIP                   :1;
    };
    struct {
        unsigned SSP1IP                 :1;
        unsigned BCL1IP                 :1;
    };
    struct {
        unsigned                        :1;
        unsigned RXBNIP                 :1;
        unsigned                        :2;
        unsigned TXBNIP                 :1;
    };
} IPR3bits_t;
extern volatile IPR3bits_t IPR3bits __at(0xEBD);
// bitfield macros
#define _IPR3_SSPIP_POSN                                    0x0
#define _IPR3_SSPIP_POSITION                                0x0
#define _IPR3_SSPIP_SIZE                                    0x1
#define _IPR3_SSPIP_LENGTH                                  0x1
#define _IPR3_SSPIP_MASK                                    0x1
#define _IPR3_BCLIP_POSN                                    0x1
#define _IPR3_BCLIP_POSITION                                0x1
#define _IPR3_BCLIP_SIZE                                    0x1
#define _IPR3_BCLIP_LENGTH                                  0x1
#define _IPR3_BCLIP_MASK                                    0x2
#define _IPR3_TXIP_POSN                                     0x4
#define _IPR3_TXIP_POSITION                                 0x4
#define _IPR3_TXIP_SIZE                                     0x1
#define _IPR3_TXIP_LENGTH                                   0x1
#define _IPR3_TXIP_MASK                                     0x10
#define _IPR3_RCIP_POSN                                     0x5
#define _IPR3_RCIP_POSITION                                 0x5
#define _IPR3_RCIP_SIZE                                     0x1
#define _IPR3_RCIP_LENGTH                                   0x1
#define _IPR3_RCIP_MASK                                     0x20
#define _IPR3_SSP1IP_POSN                                   0x0
#define _IPR3_SSP1IP_POSITION                               0x0
#define _IPR3_SSP1IP_SIZE                                   0x1
#define _IPR3_SSP1IP_LENGTH                                 0x1
#define _IPR3_SSP1IP_MASK                                   0x1
#define _IPR3_BCL1IP_POSN                                   0x1
#define _IPR3_BCL1IP_POSITION                               0x1
#define _IPR3_BCL1IP_SIZE                                   0x1
#define _IPR3_BCL1IP_LENGTH                                 0x1
#define _IPR3_BCL1IP_MASK                                   0x2
#define _IPR3_RXBNIP_POSN                                   0x1
#define _IPR3_RXBNIP_POSITION                               0x1
#define _IPR3_RXBNIP_SIZE                                   0x1
#define _IPR3_RXBNIP_LENGTH                                 0x1
#define _IPR3_RXBNIP_MASK                                   0x2
#define _IPR3_TXBNIP_POSN                                   0x4
#define _IPR3_TXBNIP_POSITION                               0x4
#define _IPR3_TXBNIP_SIZE                                   0x1
#define _IPR3_TXBNIP_LENGTH                                 0x1
#define _IPR3_TXBNIP_MASK                                   0x10

// Register: IPR4
#define IPR4 IPR4
extern volatile unsigned char           IPR4                __at(0xEBE);
#ifndef _LIB_BUILD
asm("IPR4 equ 0EBEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR1IP                 :1;
        unsigned TMR2IP                 :1;
        unsigned TMR3IP                 :1;
        unsigned TMR4IP                 :1;
        unsigned TMR5IP                 :1;
        unsigned TMR6IP                 :1;
    };
    struct {
        unsigned CCIP3IP                :1;
    };
} IPR4bits_t;
extern volatile IPR4bits_t IPR4bits __at(0xEBE);
// bitfield macros
#define _IPR4_TMR1IP_POSN                                   0x0
#define _IPR4_TMR1IP_POSITION                               0x0
#define _IPR4_TMR1IP_SIZE                                   0x1
#define _IPR4_TMR1IP_LENGTH                                 0x1
#define _IPR4_TMR1IP_MASK                                   0x1
#define _IPR4_TMR2IP_POSN                                   0x1
#define _IPR4_TMR2IP_POSITION                               0x1
#define _IPR4_TMR2IP_SIZE                                   0x1
#define _IPR4_TMR2IP_LENGTH                                 0x1
#define _IPR4_TMR2IP_MASK                                   0x2
#define _IPR4_TMR3IP_POSN                                   0x2
#define _IPR4_TMR3IP_POSITION                               0x2
#define _IPR4_TMR3IP_SIZE                                   0x1
#define _IPR4_TMR3IP_LENGTH                                 0x1
#define _IPR4_TMR3IP_MASK                                   0x4
#define _IPR4_TMR4IP_POSN                                   0x3
#define _IPR4_TMR4IP_POSITION                               0x3
#define _IPR4_TMR4IP_SIZE                                   0x1
#define _IPR4_TMR4IP_LENGTH                                 0x1
#define _IPR4_TMR4IP_MASK                                   0x8
#define _IPR4_TMR5IP_POSN                                   0x4
#define _IPR4_TMR5IP_POSITION                               0x4
#define _IPR4_TMR5IP_SIZE                                   0x1
#define _IPR4_TMR5IP_LENGTH                                 0x1
#define _IPR4_TMR5IP_MASK                                   0x10
#define _IPR4_TMR6IP_POSN                                   0x5
#define _IPR4_TMR6IP_POSITION                               0x5
#define _IPR4_TMR6IP_SIZE                                   0x1
#define _IPR4_TMR6IP_LENGTH                                 0x1
#define _IPR4_TMR6IP_MASK                                   0x20
#define _IPR4_CCIP3IP_POSN                                  0x0
#define _IPR4_CCIP3IP_POSITION                              0x0
#define _IPR4_CCIP3IP_SIZE                                  0x1
#define _IPR4_CCIP3IP_LENGTH                                0x1
#define _IPR4_CCIP3IP_MASK                                  0x1

// Register: IPR5
#define IPR5 IPR5
extern volatile unsigned char           IPR5                __at(0xEBF);
#ifndef _LIB_BUILD
asm("IPR5 equ 0EBFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR1GIP                :1;
        unsigned TMR3GIP                :1;
        unsigned TMR5GIP                :1;
    };
    struct {
        unsigned CCH05                  :1;
        unsigned CCH15                  :1;
    };
} IPR5bits_t;
extern volatile IPR5bits_t IPR5bits __at(0xEBF);
// bitfield macros
#define _IPR5_TMR1GIP_POSN                                  0x0
#define _IPR5_TMR1GIP_POSITION                              0x0
#define _IPR5_TMR1GIP_SIZE                                  0x1
#define _IPR5_TMR1GIP_LENGTH                                0x1
#define _IPR5_TMR1GIP_MASK                                  0x1
#define _IPR5_TMR3GIP_POSN                                  0x1
#define _IPR5_TMR3GIP_POSITION                              0x1
#define _IPR5_TMR3GIP_SIZE                                  0x1
#define _IPR5_TMR3GIP_LENGTH                                0x1
#define _IPR5_TMR3GIP_MASK                                  0x2
#define _IPR5_TMR5GIP_POSN                                  0x2
#define _IPR5_TMR5GIP_POSITION                              0x2
#define _IPR5_TMR5GIP_SIZE                                  0x1
#define _IPR5_TMR5GIP_LENGTH                                0x1
#define _IPR5_TMR5GIP_MASK                                  0x4
#define _IPR5_CCH05_POSN                                    0x0
#define _IPR5_CCH05_POSITION                                0x0
#define _IPR5_CCH05_SIZE                                    0x1
#define _IPR5_CCH05_LENGTH                                  0x1
#define _IPR5_CCH05_MASK                                    0x1
#define _IPR5_CCH15_POSN                                    0x1
#define _IPR5_CCH15_POSITION                                0x1
#define _IPR5_CCH15_SIZE                                    0x1
#define _IPR5_CCH15_LENGTH                                  0x1
#define _IPR5_CCH15_MASK                                    0x2

// Register: IPR6
#define IPR6 IPR6
extern volatile unsigned char           IPR6                __at(0xEC0);
#ifndef _LIB_BUILD
asm("IPR6 equ 0EC0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP1IP                 :1;
        unsigned CCP2IP                 :1;
    };
} IPR6bits_t;
extern volatile IPR6bits_t IPR6bits __at(0xEC0);
// bitfield macros
#define _IPR6_CCP1IP_POSN                                   0x0
#define _IPR6_CCP1IP_POSITION                               0x0
#define _IPR6_CCP1IP_SIZE                                   0x1
#define _IPR6_CCP1IP_LENGTH                                 0x1
#define _IPR6_CCP1IP_MASK                                   0x1
#define _IPR6_CCP2IP_POSN                                   0x1
#define _IPR6_CCP2IP_POSITION                               0x1
#define _IPR6_CCP2IP_SIZE                                   0x1
#define _IPR6_CCP2IP_LENGTH                                 0x1
#define _IPR6_CCP2IP_MASK                                   0x2

// Register: IPR7
#define IPR7 IPR7
extern volatile unsigned char           IPR7                __at(0xEC1);
#ifndef _LIB_BUILD
asm("IPR7 equ 0EC1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CWGIP                  :1;
        unsigned                        :4;
        unsigned NVMIP                  :1;
        unsigned CRCIP                  :1;
        unsigned SCANIP                 :1;
    };
    struct {
        unsigned CWG1IP                 :1;
    };
} IPR7bits_t;
extern volatile IPR7bits_t IPR7bits __at(0xEC1);
// bitfield macros
#define _IPR7_CWGIP_POSN                                    0x0
#define _IPR7_CWGIP_POSITION                                0x0
#define _IPR7_CWGIP_SIZE                                    0x1
#define _IPR7_CWGIP_LENGTH                                  0x1
#define _IPR7_CWGIP_MASK                                    0x1
#define _IPR7_NVMIP_POSN                                    0x5
#define _IPR7_NVMIP_POSITION                                0x5
#define _IPR7_NVMIP_SIZE                                    0x1
#define _IPR7_NVMIP_LENGTH                                  0x1
#define _IPR7_NVMIP_MASK                                    0x20
#define _IPR7_CRCIP_POSN                                    0x6
#define _IPR7_CRCIP_POSITION                                0x6
#define _IPR7_CRCIP_SIZE                                    0x1
#define _IPR7_CRCIP_LENGTH                                  0x1
#define _IPR7_CRCIP_MASK                                    0x40
#define _IPR7_SCANIP_POSN                                   0x7
#define _IPR7_SCANIP_POSITION                               0x7
#define _IPR7_SCANIP_SIZE                                   0x1
#define _IPR7_SCANIP_LENGTH                                 0x1
#define _IPR7_SCANIP_MASK                                   0x80
#define _IPR7_CWG1IP_POSN                                   0x0
#define _IPR7_CWG1IP_POSITION                               0x0
#define _IPR7_CWG1IP_SIZE                                   0x1
#define _IPR7_CWG1IP_LENGTH                                 0x1
#define _IPR7_CWG1IP_MASK                                   0x1

// Register: PIE0
#define PIE0 PIE0
extern volatile unsigned char           PIE0                __at(0xEC2);
#ifndef _LIB_BUILD
asm("PIE0 equ 0EC2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INT0IE                 :1;
        unsigned INT1IE                 :1;
        unsigned INT2IE                 :1;
        unsigned                        :1;
        unsigned IOCIE                  :1;
        unsigned TMR0IE                 :1;
    };
} PIE0bits_t;
extern volatile PIE0bits_t PIE0bits __at(0xEC2);
// bitfield macros
#define _PIE0_INT0IE_POSN                                   0x0
#define _PIE0_INT0IE_POSITION                               0x0
#define _PIE0_INT0IE_SIZE                                   0x1
#define _PIE0_INT0IE_LENGTH                                 0x1
#define _PIE0_INT0IE_MASK                                   0x1
#define _PIE0_INT1IE_POSN                                   0x1
#define _PIE0_INT1IE_POSITION                               0x1
#define _PIE0_INT1IE_SIZE                                   0x1
#define _PIE0_INT1IE_LENGTH                                 0x1
#define _PIE0_INT1IE_MASK                                   0x2
#define _PIE0_INT2IE_POSN                                   0x2
#define _PIE0_INT2IE_POSITION                               0x2
#define _PIE0_INT2IE_SIZE                                   0x1
#define _PIE0_INT2IE_LENGTH                                 0x1
#define _PIE0_INT2IE_MASK                                   0x4
#define _PIE0_IOCIE_POSN                                    0x4
#define _PIE0_IOCIE_POSITION                                0x4
#define _PIE0_IOCIE_SIZE                                    0x1
#define _PIE0_IOCIE_LENGTH                                  0x1
#define _PIE0_IOCIE_MASK                                    0x10
#define _PIE0_TMR0IE_POSN                                   0x5
#define _PIE0_TMR0IE_POSITION                               0x5
#define _PIE0_TMR0IE_SIZE                                   0x1
#define _PIE0_TMR0IE_LENGTH                                 0x1
#define _PIE0_TMR0IE_MASK                                   0x20

// Register: PIE1
#define PIE1 PIE1
extern volatile unsigned char           PIE1                __at(0xEC3);
#ifndef _LIB_BUILD
asm("PIE1 equ 0EC3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADIE                   :1;
        unsigned ADTIE                  :1;
        unsigned                        :4;
        unsigned CSWIE                  :1;
        unsigned OSCFIE                 :1;
    };
    struct {
        unsigned                        :7;
        unsigned PSPIE                  :1;
    };
} PIE1bits_t;
extern volatile PIE1bits_t PIE1bits __at(0xEC3);
// bitfield macros
#define _PIE1_ADIE_POSN                                     0x0
#define _PIE1_ADIE_POSITION                                 0x0
#define _PIE1_ADIE_SIZE                                     0x1
#define _PIE1_ADIE_LENGTH                                   0x1
#define _PIE1_ADIE_MASK                                     0x1
#define _PIE1_ADTIE_POSN                                    0x1
#define _PIE1_ADTIE_POSITION                                0x1
#define _PIE1_ADTIE_SIZE                                    0x1
#define _PIE1_ADTIE_LENGTH                                  0x1
#define _PIE1_ADTIE_MASK                                    0x2
#define _PIE1_CSWIE_POSN                                    0x6
#define _PIE1_CSWIE_POSITION                                0x6
#define _PIE1_CSWIE_SIZE                                    0x1
#define _PIE1_CSWIE_LENGTH                                  0x1
#define _PIE1_CSWIE_MASK                                    0x40
#define _PIE1_OSCFIE_POSN                                   0x7
#define _PIE1_OSCFIE_POSITION                               0x7
#define _PIE1_OSCFIE_SIZE                                   0x1
#define _PIE1_OSCFIE_LENGTH                                 0x1
#define _PIE1_OSCFIE_MASK                                   0x80
#define _PIE1_PSPIE_POSN                                    0x7
#define _PIE1_PSPIE_POSITION                                0x7
#define _PIE1_PSPIE_SIZE                                    0x1
#define _PIE1_PSPIE_LENGTH                                  0x1
#define _PIE1_PSPIE_MASK                                    0x80

// Register: PIE2
#define PIE2 PIE2
extern volatile unsigned char           PIE2                __at(0xEC4);
#ifndef _LIB_BUILD
asm("PIE2 equ 0EC4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned C1IE                   :1;
        unsigned C2IE                   :1;
        unsigned                        :4;
        unsigned ZCDIE                  :1;
        unsigned HLVDIE                 :1;
    };
    struct {
        unsigned                        :6;
        unsigned CMIE                   :1;
    };
} PIE2bits_t;
extern volatile PIE2bits_t PIE2bits __at(0xEC4);
// bitfield macros
#define _PIE2_C1IE_POSN                                     0x0
#define _PIE2_C1IE_POSITION                                 0x0
#define _PIE2_C1IE_SIZE                                     0x1
#define _PIE2_C1IE_LENGTH                                   0x1
#define _PIE2_C1IE_MASK                                     0x1
#define _PIE2_C2IE_POSN                                     0x1
#define _PIE2_C2IE_POSITION                                 0x1
#define _PIE2_C2IE_SIZE                                     0x1
#define _PIE2_C2IE_LENGTH                                   0x1
#define _PIE2_C2IE_MASK                                     0x2
#define _PIE2_ZCDIE_POSN                                    0x6
#define _PIE2_ZCDIE_POSITION                                0x6
#define _PIE2_ZCDIE_SIZE                                    0x1
#define _PIE2_ZCDIE_LENGTH                                  0x1
#define _PIE2_ZCDIE_MASK                                    0x40
#define _PIE2_HLVDIE_POSN                                   0x7
#define _PIE2_HLVDIE_POSITION                               0x7
#define _PIE2_HLVDIE_SIZE                                   0x1
#define _PIE2_HLVDIE_LENGTH                                 0x1
#define _PIE2_HLVDIE_MASK                                   0x80
#define _PIE2_CMIE_POSN                                     0x6
#define _PIE2_CMIE_POSITION                                 0x6
#define _PIE2_CMIE_SIZE                                     0x1
#define _PIE2_CMIE_LENGTH                                   0x1
#define _PIE2_CMIE_MASK                                     0x40

// Register: PIE3
#define PIE3 PIE3
extern volatile unsigned char           PIE3                __at(0xEC5);
#ifndef _LIB_BUILD
asm("PIE3 equ 0EC5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSP1IE                 :1;
        unsigned BCL1IE                 :1;
        unsigned                        :2;
        unsigned TX1IE                  :1;
        unsigned RC1IE                  :1;
    };
    struct {
        unsigned SSPIE                  :1;
        unsigned BCLIE                  :1;
        unsigned                        :2;
        unsigned TXIE                   :1;
        unsigned RCIE                   :1;
    };
    struct {
        unsigned RXB0IE                 :1;
        unsigned RXB1IE                 :1;
        unsigned                        :2;
        unsigned TXB2IE                 :1;
    };
    struct {
        unsigned                        :1;
        unsigned RXBNIE                 :1;
        unsigned                        :2;
        unsigned TXBNIE                 :1;
    };
} PIE3bits_t;
extern volatile PIE3bits_t PIE3bits __at(0xEC5);
// bitfield macros
#define _PIE3_SSP1IE_POSN                                   0x0
#define _PIE3_SSP1IE_POSITION                               0x0
#define _PIE3_SSP1IE_SIZE                                   0x1
#define _PIE3_SSP1IE_LENGTH                                 0x1
#define _PIE3_SSP1IE_MASK                                   0x1
#define _PIE3_BCL1IE_POSN                                   0x1
#define _PIE3_BCL1IE_POSITION                               0x1
#define _PIE3_BCL1IE_SIZE                                   0x1
#define _PIE3_BCL1IE_LENGTH                                 0x1
#define _PIE3_BCL1IE_MASK                                   0x2
#define _PIE3_TX1IE_POSN                                    0x4
#define _PIE3_TX1IE_POSITION                                0x4
#define _PIE3_TX1IE_SIZE                                    0x1
#define _PIE3_TX1IE_LENGTH                                  0x1
#define _PIE3_TX1IE_MASK                                    0x10
#define _PIE3_RC1IE_POSN                                    0x5
#define _PIE3_RC1IE_POSITION                                0x5
#define _PIE3_RC1IE_SIZE                                    0x1
#define _PIE3_RC1IE_LENGTH                                  0x1
#define _PIE3_RC1IE_MASK                                    0x20
#define _PIE3_SSPIE_POSN                                    0x0
#define _PIE3_SSPIE_POSITION                                0x0
#define _PIE3_SSPIE_SIZE                                    0x1
#define _PIE3_SSPIE_LENGTH                                  0x1
#define _PIE3_SSPIE_MASK                                    0x1
#define _PIE3_BCLIE_POSN                                    0x1
#define _PIE3_BCLIE_POSITION                                0x1
#define _PIE3_BCLIE_SIZE                                    0x1
#define _PIE3_BCLIE_LENGTH                                  0x1
#define _PIE3_BCLIE_MASK                                    0x2
#define _PIE3_TXIE_POSN                                     0x4
#define _PIE3_TXIE_POSITION                                 0x4
#define _PIE3_TXIE_SIZE                                     0x1
#define _PIE3_TXIE_LENGTH                                   0x1
#define _PIE3_TXIE_MASK                                     0x10
#define _PIE3_RCIE_POSN                                     0x5
#define _PIE3_RCIE_POSITION                                 0x5
#define _PIE3_RCIE_SIZE                                     0x1
#define _PIE3_RCIE_LENGTH                                   0x1
#define _PIE3_RCIE_MASK                                     0x20
#define _PIE3_RXB0IE_POSN                                   0x0
#define _PIE3_RXB0IE_POSITION                               0x0
#define _PIE3_RXB0IE_SIZE                                   0x1
#define _PIE3_RXB0IE_LENGTH                                 0x1
#define _PIE3_RXB0IE_MASK                                   0x1
#define _PIE3_RXB1IE_POSN                                   0x1
#define _PIE3_RXB1IE_POSITION                               0x1
#define _PIE3_RXB1IE_SIZE                                   0x1
#define _PIE3_RXB1IE_LENGTH                                 0x1
#define _PIE3_RXB1IE_MASK                                   0x2
#define _PIE3_TXB2IE_POSN                                   0x4
#define _PIE3_TXB2IE_POSITION                               0x4
#define _PIE3_TXB2IE_SIZE                                   0x1
#define _PIE3_TXB2IE_LENGTH                                 0x1
#define _PIE3_TXB2IE_MASK                                   0x10
#define _PIE3_RXBNIE_POSN                                   0x1
#define _PIE3_RXBNIE_POSITION                               0x1
#define _PIE3_RXBNIE_SIZE                                   0x1
#define _PIE3_RXBNIE_LENGTH                                 0x1
#define _PIE3_RXBNIE_MASK                                   0x2
#define _PIE3_TXBNIE_POSN                                   0x4
#define _PIE3_TXBNIE_POSITION                               0x4
#define _PIE3_TXBNIE_SIZE                                   0x1
#define _PIE3_TXBNIE_LENGTH                                 0x1
#define _PIE3_TXBNIE_MASK                                   0x10

// Register: PIE4
#define PIE4 PIE4
extern volatile unsigned char           PIE4                __at(0xEC6);
#ifndef _LIB_BUILD
asm("PIE4 equ 0EC6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR1IE                 :1;
        unsigned TMR2IE                 :1;
        unsigned TMR3IE                 :1;
        unsigned TMR4IE                 :1;
        unsigned TMR5IE                 :1;
        unsigned TMR6IE                 :1;
    };
} PIE4bits_t;
extern volatile PIE4bits_t PIE4bits __at(0xEC6);
// bitfield macros
#define _PIE4_TMR1IE_POSN                                   0x0
#define _PIE4_TMR1IE_POSITION                               0x0
#define _PIE4_TMR1IE_SIZE                                   0x1
#define _PIE4_TMR1IE_LENGTH                                 0x1
#define _PIE4_TMR1IE_MASK                                   0x1
#define _PIE4_TMR2IE_POSN                                   0x1
#define _PIE4_TMR2IE_POSITION                               0x1
#define _PIE4_TMR2IE_SIZE                                   0x1
#define _PIE4_TMR2IE_LENGTH                                 0x1
#define _PIE4_TMR2IE_MASK                                   0x2
#define _PIE4_TMR3IE_POSN                                   0x2
#define _PIE4_TMR3IE_POSITION                               0x2
#define _PIE4_TMR3IE_SIZE                                   0x1
#define _PIE4_TMR3IE_LENGTH                                 0x1
#define _PIE4_TMR3IE_MASK                                   0x4
#define _PIE4_TMR4IE_POSN                                   0x3
#define _PIE4_TMR4IE_POSITION                               0x3
#define _PIE4_TMR4IE_SIZE                                   0x1
#define _PIE4_TMR4IE_LENGTH                                 0x1
#define _PIE4_TMR4IE_MASK                                   0x8
#define _PIE4_TMR5IE_POSN                                   0x4
#define _PIE4_TMR5IE_POSITION                               0x4
#define _PIE4_TMR5IE_SIZE                                   0x1
#define _PIE4_TMR5IE_LENGTH                                 0x1
#define _PIE4_TMR5IE_MASK                                   0x10
#define _PIE4_TMR6IE_POSN                                   0x5
#define _PIE4_TMR6IE_POSITION                               0x5
#define _PIE4_TMR6IE_SIZE                                   0x1
#define _PIE4_TMR6IE_LENGTH                                 0x1
#define _PIE4_TMR6IE_MASK                                   0x20

// Register: PIE5
#define PIE5 PIE5
extern volatile unsigned char           PIE5                __at(0xEC7);
#ifndef _LIB_BUILD
asm("PIE5 equ 0EC7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR1GIE                :1;
        unsigned TMR3GIE                :1;
        unsigned TMR5GIE                :1;
    };
} PIE5bits_t;
extern volatile PIE5bits_t PIE5bits __at(0xEC7);
// bitfield macros
#define _PIE5_TMR1GIE_POSN                                  0x0
#define _PIE5_TMR1GIE_POSITION                              0x0
#define _PIE5_TMR1GIE_SIZE                                  0x1
#define _PIE5_TMR1GIE_LENGTH                                0x1
#define _PIE5_TMR1GIE_MASK                                  0x1
#define _PIE5_TMR3GIE_POSN                                  0x1
#define _PIE5_TMR3GIE_POSITION                              0x1
#define _PIE5_TMR3GIE_SIZE                                  0x1
#define _PIE5_TMR3GIE_LENGTH                                0x1
#define _PIE5_TMR3GIE_MASK                                  0x2
#define _PIE5_TMR5GIE_POSN                                  0x2
#define _PIE5_TMR5GIE_POSITION                              0x2
#define _PIE5_TMR5GIE_SIZE                                  0x1
#define _PIE5_TMR5GIE_LENGTH                                0x1
#define _PIE5_TMR5GIE_MASK                                  0x4

// Register: PIE6
#define PIE6 PIE6
extern volatile unsigned char           PIE6                __at(0xEC8);
#ifndef _LIB_BUILD
asm("PIE6 equ 0EC8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP1IE                 :1;
        unsigned CCP2IE                 :1;
    };
} PIE6bits_t;
extern volatile PIE6bits_t PIE6bits __at(0xEC8);
// bitfield macros
#define _PIE6_CCP1IE_POSN                                   0x0
#define _PIE6_CCP1IE_POSITION                               0x0
#define _PIE6_CCP1IE_SIZE                                   0x1
#define _PIE6_CCP1IE_LENGTH                                 0x1
#define _PIE6_CCP1IE_MASK                                   0x1
#define _PIE6_CCP2IE_POSN                                   0x1
#define _PIE6_CCP2IE_POSITION                               0x1
#define _PIE6_CCP2IE_SIZE                                   0x1
#define _PIE6_CCP2IE_LENGTH                                 0x1
#define _PIE6_CCP2IE_MASK                                   0x2

// Register: PIE7
#define PIE7 PIE7
extern volatile unsigned char           PIE7                __at(0xEC9);
#ifndef _LIB_BUILD
asm("PIE7 equ 0EC9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CWGIE                  :1;
        unsigned                        :4;
        unsigned NVMIE                  :1;
        unsigned CRCIE                  :1;
        unsigned SCANIE                 :1;
    };
    struct {
        unsigned CWG1IE                 :1;
    };
} PIE7bits_t;
extern volatile PIE7bits_t PIE7bits __at(0xEC9);
// bitfield macros
#define _PIE7_CWGIE_POSN                                    0x0
#define _PIE7_CWGIE_POSITION                                0x0
#define _PIE7_CWGIE_SIZE                                    0x1
#define _PIE7_CWGIE_LENGTH                                  0x1
#define _PIE7_CWGIE_MASK                                    0x1
#define _PIE7_NVMIE_POSN                                    0x5
#define _PIE7_NVMIE_POSITION                                0x5
#define _PIE7_NVMIE_SIZE                                    0x1
#define _PIE7_NVMIE_LENGTH                                  0x1
#define _PIE7_NVMIE_MASK                                    0x20
#define _PIE7_CRCIE_POSN                                    0x6
#define _PIE7_CRCIE_POSITION                                0x6
#define _PIE7_CRCIE_SIZE                                    0x1
#define _PIE7_CRCIE_LENGTH                                  0x1
#define _PIE7_CRCIE_MASK                                    0x40
#define _PIE7_SCANIE_POSN                                   0x7
#define _PIE7_SCANIE_POSITION                               0x7
#define _PIE7_SCANIE_SIZE                                   0x1
#define _PIE7_SCANIE_LENGTH                                 0x1
#define _PIE7_SCANIE_MASK                                   0x80
#define _PIE7_CWG1IE_POSN                                   0x0
#define _PIE7_CWG1IE_POSITION                               0x0
#define _PIE7_CWG1IE_SIZE                                   0x1
#define _PIE7_CWG1IE_LENGTH                                 0x1
#define _PIE7_CWG1IE_MASK                                   0x1

// Register: PIR0
#define PIR0 PIR0
extern volatile unsigned char           PIR0                __at(0xECA);
#ifndef _LIB_BUILD
asm("PIR0 equ 0ECAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INT0IF                 :1;
        unsigned INT1IF                 :1;
        unsigned INT2IF                 :1;
        unsigned                        :1;
        unsigned IOCIF                  :1;
        unsigned TMR0IF                 :1;
    };
} PIR0bits_t;
extern volatile PIR0bits_t PIR0bits __at(0xECA);
// bitfield macros
#define _PIR0_INT0IF_POSN                                   0x0
#define _PIR0_INT0IF_POSITION                               0x0
#define _PIR0_INT0IF_SIZE                                   0x1
#define _PIR0_INT0IF_LENGTH                                 0x1
#define _PIR0_INT0IF_MASK                                   0x1
#define _PIR0_INT1IF_POSN                                   0x1
#define _PIR0_INT1IF_POSITION                               0x1
#define _PIR0_INT1IF_SIZE                                   0x1
#define _PIR0_INT1IF_LENGTH                                 0x1
#define _PIR0_INT1IF_MASK                                   0x2
#define _PIR0_INT2IF_POSN                                   0x2
#define _PIR0_INT2IF_POSITION                               0x2
#define _PIR0_INT2IF_SIZE                                   0x1
#define _PIR0_INT2IF_LENGTH                                 0x1
#define _PIR0_INT2IF_MASK                                   0x4
#define _PIR0_IOCIF_POSN                                    0x4
#define _PIR0_IOCIF_POSITION                                0x4
#define _PIR0_IOCIF_SIZE                                    0x1
#define _PIR0_IOCIF_LENGTH                                  0x1
#define _PIR0_IOCIF_MASK                                    0x10
#define _PIR0_TMR0IF_POSN                                   0x5
#define _PIR0_TMR0IF_POSITION                               0x5
#define _PIR0_TMR0IF_SIZE                                   0x1
#define _PIR0_TMR0IF_LENGTH                                 0x1
#define _PIR0_TMR0IF_MASK                                   0x20

// Register: PIR1
#define PIR1 PIR1
extern volatile unsigned char           PIR1                __at(0xECB);
#ifndef _LIB_BUILD
asm("PIR1 equ 0ECBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADIF                   :1;
        unsigned ADTIF                  :1;
        unsigned                        :4;
        unsigned CSWIF                  :1;
        unsigned OSCFIF                 :1;
    };
    struct {
        unsigned                        :7;
        unsigned PSPIF                  :1;
    };
} PIR1bits_t;
extern volatile PIR1bits_t PIR1bits __at(0xECB);
// bitfield macros
#define _PIR1_ADIF_POSN                                     0x0
#define _PIR1_ADIF_POSITION                                 0x0
#define _PIR1_ADIF_SIZE                                     0x1
#define _PIR1_ADIF_LENGTH                                   0x1
#define _PIR1_ADIF_MASK                                     0x1
#define _PIR1_ADTIF_POSN                                    0x1
#define _PIR1_ADTIF_POSITION                                0x1
#define _PIR1_ADTIF_SIZE                                    0x1
#define _PIR1_ADTIF_LENGTH                                  0x1
#define _PIR1_ADTIF_MASK                                    0x2
#define _PIR1_CSWIF_POSN                                    0x6
#define _PIR1_CSWIF_POSITION                                0x6
#define _PIR1_CSWIF_SIZE                                    0x1
#define _PIR1_CSWIF_LENGTH                                  0x1
#define _PIR1_CSWIF_MASK                                    0x40
#define _PIR1_OSCFIF_POSN                                   0x7
#define _PIR1_OSCFIF_POSITION                               0x7
#define _PIR1_OSCFIF_SIZE                                   0x1
#define _PIR1_OSCFIF_LENGTH                                 0x1
#define _PIR1_OSCFIF_MASK                                   0x80
#define _PIR1_PSPIF_POSN                                    0x7
#define _PIR1_PSPIF_POSITION                                0x7
#define _PIR1_PSPIF_SIZE                                    0x1
#define _PIR1_PSPIF_LENGTH                                  0x1
#define _PIR1_PSPIF_MASK                                    0x80

// Register: PIR2
#define PIR2 PIR2
extern volatile unsigned char           PIR2                __at(0xECC);
#ifndef _LIB_BUILD
asm("PIR2 equ 0ECCh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned C1IF                   :1;
        unsigned C2IF                   :1;
        unsigned                        :4;
        unsigned ZCDIF                  :1;
        unsigned HLVDIF                 :1;
    };
    struct {
        unsigned                        :6;
        unsigned CMIF                   :1;
    };
} PIR2bits_t;
extern volatile PIR2bits_t PIR2bits __at(0xECC);
// bitfield macros
#define _PIR2_C1IF_POSN                                     0x0
#define _PIR2_C1IF_POSITION                                 0x0
#define _PIR2_C1IF_SIZE                                     0x1
#define _PIR2_C1IF_LENGTH                                   0x1
#define _PIR2_C1IF_MASK                                     0x1
#define _PIR2_C2IF_POSN                                     0x1
#define _PIR2_C2IF_POSITION                                 0x1
#define _PIR2_C2IF_SIZE                                     0x1
#define _PIR2_C2IF_LENGTH                                   0x1
#define _PIR2_C2IF_MASK                                     0x2
#define _PIR2_ZCDIF_POSN                                    0x6
#define _PIR2_ZCDIF_POSITION                                0x6
#define _PIR2_ZCDIF_SIZE                                    0x1
#define _PIR2_ZCDIF_LENGTH                                  0x1
#define _PIR2_ZCDIF_MASK                                    0x40
#define _PIR2_HLVDIF_POSN                                   0x7
#define _PIR2_HLVDIF_POSITION                               0x7
#define _PIR2_HLVDIF_SIZE                                   0x1
#define _PIR2_HLVDIF_LENGTH                                 0x1
#define _PIR2_HLVDIF_MASK                                   0x80
#define _PIR2_CMIF_POSN                                     0x6
#define _PIR2_CMIF_POSITION                                 0x6
#define _PIR2_CMIF_SIZE                                     0x1
#define _PIR2_CMIF_LENGTH                                   0x1
#define _PIR2_CMIF_MASK                                     0x40

// Register: PIR3
#define PIR3 PIR3
extern volatile unsigned char           PIR3                __at(0xECD);
#ifndef _LIB_BUILD
asm("PIR3 equ 0ECDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSP1IF                 :1;
        unsigned BCL1IF                 :1;
        unsigned                        :2;
        unsigned TX1IF                  :1;
        unsigned RC1IF                  :1;
    };
    struct {
        unsigned SSPIF                  :1;
        unsigned BCLIF                  :1;
        unsigned                        :2;
        unsigned TXIF                   :1;
        unsigned RCIF                   :1;
    };
    struct {
        unsigned                        :1;
        unsigned RXBNIF                 :1;
        unsigned                        :2;
        unsigned TXBNIF                 :1;
    };
} PIR3bits_t;
extern volatile PIR3bits_t PIR3bits __at(0xECD);
// bitfield macros
#define _PIR3_SSP1IF_POSN                                   0x0
#define _PIR3_SSP1IF_POSITION                               0x0
#define _PIR3_SSP1IF_SIZE                                   0x1
#define _PIR3_SSP1IF_LENGTH                                 0x1
#define _PIR3_SSP1IF_MASK                                   0x1
#define _PIR3_BCL1IF_POSN                                   0x1
#define _PIR3_BCL1IF_POSITION                               0x1
#define _PIR3_BCL1IF_SIZE                                   0x1
#define _PIR3_BCL1IF_LENGTH                                 0x1
#define _PIR3_BCL1IF_MASK                                   0x2
#define _PIR3_TX1IF_POSN                                    0x4
#define _PIR3_TX1IF_POSITION                                0x4
#define _PIR3_TX1IF_SIZE                                    0x1
#define _PIR3_TX1IF_LENGTH                                  0x1
#define _PIR3_TX1IF_MASK                                    0x10
#define _PIR3_RC1IF_POSN                                    0x5
#define _PIR3_RC1IF_POSITION                                0x5
#define _PIR3_RC1IF_SIZE                                    0x1
#define _PIR3_RC1IF_LENGTH                                  0x1
#define _PIR3_RC1IF_MASK                                    0x20
#define _PIR3_SSPIF_POSN                                    0x0
#define _PIR3_SSPIF_POSITION                                0x0
#define _PIR3_SSPIF_SIZE                                    0x1
#define _PIR3_SSPIF_LENGTH                                  0x1
#define _PIR3_SSPIF_MASK                                    0x1
#define _PIR3_BCLIF_POSN                                    0x1
#define _PIR3_BCLIF_POSITION                                0x1
#define _PIR3_BCLIF_SIZE                                    0x1
#define _PIR3_BCLIF_LENGTH                                  0x1
#define _PIR3_BCLIF_MASK                                    0x2
#define _PIR3_TXIF_POSN                                     0x4
#define _PIR3_TXIF_POSITION                                 0x4
#define _PIR3_TXIF_SIZE                                     0x1
#define _PIR3_TXIF_LENGTH                                   0x1
#define _PIR3_TXIF_MASK                                     0x10
#define _PIR3_RCIF_POSN                                     0x5
#define _PIR3_RCIF_POSITION                                 0x5
#define _PIR3_RCIF_SIZE                                     0x1
#define _PIR3_RCIF_LENGTH                                   0x1
#define _PIR3_RCIF_MASK                                     0x20
#define _PIR3_RXBNIF_POSN                                   0x1
#define _PIR3_RXBNIF_POSITION                               0x1
#define _PIR3_RXBNIF_SIZE                                   0x1
#define _PIR3_RXBNIF_LENGTH                                 0x1
#define _PIR3_RXBNIF_MASK                                   0x2
#define _PIR3_TXBNIF_POSN                                   0x4
#define _PIR3_TXBNIF_POSITION                               0x4
#define _PIR3_TXBNIF_SIZE                                   0x1
#define _PIR3_TXBNIF_LENGTH                                 0x1
#define _PIR3_TXBNIF_MASK                                   0x10

// Register: PIR4
#define PIR4 PIR4
extern volatile unsigned char           PIR4                __at(0xECE);
#ifndef _LIB_BUILD
asm("PIR4 equ 0ECEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR1IF                 :1;
        unsigned TMR2IF                 :1;
        unsigned TMR3IF                 :1;
        unsigned TMR4IF                 :1;
        unsigned TMR5IF                 :1;
        unsigned TMR6IF                 :1;
    };
} PIR4bits_t;
extern volatile PIR4bits_t PIR4bits __at(0xECE);
// bitfield macros
#define _PIR4_TMR1IF_POSN                                   0x0
#define _PIR4_TMR1IF_POSITION                               0x0
#define _PIR4_TMR1IF_SIZE                                   0x1
#define _PIR4_TMR1IF_LENGTH                                 0x1
#define _PIR4_TMR1IF_MASK                                   0x1
#define _PIR4_TMR2IF_POSN                                   0x1
#define _PIR4_TMR2IF_POSITION                               0x1
#define _PIR4_TMR2IF_SIZE                                   0x1
#define _PIR4_TMR2IF_LENGTH                                 0x1
#define _PIR4_TMR2IF_MASK                                   0x2
#define _PIR4_TMR3IF_POSN                                   0x2
#define _PIR4_TMR3IF_POSITION                               0x2
#define _PIR4_TMR3IF_SIZE                                   0x1
#define _PIR4_TMR3IF_LENGTH                                 0x1
#define _PIR4_TMR3IF_MASK                                   0x4
#define _PIR4_TMR4IF_POSN                                   0x3
#define _PIR4_TMR4IF_POSITION                               0x3
#define _PIR4_TMR4IF_SIZE                                   0x1
#define _PIR4_TMR4IF_LENGTH                                 0x1
#define _PIR4_TMR4IF_MASK                                   0x8
#define _PIR4_TMR5IF_POSN                                   0x4
#define _PIR4_TMR5IF_POSITION                               0x4
#define _PIR4_TMR5IF_SIZE                                   0x1
#define _PIR4_TMR5IF_LENGTH                                 0x1
#define _PIR4_TMR5IF_MASK                                   0x10
#define _PIR4_TMR6IF_POSN                                   0x5
#define _PIR4_TMR6IF_POSITION                               0x5
#define _PIR4_TMR6IF_SIZE                                   0x1
#define _PIR4_TMR6IF_LENGTH                                 0x1
#define _PIR4_TMR6IF_MASK                                   0x20

// Register: PIR5
#define PIR5 PIR5
extern volatile unsigned char           PIR5                __at(0xECF);
#ifndef _LIB_BUILD
asm("PIR5 equ 0ECFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR1GIF                :1;
        unsigned TMR3GIF                :1;
        unsigned TMR5GIF                :1;
    };
} PIR5bits_t;
extern volatile PIR5bits_t PIR5bits __at(0xECF);
// bitfield macros
#define _PIR5_TMR1GIF_POSN                                  0x0
#define _PIR5_TMR1GIF_POSITION                              0x0
#define _PIR5_TMR1GIF_SIZE                                  0x1
#define _PIR5_TMR1GIF_LENGTH                                0x1
#define _PIR5_TMR1GIF_MASK                                  0x1
#define _PIR5_TMR3GIF_POSN                                  0x1
#define _PIR5_TMR3GIF_POSITION                              0x1
#define _PIR5_TMR3GIF_SIZE                                  0x1
#define _PIR5_TMR3GIF_LENGTH                                0x1
#define _PIR5_TMR3GIF_MASK                                  0x2
#define _PIR5_TMR5GIF_POSN                                  0x2
#define _PIR5_TMR5GIF_POSITION                              0x2
#define _PIR5_TMR5GIF_SIZE                                  0x1
#define _PIR5_TMR5GIF_LENGTH                                0x1
#define _PIR5_TMR5GIF_MASK                                  0x4

// Register: PIR6
#define PIR6 PIR6
extern volatile unsigned char           PIR6                __at(0xED0);
#ifndef _LIB_BUILD
asm("PIR6 equ 0ED0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP1IF                 :1;
        unsigned CCP2IF                 :1;
    };
} PIR6bits_t;
extern volatile PIR6bits_t PIR6bits __at(0xED0);
// bitfield macros
#define _PIR6_CCP1IF_POSN                                   0x0
#define _PIR6_CCP1IF_POSITION                               0x0
#define _PIR6_CCP1IF_SIZE                                   0x1
#define _PIR6_CCP1IF_LENGTH                                 0x1
#define _PIR6_CCP1IF_MASK                                   0x1
#define _PIR6_CCP2IF_POSN                                   0x1
#define _PIR6_CCP2IF_POSITION                               0x1
#define _PIR6_CCP2IF_SIZE                                   0x1
#define _PIR6_CCP2IF_LENGTH                                 0x1
#define _PIR6_CCP2IF_MASK                                   0x2

// Register: PIR7
#define PIR7 PIR7
extern volatile unsigned char           PIR7                __at(0xED1);
#ifndef _LIB_BUILD
asm("PIR7 equ 0ED1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CWGIF                  :1;
        unsigned                        :4;
        unsigned NVMIF                  :1;
        unsigned CRCIF                  :1;
        unsigned SCANIF                 :1;
    };
    struct {
        unsigned CWG1IF                 :1;
    };
} PIR7bits_t;
extern volatile PIR7bits_t PIR7bits __at(0xED1);
// bitfield macros
#define _PIR7_CWGIF_POSN                                    0x0
#define _PIR7_CWGIF_POSITION                                0x0
#define _PIR7_CWGIF_SIZE                                    0x1
#define _PIR7_CWGIF_LENGTH                                  0x1
#define _PIR7_CWGIF_MASK                                    0x1
#define _PIR7_NVMIF_POSN                                    0x5
#define _PIR7_NVMIF_POSITION                                0x5
#define _PIR7_NVMIF_SIZE                                    0x1
#define _PIR7_NVMIF_LENGTH                                  0x1
#define _PIR7_NVMIF_MASK                                    0x20
#define _PIR7_CRCIF_POSN                                    0x6
#define _PIR7_CRCIF_POSITION                                0x6
#define _PIR7_CRCIF_SIZE                                    0x1
#define _PIR7_CRCIF_LENGTH                                  0x1
#define _PIR7_CRCIF_MASK                                    0x40
#define _PIR7_SCANIF_POSN                                   0x7
#define _PIR7_SCANIF_POSITION                               0x7
#define _PIR7_SCANIF_SIZE                                   0x1
#define _PIR7_SCANIF_LENGTH                                 0x1
#define _PIR7_SCANIF_MASK                                   0x80
#define _PIR7_CWG1IF_POSN                                   0x0
#define _PIR7_CWG1IF_POSITION                               0x0
#define _PIR7_CWG1IF_SIZE                                   0x1
#define _PIR7_CWG1IF_LENGTH                                 0x1
#define _PIR7_CWG1IF_MASK                                   0x1

// Register: WDTCON0
#define WDTCON0 WDTCON0
extern volatile unsigned char           WDTCON0             __at(0xED2);
#ifndef _LIB_BUILD
asm("WDTCON0 equ 0ED2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SEN                    :1;
        unsigned WDTPS                  :5;
    };
    struct {
        unsigned SWDTEN                 :1;
    };
    struct {
        unsigned WDTSEN                 :1;
    };
    struct {
        unsigned                        :1;
        unsigned WDTPS0                 :1;
        unsigned WDTPS1                 :1;
        unsigned WDTPS2                 :1;
        unsigned WDTPS3                 :1;
        unsigned WDTPS4                 :1;
    };
} WDTCON0bits_t;
extern volatile WDTCON0bits_t WDTCON0bits __at(0xED2);
// bitfield macros
#define _WDTCON0_SEN_POSN                                   0x0
#define _WDTCON0_SEN_POSITION                               0x0
#define _WDTCON0_SEN_SIZE                                   0x1
#define _WDTCON0_SEN_LENGTH                                 0x1
#define _WDTCON0_SEN_MASK                                   0x1
#define _WDTCON0_WDTPS_POSN                                 0x1
#define _WDTCON0_WDTPS_POSITION                             0x1
#define _WDTCON0_WDTPS_SIZE                                 0x5
#define _WDTCON0_WDTPS_LENGTH                               0x5
#define _WDTCON0_WDTPS_MASK                                 0x3E
#define _WDTCON0_SWDTEN_POSN                                0x0
#define _WDTCON0_SWDTEN_POSITION                            0x0
#define _WDTCON0_SWDTEN_SIZE                                0x1
#define _WDTCON0_SWDTEN_LENGTH                              0x1
#define _WDTCON0_SWDTEN_MASK                                0x1
#define _WDTCON0_WDTSEN_POSN                                0x0
#define _WDTCON0_WDTSEN_POSITION                            0x0
#define _WDTCON0_WDTSEN_SIZE                                0x1
#define _WDTCON0_WDTSEN_LENGTH                              0x1
#define _WDTCON0_WDTSEN_MASK                                0x1
#define _WDTCON0_WDTPS0_POSN                                0x1
#define _WDTCON0_WDTPS0_POSITION                            0x1
#define _WDTCON0_WDTPS0_SIZE                                0x1
#define _WDTCON0_WDTPS0_LENGTH                              0x1
#define _WDTCON0_WDTPS0_MASK                                0x2
#define _WDTCON0_WDTPS1_POSN                                0x2
#define _WDTCON0_WDTPS1_POSITION                            0x2
#define _WDTCON0_WDTPS1_SIZE                                0x1
#define _WDTCON0_WDTPS1_LENGTH                              0x1
#define _WDTCON0_WDTPS1_MASK                                0x4
#define _WDTCON0_WDTPS2_POSN                                0x3
#define _WDTCON0_WDTPS2_POSITION                            0x3
#define _WDTCON0_WDTPS2_SIZE                                0x1
#define _WDTCON0_WDTPS2_LENGTH                              0x1
#define _WDTCON0_WDTPS2_MASK                                0x8
#define _WDTCON0_WDTPS3_POSN                                0x4
#define _WDTCON0_WDTPS3_POSITION                            0x4
#define _WDTCON0_WDTPS3_SIZE                                0x1
#define _WDTCON0_WDTPS3_LENGTH                              0x1
#define _WDTCON0_WDTPS3_MASK                                0x10
#define _WDTCON0_WDTPS4_POSN                                0x5
#define _WDTCON0_WDTPS4_POSITION                            0x5
#define _WDTCON0_WDTPS4_SIZE                                0x1
#define _WDTCON0_WDTPS4_LENGTH                              0x1
#define _WDTCON0_WDTPS4_MASK                                0x20

// Register: WDTCON1
#define WDTCON1 WDTCON1
extern volatile unsigned char           WDTCON1             __at(0xED3);
#ifndef _LIB_BUILD
asm("WDTCON1 equ 0ED3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WINDOW                 :3;
        unsigned                        :1;
        unsigned WDTCS                  :3;
    };
    struct {
        unsigned WINDOW0                :1;
        unsigned WINDOW1                :1;
        unsigned WINDOW2                :1;
    };
    struct {
        unsigned WDTWINDOW              :3;
    };
    struct {
        unsigned WDTWINDOW0             :1;
        unsigned WDTWINDOW1             :1;
        unsigned WDTWINDOW2             :1;
        unsigned                        :1;
        unsigned WDTCS0                 :1;
        unsigned WDTCS1                 :1;
        unsigned WDTCS2                 :1;
    };
} WDTCON1bits_t;
extern volatile WDTCON1bits_t WDTCON1bits __at(0xED3);
// bitfield macros
#define _WDTCON1_WINDOW_POSN                                0x0
#define _WDTCON1_WINDOW_POSITION                            0x0
#define _WDTCON1_WINDOW_SIZE                                0x3
#define _WDTCON1_WINDOW_LENGTH                              0x3
#define _WDTCON1_WINDOW_MASK                                0x7
#define _WDTCON1_WDTCS_POSN                                 0x4
#define _WDTCON1_WDTCS_POSITION                             0x4
#define _WDTCON1_WDTCS_SIZE                                 0x3
#define _WDTCON1_WDTCS_LENGTH                               0x3
#define _WDTCON1_WDTCS_MASK                                 0x70
#define _WDTCON1_WINDOW0_POSN                               0x0
#define _WDTCON1_WINDOW0_POSITION                           0x0
#define _WDTCON1_WINDOW0_SIZE                               0x1
#define _WDTCON1_WINDOW0_LENGTH                             0x1
#define _WDTCON1_WINDOW0_MASK                               0x1
#define _WDTCON1_WINDOW1_POSN                               0x1
#define _WDTCON1_WINDOW1_POSITION                           0x1
#define _WDTCON1_WINDOW1_SIZE                               0x1
#define _WDTCON1_WINDOW1_LENGTH                             0x1
#define _WDTCON1_WINDOW1_MASK                               0x2
#define _WDTCON1_WINDOW2_POSN                               0x2
#define _WDTCON1_WINDOW2_POSITION                           0x2
#define _WDTCON1_WINDOW2_SIZE                               0x1
#define _WDTCON1_WINDOW2_LENGTH                             0x1
#define _WDTCON1_WINDOW2_MASK                               0x4
#define _WDTCON1_WDTWINDOW_POSN                             0x0
#define _WDTCON1_WDTWINDOW_POSITION                         0x0
#define _WDTCON1_WDTWINDOW_SIZE                             0x3
#define _WDTCON1_WDTWINDOW_LENGTH                           0x3
#define _WDTCON1_WDTWINDOW_MASK                             0x7
#define _WDTCON1_WDTWINDOW0_POSN                            0x0
#define _WDTCON1_WDTWINDOW0_POSITION                        0x0
#define _WDTCON1_WDTWINDOW0_SIZE                            0x1
#define _WDTCON1_WDTWINDOW0_LENGTH                          0x1
#define _WDTCON1_WDTWINDOW0_MASK                            0x1
#define _WDTCON1_WDTWINDOW1_POSN                            0x1
#define _WDTCON1_WDTWINDOW1_POSITION                        0x1
#define _WDTCON1_WDTWINDOW1_SIZE                            0x1
#define _WDTCON1_WDTWINDOW1_LENGTH                          0x1
#define _WDTCON1_WDTWINDOW1_MASK                            0x2
#define _WDTCON1_WDTWINDOW2_POSN                            0x2
#define _WDTCON1_WDTWINDOW2_POSITION                        0x2
#define _WDTCON1_WDTWINDOW2_SIZE                            0x1
#define _WDTCON1_WDTWINDOW2_LENGTH                          0x1
#define _WDTCON1_WDTWINDOW2_MASK                            0x4
#define _WDTCON1_WDTCS0_POSN                                0x4
#define _WDTCON1_WDTCS0_POSITION                            0x4
#define _WDTCON1_WDTCS0_SIZE                                0x1
#define _WDTCON1_WDTCS0_LENGTH                              0x1
#define _WDTCON1_WDTCS0_MASK                                0x10
#define _WDTCON1_WDTCS1_POSN                                0x5
#define _WDTCON1_WDTCS1_POSITION                            0x5
#define _WDTCON1_WDTCS1_SIZE                                0x1
#define _WDTCON1_WDTCS1_LENGTH                              0x1
#define _WDTCON1_WDTCS1_MASK                                0x20
#define _WDTCON1_WDTCS2_POSN                                0x6
#define _WDTCON1_WDTCS2_POSITION                            0x6
#define _WDTCON1_WDTCS2_SIZE                                0x1
#define _WDTCON1_WDTCS2_LENGTH                              0x1
#define _WDTCON1_WDTCS2_MASK                                0x40

// Register: WDTPSL
#define WDTPSL WDTPSL
extern volatile unsigned char           WDTPSL              __at(0xED4);
#ifndef _LIB_BUILD
asm("WDTPSL equ 0ED4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PSCNT                  :8;
    };
    struct {
        unsigned PSCNT0                 :1;
        unsigned PSCNT1                 :1;
        unsigned PSCNT2                 :1;
        unsigned PSCNT3                 :1;
        unsigned PSCNT4                 :1;
        unsigned PSCNT5                 :1;
        unsigned PSCNT6                 :1;
        unsigned PSCNT7                 :1;
    };
    struct {
        unsigned WDTPSCNT               :8;
    };
    struct {
        unsigned WDTPSCNT0              :1;
        unsigned WDTPSCNT1              :1;
        unsigned WDTPSCNT2              :1;
        unsigned WDTPSCNT3              :1;
        unsigned WDTPSCNT4              :1;
        unsigned WDTPSCNT5              :1;
        unsigned WDTPSCNT6              :1;
        unsigned WDTPSCNT7              :1;
    };
} WDTPSLbits_t;
extern volatile WDTPSLbits_t WDTPSLbits __at(0xED4);
// bitfield macros
#define _WDTPSL_PSCNT_POSN                                  0x0
#define _WDTPSL_PSCNT_POSITION                              0x0
#define _WDTPSL_PSCNT_SIZE                                  0x8
#define _WDTPSL_PSCNT_LENGTH                                0x8
#define _WDTPSL_PSCNT_MASK                                  0xFF
#define _WDTPSL_PSCNT0_POSN                                 0x0
#define _WDTPSL_PSCNT0_POSITION                             0x0
#define _WDTPSL_PSCNT0_SIZE                                 0x1
#define _WDTPSL_PSCNT0_LENGTH                               0x1
#define _WDTPSL_PSCNT0_MASK                                 0x1
#define _WDTPSL_PSCNT1_POSN                                 0x1
#define _WDTPSL_PSCNT1_POSITION                             0x1
#define _WDTPSL_PSCNT1_SIZE                                 0x1
#define _WDTPSL_PSCNT1_LENGTH                               0x1
#define _WDTPSL_PSCNT1_MASK                                 0x2
#define _WDTPSL_PSCNT2_POSN                                 0x2
#define _WDTPSL_PSCNT2_POSITION                             0x2
#define _WDTPSL_PSCNT2_SIZE                                 0x1
#define _WDTPSL_PSCNT2_LENGTH                               0x1
#define _WDTPSL_PSCNT2_MASK                                 0x4
#define _WDTPSL_PSCNT3_POSN                                 0x3
#define _WDTPSL_PSCNT3_POSITION                             0x3
#define _WDTPSL_PSCNT3_SIZE                                 0x1
#define _WDTPSL_PSCNT3_LENGTH                               0x1
#define _WDTPSL_PSCNT3_MASK                                 0x8
#define _WDTPSL_PSCNT4_POSN                                 0x4
#define _WDTPSL_PSCNT4_POSITION                             0x4
#define _WDTPSL_PSCNT4_SIZE                                 0x1
#define _WDTPSL_PSCNT4_LENGTH                               0x1
#define _WDTPSL_PSCNT4_MASK                                 0x10
#define _WDTPSL_PSCNT5_POSN                                 0x5
#define _WDTPSL_PSCNT5_POSITION                             0x5
#define _WDTPSL_PSCNT5_SIZE                                 0x1
#define _WDTPSL_PSCNT5_LENGTH                               0x1
#define _WDTPSL_PSCNT5_MASK                                 0x20
#define _WDTPSL_PSCNT6_POSN                                 0x6
#define _WDTPSL_PSCNT6_POSITION                             0x6
#define _WDTPSL_PSCNT6_SIZE                                 0x1
#define _WDTPSL_PSCNT6_LENGTH                               0x1
#define _WDTPSL_PSCNT6_MASK                                 0x40
#define _WDTPSL_PSCNT7_POSN                                 0x7
#define _WDTPSL_PSCNT7_POSITION                             0x7
#define _WDTPSL_PSCNT7_SIZE                                 0x1
#define _WDTPSL_PSCNT7_LENGTH                               0x1
#define _WDTPSL_PSCNT7_MASK                                 0x80
#define _WDTPSL_WDTPSCNT_POSN                               0x0
#define _WDTPSL_WDTPSCNT_POSITION                           0x0
#define _WDTPSL_WDTPSCNT_SIZE                               0x8
#define _WDTPSL_WDTPSCNT_LENGTH                             0x8
#define _WDTPSL_WDTPSCNT_MASK                               0xFF
#define _WDTPSL_WDTPSCNT0_POSN                              0x0
#define _WDTPSL_WDTPSCNT0_POSITION                          0x0
#define _WDTPSL_WDTPSCNT0_SIZE                              0x1
#define _WDTPSL_WDTPSCNT0_LENGTH                            0x1
#define _WDTPSL_WDTPSCNT0_MASK                              0x1
#define _WDTPSL_WDTPSCNT1_POSN                              0x1
#define _WDTPSL_WDTPSCNT1_POSITION                          0x1
#define _WDTPSL_WDTPSCNT1_SIZE                              0x1
#define _WDTPSL_WDTPSCNT1_LENGTH                            0x1
#define _WDTPSL_WDTPSCNT1_MASK                              0x2
#define _WDTPSL_WDTPSCNT2_POSN                              0x2
#define _WDTPSL_WDTPSCNT2_POSITION                          0x2
#define _WDTPSL_WDTPSCNT2_SIZE                              0x1
#define _WDTPSL_WDTPSCNT2_LENGTH                            0x1
#define _WDTPSL_WDTPSCNT2_MASK                              0x4
#define _WDTPSL_WDTPSCNT3_POSN                              0x3
#define _WDTPSL_WDTPSCNT3_POSITION                          0x3
#define _WDTPSL_WDTPSCNT3_SIZE                              0x1
#define _WDTPSL_WDTPSCNT3_LENGTH                            0x1
#define _WDTPSL_WDTPSCNT3_MASK                              0x8
#define _WDTPSL_WDTPSCNT4_POSN                              0x4
#define _WDTPSL_WDTPSCNT4_POSITION                          0x4
#define _WDTPSL_WDTPSCNT4_SIZE                              0x1
#define _WDTPSL_WDTPSCNT4_LENGTH                            0x1
#define _WDTPSL_WDTPSCNT4_MASK                              0x10
#define _WDTPSL_WDTPSCNT5_POSN                              0x5
#define _WDTPSL_WDTPSCNT5_POSITION                          0x5
#define _WDTPSL_WDTPSCNT5_SIZE                              0x1
#define _WDTPSL_WDTPSCNT5_LENGTH                            0x1
#define _WDTPSL_WDTPSCNT5_MASK                              0x20
#define _WDTPSL_WDTPSCNT6_POSN                              0x6
#define _WDTPSL_WDTPSCNT6_POSITION                          0x6
#define _WDTPSL_WDTPSCNT6_SIZE                              0x1
#define _WDTPSL_WDTPSCNT6_LENGTH                            0x1
#define _WDTPSL_WDTPSCNT6_MASK                              0x40
#define _WDTPSL_WDTPSCNT7_POSN                              0x7
#define _WDTPSL_WDTPSCNT7_POSITION                          0x7
#define _WDTPSL_WDTPSCNT7_SIZE                              0x1
#define _WDTPSL_WDTPSCNT7_LENGTH                            0x1
#define _WDTPSL_WDTPSCNT7_MASK                              0x80

// Register: WDTPSH
#define WDTPSH WDTPSH
extern volatile unsigned char           WDTPSH              __at(0xED5);
#ifndef _LIB_BUILD
asm("WDTPSH equ 0ED5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PSCNT                  :8;
    };
    struct {
        unsigned PSCNT8                 :1;
        unsigned PSCNT9                 :1;
        unsigned PSCNT10                :1;
        unsigned PSCNT11                :1;
        unsigned PSCNT12                :1;
        unsigned PSCNT13                :1;
        unsigned PSCNT14                :1;
        unsigned PSCNT15                :1;
    };
    struct {
        unsigned WDTPSCNT               :8;
    };
    struct {
        unsigned WDTPSCNT8              :1;
        unsigned WDTPSCNT9              :1;
        unsigned WDTPSCNT10             :1;
        unsigned WDTPSCNT11             :1;
        unsigned WDTPSCNT12             :1;
        unsigned WDTPSCNT13             :1;
        unsigned WDTPSCNT14             :1;
        unsigned WDTPSCNT15             :1;
    };
} WDTPSHbits_t;
extern volatile WDTPSHbits_t WDTPSHbits __at(0xED5);
// bitfield macros
#define _WDTPSH_PSCNT_POSN                                  0x0
#define _WDTPSH_PSCNT_POSITION                              0x0
#define _WDTPSH_PSCNT_SIZE                                  0x8
#define _WDTPSH_PSCNT_LENGTH                                0x8
#define _WDTPSH_PSCNT_MASK                                  0xFF
#define _WDTPSH_PSCNT8_POSN                                 0x0
#define _WDTPSH_PSCNT8_POSITION                             0x0
#define _WDTPSH_PSCNT8_SIZE                                 0x1
#define _WDTPSH_PSCNT8_LENGTH                               0x1
#define _WDTPSH_PSCNT8_MASK                                 0x1
#define _WDTPSH_PSCNT9_POSN                                 0x1
#define _WDTPSH_PSCNT9_POSITION                             0x1
#define _WDTPSH_PSCNT9_SIZE                                 0x1
#define _WDTPSH_PSCNT9_LENGTH                               0x1
#define _WDTPSH_PSCNT9_MASK                                 0x2
#define _WDTPSH_PSCNT10_POSN                                0x2
#define _WDTPSH_PSCNT10_POSITION                            0x2
#define _WDTPSH_PSCNT10_SIZE                                0x1
#define _WDTPSH_PSCNT10_LENGTH                              0x1
#define _WDTPSH_PSCNT10_MASK                                0x4
#define _WDTPSH_PSCNT11_POSN                                0x3
#define _WDTPSH_PSCNT11_POSITION                            0x3
#define _WDTPSH_PSCNT11_SIZE                                0x1
#define _WDTPSH_PSCNT11_LENGTH                              0x1
#define _WDTPSH_PSCNT11_MASK                                0x8
#define _WDTPSH_PSCNT12_POSN                                0x4
#define _WDTPSH_PSCNT12_POSITION                            0x4
#define _WDTPSH_PSCNT12_SIZE                                0x1
#define _WDTPSH_PSCNT12_LENGTH                              0x1
#define _WDTPSH_PSCNT12_MASK                                0x10
#define _WDTPSH_PSCNT13_POSN                                0x5
#define _WDTPSH_PSCNT13_POSITION                            0x5
#define _WDTPSH_PSCNT13_SIZE                                0x1
#define _WDTPSH_PSCNT13_LENGTH                              0x1
#define _WDTPSH_PSCNT13_MASK                                0x20
#define _WDTPSH_PSCNT14_POSN                                0x6
#define _WDTPSH_PSCNT14_POSITION                            0x6
#define _WDTPSH_PSCNT14_SIZE                                0x1
#define _WDTPSH_PSCNT14_LENGTH                              0x1
#define _WDTPSH_PSCNT14_MASK                                0x40
#define _WDTPSH_PSCNT15_POSN                                0x7
#define _WDTPSH_PSCNT15_POSITION                            0x7
#define _WDTPSH_PSCNT15_SIZE                                0x1
#define _WDTPSH_PSCNT15_LENGTH                              0x1
#define _WDTPSH_PSCNT15_MASK                                0x80
#define _WDTPSH_WDTPSCNT_POSN                               0x0
#define _WDTPSH_WDTPSCNT_POSITION                           0x0
#define _WDTPSH_WDTPSCNT_SIZE                               0x8
#define _WDTPSH_WDTPSCNT_LENGTH                             0x8
#define _WDTPSH_WDTPSCNT_MASK                               0xFF
#define _WDTPSH_WDTPSCNT8_POSN                              0x0
#define _WDTPSH_WDTPSCNT8_POSITION                          0x0
#define _WDTPSH_WDTPSCNT8_SIZE                              0x1
#define _WDTPSH_WDTPSCNT8_LENGTH                            0x1
#define _WDTPSH_WDTPSCNT8_MASK                              0x1
#define _WDTPSH_WDTPSCNT9_POSN                              0x1
#define _WDTPSH_WDTPSCNT9_POSITION                          0x1
#define _WDTPSH_WDTPSCNT9_SIZE                              0x1
#define _WDTPSH_WDTPSCNT9_LENGTH                            0x1
#define _WDTPSH_WDTPSCNT9_MASK                              0x2
#define _WDTPSH_WDTPSCNT10_POSN                             0x2
#define _WDTPSH_WDTPSCNT10_POSITION                         0x2
#define _WDTPSH_WDTPSCNT10_SIZE                             0x1
#define _WDTPSH_WDTPSCNT10_LENGTH                           0x1
#define _WDTPSH_WDTPSCNT10_MASK                             0x4
#define _WDTPSH_WDTPSCNT11_POSN                             0x3
#define _WDTPSH_WDTPSCNT11_POSITION                         0x3
#define _WDTPSH_WDTPSCNT11_SIZE                             0x1
#define _WDTPSH_WDTPSCNT11_LENGTH                           0x1
#define _WDTPSH_WDTPSCNT11_MASK                             0x8
#define _WDTPSH_WDTPSCNT12_POSN                             0x4
#define _WDTPSH_WDTPSCNT12_POSITION                         0x4
#define _WDTPSH_WDTPSCNT12_SIZE                             0x1
#define _WDTPSH_WDTPSCNT12_LENGTH                           0x1
#define _WDTPSH_WDTPSCNT12_MASK                             0x10
#define _WDTPSH_WDTPSCNT13_POSN                             0x5
#define _WDTPSH_WDTPSCNT13_POSITION                         0x5
#define _WDTPSH_WDTPSCNT13_SIZE                             0x1
#define _WDTPSH_WDTPSCNT13_LENGTH                           0x1
#define _WDTPSH_WDTPSCNT13_MASK                             0x20
#define _WDTPSH_WDTPSCNT14_POSN                             0x6
#define _WDTPSH_WDTPSCNT14_POSITION                         0x6
#define _WDTPSH_WDTPSCNT14_SIZE                             0x1
#define _WDTPSH_WDTPSCNT14_LENGTH                           0x1
#define _WDTPSH_WDTPSCNT14_MASK                             0x40
#define _WDTPSH_WDTPSCNT15_POSN                             0x7
#define _WDTPSH_WDTPSCNT15_POSITION                         0x7
#define _WDTPSH_WDTPSCNT15_SIZE                             0x1
#define _WDTPSH_WDTPSCNT15_LENGTH                           0x1
#define _WDTPSH_WDTPSCNT15_MASK                             0x80

// Register: WDTTMR
#define WDTTMR WDTTMR
extern volatile unsigned char           WDTTMR              __at(0xED6);
#ifndef _LIB_BUILD
asm("WDTTMR equ 0ED6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PSCNT16                :1;
        unsigned PSCNT17                :1;
        unsigned STATE                  :1;
        unsigned WDTTMR                 :5;
    };
    struct {
        unsigned WDTPSCNT16             :1;
        unsigned WDTPSCNT17             :1;
        unsigned WDTSTATE               :1;
        unsigned WDTTMR0                :1;
        unsigned WDTTMR1                :1;
        unsigned WDTTMR2                :1;
        unsigned WDTTMR3                :1;
        unsigned WDTTMR4                :1;
    };
} WDTTMRbits_t;
extern volatile WDTTMRbits_t WDTTMRbits __at(0xED6);
// bitfield macros
#define _WDTTMR_PSCNT16_POSN                                0x0
#define _WDTTMR_PSCNT16_POSITION                            0x0
#define _WDTTMR_PSCNT16_SIZE                                0x1
#define _WDTTMR_PSCNT16_LENGTH                              0x1
#define _WDTTMR_PSCNT16_MASK                                0x1
#define _WDTTMR_PSCNT17_POSN                                0x1
#define _WDTTMR_PSCNT17_POSITION                            0x1
#define _WDTTMR_PSCNT17_SIZE                                0x1
#define _WDTTMR_PSCNT17_LENGTH                              0x1
#define _WDTTMR_PSCNT17_MASK                                0x2
#define _WDTTMR_STATE_POSN                                  0x2
#define _WDTTMR_STATE_POSITION                              0x2
#define _WDTTMR_STATE_SIZE                                  0x1
#define _WDTTMR_STATE_LENGTH                                0x1
#define _WDTTMR_STATE_MASK                                  0x4
#define _WDTTMR_WDTTMR_POSN                                 0x3
#define _WDTTMR_WDTTMR_POSITION                             0x3
#define _WDTTMR_WDTTMR_SIZE                                 0x5
#define _WDTTMR_WDTTMR_LENGTH                               0x5
#define _WDTTMR_WDTTMR_MASK                                 0xF8
#define _WDTTMR_WDTPSCNT16_POSN                             0x0
#define _WDTTMR_WDTPSCNT16_POSITION                         0x0
#define _WDTTMR_WDTPSCNT16_SIZE                             0x1
#define _WDTTMR_WDTPSCNT16_LENGTH                           0x1
#define _WDTTMR_WDTPSCNT16_MASK                             0x1
#define _WDTTMR_WDTPSCNT17_POSN                             0x1
#define _WDTTMR_WDTPSCNT17_POSITION                         0x1
#define _WDTTMR_WDTPSCNT17_SIZE                             0x1
#define _WDTTMR_WDTPSCNT17_LENGTH                           0x1
#define _WDTTMR_WDTPSCNT17_MASK                             0x2
#define _WDTTMR_WDTSTATE_POSN                               0x2
#define _WDTTMR_WDTSTATE_POSITION                           0x2
#define _WDTTMR_WDTSTATE_SIZE                               0x1
#define _WDTTMR_WDTSTATE_LENGTH                             0x1
#define _WDTTMR_WDTSTATE_MASK                               0x4
#define _WDTTMR_WDTTMR0_POSN                                0x3
#define _WDTTMR_WDTTMR0_POSITION                            0x3
#define _WDTTMR_WDTTMR0_SIZE                                0x1
#define _WDTTMR_WDTTMR0_LENGTH                              0x1
#define _WDTTMR_WDTTMR0_MASK                                0x8
#define _WDTTMR_WDTTMR1_POSN                                0x4
#define _WDTTMR_WDTTMR1_POSITION                            0x4
#define _WDTTMR_WDTTMR1_SIZE                                0x1
#define _WDTTMR_WDTTMR1_LENGTH                              0x1
#define _WDTTMR_WDTTMR1_MASK                                0x10
#define _WDTTMR_WDTTMR2_POSN                                0x5
#define _WDTTMR_WDTTMR2_POSITION                            0x5
#define _WDTTMR_WDTTMR2_SIZE                                0x1
#define _WDTTMR_WDTTMR2_LENGTH                              0x1
#define _WDTTMR_WDTTMR2_MASK                                0x20
#define _WDTTMR_WDTTMR3_POSN                                0x6
#define _WDTTMR_WDTTMR3_POSITION                            0x6
#define _WDTTMR_WDTTMR3_SIZE                                0x1
#define _WDTTMR_WDTTMR3_LENGTH                              0x1
#define _WDTTMR_WDTTMR3_MASK                                0x40
#define _WDTTMR_WDTTMR4_POSN                                0x7
#define _WDTTMR_WDTTMR4_POSITION                            0x7
#define _WDTTMR_WDTTMR4_SIZE                                0x1
#define _WDTTMR_WDTTMR4_LENGTH                              0x1
#define _WDTTMR_WDTTMR4_MASK                                0x80

// Register: CPUDOZE
#define CPUDOZE CPUDOZE
extern volatile unsigned char           CPUDOZE             __at(0xED7);
#ifndef _LIB_BUILD
asm("CPUDOZE equ 0ED7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DOZE                   :3;
        unsigned                        :1;
        unsigned DOE                    :1;
        unsigned ROI                    :1;
        unsigned DOZEN                  :1;
        unsigned IDLEN                  :1;
    };
    struct {
        unsigned DOZE0                  :1;
        unsigned DOZE1                  :1;
        unsigned DOZE2                  :1;
    };
} CPUDOZEbits_t;
extern volatile CPUDOZEbits_t CPUDOZEbits __at(0xED7);
// bitfield macros
#define _CPUDOZE_DOZE_POSN                                  0x0
#define _CPUDOZE_DOZE_POSITION                              0x0
#define _CPUDOZE_DOZE_SIZE                                  0x3
#define _CPUDOZE_DOZE_LENGTH                                0x3
#define _CPUDOZE_DOZE_MASK                                  0x7
#define _CPUDOZE_DOE_POSN                                   0x4
#define _CPUDOZE_DOE_POSITION                               0x4
#define _CPUDOZE_DOE_SIZE                                   0x1
#define _CPUDOZE_DOE_LENGTH                                 0x1
#define _CPUDOZE_DOE_MASK                                   0x10
#define _CPUDOZE_ROI_POSN                                   0x5
#define _CPUDOZE_ROI_POSITION                               0x5
#define _CPUDOZE_ROI_SIZE                                   0x1
#define _CPUDOZE_ROI_LENGTH                                 0x1
#define _CPUDOZE_ROI_MASK                                   0x20
#define _CPUDOZE_DOZEN_POSN                                 0x6
#define _CPUDOZE_DOZEN_POSITION                             0x6
#define _CPUDOZE_DOZEN_SIZE                                 0x1
#define _CPUDOZE_DOZEN_LENGTH                               0x1
#define _CPUDOZE_DOZEN_MASK                                 0x40
#define _CPUDOZE_IDLEN_POSN                                 0x7
#define _CPUDOZE_IDLEN_POSITION                             0x7
#define _CPUDOZE_IDLEN_SIZE                                 0x1
#define _CPUDOZE_IDLEN_LENGTH                               0x1
#define _CPUDOZE_IDLEN_MASK                                 0x80
#define _CPUDOZE_DOZE0_POSN                                 0x0
#define _CPUDOZE_DOZE0_POSITION                             0x0
#define _CPUDOZE_DOZE0_SIZE                                 0x1
#define _CPUDOZE_DOZE0_LENGTH                               0x1
#define _CPUDOZE_DOZE0_MASK                                 0x1
#define _CPUDOZE_DOZE1_POSN                                 0x1
#define _CPUDOZE_DOZE1_POSITION                             0x1
#define _CPUDOZE_DOZE1_SIZE                                 0x1
#define _CPUDOZE_DOZE1_LENGTH                               0x1
#define _CPUDOZE_DOZE1_MASK                                 0x2
#define _CPUDOZE_DOZE2_POSN                                 0x2
#define _CPUDOZE_DOZE2_POSITION                             0x2
#define _CPUDOZE_DOZE2_SIZE                                 0x1
#define _CPUDOZE_DOZE2_LENGTH                               0x1
#define _CPUDOZE_DOZE2_MASK                                 0x4

// Register: OSCCON1
#define OSCCON1 OSCCON1
extern volatile unsigned char           OSCCON1             __at(0xED8);
#ifndef _LIB_BUILD
asm("OSCCON1 equ 0ED8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NDIV                   :4;
        unsigned NOSC                   :3;
    };
    struct {
        unsigned NDIV0                  :1;
        unsigned NDIV1                  :1;
        unsigned NDIV2                  :1;
        unsigned NDIV3                  :1;
        unsigned NOSC0                  :1;
        unsigned NOSC1                  :1;
        unsigned NOSC2                  :1;
    };
} OSCCON1bits_t;
extern volatile OSCCON1bits_t OSCCON1bits __at(0xED8);
// bitfield macros
#define _OSCCON1_NDIV_POSN                                  0x0
#define _OSCCON1_NDIV_POSITION                              0x0
#define _OSCCON1_NDIV_SIZE                                  0x4
#define _OSCCON1_NDIV_LENGTH                                0x4
#define _OSCCON1_NDIV_MASK                                  0xF
#define _OSCCON1_NOSC_POSN                                  0x4
#define _OSCCON1_NOSC_POSITION                              0x4
#define _OSCCON1_NOSC_SIZE                                  0x3
#define _OSCCON1_NOSC_LENGTH                                0x3
#define _OSCCON1_NOSC_MASK                                  0x70
#define _OSCCON1_NDIV0_POSN                                 0x0
#define _OSCCON1_NDIV0_POSITION                             0x0
#define _OSCCON1_NDIV0_SIZE                                 0x1
#define _OSCCON1_NDIV0_LENGTH                               0x1
#define _OSCCON1_NDIV0_MASK                                 0x1
#define _OSCCON1_NDIV1_POSN                                 0x1
#define _OSCCON1_NDIV1_POSITION                             0x1
#define _OSCCON1_NDIV1_SIZE                                 0x1
#define _OSCCON1_NDIV1_LENGTH                               0x1
#define _OSCCON1_NDIV1_MASK                                 0x2
#define _OSCCON1_NDIV2_POSN                                 0x2
#define _OSCCON1_NDIV2_POSITION                             0x2
#define _OSCCON1_NDIV2_SIZE                                 0x1
#define _OSCCON1_NDIV2_LENGTH                               0x1
#define _OSCCON1_NDIV2_MASK                                 0x4
#define _OSCCON1_NDIV3_POSN                                 0x3
#define _OSCCON1_NDIV3_POSITION                             0x3
#define _OSCCON1_NDIV3_SIZE                                 0x1
#define _OSCCON1_NDIV3_LENGTH                               0x1
#define _OSCCON1_NDIV3_MASK                                 0x8
#define _OSCCON1_NOSC0_POSN                                 0x4
#define _OSCCON1_NOSC0_POSITION                             0x4
#define _OSCCON1_NOSC0_SIZE                                 0x1
#define _OSCCON1_NOSC0_LENGTH                               0x1
#define _OSCCON1_NOSC0_MASK                                 0x10
#define _OSCCON1_NOSC1_POSN                                 0x5
#define _OSCCON1_NOSC1_POSITION                             0x5
#define _OSCCON1_NOSC1_SIZE                                 0x1
#define _OSCCON1_NOSC1_LENGTH                               0x1
#define _OSCCON1_NOSC1_MASK                                 0x20
#define _OSCCON1_NOSC2_POSN                                 0x6
#define _OSCCON1_NOSC2_POSITION                             0x6
#define _OSCCON1_NOSC2_SIZE                                 0x1
#define _OSCCON1_NOSC2_LENGTH                               0x1
#define _OSCCON1_NOSC2_MASK                                 0x40

// Register: OSCCON2
#define OSCCON2 OSCCON2
extern volatile unsigned char           OSCCON2             __at(0xED9);
#ifndef _LIB_BUILD
asm("OSCCON2 equ 0ED9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CDIV                   :4;
        unsigned COSC                   :3;
    };
    struct {
        unsigned CDIV0                  :1;
        unsigned CDIV1                  :1;
        unsigned CDIV2                  :1;
        unsigned CDIV3                  :1;
        unsigned COSC0                  :1;
        unsigned COSC1                  :1;
        unsigned COSC2                  :1;
    };
} OSCCON2bits_t;
extern volatile OSCCON2bits_t OSCCON2bits __at(0xED9);
// bitfield macros
#define _OSCCON2_CDIV_POSN                                  0x0
#define _OSCCON2_CDIV_POSITION                              0x0
#define _OSCCON2_CDIV_SIZE                                  0x4
#define _OSCCON2_CDIV_LENGTH                                0x4
#define _OSCCON2_CDIV_MASK                                  0xF
#define _OSCCON2_COSC_POSN                                  0x4
#define _OSCCON2_COSC_POSITION                              0x4
#define _OSCCON2_COSC_SIZE                                  0x3
#define _OSCCON2_COSC_LENGTH                                0x3
#define _OSCCON2_COSC_MASK                                  0x70
#define _OSCCON2_CDIV0_POSN                                 0x0
#define _OSCCON2_CDIV0_POSITION                             0x0
#define _OSCCON2_CDIV0_SIZE                                 0x1
#define _OSCCON2_CDIV0_LENGTH                               0x1
#define _OSCCON2_CDIV0_MASK                                 0x1
#define _OSCCON2_CDIV1_POSN                                 0x1
#define _OSCCON2_CDIV1_POSITION                             0x1
#define _OSCCON2_CDIV1_SIZE                                 0x1
#define _OSCCON2_CDIV1_LENGTH                               0x1
#define _OSCCON2_CDIV1_MASK                                 0x2
#define _OSCCON2_CDIV2_POSN                                 0x2
#define _OSCCON2_CDIV2_POSITION                             0x2
#define _OSCCON2_CDIV2_SIZE                                 0x1
#define _OSCCON2_CDIV2_LENGTH                               0x1
#define _OSCCON2_CDIV2_MASK                                 0x4
#define _OSCCON2_CDIV3_POSN                                 0x3
#define _OSCCON2_CDIV3_POSITION                             0x3
#define _OSCCON2_CDIV3_SIZE                                 0x1
#define _OSCCON2_CDIV3_LENGTH                               0x1
#define _OSCCON2_CDIV3_MASK                                 0x8
#define _OSCCON2_COSC0_POSN                                 0x4
#define _OSCCON2_COSC0_POSITION                             0x4
#define _OSCCON2_COSC0_SIZE                                 0x1
#define _OSCCON2_COSC0_LENGTH                               0x1
#define _OSCCON2_COSC0_MASK                                 0x10
#define _OSCCON2_COSC1_POSN                                 0x5
#define _OSCCON2_COSC1_POSITION                             0x5
#define _OSCCON2_COSC1_SIZE                                 0x1
#define _OSCCON2_COSC1_LENGTH                               0x1
#define _OSCCON2_COSC1_MASK                                 0x20
#define _OSCCON2_COSC2_POSN                                 0x6
#define _OSCCON2_COSC2_POSITION                             0x6
#define _OSCCON2_COSC2_SIZE                                 0x1
#define _OSCCON2_COSC2_LENGTH                               0x1
#define _OSCCON2_COSC2_MASK                                 0x40

// Register: OSCCON3
#define OSCCON3 OSCCON3
extern volatile unsigned char           OSCCON3             __at(0xEDA);
#ifndef _LIB_BUILD
asm("OSCCON3 equ 0EDAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :3;
        unsigned NOSCR                  :1;
        unsigned ORDY                   :1;
        unsigned                        :1;
        unsigned SOSCPWR                :1;
        unsigned CSWHOLD                :1;
    };
} OSCCON3bits_t;
extern volatile OSCCON3bits_t OSCCON3bits __at(0xEDA);
// bitfield macros
#define _OSCCON3_NOSCR_POSN                                 0x3
#define _OSCCON3_NOSCR_POSITION                             0x3
#define _OSCCON3_NOSCR_SIZE                                 0x1
#define _OSCCON3_NOSCR_LENGTH                               0x1
#define _OSCCON3_NOSCR_MASK                                 0x8
#define _OSCCON3_ORDY_POSN                                  0x4
#define _OSCCON3_ORDY_POSITION                              0x4
#define _OSCCON3_ORDY_SIZE                                  0x1
#define _OSCCON3_ORDY_LENGTH                                0x1
#define _OSCCON3_ORDY_MASK                                  0x10
#define _OSCCON3_SOSCPWR_POSN                               0x6
#define _OSCCON3_SOSCPWR_POSITION                           0x6
#define _OSCCON3_SOSCPWR_SIZE                               0x1
#define _OSCCON3_SOSCPWR_LENGTH                             0x1
#define _OSCCON3_SOSCPWR_MASK                               0x40
#define _OSCCON3_CSWHOLD_POSN                               0x7
#define _OSCCON3_CSWHOLD_POSITION                           0x7
#define _OSCCON3_CSWHOLD_SIZE                               0x1
#define _OSCCON3_CSWHOLD_LENGTH                             0x1
#define _OSCCON3_CSWHOLD_MASK                               0x80

// Register: OSCSTAT
#define OSCSTAT OSCSTAT
extern volatile unsigned char           OSCSTAT             __at(0xEDB);
#ifndef _LIB_BUILD
asm("OSCSTAT equ 0EDBh");
#endif
// aliases
extern volatile unsigned char           OSCSTAT1            __at(0xEDB);
#ifndef _LIB_BUILD
asm("OSCSTAT1 equ 0EDBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PLLR                   :1;
        unsigned                        :1;
        unsigned ADOR                   :1;
        unsigned SOR                    :1;
        unsigned LFOR                   :1;
        unsigned MFOR                   :1;
        unsigned HFOR                   :1;
        unsigned EXTOR                  :1;
    };
} OSCSTATbits_t;
extern volatile OSCSTATbits_t OSCSTATbits __at(0xEDB);
// bitfield macros
#define _OSCSTAT_PLLR_POSN                                  0x0
#define _OSCSTAT_PLLR_POSITION                              0x0
#define _OSCSTAT_PLLR_SIZE                                  0x1
#define _OSCSTAT_PLLR_LENGTH                                0x1
#define _OSCSTAT_PLLR_MASK                                  0x1
#define _OSCSTAT_ADOR_POSN                                  0x2
#define _OSCSTAT_ADOR_POSITION                              0x2
#define _OSCSTAT_ADOR_SIZE                                  0x1
#define _OSCSTAT_ADOR_LENGTH                                0x1
#define _OSCSTAT_ADOR_MASK                                  0x4
#define _OSCSTAT_SOR_POSN                                   0x3
#define _OSCSTAT_SOR_POSITION                               0x3
#define _OSCSTAT_SOR_SIZE                                   0x1
#define _OSCSTAT_SOR_LENGTH                                 0x1
#define _OSCSTAT_SOR_MASK                                   0x8
#define _OSCSTAT_LFOR_POSN                                  0x4
#define _OSCSTAT_LFOR_POSITION                              0x4
#define _OSCSTAT_LFOR_SIZE                                  0x1
#define _OSCSTAT_LFOR_LENGTH                                0x1
#define _OSCSTAT_LFOR_MASK                                  0x10
#define _OSCSTAT_MFOR_POSN                                  0x5
#define _OSCSTAT_MFOR_POSITION                              0x5
#define _OSCSTAT_MFOR_SIZE                                  0x1
#define _OSCSTAT_MFOR_LENGTH                                0x1
#define _OSCSTAT_MFOR_MASK                                  0x20
#define _OSCSTAT_HFOR_POSN                                  0x6
#define _OSCSTAT_HFOR_POSITION                              0x6
#define _OSCSTAT_HFOR_SIZE                                  0x1
#define _OSCSTAT_HFOR_LENGTH                                0x1
#define _OSCSTAT_HFOR_MASK                                  0x40
#define _OSCSTAT_EXTOR_POSN                                 0x7
#define _OSCSTAT_EXTOR_POSITION                             0x7
#define _OSCSTAT_EXTOR_SIZE                                 0x1
#define _OSCSTAT_EXTOR_LENGTH                               0x1
#define _OSCSTAT_EXTOR_MASK                                 0x80
// alias bitfield definitions
typedef union {
    struct {
        unsigned PLLR                   :1;
        unsigned                        :1;
        unsigned ADOR                   :1;
        unsigned SOR                    :1;
        unsigned LFOR                   :1;
        unsigned MFOR                   :1;
        unsigned HFOR                   :1;
        unsigned EXTOR                  :1;
    };
} OSCSTAT1bits_t;
extern volatile OSCSTAT1bits_t OSCSTAT1bits __at(0xEDB);
// bitfield macros
#define _OSCSTAT1_PLLR_POSN                                 0x0
#define _OSCSTAT1_PLLR_POSITION                             0x0
#define _OSCSTAT1_PLLR_SIZE                                 0x1
#define _OSCSTAT1_PLLR_LENGTH                               0x1
#define _OSCSTAT1_PLLR_MASK                                 0x1
#define _OSCSTAT1_ADOR_POSN                                 0x2
#define _OSCSTAT1_ADOR_POSITION                             0x2
#define _OSCSTAT1_ADOR_SIZE                                 0x1
#define _OSCSTAT1_ADOR_LENGTH                               0x1
#define _OSCSTAT1_ADOR_MASK                                 0x4
#define _OSCSTAT1_SOR_POSN                                  0x3
#define _OSCSTAT1_SOR_POSITION                              0x3
#define _OSCSTAT1_SOR_SIZE                                  0x1
#define _OSCSTAT1_SOR_LENGTH                                0x1
#define _OSCSTAT1_SOR_MASK                                  0x8
#define _OSCSTAT1_LFOR_POSN                                 0x4
#define _OSCSTAT1_LFOR_POSITION                             0x4
#define _OSCSTAT1_LFOR_SIZE                                 0x1
#define _OSCSTAT1_LFOR_LENGTH                               0x1
#define _OSCSTAT1_LFOR_MASK                                 0x10
#define _OSCSTAT1_MFOR_POSN                                 0x5
#define _OSCSTAT1_MFOR_POSITION                             0x5
#define _OSCSTAT1_MFOR_SIZE                                 0x1
#define _OSCSTAT1_MFOR_LENGTH                               0x1
#define _OSCSTAT1_MFOR_MASK                                 0x20
#define _OSCSTAT1_HFOR_POSN                                 0x6
#define _OSCSTAT1_HFOR_POSITION                             0x6
#define _OSCSTAT1_HFOR_SIZE                                 0x1
#define _OSCSTAT1_HFOR_LENGTH                               0x1
#define _OSCSTAT1_HFOR_MASK                                 0x40
#define _OSCSTAT1_EXTOR_POSN                                0x7
#define _OSCSTAT1_EXTOR_POSITION                            0x7
#define _OSCSTAT1_EXTOR_SIZE                                0x1
#define _OSCSTAT1_EXTOR_LENGTH                              0x1
#define _OSCSTAT1_EXTOR_MASK                                0x80

// Register: OSCEN
#define OSCEN OSCEN
extern volatile unsigned char           OSCEN               __at(0xEDC);
#ifndef _LIB_BUILD
asm("OSCEN equ 0EDCh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned ADOEN                  :1;
        unsigned SOSCEN                 :1;
        unsigned LFOEN                  :1;
        unsigned MFOEN                  :1;
        unsigned HFOEN                  :1;
        unsigned EXTOEN                 :1;
    };
} OSCENbits_t;
extern volatile OSCENbits_t OSCENbits __at(0xEDC);
// bitfield macros
#define _OSCEN_ADOEN_POSN                                   0x2
#define _OSCEN_ADOEN_POSITION                               0x2
#define _OSCEN_ADOEN_SIZE                                   0x1
#define _OSCEN_ADOEN_LENGTH                                 0x1
#define _OSCEN_ADOEN_MASK                                   0x4
#define _OSCEN_SOSCEN_POSN                                  0x3
#define _OSCEN_SOSCEN_POSITION                              0x3
#define _OSCEN_SOSCEN_SIZE                                  0x1
#define _OSCEN_SOSCEN_LENGTH                                0x1
#define _OSCEN_SOSCEN_MASK                                  0x8
#define _OSCEN_LFOEN_POSN                                   0x4
#define _OSCEN_LFOEN_POSITION                               0x4
#define _OSCEN_LFOEN_SIZE                                   0x1
#define _OSCEN_LFOEN_LENGTH                                 0x1
#define _OSCEN_LFOEN_MASK                                   0x10
#define _OSCEN_MFOEN_POSN                                   0x5
#define _OSCEN_MFOEN_POSITION                               0x5
#define _OSCEN_MFOEN_SIZE                                   0x1
#define _OSCEN_MFOEN_LENGTH                                 0x1
#define _OSCEN_MFOEN_MASK                                   0x20
#define _OSCEN_HFOEN_POSN                                   0x6
#define _OSCEN_HFOEN_POSITION                               0x6
#define _OSCEN_HFOEN_SIZE                                   0x1
#define _OSCEN_HFOEN_LENGTH                                 0x1
#define _OSCEN_HFOEN_MASK                                   0x40
#define _OSCEN_EXTOEN_POSN                                  0x7
#define _OSCEN_EXTOEN_POSITION                              0x7
#define _OSCEN_EXTOEN_SIZE                                  0x1
#define _OSCEN_EXTOEN_LENGTH                                0x1
#define _OSCEN_EXTOEN_MASK                                  0x80

// Register: OSCTUNE
#define OSCTUNE OSCTUNE
extern volatile unsigned char           OSCTUNE             __at(0xEDD);
#ifndef _LIB_BUILD
asm("OSCTUNE equ 0EDDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TUN                    :6;
    };
    struct {
        unsigned TUN0                   :1;
        unsigned TUN1                   :1;
        unsigned TUN2                   :1;
        unsigned TUN3                   :1;
        unsigned TUN4                   :1;
        unsigned TUN5                   :1;
    };
} OSCTUNEbits_t;
extern volatile OSCTUNEbits_t OSCTUNEbits __at(0xEDD);
// bitfield macros
#define _OSCTUNE_TUN_POSN                                   0x0
#define _OSCTUNE_TUN_POSITION                               0x0
#define _OSCTUNE_TUN_SIZE                                   0x6
#define _OSCTUNE_TUN_LENGTH                                 0x6
#define _OSCTUNE_TUN_MASK                                   0x3F
#define _OSCTUNE_TUN0_POSN                                  0x0
#define _OSCTUNE_TUN0_POSITION                              0x0
#define _OSCTUNE_TUN0_SIZE                                  0x1
#define _OSCTUNE_TUN0_LENGTH                                0x1
#define _OSCTUNE_TUN0_MASK                                  0x1
#define _OSCTUNE_TUN1_POSN                                  0x1
#define _OSCTUNE_TUN1_POSITION                              0x1
#define _OSCTUNE_TUN1_SIZE                                  0x1
#define _OSCTUNE_TUN1_LENGTH                                0x1
#define _OSCTUNE_TUN1_MASK                                  0x2
#define _OSCTUNE_TUN2_POSN                                  0x2
#define _OSCTUNE_TUN2_POSITION                              0x2
#define _OSCTUNE_TUN2_SIZE                                  0x1
#define _OSCTUNE_TUN2_LENGTH                                0x1
#define _OSCTUNE_TUN2_MASK                                  0x4
#define _OSCTUNE_TUN3_POSN                                  0x3
#define _OSCTUNE_TUN3_POSITION                              0x3
#define _OSCTUNE_TUN3_SIZE                                  0x1
#define _OSCTUNE_TUN3_LENGTH                                0x1
#define _OSCTUNE_TUN3_MASK                                  0x8
#define _OSCTUNE_TUN4_POSN                                  0x4
#define _OSCTUNE_TUN4_POSITION                              0x4
#define _OSCTUNE_TUN4_SIZE                                  0x1
#define _OSCTUNE_TUN4_LENGTH                                0x1
#define _OSCTUNE_TUN4_MASK                                  0x10
#define _OSCTUNE_TUN5_POSN                                  0x5
#define _OSCTUNE_TUN5_POSITION                              0x5
#define _OSCTUNE_TUN5_SIZE                                  0x1
#define _OSCTUNE_TUN5_LENGTH                                0x1
#define _OSCTUNE_TUN5_MASK                                  0x20

// Register: OSCFRQ
#define OSCFRQ OSCFRQ
extern volatile unsigned char           OSCFRQ              __at(0xEDE);
#ifndef _LIB_BUILD
asm("OSCFRQ equ 0EDEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned HFFRQ                  :4;
    };
    struct {
        unsigned FRQ0                   :1;
        unsigned FRQ1                   :1;
        unsigned FRQ2                   :1;
        unsigned FRQ3                   :1;
    };
} OSCFRQbits_t;
extern volatile OSCFRQbits_t OSCFRQbits __at(0xEDE);
// bitfield macros
#define _OSCFRQ_HFFRQ_POSN                                  0x0
#define _OSCFRQ_HFFRQ_POSITION                              0x0
#define _OSCFRQ_HFFRQ_SIZE                                  0x4
#define _OSCFRQ_HFFRQ_LENGTH                                0x4
#define _OSCFRQ_HFFRQ_MASK                                  0xF
#define _OSCFRQ_FRQ0_POSN                                   0x0
#define _OSCFRQ_FRQ0_POSITION                               0x0
#define _OSCFRQ_FRQ0_SIZE                                   0x1
#define _OSCFRQ_FRQ0_LENGTH                                 0x1
#define _OSCFRQ_FRQ0_MASK                                   0x1
#define _OSCFRQ_FRQ1_POSN                                   0x1
#define _OSCFRQ_FRQ1_POSITION                               0x1
#define _OSCFRQ_FRQ1_SIZE                                   0x1
#define _OSCFRQ_FRQ1_LENGTH                                 0x1
#define _OSCFRQ_FRQ1_MASK                                   0x2
#define _OSCFRQ_FRQ2_POSN                                   0x2
#define _OSCFRQ_FRQ2_POSITION                               0x2
#define _OSCFRQ_FRQ2_SIZE                                   0x1
#define _OSCFRQ_FRQ2_LENGTH                                 0x1
#define _OSCFRQ_FRQ2_MASK                                   0x4
#define _OSCFRQ_FRQ3_POSN                                   0x3
#define _OSCFRQ_FRQ3_POSITION                               0x3
#define _OSCFRQ_FRQ3_SIZE                                   0x1
#define _OSCFRQ_FRQ3_LENGTH                                 0x1
#define _OSCFRQ_FRQ3_MASK                                   0x8

// Register: VREGCON
#define VREGCON VREGCON
extern volatile unsigned char           VREGCON             __at(0xEDF);
#ifndef _LIB_BUILD
asm("VREGCON equ 0EDFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned VREGPM                 :2;
    };
    struct {
        unsigned VREGPM0                :1;
        unsigned VREGPM1                :1;
    };
} VREGCONbits_t;
extern volatile VREGCONbits_t VREGCONbits __at(0xEDF);
// bitfield macros
#define _VREGCON_VREGPM_POSN                                0x0
#define _VREGCON_VREGPM_POSITION                            0x0
#define _VREGCON_VREGPM_SIZE                                0x2
#define _VREGCON_VREGPM_LENGTH                              0x2
#define _VREGCON_VREGPM_MASK                                0x3
#define _VREGCON_VREGPM0_POSN                               0x0
#define _VREGCON_VREGPM0_POSITION                           0x0
#define _VREGCON_VREGPM0_SIZE                               0x1
#define _VREGCON_VREGPM0_LENGTH                             0x1
#define _VREGCON_VREGPM0_MASK                               0x1
#define _VREGCON_VREGPM1_POSN                               0x1
#define _VREGCON_VREGPM1_POSITION                           0x1
#define _VREGCON_VREGPM1_SIZE                               0x1
#define _VREGCON_VREGPM1_LENGTH                             0x1
#define _VREGCON_VREGPM1_MASK                               0x2

// Register: BORCON
#define BORCON BORCON
extern volatile unsigned char           BORCON              __at(0xEE0);
#ifndef _LIB_BUILD
asm("BORCON equ 0EE0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BORRDY                 :1;
        unsigned                        :6;
        unsigned SBOREN                 :1;
    };
} BORCONbits_t;
extern volatile BORCONbits_t BORCONbits __at(0xEE0);
// bitfield macros
#define _BORCON_BORRDY_POSN                                 0x0
#define _BORCON_BORRDY_POSITION                             0x0
#define _BORCON_BORRDY_SIZE                                 0x1
#define _BORCON_BORRDY_LENGTH                               0x1
#define _BORCON_BORRDY_MASK                                 0x1
#define _BORCON_SBOREN_POSN                                 0x7
#define _BORCON_SBOREN_POSITION                             0x7
#define _BORCON_SBOREN_SIZE                                 0x1
#define _BORCON_SBOREN_LENGTH                               0x1
#define _BORCON_SBOREN_MASK                                 0x80

// Register: PMD0
#define PMD0 PMD0
extern volatile unsigned char           PMD0                __at(0xEE1);
#ifndef _LIB_BUILD
asm("PMD0 equ 0EE1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCMD                  :1;
        unsigned CLKRMD                 :1;
        unsigned NVMMD                  :1;
        unsigned SCANMD                 :1;
        unsigned CRCMD                  :1;
        unsigned HLVDMD                 :1;
        unsigned FVRMD                  :1;
        unsigned SYSCMD                 :1;
    };
    struct {
        unsigned                        :1;
        unsigned SPI1MD                 :1;
        unsigned SPI2MD                 :1;
    };
} PMD0bits_t;
extern volatile PMD0bits_t PMD0bits __at(0xEE1);
// bitfield macros
#define _PMD0_IOCMD_POSN                                    0x0
#define _PMD0_IOCMD_POSITION                                0x0
#define _PMD0_IOCMD_SIZE                                    0x1
#define _PMD0_IOCMD_LENGTH                                  0x1
#define _PMD0_IOCMD_MASK                                    0x1
#define _PMD0_CLKRMD_POSN                                   0x1
#define _PMD0_CLKRMD_POSITION                               0x1
#define _PMD0_CLKRMD_SIZE                                   0x1
#define _PMD0_CLKRMD_LENGTH                                 0x1
#define _PMD0_CLKRMD_MASK                                   0x2
#define _PMD0_NVMMD_POSN                                    0x2
#define _PMD0_NVMMD_POSITION                                0x2
#define _PMD0_NVMMD_SIZE                                    0x1
#define _PMD0_NVMMD_LENGTH                                  0x1
#define _PMD0_NVMMD_MASK                                    0x4
#define _PMD0_SCANMD_POSN                                   0x3
#define _PMD0_SCANMD_POSITION                               0x3
#define _PMD0_SCANMD_SIZE                                   0x1
#define _PMD0_SCANMD_LENGTH                                 0x1
#define _PMD0_SCANMD_MASK                                   0x8
#define _PMD0_CRCMD_POSN                                    0x4
#define _PMD0_CRCMD_POSITION                                0x4
#define _PMD0_CRCMD_SIZE                                    0x1
#define _PMD0_CRCMD_LENGTH                                  0x1
#define _PMD0_CRCMD_MASK                                    0x10
#define _PMD0_HLVDMD_POSN                                   0x5
#define _PMD0_HLVDMD_POSITION                               0x5
#define _PMD0_HLVDMD_SIZE                                   0x1
#define _PMD0_HLVDMD_LENGTH                                 0x1
#define _PMD0_HLVDMD_MASK                                   0x20
#define _PMD0_FVRMD_POSN                                    0x6
#define _PMD0_FVRMD_POSITION                                0x6
#define _PMD0_FVRMD_SIZE                                    0x1
#define _PMD0_FVRMD_LENGTH                                  0x1
#define _PMD0_FVRMD_MASK                                    0x40
#define _PMD0_SYSCMD_POSN                                   0x7
#define _PMD0_SYSCMD_POSITION                               0x7
#define _PMD0_SYSCMD_SIZE                                   0x1
#define _PMD0_SYSCMD_LENGTH                                 0x1
#define _PMD0_SYSCMD_MASK                                   0x80
#define _PMD0_SPI1MD_POSN                                   0x1
#define _PMD0_SPI1MD_POSITION                               0x1
#define _PMD0_SPI1MD_SIZE                                   0x1
#define _PMD0_SPI1MD_LENGTH                                 0x1
#define _PMD0_SPI1MD_MASK                                   0x2
#define _PMD0_SPI2MD_POSN                                   0x2
#define _PMD0_SPI2MD_POSITION                               0x2
#define _PMD0_SPI2MD_SIZE                                   0x1
#define _PMD0_SPI2MD_LENGTH                                 0x1
#define _PMD0_SPI2MD_MASK                                   0x4

// Register: PMD1
#define PMD1 PMD1
extern volatile unsigned char           PMD1                __at(0xEE2);
#ifndef _LIB_BUILD
asm("PMD1 equ 0EE2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR0MD                 :1;
        unsigned TMR1MD                 :1;
        unsigned TMR2MD                 :1;
        unsigned TMR3MD                 :1;
        unsigned TMR4MD                 :1;
        unsigned TMR5MD                 :1;
        unsigned TMR6MD                 :1;
    };
    struct {
        unsigned EMBMD                  :1;
    };
} PMD1bits_t;
extern volatile PMD1bits_t PMD1bits __at(0xEE2);
// bitfield macros
#define _PMD1_TMR0MD_POSN                                   0x0
#define _PMD1_TMR0MD_POSITION                               0x0
#define _PMD1_TMR0MD_SIZE                                   0x1
#define _PMD1_TMR0MD_LENGTH                                 0x1
#define _PMD1_TMR0MD_MASK                                   0x1
#define _PMD1_TMR1MD_POSN                                   0x1
#define _PMD1_TMR1MD_POSITION                               0x1
#define _PMD1_TMR1MD_SIZE                                   0x1
#define _PMD1_TMR1MD_LENGTH                                 0x1
#define _PMD1_TMR1MD_MASK                                   0x2
#define _PMD1_TMR2MD_POSN                                   0x2
#define _PMD1_TMR2MD_POSITION                               0x2
#define _PMD1_TMR2MD_SIZE                                   0x1
#define _PMD1_TMR2MD_LENGTH                                 0x1
#define _PMD1_TMR2MD_MASK                                   0x4
#define _PMD1_TMR3MD_POSN                                   0x3
#define _PMD1_TMR3MD_POSITION                               0x3
#define _PMD1_TMR3MD_SIZE                                   0x1
#define _PMD1_TMR3MD_LENGTH                                 0x1
#define _PMD1_TMR3MD_MASK                                   0x8
#define _PMD1_TMR4MD_POSN                                   0x4
#define _PMD1_TMR4MD_POSITION                               0x4
#define _PMD1_TMR4MD_SIZE                                   0x1
#define _PMD1_TMR4MD_LENGTH                                 0x1
#define _PMD1_TMR4MD_MASK                                   0x10
#define _PMD1_TMR5MD_POSN                                   0x5
#define _PMD1_TMR5MD_POSITION                               0x5
#define _PMD1_TMR5MD_SIZE                                   0x1
#define _PMD1_TMR5MD_LENGTH                                 0x1
#define _PMD1_TMR5MD_MASK                                   0x20
#define _PMD1_TMR6MD_POSN                                   0x6
#define _PMD1_TMR6MD_POSITION                               0x6
#define _PMD1_TMR6MD_SIZE                                   0x1
#define _PMD1_TMR6MD_LENGTH                                 0x1
#define _PMD1_TMR6MD_MASK                                   0x40
#define _PMD1_EMBMD_POSN                                    0x0
#define _PMD1_EMBMD_POSITION                                0x0
#define _PMD1_EMBMD_SIZE                                    0x1
#define _PMD1_EMBMD_LENGTH                                  0x1
#define _PMD1_EMBMD_MASK                                    0x1

// Register: PMD2
#define PMD2 PMD2
extern volatile unsigned char           PMD2                __at(0xEE3);
#ifndef _LIB_BUILD
asm("PMD2 equ 0EE3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ZCDMD                  :1;
        unsigned CMP1MD                 :1;
        unsigned CMP2MD                 :1;
        unsigned                        :2;
        unsigned ADCMD                  :1;
        unsigned DACMD                  :1;
    };
} PMD2bits_t;
extern volatile PMD2bits_t PMD2bits __at(0xEE3);
// bitfield macros
#define _PMD2_ZCDMD_POSN                                    0x0
#define _PMD2_ZCDMD_POSITION                                0x0
#define _PMD2_ZCDMD_SIZE                                    0x1
#define _PMD2_ZCDMD_LENGTH                                  0x1
#define _PMD2_ZCDMD_MASK                                    0x1
#define _PMD2_CMP1MD_POSN                                   0x1
#define _PMD2_CMP1MD_POSITION                               0x1
#define _PMD2_CMP1MD_SIZE                                   0x1
#define _PMD2_CMP1MD_LENGTH                                 0x1
#define _PMD2_CMP1MD_MASK                                   0x2
#define _PMD2_CMP2MD_POSN                                   0x2
#define _PMD2_CMP2MD_POSITION                               0x2
#define _PMD2_CMP2MD_SIZE                                   0x1
#define _PMD2_CMP2MD_LENGTH                                 0x1
#define _PMD2_CMP2MD_MASK                                   0x4
#define _PMD2_ADCMD_POSN                                    0x5
#define _PMD2_ADCMD_POSITION                                0x5
#define _PMD2_ADCMD_SIZE                                    0x1
#define _PMD2_ADCMD_LENGTH                                  0x1
#define _PMD2_ADCMD_MASK                                    0x20
#define _PMD2_DACMD_POSN                                    0x6
#define _PMD2_DACMD_POSITION                                0x6
#define _PMD2_DACMD_SIZE                                    0x1
#define _PMD2_DACMD_LENGTH                                  0x1
#define _PMD2_DACMD_MASK                                    0x40

// Register: PMD3
#define PMD3 PMD3
extern volatile unsigned char           PMD3                __at(0xEE4);
#ifndef _LIB_BUILD
asm("PMD3 equ 0EE4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP1MD                 :1;
        unsigned CCP2MD                 :1;
        unsigned PWM3MD                 :1;
        unsigned PWM4MD                 :1;
    };
} PMD3bits_t;
extern volatile PMD3bits_t PMD3bits __at(0xEE4);
// bitfield macros
#define _PMD3_CCP1MD_POSN                                   0x0
#define _PMD3_CCP1MD_POSITION                               0x0
#define _PMD3_CCP1MD_SIZE                                   0x1
#define _PMD3_CCP1MD_LENGTH                                 0x1
#define _PMD3_CCP1MD_MASK                                   0x1
#define _PMD3_CCP2MD_POSN                                   0x1
#define _PMD3_CCP2MD_POSITION                               0x1
#define _PMD3_CCP2MD_SIZE                                   0x1
#define _PMD3_CCP2MD_LENGTH                                 0x1
#define _PMD3_CCP2MD_MASK                                   0x2
#define _PMD3_PWM3MD_POSN                                   0x2
#define _PMD3_PWM3MD_POSITION                               0x2
#define _PMD3_PWM3MD_SIZE                                   0x1
#define _PMD3_PWM3MD_LENGTH                                 0x1
#define _PMD3_PWM3MD_MASK                                   0x4
#define _PMD3_PWM4MD_POSN                                   0x3
#define _PMD3_PWM4MD_POSITION                               0x3
#define _PMD3_PWM4MD_SIZE                                   0x1
#define _PMD3_PWM4MD_LENGTH                                 0x1
#define _PMD3_PWM4MD_MASK                                   0x8

// Register: PMD4
#define PMD4 PMD4
extern volatile unsigned char           PMD4                __at(0xEE5);
#ifndef _LIB_BUILD
asm("PMD4 equ 0EE5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CWGMD                  :1;
        unsigned                        :3;
        unsigned MSSP1MD                :1;
        unsigned                        :1;
        unsigned UART1MD                :1;
    };
    struct {
        unsigned CWG1MD                 :1;
    };
} PMD4bits_t;
extern volatile PMD4bits_t PMD4bits __at(0xEE5);
// bitfield macros
#define _PMD4_CWGMD_POSN                                    0x0
#define _PMD4_CWGMD_POSITION                                0x0
#define _PMD4_CWGMD_SIZE                                    0x1
#define _PMD4_CWGMD_LENGTH                                  0x1
#define _PMD4_CWGMD_MASK                                    0x1
#define _PMD4_MSSP1MD_POSN                                  0x4
#define _PMD4_MSSP1MD_POSITION                              0x4
#define _PMD4_MSSP1MD_SIZE                                  0x1
#define _PMD4_MSSP1MD_LENGTH                                0x1
#define _PMD4_MSSP1MD_MASK                                  0x10
#define _PMD4_UART1MD_POSN                                  0x6
#define _PMD4_UART1MD_POSITION                              0x6
#define _PMD4_UART1MD_SIZE                                  0x1
#define _PMD4_UART1MD_LENGTH                                0x1
#define _PMD4_UART1MD_MASK                                  0x40
#define _PMD4_CWG1MD_POSN                                   0x0
#define _PMD4_CWG1MD_POSITION                               0x0
#define _PMD4_CWG1MD_SIZE                                   0x1
#define _PMD4_CWG1MD_LENGTH                                 0x1
#define _PMD4_CWG1MD_MASK                                   0x1

// Register: PMD5
#define PMD5 PMD5
extern volatile unsigned char           PMD5                __at(0xEE6);
#ifndef _LIB_BUILD
asm("PMD5 equ 0EE6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DSMMD                  :1;
    };
} PMD5bits_t;
extern volatile PMD5bits_t PMD5bits __at(0xEE6);
// bitfield macros
#define _PMD5_DSMMD_POSN                                    0x0
#define _PMD5_DSMMD_POSITION                                0x0
#define _PMD5_DSMMD_SIZE                                    0x1
#define _PMD5_DSMMD_LENGTH                                  0x1
#define _PMD5_DSMMD_MASK                                    0x1

// Register: RA0PPS
#define RA0PPS RA0PPS
extern volatile unsigned char           RA0PPS              __at(0xEE7);
#ifndef _LIB_BUILD
asm("RA0PPS equ 0EE7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA0PPS0                :1;
        unsigned RA0PPS1                :1;
        unsigned RA0PPS2                :1;
        unsigned RA0PPS3                :1;
        unsigned RA0PPS4                :1;
    };
} RA0PPSbits_t;
extern volatile RA0PPSbits_t RA0PPSbits __at(0xEE7);
// bitfield macros
#define _RA0PPS_RA0PPS0_POSN                                0x0
#define _RA0PPS_RA0PPS0_POSITION                            0x0
#define _RA0PPS_RA0PPS0_SIZE                                0x1
#define _RA0PPS_RA0PPS0_LENGTH                              0x1
#define _RA0PPS_RA0PPS0_MASK                                0x1
#define _RA0PPS_RA0PPS1_POSN                                0x1
#define _RA0PPS_RA0PPS1_POSITION                            0x1
#define _RA0PPS_RA0PPS1_SIZE                                0x1
#define _RA0PPS_RA0PPS1_LENGTH                              0x1
#define _RA0PPS_RA0PPS1_MASK                                0x2
#define _RA0PPS_RA0PPS2_POSN                                0x2
#define _RA0PPS_RA0PPS2_POSITION                            0x2
#define _RA0PPS_RA0PPS2_SIZE                                0x1
#define _RA0PPS_RA0PPS2_LENGTH                              0x1
#define _RA0PPS_RA0PPS2_MASK                                0x4
#define _RA0PPS_RA0PPS3_POSN                                0x3
#define _RA0PPS_RA0PPS3_POSITION                            0x3
#define _RA0PPS_RA0PPS3_SIZE                                0x1
#define _RA0PPS_RA0PPS3_LENGTH                              0x1
#define _RA0PPS_RA0PPS3_MASK                                0x8
#define _RA0PPS_RA0PPS4_POSN                                0x4
#define _RA0PPS_RA0PPS4_POSITION                            0x4
#define _RA0PPS_RA0PPS4_SIZE                                0x1
#define _RA0PPS_RA0PPS4_LENGTH                              0x1
#define _RA0PPS_RA0PPS4_MASK                                0x10

// Register: RA1PPS
#define RA1PPS RA1PPS
extern volatile unsigned char           RA1PPS              __at(0xEE8);
#ifndef _LIB_BUILD
asm("RA1PPS equ 0EE8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA1PPS0                :1;
        unsigned RA1PPS1                :1;
        unsigned RA1PPS2                :1;
        unsigned RA1PPS3                :1;
        unsigned RA1PPS4                :1;
    };
} RA1PPSbits_t;
extern volatile RA1PPSbits_t RA1PPSbits __at(0xEE8);
// bitfield macros
#define _RA1PPS_RA1PPS0_POSN                                0x0
#define _RA1PPS_RA1PPS0_POSITION                            0x0
#define _RA1PPS_RA1PPS0_SIZE                                0x1
#define _RA1PPS_RA1PPS0_LENGTH                              0x1
#define _RA1PPS_RA1PPS0_MASK                                0x1
#define _RA1PPS_RA1PPS1_POSN                                0x1
#define _RA1PPS_RA1PPS1_POSITION                            0x1
#define _RA1PPS_RA1PPS1_SIZE                                0x1
#define _RA1PPS_RA1PPS1_LENGTH                              0x1
#define _RA1PPS_RA1PPS1_MASK                                0x2
#define _RA1PPS_RA1PPS2_POSN                                0x2
#define _RA1PPS_RA1PPS2_POSITION                            0x2
#define _RA1PPS_RA1PPS2_SIZE                                0x1
#define _RA1PPS_RA1PPS2_LENGTH                              0x1
#define _RA1PPS_RA1PPS2_MASK                                0x4
#define _RA1PPS_RA1PPS3_POSN                                0x3
#define _RA1PPS_RA1PPS3_POSITION                            0x3
#define _RA1PPS_RA1PPS3_SIZE                                0x1
#define _RA1PPS_RA1PPS3_LENGTH                              0x1
#define _RA1PPS_RA1PPS3_MASK                                0x8
#define _RA1PPS_RA1PPS4_POSN                                0x4
#define _RA1PPS_RA1PPS4_POSITION                            0x4
#define _RA1PPS_RA1PPS4_SIZE                                0x1
#define _RA1PPS_RA1PPS4_LENGTH                              0x1
#define _RA1PPS_RA1PPS4_MASK                                0x10

// Register: RA2PPS
#define RA2PPS RA2PPS
extern volatile unsigned char           RA2PPS              __at(0xEE9);
#ifndef _LIB_BUILD
asm("RA2PPS equ 0EE9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA2PPS0                :1;
        unsigned RA2PPS1                :1;
        unsigned RA2PPS2                :1;
        unsigned RA2PPS3                :1;
        unsigned RA2PPS4                :1;
    };
} RA2PPSbits_t;
extern volatile RA2PPSbits_t RA2PPSbits __at(0xEE9);
// bitfield macros
#define _RA2PPS_RA2PPS0_POSN                                0x0
#define _RA2PPS_RA2PPS0_POSITION                            0x0
#define _RA2PPS_RA2PPS0_SIZE                                0x1
#define _RA2PPS_RA2PPS0_LENGTH                              0x1
#define _RA2PPS_RA2PPS0_MASK                                0x1
#define _RA2PPS_RA2PPS1_POSN                                0x1
#define _RA2PPS_RA2PPS1_POSITION                            0x1
#define _RA2PPS_RA2PPS1_SIZE                                0x1
#define _RA2PPS_RA2PPS1_LENGTH                              0x1
#define _RA2PPS_RA2PPS1_MASK                                0x2
#define _RA2PPS_RA2PPS2_POSN                                0x2
#define _RA2PPS_RA2PPS2_POSITION                            0x2
#define _RA2PPS_RA2PPS2_SIZE                                0x1
#define _RA2PPS_RA2PPS2_LENGTH                              0x1
#define _RA2PPS_RA2PPS2_MASK                                0x4
#define _RA2PPS_RA2PPS3_POSN                                0x3
#define _RA2PPS_RA2PPS3_POSITION                            0x3
#define _RA2PPS_RA2PPS3_SIZE                                0x1
#define _RA2PPS_RA2PPS3_LENGTH                              0x1
#define _RA2PPS_RA2PPS3_MASK                                0x8
#define _RA2PPS_RA2PPS4_POSN                                0x4
#define _RA2PPS_RA2PPS4_POSITION                            0x4
#define _RA2PPS_RA2PPS4_SIZE                                0x1
#define _RA2PPS_RA2PPS4_LENGTH                              0x1
#define _RA2PPS_RA2PPS4_MASK                                0x10

// Register: RA3PPS
#define RA3PPS RA3PPS
extern volatile unsigned char           RA3PPS              __at(0xEEA);
#ifndef _LIB_BUILD
asm("RA3PPS equ 0EEAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA3PPS0                :1;
        unsigned RA3PPS1                :1;
        unsigned RA3PPS2                :1;
        unsigned RA3PPS3                :1;
        unsigned RA3PPS4                :1;
    };
} RA3PPSbits_t;
extern volatile RA3PPSbits_t RA3PPSbits __at(0xEEA);
// bitfield macros
#define _RA3PPS_RA3PPS0_POSN                                0x0
#define _RA3PPS_RA3PPS0_POSITION                            0x0
#define _RA3PPS_RA3PPS0_SIZE                                0x1
#define _RA3PPS_RA3PPS0_LENGTH                              0x1
#define _RA3PPS_RA3PPS0_MASK                                0x1
#define _RA3PPS_RA3PPS1_POSN                                0x1
#define _RA3PPS_RA3PPS1_POSITION                            0x1
#define _RA3PPS_RA3PPS1_SIZE                                0x1
#define _RA3PPS_RA3PPS1_LENGTH                              0x1
#define _RA3PPS_RA3PPS1_MASK                                0x2
#define _RA3PPS_RA3PPS2_POSN                                0x2
#define _RA3PPS_RA3PPS2_POSITION                            0x2
#define _RA3PPS_RA3PPS2_SIZE                                0x1
#define _RA3PPS_RA3PPS2_LENGTH                              0x1
#define _RA3PPS_RA3PPS2_MASK                                0x4
#define _RA3PPS_RA3PPS3_POSN                                0x3
#define _RA3PPS_RA3PPS3_POSITION                            0x3
#define _RA3PPS_RA3PPS3_SIZE                                0x1
#define _RA3PPS_RA3PPS3_LENGTH                              0x1
#define _RA3PPS_RA3PPS3_MASK                                0x8
#define _RA3PPS_RA3PPS4_POSN                                0x4
#define _RA3PPS_RA3PPS4_POSITION                            0x4
#define _RA3PPS_RA3PPS4_SIZE                                0x1
#define _RA3PPS_RA3PPS4_LENGTH                              0x1
#define _RA3PPS_RA3PPS4_MASK                                0x10

// Register: RA4PPS
#define RA4PPS RA4PPS
extern volatile unsigned char           RA4PPS              __at(0xEEB);
#ifndef _LIB_BUILD
asm("RA4PPS equ 0EEBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA4PPS0                :1;
        unsigned RA4PPS1                :1;
        unsigned RA4PPS2                :1;
        unsigned RA4PPS3                :1;
        unsigned RA4PPS4                :1;
    };
} RA4PPSbits_t;
extern volatile RA4PPSbits_t RA4PPSbits __at(0xEEB);
// bitfield macros
#define _RA4PPS_RA4PPS0_POSN                                0x0
#define _RA4PPS_RA4PPS0_POSITION                            0x0
#define _RA4PPS_RA4PPS0_SIZE                                0x1
#define _RA4PPS_RA4PPS0_LENGTH                              0x1
#define _RA4PPS_RA4PPS0_MASK                                0x1
#define _RA4PPS_RA4PPS1_POSN                                0x1
#define _RA4PPS_RA4PPS1_POSITION                            0x1
#define _RA4PPS_RA4PPS1_SIZE                                0x1
#define _RA4PPS_RA4PPS1_LENGTH                              0x1
#define _RA4PPS_RA4PPS1_MASK                                0x2
#define _RA4PPS_RA4PPS2_POSN                                0x2
#define _RA4PPS_RA4PPS2_POSITION                            0x2
#define _RA4PPS_RA4PPS2_SIZE                                0x1
#define _RA4PPS_RA4PPS2_LENGTH                              0x1
#define _RA4PPS_RA4PPS2_MASK                                0x4
#define _RA4PPS_RA4PPS3_POSN                                0x3
#define _RA4PPS_RA4PPS3_POSITION                            0x3
#define _RA4PPS_RA4PPS3_SIZE                                0x1
#define _RA4PPS_RA4PPS3_LENGTH                              0x1
#define _RA4PPS_RA4PPS3_MASK                                0x8
#define _RA4PPS_RA4PPS4_POSN                                0x4
#define _RA4PPS_RA4PPS4_POSITION                            0x4
#define _RA4PPS_RA4PPS4_SIZE                                0x1
#define _RA4PPS_RA4PPS4_LENGTH                              0x1
#define _RA4PPS_RA4PPS4_MASK                                0x10

// Register: RA5PPS
#define RA5PPS RA5PPS
extern volatile unsigned char           RA5PPS              __at(0xEEC);
#ifndef _LIB_BUILD
asm("RA5PPS equ 0EECh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA5PPS0                :1;
        unsigned RA5PPS1                :1;
        unsigned RA5PPS2                :1;
        unsigned RA5PPS3                :1;
        unsigned RA5PPS4                :1;
    };
} RA5PPSbits_t;
extern volatile RA5PPSbits_t RA5PPSbits __at(0xEEC);
// bitfield macros
#define _RA5PPS_RA5PPS0_POSN                                0x0
#define _RA5PPS_RA5PPS0_POSITION                            0x0
#define _RA5PPS_RA5PPS0_SIZE                                0x1
#define _RA5PPS_RA5PPS0_LENGTH                              0x1
#define _RA5PPS_RA5PPS0_MASK                                0x1
#define _RA5PPS_RA5PPS1_POSN                                0x1
#define _RA5PPS_RA5PPS1_POSITION                            0x1
#define _RA5PPS_RA5PPS1_SIZE                                0x1
#define _RA5PPS_RA5PPS1_LENGTH                              0x1
#define _RA5PPS_RA5PPS1_MASK                                0x2
#define _RA5PPS_RA5PPS2_POSN                                0x2
#define _RA5PPS_RA5PPS2_POSITION                            0x2
#define _RA5PPS_RA5PPS2_SIZE                                0x1
#define _RA5PPS_RA5PPS2_LENGTH                              0x1
#define _RA5PPS_RA5PPS2_MASK                                0x4
#define _RA5PPS_RA5PPS3_POSN                                0x3
#define _RA5PPS_RA5PPS3_POSITION                            0x3
#define _RA5PPS_RA5PPS3_SIZE                                0x1
#define _RA5PPS_RA5PPS3_LENGTH                              0x1
#define _RA5PPS_RA5PPS3_MASK                                0x8
#define _RA5PPS_RA5PPS4_POSN                                0x4
#define _RA5PPS_RA5PPS4_POSITION                            0x4
#define _RA5PPS_RA5PPS4_SIZE                                0x1
#define _RA5PPS_RA5PPS4_LENGTH                              0x1
#define _RA5PPS_RA5PPS4_MASK                                0x10

// Register: RA6PPS
#define RA6PPS RA6PPS
extern volatile unsigned char           RA6PPS              __at(0xEED);
#ifndef _LIB_BUILD
asm("RA6PPS equ 0EEDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA6PPS0                :1;
        unsigned RA6PPS1                :1;
        unsigned RA6PPS2                :1;
        unsigned RA6PPS3                :1;
        unsigned RA6PPS4                :1;
    };
} RA6PPSbits_t;
extern volatile RA6PPSbits_t RA6PPSbits __at(0xEED);
// bitfield macros
#define _RA6PPS_RA6PPS0_POSN                                0x0
#define _RA6PPS_RA6PPS0_POSITION                            0x0
#define _RA6PPS_RA6PPS0_SIZE                                0x1
#define _RA6PPS_RA6PPS0_LENGTH                              0x1
#define _RA6PPS_RA6PPS0_MASK                                0x1
#define _RA6PPS_RA6PPS1_POSN                                0x1
#define _RA6PPS_RA6PPS1_POSITION                            0x1
#define _RA6PPS_RA6PPS1_SIZE                                0x1
#define _RA6PPS_RA6PPS1_LENGTH                              0x1
#define _RA6PPS_RA6PPS1_MASK                                0x2
#define _RA6PPS_RA6PPS2_POSN                                0x2
#define _RA6PPS_RA6PPS2_POSITION                            0x2
#define _RA6PPS_RA6PPS2_SIZE                                0x1
#define _RA6PPS_RA6PPS2_LENGTH                              0x1
#define _RA6PPS_RA6PPS2_MASK                                0x4
#define _RA6PPS_RA6PPS3_POSN                                0x3
#define _RA6PPS_RA6PPS3_POSITION                            0x3
#define _RA6PPS_RA6PPS3_SIZE                                0x1
#define _RA6PPS_RA6PPS3_LENGTH                              0x1
#define _RA6PPS_RA6PPS3_MASK                                0x8
#define _RA6PPS_RA6PPS4_POSN                                0x4
#define _RA6PPS_RA6PPS4_POSITION                            0x4
#define _RA6PPS_RA6PPS4_SIZE                                0x1
#define _RA6PPS_RA6PPS4_LENGTH                              0x1
#define _RA6PPS_RA6PPS4_MASK                                0x10

// Register: RA7PPS
#define RA7PPS RA7PPS
extern volatile unsigned char           RA7PPS              __at(0xEEE);
#ifndef _LIB_BUILD
asm("RA7PPS equ 0EEEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA7PPS0                :1;
        unsigned RA7PPS1                :1;
        unsigned RA7PPS2                :1;
        unsigned RA7PPS3                :1;
        unsigned RA7PPS4                :1;
    };
} RA7PPSbits_t;
extern volatile RA7PPSbits_t RA7PPSbits __at(0xEEE);
// bitfield macros
#define _RA7PPS_RA7PPS0_POSN                                0x0
#define _RA7PPS_RA7PPS0_POSITION                            0x0
#define _RA7PPS_RA7PPS0_SIZE                                0x1
#define _RA7PPS_RA7PPS0_LENGTH                              0x1
#define _RA7PPS_RA7PPS0_MASK                                0x1
#define _RA7PPS_RA7PPS1_POSN                                0x1
#define _RA7PPS_RA7PPS1_POSITION                            0x1
#define _RA7PPS_RA7PPS1_SIZE                                0x1
#define _RA7PPS_RA7PPS1_LENGTH                              0x1
#define _RA7PPS_RA7PPS1_MASK                                0x2
#define _RA7PPS_RA7PPS2_POSN                                0x2
#define _RA7PPS_RA7PPS2_POSITION                            0x2
#define _RA7PPS_RA7PPS2_SIZE                                0x1
#define _RA7PPS_RA7PPS2_LENGTH                              0x1
#define _RA7PPS_RA7PPS2_MASK                                0x4
#define _RA7PPS_RA7PPS3_POSN                                0x3
#define _RA7PPS_RA7PPS3_POSITION                            0x3
#define _RA7PPS_RA7PPS3_SIZE                                0x1
#define _RA7PPS_RA7PPS3_LENGTH                              0x1
#define _RA7PPS_RA7PPS3_MASK                                0x8
#define _RA7PPS_RA7PPS4_POSN                                0x4
#define _RA7PPS_RA7PPS4_POSITION                            0x4
#define _RA7PPS_RA7PPS4_SIZE                                0x1
#define _RA7PPS_RA7PPS4_LENGTH                              0x1
#define _RA7PPS_RA7PPS4_MASK                                0x10

// Register: RB0PPS
#define RB0PPS RB0PPS
extern volatile unsigned char           RB0PPS              __at(0xEEF);
#ifndef _LIB_BUILD
asm("RB0PPS equ 0EEFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RB0PPS0                :1;
        unsigned RB0PPS1                :1;
        unsigned RB0PPS2                :1;
        unsigned RB0PPS3                :1;
        unsigned RB0PPS4                :1;
    };
} RB0PPSbits_t;
extern volatile RB0PPSbits_t RB0PPSbits __at(0xEEF);
// bitfield macros
#define _RB0PPS_RB0PPS0_POSN                                0x0
#define _RB0PPS_RB0PPS0_POSITION                            0x0
#define _RB0PPS_RB0PPS0_SIZE                                0x1
#define _RB0PPS_RB0PPS0_LENGTH                              0x1
#define _RB0PPS_RB0PPS0_MASK                                0x1
#define _RB0PPS_RB0PPS1_POSN                                0x1
#define _RB0PPS_RB0PPS1_POSITION                            0x1
#define _RB0PPS_RB0PPS1_SIZE                                0x1
#define _RB0PPS_RB0PPS1_LENGTH                              0x1
#define _RB0PPS_RB0PPS1_MASK                                0x2
#define _RB0PPS_RB0PPS2_POSN                                0x2
#define _RB0PPS_RB0PPS2_POSITION                            0x2
#define _RB0PPS_RB0PPS2_SIZE                                0x1
#define _RB0PPS_RB0PPS2_LENGTH                              0x1
#define _RB0PPS_RB0PPS2_MASK                                0x4
#define _RB0PPS_RB0PPS3_POSN                                0x3
#define _RB0PPS_RB0PPS3_POSITION                            0x3
#define _RB0PPS_RB0PPS3_SIZE                                0x1
#define _RB0PPS_RB0PPS3_LENGTH                              0x1
#define _RB0PPS_RB0PPS3_MASK                                0x8
#define _RB0PPS_RB0PPS4_POSN                                0x4
#define _RB0PPS_RB0PPS4_POSITION                            0x4
#define _RB0PPS_RB0PPS4_SIZE                                0x1
#define _RB0PPS_RB0PPS4_LENGTH                              0x1
#define _RB0PPS_RB0PPS4_MASK                                0x10

// Register: RB1PPS
#define RB1PPS RB1PPS
extern volatile unsigned char           RB1PPS              __at(0xEF0);
#ifndef _LIB_BUILD
asm("RB1PPS equ 0EF0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RB1PPS0                :1;
        unsigned RB1PPS1                :1;
        unsigned RB1PPS2                :1;
        unsigned RB1PPS3                :1;
        unsigned RB1PPS4                :1;
    };
} RB1PPSbits_t;
extern volatile RB1PPSbits_t RB1PPSbits __at(0xEF0);
// bitfield macros
#define _RB1PPS_RB1PPS0_POSN                                0x0
#define _RB1PPS_RB1PPS0_POSITION                            0x0
#define _RB1PPS_RB1PPS0_SIZE                                0x1
#define _RB1PPS_RB1PPS0_LENGTH                              0x1
#define _RB1PPS_RB1PPS0_MASK                                0x1
#define _RB1PPS_RB1PPS1_POSN                                0x1
#define _RB1PPS_RB1PPS1_POSITION                            0x1
#define _RB1PPS_RB1PPS1_SIZE                                0x1
#define _RB1PPS_RB1PPS1_LENGTH                              0x1
#define _RB1PPS_RB1PPS1_MASK                                0x2
#define _RB1PPS_RB1PPS2_POSN                                0x2
#define _RB1PPS_RB1PPS2_POSITION                            0x2
#define _RB1PPS_RB1PPS2_SIZE                                0x1
#define _RB1PPS_RB1PPS2_LENGTH                              0x1
#define _RB1PPS_RB1PPS2_MASK                                0x4
#define _RB1PPS_RB1PPS3_POSN                                0x3
#define _RB1PPS_RB1PPS3_POSITION                            0x3
#define _RB1PPS_RB1PPS3_SIZE                                0x1
#define _RB1PPS_RB1PPS3_LENGTH                              0x1
#define _RB1PPS_RB1PPS3_MASK                                0x8
#define _RB1PPS_RB1PPS4_POSN                                0x4
#define _RB1PPS_RB1PPS4_POSITION                            0x4
#define _RB1PPS_RB1PPS4_SIZE                                0x1
#define _RB1PPS_RB1PPS4_LENGTH                              0x1
#define _RB1PPS_RB1PPS4_MASK                                0x10

// Register: RB2PPS
#define RB2PPS RB2PPS
extern volatile unsigned char           RB2PPS              __at(0xEF1);
#ifndef _LIB_BUILD
asm("RB2PPS equ 0EF1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RB2PPS0                :1;
        unsigned RB2PPS1                :1;
        unsigned RB2PPS2                :1;
        unsigned RB2PPS3                :1;
        unsigned RB2PPS4                :1;
    };
} RB2PPSbits_t;
extern volatile RB2PPSbits_t RB2PPSbits __at(0xEF1);
// bitfield macros
#define _RB2PPS_RB2PPS0_POSN                                0x0
#define _RB2PPS_RB2PPS0_POSITION                            0x0
#define _RB2PPS_RB2PPS0_SIZE                                0x1
#define _RB2PPS_RB2PPS0_LENGTH                              0x1
#define _RB2PPS_RB2PPS0_MASK                                0x1
#define _RB2PPS_RB2PPS1_POSN                                0x1
#define _RB2PPS_RB2PPS1_POSITION                            0x1
#define _RB2PPS_RB2PPS1_SIZE                                0x1
#define _RB2PPS_RB2PPS1_LENGTH                              0x1
#define _RB2PPS_RB2PPS1_MASK                                0x2
#define _RB2PPS_RB2PPS2_POSN                                0x2
#define _RB2PPS_RB2PPS2_POSITION                            0x2
#define _RB2PPS_RB2PPS2_SIZE                                0x1
#define _RB2PPS_RB2PPS2_LENGTH                              0x1
#define _RB2PPS_RB2PPS2_MASK                                0x4
#define _RB2PPS_RB2PPS3_POSN                                0x3
#define _RB2PPS_RB2PPS3_POSITION                            0x3
#define _RB2PPS_RB2PPS3_SIZE                                0x1
#define _RB2PPS_RB2PPS3_LENGTH                              0x1
#define _RB2PPS_RB2PPS3_MASK                                0x8
#define _RB2PPS_RB2PPS4_POSN                                0x4
#define _RB2PPS_RB2PPS4_POSITION                            0x4
#define _RB2PPS_RB2PPS4_SIZE                                0x1
#define _RB2PPS_RB2PPS4_LENGTH                              0x1
#define _RB2PPS_RB2PPS4_MASK                                0x10

// Register: RB3PPS
#define RB3PPS RB3PPS
extern volatile unsigned char           RB3PPS              __at(0xEF2);
#ifndef _LIB_BUILD
asm("RB3PPS equ 0EF2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RB3PPS0                :1;
        unsigned RB3PPS1                :1;
        unsigned RB3PPS2                :1;
        unsigned RB3PPS3                :1;
        unsigned RB3PPS4                :1;
    };
} RB3PPSbits_t;
extern volatile RB3PPSbits_t RB3PPSbits __at(0xEF2);
// bitfield macros
#define _RB3PPS_RB3PPS0_POSN                                0x0
#define _RB3PPS_RB3PPS0_POSITION                            0x0
#define _RB3PPS_RB3PPS0_SIZE                                0x1
#define _RB3PPS_RB3PPS0_LENGTH                              0x1
#define _RB3PPS_RB3PPS0_MASK                                0x1
#define _RB3PPS_RB3PPS1_POSN                                0x1
#define _RB3PPS_RB3PPS1_POSITION                            0x1
#define _RB3PPS_RB3PPS1_SIZE                                0x1
#define _RB3PPS_RB3PPS1_LENGTH                              0x1
#define _RB3PPS_RB3PPS1_MASK                                0x2
#define _RB3PPS_RB3PPS2_POSN                                0x2
#define _RB3PPS_RB3PPS2_POSITION                            0x2
#define _RB3PPS_RB3PPS2_SIZE                                0x1
#define _RB3PPS_RB3PPS2_LENGTH                              0x1
#define _RB3PPS_RB3PPS2_MASK                                0x4
#define _RB3PPS_RB3PPS3_POSN                                0x3
#define _RB3PPS_RB3PPS3_POSITION                            0x3
#define _RB3PPS_RB3PPS3_SIZE                                0x1
#define _RB3PPS_RB3PPS3_LENGTH                              0x1
#define _RB3PPS_RB3PPS3_MASK                                0x8
#define _RB3PPS_RB3PPS4_POSN                                0x4
#define _RB3PPS_RB3PPS4_POSITION                            0x4
#define _RB3PPS_RB3PPS4_SIZE                                0x1
#define _RB3PPS_RB3PPS4_LENGTH                              0x1
#define _RB3PPS_RB3PPS4_MASK                                0x10

// Register: RB4PPS
#define RB4PPS RB4PPS
extern volatile unsigned char           RB4PPS              __at(0xEF3);
#ifndef _LIB_BUILD
asm("RB4PPS equ 0EF3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RB4PPS0                :1;
        unsigned RB4PPS1                :1;
        unsigned RB4PPS2                :1;
        unsigned RB4PPS3                :1;
        unsigned RB4PPS4                :1;
    };
} RB4PPSbits_t;
extern volatile RB4PPSbits_t RB4PPSbits __at(0xEF3);
// bitfield macros
#define _RB4PPS_RB4PPS0_POSN                                0x0
#define _RB4PPS_RB4PPS0_POSITION                            0x0
#define _RB4PPS_RB4PPS0_SIZE                                0x1
#define _RB4PPS_RB4PPS0_LENGTH                              0x1
#define _RB4PPS_RB4PPS0_MASK                                0x1
#define _RB4PPS_RB4PPS1_POSN                                0x1
#define _RB4PPS_RB4PPS1_POSITION                            0x1
#define _RB4PPS_RB4PPS1_SIZE                                0x1
#define _RB4PPS_RB4PPS1_LENGTH                              0x1
#define _RB4PPS_RB4PPS1_MASK                                0x2
#define _RB4PPS_RB4PPS2_POSN                                0x2
#define _RB4PPS_RB4PPS2_POSITION                            0x2
#define _RB4PPS_RB4PPS2_SIZE                                0x1
#define _RB4PPS_RB4PPS2_LENGTH                              0x1
#define _RB4PPS_RB4PPS2_MASK                                0x4
#define _RB4PPS_RB4PPS3_POSN                                0x3
#define _RB4PPS_RB4PPS3_POSITION                            0x3
#define _RB4PPS_RB4PPS3_SIZE                                0x1
#define _RB4PPS_RB4PPS3_LENGTH                              0x1
#define _RB4PPS_RB4PPS3_MASK                                0x8
#define _RB4PPS_RB4PPS4_POSN                                0x4
#define _RB4PPS_RB4PPS4_POSITION                            0x4
#define _RB4PPS_RB4PPS4_SIZE                                0x1
#define _RB4PPS_RB4PPS4_LENGTH                              0x1
#define _RB4PPS_RB4PPS4_MASK                                0x10

// Register: RB5PPS
#define RB5PPS RB5PPS
extern volatile unsigned char           RB5PPS              __at(0xEF4);
#ifndef _LIB_BUILD
asm("RB5PPS equ 0EF4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RB5PPS0                :1;
        unsigned RB5PPS1                :1;
        unsigned RB5PPS2                :1;
        unsigned RB5PPS3                :1;
        unsigned RB5PPS4                :1;
    };
} RB5PPSbits_t;
extern volatile RB5PPSbits_t RB5PPSbits __at(0xEF4);
// bitfield macros
#define _RB5PPS_RB5PPS0_POSN                                0x0
#define _RB5PPS_RB5PPS0_POSITION                            0x0
#define _RB5PPS_RB5PPS0_SIZE                                0x1
#define _RB5PPS_RB5PPS0_LENGTH                              0x1
#define _RB5PPS_RB5PPS0_MASK                                0x1
#define _RB5PPS_RB5PPS1_POSN                                0x1
#define _RB5PPS_RB5PPS1_POSITION                            0x1
#define _RB5PPS_RB5PPS1_SIZE                                0x1
#define _RB5PPS_RB5PPS1_LENGTH                              0x1
#define _RB5PPS_RB5PPS1_MASK                                0x2
#define _RB5PPS_RB5PPS2_POSN                                0x2
#define _RB5PPS_RB5PPS2_POSITION                            0x2
#define _RB5PPS_RB5PPS2_SIZE                                0x1
#define _RB5PPS_RB5PPS2_LENGTH                              0x1
#define _RB5PPS_RB5PPS2_MASK                                0x4
#define _RB5PPS_RB5PPS3_POSN                                0x3
#define _RB5PPS_RB5PPS3_POSITION                            0x3
#define _RB5PPS_RB5PPS3_SIZE                                0x1
#define _RB5PPS_RB5PPS3_LENGTH                              0x1
#define _RB5PPS_RB5PPS3_MASK                                0x8
#define _RB5PPS_RB5PPS4_POSN                                0x4
#define _RB5PPS_RB5PPS4_POSITION                            0x4
#define _RB5PPS_RB5PPS4_SIZE                                0x1
#define _RB5PPS_RB5PPS4_LENGTH                              0x1
#define _RB5PPS_RB5PPS4_MASK                                0x10

// Register: RB6PPS
#define RB6PPS RB6PPS
extern volatile unsigned char           RB6PPS              __at(0xEF5);
#ifndef _LIB_BUILD
asm("RB6PPS equ 0EF5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RB6PPS0                :1;
        unsigned RB6PPS1                :1;
        unsigned RB6PPS2                :1;
        unsigned RB6PPS3                :1;
        unsigned RB6PPS4                :1;
    };
} RB6PPSbits_t;
extern volatile RB6PPSbits_t RB6PPSbits __at(0xEF5);
// bitfield macros
#define _RB6PPS_RB6PPS0_POSN                                0x0
#define _RB6PPS_RB6PPS0_POSITION                            0x0
#define _RB6PPS_RB6PPS0_SIZE                                0x1
#define _RB6PPS_RB6PPS0_LENGTH                              0x1
#define _RB6PPS_RB6PPS0_MASK                                0x1
#define _RB6PPS_RB6PPS1_POSN                                0x1
#define _RB6PPS_RB6PPS1_POSITION                            0x1
#define _RB6PPS_RB6PPS1_SIZE                                0x1
#define _RB6PPS_RB6PPS1_LENGTH                              0x1
#define _RB6PPS_RB6PPS1_MASK                                0x2
#define _RB6PPS_RB6PPS2_POSN                                0x2
#define _RB6PPS_RB6PPS2_POSITION                            0x2
#define _RB6PPS_RB6PPS2_SIZE                                0x1
#define _RB6PPS_RB6PPS2_LENGTH                              0x1
#define _RB6PPS_RB6PPS2_MASK                                0x4
#define _RB6PPS_RB6PPS3_POSN                                0x3
#define _RB6PPS_RB6PPS3_POSITION                            0x3
#define _RB6PPS_RB6PPS3_SIZE                                0x1
#define _RB6PPS_RB6PPS3_LENGTH                              0x1
#define _RB6PPS_RB6PPS3_MASK                                0x8
#define _RB6PPS_RB6PPS4_POSN                                0x4
#define _RB6PPS_RB6PPS4_POSITION                            0x4
#define _RB6PPS_RB6PPS4_SIZE                                0x1
#define _RB6PPS_RB6PPS4_LENGTH                              0x1
#define _RB6PPS_RB6PPS4_MASK                                0x10

// Register: RB7PPS
#define RB7PPS RB7PPS
extern volatile unsigned char           RB7PPS              __at(0xEF6);
#ifndef _LIB_BUILD
asm("RB7PPS equ 0EF6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RB7PPS0                :1;
        unsigned RB7PPS1                :1;
        unsigned RB7PPS2                :1;
        unsigned RB7PPS3                :1;
        unsigned RB7PPS4                :1;
    };
} RB7PPSbits_t;
extern volatile RB7PPSbits_t RB7PPSbits __at(0xEF6);
// bitfield macros
#define _RB7PPS_RB7PPS0_POSN                                0x0
#define _RB7PPS_RB7PPS0_POSITION                            0x0
#define _RB7PPS_RB7PPS0_SIZE                                0x1
#define _RB7PPS_RB7PPS0_LENGTH                              0x1
#define _RB7PPS_RB7PPS0_MASK                                0x1
#define _RB7PPS_RB7PPS1_POSN                                0x1
#define _RB7PPS_RB7PPS1_POSITION                            0x1
#define _RB7PPS_RB7PPS1_SIZE                                0x1
#define _RB7PPS_RB7PPS1_LENGTH                              0x1
#define _RB7PPS_RB7PPS1_MASK                                0x2
#define _RB7PPS_RB7PPS2_POSN                                0x2
#define _RB7PPS_RB7PPS2_POSITION                            0x2
#define _RB7PPS_RB7PPS2_SIZE                                0x1
#define _RB7PPS_RB7PPS2_LENGTH                              0x1
#define _RB7PPS_RB7PPS2_MASK                                0x4
#define _RB7PPS_RB7PPS3_POSN                                0x3
#define _RB7PPS_RB7PPS3_POSITION                            0x3
#define _RB7PPS_RB7PPS3_SIZE                                0x1
#define _RB7PPS_RB7PPS3_LENGTH                              0x1
#define _RB7PPS_RB7PPS3_MASK                                0x8
#define _RB7PPS_RB7PPS4_POSN                                0x4
#define _RB7PPS_RB7PPS4_POSITION                            0x4
#define _RB7PPS_RB7PPS4_SIZE                                0x1
#define _RB7PPS_RB7PPS4_LENGTH                              0x1
#define _RB7PPS_RB7PPS4_MASK                                0x10

// Register: RC0PPS
#define RC0PPS RC0PPS
extern volatile unsigned char           RC0PPS              __at(0xEF7);
#ifndef _LIB_BUILD
asm("RC0PPS equ 0EF7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC0PPS0                :1;
        unsigned RC0PPS1                :1;
        unsigned RC0PPS2                :1;
        unsigned RC0PPS3                :1;
        unsigned RC0PPS4                :1;
    };
} RC0PPSbits_t;
extern volatile RC0PPSbits_t RC0PPSbits __at(0xEF7);
// bitfield macros
#define _RC0PPS_RC0PPS0_POSN                                0x0
#define _RC0PPS_RC0PPS0_POSITION                            0x0
#define _RC0PPS_RC0PPS0_SIZE                                0x1
#define _RC0PPS_RC0PPS0_LENGTH                              0x1
#define _RC0PPS_RC0PPS0_MASK                                0x1
#define _RC0PPS_RC0PPS1_POSN                                0x1
#define _RC0PPS_RC0PPS1_POSITION                            0x1
#define _RC0PPS_RC0PPS1_SIZE                                0x1
#define _RC0PPS_RC0PPS1_LENGTH                              0x1
#define _RC0PPS_RC0PPS1_MASK                                0x2
#define _RC0PPS_RC0PPS2_POSN                                0x2
#define _RC0PPS_RC0PPS2_POSITION                            0x2
#define _RC0PPS_RC0PPS2_SIZE                                0x1
#define _RC0PPS_RC0PPS2_LENGTH                              0x1
#define _RC0PPS_RC0PPS2_MASK                                0x4
#define _RC0PPS_RC0PPS3_POSN                                0x3
#define _RC0PPS_RC0PPS3_POSITION                            0x3
#define _RC0PPS_RC0PPS3_SIZE                                0x1
#define _RC0PPS_RC0PPS3_LENGTH                              0x1
#define _RC0PPS_RC0PPS3_MASK                                0x8
#define _RC0PPS_RC0PPS4_POSN                                0x4
#define _RC0PPS_RC0PPS4_POSITION                            0x4
#define _RC0PPS_RC0PPS4_SIZE                                0x1
#define _RC0PPS_RC0PPS4_LENGTH                              0x1
#define _RC0PPS_RC0PPS4_MASK                                0x10

// Register: RC1PPS
#define RC1PPS RC1PPS
extern volatile unsigned char           RC1PPS              __at(0xEF8);
#ifndef _LIB_BUILD
asm("RC1PPS equ 0EF8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC1PPS0                :1;
        unsigned RC1PPS1                :1;
        unsigned RC1PPS2                :1;
        unsigned RC1PPS3                :1;
        unsigned RC1PPS4                :1;
    };
} RC1PPSbits_t;
extern volatile RC1PPSbits_t RC1PPSbits __at(0xEF8);
// bitfield macros
#define _RC1PPS_RC1PPS0_POSN                                0x0
#define _RC1PPS_RC1PPS0_POSITION                            0x0
#define _RC1PPS_RC1PPS0_SIZE                                0x1
#define _RC1PPS_RC1PPS0_LENGTH                              0x1
#define _RC1PPS_RC1PPS0_MASK                                0x1
#define _RC1PPS_RC1PPS1_POSN                                0x1
#define _RC1PPS_RC1PPS1_POSITION                            0x1
#define _RC1PPS_RC1PPS1_SIZE                                0x1
#define _RC1PPS_RC1PPS1_LENGTH                              0x1
#define _RC1PPS_RC1PPS1_MASK                                0x2
#define _RC1PPS_RC1PPS2_POSN                                0x2
#define _RC1PPS_RC1PPS2_POSITION                            0x2
#define _RC1PPS_RC1PPS2_SIZE                                0x1
#define _RC1PPS_RC1PPS2_LENGTH                              0x1
#define _RC1PPS_RC1PPS2_MASK                                0x4
#define _RC1PPS_RC1PPS3_POSN                                0x3
#define _RC1PPS_RC1PPS3_POSITION                            0x3
#define _RC1PPS_RC1PPS3_SIZE                                0x1
#define _RC1PPS_RC1PPS3_LENGTH                              0x1
#define _RC1PPS_RC1PPS3_MASK                                0x8
#define _RC1PPS_RC1PPS4_POSN                                0x4
#define _RC1PPS_RC1PPS4_POSITION                            0x4
#define _RC1PPS_RC1PPS4_SIZE                                0x1
#define _RC1PPS_RC1PPS4_LENGTH                              0x1
#define _RC1PPS_RC1PPS4_MASK                                0x10

// Register: RC2PPS
#define RC2PPS RC2PPS
extern volatile unsigned char           RC2PPS              __at(0xEF9);
#ifndef _LIB_BUILD
asm("RC2PPS equ 0EF9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC2PPS0                :1;
        unsigned RC2PPS1                :1;
        unsigned RC2PPS2                :1;
        unsigned RC2PPS3                :1;
        unsigned RC2PPS4                :1;
    };
} RC2PPSbits_t;
extern volatile RC2PPSbits_t RC2PPSbits __at(0xEF9);
// bitfield macros
#define _RC2PPS_RC2PPS0_POSN                                0x0
#define _RC2PPS_RC2PPS0_POSITION                            0x0
#define _RC2PPS_RC2PPS0_SIZE                                0x1
#define _RC2PPS_RC2PPS0_LENGTH                              0x1
#define _RC2PPS_RC2PPS0_MASK                                0x1
#define _RC2PPS_RC2PPS1_POSN                                0x1
#define _RC2PPS_RC2PPS1_POSITION                            0x1
#define _RC2PPS_RC2PPS1_SIZE                                0x1
#define _RC2PPS_RC2PPS1_LENGTH                              0x1
#define _RC2PPS_RC2PPS1_MASK                                0x2
#define _RC2PPS_RC2PPS2_POSN                                0x2
#define _RC2PPS_RC2PPS2_POSITION                            0x2
#define _RC2PPS_RC2PPS2_SIZE                                0x1
#define _RC2PPS_RC2PPS2_LENGTH                              0x1
#define _RC2PPS_RC2PPS2_MASK                                0x4
#define _RC2PPS_RC2PPS3_POSN                                0x3
#define _RC2PPS_RC2PPS3_POSITION                            0x3
#define _RC2PPS_RC2PPS3_SIZE                                0x1
#define _RC2PPS_RC2PPS3_LENGTH                              0x1
#define _RC2PPS_RC2PPS3_MASK                                0x8
#define _RC2PPS_RC2PPS4_POSN                                0x4
#define _RC2PPS_RC2PPS4_POSITION                            0x4
#define _RC2PPS_RC2PPS4_SIZE                                0x1
#define _RC2PPS_RC2PPS4_LENGTH                              0x1
#define _RC2PPS_RC2PPS4_MASK                                0x10

// Register: RC3PPS
#define RC3PPS RC3PPS
extern volatile unsigned char           RC3PPS              __at(0xEFA);
#ifndef _LIB_BUILD
asm("RC3PPS equ 0EFAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC3PPS0                :1;
        unsigned RC3PPS1                :1;
        unsigned RC3PPS2                :1;
        unsigned RC3PPS3                :1;
        unsigned RC3PPS4                :1;
    };
} RC3PPSbits_t;
extern volatile RC3PPSbits_t RC3PPSbits __at(0xEFA);
// bitfield macros
#define _RC3PPS_RC3PPS0_POSN                                0x0
#define _RC3PPS_RC3PPS0_POSITION                            0x0
#define _RC3PPS_RC3PPS0_SIZE                                0x1
#define _RC3PPS_RC3PPS0_LENGTH                              0x1
#define _RC3PPS_RC3PPS0_MASK                                0x1
#define _RC3PPS_RC3PPS1_POSN                                0x1
#define _RC3PPS_RC3PPS1_POSITION                            0x1
#define _RC3PPS_RC3PPS1_SIZE                                0x1
#define _RC3PPS_RC3PPS1_LENGTH                              0x1
#define _RC3PPS_RC3PPS1_MASK                                0x2
#define _RC3PPS_RC3PPS2_POSN                                0x2
#define _RC3PPS_RC3PPS2_POSITION                            0x2
#define _RC3PPS_RC3PPS2_SIZE                                0x1
#define _RC3PPS_RC3PPS2_LENGTH                              0x1
#define _RC3PPS_RC3PPS2_MASK                                0x4
#define _RC3PPS_RC3PPS3_POSN                                0x3
#define _RC3PPS_RC3PPS3_POSITION                            0x3
#define _RC3PPS_RC3PPS3_SIZE                                0x1
#define _RC3PPS_RC3PPS3_LENGTH                              0x1
#define _RC3PPS_RC3PPS3_MASK                                0x8
#define _RC3PPS_RC3PPS4_POSN                                0x4
#define _RC3PPS_RC3PPS4_POSITION                            0x4
#define _RC3PPS_RC3PPS4_SIZE                                0x1
#define _RC3PPS_RC3PPS4_LENGTH                              0x1
#define _RC3PPS_RC3PPS4_MASK                                0x10

// Register: RC4PPS
#define RC4PPS RC4PPS
extern volatile unsigned char           RC4PPS              __at(0xEFB);
#ifndef _LIB_BUILD
asm("RC4PPS equ 0EFBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC4PPS0                :1;
        unsigned RC4PPS1                :1;
        unsigned RC4PPS2                :1;
        unsigned RC4PPS3                :1;
        unsigned RC4PPS4                :1;
    };
} RC4PPSbits_t;
extern volatile RC4PPSbits_t RC4PPSbits __at(0xEFB);
// bitfield macros
#define _RC4PPS_RC4PPS0_POSN                                0x0
#define _RC4PPS_RC4PPS0_POSITION                            0x0
#define _RC4PPS_RC4PPS0_SIZE                                0x1
#define _RC4PPS_RC4PPS0_LENGTH                              0x1
#define _RC4PPS_RC4PPS0_MASK                                0x1
#define _RC4PPS_RC4PPS1_POSN                                0x1
#define _RC4PPS_RC4PPS1_POSITION                            0x1
#define _RC4PPS_RC4PPS1_SIZE                                0x1
#define _RC4PPS_RC4PPS1_LENGTH                              0x1
#define _RC4PPS_RC4PPS1_MASK                                0x2
#define _RC4PPS_RC4PPS2_POSN                                0x2
#define _RC4PPS_RC4PPS2_POSITION                            0x2
#define _RC4PPS_RC4PPS2_SIZE                                0x1
#define _RC4PPS_RC4PPS2_LENGTH                              0x1
#define _RC4PPS_RC4PPS2_MASK                                0x4
#define _RC4PPS_RC4PPS3_POSN                                0x3
#define _RC4PPS_RC4PPS3_POSITION                            0x3
#define _RC4PPS_RC4PPS3_SIZE                                0x1
#define _RC4PPS_RC4PPS3_LENGTH                              0x1
#define _RC4PPS_RC4PPS3_MASK                                0x8
#define _RC4PPS_RC4PPS4_POSN                                0x4
#define _RC4PPS_RC4PPS4_POSITION                            0x4
#define _RC4PPS_RC4PPS4_SIZE                                0x1
#define _RC4PPS_RC4PPS4_LENGTH                              0x1
#define _RC4PPS_RC4PPS4_MASK                                0x10

// Register: RC5PPS
#define RC5PPS RC5PPS
extern volatile unsigned char           RC5PPS              __at(0xEFC);
#ifndef _LIB_BUILD
asm("RC5PPS equ 0EFCh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC5PPS0                :1;
        unsigned RC5PPS1                :1;
        unsigned RC5PPS2                :1;
        unsigned RC5PPS3                :1;
        unsigned RC5PPS4                :1;
    };
} RC5PPSbits_t;
extern volatile RC5PPSbits_t RC5PPSbits __at(0xEFC);
// bitfield macros
#define _RC5PPS_RC5PPS0_POSN                                0x0
#define _RC5PPS_RC5PPS0_POSITION                            0x0
#define _RC5PPS_RC5PPS0_SIZE                                0x1
#define _RC5PPS_RC5PPS0_LENGTH                              0x1
#define _RC5PPS_RC5PPS0_MASK                                0x1
#define _RC5PPS_RC5PPS1_POSN                                0x1
#define _RC5PPS_RC5PPS1_POSITION                            0x1
#define _RC5PPS_RC5PPS1_SIZE                                0x1
#define _RC5PPS_RC5PPS1_LENGTH                              0x1
#define _RC5PPS_RC5PPS1_MASK                                0x2
#define _RC5PPS_RC5PPS2_POSN                                0x2
#define _RC5PPS_RC5PPS2_POSITION                            0x2
#define _RC5PPS_RC5PPS2_SIZE                                0x1
#define _RC5PPS_RC5PPS2_LENGTH                              0x1
#define _RC5PPS_RC5PPS2_MASK                                0x4
#define _RC5PPS_RC5PPS3_POSN                                0x3
#define _RC5PPS_RC5PPS3_POSITION                            0x3
#define _RC5PPS_RC5PPS3_SIZE                                0x1
#define _RC5PPS_RC5PPS3_LENGTH                              0x1
#define _RC5PPS_RC5PPS3_MASK                                0x8
#define _RC5PPS_RC5PPS4_POSN                                0x4
#define _RC5PPS_RC5PPS4_POSITION                            0x4
#define _RC5PPS_RC5PPS4_SIZE                                0x1
#define _RC5PPS_RC5PPS4_LENGTH                              0x1
#define _RC5PPS_RC5PPS4_MASK                                0x10

// Register: RC6PPS
#define RC6PPS RC6PPS
extern volatile unsigned char           RC6PPS              __at(0xEFD);
#ifndef _LIB_BUILD
asm("RC6PPS equ 0EFDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC6PPS0                :1;
        unsigned RC6PPS1                :1;
        unsigned RC6PPS2                :1;
        unsigned RC6PPS3                :1;
        unsigned RC6PPS4                :1;
    };
} RC6PPSbits_t;
extern volatile RC6PPSbits_t RC6PPSbits __at(0xEFD);
// bitfield macros
#define _RC6PPS_RC6PPS0_POSN                                0x0
#define _RC6PPS_RC6PPS0_POSITION                            0x0
#define _RC6PPS_RC6PPS0_SIZE                                0x1
#define _RC6PPS_RC6PPS0_LENGTH                              0x1
#define _RC6PPS_RC6PPS0_MASK                                0x1
#define _RC6PPS_RC6PPS1_POSN                                0x1
#define _RC6PPS_RC6PPS1_POSITION                            0x1
#define _RC6PPS_RC6PPS1_SIZE                                0x1
#define _RC6PPS_RC6PPS1_LENGTH                              0x1
#define _RC6PPS_RC6PPS1_MASK                                0x2
#define _RC6PPS_RC6PPS2_POSN                                0x2
#define _RC6PPS_RC6PPS2_POSITION                            0x2
#define _RC6PPS_RC6PPS2_SIZE                                0x1
#define _RC6PPS_RC6PPS2_LENGTH                              0x1
#define _RC6PPS_RC6PPS2_MASK                                0x4
#define _RC6PPS_RC6PPS3_POSN                                0x3
#define _RC6PPS_RC6PPS3_POSITION                            0x3
#define _RC6PPS_RC6PPS3_SIZE                                0x1
#define _RC6PPS_RC6PPS3_LENGTH                              0x1
#define _RC6PPS_RC6PPS3_MASK                                0x8
#define _RC6PPS_RC6PPS4_POSN                                0x4
#define _RC6PPS_RC6PPS4_POSITION                            0x4
#define _RC6PPS_RC6PPS4_SIZE                                0x1
#define _RC6PPS_RC6PPS4_LENGTH                              0x1
#define _RC6PPS_RC6PPS4_MASK                                0x10

// Register: RC7PPS
#define RC7PPS RC7PPS
extern volatile unsigned char           RC7PPS              __at(0xEFE);
#ifndef _LIB_BUILD
asm("RC7PPS equ 0EFEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC7PPS0                :1;
        unsigned RC7PPS1                :1;
        unsigned RC7PPS2                :1;
        unsigned RC7PPS3                :1;
        unsigned RC7PPS4                :1;
    };
} RC7PPSbits_t;
extern volatile RC7PPSbits_t RC7PPSbits __at(0xEFE);
// bitfield macros
#define _RC7PPS_RC7PPS0_POSN                                0x0
#define _RC7PPS_RC7PPS0_POSITION                            0x0
#define _RC7PPS_RC7PPS0_SIZE                                0x1
#define _RC7PPS_RC7PPS0_LENGTH                              0x1
#define _RC7PPS_RC7PPS0_MASK                                0x1
#define _RC7PPS_RC7PPS1_POSN                                0x1
#define _RC7PPS_RC7PPS1_POSITION                            0x1
#define _RC7PPS_RC7PPS1_SIZE                                0x1
#define _RC7PPS_RC7PPS1_LENGTH                              0x1
#define _RC7PPS_RC7PPS1_MASK                                0x2
#define _RC7PPS_RC7PPS2_POSN                                0x2
#define _RC7PPS_RC7PPS2_POSITION                            0x2
#define _RC7PPS_RC7PPS2_SIZE                                0x1
#define _RC7PPS_RC7PPS2_LENGTH                              0x1
#define _RC7PPS_RC7PPS2_MASK                                0x4
#define _RC7PPS_RC7PPS3_POSN                                0x3
#define _RC7PPS_RC7PPS3_POSITION                            0x3
#define _RC7PPS_RC7PPS3_SIZE                                0x1
#define _RC7PPS_RC7PPS3_LENGTH                              0x1
#define _RC7PPS_RC7PPS3_MASK                                0x8
#define _RC7PPS_RC7PPS4_POSN                                0x4
#define _RC7PPS_RC7PPS4_POSITION                            0x4
#define _RC7PPS_RC7PPS4_SIZE                                0x1
#define _RC7PPS_RC7PPS4_LENGTH                              0x1
#define _RC7PPS_RC7PPS4_MASK                                0x10

// Register: IOCAF
#define IOCAF IOCAF
extern volatile unsigned char           IOCAF               __at(0xF0A);
#ifndef _LIB_BUILD
asm("IOCAF equ 0F0Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCAF0                 :1;
        unsigned IOCAF1                 :1;
        unsigned IOCAF2                 :1;
        unsigned IOCAF3                 :1;
        unsigned IOCAF4                 :1;
        unsigned IOCAF5                 :1;
        unsigned IOCAF6                 :1;
        unsigned IOCAF7                 :1;
    };
} IOCAFbits_t;
extern volatile IOCAFbits_t IOCAFbits __at(0xF0A);
// bitfield macros
#define _IOCAF_IOCAF0_POSN                                  0x0
#define _IOCAF_IOCAF0_POSITION                              0x0
#define _IOCAF_IOCAF0_SIZE                                  0x1
#define _IOCAF_IOCAF0_LENGTH                                0x1
#define _IOCAF_IOCAF0_MASK                                  0x1
#define _IOCAF_IOCAF1_POSN                                  0x1
#define _IOCAF_IOCAF1_POSITION                              0x1
#define _IOCAF_IOCAF1_SIZE                                  0x1
#define _IOCAF_IOCAF1_LENGTH                                0x1
#define _IOCAF_IOCAF1_MASK                                  0x2
#define _IOCAF_IOCAF2_POSN                                  0x2
#define _IOCAF_IOCAF2_POSITION                              0x2
#define _IOCAF_IOCAF2_SIZE                                  0x1
#define _IOCAF_IOCAF2_LENGTH                                0x1
#define _IOCAF_IOCAF2_MASK                                  0x4
#define _IOCAF_IOCAF3_POSN                                  0x3
#define _IOCAF_IOCAF3_POSITION                              0x3
#define _IOCAF_IOCAF3_SIZE                                  0x1
#define _IOCAF_IOCAF3_LENGTH                                0x1
#define _IOCAF_IOCAF3_MASK                                  0x8
#define _IOCAF_IOCAF4_POSN                                  0x4
#define _IOCAF_IOCAF4_POSITION                              0x4
#define _IOCAF_IOCAF4_SIZE                                  0x1
#define _IOCAF_IOCAF4_LENGTH                                0x1
#define _IOCAF_IOCAF4_MASK                                  0x10
#define _IOCAF_IOCAF5_POSN                                  0x5
#define _IOCAF_IOCAF5_POSITION                              0x5
#define _IOCAF_IOCAF5_SIZE                                  0x1
#define _IOCAF_IOCAF5_LENGTH                                0x1
#define _IOCAF_IOCAF5_MASK                                  0x20
#define _IOCAF_IOCAF6_POSN                                  0x6
#define _IOCAF_IOCAF6_POSITION                              0x6
#define _IOCAF_IOCAF6_SIZE                                  0x1
#define _IOCAF_IOCAF6_LENGTH                                0x1
#define _IOCAF_IOCAF6_MASK                                  0x40
#define _IOCAF_IOCAF7_POSN                                  0x7
#define _IOCAF_IOCAF7_POSITION                              0x7
#define _IOCAF_IOCAF7_SIZE                                  0x1
#define _IOCAF_IOCAF7_LENGTH                                0x1
#define _IOCAF_IOCAF7_MASK                                  0x80

// Register: IOCAN
#define IOCAN IOCAN
extern volatile unsigned char           IOCAN               __at(0xF0B);
#ifndef _LIB_BUILD
asm("IOCAN equ 0F0Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCAN0                 :1;
        unsigned IOCAN1                 :1;
        unsigned IOCAN2                 :1;
        unsigned IOCAN3                 :1;
        unsigned IOCAN4                 :1;
        unsigned IOCAN5                 :1;
        unsigned IOCAN6                 :1;
        unsigned IOCAN7                 :1;
    };
} IOCANbits_t;
extern volatile IOCANbits_t IOCANbits __at(0xF0B);
// bitfield macros
#define _IOCAN_IOCAN0_POSN                                  0x0
#define _IOCAN_IOCAN0_POSITION                              0x0
#define _IOCAN_IOCAN0_SIZE                                  0x1
#define _IOCAN_IOCAN0_LENGTH                                0x1
#define _IOCAN_IOCAN0_MASK                                  0x1
#define _IOCAN_IOCAN1_POSN                                  0x1
#define _IOCAN_IOCAN1_POSITION                              0x1
#define _IOCAN_IOCAN1_SIZE                                  0x1
#define _IOCAN_IOCAN1_LENGTH                                0x1
#define _IOCAN_IOCAN1_MASK                                  0x2
#define _IOCAN_IOCAN2_POSN                                  0x2
#define _IOCAN_IOCAN2_POSITION                              0x2
#define _IOCAN_IOCAN2_SIZE                                  0x1
#define _IOCAN_IOCAN2_LENGTH                                0x1
#define _IOCAN_IOCAN2_MASK                                  0x4
#define _IOCAN_IOCAN3_POSN                                  0x3
#define _IOCAN_IOCAN3_POSITION                              0x3
#define _IOCAN_IOCAN3_SIZE                                  0x1
#define _IOCAN_IOCAN3_LENGTH                                0x1
#define _IOCAN_IOCAN3_MASK                                  0x8
#define _IOCAN_IOCAN4_POSN                                  0x4
#define _IOCAN_IOCAN4_POSITION                              0x4
#define _IOCAN_IOCAN4_SIZE                                  0x1
#define _IOCAN_IOCAN4_LENGTH                                0x1
#define _IOCAN_IOCAN4_MASK                                  0x10
#define _IOCAN_IOCAN5_POSN                                  0x5
#define _IOCAN_IOCAN5_POSITION                              0x5
#define _IOCAN_IOCAN5_SIZE                                  0x1
#define _IOCAN_IOCAN5_LENGTH                                0x1
#define _IOCAN_IOCAN5_MASK                                  0x20
#define _IOCAN_IOCAN6_POSN                                  0x6
#define _IOCAN_IOCAN6_POSITION                              0x6
#define _IOCAN_IOCAN6_SIZE                                  0x1
#define _IOCAN_IOCAN6_LENGTH                                0x1
#define _IOCAN_IOCAN6_MASK                                  0x40
#define _IOCAN_IOCAN7_POSN                                  0x7
#define _IOCAN_IOCAN7_POSITION                              0x7
#define _IOCAN_IOCAN7_SIZE                                  0x1
#define _IOCAN_IOCAN7_LENGTH                                0x1
#define _IOCAN_IOCAN7_MASK                                  0x80

// Register: IOCAP
#define IOCAP IOCAP
extern volatile unsigned char           IOCAP               __at(0xF0C);
#ifndef _LIB_BUILD
asm("IOCAP equ 0F0Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCAP0                 :1;
        unsigned IOCAP1                 :1;
        unsigned IOCAP2                 :1;
        unsigned IOCAP3                 :1;
        unsigned IOCAP4                 :1;
        unsigned IOCAP5                 :1;
        unsigned IOCAP6                 :1;
        unsigned IOCAP7                 :1;
    };
} IOCAPbits_t;
extern volatile IOCAPbits_t IOCAPbits __at(0xF0C);
// bitfield macros
#define _IOCAP_IOCAP0_POSN                                  0x0
#define _IOCAP_IOCAP0_POSITION                              0x0
#define _IOCAP_IOCAP0_SIZE                                  0x1
#define _IOCAP_IOCAP0_LENGTH                                0x1
#define _IOCAP_IOCAP0_MASK                                  0x1
#define _IOCAP_IOCAP1_POSN                                  0x1
#define _IOCAP_IOCAP1_POSITION                              0x1
#define _IOCAP_IOCAP1_SIZE                                  0x1
#define _IOCAP_IOCAP1_LENGTH                                0x1
#define _IOCAP_IOCAP1_MASK                                  0x2
#define _IOCAP_IOCAP2_POSN                                  0x2
#define _IOCAP_IOCAP2_POSITION                              0x2
#define _IOCAP_IOCAP2_SIZE                                  0x1
#define _IOCAP_IOCAP2_LENGTH                                0x1
#define _IOCAP_IOCAP2_MASK                                  0x4
#define _IOCAP_IOCAP3_POSN                                  0x3
#define _IOCAP_IOCAP3_POSITION                              0x3
#define _IOCAP_IOCAP3_SIZE                                  0x1
#define _IOCAP_IOCAP3_LENGTH                                0x1
#define _IOCAP_IOCAP3_MASK                                  0x8
#define _IOCAP_IOCAP4_POSN                                  0x4
#define _IOCAP_IOCAP4_POSITION                              0x4
#define _IOCAP_IOCAP4_SIZE                                  0x1
#define _IOCAP_IOCAP4_LENGTH                                0x1
#define _IOCAP_IOCAP4_MASK                                  0x10
#define _IOCAP_IOCAP5_POSN                                  0x5
#define _IOCAP_IOCAP5_POSITION                              0x5
#define _IOCAP_IOCAP5_SIZE                                  0x1
#define _IOCAP_IOCAP5_LENGTH                                0x1
#define _IOCAP_IOCAP5_MASK                                  0x20
#define _IOCAP_IOCAP6_POSN                                  0x6
#define _IOCAP_IOCAP6_POSITION                              0x6
#define _IOCAP_IOCAP6_SIZE                                  0x1
#define _IOCAP_IOCAP6_LENGTH                                0x1
#define _IOCAP_IOCAP6_MASK                                  0x40
#define _IOCAP_IOCAP7_POSN                                  0x7
#define _IOCAP_IOCAP7_POSITION                              0x7
#define _IOCAP_IOCAP7_SIZE                                  0x1
#define _IOCAP_IOCAP7_LENGTH                                0x1
#define _IOCAP_IOCAP7_MASK                                  0x80

// Register: INLVLA
#define INLVLA INLVLA
extern volatile unsigned char           INLVLA              __at(0xF0D);
#ifndef _LIB_BUILD
asm("INLVLA equ 0F0Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INLVLA0                :1;
        unsigned INLVLA1                :1;
        unsigned INLVLA2                :1;
        unsigned INLVLA3                :1;
        unsigned INLVLA4                :1;
        unsigned INLVLA5                :1;
        unsigned INLVLA6                :1;
        unsigned INLVLA7                :1;
    };
} INLVLAbits_t;
extern volatile INLVLAbits_t INLVLAbits __at(0xF0D);
// bitfield macros
#define _INLVLA_INLVLA0_POSN                                0x0
#define _INLVLA_INLVLA0_POSITION                            0x0
#define _INLVLA_INLVLA0_SIZE                                0x1
#define _INLVLA_INLVLA0_LENGTH                              0x1
#define _INLVLA_INLVLA0_MASK                                0x1
#define _INLVLA_INLVLA1_POSN                                0x1
#define _INLVLA_INLVLA1_POSITION                            0x1
#define _INLVLA_INLVLA1_SIZE                                0x1
#define _INLVLA_INLVLA1_LENGTH                              0x1
#define _INLVLA_INLVLA1_MASK                                0x2
#define _INLVLA_INLVLA2_POSN                                0x2
#define _INLVLA_INLVLA2_POSITION                            0x2
#define _INLVLA_INLVLA2_SIZE                                0x1
#define _INLVLA_INLVLA2_LENGTH                              0x1
#define _INLVLA_INLVLA2_MASK                                0x4
#define _INLVLA_INLVLA3_POSN                                0x3
#define _INLVLA_INLVLA3_POSITION                            0x3
#define _INLVLA_INLVLA3_SIZE                                0x1
#define _INLVLA_INLVLA3_LENGTH                              0x1
#define _INLVLA_INLVLA3_MASK                                0x8
#define _INLVLA_INLVLA4_POSN                                0x4
#define _INLVLA_INLVLA4_POSITION                            0x4
#define _INLVLA_INLVLA4_SIZE                                0x1
#define _INLVLA_INLVLA4_LENGTH                              0x1
#define _INLVLA_INLVLA4_MASK                                0x10
#define _INLVLA_INLVLA5_POSN                                0x5
#define _INLVLA_INLVLA5_POSITION                            0x5
#define _INLVLA_INLVLA5_SIZE                                0x1
#define _INLVLA_INLVLA5_LENGTH                              0x1
#define _INLVLA_INLVLA5_MASK                                0x20
#define _INLVLA_INLVLA6_POSN                                0x6
#define _INLVLA_INLVLA6_POSITION                            0x6
#define _INLVLA_INLVLA6_SIZE                                0x1
#define _INLVLA_INLVLA6_LENGTH                              0x1
#define _INLVLA_INLVLA6_MASK                                0x40
#define _INLVLA_INLVLA7_POSN                                0x7
#define _INLVLA_INLVLA7_POSITION                            0x7
#define _INLVLA_INLVLA7_SIZE                                0x1
#define _INLVLA_INLVLA7_LENGTH                              0x1
#define _INLVLA_INLVLA7_MASK                                0x80

// Register: SLRCONA
#define SLRCONA SLRCONA
extern volatile unsigned char           SLRCONA             __at(0xF0E);
#ifndef _LIB_BUILD
asm("SLRCONA equ 0F0Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SLRA0                  :1;
        unsigned SLRA1                  :1;
        unsigned SLRA2                  :1;
        unsigned SLRA3                  :1;
        unsigned SLRA4                  :1;
        unsigned SLRA5                  :1;
        unsigned SLRA6                  :1;
        unsigned SLRA7                  :1;
    };
} SLRCONAbits_t;
extern volatile SLRCONAbits_t SLRCONAbits __at(0xF0E);
// bitfield macros
#define _SLRCONA_SLRA0_POSN                                 0x0
#define _SLRCONA_SLRA0_POSITION                             0x0
#define _SLRCONA_SLRA0_SIZE                                 0x1
#define _SLRCONA_SLRA0_LENGTH                               0x1
#define _SLRCONA_SLRA0_MASK                                 0x1
#define _SLRCONA_SLRA1_POSN                                 0x1
#define _SLRCONA_SLRA1_POSITION                             0x1
#define _SLRCONA_SLRA1_SIZE                                 0x1
#define _SLRCONA_SLRA1_LENGTH                               0x1
#define _SLRCONA_SLRA1_MASK                                 0x2
#define _SLRCONA_SLRA2_POSN                                 0x2
#define _SLRCONA_SLRA2_POSITION                             0x2
#define _SLRCONA_SLRA2_SIZE                                 0x1
#define _SLRCONA_SLRA2_LENGTH                               0x1
#define _SLRCONA_SLRA2_MASK                                 0x4
#define _SLRCONA_SLRA3_POSN                                 0x3
#define _SLRCONA_SLRA3_POSITION                             0x3
#define _SLRCONA_SLRA3_SIZE                                 0x1
#define _SLRCONA_SLRA3_LENGTH                               0x1
#define _SLRCONA_SLRA3_MASK                                 0x8
#define _SLRCONA_SLRA4_POSN                                 0x4
#define _SLRCONA_SLRA4_POSITION                             0x4
#define _SLRCONA_SLRA4_SIZE                                 0x1
#define _SLRCONA_SLRA4_LENGTH                               0x1
#define _SLRCONA_SLRA4_MASK                                 0x10
#define _SLRCONA_SLRA5_POSN                                 0x5
#define _SLRCONA_SLRA5_POSITION                             0x5
#define _SLRCONA_SLRA5_SIZE                                 0x1
#define _SLRCONA_SLRA5_LENGTH                               0x1
#define _SLRCONA_SLRA5_MASK                                 0x20
#define _SLRCONA_SLRA6_POSN                                 0x6
#define _SLRCONA_SLRA6_POSITION                             0x6
#define _SLRCONA_SLRA6_SIZE                                 0x1
#define _SLRCONA_SLRA6_LENGTH                               0x1
#define _SLRCONA_SLRA6_MASK                                 0x40
#define _SLRCONA_SLRA7_POSN                                 0x7
#define _SLRCONA_SLRA7_POSITION                             0x7
#define _SLRCONA_SLRA7_SIZE                                 0x1
#define _SLRCONA_SLRA7_LENGTH                               0x1
#define _SLRCONA_SLRA7_MASK                                 0x80

// Register: ODCONA
#define ODCONA ODCONA
extern volatile unsigned char           ODCONA              __at(0xF0F);
#ifndef _LIB_BUILD
asm("ODCONA equ 0F0Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ODCA0                  :1;
        unsigned ODCA1                  :1;
        unsigned ODCA2                  :1;
        unsigned ODCA3                  :1;
        unsigned ODCA4                  :1;
        unsigned ODCA5                  :1;
        unsigned ODCA6                  :1;
        unsigned ODCA7                  :1;
    };
} ODCONAbits_t;
extern volatile ODCONAbits_t ODCONAbits __at(0xF0F);
// bitfield macros
#define _ODCONA_ODCA0_POSN                                  0x0
#define _ODCONA_ODCA0_POSITION                              0x0
#define _ODCONA_ODCA0_SIZE                                  0x1
#define _ODCONA_ODCA0_LENGTH                                0x1
#define _ODCONA_ODCA0_MASK                                  0x1
#define _ODCONA_ODCA1_POSN                                  0x1
#define _ODCONA_ODCA1_POSITION                              0x1
#define _ODCONA_ODCA1_SIZE                                  0x1
#define _ODCONA_ODCA1_LENGTH                                0x1
#define _ODCONA_ODCA1_MASK                                  0x2
#define _ODCONA_ODCA2_POSN                                  0x2
#define _ODCONA_ODCA2_POSITION                              0x2
#define _ODCONA_ODCA2_SIZE                                  0x1
#define _ODCONA_ODCA2_LENGTH                                0x1
#define _ODCONA_ODCA2_MASK                                  0x4
#define _ODCONA_ODCA3_POSN                                  0x3
#define _ODCONA_ODCA3_POSITION                              0x3
#define _ODCONA_ODCA3_SIZE                                  0x1
#define _ODCONA_ODCA3_LENGTH                                0x1
#define _ODCONA_ODCA3_MASK                                  0x8
#define _ODCONA_ODCA4_POSN                                  0x4
#define _ODCONA_ODCA4_POSITION                              0x4
#define _ODCONA_ODCA4_SIZE                                  0x1
#define _ODCONA_ODCA4_LENGTH                                0x1
#define _ODCONA_ODCA4_MASK                                  0x10
#define _ODCONA_ODCA5_POSN                                  0x5
#define _ODCONA_ODCA5_POSITION                              0x5
#define _ODCONA_ODCA5_SIZE                                  0x1
#define _ODCONA_ODCA5_LENGTH                                0x1
#define _ODCONA_ODCA5_MASK                                  0x20
#define _ODCONA_ODCA6_POSN                                  0x6
#define _ODCONA_ODCA6_POSITION                              0x6
#define _ODCONA_ODCA6_SIZE                                  0x1
#define _ODCONA_ODCA6_LENGTH                                0x1
#define _ODCONA_ODCA6_MASK                                  0x40
#define _ODCONA_ODCA7_POSN                                  0x7
#define _ODCONA_ODCA7_POSITION                              0x7
#define _ODCONA_ODCA7_SIZE                                  0x1
#define _ODCONA_ODCA7_LENGTH                                0x1
#define _ODCONA_ODCA7_MASK                                  0x80

// Register: WPUA
#define WPUA WPUA
extern volatile unsigned char           WPUA                __at(0xF10);
#ifndef _LIB_BUILD
asm("WPUA equ 0F10h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WPUA0                  :1;
        unsigned WPUA1                  :1;
        unsigned WPUA2                  :1;
        unsigned WPUA3                  :1;
        unsigned WPUA4                  :1;
        unsigned WPUA5                  :1;
        unsigned WPUA6                  :1;
        unsigned WPUA7                  :1;
    };
} WPUAbits_t;
extern volatile WPUAbits_t WPUAbits __at(0xF10);
// bitfield macros
#define _WPUA_WPUA0_POSN                                    0x0
#define _WPUA_WPUA0_POSITION                                0x0
#define _WPUA_WPUA0_SIZE                                    0x1
#define _WPUA_WPUA0_LENGTH                                  0x1
#define _WPUA_WPUA0_MASK                                    0x1
#define _WPUA_WPUA1_POSN                                    0x1
#define _WPUA_WPUA1_POSITION                                0x1
#define _WPUA_WPUA1_SIZE                                    0x1
#define _WPUA_WPUA1_LENGTH                                  0x1
#define _WPUA_WPUA1_MASK                                    0x2
#define _WPUA_WPUA2_POSN                                    0x2
#define _WPUA_WPUA2_POSITION                                0x2
#define _WPUA_WPUA2_SIZE                                    0x1
#define _WPUA_WPUA2_LENGTH                                  0x1
#define _WPUA_WPUA2_MASK                                    0x4
#define _WPUA_WPUA3_POSN                                    0x3
#define _WPUA_WPUA3_POSITION                                0x3
#define _WPUA_WPUA3_SIZE                                    0x1
#define _WPUA_WPUA3_LENGTH                                  0x1
#define _WPUA_WPUA3_MASK                                    0x8
#define _WPUA_WPUA4_POSN                                    0x4
#define _WPUA_WPUA4_POSITION                                0x4
#define _WPUA_WPUA4_SIZE                                    0x1
#define _WPUA_WPUA4_LENGTH                                  0x1
#define _WPUA_WPUA4_MASK                                    0x10
#define _WPUA_WPUA5_POSN                                    0x5
#define _WPUA_WPUA5_POSITION                                0x5
#define _WPUA_WPUA5_SIZE                                    0x1
#define _WPUA_WPUA5_LENGTH                                  0x1
#define _WPUA_WPUA5_MASK                                    0x20
#define _WPUA_WPUA6_POSN                                    0x6
#define _WPUA_WPUA6_POSITION                                0x6
#define _WPUA_WPUA6_SIZE                                    0x1
#define _WPUA_WPUA6_LENGTH                                  0x1
#define _WPUA_WPUA6_MASK                                    0x40
#define _WPUA_WPUA7_POSN                                    0x7
#define _WPUA_WPUA7_POSITION                                0x7
#define _WPUA_WPUA7_SIZE                                    0x1
#define _WPUA_WPUA7_LENGTH                                  0x1
#define _WPUA_WPUA7_MASK                                    0x80

// Register: ANSELA
#define ANSELA ANSELA
extern volatile unsigned char           ANSELA              __at(0xF11);
#ifndef _LIB_BUILD
asm("ANSELA equ 0F11h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ANSELA0                :1;
        unsigned ANSELA1                :1;
        unsigned ANSELA2                :1;
        unsigned ANSELA3                :1;
        unsigned ANSELA4                :1;
        unsigned ANSELA5                :1;
        unsigned ANSELA6                :1;
        unsigned ANSELA7                :1;
    };
} ANSELAbits_t;
extern volatile ANSELAbits_t ANSELAbits __at(0xF11);
// bitfield macros
#define _ANSELA_ANSELA0_POSN                                0x0
#define _ANSELA_ANSELA0_POSITION                            0x0
#define _ANSELA_ANSELA0_SIZE                                0x1
#define _ANSELA_ANSELA0_LENGTH                              0x1
#define _ANSELA_ANSELA0_MASK                                0x1
#define _ANSELA_ANSELA1_POSN                                0x1
#define _ANSELA_ANSELA1_POSITION                            0x1
#define _ANSELA_ANSELA1_SIZE                                0x1
#define _ANSELA_ANSELA1_LENGTH                              0x1
#define _ANSELA_ANSELA1_MASK                                0x2
#define _ANSELA_ANSELA2_POSN                                0x2
#define _ANSELA_ANSELA2_POSITION                            0x2
#define _ANSELA_ANSELA2_SIZE                                0x1
#define _ANSELA_ANSELA2_LENGTH                              0x1
#define _ANSELA_ANSELA2_MASK                                0x4
#define _ANSELA_ANSELA3_POSN                                0x3
#define _ANSELA_ANSELA3_POSITION                            0x3
#define _ANSELA_ANSELA3_SIZE                                0x1
#define _ANSELA_ANSELA3_LENGTH                              0x1
#define _ANSELA_ANSELA3_MASK                                0x8
#define _ANSELA_ANSELA4_POSN                                0x4
#define _ANSELA_ANSELA4_POSITION                            0x4
#define _ANSELA_ANSELA4_SIZE                                0x1
#define _ANSELA_ANSELA4_LENGTH                              0x1
#define _ANSELA_ANSELA4_MASK                                0x10
#define _ANSELA_ANSELA5_POSN                                0x5
#define _ANSELA_ANSELA5_POSITION                            0x5
#define _ANSELA_ANSELA5_SIZE                                0x1
#define _ANSELA_ANSELA5_LENGTH                              0x1
#define _ANSELA_ANSELA5_MASK                                0x20
#define _ANSELA_ANSELA6_POSN                                0x6
#define _ANSELA_ANSELA6_POSITION                            0x6
#define _ANSELA_ANSELA6_SIZE                                0x1
#define _ANSELA_ANSELA6_LENGTH                              0x1
#define _ANSELA_ANSELA6_MASK                                0x40
#define _ANSELA_ANSELA7_POSN                                0x7
#define _ANSELA_ANSELA7_POSITION                            0x7
#define _ANSELA_ANSELA7_SIZE                                0x1
#define _ANSELA_ANSELA7_LENGTH                              0x1
#define _ANSELA_ANSELA7_MASK                                0x80

// Register: IOCBF
#define IOCBF IOCBF
extern volatile unsigned char           IOCBF               __at(0xF12);
#ifndef _LIB_BUILD
asm("IOCBF equ 0F12h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCBF0                 :1;
        unsigned IOCBF1                 :1;
        unsigned IOCBF2                 :1;
        unsigned IOCBF3                 :1;
        unsigned IOCBF4                 :1;
        unsigned IOCBF5                 :1;
        unsigned IOCBF6                 :1;
        unsigned IOCBF7                 :1;
    };
} IOCBFbits_t;
extern volatile IOCBFbits_t IOCBFbits __at(0xF12);
// bitfield macros
#define _IOCBF_IOCBF0_POSN                                  0x0
#define _IOCBF_IOCBF0_POSITION                              0x0
#define _IOCBF_IOCBF0_SIZE                                  0x1
#define _IOCBF_IOCBF0_LENGTH                                0x1
#define _IOCBF_IOCBF0_MASK                                  0x1
#define _IOCBF_IOCBF1_POSN                                  0x1
#define _IOCBF_IOCBF1_POSITION                              0x1
#define _IOCBF_IOCBF1_SIZE                                  0x1
#define _IOCBF_IOCBF1_LENGTH                                0x1
#define _IOCBF_IOCBF1_MASK                                  0x2
#define _IOCBF_IOCBF2_POSN                                  0x2
#define _IOCBF_IOCBF2_POSITION                              0x2
#define _IOCBF_IOCBF2_SIZE                                  0x1
#define _IOCBF_IOCBF2_LENGTH                                0x1
#define _IOCBF_IOCBF2_MASK                                  0x4
#define _IOCBF_IOCBF3_POSN                                  0x3
#define _IOCBF_IOCBF3_POSITION                              0x3
#define _IOCBF_IOCBF3_SIZE                                  0x1
#define _IOCBF_IOCBF3_LENGTH                                0x1
#define _IOCBF_IOCBF3_MASK                                  0x8
#define _IOCBF_IOCBF4_POSN                                  0x4
#define _IOCBF_IOCBF4_POSITION                              0x4
#define _IOCBF_IOCBF4_SIZE                                  0x1
#define _IOCBF_IOCBF4_LENGTH                                0x1
#define _IOCBF_IOCBF4_MASK                                  0x10
#define _IOCBF_IOCBF5_POSN                                  0x5
#define _IOCBF_IOCBF5_POSITION                              0x5
#define _IOCBF_IOCBF5_SIZE                                  0x1
#define _IOCBF_IOCBF5_LENGTH                                0x1
#define _IOCBF_IOCBF5_MASK                                  0x20
#define _IOCBF_IOCBF6_POSN                                  0x6
#define _IOCBF_IOCBF6_POSITION                              0x6
#define _IOCBF_IOCBF6_SIZE                                  0x1
#define _IOCBF_IOCBF6_LENGTH                                0x1
#define _IOCBF_IOCBF6_MASK                                  0x40
#define _IOCBF_IOCBF7_POSN                                  0x7
#define _IOCBF_IOCBF7_POSITION                              0x7
#define _IOCBF_IOCBF7_SIZE                                  0x1
#define _IOCBF_IOCBF7_LENGTH                                0x1
#define _IOCBF_IOCBF7_MASK                                  0x80

// Register: IOCBN
#define IOCBN IOCBN
extern volatile unsigned char           IOCBN               __at(0xF13);
#ifndef _LIB_BUILD
asm("IOCBN equ 0F13h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCBN0                 :1;
        unsigned IOCBN1                 :1;
        unsigned IOCBN2                 :1;
        unsigned IOCBN3                 :1;
        unsigned IOCBN4                 :1;
        unsigned IOCBN5                 :1;
        unsigned IOCBN6                 :1;
        unsigned IOCBN7                 :1;
    };
} IOCBNbits_t;
extern volatile IOCBNbits_t IOCBNbits __at(0xF13);
// bitfield macros
#define _IOCBN_IOCBN0_POSN                                  0x0
#define _IOCBN_IOCBN0_POSITION                              0x0
#define _IOCBN_IOCBN0_SIZE                                  0x1
#define _IOCBN_IOCBN0_LENGTH                                0x1
#define _IOCBN_IOCBN0_MASK                                  0x1
#define _IOCBN_IOCBN1_POSN                                  0x1
#define _IOCBN_IOCBN1_POSITION                              0x1
#define _IOCBN_IOCBN1_SIZE                                  0x1
#define _IOCBN_IOCBN1_LENGTH                                0x1
#define _IOCBN_IOCBN1_MASK                                  0x2
#define _IOCBN_IOCBN2_POSN                                  0x2
#define _IOCBN_IOCBN2_POSITION                              0x2
#define _IOCBN_IOCBN2_SIZE                                  0x1
#define _IOCBN_IOCBN2_LENGTH                                0x1
#define _IOCBN_IOCBN2_MASK                                  0x4
#define _IOCBN_IOCBN3_POSN                                  0x3
#define _IOCBN_IOCBN3_POSITION                              0x3
#define _IOCBN_IOCBN3_SIZE                                  0x1
#define _IOCBN_IOCBN3_LENGTH                                0x1
#define _IOCBN_IOCBN3_MASK                                  0x8
#define _IOCBN_IOCBN4_POSN                                  0x4
#define _IOCBN_IOCBN4_POSITION                              0x4
#define _IOCBN_IOCBN4_SIZE                                  0x1
#define _IOCBN_IOCBN4_LENGTH                                0x1
#define _IOCBN_IOCBN4_MASK                                  0x10
#define _IOCBN_IOCBN5_POSN                                  0x5
#define _IOCBN_IOCBN5_POSITION                              0x5
#define _IOCBN_IOCBN5_SIZE                                  0x1
#define _IOCBN_IOCBN5_LENGTH                                0x1
#define _IOCBN_IOCBN5_MASK                                  0x20
#define _IOCBN_IOCBN6_POSN                                  0x6
#define _IOCBN_IOCBN6_POSITION                              0x6
#define _IOCBN_IOCBN6_SIZE                                  0x1
#define _IOCBN_IOCBN6_LENGTH                                0x1
#define _IOCBN_IOCBN6_MASK                                  0x40
#define _IOCBN_IOCBN7_POSN                                  0x7
#define _IOCBN_IOCBN7_POSITION                              0x7
#define _IOCBN_IOCBN7_SIZE                                  0x1
#define _IOCBN_IOCBN7_LENGTH                                0x1
#define _IOCBN_IOCBN7_MASK                                  0x80

// Register: IOCBP
#define IOCBP IOCBP
extern volatile unsigned char           IOCBP               __at(0xF14);
#ifndef _LIB_BUILD
asm("IOCBP equ 0F14h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCBP0                 :1;
        unsigned IOCBP1                 :1;
        unsigned IOCBP2                 :1;
        unsigned IOCBP3                 :1;
        unsigned IOCBP4                 :1;
        unsigned IOCBP5                 :1;
        unsigned IOCBP6                 :1;
        unsigned IOCBP7                 :1;
    };
} IOCBPbits_t;
extern volatile IOCBPbits_t IOCBPbits __at(0xF14);
// bitfield macros
#define _IOCBP_IOCBP0_POSN                                  0x0
#define _IOCBP_IOCBP0_POSITION                              0x0
#define _IOCBP_IOCBP0_SIZE                                  0x1
#define _IOCBP_IOCBP0_LENGTH                                0x1
#define _IOCBP_IOCBP0_MASK                                  0x1
#define _IOCBP_IOCBP1_POSN                                  0x1
#define _IOCBP_IOCBP1_POSITION                              0x1
#define _IOCBP_IOCBP1_SIZE                                  0x1
#define _IOCBP_IOCBP1_LENGTH                                0x1
#define _IOCBP_IOCBP1_MASK                                  0x2
#define _IOCBP_IOCBP2_POSN                                  0x2
#define _IOCBP_IOCBP2_POSITION                              0x2
#define _IOCBP_IOCBP2_SIZE                                  0x1
#define _IOCBP_IOCBP2_LENGTH                                0x1
#define _IOCBP_IOCBP2_MASK                                  0x4
#define _IOCBP_IOCBP3_POSN                                  0x3
#define _IOCBP_IOCBP3_POSITION                              0x3
#define _IOCBP_IOCBP3_SIZE                                  0x1
#define _IOCBP_IOCBP3_LENGTH                                0x1
#define _IOCBP_IOCBP3_MASK                                  0x8
#define _IOCBP_IOCBP4_POSN                                  0x4
#define _IOCBP_IOCBP4_POSITION                              0x4
#define _IOCBP_IOCBP4_SIZE                                  0x1
#define _IOCBP_IOCBP4_LENGTH                                0x1
#define _IOCBP_IOCBP4_MASK                                  0x10
#define _IOCBP_IOCBP5_POSN                                  0x5
#define _IOCBP_IOCBP5_POSITION                              0x5
#define _IOCBP_IOCBP5_SIZE                                  0x1
#define _IOCBP_IOCBP5_LENGTH                                0x1
#define _IOCBP_IOCBP5_MASK                                  0x20
#define _IOCBP_IOCBP6_POSN                                  0x6
#define _IOCBP_IOCBP6_POSITION                              0x6
#define _IOCBP_IOCBP6_SIZE                                  0x1
#define _IOCBP_IOCBP6_LENGTH                                0x1
#define _IOCBP_IOCBP6_MASK                                  0x40
#define _IOCBP_IOCBP7_POSN                                  0x7
#define _IOCBP_IOCBP7_POSITION                              0x7
#define _IOCBP_IOCBP7_SIZE                                  0x1
#define _IOCBP_IOCBP7_LENGTH                                0x1
#define _IOCBP_IOCBP7_MASK                                  0x80

// Register: INLVLB
#define INLVLB INLVLB
extern volatile unsigned char           INLVLB              __at(0xF15);
#ifndef _LIB_BUILD
asm("INLVLB equ 0F15h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INLVLB0                :1;
        unsigned INLVLB1                :1;
        unsigned INLVLB2                :1;
        unsigned INLVLB3                :1;
        unsigned INLVLB4                :1;
        unsigned INLVLB5                :1;
        unsigned INLVLB6                :1;
        unsigned INLVLB7                :1;
    };
} INLVLBbits_t;
extern volatile INLVLBbits_t INLVLBbits __at(0xF15);
// bitfield macros
#define _INLVLB_INLVLB0_POSN                                0x0
#define _INLVLB_INLVLB0_POSITION                            0x0
#define _INLVLB_INLVLB0_SIZE                                0x1
#define _INLVLB_INLVLB0_LENGTH                              0x1
#define _INLVLB_INLVLB0_MASK                                0x1
#define _INLVLB_INLVLB1_POSN                                0x1
#define _INLVLB_INLVLB1_POSITION                            0x1
#define _INLVLB_INLVLB1_SIZE                                0x1
#define _INLVLB_INLVLB1_LENGTH                              0x1
#define _INLVLB_INLVLB1_MASK                                0x2
#define _INLVLB_INLVLB2_POSN                                0x2
#define _INLVLB_INLVLB2_POSITION                            0x2
#define _INLVLB_INLVLB2_SIZE                                0x1
#define _INLVLB_INLVLB2_LENGTH                              0x1
#define _INLVLB_INLVLB2_MASK                                0x4
#define _INLVLB_INLVLB3_POSN                                0x3
#define _INLVLB_INLVLB3_POSITION                            0x3
#define _INLVLB_INLVLB3_SIZE                                0x1
#define _INLVLB_INLVLB3_LENGTH                              0x1
#define _INLVLB_INLVLB3_MASK                                0x8
#define _INLVLB_INLVLB4_POSN                                0x4
#define _INLVLB_INLVLB4_POSITION                            0x4
#define _INLVLB_INLVLB4_SIZE                                0x1
#define _INLVLB_INLVLB4_LENGTH                              0x1
#define _INLVLB_INLVLB4_MASK                                0x10
#define _INLVLB_INLVLB5_POSN                                0x5
#define _INLVLB_INLVLB5_POSITION                            0x5
#define _INLVLB_INLVLB5_SIZE                                0x1
#define _INLVLB_INLVLB5_LENGTH                              0x1
#define _INLVLB_INLVLB5_MASK                                0x20
#define _INLVLB_INLVLB6_POSN                                0x6
#define _INLVLB_INLVLB6_POSITION                            0x6
#define _INLVLB_INLVLB6_SIZE                                0x1
#define _INLVLB_INLVLB6_LENGTH                              0x1
#define _INLVLB_INLVLB6_MASK                                0x40
#define _INLVLB_INLVLB7_POSN                                0x7
#define _INLVLB_INLVLB7_POSITION                            0x7
#define _INLVLB_INLVLB7_SIZE                                0x1
#define _INLVLB_INLVLB7_LENGTH                              0x1
#define _INLVLB_INLVLB7_MASK                                0x80

// Register: SLRCONB
#define SLRCONB SLRCONB
extern volatile unsigned char           SLRCONB             __at(0xF16);
#ifndef _LIB_BUILD
asm("SLRCONB equ 0F16h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SLRB0                  :1;
        unsigned SLRB1                  :1;
        unsigned SLRB2                  :1;
        unsigned SLRB3                  :1;
        unsigned SLRB4                  :1;
        unsigned SLRB5                  :1;
        unsigned SLRB6                  :1;
        unsigned SLRB7                  :1;
    };
} SLRCONBbits_t;
extern volatile SLRCONBbits_t SLRCONBbits __at(0xF16);
// bitfield macros
#define _SLRCONB_SLRB0_POSN                                 0x0
#define _SLRCONB_SLRB0_POSITION                             0x0
#define _SLRCONB_SLRB0_SIZE                                 0x1
#define _SLRCONB_SLRB0_LENGTH                               0x1
#define _SLRCONB_SLRB0_MASK                                 0x1
#define _SLRCONB_SLRB1_POSN                                 0x1
#define _SLRCONB_SLRB1_POSITION                             0x1
#define _SLRCONB_SLRB1_SIZE                                 0x1
#define _SLRCONB_SLRB1_LENGTH                               0x1
#define _SLRCONB_SLRB1_MASK                                 0x2
#define _SLRCONB_SLRB2_POSN                                 0x2
#define _SLRCONB_SLRB2_POSITION                             0x2
#define _SLRCONB_SLRB2_SIZE                                 0x1
#define _SLRCONB_SLRB2_LENGTH                               0x1
#define _SLRCONB_SLRB2_MASK                                 0x4
#define _SLRCONB_SLRB3_POSN                                 0x3
#define _SLRCONB_SLRB3_POSITION                             0x3
#define _SLRCONB_SLRB3_SIZE                                 0x1
#define _SLRCONB_SLRB3_LENGTH                               0x1
#define _SLRCONB_SLRB3_MASK                                 0x8
#define _SLRCONB_SLRB4_POSN                                 0x4
#define _SLRCONB_SLRB4_POSITION                             0x4
#define _SLRCONB_SLRB4_SIZE                                 0x1
#define _SLRCONB_SLRB4_LENGTH                               0x1
#define _SLRCONB_SLRB4_MASK                                 0x10
#define _SLRCONB_SLRB5_POSN                                 0x5
#define _SLRCONB_SLRB5_POSITION                             0x5
#define _SLRCONB_SLRB5_SIZE                                 0x1
#define _SLRCONB_SLRB5_LENGTH                               0x1
#define _SLRCONB_SLRB5_MASK                                 0x20
#define _SLRCONB_SLRB6_POSN                                 0x6
#define _SLRCONB_SLRB6_POSITION                             0x6
#define _SLRCONB_SLRB6_SIZE                                 0x1
#define _SLRCONB_SLRB6_LENGTH                               0x1
#define _SLRCONB_SLRB6_MASK                                 0x40
#define _SLRCONB_SLRB7_POSN                                 0x7
#define _SLRCONB_SLRB7_POSITION                             0x7
#define _SLRCONB_SLRB7_SIZE                                 0x1
#define _SLRCONB_SLRB7_LENGTH                               0x1
#define _SLRCONB_SLRB7_MASK                                 0x80

// Register: ODCONB
#define ODCONB ODCONB
extern volatile unsigned char           ODCONB              __at(0xF17);
#ifndef _LIB_BUILD
asm("ODCONB equ 0F17h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ODCB0                  :1;
        unsigned ODCB1                  :1;
        unsigned ODCB2                  :1;
        unsigned ODCB3                  :1;
        unsigned ODCB4                  :1;
        unsigned ODCB5                  :1;
        unsigned ODCB6                  :1;
        unsigned ODCB7                  :1;
    };
} ODCONBbits_t;
extern volatile ODCONBbits_t ODCONBbits __at(0xF17);
// bitfield macros
#define _ODCONB_ODCB0_POSN                                  0x0
#define _ODCONB_ODCB0_POSITION                              0x0
#define _ODCONB_ODCB0_SIZE                                  0x1
#define _ODCONB_ODCB0_LENGTH                                0x1
#define _ODCONB_ODCB0_MASK                                  0x1
#define _ODCONB_ODCB1_POSN                                  0x1
#define _ODCONB_ODCB1_POSITION                              0x1
#define _ODCONB_ODCB1_SIZE                                  0x1
#define _ODCONB_ODCB1_LENGTH                                0x1
#define _ODCONB_ODCB1_MASK                                  0x2
#define _ODCONB_ODCB2_POSN                                  0x2
#define _ODCONB_ODCB2_POSITION                              0x2
#define _ODCONB_ODCB2_SIZE                                  0x1
#define _ODCONB_ODCB2_LENGTH                                0x1
#define _ODCONB_ODCB2_MASK                                  0x4
#define _ODCONB_ODCB3_POSN                                  0x3
#define _ODCONB_ODCB3_POSITION                              0x3
#define _ODCONB_ODCB3_SIZE                                  0x1
#define _ODCONB_ODCB3_LENGTH                                0x1
#define _ODCONB_ODCB3_MASK                                  0x8
#define _ODCONB_ODCB4_POSN                                  0x4
#define _ODCONB_ODCB4_POSITION                              0x4
#define _ODCONB_ODCB4_SIZE                                  0x1
#define _ODCONB_ODCB4_LENGTH                                0x1
#define _ODCONB_ODCB4_MASK                                  0x10
#define _ODCONB_ODCB5_POSN                                  0x5
#define _ODCONB_ODCB5_POSITION                              0x5
#define _ODCONB_ODCB5_SIZE                                  0x1
#define _ODCONB_ODCB5_LENGTH                                0x1
#define _ODCONB_ODCB5_MASK                                  0x20
#define _ODCONB_ODCB6_POSN                                  0x6
#define _ODCONB_ODCB6_POSITION                              0x6
#define _ODCONB_ODCB6_SIZE                                  0x1
#define _ODCONB_ODCB6_LENGTH                                0x1
#define _ODCONB_ODCB6_MASK                                  0x40
#define _ODCONB_ODCB7_POSN                                  0x7
#define _ODCONB_ODCB7_POSITION                              0x7
#define _ODCONB_ODCB7_SIZE                                  0x1
#define _ODCONB_ODCB7_LENGTH                                0x1
#define _ODCONB_ODCB7_MASK                                  0x80

// Register: WPUB
#define WPUB WPUB
extern volatile unsigned char           WPUB                __at(0xF18);
#ifndef _LIB_BUILD
asm("WPUB equ 0F18h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WPUB0                  :1;
        unsigned WPUB1                  :1;
        unsigned WPUB2                  :1;
        unsigned WPUB3                  :1;
        unsigned WPUB4                  :1;
        unsigned WPUB5                  :1;
        unsigned WPUB6                  :1;
        unsigned WPUB7                  :1;
    };
} WPUBbits_t;
extern volatile WPUBbits_t WPUBbits __at(0xF18);
// bitfield macros
#define _WPUB_WPUB0_POSN                                    0x0
#define _WPUB_WPUB0_POSITION                                0x0
#define _WPUB_WPUB0_SIZE                                    0x1
#define _WPUB_WPUB0_LENGTH                                  0x1
#define _WPUB_WPUB0_MASK                                    0x1
#define _WPUB_WPUB1_POSN                                    0x1
#define _WPUB_WPUB1_POSITION                                0x1
#define _WPUB_WPUB1_SIZE                                    0x1
#define _WPUB_WPUB1_LENGTH                                  0x1
#define _WPUB_WPUB1_MASK                                    0x2
#define _WPUB_WPUB2_POSN                                    0x2
#define _WPUB_WPUB2_POSITION                                0x2
#define _WPUB_WPUB2_SIZE                                    0x1
#define _WPUB_WPUB2_LENGTH                                  0x1
#define _WPUB_WPUB2_MASK                                    0x4
#define _WPUB_WPUB3_POSN                                    0x3
#define _WPUB_WPUB3_POSITION                                0x3
#define _WPUB_WPUB3_SIZE                                    0x1
#define _WPUB_WPUB3_LENGTH                                  0x1
#define _WPUB_WPUB3_MASK                                    0x8
#define _WPUB_WPUB4_POSN                                    0x4
#define _WPUB_WPUB4_POSITION                                0x4
#define _WPUB_WPUB4_SIZE                                    0x1
#define _WPUB_WPUB4_LENGTH                                  0x1
#define _WPUB_WPUB4_MASK                                    0x10
#define _WPUB_WPUB5_POSN                                    0x5
#define _WPUB_WPUB5_POSITION                                0x5
#define _WPUB_WPUB5_SIZE                                    0x1
#define _WPUB_WPUB5_LENGTH                                  0x1
#define _WPUB_WPUB5_MASK                                    0x20
#define _WPUB_WPUB6_POSN                                    0x6
#define _WPUB_WPUB6_POSITION                                0x6
#define _WPUB_WPUB6_SIZE                                    0x1
#define _WPUB_WPUB6_LENGTH                                  0x1
#define _WPUB_WPUB6_MASK                                    0x40
#define _WPUB_WPUB7_POSN                                    0x7
#define _WPUB_WPUB7_POSITION                                0x7
#define _WPUB_WPUB7_SIZE                                    0x1
#define _WPUB_WPUB7_LENGTH                                  0x1
#define _WPUB_WPUB7_MASK                                    0x80

// Register: ANSELB
#define ANSELB ANSELB
extern volatile unsigned char           ANSELB              __at(0xF19);
#ifndef _LIB_BUILD
asm("ANSELB equ 0F19h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ANSELB0                :1;
        unsigned ANSELB1                :1;
        unsigned ANSELB2                :1;
        unsigned ANSELB3                :1;
        unsigned ANSELB4                :1;
        unsigned ANSELB5                :1;
        unsigned ANSELB6                :1;
        unsigned ANSELB7                :1;
    };
} ANSELBbits_t;
extern volatile ANSELBbits_t ANSELBbits __at(0xF19);
// bitfield macros
#define _ANSELB_ANSELB0_POSN                                0x0
#define _ANSELB_ANSELB0_POSITION                            0x0
#define _ANSELB_ANSELB0_SIZE                                0x1
#define _ANSELB_ANSELB0_LENGTH                              0x1
#define _ANSELB_ANSELB0_MASK                                0x1
#define _ANSELB_ANSELB1_POSN                                0x1
#define _ANSELB_ANSELB1_POSITION                            0x1
#define _ANSELB_ANSELB1_SIZE                                0x1
#define _ANSELB_ANSELB1_LENGTH                              0x1
#define _ANSELB_ANSELB1_MASK                                0x2
#define _ANSELB_ANSELB2_POSN                                0x2
#define _ANSELB_ANSELB2_POSITION                            0x2
#define _ANSELB_ANSELB2_SIZE                                0x1
#define _ANSELB_ANSELB2_LENGTH                              0x1
#define _ANSELB_ANSELB2_MASK                                0x4
#define _ANSELB_ANSELB3_POSN                                0x3
#define _ANSELB_ANSELB3_POSITION                            0x3
#define _ANSELB_ANSELB3_SIZE                                0x1
#define _ANSELB_ANSELB3_LENGTH                              0x1
#define _ANSELB_ANSELB3_MASK                                0x8
#define _ANSELB_ANSELB4_POSN                                0x4
#define _ANSELB_ANSELB4_POSITION                            0x4
#define _ANSELB_ANSELB4_SIZE                                0x1
#define _ANSELB_ANSELB4_LENGTH                              0x1
#define _ANSELB_ANSELB4_MASK                                0x10
#define _ANSELB_ANSELB5_POSN                                0x5
#define _ANSELB_ANSELB5_POSITION                            0x5
#define _ANSELB_ANSELB5_SIZE                                0x1
#define _ANSELB_ANSELB5_LENGTH                              0x1
#define _ANSELB_ANSELB5_MASK                                0x20
#define _ANSELB_ANSELB6_POSN                                0x6
#define _ANSELB_ANSELB6_POSITION                            0x6
#define _ANSELB_ANSELB6_SIZE                                0x1
#define _ANSELB_ANSELB6_LENGTH                              0x1
#define _ANSELB_ANSELB6_MASK                                0x40
#define _ANSELB_ANSELB7_POSN                                0x7
#define _ANSELB_ANSELB7_POSITION                            0x7
#define _ANSELB_ANSELB7_SIZE                                0x1
#define _ANSELB_ANSELB7_LENGTH                              0x1
#define _ANSELB_ANSELB7_MASK                                0x80

// Register: IOCCF
#define IOCCF IOCCF
extern volatile unsigned char           IOCCF               __at(0xF1A);
#ifndef _LIB_BUILD
asm("IOCCF equ 0F1Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCCF0                 :1;
        unsigned IOCCF1                 :1;
        unsigned IOCCF2                 :1;
        unsigned IOCCF3                 :1;
        unsigned IOCCF4                 :1;
        unsigned IOCCF5                 :1;
        unsigned IOCCF6                 :1;
        unsigned IOCCF7                 :1;
    };
} IOCCFbits_t;
extern volatile IOCCFbits_t IOCCFbits __at(0xF1A);
// bitfield macros
#define _IOCCF_IOCCF0_POSN                                  0x0
#define _IOCCF_IOCCF0_POSITION                              0x0
#define _IOCCF_IOCCF0_SIZE                                  0x1
#define _IOCCF_IOCCF0_LENGTH                                0x1
#define _IOCCF_IOCCF0_MASK                                  0x1
#define _IOCCF_IOCCF1_POSN                                  0x1
#define _IOCCF_IOCCF1_POSITION                              0x1
#define _IOCCF_IOCCF1_SIZE                                  0x1
#define _IOCCF_IOCCF1_LENGTH                                0x1
#define _IOCCF_IOCCF1_MASK                                  0x2
#define _IOCCF_IOCCF2_POSN                                  0x2
#define _IOCCF_IOCCF2_POSITION                              0x2
#define _IOCCF_IOCCF2_SIZE                                  0x1
#define _IOCCF_IOCCF2_LENGTH                                0x1
#define _IOCCF_IOCCF2_MASK                                  0x4
#define _IOCCF_IOCCF3_POSN                                  0x3
#define _IOCCF_IOCCF3_POSITION                              0x3
#define _IOCCF_IOCCF3_SIZE                                  0x1
#define _IOCCF_IOCCF3_LENGTH                                0x1
#define _IOCCF_IOCCF3_MASK                                  0x8
#define _IOCCF_IOCCF4_POSN                                  0x4
#define _IOCCF_IOCCF4_POSITION                              0x4
#define _IOCCF_IOCCF4_SIZE                                  0x1
#define _IOCCF_IOCCF4_LENGTH                                0x1
#define _IOCCF_IOCCF4_MASK                                  0x10
#define _IOCCF_IOCCF5_POSN                                  0x5
#define _IOCCF_IOCCF5_POSITION                              0x5
#define _IOCCF_IOCCF5_SIZE                                  0x1
#define _IOCCF_IOCCF5_LENGTH                                0x1
#define _IOCCF_IOCCF5_MASK                                  0x20
#define _IOCCF_IOCCF6_POSN                                  0x6
#define _IOCCF_IOCCF6_POSITION                              0x6
#define _IOCCF_IOCCF6_SIZE                                  0x1
#define _IOCCF_IOCCF6_LENGTH                                0x1
#define _IOCCF_IOCCF6_MASK                                  0x40
#define _IOCCF_IOCCF7_POSN                                  0x7
#define _IOCCF_IOCCF7_POSITION                              0x7
#define _IOCCF_IOCCF7_SIZE                                  0x1
#define _IOCCF_IOCCF7_LENGTH                                0x1
#define _IOCCF_IOCCF7_MASK                                  0x80

// Register: IOCCN
#define IOCCN IOCCN
extern volatile unsigned char           IOCCN               __at(0xF1B);
#ifndef _LIB_BUILD
asm("IOCCN equ 0F1Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCCN0                 :1;
        unsigned IOCCN1                 :1;
        unsigned IOCCN2                 :1;
        unsigned IOCCN3                 :1;
        unsigned IOCCN4                 :1;
        unsigned IOCCN5                 :1;
        unsigned IOCCN6                 :1;
        unsigned IOCCN7                 :1;
    };
} IOCCNbits_t;
extern volatile IOCCNbits_t IOCCNbits __at(0xF1B);
// bitfield macros
#define _IOCCN_IOCCN0_POSN                                  0x0
#define _IOCCN_IOCCN0_POSITION                              0x0
#define _IOCCN_IOCCN0_SIZE                                  0x1
#define _IOCCN_IOCCN0_LENGTH                                0x1
#define _IOCCN_IOCCN0_MASK                                  0x1
#define _IOCCN_IOCCN1_POSN                                  0x1
#define _IOCCN_IOCCN1_POSITION                              0x1
#define _IOCCN_IOCCN1_SIZE                                  0x1
#define _IOCCN_IOCCN1_LENGTH                                0x1
#define _IOCCN_IOCCN1_MASK                                  0x2
#define _IOCCN_IOCCN2_POSN                                  0x2
#define _IOCCN_IOCCN2_POSITION                              0x2
#define _IOCCN_IOCCN2_SIZE                                  0x1
#define _IOCCN_IOCCN2_LENGTH                                0x1
#define _IOCCN_IOCCN2_MASK                                  0x4
#define _IOCCN_IOCCN3_POSN                                  0x3
#define _IOCCN_IOCCN3_POSITION                              0x3
#define _IOCCN_IOCCN3_SIZE                                  0x1
#define _IOCCN_IOCCN3_LENGTH                                0x1
#define _IOCCN_IOCCN3_MASK                                  0x8
#define _IOCCN_IOCCN4_POSN                                  0x4
#define _IOCCN_IOCCN4_POSITION                              0x4
#define _IOCCN_IOCCN4_SIZE                                  0x1
#define _IOCCN_IOCCN4_LENGTH                                0x1
#define _IOCCN_IOCCN4_MASK                                  0x10
#define _IOCCN_IOCCN5_POSN                                  0x5
#define _IOCCN_IOCCN5_POSITION                              0x5
#define _IOCCN_IOCCN5_SIZE                                  0x1
#define _IOCCN_IOCCN5_LENGTH                                0x1
#define _IOCCN_IOCCN5_MASK                                  0x20
#define _IOCCN_IOCCN6_POSN                                  0x6
#define _IOCCN_IOCCN6_POSITION                              0x6
#define _IOCCN_IOCCN6_SIZE                                  0x1
#define _IOCCN_IOCCN6_LENGTH                                0x1
#define _IOCCN_IOCCN6_MASK                                  0x40
#define _IOCCN_IOCCN7_POSN                                  0x7
#define _IOCCN_IOCCN7_POSITION                              0x7
#define _IOCCN_IOCCN7_SIZE                                  0x1
#define _IOCCN_IOCCN7_LENGTH                                0x1
#define _IOCCN_IOCCN7_MASK                                  0x80

// Register: IOCCP
#define IOCCP IOCCP
extern volatile unsigned char           IOCCP               __at(0xF1C);
#ifndef _LIB_BUILD
asm("IOCCP equ 0F1Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCCP0                 :1;
        unsigned IOCCP1                 :1;
        unsigned IOCCP2                 :1;
        unsigned IOCCP3                 :1;
        unsigned IOCCP4                 :1;
        unsigned IOCCP5                 :1;
        unsigned IOCCP6                 :1;
        unsigned IOCCP7                 :1;
    };
} IOCCPbits_t;
extern volatile IOCCPbits_t IOCCPbits __at(0xF1C);
// bitfield macros
#define _IOCCP_IOCCP0_POSN                                  0x0
#define _IOCCP_IOCCP0_POSITION                              0x0
#define _IOCCP_IOCCP0_SIZE                                  0x1
#define _IOCCP_IOCCP0_LENGTH                                0x1
#define _IOCCP_IOCCP0_MASK                                  0x1
#define _IOCCP_IOCCP1_POSN                                  0x1
#define _IOCCP_IOCCP1_POSITION                              0x1
#define _IOCCP_IOCCP1_SIZE                                  0x1
#define _IOCCP_IOCCP1_LENGTH                                0x1
#define _IOCCP_IOCCP1_MASK                                  0x2
#define _IOCCP_IOCCP2_POSN                                  0x2
#define _IOCCP_IOCCP2_POSITION                              0x2
#define _IOCCP_IOCCP2_SIZE                                  0x1
#define _IOCCP_IOCCP2_LENGTH                                0x1
#define _IOCCP_IOCCP2_MASK                                  0x4
#define _IOCCP_IOCCP3_POSN                                  0x3
#define _IOCCP_IOCCP3_POSITION                              0x3
#define _IOCCP_IOCCP3_SIZE                                  0x1
#define _IOCCP_IOCCP3_LENGTH                                0x1
#define _IOCCP_IOCCP3_MASK                                  0x8
#define _IOCCP_IOCCP4_POSN                                  0x4
#define _IOCCP_IOCCP4_POSITION                              0x4
#define _IOCCP_IOCCP4_SIZE                                  0x1
#define _IOCCP_IOCCP4_LENGTH                                0x1
#define _IOCCP_IOCCP4_MASK                                  0x10
#define _IOCCP_IOCCP5_POSN                                  0x5
#define _IOCCP_IOCCP5_POSITION                              0x5
#define _IOCCP_IOCCP5_SIZE                                  0x1
#define _IOCCP_IOCCP5_LENGTH                                0x1
#define _IOCCP_IOCCP5_MASK                                  0x20
#define _IOCCP_IOCCP6_POSN                                  0x6
#define _IOCCP_IOCCP6_POSITION                              0x6
#define _IOCCP_IOCCP6_SIZE                                  0x1
#define _IOCCP_IOCCP6_LENGTH                                0x1
#define _IOCCP_IOCCP6_MASK                                  0x40
#define _IOCCP_IOCCP7_POSN                                  0x7
#define _IOCCP_IOCCP7_POSITION                              0x7
#define _IOCCP_IOCCP7_SIZE                                  0x1
#define _IOCCP_IOCCP7_LENGTH                                0x1
#define _IOCCP_IOCCP7_MASK                                  0x80

// Register: INLVLC
#define INLVLC INLVLC
extern volatile unsigned char           INLVLC              __at(0xF1D);
#ifndef _LIB_BUILD
asm("INLVLC equ 0F1Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INLVLC0                :1;
        unsigned INLVLC1                :1;
        unsigned INLVLC2                :1;
        unsigned INLVLC3                :1;
        unsigned INLVLC4                :1;
        unsigned INLVLC5                :1;
        unsigned INLVLC6                :1;
        unsigned INLVLC7                :1;
    };
} INLVLCbits_t;
extern volatile INLVLCbits_t INLVLCbits __at(0xF1D);
// bitfield macros
#define _INLVLC_INLVLC0_POSN                                0x0
#define _INLVLC_INLVLC0_POSITION                            0x0
#define _INLVLC_INLVLC0_SIZE                                0x1
#define _INLVLC_INLVLC0_LENGTH                              0x1
#define _INLVLC_INLVLC0_MASK                                0x1
#define _INLVLC_INLVLC1_POSN                                0x1
#define _INLVLC_INLVLC1_POSITION                            0x1
#define _INLVLC_INLVLC1_SIZE                                0x1
#define _INLVLC_INLVLC1_LENGTH                              0x1
#define _INLVLC_INLVLC1_MASK                                0x2
#define _INLVLC_INLVLC2_POSN                                0x2
#define _INLVLC_INLVLC2_POSITION                            0x2
#define _INLVLC_INLVLC2_SIZE                                0x1
#define _INLVLC_INLVLC2_LENGTH                              0x1
#define _INLVLC_INLVLC2_MASK                                0x4
#define _INLVLC_INLVLC3_POSN                                0x3
#define _INLVLC_INLVLC3_POSITION                            0x3
#define _INLVLC_INLVLC3_SIZE                                0x1
#define _INLVLC_INLVLC3_LENGTH                              0x1
#define _INLVLC_INLVLC3_MASK                                0x8
#define _INLVLC_INLVLC4_POSN                                0x4
#define _INLVLC_INLVLC4_POSITION                            0x4
#define _INLVLC_INLVLC4_SIZE                                0x1
#define _INLVLC_INLVLC4_LENGTH                              0x1
#define _INLVLC_INLVLC4_MASK                                0x10
#define _INLVLC_INLVLC5_POSN                                0x5
#define _INLVLC_INLVLC5_POSITION                            0x5
#define _INLVLC_INLVLC5_SIZE                                0x1
#define _INLVLC_INLVLC5_LENGTH                              0x1
#define _INLVLC_INLVLC5_MASK                                0x20
#define _INLVLC_INLVLC6_POSN                                0x6
#define _INLVLC_INLVLC6_POSITION                            0x6
#define _INLVLC_INLVLC6_SIZE                                0x1
#define _INLVLC_INLVLC6_LENGTH                              0x1
#define _INLVLC_INLVLC6_MASK                                0x40
#define _INLVLC_INLVLC7_POSN                                0x7
#define _INLVLC_INLVLC7_POSITION                            0x7
#define _INLVLC_INLVLC7_SIZE                                0x1
#define _INLVLC_INLVLC7_LENGTH                              0x1
#define _INLVLC_INLVLC7_MASK                                0x80

// Register: SLRCONC
#define SLRCONC SLRCONC
extern volatile unsigned char           SLRCONC             __at(0xF1E);
#ifndef _LIB_BUILD
asm("SLRCONC equ 0F1Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SLRC0                  :1;
        unsigned SLRC1                  :1;
        unsigned SLRC2                  :1;
        unsigned SLRC3                  :1;
        unsigned SLRC4                  :1;
        unsigned SLRC5                  :1;
        unsigned SLRC6                  :1;
        unsigned SLRC7                  :1;
    };
} SLRCONCbits_t;
extern volatile SLRCONCbits_t SLRCONCbits __at(0xF1E);
// bitfield macros
#define _SLRCONC_SLRC0_POSN                                 0x0
#define _SLRCONC_SLRC0_POSITION                             0x0
#define _SLRCONC_SLRC0_SIZE                                 0x1
#define _SLRCONC_SLRC0_LENGTH                               0x1
#define _SLRCONC_SLRC0_MASK                                 0x1
#define _SLRCONC_SLRC1_POSN                                 0x1
#define _SLRCONC_SLRC1_POSITION                             0x1
#define _SLRCONC_SLRC1_SIZE                                 0x1
#define _SLRCONC_SLRC1_LENGTH                               0x1
#define _SLRCONC_SLRC1_MASK                                 0x2
#define _SLRCONC_SLRC2_POSN                                 0x2
#define _SLRCONC_SLRC2_POSITION                             0x2
#define _SLRCONC_SLRC2_SIZE                                 0x1
#define _SLRCONC_SLRC2_LENGTH                               0x1
#define _SLRCONC_SLRC2_MASK                                 0x4
#define _SLRCONC_SLRC3_POSN                                 0x3
#define _SLRCONC_SLRC3_POSITION                             0x3
#define _SLRCONC_SLRC3_SIZE                                 0x1
#define _SLRCONC_SLRC3_LENGTH                               0x1
#define _SLRCONC_SLRC3_MASK                                 0x8
#define _SLRCONC_SLRC4_POSN                                 0x4
#define _SLRCONC_SLRC4_POSITION                             0x4
#define _SLRCONC_SLRC4_SIZE                                 0x1
#define _SLRCONC_SLRC4_LENGTH                               0x1
#define _SLRCONC_SLRC4_MASK                                 0x10
#define _SLRCONC_SLRC5_POSN                                 0x5
#define _SLRCONC_SLRC5_POSITION                             0x5
#define _SLRCONC_SLRC5_SIZE                                 0x1
#define _SLRCONC_SLRC5_LENGTH                               0x1
#define _SLRCONC_SLRC5_MASK                                 0x20
#define _SLRCONC_SLRC6_POSN                                 0x6
#define _SLRCONC_SLRC6_POSITION                             0x6
#define _SLRCONC_SLRC6_SIZE                                 0x1
#define _SLRCONC_SLRC6_LENGTH                               0x1
#define _SLRCONC_SLRC6_MASK                                 0x40
#define _SLRCONC_SLRC7_POSN                                 0x7
#define _SLRCONC_SLRC7_POSITION                             0x7
#define _SLRCONC_SLRC7_SIZE                                 0x1
#define _SLRCONC_SLRC7_LENGTH                               0x1
#define _SLRCONC_SLRC7_MASK                                 0x80

// Register: ODCONC
#define ODCONC ODCONC
extern volatile unsigned char           ODCONC              __at(0xF1F);
#ifndef _LIB_BUILD
asm("ODCONC equ 0F1Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ODCC0                  :1;
        unsigned ODCC1                  :1;
        unsigned ODCC2                  :1;
        unsigned ODCC3                  :1;
        unsigned ODCC4                  :1;
        unsigned ODCC5                  :1;
        unsigned ODCC6                  :1;
        unsigned ODCC7                  :1;
    };
} ODCONCbits_t;
extern volatile ODCONCbits_t ODCONCbits __at(0xF1F);
// bitfield macros
#define _ODCONC_ODCC0_POSN                                  0x0
#define _ODCONC_ODCC0_POSITION                              0x0
#define _ODCONC_ODCC0_SIZE                                  0x1
#define _ODCONC_ODCC0_LENGTH                                0x1
#define _ODCONC_ODCC0_MASK                                  0x1
#define _ODCONC_ODCC1_POSN                                  0x1
#define _ODCONC_ODCC1_POSITION                              0x1
#define _ODCONC_ODCC1_SIZE                                  0x1
#define _ODCONC_ODCC1_LENGTH                                0x1
#define _ODCONC_ODCC1_MASK                                  0x2
#define _ODCONC_ODCC2_POSN                                  0x2
#define _ODCONC_ODCC2_POSITION                              0x2
#define _ODCONC_ODCC2_SIZE                                  0x1
#define _ODCONC_ODCC2_LENGTH                                0x1
#define _ODCONC_ODCC2_MASK                                  0x4
#define _ODCONC_ODCC3_POSN                                  0x3
#define _ODCONC_ODCC3_POSITION                              0x3
#define _ODCONC_ODCC3_SIZE                                  0x1
#define _ODCONC_ODCC3_LENGTH                                0x1
#define _ODCONC_ODCC3_MASK                                  0x8
#define _ODCONC_ODCC4_POSN                                  0x4
#define _ODCONC_ODCC4_POSITION                              0x4
#define _ODCONC_ODCC4_SIZE                                  0x1
#define _ODCONC_ODCC4_LENGTH                                0x1
#define _ODCONC_ODCC4_MASK                                  0x10
#define _ODCONC_ODCC5_POSN                                  0x5
#define _ODCONC_ODCC5_POSITION                              0x5
#define _ODCONC_ODCC5_SIZE                                  0x1
#define _ODCONC_ODCC5_LENGTH                                0x1
#define _ODCONC_ODCC5_MASK                                  0x20
#define _ODCONC_ODCC6_POSN                                  0x6
#define _ODCONC_ODCC6_POSITION                              0x6
#define _ODCONC_ODCC6_SIZE                                  0x1
#define _ODCONC_ODCC6_LENGTH                                0x1
#define _ODCONC_ODCC6_MASK                                  0x40
#define _ODCONC_ODCC7_POSN                                  0x7
#define _ODCONC_ODCC7_POSITION                              0x7
#define _ODCONC_ODCC7_SIZE                                  0x1
#define _ODCONC_ODCC7_LENGTH                                0x1
#define _ODCONC_ODCC7_MASK                                  0x80

// Register: WPUC
#define WPUC WPUC
extern volatile unsigned char           WPUC                __at(0xF20);
#ifndef _LIB_BUILD
asm("WPUC equ 0F20h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WPUC0                  :1;
        unsigned WPUC1                  :1;
        unsigned WPUC2                  :1;
        unsigned WPUC3                  :1;
        unsigned WPUC4                  :1;
        unsigned WPUC5                  :1;
        unsigned WPUC6                  :1;
        unsigned WPUC7                  :1;
    };
} WPUCbits_t;
extern volatile WPUCbits_t WPUCbits __at(0xF20);
// bitfield macros
#define _WPUC_WPUC0_POSN                                    0x0
#define _WPUC_WPUC0_POSITION                                0x0
#define _WPUC_WPUC0_SIZE                                    0x1
#define _WPUC_WPUC0_LENGTH                                  0x1
#define _WPUC_WPUC0_MASK                                    0x1
#define _WPUC_WPUC1_POSN                                    0x1
#define _WPUC_WPUC1_POSITION                                0x1
#define _WPUC_WPUC1_SIZE                                    0x1
#define _WPUC_WPUC1_LENGTH                                  0x1
#define _WPUC_WPUC1_MASK                                    0x2
#define _WPUC_WPUC2_POSN                                    0x2
#define _WPUC_WPUC2_POSITION                                0x2
#define _WPUC_WPUC2_SIZE                                    0x1
#define _WPUC_WPUC2_LENGTH                                  0x1
#define _WPUC_WPUC2_MASK                                    0x4
#define _WPUC_WPUC3_POSN                                    0x3
#define _WPUC_WPUC3_POSITION                                0x3
#define _WPUC_WPUC3_SIZE                                    0x1
#define _WPUC_WPUC3_LENGTH                                  0x1
#define _WPUC_WPUC3_MASK                                    0x8
#define _WPUC_WPUC4_POSN                                    0x4
#define _WPUC_WPUC4_POSITION                                0x4
#define _WPUC_WPUC4_SIZE                                    0x1
#define _WPUC_WPUC4_LENGTH                                  0x1
#define _WPUC_WPUC4_MASK                                    0x10
#define _WPUC_WPUC5_POSN                                    0x5
#define _WPUC_WPUC5_POSITION                                0x5
#define _WPUC_WPUC5_SIZE                                    0x1
#define _WPUC_WPUC5_LENGTH                                  0x1
#define _WPUC_WPUC5_MASK                                    0x20
#define _WPUC_WPUC6_POSN                                    0x6
#define _WPUC_WPUC6_POSITION                                0x6
#define _WPUC_WPUC6_SIZE                                    0x1
#define _WPUC_WPUC6_LENGTH                                  0x1
#define _WPUC_WPUC6_MASK                                    0x40
#define _WPUC_WPUC7_POSN                                    0x7
#define _WPUC_WPUC7_POSITION                                0x7
#define _WPUC_WPUC7_SIZE                                    0x1
#define _WPUC_WPUC7_LENGTH                                  0x1
#define _WPUC_WPUC7_MASK                                    0x80

// Register: ANSELC
#define ANSELC ANSELC
extern volatile unsigned char           ANSELC              __at(0xF21);
#ifndef _LIB_BUILD
asm("ANSELC equ 0F21h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ANSELC0                :1;
        unsigned ANSELC1                :1;
        unsigned ANSELC2                :1;
        unsigned ANSELC3                :1;
        unsigned ANSELC4                :1;
        unsigned ANSELC5                :1;
        unsigned ANSELC6                :1;
        unsigned ANSELC7                :1;
    };
} ANSELCbits_t;
extern volatile ANSELCbits_t ANSELCbits __at(0xF21);
// bitfield macros
#define _ANSELC_ANSELC0_POSN                                0x0
#define _ANSELC_ANSELC0_POSITION                            0x0
#define _ANSELC_ANSELC0_SIZE                                0x1
#define _ANSELC_ANSELC0_LENGTH                              0x1
#define _ANSELC_ANSELC0_MASK                                0x1
#define _ANSELC_ANSELC1_POSN                                0x1
#define _ANSELC_ANSELC1_POSITION                            0x1
#define _ANSELC_ANSELC1_SIZE                                0x1
#define _ANSELC_ANSELC1_LENGTH                              0x1
#define _ANSELC_ANSELC1_MASK                                0x2
#define _ANSELC_ANSELC2_POSN                                0x2
#define _ANSELC_ANSELC2_POSITION                            0x2
#define _ANSELC_ANSELC2_SIZE                                0x1
#define _ANSELC_ANSELC2_LENGTH                              0x1
#define _ANSELC_ANSELC2_MASK                                0x4
#define _ANSELC_ANSELC3_POSN                                0x3
#define _ANSELC_ANSELC3_POSITION                            0x3
#define _ANSELC_ANSELC3_SIZE                                0x1
#define _ANSELC_ANSELC3_LENGTH                              0x1
#define _ANSELC_ANSELC3_MASK                                0x8
#define _ANSELC_ANSELC4_POSN                                0x4
#define _ANSELC_ANSELC4_POSITION                            0x4
#define _ANSELC_ANSELC4_SIZE                                0x1
#define _ANSELC_ANSELC4_LENGTH                              0x1
#define _ANSELC_ANSELC4_MASK                                0x10
#define _ANSELC_ANSELC5_POSN                                0x5
#define _ANSELC_ANSELC5_POSITION                            0x5
#define _ANSELC_ANSELC5_SIZE                                0x1
#define _ANSELC_ANSELC5_LENGTH                              0x1
#define _ANSELC_ANSELC5_MASK                                0x20
#define _ANSELC_ANSELC6_POSN                                0x6
#define _ANSELC_ANSELC6_POSITION                            0x6
#define _ANSELC_ANSELC6_SIZE                                0x1
#define _ANSELC_ANSELC6_LENGTH                              0x1
#define _ANSELC_ANSELC6_MASK                                0x40
#define _ANSELC_ANSELC7_POSN                                0x7
#define _ANSELC_ANSELC7_POSITION                            0x7
#define _ANSELC_ANSELC7_SIZE                                0x1
#define _ANSELC_ANSELC7_LENGTH                              0x1
#define _ANSELC_ANSELC7_MASK                                0x80

// Register: IOCEF
#define IOCEF IOCEF
extern volatile unsigned char           IOCEF               __at(0xF27);
#ifndef _LIB_BUILD
asm("IOCEF equ 0F27h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :3;
        unsigned IOCEF3                 :1;
    };
} IOCEFbits_t;
extern volatile IOCEFbits_t IOCEFbits __at(0xF27);
// bitfield macros
#define _IOCEF_IOCEF3_POSN                                  0x3
#define _IOCEF_IOCEF3_POSITION                              0x3
#define _IOCEF_IOCEF3_SIZE                                  0x1
#define _IOCEF_IOCEF3_LENGTH                                0x1
#define _IOCEF_IOCEF3_MASK                                  0x8

// Register: IOCEN
#define IOCEN IOCEN
extern volatile unsigned char           IOCEN               __at(0xF28);
#ifndef _LIB_BUILD
asm("IOCEN equ 0F28h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :3;
        unsigned IOCEN3                 :1;
    };
} IOCENbits_t;
extern volatile IOCENbits_t IOCENbits __at(0xF28);
// bitfield macros
#define _IOCEN_IOCEN3_POSN                                  0x3
#define _IOCEN_IOCEN3_POSITION                              0x3
#define _IOCEN_IOCEN3_SIZE                                  0x1
#define _IOCEN_IOCEN3_LENGTH                                0x1
#define _IOCEN_IOCEN3_MASK                                  0x8

// Register: IOCEP
#define IOCEP IOCEP
extern volatile unsigned char           IOCEP               __at(0xF29);
#ifndef _LIB_BUILD
asm("IOCEP equ 0F29h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :3;
        unsigned IOCEP3                 :1;
    };
} IOCEPbits_t;
extern volatile IOCEPbits_t IOCEPbits __at(0xF29);
// bitfield macros
#define _IOCEP_IOCEP3_POSN                                  0x3
#define _IOCEP_IOCEP3_POSITION                              0x3
#define _IOCEP_IOCEP3_SIZE                                  0x1
#define _IOCEP_IOCEP3_LENGTH                                0x1
#define _IOCEP_IOCEP3_MASK                                  0x8

// Register: INLVLE
#define INLVLE INLVLE
extern volatile unsigned char           INLVLE              __at(0xF2A);
#ifndef _LIB_BUILD
asm("INLVLE equ 0F2Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :3;
        unsigned INLVLE3                :1;
    };
} INLVLEbits_t;
extern volatile INLVLEbits_t INLVLEbits __at(0xF2A);
// bitfield macros
#define _INLVLE_INLVLE3_POSN                                0x3
#define _INLVLE_INLVLE3_POSITION                            0x3
#define _INLVLE_INLVLE3_SIZE                                0x1
#define _INLVLE_INLVLE3_LENGTH                              0x1
#define _INLVLE_INLVLE3_MASK                                0x8

// Register: WPUE
#define WPUE WPUE
extern volatile unsigned char           WPUE                __at(0xF2D);
#ifndef _LIB_BUILD
asm("WPUE equ 0F2Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :3;
        unsigned WPUE3                  :1;
    };
} WPUEbits_t;
extern volatile WPUEbits_t WPUEbits __at(0xF2D);
// bitfield macros
#define _WPUE_WPUE3_POSN                                    0x3
#define _WPUE_WPUE3_POSITION                                0x3
#define _WPUE_WPUE3_SIZE                                    0x1
#define _WPUE_WPUE3_LENGTH                                  0x1
#define _WPUE_WPUE3_MASK                                    0x8

// Register: HLVDCON0
#define HLVDCON0 HLVDCON0
extern volatile unsigned char           HLVDCON0            __at(0xF2F);
#ifndef _LIB_BUILD
asm("HLVDCON0 equ 0F2Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INTL                   :1;
        unsigned INTH                   :1;
        unsigned                        :2;
        unsigned RDY                    :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned HLVDINTL               :1;
        unsigned HLVDINTH               :1;
        unsigned                        :2;
        unsigned HLVDRDY                :1;
        unsigned HLVDOUT                :1;
        unsigned                        :1;
        unsigned HLVDEN                 :1;
    };
} HLVDCON0bits_t;
extern volatile HLVDCON0bits_t HLVDCON0bits __at(0xF2F);
// bitfield macros
#define _HLVDCON0_INTL_POSN                                 0x0
#define _HLVDCON0_INTL_POSITION                             0x0
#define _HLVDCON0_INTL_SIZE                                 0x1
#define _HLVDCON0_INTL_LENGTH                               0x1
#define _HLVDCON0_INTL_MASK                                 0x1
#define _HLVDCON0_INTH_POSN                                 0x1
#define _HLVDCON0_INTH_POSITION                             0x1
#define _HLVDCON0_INTH_SIZE                                 0x1
#define _HLVDCON0_INTH_LENGTH                               0x1
#define _HLVDCON0_INTH_MASK                                 0x2
#define _HLVDCON0_RDY_POSN                                  0x4
#define _HLVDCON0_RDY_POSITION                              0x4
#define _HLVDCON0_RDY_SIZE                                  0x1
#define _HLVDCON0_RDY_LENGTH                                0x1
#define _HLVDCON0_RDY_MASK                                  0x10
#define _HLVDCON0_OUT_POSN                                  0x5
#define _HLVDCON0_OUT_POSITION                              0x5
#define _HLVDCON0_OUT_SIZE                                  0x1
#define _HLVDCON0_OUT_LENGTH                                0x1
#define _HLVDCON0_OUT_MASK                                  0x20
#define _HLVDCON0_EN_POSN                                   0x7
#define _HLVDCON0_EN_POSITION                               0x7
#define _HLVDCON0_EN_SIZE                                   0x1
#define _HLVDCON0_EN_LENGTH                                 0x1
#define _HLVDCON0_EN_MASK                                   0x80
#define _HLVDCON0_HLVDINTL_POSN                             0x0
#define _HLVDCON0_HLVDINTL_POSITION                         0x0
#define _HLVDCON0_HLVDINTL_SIZE                             0x1
#define _HLVDCON0_HLVDINTL_LENGTH                           0x1
#define _HLVDCON0_HLVDINTL_MASK                             0x1
#define _HLVDCON0_HLVDINTH_POSN                             0x1
#define _HLVDCON0_HLVDINTH_POSITION                         0x1
#define _HLVDCON0_HLVDINTH_SIZE                             0x1
#define _HLVDCON0_HLVDINTH_LENGTH                           0x1
#define _HLVDCON0_HLVDINTH_MASK                             0x2
#define _HLVDCON0_HLVDRDY_POSN                              0x4
#define _HLVDCON0_HLVDRDY_POSITION                          0x4
#define _HLVDCON0_HLVDRDY_SIZE                              0x1
#define _HLVDCON0_HLVDRDY_LENGTH                            0x1
#define _HLVDCON0_HLVDRDY_MASK                              0x10
#define _HLVDCON0_HLVDOUT_POSN                              0x5
#define _HLVDCON0_HLVDOUT_POSITION                          0x5
#define _HLVDCON0_HLVDOUT_SIZE                              0x1
#define _HLVDCON0_HLVDOUT_LENGTH                            0x1
#define _HLVDCON0_HLVDOUT_MASK                              0x20
#define _HLVDCON0_HLVDEN_POSN                               0x7
#define _HLVDCON0_HLVDEN_POSITION                           0x7
#define _HLVDCON0_HLVDEN_SIZE                               0x1
#define _HLVDCON0_HLVDEN_LENGTH                             0x1
#define _HLVDCON0_HLVDEN_MASK                               0x80

// Register: HLVDCON1
#define HLVDCON1 HLVDCON1
extern volatile unsigned char           HLVDCON1            __at(0xF30);
#ifndef _LIB_BUILD
asm("HLVDCON1 equ 0F30h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SEL                    :4;
    };
    struct {
        unsigned SEL0                   :1;
        unsigned SEL1                   :1;
        unsigned SEL2                   :1;
        unsigned SEL3                   :1;
    };
    struct {
        unsigned HLVDSEL0               :1;
        unsigned HLVDSEL1               :1;
        unsigned HLVDSEL2               :1;
        unsigned HLVDSEL3               :1;
    };
} HLVDCON1bits_t;
extern volatile HLVDCON1bits_t HLVDCON1bits __at(0xF30);
// bitfield macros
#define _HLVDCON1_SEL_POSN                                  0x0
#define _HLVDCON1_SEL_POSITION                              0x0
#define _HLVDCON1_SEL_SIZE                                  0x4
#define _HLVDCON1_SEL_LENGTH                                0x4
#define _HLVDCON1_SEL_MASK                                  0xF
#define _HLVDCON1_SEL0_POSN                                 0x0
#define _HLVDCON1_SEL0_POSITION                             0x0
#define _HLVDCON1_SEL0_SIZE                                 0x1
#define _HLVDCON1_SEL0_LENGTH                               0x1
#define _HLVDCON1_SEL0_MASK                                 0x1
#define _HLVDCON1_SEL1_POSN                                 0x1
#define _HLVDCON1_SEL1_POSITION                             0x1
#define _HLVDCON1_SEL1_SIZE                                 0x1
#define _HLVDCON1_SEL1_LENGTH                               0x1
#define _HLVDCON1_SEL1_MASK                                 0x2
#define _HLVDCON1_SEL2_POSN                                 0x2
#define _HLVDCON1_SEL2_POSITION                             0x2
#define _HLVDCON1_SEL2_SIZE                                 0x1
#define _HLVDCON1_SEL2_LENGTH                               0x1
#define _HLVDCON1_SEL2_MASK                                 0x4
#define _HLVDCON1_SEL3_POSN                                 0x3
#define _HLVDCON1_SEL3_POSITION                             0x3
#define _HLVDCON1_SEL3_SIZE                                 0x1
#define _HLVDCON1_SEL3_LENGTH                               0x1
#define _HLVDCON1_SEL3_MASK                                 0x8
#define _HLVDCON1_HLVDSEL0_POSN                             0x0
#define _HLVDCON1_HLVDSEL0_POSITION                         0x0
#define _HLVDCON1_HLVDSEL0_SIZE                             0x1
#define _HLVDCON1_HLVDSEL0_LENGTH                           0x1
#define _HLVDCON1_HLVDSEL0_MASK                             0x1
#define _HLVDCON1_HLVDSEL1_POSN                             0x1
#define _HLVDCON1_HLVDSEL1_POSITION                         0x1
#define _HLVDCON1_HLVDSEL1_SIZE                             0x1
#define _HLVDCON1_HLVDSEL1_LENGTH                           0x1
#define _HLVDCON1_HLVDSEL1_MASK                             0x2
#define _HLVDCON1_HLVDSEL2_POSN                             0x2
#define _HLVDCON1_HLVDSEL2_POSITION                         0x2
#define _HLVDCON1_HLVDSEL2_SIZE                             0x1
#define _HLVDCON1_HLVDSEL2_LENGTH                           0x1
#define _HLVDCON1_HLVDSEL2_MASK                             0x4
#define _HLVDCON1_HLVDSEL3_POSN                             0x3
#define _HLVDCON1_HLVDSEL3_POSITION                         0x3
#define _HLVDCON1_HLVDSEL3_SIZE                             0x1
#define _HLVDCON1_HLVDSEL3_LENGTH                           0x1
#define _HLVDCON1_HLVDSEL3_MASK                             0x8

// Register: FVRCON
#define FVRCON FVRCON
extern volatile unsigned char           FVRCON              __at(0xF31);
#ifndef _LIB_BUILD
asm("FVRCON equ 0F31h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADFVR                  :2;
        unsigned CDAFVR                 :2;
        unsigned TSRNG                  :1;
        unsigned TSEN                   :1;
        unsigned RDY                    :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned ADFVR0                 :1;
        unsigned ADFVR1                 :1;
        unsigned CDAFVR0                :1;
        unsigned CDAFVR1                :1;
        unsigned                        :2;
        unsigned FVRRDY                 :1;
        unsigned FVREN                  :1;
    };
} FVRCONbits_t;
extern volatile FVRCONbits_t FVRCONbits __at(0xF31);
// bitfield macros
#define _FVRCON_ADFVR_POSN                                  0x0
#define _FVRCON_ADFVR_POSITION                              0x0
#define _FVRCON_ADFVR_SIZE                                  0x2
#define _FVRCON_ADFVR_LENGTH                                0x2
#define _FVRCON_ADFVR_MASK                                  0x3
#define _FVRCON_CDAFVR_POSN                                 0x2
#define _FVRCON_CDAFVR_POSITION                             0x2
#define _FVRCON_CDAFVR_SIZE                                 0x2
#define _FVRCON_CDAFVR_LENGTH                               0x2
#define _FVRCON_CDAFVR_MASK                                 0xC
#define _FVRCON_TSRNG_POSN                                  0x4
#define _FVRCON_TSRNG_POSITION                              0x4
#define _FVRCON_TSRNG_SIZE                                  0x1
#define _FVRCON_TSRNG_LENGTH                                0x1
#define _FVRCON_TSRNG_MASK                                  0x10
#define _FVRCON_TSEN_POSN                                   0x5
#define _FVRCON_TSEN_POSITION                               0x5
#define _FVRCON_TSEN_SIZE                                   0x1
#define _FVRCON_TSEN_LENGTH                                 0x1
#define _FVRCON_TSEN_MASK                                   0x20
#define _FVRCON_RDY_POSN                                    0x6
#define _FVRCON_RDY_POSITION                                0x6
#define _FVRCON_RDY_SIZE                                    0x1
#define _FVRCON_RDY_LENGTH                                  0x1
#define _FVRCON_RDY_MASK                                    0x40
#define _FVRCON_EN_POSN                                     0x7
#define _FVRCON_EN_POSITION                                 0x7
#define _FVRCON_EN_SIZE                                     0x1
#define _FVRCON_EN_LENGTH                                   0x1
#define _FVRCON_EN_MASK                                     0x80
#define _FVRCON_ADFVR0_POSN                                 0x0
#define _FVRCON_ADFVR0_POSITION                             0x0
#define _FVRCON_ADFVR0_SIZE                                 0x1
#define _FVRCON_ADFVR0_LENGTH                               0x1
#define _FVRCON_ADFVR0_MASK                                 0x1
#define _FVRCON_ADFVR1_POSN                                 0x1
#define _FVRCON_ADFVR1_POSITION                             0x1
#define _FVRCON_ADFVR1_SIZE                                 0x1
#define _FVRCON_ADFVR1_LENGTH                               0x1
#define _FVRCON_ADFVR1_MASK                                 0x2
#define _FVRCON_CDAFVR0_POSN                                0x2
#define _FVRCON_CDAFVR0_POSITION                            0x2
#define _FVRCON_CDAFVR0_SIZE                                0x1
#define _FVRCON_CDAFVR0_LENGTH                              0x1
#define _FVRCON_CDAFVR0_MASK                                0x4
#define _FVRCON_CDAFVR1_POSN                                0x3
#define _FVRCON_CDAFVR1_POSITION                            0x3
#define _FVRCON_CDAFVR1_SIZE                                0x1
#define _FVRCON_CDAFVR1_LENGTH                              0x1
#define _FVRCON_CDAFVR1_MASK                                0x8
#define _FVRCON_FVRRDY_POSN                                 0x6
#define _FVRCON_FVRRDY_POSITION                             0x6
#define _FVRCON_FVRRDY_SIZE                                 0x1
#define _FVRCON_FVRRDY_LENGTH                               0x1
#define _FVRCON_FVRRDY_MASK                                 0x40
#define _FVRCON_FVREN_POSN                                  0x7
#define _FVRCON_FVREN_POSITION                              0x7
#define _FVRCON_FVREN_SIZE                                  0x1
#define _FVRCON_FVREN_LENGTH                                0x1
#define _FVRCON_FVREN_MASK                                  0x80

// Register: ZCDCON
#define ZCDCON ZCDCON
extern volatile unsigned char           ZCDCON              __at(0xF32);
#ifndef _LIB_BUILD
asm("ZCDCON equ 0F32h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INTN                   :1;
        unsigned INTP                   :1;
        unsigned                        :2;
        unsigned POL                    :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned SEN                    :1;
    };
    struct {
        unsigned ZCDINTN                :1;
        unsigned ZCDINTP                :1;
        unsigned                        :2;
        unsigned ZCDPOL                 :1;
        unsigned ZCDOUT                 :1;
        unsigned                        :1;
        unsigned ZCDSEN                 :1;
    };
} ZCDCONbits_t;
extern volatile ZCDCONbits_t ZCDCONbits __at(0xF32);
// bitfield macros
#define _ZCDCON_INTN_POSN                                   0x0
#define _ZCDCON_INTN_POSITION                               0x0
#define _ZCDCON_INTN_SIZE                                   0x1
#define _ZCDCON_INTN_LENGTH                                 0x1
#define _ZCDCON_INTN_MASK                                   0x1
#define _ZCDCON_INTP_POSN                                   0x1
#define _ZCDCON_INTP_POSITION                               0x1
#define _ZCDCON_INTP_SIZE                                   0x1
#define _ZCDCON_INTP_LENGTH                                 0x1
#define _ZCDCON_INTP_MASK                                   0x2
#define _ZCDCON_POL_POSN                                    0x4
#define _ZCDCON_POL_POSITION                                0x4
#define _ZCDCON_POL_SIZE                                    0x1
#define _ZCDCON_POL_LENGTH                                  0x1
#define _ZCDCON_POL_MASK                                    0x10
#define _ZCDCON_OUT_POSN                                    0x5
#define _ZCDCON_OUT_POSITION                                0x5
#define _ZCDCON_OUT_SIZE                                    0x1
#define _ZCDCON_OUT_LENGTH                                  0x1
#define _ZCDCON_OUT_MASK                                    0x20
#define _ZCDCON_SEN_POSN                                    0x7
#define _ZCDCON_SEN_POSITION                                0x7
#define _ZCDCON_SEN_SIZE                                    0x1
#define _ZCDCON_SEN_LENGTH                                  0x1
#define _ZCDCON_SEN_MASK                                    0x80
#define _ZCDCON_ZCDINTN_POSN                                0x0
#define _ZCDCON_ZCDINTN_POSITION                            0x0
#define _ZCDCON_ZCDINTN_SIZE                                0x1
#define _ZCDCON_ZCDINTN_LENGTH                              0x1
#define _ZCDCON_ZCDINTN_MASK                                0x1
#define _ZCDCON_ZCDINTP_POSN                                0x1
#define _ZCDCON_ZCDINTP_POSITION                            0x1
#define _ZCDCON_ZCDINTP_SIZE                                0x1
#define _ZCDCON_ZCDINTP_LENGTH                              0x1
#define _ZCDCON_ZCDINTP_MASK                                0x2
#define _ZCDCON_ZCDPOL_POSN                                 0x4
#define _ZCDCON_ZCDPOL_POSITION                             0x4
#define _ZCDCON_ZCDPOL_SIZE                                 0x1
#define _ZCDCON_ZCDPOL_LENGTH                               0x1
#define _ZCDCON_ZCDPOL_MASK                                 0x10
#define _ZCDCON_ZCDOUT_POSN                                 0x5
#define _ZCDCON_ZCDOUT_POSITION                             0x5
#define _ZCDCON_ZCDOUT_SIZE                                 0x1
#define _ZCDCON_ZCDOUT_LENGTH                               0x1
#define _ZCDCON_ZCDOUT_MASK                                 0x20
#define _ZCDCON_ZCDSEN_POSN                                 0x7
#define _ZCDCON_ZCDSEN_POSITION                             0x7
#define _ZCDCON_ZCDSEN_SIZE                                 0x1
#define _ZCDCON_ZCDSEN_LENGTH                               0x1
#define _ZCDCON_ZCDSEN_MASK                                 0x80

// Register: DAC1CON0
#define DAC1CON0 DAC1CON0
extern volatile unsigned char           DAC1CON0            __at(0xF33);
#ifndef _LIB_BUILD
asm("DAC1CON0 equ 0F33h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NSS                    :1;
        unsigned                        :1;
        unsigned PSS                    :2;
        unsigned OE2                    :1;
        unsigned OE1                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned DAC1NSS                :1;
        unsigned                        :1;
        unsigned DAC1PSS0               :1;
        unsigned DAC1PSS1               :1;
        unsigned DAC1OE2                :1;
        unsigned DAC1OE1                :1;
        unsigned                        :1;
        unsigned DAC1EN                 :1;
    };
    struct {
        unsigned                        :2;
        unsigned PSS0                   :1;
        unsigned PSS1                   :1;
    };
} DAC1CON0bits_t;
extern volatile DAC1CON0bits_t DAC1CON0bits __at(0xF33);
// bitfield macros
#define _DAC1CON0_NSS_POSN                                  0x0
#define _DAC1CON0_NSS_POSITION                              0x0
#define _DAC1CON0_NSS_SIZE                                  0x1
#define _DAC1CON0_NSS_LENGTH                                0x1
#define _DAC1CON0_NSS_MASK                                  0x1
#define _DAC1CON0_PSS_POSN                                  0x2
#define _DAC1CON0_PSS_POSITION                              0x2
#define _DAC1CON0_PSS_SIZE                                  0x2
#define _DAC1CON0_PSS_LENGTH                                0x2
#define _DAC1CON0_PSS_MASK                                  0xC
#define _DAC1CON0_OE2_POSN                                  0x4
#define _DAC1CON0_OE2_POSITION                              0x4
#define _DAC1CON0_OE2_SIZE                                  0x1
#define _DAC1CON0_OE2_LENGTH                                0x1
#define _DAC1CON0_OE2_MASK                                  0x10
#define _DAC1CON0_OE1_POSN                                  0x5
#define _DAC1CON0_OE1_POSITION                              0x5
#define _DAC1CON0_OE1_SIZE                                  0x1
#define _DAC1CON0_OE1_LENGTH                                0x1
#define _DAC1CON0_OE1_MASK                                  0x20
#define _DAC1CON0_EN_POSN                                   0x7
#define _DAC1CON0_EN_POSITION                               0x7
#define _DAC1CON0_EN_SIZE                                   0x1
#define _DAC1CON0_EN_LENGTH                                 0x1
#define _DAC1CON0_EN_MASK                                   0x80
#define _DAC1CON0_DAC1NSS_POSN                              0x0
#define _DAC1CON0_DAC1NSS_POSITION                          0x0
#define _DAC1CON0_DAC1NSS_SIZE                              0x1
#define _DAC1CON0_DAC1NSS_LENGTH                            0x1
#define _DAC1CON0_DAC1NSS_MASK                              0x1
#define _DAC1CON0_DAC1PSS0_POSN                             0x2
#define _DAC1CON0_DAC1PSS0_POSITION                         0x2
#define _DAC1CON0_DAC1PSS0_SIZE                             0x1
#define _DAC1CON0_DAC1PSS0_LENGTH                           0x1
#define _DAC1CON0_DAC1PSS0_MASK                             0x4
#define _DAC1CON0_DAC1PSS1_POSN                             0x3
#define _DAC1CON0_DAC1PSS1_POSITION                         0x3
#define _DAC1CON0_DAC1PSS1_SIZE                             0x1
#define _DAC1CON0_DAC1PSS1_LENGTH                           0x1
#define _DAC1CON0_DAC1PSS1_MASK                             0x8
#define _DAC1CON0_DAC1OE2_POSN                              0x4
#define _DAC1CON0_DAC1OE2_POSITION                          0x4
#define _DAC1CON0_DAC1OE2_SIZE                              0x1
#define _DAC1CON0_DAC1OE2_LENGTH                            0x1
#define _DAC1CON0_DAC1OE2_MASK                              0x10
#define _DAC1CON0_DAC1OE1_POSN                              0x5
#define _DAC1CON0_DAC1OE1_POSITION                          0x5
#define _DAC1CON0_DAC1OE1_SIZE                              0x1
#define _DAC1CON0_DAC1OE1_LENGTH                            0x1
#define _DAC1CON0_DAC1OE1_MASK                              0x20
#define _DAC1CON0_DAC1EN_POSN                               0x7
#define _DAC1CON0_DAC1EN_POSITION                           0x7
#define _DAC1CON0_DAC1EN_SIZE                               0x1
#define _DAC1CON0_DAC1EN_LENGTH                             0x1
#define _DAC1CON0_DAC1EN_MASK                               0x80
#define _DAC1CON0_PSS0_POSN                                 0x2
#define _DAC1CON0_PSS0_POSITION                             0x2
#define _DAC1CON0_PSS0_SIZE                                 0x1
#define _DAC1CON0_PSS0_LENGTH                               0x1
#define _DAC1CON0_PSS0_MASK                                 0x4
#define _DAC1CON0_PSS1_POSN                                 0x3
#define _DAC1CON0_PSS1_POSITION                             0x3
#define _DAC1CON0_PSS1_SIZE                                 0x1
#define _DAC1CON0_PSS1_LENGTH                               0x1
#define _DAC1CON0_PSS1_MASK                                 0x8

// Register: DAC1CON1
#define DAC1CON1 DAC1CON1
extern volatile unsigned char           DAC1CON1            __at(0xF34);
#ifndef _LIB_BUILD
asm("DAC1CON1 equ 0F34h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DAC1R                  :5;
    };
    struct {
        unsigned DAC1R0                 :1;
        unsigned DAC1R1                 :1;
        unsigned DAC1R2                 :1;
        unsigned DAC1R3                 :1;
        unsigned DAC1R4                 :1;
    };
} DAC1CON1bits_t;
extern volatile DAC1CON1bits_t DAC1CON1bits __at(0xF34);
// bitfield macros
#define _DAC1CON1_DAC1R_POSN                                0x0
#define _DAC1CON1_DAC1R_POSITION                            0x0
#define _DAC1CON1_DAC1R_SIZE                                0x5
#define _DAC1CON1_DAC1R_LENGTH                              0x5
#define _DAC1CON1_DAC1R_MASK                                0x1F
#define _DAC1CON1_DAC1R0_POSN                               0x0
#define _DAC1CON1_DAC1R0_POSITION                           0x0
#define _DAC1CON1_DAC1R0_SIZE                               0x1
#define _DAC1CON1_DAC1R0_LENGTH                             0x1
#define _DAC1CON1_DAC1R0_MASK                               0x1
#define _DAC1CON1_DAC1R1_POSN                               0x1
#define _DAC1CON1_DAC1R1_POSITION                           0x1
#define _DAC1CON1_DAC1R1_SIZE                               0x1
#define _DAC1CON1_DAC1R1_LENGTH                             0x1
#define _DAC1CON1_DAC1R1_MASK                               0x2
#define _DAC1CON1_DAC1R2_POSN                               0x2
#define _DAC1CON1_DAC1R2_POSITION                           0x2
#define _DAC1CON1_DAC1R2_SIZE                               0x1
#define _DAC1CON1_DAC1R2_LENGTH                             0x1
#define _DAC1CON1_DAC1R2_MASK                               0x4
#define _DAC1CON1_DAC1R3_POSN                               0x3
#define _DAC1CON1_DAC1R3_POSITION                           0x3
#define _DAC1CON1_DAC1R3_SIZE                               0x1
#define _DAC1CON1_DAC1R3_LENGTH                             0x1
#define _DAC1CON1_DAC1R3_MASK                               0x8
#define _DAC1CON1_DAC1R4_POSN                               0x4
#define _DAC1CON1_DAC1R4_POSITION                           0x4
#define _DAC1CON1_DAC1R4_SIZE                               0x1
#define _DAC1CON1_DAC1R4_LENGTH                             0x1
#define _DAC1CON1_DAC1R4_MASK                               0x10

// Register: CM2CON0
#define CM2CON0 CM2CON0
extern volatile unsigned char           CM2CON0             __at(0xF35);
#ifndef _LIB_BUILD
asm("CM2CON0 equ 0F35h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SYNC                   :1;
        unsigned HYS                    :1;
        unsigned                        :2;
        unsigned POL                    :1;
        unsigned                        :1;
        unsigned OUT                    :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned C2SYNC                 :1;
        unsigned C2HYS                  :1;
        unsigned                        :2;
        unsigned C2POL                  :1;
        unsigned                        :1;
        unsigned C2OUT                  :1;
        unsigned C2EN                   :1;
    };
} CM2CON0bits_t;
extern volatile CM2CON0bits_t CM2CON0bits __at(0xF35);
// bitfield macros
#define _CM2CON0_SYNC_POSN                                  0x0
#define _CM2CON0_SYNC_POSITION                              0x0
#define _CM2CON0_SYNC_SIZE                                  0x1
#define _CM2CON0_SYNC_LENGTH                                0x1
#define _CM2CON0_SYNC_MASK                                  0x1
#define _CM2CON0_HYS_POSN                                   0x1
#define _CM2CON0_HYS_POSITION                               0x1
#define _CM2CON0_HYS_SIZE                                   0x1
#define _CM2CON0_HYS_LENGTH                                 0x1
#define _CM2CON0_HYS_MASK                                   0x2
#define _CM2CON0_POL_POSN                                   0x4
#define _CM2CON0_POL_POSITION                               0x4
#define _CM2CON0_POL_SIZE                                   0x1
#define _CM2CON0_POL_LENGTH                                 0x1
#define _CM2CON0_POL_MASK                                   0x10
#define _CM2CON0_OUT_POSN                                   0x6
#define _CM2CON0_OUT_POSITION                               0x6
#define _CM2CON0_OUT_SIZE                                   0x1
#define _CM2CON0_OUT_LENGTH                                 0x1
#define _CM2CON0_OUT_MASK                                   0x40
#define _CM2CON0_EN_POSN                                    0x7
#define _CM2CON0_EN_POSITION                                0x7
#define _CM2CON0_EN_SIZE                                    0x1
#define _CM2CON0_EN_LENGTH                                  0x1
#define _CM2CON0_EN_MASK                                    0x80
#define _CM2CON0_C2SYNC_POSN                                0x0
#define _CM2CON0_C2SYNC_POSITION                            0x0
#define _CM2CON0_C2SYNC_SIZE                                0x1
#define _CM2CON0_C2SYNC_LENGTH                              0x1
#define _CM2CON0_C2SYNC_MASK                                0x1
#define _CM2CON0_C2HYS_POSN                                 0x1
#define _CM2CON0_C2HYS_POSITION                             0x1
#define _CM2CON0_C2HYS_SIZE                                 0x1
#define _CM2CON0_C2HYS_LENGTH                               0x1
#define _CM2CON0_C2HYS_MASK                                 0x2
#define _CM2CON0_C2POL_POSN                                 0x4
#define _CM2CON0_C2POL_POSITION                             0x4
#define _CM2CON0_C2POL_SIZE                                 0x1
#define _CM2CON0_C2POL_LENGTH                               0x1
#define _CM2CON0_C2POL_MASK                                 0x10
#define _CM2CON0_C2OUT_POSN                                 0x6
#define _CM2CON0_C2OUT_POSITION                             0x6
#define _CM2CON0_C2OUT_SIZE                                 0x1
#define _CM2CON0_C2OUT_LENGTH                               0x1
#define _CM2CON0_C2OUT_MASK                                 0x40
#define _CM2CON0_C2EN_POSN                                  0x7
#define _CM2CON0_C2EN_POSITION                              0x7
#define _CM2CON0_C2EN_SIZE                                  0x1
#define _CM2CON0_C2EN_LENGTH                                0x1
#define _CM2CON0_C2EN_MASK                                  0x80

// Register: CM2CON1
#define CM2CON1 CM2CON1
extern volatile unsigned char           CM2CON1             __at(0xF36);
#ifndef _LIB_BUILD
asm("CM2CON1 equ 0F36h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INTN                   :1;
        unsigned INTP                   :1;
    };
    struct {
        unsigned C2INTN                 :1;
        unsigned C2INTP                 :1;
    };
} CM2CON1bits_t;
extern volatile CM2CON1bits_t CM2CON1bits __at(0xF36);
// bitfield macros
#define _CM2CON1_INTN_POSN                                  0x0
#define _CM2CON1_INTN_POSITION                              0x0
#define _CM2CON1_INTN_SIZE                                  0x1
#define _CM2CON1_INTN_LENGTH                                0x1
#define _CM2CON1_INTN_MASK                                  0x1
#define _CM2CON1_INTP_POSN                                  0x1
#define _CM2CON1_INTP_POSITION                              0x1
#define _CM2CON1_INTP_SIZE                                  0x1
#define _CM2CON1_INTP_LENGTH                                0x1
#define _CM2CON1_INTP_MASK                                  0x2
#define _CM2CON1_C2INTN_POSN                                0x0
#define _CM2CON1_C2INTN_POSITION                            0x0
#define _CM2CON1_C2INTN_SIZE                                0x1
#define _CM2CON1_C2INTN_LENGTH                              0x1
#define _CM2CON1_C2INTN_MASK                                0x1
#define _CM2CON1_C2INTP_POSN                                0x1
#define _CM2CON1_C2INTP_POSITION                            0x1
#define _CM2CON1_C2INTP_SIZE                                0x1
#define _CM2CON1_C2INTP_LENGTH                              0x1
#define _CM2CON1_C2INTP_MASK                                0x2

// Register: CM2NCH
#define CM2NCH CM2NCH
extern volatile unsigned char           CM2NCH              __at(0xF37);
#ifndef _LIB_BUILD
asm("CM2NCH equ 0F37h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NCH                    :3;
    };
    struct {
        unsigned NCH0                   :1;
        unsigned NCH1                   :1;
        unsigned NCH2                   :1;
    };
    struct {
        unsigned C2NCH0                 :1;
        unsigned C2NCH1                 :1;
        unsigned C2NCH2                 :1;
    };
} CM2NCHbits_t;
extern volatile CM2NCHbits_t CM2NCHbits __at(0xF37);
// bitfield macros
#define _CM2NCH_NCH_POSN                                    0x0
#define _CM2NCH_NCH_POSITION                                0x0
#define _CM2NCH_NCH_SIZE                                    0x3
#define _CM2NCH_NCH_LENGTH                                  0x3
#define _CM2NCH_NCH_MASK                                    0x7
#define _CM2NCH_NCH0_POSN                                   0x0
#define _CM2NCH_NCH0_POSITION                               0x0
#define _CM2NCH_NCH0_SIZE                                   0x1
#define _CM2NCH_NCH0_LENGTH                                 0x1
#define _CM2NCH_NCH0_MASK                                   0x1
#define _CM2NCH_NCH1_POSN                                   0x1
#define _CM2NCH_NCH1_POSITION                               0x1
#define _CM2NCH_NCH1_SIZE                                   0x1
#define _CM2NCH_NCH1_LENGTH                                 0x1
#define _CM2NCH_NCH1_MASK                                   0x2
#define _CM2NCH_NCH2_POSN                                   0x2
#define _CM2NCH_NCH2_POSITION                               0x2
#define _CM2NCH_NCH2_SIZE                                   0x1
#define _CM2NCH_NCH2_LENGTH                                 0x1
#define _CM2NCH_NCH2_MASK                                   0x4
#define _CM2NCH_C2NCH0_POSN                                 0x0
#define _CM2NCH_C2NCH0_POSITION                             0x0
#define _CM2NCH_C2NCH0_SIZE                                 0x1
#define _CM2NCH_C2NCH0_LENGTH                               0x1
#define _CM2NCH_C2NCH0_MASK                                 0x1
#define _CM2NCH_C2NCH1_POSN                                 0x1
#define _CM2NCH_C2NCH1_POSITION                             0x1
#define _CM2NCH_C2NCH1_SIZE                                 0x1
#define _CM2NCH_C2NCH1_LENGTH                               0x1
#define _CM2NCH_C2NCH1_MASK                                 0x2
#define _CM2NCH_C2NCH2_POSN                                 0x2
#define _CM2NCH_C2NCH2_POSITION                             0x2
#define _CM2NCH_C2NCH2_SIZE                                 0x1
#define _CM2NCH_C2NCH2_LENGTH                               0x1
#define _CM2NCH_C2NCH2_MASK                                 0x4

// Register: CM2PCH
#define CM2PCH CM2PCH
extern volatile unsigned char           CM2PCH              __at(0xF38);
#ifndef _LIB_BUILD
asm("CM2PCH equ 0F38h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PCH                    :3;
    };
    struct {
        unsigned PCH0                   :1;
        unsigned PCH1                   :1;
        unsigned PCH2                   :1;
    };
    struct {
        unsigned C2PCH0                 :1;
        unsigned C2PCH1                 :1;
        unsigned C2PCH2                 :1;
    };
} CM2PCHbits_t;
extern volatile CM2PCHbits_t CM2PCHbits __at(0xF38);
// bitfield macros
#define _CM2PCH_PCH_POSN                                    0x0
#define _CM2PCH_PCH_POSITION                                0x0
#define _CM2PCH_PCH_SIZE                                    0x3
#define _CM2PCH_PCH_LENGTH                                  0x3
#define _CM2PCH_PCH_MASK                                    0x7
#define _CM2PCH_PCH0_POSN                                   0x0
#define _CM2PCH_PCH0_POSITION                               0x0
#define _CM2PCH_PCH0_SIZE                                   0x1
#define _CM2PCH_PCH0_LENGTH                                 0x1
#define _CM2PCH_PCH0_MASK                                   0x1
#define _CM2PCH_PCH1_POSN                                   0x1
#define _CM2PCH_PCH1_POSITION                               0x1
#define _CM2PCH_PCH1_SIZE                                   0x1
#define _CM2PCH_PCH1_LENGTH                                 0x1
#define _CM2PCH_PCH1_MASK                                   0x2
#define _CM2PCH_PCH2_POSN                                   0x2
#define _CM2PCH_PCH2_POSITION                               0x2
#define _CM2PCH_PCH2_SIZE                                   0x1
#define _CM2PCH_PCH2_LENGTH                                 0x1
#define _CM2PCH_PCH2_MASK                                   0x4
#define _CM2PCH_C2PCH0_POSN                                 0x0
#define _CM2PCH_C2PCH0_POSITION                             0x0
#define _CM2PCH_C2PCH0_SIZE                                 0x1
#define _CM2PCH_C2PCH0_LENGTH                               0x1
#define _CM2PCH_C2PCH0_MASK                                 0x1
#define _CM2PCH_C2PCH1_POSN                                 0x1
#define _CM2PCH_C2PCH1_POSITION                             0x1
#define _CM2PCH_C2PCH1_SIZE                                 0x1
#define _CM2PCH_C2PCH1_LENGTH                               0x1
#define _CM2PCH_C2PCH1_MASK                                 0x2
#define _CM2PCH_C2PCH2_POSN                                 0x2
#define _CM2PCH_C2PCH2_POSITION                             0x2
#define _CM2PCH_C2PCH2_SIZE                                 0x1
#define _CM2PCH_C2PCH2_LENGTH                               0x1
#define _CM2PCH_C2PCH2_MASK                                 0x4

// Register: CM1CON0
#define CM1CON0 CM1CON0
extern volatile unsigned char           CM1CON0             __at(0xF39);
#ifndef _LIB_BUILD
asm("CM1CON0 equ 0F39h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SYNC                   :1;
        unsigned HYS                    :1;
        unsigned                        :2;
        unsigned POL                    :1;
        unsigned                        :1;
        unsigned OUT                    :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned C1SYNC                 :1;
        unsigned C1HYS                  :1;
        unsigned                        :2;
        unsigned C1POL                  :1;
        unsigned                        :1;
        unsigned C1OUT                  :1;
        unsigned C1EN                   :1;
    };
} CM1CON0bits_t;
extern volatile CM1CON0bits_t CM1CON0bits __at(0xF39);
// bitfield macros
#define _CM1CON0_SYNC_POSN                                  0x0
#define _CM1CON0_SYNC_POSITION                              0x0
#define _CM1CON0_SYNC_SIZE                                  0x1
#define _CM1CON0_SYNC_LENGTH                                0x1
#define _CM1CON0_SYNC_MASK                                  0x1
#define _CM1CON0_HYS_POSN                                   0x1
#define _CM1CON0_HYS_POSITION                               0x1
#define _CM1CON0_HYS_SIZE                                   0x1
#define _CM1CON0_HYS_LENGTH                                 0x1
#define _CM1CON0_HYS_MASK                                   0x2
#define _CM1CON0_POL_POSN                                   0x4
#define _CM1CON0_POL_POSITION                               0x4
#define _CM1CON0_POL_SIZE                                   0x1
#define _CM1CON0_POL_LENGTH                                 0x1
#define _CM1CON0_POL_MASK                                   0x10
#define _CM1CON0_OUT_POSN                                   0x6
#define _CM1CON0_OUT_POSITION                               0x6
#define _CM1CON0_OUT_SIZE                                   0x1
#define _CM1CON0_OUT_LENGTH                                 0x1
#define _CM1CON0_OUT_MASK                                   0x40
#define _CM1CON0_EN_POSN                                    0x7
#define _CM1CON0_EN_POSITION                                0x7
#define _CM1CON0_EN_SIZE                                    0x1
#define _CM1CON0_EN_LENGTH                                  0x1
#define _CM1CON0_EN_MASK                                    0x80
#define _CM1CON0_C1SYNC_POSN                                0x0
#define _CM1CON0_C1SYNC_POSITION                            0x0
#define _CM1CON0_C1SYNC_SIZE                                0x1
#define _CM1CON0_C1SYNC_LENGTH                              0x1
#define _CM1CON0_C1SYNC_MASK                                0x1
#define _CM1CON0_C1HYS_POSN                                 0x1
#define _CM1CON0_C1HYS_POSITION                             0x1
#define _CM1CON0_C1HYS_SIZE                                 0x1
#define _CM1CON0_C1HYS_LENGTH                               0x1
#define _CM1CON0_C1HYS_MASK                                 0x2
#define _CM1CON0_C1POL_POSN                                 0x4
#define _CM1CON0_C1POL_POSITION                             0x4
#define _CM1CON0_C1POL_SIZE                                 0x1
#define _CM1CON0_C1POL_LENGTH                               0x1
#define _CM1CON0_C1POL_MASK                                 0x10
#define _CM1CON0_C1OUT_POSN                                 0x6
#define _CM1CON0_C1OUT_POSITION                             0x6
#define _CM1CON0_C1OUT_SIZE                                 0x1
#define _CM1CON0_C1OUT_LENGTH                               0x1
#define _CM1CON0_C1OUT_MASK                                 0x40
#define _CM1CON0_C1EN_POSN                                  0x7
#define _CM1CON0_C1EN_POSITION                              0x7
#define _CM1CON0_C1EN_SIZE                                  0x1
#define _CM1CON0_C1EN_LENGTH                                0x1
#define _CM1CON0_C1EN_MASK                                  0x80

// Register: CM1CON1
#define CM1CON1 CM1CON1
extern volatile unsigned char           CM1CON1             __at(0xF3A);
#ifndef _LIB_BUILD
asm("CM1CON1 equ 0F3Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INTN                   :1;
        unsigned INTP                   :1;
    };
    struct {
        unsigned C1INTN                 :1;
        unsigned C1INTP                 :1;
    };
} CM1CON1bits_t;
extern volatile CM1CON1bits_t CM1CON1bits __at(0xF3A);
// bitfield macros
#define _CM1CON1_INTN_POSN                                  0x0
#define _CM1CON1_INTN_POSITION                              0x0
#define _CM1CON1_INTN_SIZE                                  0x1
#define _CM1CON1_INTN_LENGTH                                0x1
#define _CM1CON1_INTN_MASK                                  0x1
#define _CM1CON1_INTP_POSN                                  0x1
#define _CM1CON1_INTP_POSITION                              0x1
#define _CM1CON1_INTP_SIZE                                  0x1
#define _CM1CON1_INTP_LENGTH                                0x1
#define _CM1CON1_INTP_MASK                                  0x2
#define _CM1CON1_C1INTN_POSN                                0x0
#define _CM1CON1_C1INTN_POSITION                            0x0
#define _CM1CON1_C1INTN_SIZE                                0x1
#define _CM1CON1_C1INTN_LENGTH                              0x1
#define _CM1CON1_C1INTN_MASK                                0x1
#define _CM1CON1_C1INTP_POSN                                0x1
#define _CM1CON1_C1INTP_POSITION                            0x1
#define _CM1CON1_C1INTP_SIZE                                0x1
#define _CM1CON1_C1INTP_LENGTH                              0x1
#define _CM1CON1_C1INTP_MASK                                0x2

// Register: CM1NCH
#define CM1NCH CM1NCH
extern volatile unsigned char           CM1NCH              __at(0xF3B);
#ifndef _LIB_BUILD
asm("CM1NCH equ 0F3Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NCH                    :3;
    };
    struct {
        unsigned NCH0                   :1;
        unsigned NCH1                   :1;
        unsigned NCH2                   :1;
    };
    struct {
        unsigned C1NCH0                 :1;
        unsigned C1NCH1                 :1;
        unsigned C1NCH2                 :1;
    };
} CM1NCHbits_t;
extern volatile CM1NCHbits_t CM1NCHbits __at(0xF3B);
// bitfield macros
#define _CM1NCH_NCH_POSN                                    0x0
#define _CM1NCH_NCH_POSITION                                0x0
#define _CM1NCH_NCH_SIZE                                    0x3
#define _CM1NCH_NCH_LENGTH                                  0x3
#define _CM1NCH_NCH_MASK                                    0x7
#define _CM1NCH_NCH0_POSN                                   0x0
#define _CM1NCH_NCH0_POSITION                               0x0
#define _CM1NCH_NCH0_SIZE                                   0x1
#define _CM1NCH_NCH0_LENGTH                                 0x1
#define _CM1NCH_NCH0_MASK                                   0x1
#define _CM1NCH_NCH1_POSN                                   0x1
#define _CM1NCH_NCH1_POSITION                               0x1
#define _CM1NCH_NCH1_SIZE                                   0x1
#define _CM1NCH_NCH1_LENGTH                                 0x1
#define _CM1NCH_NCH1_MASK                                   0x2
#define _CM1NCH_NCH2_POSN                                   0x2
#define _CM1NCH_NCH2_POSITION                               0x2
#define _CM1NCH_NCH2_SIZE                                   0x1
#define _CM1NCH_NCH2_LENGTH                                 0x1
#define _CM1NCH_NCH2_MASK                                   0x4
#define _CM1NCH_C1NCH0_POSN                                 0x0
#define _CM1NCH_C1NCH0_POSITION                             0x0
#define _CM1NCH_C1NCH0_SIZE                                 0x1
#define _CM1NCH_C1NCH0_LENGTH                               0x1
#define _CM1NCH_C1NCH0_MASK                                 0x1
#define _CM1NCH_C1NCH1_POSN                                 0x1
#define _CM1NCH_C1NCH1_POSITION                             0x1
#define _CM1NCH_C1NCH1_SIZE                                 0x1
#define _CM1NCH_C1NCH1_LENGTH                               0x1
#define _CM1NCH_C1NCH1_MASK                                 0x2
#define _CM1NCH_C1NCH2_POSN                                 0x2
#define _CM1NCH_C1NCH2_POSITION                             0x2
#define _CM1NCH_C1NCH2_SIZE                                 0x1
#define _CM1NCH_C1NCH2_LENGTH                               0x1
#define _CM1NCH_C1NCH2_MASK                                 0x4

// Register: CM1PCH
#define CM1PCH CM1PCH
extern volatile unsigned char           CM1PCH              __at(0xF3C);
#ifndef _LIB_BUILD
asm("CM1PCH equ 0F3Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PCH                    :3;
    };
    struct {
        unsigned PCH0                   :1;
        unsigned PCH1                   :1;
        unsigned PCH2                   :1;
    };
    struct {
        unsigned C1PCH0                 :1;
        unsigned C1PCH1                 :1;
        unsigned C1PCH2                 :1;
    };
} CM1PCHbits_t;
extern volatile CM1PCHbits_t CM1PCHbits __at(0xF3C);
// bitfield macros
#define _CM1PCH_PCH_POSN                                    0x0
#define _CM1PCH_PCH_POSITION                                0x0
#define _CM1PCH_PCH_SIZE                                    0x3
#define _CM1PCH_PCH_LENGTH                                  0x3
#define _CM1PCH_PCH_MASK                                    0x7
#define _CM1PCH_PCH0_POSN                                   0x0
#define _CM1PCH_PCH0_POSITION                               0x0
#define _CM1PCH_PCH0_SIZE                                   0x1
#define _CM1PCH_PCH0_LENGTH                                 0x1
#define _CM1PCH_PCH0_MASK                                   0x1
#define _CM1PCH_PCH1_POSN                                   0x1
#define _CM1PCH_PCH1_POSITION                               0x1
#define _CM1PCH_PCH1_SIZE                                   0x1
#define _CM1PCH_PCH1_LENGTH                                 0x1
#define _CM1PCH_PCH1_MASK                                   0x2
#define _CM1PCH_PCH2_POSN                                   0x2
#define _CM1PCH_PCH2_POSITION                               0x2
#define _CM1PCH_PCH2_SIZE                                   0x1
#define _CM1PCH_PCH2_LENGTH                                 0x1
#define _CM1PCH_PCH2_MASK                                   0x4
#define _CM1PCH_C1PCH0_POSN                                 0x0
#define _CM1PCH_C1PCH0_POSITION                             0x0
#define _CM1PCH_C1PCH0_SIZE                                 0x1
#define _CM1PCH_C1PCH0_LENGTH                               0x1
#define _CM1PCH_C1PCH0_MASK                                 0x1
#define _CM1PCH_C1PCH1_POSN                                 0x1
#define _CM1PCH_C1PCH1_POSITION                             0x1
#define _CM1PCH_C1PCH1_SIZE                                 0x1
#define _CM1PCH_C1PCH1_LENGTH                               0x1
#define _CM1PCH_C1PCH1_MASK                                 0x2
#define _CM1PCH_C1PCH2_POSN                                 0x2
#define _CM1PCH_C1PCH2_POSITION                             0x2
#define _CM1PCH_C1PCH2_SIZE                                 0x1
#define _CM1PCH_C1PCH2_LENGTH                               0x1
#define _CM1PCH_C1PCH2_MASK                                 0x4

// Register: CMOUT
#define CMOUT CMOUT
extern volatile unsigned char           CMOUT               __at(0xF3D);
#ifndef _LIB_BUILD
asm("CMOUT equ 0F3Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MC1OUT                 :1;
        unsigned MC2OUT                 :1;
    };
} CMOUTbits_t;
extern volatile CMOUTbits_t CMOUTbits __at(0xF3D);
// bitfield macros
#define _CMOUT_MC1OUT_POSN                                  0x0
#define _CMOUT_MC1OUT_POSITION                              0x0
#define _CMOUT_MC1OUT_SIZE                                  0x1
#define _CMOUT_MC1OUT_LENGTH                                0x1
#define _CMOUT_MC1OUT_MASK                                  0x1
#define _CMOUT_MC2OUT_POSN                                  0x1
#define _CMOUT_MC2OUT_POSITION                              0x1
#define _CMOUT_MC2OUT_SIZE                                  0x1
#define _CMOUT_MC2OUT_LENGTH                                0x1
#define _CMOUT_MC2OUT_MASK                                  0x2

// Register: CLKRCON
#define CLKRCON CLKRCON
extern volatile unsigned char           CLKRCON             __at(0xF3E);
#ifndef _LIB_BUILD
asm("CLKRCON equ 0F3Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DIV                    :3;
        unsigned DC                     :2;
        unsigned                        :2;
        unsigned EN                     :1;
    };
    struct {
        unsigned CLKRDIV0               :1;
        unsigned CLKRDIV1               :1;
        unsigned CLKRDIV2               :1;
        unsigned CLKRDC0                :1;
        unsigned CLKRDC1                :1;
        unsigned                        :2;
        unsigned CLKREN                 :1;
    };
    struct {
        unsigned DIV0                   :1;
        unsigned DIV1                   :1;
        unsigned DIV2                   :1;
        unsigned DC0                    :1;
        unsigned DC1                    :1;
    };
} CLKRCONbits_t;
extern volatile CLKRCONbits_t CLKRCONbits __at(0xF3E);
// bitfield macros
#define _CLKRCON_DIV_POSN                                   0x0
#define _CLKRCON_DIV_POSITION                               0x0
#define _CLKRCON_DIV_SIZE                                   0x3
#define _CLKRCON_DIV_LENGTH                                 0x3
#define _CLKRCON_DIV_MASK                                   0x7
#define _CLKRCON_DC_POSN                                    0x3
#define _CLKRCON_DC_POSITION                                0x3
#define _CLKRCON_DC_SIZE                                    0x2
#define _CLKRCON_DC_LENGTH                                  0x2
#define _CLKRCON_DC_MASK                                    0x18
#define _CLKRCON_EN_POSN                                    0x7
#define _CLKRCON_EN_POSITION                                0x7
#define _CLKRCON_EN_SIZE                                    0x1
#define _CLKRCON_EN_LENGTH                                  0x1
#define _CLKRCON_EN_MASK                                    0x80
#define _CLKRCON_CLKRDIV0_POSN                              0x0
#define _CLKRCON_CLKRDIV0_POSITION                          0x0
#define _CLKRCON_CLKRDIV0_SIZE                              0x1
#define _CLKRCON_CLKRDIV0_LENGTH                            0x1
#define _CLKRCON_CLKRDIV0_MASK                              0x1
#define _CLKRCON_CLKRDIV1_POSN                              0x1
#define _CLKRCON_CLKRDIV1_POSITION                          0x1
#define _CLKRCON_CLKRDIV1_SIZE                              0x1
#define _CLKRCON_CLKRDIV1_LENGTH                            0x1
#define _CLKRCON_CLKRDIV1_MASK                              0x2
#define _CLKRCON_CLKRDIV2_POSN                              0x2
#define _CLKRCON_CLKRDIV2_POSITION                          0x2
#define _CLKRCON_CLKRDIV2_SIZE                              0x1
#define _CLKRCON_CLKRDIV2_LENGTH                            0x1
#define _CLKRCON_CLKRDIV2_MASK                              0x4
#define _CLKRCON_CLKRDC0_POSN                               0x3
#define _CLKRCON_CLKRDC0_POSITION                           0x3
#define _CLKRCON_CLKRDC0_SIZE                               0x1
#define _CLKRCON_CLKRDC0_LENGTH                             0x1
#define _CLKRCON_CLKRDC0_MASK                               0x8
#define _CLKRCON_CLKRDC1_POSN                               0x4
#define _CLKRCON_CLKRDC1_POSITION                           0x4
#define _CLKRCON_CLKRDC1_SIZE                               0x1
#define _CLKRCON_CLKRDC1_LENGTH                             0x1
#define _CLKRCON_CLKRDC1_MASK                               0x10
#define _CLKRCON_CLKREN_POSN                                0x7
#define _CLKRCON_CLKREN_POSITION                            0x7
#define _CLKRCON_CLKREN_SIZE                                0x1
#define _CLKRCON_CLKREN_LENGTH                              0x1
#define _CLKRCON_CLKREN_MASK                                0x80
#define _CLKRCON_DIV0_POSN                                  0x0
#define _CLKRCON_DIV0_POSITION                              0x0
#define _CLKRCON_DIV0_SIZE                                  0x1
#define _CLKRCON_DIV0_LENGTH                                0x1
#define _CLKRCON_DIV0_MASK                                  0x1
#define _CLKRCON_DIV1_POSN                                  0x1
#define _CLKRCON_DIV1_POSITION                              0x1
#define _CLKRCON_DIV1_SIZE                                  0x1
#define _CLKRCON_DIV1_LENGTH                                0x1
#define _CLKRCON_DIV1_MASK                                  0x2
#define _CLKRCON_DIV2_POSN                                  0x2
#define _CLKRCON_DIV2_POSITION                              0x2
#define _CLKRCON_DIV2_SIZE                                  0x1
#define _CLKRCON_DIV2_LENGTH                                0x1
#define _CLKRCON_DIV2_MASK                                  0x4
#define _CLKRCON_DC0_POSN                                   0x3
#define _CLKRCON_DC0_POSITION                               0x3
#define _CLKRCON_DC0_SIZE                                   0x1
#define _CLKRCON_DC0_LENGTH                                 0x1
#define _CLKRCON_DC0_MASK                                   0x8
#define _CLKRCON_DC1_POSN                                   0x4
#define _CLKRCON_DC1_POSITION                               0x4
#define _CLKRCON_DC1_SIZE                                   0x1
#define _CLKRCON_DC1_LENGTH                                 0x1
#define _CLKRCON_DC1_MASK                                   0x10

// Register: CLKRCLK
#define CLKRCLK CLKRCLK
extern volatile unsigned char           CLKRCLK             __at(0xF3F);
#ifndef _LIB_BUILD
asm("CLKRCLK equ 0F3Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLK                    :3;
    };
    struct {
        unsigned CLKRCLK0               :1;
        unsigned CLKRCLK1               :1;
        unsigned CLKRCLK2               :1;
    };
    struct {
        unsigned CLK0                   :1;
        unsigned CLK1                   :1;
        unsigned CLK2                   :1;
    };
} CLKRCLKbits_t;
extern volatile CLKRCLKbits_t CLKRCLKbits __at(0xF3F);
// bitfield macros
#define _CLKRCLK_CLK_POSN                                   0x0
#define _CLKRCLK_CLK_POSITION                               0x0
#define _CLKRCLK_CLK_SIZE                                   0x3
#define _CLKRCLK_CLK_LENGTH                                 0x3
#define _CLKRCLK_CLK_MASK                                   0x7
#define _CLKRCLK_CLKRCLK0_POSN                              0x0
#define _CLKRCLK_CLKRCLK0_POSITION                          0x0
#define _CLKRCLK_CLKRCLK0_SIZE                              0x1
#define _CLKRCLK_CLKRCLK0_LENGTH                            0x1
#define _CLKRCLK_CLKRCLK0_MASK                              0x1
#define _CLKRCLK_CLKRCLK1_POSN                              0x1
#define _CLKRCLK_CLKRCLK1_POSITION                          0x1
#define _CLKRCLK_CLKRCLK1_SIZE                              0x1
#define _CLKRCLK_CLKRCLK1_LENGTH                            0x1
#define _CLKRCLK_CLKRCLK1_MASK                              0x2
#define _CLKRCLK_CLKRCLK2_POSN                              0x2
#define _CLKRCLK_CLKRCLK2_POSITION                          0x2
#define _CLKRCLK_CLKRCLK2_SIZE                              0x1
#define _CLKRCLK_CLKRCLK2_LENGTH                            0x1
#define _CLKRCLK_CLKRCLK2_MASK                              0x4
#define _CLKRCLK_CLK0_POSN                                  0x0
#define _CLKRCLK_CLK0_POSITION                              0x0
#define _CLKRCLK_CLK0_SIZE                                  0x1
#define _CLKRCLK_CLK0_LENGTH                                0x1
#define _CLKRCLK_CLK0_MASK                                  0x1
#define _CLKRCLK_CLK1_POSN                                  0x1
#define _CLKRCLK_CLK1_POSITION                              0x1
#define _CLKRCLK_CLK1_SIZE                                  0x1
#define _CLKRCLK_CLK1_LENGTH                                0x1
#define _CLKRCLK_CLK1_MASK                                  0x2
#define _CLKRCLK_CLK2_POSN                                  0x2
#define _CLKRCLK_CLK2_POSITION                              0x2
#define _CLKRCLK_CLK2_SIZE                                  0x1
#define _CLKRCLK_CLK2_LENGTH                                0x1
#define _CLKRCLK_CLK2_MASK                                  0x4

// Register: CWG1CLK
#define CWG1CLK CWG1CLK
extern volatile unsigned char           CWG1CLK             __at(0xF40);
#ifndef _LIB_BUILD
asm("CWG1CLK equ 0F40h");
#endif
// aliases
extern volatile unsigned char           CWG1CLKCON          __at(0xF40);
#ifndef _LIB_BUILD
asm("CWG1CLKCON equ 0F40h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CS                     :1;
    };
    struct {
        unsigned CWG1CS                 :1;
    };
} CWG1CLKbits_t;
extern volatile CWG1CLKbits_t CWG1CLKbits __at(0xF40);
// bitfield macros
#define _CWG1CLK_CS_POSN                                    0x0
#define _CWG1CLK_CS_POSITION                                0x0
#define _CWG1CLK_CS_SIZE                                    0x1
#define _CWG1CLK_CS_LENGTH                                  0x1
#define _CWG1CLK_CS_MASK                                    0x1
#define _CWG1CLK_CWG1CS_POSN                                0x0
#define _CWG1CLK_CWG1CS_POSITION                            0x0
#define _CWG1CLK_CWG1CS_SIZE                                0x1
#define _CWG1CLK_CWG1CS_LENGTH                              0x1
#define _CWG1CLK_CWG1CS_MASK                                0x1
// alias bitfield definitions
typedef union {
    struct {
        unsigned CS                     :1;
    };
    struct {
        unsigned CWG1CS                 :1;
    };
} CWG1CLKCONbits_t;
extern volatile CWG1CLKCONbits_t CWG1CLKCONbits __at(0xF40);
// bitfield macros
#define _CWG1CLKCON_CS_POSN                                 0x0
#define _CWG1CLKCON_CS_POSITION                             0x0
#define _CWG1CLKCON_CS_SIZE                                 0x1
#define _CWG1CLKCON_CS_LENGTH                               0x1
#define _CWG1CLKCON_CS_MASK                                 0x1
#define _CWG1CLKCON_CWG1CS_POSN                             0x0
#define _CWG1CLKCON_CWG1CS_POSITION                         0x0
#define _CWG1CLKCON_CWG1CS_SIZE                             0x1
#define _CWG1CLKCON_CWG1CS_LENGTH                           0x1
#define _CWG1CLKCON_CWG1CS_MASK                             0x1

// Register: CWG1ISM
#define CWG1ISM CWG1ISM
extern volatile unsigned char           CWG1ISM             __at(0xF41);
#ifndef _LIB_BUILD
asm("CWG1ISM equ 0F41h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IS                     :4;
    };
    struct {
        unsigned CWG1ISM0               :1;
        unsigned CWG1ISM1               :1;
        unsigned CWG1ISM2               :1;
    };
} CWG1ISMbits_t;
extern volatile CWG1ISMbits_t CWG1ISMbits __at(0xF41);
// bitfield macros
#define _CWG1ISM_IS_POSN                                    0x0
#define _CWG1ISM_IS_POSITION                                0x0
#define _CWG1ISM_IS_SIZE                                    0x4
#define _CWG1ISM_IS_LENGTH                                  0x4
#define _CWG1ISM_IS_MASK                                    0xF
#define _CWG1ISM_CWG1ISM0_POSN                              0x0
#define _CWG1ISM_CWG1ISM0_POSITION                          0x0
#define _CWG1ISM_CWG1ISM0_SIZE                              0x1
#define _CWG1ISM_CWG1ISM0_LENGTH                            0x1
#define _CWG1ISM_CWG1ISM0_MASK                              0x1
#define _CWG1ISM_CWG1ISM1_POSN                              0x1
#define _CWG1ISM_CWG1ISM1_POSITION                          0x1
#define _CWG1ISM_CWG1ISM1_SIZE                              0x1
#define _CWG1ISM_CWG1ISM1_LENGTH                            0x1
#define _CWG1ISM_CWG1ISM1_MASK                              0x2
#define _CWG1ISM_CWG1ISM2_POSN                              0x2
#define _CWG1ISM_CWG1ISM2_POSITION                          0x2
#define _CWG1ISM_CWG1ISM2_SIZE                              0x1
#define _CWG1ISM_CWG1ISM2_LENGTH                            0x1
#define _CWG1ISM_CWG1ISM2_MASK                              0x4

// Register: CWG1DBR
#define CWG1DBR CWG1DBR
extern volatile unsigned char           CWG1DBR             __at(0xF42);
#ifndef _LIB_BUILD
asm("CWG1DBR equ 0F42h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DBR                    :6;
    };
    struct {
        unsigned DBR0                   :1;
        unsigned DBR1                   :1;
        unsigned DBR2                   :1;
        unsigned DBR3                   :1;
        unsigned DBR4                   :1;
        unsigned DBR5                   :1;
    };
    struct {
        unsigned CWG1DBR                :6;
    };
    struct {
        unsigned CWG1DBR0               :1;
        unsigned CWG1DBR1               :1;
        unsigned CWG1DBR2               :1;
        unsigned CWG1DBR3               :1;
        unsigned CWG1DBR4               :1;
        unsigned CWG1DBR5               :1;
    };
} CWG1DBRbits_t;
extern volatile CWG1DBRbits_t CWG1DBRbits __at(0xF42);
// bitfield macros
#define _CWG1DBR_DBR_POSN                                   0x0
#define _CWG1DBR_DBR_POSITION                               0x0
#define _CWG1DBR_DBR_SIZE                                   0x6
#define _CWG1DBR_DBR_LENGTH                                 0x6
#define _CWG1DBR_DBR_MASK                                   0x3F
#define _CWG1DBR_DBR0_POSN                                  0x0
#define _CWG1DBR_DBR0_POSITION                              0x0
#define _CWG1DBR_DBR0_SIZE                                  0x1
#define _CWG1DBR_DBR0_LENGTH                                0x1
#define _CWG1DBR_DBR0_MASK                                  0x1
#define _CWG1DBR_DBR1_POSN                                  0x1
#define _CWG1DBR_DBR1_POSITION                              0x1
#define _CWG1DBR_DBR1_SIZE                                  0x1
#define _CWG1DBR_DBR1_LENGTH                                0x1
#define _CWG1DBR_DBR1_MASK                                  0x2
#define _CWG1DBR_DBR2_POSN                                  0x2
#define _CWG1DBR_DBR2_POSITION                              0x2
#define _CWG1DBR_DBR2_SIZE                                  0x1
#define _CWG1DBR_DBR2_LENGTH                                0x1
#define _CWG1DBR_DBR2_MASK                                  0x4
#define _CWG1DBR_DBR3_POSN                                  0x3
#define _CWG1DBR_DBR3_POSITION                              0x3
#define _CWG1DBR_DBR3_SIZE                                  0x1
#define _CWG1DBR_DBR3_LENGTH                                0x1
#define _CWG1DBR_DBR3_MASK                                  0x8
#define _CWG1DBR_DBR4_POSN                                  0x4
#define _CWG1DBR_DBR4_POSITION                              0x4
#define _CWG1DBR_DBR4_SIZE                                  0x1
#define _CWG1DBR_DBR4_LENGTH                                0x1
#define _CWG1DBR_DBR4_MASK                                  0x10
#define _CWG1DBR_DBR5_POSN                                  0x5
#define _CWG1DBR_DBR5_POSITION                              0x5
#define _CWG1DBR_DBR5_SIZE                                  0x1
#define _CWG1DBR_DBR5_LENGTH                                0x1
#define _CWG1DBR_DBR5_MASK                                  0x20
#define _CWG1DBR_CWG1DBR_POSN                               0x0
#define _CWG1DBR_CWG1DBR_POSITION                           0x0
#define _CWG1DBR_CWG1DBR_SIZE                               0x6
#define _CWG1DBR_CWG1DBR_LENGTH                             0x6
#define _CWG1DBR_CWG1DBR_MASK                               0x3F
#define _CWG1DBR_CWG1DBR0_POSN                              0x0
#define _CWG1DBR_CWG1DBR0_POSITION                          0x0
#define _CWG1DBR_CWG1DBR0_SIZE                              0x1
#define _CWG1DBR_CWG1DBR0_LENGTH                            0x1
#define _CWG1DBR_CWG1DBR0_MASK                              0x1
#define _CWG1DBR_CWG1DBR1_POSN                              0x1
#define _CWG1DBR_CWG1DBR1_POSITION                          0x1
#define _CWG1DBR_CWG1DBR1_SIZE                              0x1
#define _CWG1DBR_CWG1DBR1_LENGTH                            0x1
#define _CWG1DBR_CWG1DBR1_MASK                              0x2
#define _CWG1DBR_CWG1DBR2_POSN                              0x2
#define _CWG1DBR_CWG1DBR2_POSITION                          0x2
#define _CWG1DBR_CWG1DBR2_SIZE                              0x1
#define _CWG1DBR_CWG1DBR2_LENGTH                            0x1
#define _CWG1DBR_CWG1DBR2_MASK                              0x4
#define _CWG1DBR_CWG1DBR3_POSN                              0x3
#define _CWG1DBR_CWG1DBR3_POSITION                          0x3
#define _CWG1DBR_CWG1DBR3_SIZE                              0x1
#define _CWG1DBR_CWG1DBR3_LENGTH                            0x1
#define _CWG1DBR_CWG1DBR3_MASK                              0x8
#define _CWG1DBR_CWG1DBR4_POSN                              0x4
#define _CWG1DBR_CWG1DBR4_POSITION                          0x4
#define _CWG1DBR_CWG1DBR4_SIZE                              0x1
#define _CWG1DBR_CWG1DBR4_LENGTH                            0x1
#define _CWG1DBR_CWG1DBR4_MASK                              0x10
#define _CWG1DBR_CWG1DBR5_POSN                              0x5
#define _CWG1DBR_CWG1DBR5_POSITION                          0x5
#define _CWG1DBR_CWG1DBR5_SIZE                              0x1
#define _CWG1DBR_CWG1DBR5_LENGTH                            0x1
#define _CWG1DBR_CWG1DBR5_MASK                              0x20

// Register: CWG1DBF
#define CWG1DBF CWG1DBF
extern volatile unsigned char           CWG1DBF             __at(0xF43);
#ifndef _LIB_BUILD
asm("CWG1DBF equ 0F43h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DBF                    :6;
    };
    struct {
        unsigned DBF0                   :1;
        unsigned DBF1                   :1;
        unsigned DBF2                   :1;
        unsigned DBF3                   :1;
        unsigned DBF4                   :1;
        unsigned DBF5                   :1;
    };
    struct {
        unsigned CWG1DBF                :6;
    };
    struct {
        unsigned CWG1DBF0               :1;
        unsigned CWG1DBF1               :1;
        unsigned CWG1DBF2               :1;
        unsigned CWG1DBF3               :1;
        unsigned CWG1DBF4               :1;
        unsigned CWG1DBF5               :1;
    };
} CWG1DBFbits_t;
extern volatile CWG1DBFbits_t CWG1DBFbits __at(0xF43);
// bitfield macros
#define _CWG1DBF_DBF_POSN                                   0x0
#define _CWG1DBF_DBF_POSITION                               0x0
#define _CWG1DBF_DBF_SIZE                                   0x6
#define _CWG1DBF_DBF_LENGTH                                 0x6
#define _CWG1DBF_DBF_MASK                                   0x3F
#define _CWG1DBF_DBF0_POSN                                  0x0
#define _CWG1DBF_DBF0_POSITION                              0x0
#define _CWG1DBF_DBF0_SIZE                                  0x1
#define _CWG1DBF_DBF0_LENGTH                                0x1
#define _CWG1DBF_DBF0_MASK                                  0x1
#define _CWG1DBF_DBF1_POSN                                  0x1
#define _CWG1DBF_DBF1_POSITION                              0x1
#define _CWG1DBF_DBF1_SIZE                                  0x1
#define _CWG1DBF_DBF1_LENGTH                                0x1
#define _CWG1DBF_DBF1_MASK                                  0x2
#define _CWG1DBF_DBF2_POSN                                  0x2
#define _CWG1DBF_DBF2_POSITION                              0x2
#define _CWG1DBF_DBF2_SIZE                                  0x1
#define _CWG1DBF_DBF2_LENGTH                                0x1
#define _CWG1DBF_DBF2_MASK                                  0x4
#define _CWG1DBF_DBF3_POSN                                  0x3
#define _CWG1DBF_DBF3_POSITION                              0x3
#define _CWG1DBF_DBF3_SIZE                                  0x1
#define _CWG1DBF_DBF3_LENGTH                                0x1
#define _CWG1DBF_DBF3_MASK                                  0x8
#define _CWG1DBF_DBF4_POSN                                  0x4
#define _CWG1DBF_DBF4_POSITION                              0x4
#define _CWG1DBF_DBF4_SIZE                                  0x1
#define _CWG1DBF_DBF4_LENGTH                                0x1
#define _CWG1DBF_DBF4_MASK                                  0x10
#define _CWG1DBF_DBF5_POSN                                  0x5
#define _CWG1DBF_DBF5_POSITION                              0x5
#define _CWG1DBF_DBF5_SIZE                                  0x1
#define _CWG1DBF_DBF5_LENGTH                                0x1
#define _CWG1DBF_DBF5_MASK                                  0x20
#define _CWG1DBF_CWG1DBF_POSN                               0x0
#define _CWG1DBF_CWG1DBF_POSITION                           0x0
#define _CWG1DBF_CWG1DBF_SIZE                               0x6
#define _CWG1DBF_CWG1DBF_LENGTH                             0x6
#define _CWG1DBF_CWG1DBF_MASK                               0x3F
#define _CWG1DBF_CWG1DBF0_POSN                              0x0
#define _CWG1DBF_CWG1DBF0_POSITION                          0x0
#define _CWG1DBF_CWG1DBF0_SIZE                              0x1
#define _CWG1DBF_CWG1DBF0_LENGTH                            0x1
#define _CWG1DBF_CWG1DBF0_MASK                              0x1
#define _CWG1DBF_CWG1DBF1_POSN                              0x1
#define _CWG1DBF_CWG1DBF1_POSITION                          0x1
#define _CWG1DBF_CWG1DBF1_SIZE                              0x1
#define _CWG1DBF_CWG1DBF1_LENGTH                            0x1
#define _CWG1DBF_CWG1DBF1_MASK                              0x2
#define _CWG1DBF_CWG1DBF2_POSN                              0x2
#define _CWG1DBF_CWG1DBF2_POSITION                          0x2
#define _CWG1DBF_CWG1DBF2_SIZE                              0x1
#define _CWG1DBF_CWG1DBF2_LENGTH                            0x1
#define _CWG1DBF_CWG1DBF2_MASK                              0x4
#define _CWG1DBF_CWG1DBF3_POSN                              0x3
#define _CWG1DBF_CWG1DBF3_POSITION                          0x3
#define _CWG1DBF_CWG1DBF3_SIZE                              0x1
#define _CWG1DBF_CWG1DBF3_LENGTH                            0x1
#define _CWG1DBF_CWG1DBF3_MASK                              0x8
#define _CWG1DBF_CWG1DBF4_POSN                              0x4
#define _CWG1DBF_CWG1DBF4_POSITION                          0x4
#define _CWG1DBF_CWG1DBF4_SIZE                              0x1
#define _CWG1DBF_CWG1DBF4_LENGTH                            0x1
#define _CWG1DBF_CWG1DBF4_MASK                              0x10
#define _CWG1DBF_CWG1DBF5_POSN                              0x5
#define _CWG1DBF_CWG1DBF5_POSITION                          0x5
#define _CWG1DBF_CWG1DBF5_SIZE                              0x1
#define _CWG1DBF_CWG1DBF5_LENGTH                            0x1
#define _CWG1DBF_CWG1DBF5_MASK                              0x20

// Register: CWG1CON0
#define CWG1CON0 CWG1CON0
extern volatile unsigned char           CWG1CON0            __at(0xF44);
#ifndef _LIB_BUILD
asm("CWG1CON0 equ 0F44h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :3;
        unsigned                        :3;
        unsigned LD                     :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned                        :4;
        unsigned G1EN                   :1;
    };
    struct {
        unsigned CWG1MODE               :3;
        unsigned                        :3;
        unsigned CWG1LD                 :1;
        unsigned CWG1EN                 :1;
    };
    struct {
        unsigned CWG1MODE0              :1;
        unsigned CWG1MODE1              :1;
        unsigned CWG1MODE2              :1;
    };
} CWG1CON0bits_t;
extern volatile CWG1CON0bits_t CWG1CON0bits __at(0xF44);
// bitfield macros
#define _CWG1CON0_MODE_POSN                                 0x0
#define _CWG1CON0_MODE_POSITION                             0x0
#define _CWG1CON0_MODE_SIZE                                 0x3
#define _CWG1CON0_MODE_LENGTH                               0x3
#define _CWG1CON0_MODE_MASK                                 0x7
#define _CWG1CON0_LD_POSN                                   0x6
#define _CWG1CON0_LD_POSITION                               0x6
#define _CWG1CON0_LD_SIZE                                   0x1
#define _CWG1CON0_LD_LENGTH                                 0x1
#define _CWG1CON0_LD_MASK                                   0x40
#define _CWG1CON0_EN_POSN                                   0x7
#define _CWG1CON0_EN_POSITION                               0x7
#define _CWG1CON0_EN_SIZE                                   0x1
#define _CWG1CON0_EN_LENGTH                                 0x1
#define _CWG1CON0_EN_MASK                                   0x80
#define _CWG1CON0_MODE0_POSN                                0x0
#define _CWG1CON0_MODE0_POSITION                            0x0
#define _CWG1CON0_MODE0_SIZE                                0x1
#define _CWG1CON0_MODE0_LENGTH                              0x1
#define _CWG1CON0_MODE0_MASK                                0x1
#define _CWG1CON0_MODE1_POSN                                0x1
#define _CWG1CON0_MODE1_POSITION                            0x1
#define _CWG1CON0_MODE1_SIZE                                0x1
#define _CWG1CON0_MODE1_LENGTH                              0x1
#define _CWG1CON0_MODE1_MASK                                0x2
#define _CWG1CON0_MODE2_POSN                                0x2
#define _CWG1CON0_MODE2_POSITION                            0x2
#define _CWG1CON0_MODE2_SIZE                                0x1
#define _CWG1CON0_MODE2_LENGTH                              0x1
#define _CWG1CON0_MODE2_MASK                                0x4
#define _CWG1CON0_G1EN_POSN                                 0x7
#define _CWG1CON0_G1EN_POSITION                             0x7
#define _CWG1CON0_G1EN_SIZE                                 0x1
#define _CWG1CON0_G1EN_LENGTH                               0x1
#define _CWG1CON0_G1EN_MASK                                 0x80
#define _CWG1CON0_CWG1MODE_POSN                             0x0
#define _CWG1CON0_CWG1MODE_POSITION                         0x0
#define _CWG1CON0_CWG1MODE_SIZE                             0x3
#define _CWG1CON0_CWG1MODE_LENGTH                           0x3
#define _CWG1CON0_CWG1MODE_MASK                             0x7
#define _CWG1CON0_CWG1LD_POSN                               0x6
#define _CWG1CON0_CWG1LD_POSITION                           0x6
#define _CWG1CON0_CWG1LD_SIZE                               0x1
#define _CWG1CON0_CWG1LD_LENGTH                             0x1
#define _CWG1CON0_CWG1LD_MASK                               0x40
#define _CWG1CON0_CWG1EN_POSN                               0x7
#define _CWG1CON0_CWG1EN_POSITION                           0x7
#define _CWG1CON0_CWG1EN_SIZE                               0x1
#define _CWG1CON0_CWG1EN_LENGTH                             0x1
#define _CWG1CON0_CWG1EN_MASK                               0x80
#define _CWG1CON0_CWG1MODE0_POSN                            0x0
#define _CWG1CON0_CWG1MODE0_POSITION                        0x0
#define _CWG1CON0_CWG1MODE0_SIZE                            0x1
#define _CWG1CON0_CWG1MODE0_LENGTH                          0x1
#define _CWG1CON0_CWG1MODE0_MASK                            0x1
#define _CWG1CON0_CWG1MODE1_POSN                            0x1
#define _CWG1CON0_CWG1MODE1_POSITION                        0x1
#define _CWG1CON0_CWG1MODE1_SIZE                            0x1
#define _CWG1CON0_CWG1MODE1_LENGTH                          0x1
#define _CWG1CON0_CWG1MODE1_MASK                            0x2
#define _CWG1CON0_CWG1MODE2_POSN                            0x2
#define _CWG1CON0_CWG1MODE2_POSITION                        0x2
#define _CWG1CON0_CWG1MODE2_SIZE                            0x1
#define _CWG1CON0_CWG1MODE2_LENGTH                          0x1
#define _CWG1CON0_CWG1MODE2_MASK                            0x4

// Register: CWG1CON1
#define CWG1CON1 CWG1CON1
extern volatile unsigned char           CWG1CON1            __at(0xF45);
#ifndef _LIB_BUILD
asm("CWG1CON1 equ 0F45h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned POLA                   :1;
        unsigned POLB                   :1;
        unsigned POLC                   :1;
        unsigned POLD                   :1;
        unsigned                        :1;
        unsigned IN                     :1;
    };
    struct {
        unsigned CWG1POLA               :1;
        unsigned CWG1POLB               :1;
        unsigned CWG1POLC               :1;
        unsigned CWG1POLD               :1;
        unsigned                        :1;
        unsigned CWG1IN                 :1;
    };
} CWG1CON1bits_t;
extern volatile CWG1CON1bits_t CWG1CON1bits __at(0xF45);
// bitfield macros
#define _CWG1CON1_POLA_POSN                                 0x0
#define _CWG1CON1_POLA_POSITION                             0x0
#define _CWG1CON1_POLA_SIZE                                 0x1
#define _CWG1CON1_POLA_LENGTH                               0x1
#define _CWG1CON1_POLA_MASK                                 0x1
#define _CWG1CON1_POLB_POSN                                 0x1
#define _CWG1CON1_POLB_POSITION                             0x1
#define _CWG1CON1_POLB_SIZE                                 0x1
#define _CWG1CON1_POLB_LENGTH                               0x1
#define _CWG1CON1_POLB_MASK                                 0x2
#define _CWG1CON1_POLC_POSN                                 0x2
#define _CWG1CON1_POLC_POSITION                             0x2
#define _CWG1CON1_POLC_SIZE                                 0x1
#define _CWG1CON1_POLC_LENGTH                               0x1
#define _CWG1CON1_POLC_MASK                                 0x4
#define _CWG1CON1_POLD_POSN                                 0x3
#define _CWG1CON1_POLD_POSITION                             0x3
#define _CWG1CON1_POLD_SIZE                                 0x1
#define _CWG1CON1_POLD_LENGTH                               0x1
#define _CWG1CON1_POLD_MASK                                 0x8
#define _CWG1CON1_IN_POSN                                   0x5
#define _CWG1CON1_IN_POSITION                               0x5
#define _CWG1CON1_IN_SIZE                                   0x1
#define _CWG1CON1_IN_LENGTH                                 0x1
#define _CWG1CON1_IN_MASK                                   0x20
#define _CWG1CON1_CWG1POLA_POSN                             0x0
#define _CWG1CON1_CWG1POLA_POSITION                         0x0
#define _CWG1CON1_CWG1POLA_SIZE                             0x1
#define _CWG1CON1_CWG1POLA_LENGTH                           0x1
#define _CWG1CON1_CWG1POLA_MASK                             0x1
#define _CWG1CON1_CWG1POLB_POSN                             0x1
#define _CWG1CON1_CWG1POLB_POSITION                         0x1
#define _CWG1CON1_CWG1POLB_SIZE                             0x1
#define _CWG1CON1_CWG1POLB_LENGTH                           0x1
#define _CWG1CON1_CWG1POLB_MASK                             0x2
#define _CWG1CON1_CWG1POLC_POSN                             0x2
#define _CWG1CON1_CWG1POLC_POSITION                         0x2
#define _CWG1CON1_CWG1POLC_SIZE                             0x1
#define _CWG1CON1_CWG1POLC_LENGTH                           0x1
#define _CWG1CON1_CWG1POLC_MASK                             0x4
#define _CWG1CON1_CWG1POLD_POSN                             0x3
#define _CWG1CON1_CWG1POLD_POSITION                         0x3
#define _CWG1CON1_CWG1POLD_SIZE                             0x1
#define _CWG1CON1_CWG1POLD_LENGTH                           0x1
#define _CWG1CON1_CWG1POLD_MASK                             0x8
#define _CWG1CON1_CWG1IN_POSN                               0x5
#define _CWG1CON1_CWG1IN_POSITION                           0x5
#define _CWG1CON1_CWG1IN_SIZE                               0x1
#define _CWG1CON1_CWG1IN_LENGTH                             0x1
#define _CWG1CON1_CWG1IN_MASK                               0x20

// Register: CWG1AS0
#define CWG1AS0 CWG1AS0
extern volatile unsigned char           CWG1AS0             __at(0xF46);
#ifndef _LIB_BUILD
asm("CWG1AS0 equ 0F46h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned LSAC                   :2;
        unsigned LSBD                   :2;
        unsigned REN                    :1;
        unsigned SHUTDOWN               :1;
    };
    struct {
        unsigned                        :2;
        unsigned LSAC0                  :1;
        unsigned LSAC1                  :1;
        unsigned LSBD0                  :1;
        unsigned LSBD1                  :1;
    };
    struct {
        unsigned                        :2;
        unsigned CWG1LSAC               :2;
        unsigned CWG1LSBD               :2;
        unsigned CWG1REN                :1;
        unsigned CWG1SHUTDOWN           :1;
    };
    struct {
        unsigned                        :2;
        unsigned CWG1LSAC0              :1;
        unsigned CWG1LSAC1              :1;
        unsigned CWG1LSBD0              :1;
        unsigned CWG1LSBD1              :1;
    };
} CWG1AS0bits_t;
extern volatile CWG1AS0bits_t CWG1AS0bits __at(0xF46);
// bitfield macros
#define _CWG1AS0_LSAC_POSN                                  0x2
#define _CWG1AS0_LSAC_POSITION                              0x2
#define _CWG1AS0_LSAC_SIZE                                  0x2
#define _CWG1AS0_LSAC_LENGTH                                0x2
#define _CWG1AS0_LSAC_MASK                                  0xC
#define _CWG1AS0_LSBD_POSN                                  0x4
#define _CWG1AS0_LSBD_POSITION                              0x4
#define _CWG1AS0_LSBD_SIZE                                  0x2
#define _CWG1AS0_LSBD_LENGTH                                0x2
#define _CWG1AS0_LSBD_MASK                                  0x30
#define _CWG1AS0_REN_POSN                                   0x6
#define _CWG1AS0_REN_POSITION                               0x6
#define _CWG1AS0_REN_SIZE                                   0x1
#define _CWG1AS0_REN_LENGTH                                 0x1
#define _CWG1AS0_REN_MASK                                   0x40
#define _CWG1AS0_SHUTDOWN_POSN                              0x7
#define _CWG1AS0_SHUTDOWN_POSITION                          0x7
#define _CWG1AS0_SHUTDOWN_SIZE                              0x1
#define _CWG1AS0_SHUTDOWN_LENGTH                            0x1
#define _CWG1AS0_SHUTDOWN_MASK                              0x80
#define _CWG1AS0_LSAC0_POSN                                 0x2
#define _CWG1AS0_LSAC0_POSITION                             0x2
#define _CWG1AS0_LSAC0_SIZE                                 0x1
#define _CWG1AS0_LSAC0_LENGTH                               0x1
#define _CWG1AS0_LSAC0_MASK                                 0x4
#define _CWG1AS0_LSAC1_POSN                                 0x3
#define _CWG1AS0_LSAC1_POSITION                             0x3
#define _CWG1AS0_LSAC1_SIZE                                 0x1
#define _CWG1AS0_LSAC1_LENGTH                               0x1
#define _CWG1AS0_LSAC1_MASK                                 0x8
#define _CWG1AS0_LSBD0_POSN                                 0x4
#define _CWG1AS0_LSBD0_POSITION                             0x4
#define _CWG1AS0_LSBD0_SIZE                                 0x1
#define _CWG1AS0_LSBD0_LENGTH                               0x1
#define _CWG1AS0_LSBD0_MASK                                 0x10
#define _CWG1AS0_LSBD1_POSN                                 0x5
#define _CWG1AS0_LSBD1_POSITION                             0x5
#define _CWG1AS0_LSBD1_SIZE                                 0x1
#define _CWG1AS0_LSBD1_LENGTH                               0x1
#define _CWG1AS0_LSBD1_MASK                                 0x20
#define _CWG1AS0_CWG1LSAC_POSN                              0x2
#define _CWG1AS0_CWG1LSAC_POSITION                          0x2
#define _CWG1AS0_CWG1LSAC_SIZE                              0x2
#define _CWG1AS0_CWG1LSAC_LENGTH                            0x2
#define _CWG1AS0_CWG1LSAC_MASK                              0xC
#define _CWG1AS0_CWG1LSBD_POSN                              0x4
#define _CWG1AS0_CWG1LSBD_POSITION                          0x4
#define _CWG1AS0_CWG1LSBD_SIZE                              0x2
#define _CWG1AS0_CWG1LSBD_LENGTH                            0x2
#define _CWG1AS0_CWG1LSBD_MASK                              0x30
#define _CWG1AS0_CWG1REN_POSN                               0x6
#define _CWG1AS0_CWG1REN_POSITION                           0x6
#define _CWG1AS0_CWG1REN_SIZE                               0x1
#define _CWG1AS0_CWG1REN_LENGTH                             0x1
#define _CWG1AS0_CWG1REN_MASK                               0x40
#define _CWG1AS0_CWG1SHUTDOWN_POSN                          0x7
#define _CWG1AS0_CWG1SHUTDOWN_POSITION                      0x7
#define _CWG1AS0_CWG1SHUTDOWN_SIZE                          0x1
#define _CWG1AS0_CWG1SHUTDOWN_LENGTH                        0x1
#define _CWG1AS0_CWG1SHUTDOWN_MASK                          0x80
#define _CWG1AS0_CWG1LSAC0_POSN                             0x2
#define _CWG1AS0_CWG1LSAC0_POSITION                         0x2
#define _CWG1AS0_CWG1LSAC0_SIZE                             0x1
#define _CWG1AS0_CWG1LSAC0_LENGTH                           0x1
#define _CWG1AS0_CWG1LSAC0_MASK                             0x4
#define _CWG1AS0_CWG1LSAC1_POSN                             0x3
#define _CWG1AS0_CWG1LSAC1_POSITION                         0x3
#define _CWG1AS0_CWG1LSAC1_SIZE                             0x1
#define _CWG1AS0_CWG1LSAC1_LENGTH                           0x1
#define _CWG1AS0_CWG1LSAC1_MASK                             0x8
#define _CWG1AS0_CWG1LSBD0_POSN                             0x4
#define _CWG1AS0_CWG1LSBD0_POSITION                         0x4
#define _CWG1AS0_CWG1LSBD0_SIZE                             0x1
#define _CWG1AS0_CWG1LSBD0_LENGTH                           0x1
#define _CWG1AS0_CWG1LSBD0_MASK                             0x10
#define _CWG1AS0_CWG1LSBD1_POSN                             0x5
#define _CWG1AS0_CWG1LSBD1_POSITION                         0x5
#define _CWG1AS0_CWG1LSBD1_SIZE                             0x1
#define _CWG1AS0_CWG1LSBD1_LENGTH                           0x1
#define _CWG1AS0_CWG1LSBD1_MASK                             0x20

// Register: CWG1AS1
#define CWG1AS1 CWG1AS1
extern volatile unsigned char           CWG1AS1             __at(0xF47);
#ifndef _LIB_BUILD
asm("CWG1AS1 equ 0F47h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned AS0E                   :1;
        unsigned AS1E                   :1;
        unsigned AS2E                   :1;
        unsigned AS3E                   :1;
        unsigned AS4E                   :1;
        unsigned AS5E                   :1;
    };
} CWG1AS1bits_t;
extern volatile CWG1AS1bits_t CWG1AS1bits __at(0xF47);
// bitfield macros
#define _CWG1AS1_AS0E_POSN                                  0x0
#define _CWG1AS1_AS0E_POSITION                              0x0
#define _CWG1AS1_AS0E_SIZE                                  0x1
#define _CWG1AS1_AS0E_LENGTH                                0x1
#define _CWG1AS1_AS0E_MASK                                  0x1
#define _CWG1AS1_AS1E_POSN                                  0x1
#define _CWG1AS1_AS1E_POSITION                              0x1
#define _CWG1AS1_AS1E_SIZE                                  0x1
#define _CWG1AS1_AS1E_LENGTH                                0x1
#define _CWG1AS1_AS1E_MASK                                  0x2
#define _CWG1AS1_AS2E_POSN                                  0x2
#define _CWG1AS1_AS2E_POSITION                              0x2
#define _CWG1AS1_AS2E_SIZE                                  0x1
#define _CWG1AS1_AS2E_LENGTH                                0x1
#define _CWG1AS1_AS2E_MASK                                  0x4
#define _CWG1AS1_AS3E_POSN                                  0x3
#define _CWG1AS1_AS3E_POSITION                              0x3
#define _CWG1AS1_AS3E_SIZE                                  0x1
#define _CWG1AS1_AS3E_LENGTH                                0x1
#define _CWG1AS1_AS3E_MASK                                  0x8
#define _CWG1AS1_AS4E_POSN                                  0x4
#define _CWG1AS1_AS4E_POSITION                              0x4
#define _CWG1AS1_AS4E_SIZE                                  0x1
#define _CWG1AS1_AS4E_LENGTH                                0x1
#define _CWG1AS1_AS4E_MASK                                  0x10
#define _CWG1AS1_AS5E_POSN                                  0x5
#define _CWG1AS1_AS5E_POSITION                              0x5
#define _CWG1AS1_AS5E_SIZE                                  0x1
#define _CWG1AS1_AS5E_LENGTH                                0x1
#define _CWG1AS1_AS5E_MASK                                  0x20

// Register: CWG1STR
#define CWG1STR CWG1STR
extern volatile unsigned char           CWG1STR             __at(0xF48);
#ifndef _LIB_BUILD
asm("CWG1STR equ 0F48h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned STRA                   :1;
        unsigned STRB                   :1;
        unsigned STRC                   :1;
        unsigned STRD                   :1;
        unsigned OVRA                   :1;
        unsigned OVRB                   :1;
        unsigned OVRC                   :1;
        unsigned OVRD                   :1;
    };
    struct {
        unsigned CWG1STRA               :1;
        unsigned CWG1STRB               :1;
        unsigned CWG1STRC               :1;
        unsigned CWG1STRD               :1;
        unsigned CWG1OVRA               :1;
        unsigned CWG1OVRB               :1;
        unsigned CWG1OVRC               :1;
        unsigned CWG1OVRD               :1;
    };
} CWG1STRbits_t;
extern volatile CWG1STRbits_t CWG1STRbits __at(0xF48);
// bitfield macros
#define _CWG1STR_STRA_POSN                                  0x0
#define _CWG1STR_STRA_POSITION                              0x0
#define _CWG1STR_STRA_SIZE                                  0x1
#define _CWG1STR_STRA_LENGTH                                0x1
#define _CWG1STR_STRA_MASK                                  0x1
#define _CWG1STR_STRB_POSN                                  0x1
#define _CWG1STR_STRB_POSITION                              0x1
#define _CWG1STR_STRB_SIZE                                  0x1
#define _CWG1STR_STRB_LENGTH                                0x1
#define _CWG1STR_STRB_MASK                                  0x2
#define _CWG1STR_STRC_POSN                                  0x2
#define _CWG1STR_STRC_POSITION                              0x2
#define _CWG1STR_STRC_SIZE                                  0x1
#define _CWG1STR_STRC_LENGTH                                0x1
#define _CWG1STR_STRC_MASK                                  0x4
#define _CWG1STR_STRD_POSN                                  0x3
#define _CWG1STR_STRD_POSITION                              0x3
#define _CWG1STR_STRD_SIZE                                  0x1
#define _CWG1STR_STRD_LENGTH                                0x1
#define _CWG1STR_STRD_MASK                                  0x8
#define _CWG1STR_OVRA_POSN                                  0x4
#define _CWG1STR_OVRA_POSITION                              0x4
#define _CWG1STR_OVRA_SIZE                                  0x1
#define _CWG1STR_OVRA_LENGTH                                0x1
#define _CWG1STR_OVRA_MASK                                  0x10
#define _CWG1STR_OVRB_POSN                                  0x5
#define _CWG1STR_OVRB_POSITION                              0x5
#define _CWG1STR_OVRB_SIZE                                  0x1
#define _CWG1STR_OVRB_LENGTH                                0x1
#define _CWG1STR_OVRB_MASK                                  0x20
#define _CWG1STR_OVRC_POSN                                  0x6
#define _CWG1STR_OVRC_POSITION                              0x6
#define _CWG1STR_OVRC_SIZE                                  0x1
#define _CWG1STR_OVRC_LENGTH                                0x1
#define _CWG1STR_OVRC_MASK                                  0x40
#define _CWG1STR_OVRD_POSN                                  0x7
#define _CWG1STR_OVRD_POSITION                              0x7
#define _CWG1STR_OVRD_SIZE                                  0x1
#define _CWG1STR_OVRD_LENGTH                                0x1
#define _CWG1STR_OVRD_MASK                                  0x80
#define _CWG1STR_CWG1STRA_POSN                              0x0
#define _CWG1STR_CWG1STRA_POSITION                          0x0
#define _CWG1STR_CWG1STRA_SIZE                              0x1
#define _CWG1STR_CWG1STRA_LENGTH                            0x1
#define _CWG1STR_CWG1STRA_MASK                              0x1
#define _CWG1STR_CWG1STRB_POSN                              0x1
#define _CWG1STR_CWG1STRB_POSITION                          0x1
#define _CWG1STR_CWG1STRB_SIZE                              0x1
#define _CWG1STR_CWG1STRB_LENGTH                            0x1
#define _CWG1STR_CWG1STRB_MASK                              0x2
#define _CWG1STR_CWG1STRC_POSN                              0x2
#define _CWG1STR_CWG1STRC_POSITION                          0x2
#define _CWG1STR_CWG1STRC_SIZE                              0x1
#define _CWG1STR_CWG1STRC_LENGTH                            0x1
#define _CWG1STR_CWG1STRC_MASK                              0x4
#define _CWG1STR_CWG1STRD_POSN                              0x3
#define _CWG1STR_CWG1STRD_POSITION                          0x3
#define _CWG1STR_CWG1STRD_SIZE                              0x1
#define _CWG1STR_CWG1STRD_LENGTH                            0x1
#define _CWG1STR_CWG1STRD_MASK                              0x8
#define _CWG1STR_CWG1OVRA_POSN                              0x4
#define _CWG1STR_CWG1OVRA_POSITION                          0x4
#define _CWG1STR_CWG1OVRA_SIZE                              0x1
#define _CWG1STR_CWG1OVRA_LENGTH                            0x1
#define _CWG1STR_CWG1OVRA_MASK                              0x10
#define _CWG1STR_CWG1OVRB_POSN                              0x5
#define _CWG1STR_CWG1OVRB_POSITION                          0x5
#define _CWG1STR_CWG1OVRB_SIZE                              0x1
#define _CWG1STR_CWG1OVRB_LENGTH                            0x1
#define _CWG1STR_CWG1OVRB_MASK                              0x20
#define _CWG1STR_CWG1OVRC_POSN                              0x6
#define _CWG1STR_CWG1OVRC_POSITION                          0x6
#define _CWG1STR_CWG1OVRC_SIZE                              0x1
#define _CWG1STR_CWG1OVRC_LENGTH                            0x1
#define _CWG1STR_CWG1OVRC_MASK                              0x40
#define _CWG1STR_CWG1OVRD_POSN                              0x7
#define _CWG1STR_CWG1OVRD_POSITION                          0x7
#define _CWG1STR_CWG1OVRD_SIZE                              0x1
#define _CWG1STR_CWG1OVRD_LENGTH                            0x1
#define _CWG1STR_CWG1OVRD_MASK                              0x80

// Register: SCANLADR
#define SCANLADR SCANLADR
#ifndef __CCI__
extern volatile __uint24                SCANLADR            __at(0xF49);
#endif
#ifndef _LIB_BUILD
asm("SCANLADR equ 0F49h");
#endif

// Register: SCANLADRL
#define SCANLADRL SCANLADRL
extern volatile unsigned char           SCANLADRL           __at(0xF49);
#ifndef _LIB_BUILD
asm("SCANLADRL equ 0F49h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LADR                   :8;
    };
    struct {
        unsigned LADR0                  :1;
        unsigned LADR1                  :1;
        unsigned LADR2                  :1;
        unsigned LADR3                  :1;
        unsigned LADR4                  :1;
        unsigned LADR5                  :1;
        unsigned LADR6                  :1;
        unsigned LADR7                  :1;
    };
    struct {
        unsigned SCANLADR               :8;
    };
    struct {
        unsigned SCANLADR0              :1;
        unsigned SCANLADR1              :1;
        unsigned SCANLADR2              :1;
        unsigned SCANLADR3              :1;
        unsigned SCANLADR4              :1;
        unsigned SCANLADR5              :1;
        unsigned SCANLADR6              :1;
        unsigned SCANLADR7              :1;
    };
} SCANLADRLbits_t;
extern volatile SCANLADRLbits_t SCANLADRLbits __at(0xF49);
// bitfield macros
#define _SCANLADRL_LADR_POSN                                0x0
#define _SCANLADRL_LADR_POSITION                            0x0
#define _SCANLADRL_LADR_SIZE                                0x8
#define _SCANLADRL_LADR_LENGTH                              0x8
#define _SCANLADRL_LADR_MASK                                0xFF
#define _SCANLADRL_LADR0_POSN                               0x0
#define _SCANLADRL_LADR0_POSITION                           0x0
#define _SCANLADRL_LADR0_SIZE                               0x1
#define _SCANLADRL_LADR0_LENGTH                             0x1
#define _SCANLADRL_LADR0_MASK                               0x1
#define _SCANLADRL_LADR1_POSN                               0x1
#define _SCANLADRL_LADR1_POSITION                           0x1
#define _SCANLADRL_LADR1_SIZE                               0x1
#define _SCANLADRL_LADR1_LENGTH                             0x1
#define _SCANLADRL_LADR1_MASK                               0x2
#define _SCANLADRL_LADR2_POSN                               0x2
#define _SCANLADRL_LADR2_POSITION                           0x2
#define _SCANLADRL_LADR2_SIZE                               0x1
#define _SCANLADRL_LADR2_LENGTH                             0x1
#define _SCANLADRL_LADR2_MASK                               0x4
#define _SCANLADRL_LADR3_POSN                               0x3
#define _SCANLADRL_LADR3_POSITION                           0x3
#define _SCANLADRL_LADR3_SIZE                               0x1
#define _SCANLADRL_LADR3_LENGTH                             0x1
#define _SCANLADRL_LADR3_MASK                               0x8
#define _SCANLADRL_LADR4_POSN                               0x4
#define _SCANLADRL_LADR4_POSITION                           0x4
#define _SCANLADRL_LADR4_SIZE                               0x1
#define _SCANLADRL_LADR4_LENGTH                             0x1
#define _SCANLADRL_LADR4_MASK                               0x10
#define _SCANLADRL_LADR5_POSN                               0x5
#define _SCANLADRL_LADR5_POSITION                           0x5
#define _SCANLADRL_LADR5_SIZE                               0x1
#define _SCANLADRL_LADR5_LENGTH                             0x1
#define _SCANLADRL_LADR5_MASK                               0x20
#define _SCANLADRL_LADR6_POSN                               0x6
#define _SCANLADRL_LADR6_POSITION                           0x6
#define _SCANLADRL_LADR6_SIZE                               0x1
#define _SCANLADRL_LADR6_LENGTH                             0x1
#define _SCANLADRL_LADR6_MASK                               0x40
#define _SCANLADRL_LADR7_POSN                               0x7
#define _SCANLADRL_LADR7_POSITION                           0x7
#define _SCANLADRL_LADR7_SIZE                               0x1
#define _SCANLADRL_LADR7_LENGTH                             0x1
#define _SCANLADRL_LADR7_MASK                               0x80
#define _SCANLADRL_SCANLADR_POSN                            0x0
#define _SCANLADRL_SCANLADR_POSITION                        0x0
#define _SCANLADRL_SCANLADR_SIZE                            0x8
#define _SCANLADRL_SCANLADR_LENGTH                          0x8
#define _SCANLADRL_SCANLADR_MASK                            0xFF
#define _SCANLADRL_SCANLADR0_POSN                           0x0
#define _SCANLADRL_SCANLADR0_POSITION                       0x0
#define _SCANLADRL_SCANLADR0_SIZE                           0x1
#define _SCANLADRL_SCANLADR0_LENGTH                         0x1
#define _SCANLADRL_SCANLADR0_MASK                           0x1
#define _SCANLADRL_SCANLADR1_POSN                           0x1
#define _SCANLADRL_SCANLADR1_POSITION                       0x1
#define _SCANLADRL_SCANLADR1_SIZE                           0x1
#define _SCANLADRL_SCANLADR1_LENGTH                         0x1
#define _SCANLADRL_SCANLADR1_MASK                           0x2
#define _SCANLADRL_SCANLADR2_POSN                           0x2
#define _SCANLADRL_SCANLADR2_POSITION                       0x2
#define _SCANLADRL_SCANLADR2_SIZE                           0x1
#define _SCANLADRL_SCANLADR2_LENGTH                         0x1
#define _SCANLADRL_SCANLADR2_MASK                           0x4
#define _SCANLADRL_SCANLADR3_POSN                           0x3
#define _SCANLADRL_SCANLADR3_POSITION                       0x3
#define _SCANLADRL_SCANLADR3_SIZE                           0x1
#define _SCANLADRL_SCANLADR3_LENGTH                         0x1
#define _SCANLADRL_SCANLADR3_MASK                           0x8
#define _SCANLADRL_SCANLADR4_POSN                           0x4
#define _SCANLADRL_SCANLADR4_POSITION                       0x4
#define _SCANLADRL_SCANLADR4_SIZE                           0x1
#define _SCANLADRL_SCANLADR4_LENGTH                         0x1
#define _SCANLADRL_SCANLADR4_MASK                           0x10
#define _SCANLADRL_SCANLADR5_POSN                           0x5
#define _SCANLADRL_SCANLADR5_POSITION                       0x5
#define _SCANLADRL_SCANLADR5_SIZE                           0x1
#define _SCANLADRL_SCANLADR5_LENGTH                         0x1
#define _SCANLADRL_SCANLADR5_MASK                           0x20
#define _SCANLADRL_SCANLADR6_POSN                           0x6
#define _SCANLADRL_SCANLADR6_POSITION                       0x6
#define _SCANLADRL_SCANLADR6_SIZE                           0x1
#define _SCANLADRL_SCANLADR6_LENGTH                         0x1
#define _SCANLADRL_SCANLADR6_MASK                           0x40
#define _SCANLADRL_SCANLADR7_POSN                           0x7
#define _SCANLADRL_SCANLADR7_POSITION                       0x7
#define _SCANLADRL_SCANLADR7_SIZE                           0x1
#define _SCANLADRL_SCANLADR7_LENGTH                         0x1
#define _SCANLADRL_SCANLADR7_MASK                           0x80

// Register: SCANLADRH
#define SCANLADRH SCANLADRH
extern volatile unsigned char           SCANLADRH           __at(0xF4A);
#ifndef _LIB_BUILD
asm("SCANLADRH equ 0F4Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LADR                   :8;
    };
    struct {
        unsigned LADR8                  :1;
        unsigned LADR9                  :1;
        unsigned LADR10                 :1;
        unsigned LADR11                 :1;
        unsigned LADR12                 :1;
        unsigned LADR13                 :1;
        unsigned LADR14                 :1;
        unsigned LADR15                 :1;
    };
    struct {
        unsigned SCANLADR               :8;
    };
    struct {
        unsigned SCANLADR8              :1;
        unsigned SCANLADR9              :1;
        unsigned SCANLADR10             :1;
        unsigned SCANLADR11             :1;
        unsigned SCANLADR12             :1;
        unsigned SCANLADR13             :1;
        unsigned SCANLADR14             :1;
        unsigned SCANLADR15             :1;
    };
} SCANLADRHbits_t;
extern volatile SCANLADRHbits_t SCANLADRHbits __at(0xF4A);
// bitfield macros
#define _SCANLADRH_LADR_POSN                                0x0
#define _SCANLADRH_LADR_POSITION                            0x0
#define _SCANLADRH_LADR_SIZE                                0x8
#define _SCANLADRH_LADR_LENGTH                              0x8
#define _SCANLADRH_LADR_MASK                                0xFF
#define _SCANLADRH_LADR8_POSN                               0x0
#define _SCANLADRH_LADR8_POSITION                           0x0
#define _SCANLADRH_LADR8_SIZE                               0x1
#define _SCANLADRH_LADR8_LENGTH                             0x1
#define _SCANLADRH_LADR8_MASK                               0x1
#define _SCANLADRH_LADR9_POSN                               0x1
#define _SCANLADRH_LADR9_POSITION                           0x1
#define _SCANLADRH_LADR9_SIZE                               0x1
#define _SCANLADRH_LADR9_LENGTH                             0x1
#define _SCANLADRH_LADR9_MASK                               0x2
#define _SCANLADRH_LADR10_POSN                              0x2
#define _SCANLADRH_LADR10_POSITION                          0x2
#define _SCANLADRH_LADR10_SIZE                              0x1
#define _SCANLADRH_LADR10_LENGTH                            0x1
#define _SCANLADRH_LADR10_MASK                              0x4
#define _SCANLADRH_LADR11_POSN                              0x3
#define _SCANLADRH_LADR11_POSITION                          0x3
#define _SCANLADRH_LADR11_SIZE                              0x1
#define _SCANLADRH_LADR11_LENGTH                            0x1
#define _SCANLADRH_LADR11_MASK                              0x8
#define _SCANLADRH_LADR12_POSN                              0x4
#define _SCANLADRH_LADR12_POSITION                          0x4
#define _SCANLADRH_LADR12_SIZE                              0x1
#define _SCANLADRH_LADR12_LENGTH                            0x1
#define _SCANLADRH_LADR12_MASK                              0x10
#define _SCANLADRH_LADR13_POSN                              0x5
#define _SCANLADRH_LADR13_POSITION                          0x5
#define _SCANLADRH_LADR13_SIZE                              0x1
#define _SCANLADRH_LADR13_LENGTH                            0x1
#define _SCANLADRH_LADR13_MASK                              0x20
#define _SCANLADRH_LADR14_POSN                              0x6
#define _SCANLADRH_LADR14_POSITION                          0x6
#define _SCANLADRH_LADR14_SIZE                              0x1
#define _SCANLADRH_LADR14_LENGTH                            0x1
#define _SCANLADRH_LADR14_MASK                              0x40
#define _SCANLADRH_LADR15_POSN                              0x7
#define _SCANLADRH_LADR15_POSITION                          0x7
#define _SCANLADRH_LADR15_SIZE                              0x1
#define _SCANLADRH_LADR15_LENGTH                            0x1
#define _SCANLADRH_LADR15_MASK                              0x80
#define _SCANLADRH_SCANLADR_POSN                            0x0
#define _SCANLADRH_SCANLADR_POSITION                        0x0
#define _SCANLADRH_SCANLADR_SIZE                            0x8
#define _SCANLADRH_SCANLADR_LENGTH                          0x8
#define _SCANLADRH_SCANLADR_MASK                            0xFF
#define _SCANLADRH_SCANLADR8_POSN                           0x0
#define _SCANLADRH_SCANLADR8_POSITION                       0x0
#define _SCANLADRH_SCANLADR8_SIZE                           0x1
#define _SCANLADRH_SCANLADR8_LENGTH                         0x1
#define _SCANLADRH_SCANLADR8_MASK                           0x1
#define _SCANLADRH_SCANLADR9_POSN                           0x1
#define _SCANLADRH_SCANLADR9_POSITION                       0x1
#define _SCANLADRH_SCANLADR9_SIZE                           0x1
#define _SCANLADRH_SCANLADR9_LENGTH                         0x1
#define _SCANLADRH_SCANLADR9_MASK                           0x2
#define _SCANLADRH_SCANLADR10_POSN                          0x2
#define _SCANLADRH_SCANLADR10_POSITION                      0x2
#define _SCANLADRH_SCANLADR10_SIZE                          0x1
#define _SCANLADRH_SCANLADR10_LENGTH                        0x1
#define _SCANLADRH_SCANLADR10_MASK                          0x4
#define _SCANLADRH_SCANLADR11_POSN                          0x3
#define _SCANLADRH_SCANLADR11_POSITION                      0x3
#define _SCANLADRH_SCANLADR11_SIZE                          0x1
#define _SCANLADRH_SCANLADR11_LENGTH                        0x1
#define _SCANLADRH_SCANLADR11_MASK                          0x8
#define _SCANLADRH_SCANLADR12_POSN                          0x4
#define _SCANLADRH_SCANLADR12_POSITION                      0x4
#define _SCANLADRH_SCANLADR12_SIZE                          0x1
#define _SCANLADRH_SCANLADR12_LENGTH                        0x1
#define _SCANLADRH_SCANLADR12_MASK                          0x10
#define _SCANLADRH_SCANLADR13_POSN                          0x5
#define _SCANLADRH_SCANLADR13_POSITION                      0x5
#define _SCANLADRH_SCANLADR13_SIZE                          0x1
#define _SCANLADRH_SCANLADR13_LENGTH                        0x1
#define _SCANLADRH_SCANLADR13_MASK                          0x20
#define _SCANLADRH_SCANLADR14_POSN                          0x6
#define _SCANLADRH_SCANLADR14_POSITION                      0x6
#define _SCANLADRH_SCANLADR14_SIZE                          0x1
#define _SCANLADRH_SCANLADR14_LENGTH                        0x1
#define _SCANLADRH_SCANLADR14_MASK                          0x40
#define _SCANLADRH_SCANLADR15_POSN                          0x7
#define _SCANLADRH_SCANLADR15_POSITION                      0x7
#define _SCANLADRH_SCANLADR15_SIZE                          0x1
#define _SCANLADRH_SCANLADR15_LENGTH                        0x1
#define _SCANLADRH_SCANLADR15_MASK                          0x80

// Register: SCANLADRU
#define SCANLADRU SCANLADRU
extern volatile unsigned char           SCANLADRU           __at(0xF4B);
#ifndef _LIB_BUILD
asm("SCANLADRU equ 0F4Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LADR                   :6;
    };
    struct {
        unsigned LADR16                 :1;
        unsigned LADR17                 :1;
        unsigned LADR18                 :1;
        unsigned LADR19                 :1;
        unsigned LADR20                 :1;
        unsigned LADR21                 :1;
    };
    struct {
        unsigned SCANLADR               :6;
    };
    struct {
        unsigned SCANLADR16             :1;
        unsigned SCANLADR17             :1;
        unsigned SCANLADR18             :1;
        unsigned SCANLADR19             :1;
        unsigned SCANLADR20             :1;
        unsigned SCANLADR21             :1;
    };
} SCANLADRUbits_t;
extern volatile SCANLADRUbits_t SCANLADRUbits __at(0xF4B);
// bitfield macros
#define _SCANLADRU_LADR_POSN                                0x0
#define _SCANLADRU_LADR_POSITION                            0x0
#define _SCANLADRU_LADR_SIZE                                0x6
#define _SCANLADRU_LADR_LENGTH                              0x6
#define _SCANLADRU_LADR_MASK                                0x3F
#define _SCANLADRU_LADR16_POSN                              0x0
#define _SCANLADRU_LADR16_POSITION                          0x0
#define _SCANLADRU_LADR16_SIZE                              0x1
#define _SCANLADRU_LADR16_LENGTH                            0x1
#define _SCANLADRU_LADR16_MASK                              0x1
#define _SCANLADRU_LADR17_POSN                              0x1
#define _SCANLADRU_LADR17_POSITION                          0x1
#define _SCANLADRU_LADR17_SIZE                              0x1
#define _SCANLADRU_LADR17_LENGTH                            0x1
#define _SCANLADRU_LADR17_MASK                              0x2
#define _SCANLADRU_LADR18_POSN                              0x2
#define _SCANLADRU_LADR18_POSITION                          0x2
#define _SCANLADRU_LADR18_SIZE                              0x1
#define _SCANLADRU_LADR18_LENGTH                            0x1
#define _SCANLADRU_LADR18_MASK                              0x4
#define _SCANLADRU_LADR19_POSN                              0x3
#define _SCANLADRU_LADR19_POSITION                          0x3
#define _SCANLADRU_LADR19_SIZE                              0x1
#define _SCANLADRU_LADR19_LENGTH                            0x1
#define _SCANLADRU_LADR19_MASK                              0x8
#define _SCANLADRU_LADR20_POSN                              0x4
#define _SCANLADRU_LADR20_POSITION                          0x4
#define _SCANLADRU_LADR20_SIZE                              0x1
#define _SCANLADRU_LADR20_LENGTH                            0x1
#define _SCANLADRU_LADR20_MASK                              0x10
#define _SCANLADRU_LADR21_POSN                              0x5
#define _SCANLADRU_LADR21_POSITION                          0x5
#define _SCANLADRU_LADR21_SIZE                              0x1
#define _SCANLADRU_LADR21_LENGTH                            0x1
#define _SCANLADRU_LADR21_MASK                              0x20
#define _SCANLADRU_SCANLADR_POSN                            0x0
#define _SCANLADRU_SCANLADR_POSITION                        0x0
#define _SCANLADRU_SCANLADR_SIZE                            0x6
#define _SCANLADRU_SCANLADR_LENGTH                          0x6
#define _SCANLADRU_SCANLADR_MASK                            0x3F
#define _SCANLADRU_SCANLADR16_POSN                          0x0
#define _SCANLADRU_SCANLADR16_POSITION                      0x0
#define _SCANLADRU_SCANLADR16_SIZE                          0x1
#define _SCANLADRU_SCANLADR16_LENGTH                        0x1
#define _SCANLADRU_SCANLADR16_MASK                          0x1
#define _SCANLADRU_SCANLADR17_POSN                          0x1
#define _SCANLADRU_SCANLADR17_POSITION                      0x1
#define _SCANLADRU_SCANLADR17_SIZE                          0x1
#define _SCANLADRU_SCANLADR17_LENGTH                        0x1
#define _SCANLADRU_SCANLADR17_MASK                          0x2
#define _SCANLADRU_SCANLADR18_POSN                          0x2
#define _SCANLADRU_SCANLADR18_POSITION                      0x2
#define _SCANLADRU_SCANLADR18_SIZE                          0x1
#define _SCANLADRU_SCANLADR18_LENGTH                        0x1
#define _SCANLADRU_SCANLADR18_MASK                          0x4
#define _SCANLADRU_SCANLADR19_POSN                          0x3
#define _SCANLADRU_SCANLADR19_POSITION                      0x3
#define _SCANLADRU_SCANLADR19_SIZE                          0x1
#define _SCANLADRU_SCANLADR19_LENGTH                        0x1
#define _SCANLADRU_SCANLADR19_MASK                          0x8
#define _SCANLADRU_SCANLADR20_POSN                          0x4
#define _SCANLADRU_SCANLADR20_POSITION                      0x4
#define _SCANLADRU_SCANLADR20_SIZE                          0x1
#define _SCANLADRU_SCANLADR20_LENGTH                        0x1
#define _SCANLADRU_SCANLADR20_MASK                          0x10
#define _SCANLADRU_SCANLADR21_POSN                          0x5
#define _SCANLADRU_SCANLADR21_POSITION                      0x5
#define _SCANLADRU_SCANLADR21_SIZE                          0x1
#define _SCANLADRU_SCANLADR21_LENGTH                        0x1
#define _SCANLADRU_SCANLADR21_MASK                          0x20

// Register: SCANHADR
#define SCANHADR SCANHADR
#ifndef __CCI__
extern volatile __uint24                SCANHADR            __at(0xF4C);
#endif
#ifndef _LIB_BUILD
asm("SCANHADR equ 0F4Ch");
#endif

// Register: SCANHADRL
#define SCANHADRL SCANHADRL
extern volatile unsigned char           SCANHADRL           __at(0xF4C);
#ifndef _LIB_BUILD
asm("SCANHADRL equ 0F4Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned HADR                   :8;
    };
    struct {
        unsigned HADR0                  :1;
        unsigned HADR1                  :1;
        unsigned HADR2                  :1;
        unsigned HADR3                  :1;
        unsigned HADR4                  :1;
        unsigned HADR5                  :1;
        unsigned HADR6                  :1;
        unsigned HADR7                  :1;
    };
    struct {
        unsigned SCANHADR               :8;
    };
    struct {
        unsigned SCANHADR0              :1;
        unsigned SCANHADR1              :1;
        unsigned SCANHADR2              :1;
        unsigned SCANHADR3              :1;
        unsigned SCANHADR4              :1;
        unsigned SCANHADR5              :1;
        unsigned SCANHADR6              :1;
        unsigned SCANHADR7              :1;
    };
} SCANHADRLbits_t;
extern volatile SCANHADRLbits_t SCANHADRLbits __at(0xF4C);
// bitfield macros
#define _SCANHADRL_HADR_POSN                                0x0
#define _SCANHADRL_HADR_POSITION                            0x0
#define _SCANHADRL_HADR_SIZE                                0x8
#define _SCANHADRL_HADR_LENGTH                              0x8
#define _SCANHADRL_HADR_MASK                                0xFF
#define _SCANHADRL_HADR0_POSN                               0x0
#define _SCANHADRL_HADR0_POSITION                           0x0
#define _SCANHADRL_HADR0_SIZE                               0x1
#define _SCANHADRL_HADR0_LENGTH                             0x1
#define _SCANHADRL_HADR0_MASK                               0x1
#define _SCANHADRL_HADR1_POSN                               0x1
#define _SCANHADRL_HADR1_POSITION                           0x1
#define _SCANHADRL_HADR1_SIZE                               0x1
#define _SCANHADRL_HADR1_LENGTH                             0x1
#define _SCANHADRL_HADR1_MASK                               0x2
#define _SCANHADRL_HADR2_POSN                               0x2
#define _SCANHADRL_HADR2_POSITION                           0x2
#define _SCANHADRL_HADR2_SIZE                               0x1
#define _SCANHADRL_HADR2_LENGTH                             0x1
#define _SCANHADRL_HADR2_MASK                               0x4
#define _SCANHADRL_HADR3_POSN                               0x3
#define _SCANHADRL_HADR3_POSITION                           0x3
#define _SCANHADRL_HADR3_SIZE                               0x1
#define _SCANHADRL_HADR3_LENGTH                             0x1
#define _SCANHADRL_HADR3_MASK                               0x8
#define _SCANHADRL_HADR4_POSN                               0x4
#define _SCANHADRL_HADR4_POSITION                           0x4
#define _SCANHADRL_HADR4_SIZE                               0x1
#define _SCANHADRL_HADR4_LENGTH                             0x1
#define _SCANHADRL_HADR4_MASK                               0x10
#define _SCANHADRL_HADR5_POSN                               0x5
#define _SCANHADRL_HADR5_POSITION                           0x5
#define _SCANHADRL_HADR5_SIZE                               0x1
#define _SCANHADRL_HADR5_LENGTH                             0x1
#define _SCANHADRL_HADR5_MASK                               0x20
#define _SCANHADRL_HADR6_POSN                               0x6
#define _SCANHADRL_HADR6_POSITION                           0x6
#define _SCANHADRL_HADR6_SIZE                               0x1
#define _SCANHADRL_HADR6_LENGTH                             0x1
#define _SCANHADRL_HADR6_MASK                               0x40
#define _SCANHADRL_HADR7_POSN                               0x7
#define _SCANHADRL_HADR7_POSITION                           0x7
#define _SCANHADRL_HADR7_SIZE                               0x1
#define _SCANHADRL_HADR7_LENGTH                             0x1
#define _SCANHADRL_HADR7_MASK                               0x80
#define _SCANHADRL_SCANHADR_POSN                            0x0
#define _SCANHADRL_SCANHADR_POSITION                        0x0
#define _SCANHADRL_SCANHADR_SIZE                            0x8
#define _SCANHADRL_SCANHADR_LENGTH                          0x8
#define _SCANHADRL_SCANHADR_MASK                            0xFF
#define _SCANHADRL_SCANHADR0_POSN                           0x0
#define _SCANHADRL_SCANHADR0_POSITION                       0x0
#define _SCANHADRL_SCANHADR0_SIZE                           0x1
#define _SCANHADRL_SCANHADR0_LENGTH                         0x1
#define _SCANHADRL_SCANHADR0_MASK                           0x1
#define _SCANHADRL_SCANHADR1_POSN                           0x1
#define _SCANHADRL_SCANHADR1_POSITION                       0x1
#define _SCANHADRL_SCANHADR1_SIZE                           0x1
#define _SCANHADRL_SCANHADR1_LENGTH                         0x1
#define _SCANHADRL_SCANHADR1_MASK                           0x2
#define _SCANHADRL_SCANHADR2_POSN                           0x2
#define _SCANHADRL_SCANHADR2_POSITION                       0x2
#define _SCANHADRL_SCANHADR2_SIZE                           0x1
#define _SCANHADRL_SCANHADR2_LENGTH                         0x1
#define _SCANHADRL_SCANHADR2_MASK                           0x4
#define _SCANHADRL_SCANHADR3_POSN                           0x3
#define _SCANHADRL_SCANHADR3_POSITION                       0x3
#define _SCANHADRL_SCANHADR3_SIZE                           0x1
#define _SCANHADRL_SCANHADR3_LENGTH                         0x1
#define _SCANHADRL_SCANHADR3_MASK                           0x8
#define _SCANHADRL_SCANHADR4_POSN                           0x4
#define _SCANHADRL_SCANHADR4_POSITION                       0x4
#define _SCANHADRL_SCANHADR4_SIZE                           0x1
#define _SCANHADRL_SCANHADR4_LENGTH                         0x1
#define _SCANHADRL_SCANHADR4_MASK                           0x10
#define _SCANHADRL_SCANHADR5_POSN                           0x5
#define _SCANHADRL_SCANHADR5_POSITION                       0x5
#define _SCANHADRL_SCANHADR5_SIZE                           0x1
#define _SCANHADRL_SCANHADR5_LENGTH                         0x1
#define _SCANHADRL_SCANHADR5_MASK                           0x20
#define _SCANHADRL_SCANHADR6_POSN                           0x6
#define _SCANHADRL_SCANHADR6_POSITION                       0x6
#define _SCANHADRL_SCANHADR6_SIZE                           0x1
#define _SCANHADRL_SCANHADR6_LENGTH                         0x1
#define _SCANHADRL_SCANHADR6_MASK                           0x40
#define _SCANHADRL_SCANHADR7_POSN                           0x7
#define _SCANHADRL_SCANHADR7_POSITION                       0x7
#define _SCANHADRL_SCANHADR7_SIZE                           0x1
#define _SCANHADRL_SCANHADR7_LENGTH                         0x1
#define _SCANHADRL_SCANHADR7_MASK                           0x80

// Register: SCANHADRH
#define SCANHADRH SCANHADRH
extern volatile unsigned char           SCANHADRH           __at(0xF4D);
#ifndef _LIB_BUILD
asm("SCANHADRH equ 0F4Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned HADR                   :8;
    };
    struct {
        unsigned HADR8                  :1;
        unsigned HADR9                  :1;
        unsigned HADR10                 :1;
        unsigned HADR11                 :1;
        unsigned HADR12                 :1;
        unsigned HADR13                 :1;
        unsigned HADR14                 :1;
        unsigned HADR15                 :1;
    };
    struct {
        unsigned SCANHADR               :8;
    };
    struct {
        unsigned SCANHADR8              :1;
        unsigned SCANHADR9              :1;
        unsigned SCANHADR10             :1;
        unsigned SCANHADR11             :1;
        unsigned SCANHADR12             :1;
        unsigned SCANHADR13             :1;
        unsigned SCANHADR14             :1;
        unsigned SCANHADR15             :1;
    };
} SCANHADRHbits_t;
extern volatile SCANHADRHbits_t SCANHADRHbits __at(0xF4D);
// bitfield macros
#define _SCANHADRH_HADR_POSN                                0x0
#define _SCANHADRH_HADR_POSITION                            0x0
#define _SCANHADRH_HADR_SIZE                                0x8
#define _SCANHADRH_HADR_LENGTH                              0x8
#define _SCANHADRH_HADR_MASK                                0xFF
#define _SCANHADRH_HADR8_POSN                               0x0
#define _SCANHADRH_HADR8_POSITION                           0x0
#define _SCANHADRH_HADR8_SIZE                               0x1
#define _SCANHADRH_HADR8_LENGTH                             0x1
#define _SCANHADRH_HADR8_MASK                               0x1
#define _SCANHADRH_HADR9_POSN                               0x1
#define _SCANHADRH_HADR9_POSITION                           0x1
#define _SCANHADRH_HADR9_SIZE                               0x1
#define _SCANHADRH_HADR9_LENGTH                             0x1
#define _SCANHADRH_HADR9_MASK                               0x2
#define _SCANHADRH_HADR10_POSN                              0x2
#define _SCANHADRH_HADR10_POSITION                          0x2
#define _SCANHADRH_HADR10_SIZE                              0x1
#define _SCANHADRH_HADR10_LENGTH                            0x1
#define _SCANHADRH_HADR10_MASK                              0x4
#define _SCANHADRH_HADR11_POSN                              0x3
#define _SCANHADRH_HADR11_POSITION                          0x3
#define _SCANHADRH_HADR11_SIZE                              0x1
#define _SCANHADRH_HADR11_LENGTH                            0x1
#define _SCANHADRH_HADR11_MASK                              0x8
#define _SCANHADRH_HADR12_POSN                              0x4
#define _SCANHADRH_HADR12_POSITION                          0x4
#define _SCANHADRH_HADR12_SIZE                              0x1
#define _SCANHADRH_HADR12_LENGTH                            0x1
#define _SCANHADRH_HADR12_MASK                              0x10
#define _SCANHADRH_HADR13_POSN                              0x5
#define _SCANHADRH_HADR13_POSITION                          0x5
#define _SCANHADRH_HADR13_SIZE                              0x1
#define _SCANHADRH_HADR13_LENGTH                            0x1
#define _SCANHADRH_HADR13_MASK                              0x20
#define _SCANHADRH_HADR14_POSN                              0x6
#define _SCANHADRH_HADR14_POSITION                          0x6
#define _SCANHADRH_HADR14_SIZE                              0x1
#define _SCANHADRH_HADR14_LENGTH                            0x1
#define _SCANHADRH_HADR14_MASK                              0x40
#define _SCANHADRH_HADR15_POSN                              0x7
#define _SCANHADRH_HADR15_POSITION                          0x7
#define _SCANHADRH_HADR15_SIZE                              0x1
#define _SCANHADRH_HADR15_LENGTH                            0x1
#define _SCANHADRH_HADR15_MASK                              0x80
#define _SCANHADRH_SCANHADR_POSN                            0x0
#define _SCANHADRH_SCANHADR_POSITION                        0x0
#define _SCANHADRH_SCANHADR_SIZE                            0x8
#define _SCANHADRH_SCANHADR_LENGTH                          0x8
#define _SCANHADRH_SCANHADR_MASK                            0xFF
#define _SCANHADRH_SCANHADR8_POSN                           0x0
#define _SCANHADRH_SCANHADR8_POSITION                       0x0
#define _SCANHADRH_SCANHADR8_SIZE                           0x1
#define _SCANHADRH_SCANHADR8_LENGTH                         0x1
#define _SCANHADRH_SCANHADR8_MASK                           0x1
#define _SCANHADRH_SCANHADR9_POSN                           0x1
#define _SCANHADRH_SCANHADR9_POSITION                       0x1
#define _SCANHADRH_SCANHADR9_SIZE                           0x1
#define _SCANHADRH_SCANHADR9_LENGTH                         0x1
#define _SCANHADRH_SCANHADR9_MASK                           0x2
#define _SCANHADRH_SCANHADR10_POSN                          0x2
#define _SCANHADRH_SCANHADR10_POSITION                      0x2
#define _SCANHADRH_SCANHADR10_SIZE                          0x1
#define _SCANHADRH_SCANHADR10_LENGTH                        0x1
#define _SCANHADRH_SCANHADR10_MASK                          0x4
#define _SCANHADRH_SCANHADR11_POSN                          0x3
#define _SCANHADRH_SCANHADR11_POSITION                      0x3
#define _SCANHADRH_SCANHADR11_SIZE                          0x1
#define _SCANHADRH_SCANHADR11_LENGTH                        0x1
#define _SCANHADRH_SCANHADR11_MASK                          0x8
#define _SCANHADRH_SCANHADR12_POSN                          0x4
#define _SCANHADRH_SCANHADR12_POSITION                      0x4
#define _SCANHADRH_SCANHADR12_SIZE                          0x1
#define _SCANHADRH_SCANHADR12_LENGTH                        0x1
#define _SCANHADRH_SCANHADR12_MASK                          0x10
#define _SCANHADRH_SCANHADR13_POSN                          0x5
#define _SCANHADRH_SCANHADR13_POSITION                      0x5
#define _SCANHADRH_SCANHADR13_SIZE                          0x1
#define _SCANHADRH_SCANHADR13_LENGTH                        0x1
#define _SCANHADRH_SCANHADR13_MASK                          0x20
#define _SCANHADRH_SCANHADR14_POSN                          0x6
#define _SCANHADRH_SCANHADR14_POSITION                      0x6
#define _SCANHADRH_SCANHADR14_SIZE                          0x1
#define _SCANHADRH_SCANHADR14_LENGTH                        0x1
#define _SCANHADRH_SCANHADR14_MASK                          0x40
#define _SCANHADRH_SCANHADR15_POSN                          0x7
#define _SCANHADRH_SCANHADR15_POSITION                      0x7
#define _SCANHADRH_SCANHADR15_SIZE                          0x1
#define _SCANHADRH_SCANHADR15_LENGTH                        0x1
#define _SCANHADRH_SCANHADR15_MASK                          0x80

// Register: SCANHADRU
#define SCANHADRU SCANHADRU
extern volatile unsigned char           SCANHADRU           __at(0xF4E);
#ifndef _LIB_BUILD
asm("SCANHADRU equ 0F4Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned HADR                   :6;
    };
    struct {
        unsigned HADR16                 :1;
        unsigned HADR17                 :1;
        unsigned HADR18                 :1;
        unsigned HADR19                 :1;
        unsigned HADR20                 :1;
        unsigned HADR21                 :1;
    };
    struct {
        unsigned SCANHADR               :6;
    };
    struct {
        unsigned SCANHADR16             :1;
        unsigned SCANHADR17             :1;
        unsigned SCANHADR18             :1;
        unsigned SCANHADR19             :1;
        unsigned SCANHADR20             :1;
        unsigned SCANHADR21             :1;
    };
} SCANHADRUbits_t;
extern volatile SCANHADRUbits_t SCANHADRUbits __at(0xF4E);
// bitfield macros
#define _SCANHADRU_HADR_POSN                                0x0
#define _SCANHADRU_HADR_POSITION                            0x0
#define _SCANHADRU_HADR_SIZE                                0x6
#define _SCANHADRU_HADR_LENGTH                              0x6
#define _SCANHADRU_HADR_MASK                                0x3F
#define _SCANHADRU_HADR16_POSN                              0x0
#define _SCANHADRU_HADR16_POSITION                          0x0
#define _SCANHADRU_HADR16_SIZE                              0x1
#define _SCANHADRU_HADR16_LENGTH                            0x1
#define _SCANHADRU_HADR16_MASK                              0x1
#define _SCANHADRU_HADR17_POSN                              0x1
#define _SCANHADRU_HADR17_POSITION                          0x1
#define _SCANHADRU_HADR17_SIZE                              0x1
#define _SCANHADRU_HADR17_LENGTH                            0x1
#define _SCANHADRU_HADR17_MASK                              0x2
#define _SCANHADRU_HADR18_POSN                              0x2
#define _SCANHADRU_HADR18_POSITION                          0x2
#define _SCANHADRU_HADR18_SIZE                              0x1
#define _SCANHADRU_HADR18_LENGTH                            0x1
#define _SCANHADRU_HADR18_MASK                              0x4
#define _SCANHADRU_HADR19_POSN                              0x3
#define _SCANHADRU_HADR19_POSITION                          0x3
#define _SCANHADRU_HADR19_SIZE                              0x1
#define _SCANHADRU_HADR19_LENGTH                            0x1
#define _SCANHADRU_HADR19_MASK                              0x8
#define _SCANHADRU_HADR20_POSN                              0x4
#define _SCANHADRU_HADR20_POSITION                          0x4
#define _SCANHADRU_HADR20_SIZE                              0x1
#define _SCANHADRU_HADR20_LENGTH                            0x1
#define _SCANHADRU_HADR20_MASK                              0x10
#define _SCANHADRU_HADR21_POSN                              0x5
#define _SCANHADRU_HADR21_POSITION                          0x5
#define _SCANHADRU_HADR21_SIZE                              0x1
#define _SCANHADRU_HADR21_LENGTH                            0x1
#define _SCANHADRU_HADR21_MASK                              0x20
#define _SCANHADRU_SCANHADR_POSN                            0x0
#define _SCANHADRU_SCANHADR_POSITION                        0x0
#define _SCANHADRU_SCANHADR_SIZE                            0x6
#define _SCANHADRU_SCANHADR_LENGTH                          0x6
#define _SCANHADRU_SCANHADR_MASK                            0x3F
#define _SCANHADRU_SCANHADR16_POSN                          0x0
#define _SCANHADRU_SCANHADR16_POSITION                      0x0
#define _SCANHADRU_SCANHADR16_SIZE                          0x1
#define _SCANHADRU_SCANHADR16_LENGTH                        0x1
#define _SCANHADRU_SCANHADR16_MASK                          0x1
#define _SCANHADRU_SCANHADR17_POSN                          0x1
#define _SCANHADRU_SCANHADR17_POSITION                      0x1
#define _SCANHADRU_SCANHADR17_SIZE                          0x1
#define _SCANHADRU_SCANHADR17_LENGTH                        0x1
#define _SCANHADRU_SCANHADR17_MASK                          0x2
#define _SCANHADRU_SCANHADR18_POSN                          0x2
#define _SCANHADRU_SCANHADR18_POSITION                      0x2
#define _SCANHADRU_SCANHADR18_SIZE                          0x1
#define _SCANHADRU_SCANHADR18_LENGTH                        0x1
#define _SCANHADRU_SCANHADR18_MASK                          0x4
#define _SCANHADRU_SCANHADR19_POSN                          0x3
#define _SCANHADRU_SCANHADR19_POSITION                      0x3
#define _SCANHADRU_SCANHADR19_SIZE                          0x1
#define _SCANHADRU_SCANHADR19_LENGTH                        0x1
#define _SCANHADRU_SCANHADR19_MASK                          0x8
#define _SCANHADRU_SCANHADR20_POSN                          0x4
#define _SCANHADRU_SCANHADR20_POSITION                      0x4
#define _SCANHADRU_SCANHADR20_SIZE                          0x1
#define _SCANHADRU_SCANHADR20_LENGTH                        0x1
#define _SCANHADRU_SCANHADR20_MASK                          0x10
#define _SCANHADRU_SCANHADR21_POSN                          0x5
#define _SCANHADRU_SCANHADR21_POSITION                      0x5
#define _SCANHADRU_SCANHADR21_SIZE                          0x1
#define _SCANHADRU_SCANHADR21_LENGTH                        0x1
#define _SCANHADRU_SCANHADR21_MASK                          0x20

// Register: SCANCON0
#define SCANCON0 SCANCON0
extern volatile unsigned char           SCANCON0            __at(0xF4F);
#ifndef _LIB_BUILD
asm("SCANCON0 equ 0F4Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :2;
        unsigned                        :1;
        unsigned INTM                   :1;
        unsigned INVALID                :1;
        unsigned BUSY                   :1;
        unsigned GO                     :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
    };
    struct {
        unsigned SCANMODE               :2;
        unsigned                        :1;
        unsigned SCANINTM               :1;
        unsigned SCANINVALID            :1;
        unsigned SCANBUSY               :1;
        unsigned SCANGO                 :1;
        unsigned SCANEN                 :1;
    };
    struct {
        unsigned SCANMODE0              :1;
        unsigned SCANMODE1              :1;
    };
    struct {
        unsigned                        :4;
        unsigned DABORT                 :1;
    };
} SCANCON0bits_t;
extern volatile SCANCON0bits_t SCANCON0bits __at(0xF4F);
// bitfield macros
#define _SCANCON0_MODE_POSN                                 0x0
#define _SCANCON0_MODE_POSITION                             0x0
#define _SCANCON0_MODE_SIZE                                 0x2
#define _SCANCON0_MODE_LENGTH                               0x2
#define _SCANCON0_MODE_MASK                                 0x3
#define _SCANCON0_INTM_POSN                                 0x3
#define _SCANCON0_INTM_POSITION                             0x3
#define _SCANCON0_INTM_SIZE                                 0x1
#define _SCANCON0_INTM_LENGTH                               0x1
#define _SCANCON0_INTM_MASK                                 0x8
#define _SCANCON0_INVALID_POSN                              0x4
#define _SCANCON0_INVALID_POSITION                          0x4
#define _SCANCON0_INVALID_SIZE                              0x1
#define _SCANCON0_INVALID_LENGTH                            0x1
#define _SCANCON0_INVALID_MASK                              0x10
#define _SCANCON0_BUSY_POSN                                 0x5
#define _SCANCON0_BUSY_POSITION                             0x5
#define _SCANCON0_BUSY_SIZE                                 0x1
#define _SCANCON0_BUSY_LENGTH                               0x1
#define _SCANCON0_BUSY_MASK                                 0x20
#define _SCANCON0_GO_POSN                                   0x6
#define _SCANCON0_GO_POSITION                               0x6
#define _SCANCON0_GO_SIZE                                   0x1
#define _SCANCON0_GO_LENGTH                                 0x1
#define _SCANCON0_GO_MASK                                   0x40
#define _SCANCON0_EN_POSN                                   0x7
#define _SCANCON0_EN_POSITION                               0x7
#define _SCANCON0_EN_SIZE                                   0x1
#define _SCANCON0_EN_LENGTH                                 0x1
#define _SCANCON0_EN_MASK                                   0x80
#define _SCANCON0_MODE0_POSN                                0x0
#define _SCANCON0_MODE0_POSITION                            0x0
#define _SCANCON0_MODE0_SIZE                                0x1
#define _SCANCON0_MODE0_LENGTH                              0x1
#define _SCANCON0_MODE0_MASK                                0x1
#define _SCANCON0_MODE1_POSN                                0x1
#define _SCANCON0_MODE1_POSITION                            0x1
#define _SCANCON0_MODE1_SIZE                                0x1
#define _SCANCON0_MODE1_LENGTH                              0x1
#define _SCANCON0_MODE1_MASK                                0x2
#define _SCANCON0_SCANMODE_POSN                             0x0
#define _SCANCON0_SCANMODE_POSITION                         0x0
#define _SCANCON0_SCANMODE_SIZE                             0x2
#define _SCANCON0_SCANMODE_LENGTH                           0x2
#define _SCANCON0_SCANMODE_MASK                             0x3
#define _SCANCON0_SCANINTM_POSN                             0x3
#define _SCANCON0_SCANINTM_POSITION                         0x3
#define _SCANCON0_SCANINTM_SIZE                             0x1
#define _SCANCON0_SCANINTM_LENGTH                           0x1
#define _SCANCON0_SCANINTM_MASK                             0x8
#define _SCANCON0_SCANINVALID_POSN                          0x4
#define _SCANCON0_SCANINVALID_POSITION                      0x4
#define _SCANCON0_SCANINVALID_SIZE                          0x1
#define _SCANCON0_SCANINVALID_LENGTH                        0x1
#define _SCANCON0_SCANINVALID_MASK                          0x10
#define _SCANCON0_SCANBUSY_POSN                             0x5
#define _SCANCON0_SCANBUSY_POSITION                         0x5
#define _SCANCON0_SCANBUSY_SIZE                             0x1
#define _SCANCON0_SCANBUSY_LENGTH                           0x1
#define _SCANCON0_SCANBUSY_MASK                             0x20
#define _SCANCON0_SCANGO_POSN                               0x6
#define _SCANCON0_SCANGO_POSITION                           0x6
#define _SCANCON0_SCANGO_SIZE                               0x1
#define _SCANCON0_SCANGO_LENGTH                             0x1
#define _SCANCON0_SCANGO_MASK                               0x40
#define _SCANCON0_SCANEN_POSN                               0x7
#define _SCANCON0_SCANEN_POSITION                           0x7
#define _SCANCON0_SCANEN_SIZE                               0x1
#define _SCANCON0_SCANEN_LENGTH                             0x1
#define _SCANCON0_SCANEN_MASK                               0x80
#define _SCANCON0_SCANMODE0_POSN                            0x0
#define _SCANCON0_SCANMODE0_POSITION                        0x0
#define _SCANCON0_SCANMODE0_SIZE                            0x1
#define _SCANCON0_SCANMODE0_LENGTH                          0x1
#define _SCANCON0_SCANMODE0_MASK                            0x1
#define _SCANCON0_SCANMODE1_POSN                            0x1
#define _SCANCON0_SCANMODE1_POSITION                        0x1
#define _SCANCON0_SCANMODE1_SIZE                            0x1
#define _SCANCON0_SCANMODE1_LENGTH                          0x1
#define _SCANCON0_SCANMODE1_MASK                            0x2
#define _SCANCON0_DABORT_POSN                               0x4
#define _SCANCON0_DABORT_POSITION                           0x4
#define _SCANCON0_DABORT_SIZE                               0x1
#define _SCANCON0_DABORT_LENGTH                             0x1
#define _SCANCON0_DABORT_MASK                               0x10

// Register: SCANTRIG
#define SCANTRIG SCANTRIG
extern volatile unsigned char           SCANTRIG            __at(0xF50);
#ifndef _LIB_BUILD
asm("SCANTRIG equ 0F50h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TSEL                   :4;
    };
    struct {
        unsigned TSEL0                  :1;
        unsigned TSEL1                  :1;
        unsigned TSEL2                  :1;
        unsigned TSEL3                  :1;
    };
    struct {
        unsigned SCANTSEL               :4;
    };
    struct {
        unsigned SCANTSEL0              :1;
        unsigned SCANTSEL1              :1;
        unsigned SCANTSEL2              :1;
        unsigned SCANTSEL3              :1;
    };
} SCANTRIGbits_t;
extern volatile SCANTRIGbits_t SCANTRIGbits __at(0xF50);
// bitfield macros
#define _SCANTRIG_TSEL_POSN                                 0x0
#define _SCANTRIG_TSEL_POSITION                             0x0
#define _SCANTRIG_TSEL_SIZE                                 0x4
#define _SCANTRIG_TSEL_LENGTH                               0x4
#define _SCANTRIG_TSEL_MASK                                 0xF
#define _SCANTRIG_TSEL0_POSN                                0x0
#define _SCANTRIG_TSEL0_POSITION                            0x0
#define _SCANTRIG_TSEL0_SIZE                                0x1
#define _SCANTRIG_TSEL0_LENGTH                              0x1
#define _SCANTRIG_TSEL0_MASK                                0x1
#define _SCANTRIG_TSEL1_POSN                                0x1
#define _SCANTRIG_TSEL1_POSITION                            0x1
#define _SCANTRIG_TSEL1_SIZE                                0x1
#define _SCANTRIG_TSEL1_LENGTH                              0x1
#define _SCANTRIG_TSEL1_MASK                                0x2
#define _SCANTRIG_TSEL2_POSN                                0x2
#define _SCANTRIG_TSEL2_POSITION                            0x2
#define _SCANTRIG_TSEL2_SIZE                                0x1
#define _SCANTRIG_TSEL2_LENGTH                              0x1
#define _SCANTRIG_TSEL2_MASK                                0x4
#define _SCANTRIG_TSEL3_POSN                                0x3
#define _SCANTRIG_TSEL3_POSITION                            0x3
#define _SCANTRIG_TSEL3_SIZE                                0x1
#define _SCANTRIG_TSEL3_LENGTH                              0x1
#define _SCANTRIG_TSEL3_MASK                                0x8
#define _SCANTRIG_SCANTSEL_POSN                             0x0
#define _SCANTRIG_SCANTSEL_POSITION                         0x0
#define _SCANTRIG_SCANTSEL_SIZE                             0x4
#define _SCANTRIG_SCANTSEL_LENGTH                           0x4
#define _SCANTRIG_SCANTSEL_MASK                             0xF
#define _SCANTRIG_SCANTSEL0_POSN                            0x0
#define _SCANTRIG_SCANTSEL0_POSITION                        0x0
#define _SCANTRIG_SCANTSEL0_SIZE                            0x1
#define _SCANTRIG_SCANTSEL0_LENGTH                          0x1
#define _SCANTRIG_SCANTSEL0_MASK                            0x1
#define _SCANTRIG_SCANTSEL1_POSN                            0x1
#define _SCANTRIG_SCANTSEL1_POSITION                        0x1
#define _SCANTRIG_SCANTSEL1_SIZE                            0x1
#define _SCANTRIG_SCANTSEL1_LENGTH                          0x1
#define _SCANTRIG_SCANTSEL1_MASK                            0x2
#define _SCANTRIG_SCANTSEL2_POSN                            0x2
#define _SCANTRIG_SCANTSEL2_POSITION                        0x2
#define _SCANTRIG_SCANTSEL2_SIZE                            0x1
#define _SCANTRIG_SCANTSEL2_LENGTH                          0x1
#define _SCANTRIG_SCANTSEL2_MASK                            0x4
#define _SCANTRIG_SCANTSEL3_POSN                            0x3
#define _SCANTRIG_SCANTSEL3_POSITION                        0x3
#define _SCANTRIG_SCANTSEL3_SIZE                            0x1
#define _SCANTRIG_SCANTSEL3_LENGTH                          0x1
#define _SCANTRIG_SCANTSEL3_MASK                            0x8

// Register: MDCON0
#define MDCON0 MDCON0
extern volatile unsigned char           MDCON0              __at(0xF51);
#ifndef _LIB_BUILD
asm("MDCON0 equ 0F51h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BIT                    :1;
        unsigned                        :3;
        unsigned OPOL                   :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MDBIT                  :1;
        unsigned                        :3;
        unsigned MDOPOL                 :1;
        unsigned MDOUT                  :1;
        unsigned                        :1;
        unsigned MDEN                   :1;
    };
} MDCON0bits_t;
extern volatile MDCON0bits_t MDCON0bits __at(0xF51);
// bitfield macros
#define _MDCON0_BIT_POSN                                    0x0
#define _MDCON0_BIT_POSITION                                0x0
#define _MDCON0_BIT_SIZE                                    0x1
#define _MDCON0_BIT_LENGTH                                  0x1
#define _MDCON0_BIT_MASK                                    0x1
#define _MDCON0_OPOL_POSN                                   0x4
#define _MDCON0_OPOL_POSITION                               0x4
#define _MDCON0_OPOL_SIZE                                   0x1
#define _MDCON0_OPOL_LENGTH                                 0x1
#define _MDCON0_OPOL_MASK                                   0x10
#define _MDCON0_OUT_POSN                                    0x5
#define _MDCON0_OUT_POSITION                                0x5
#define _MDCON0_OUT_SIZE                                    0x1
#define _MDCON0_OUT_LENGTH                                  0x1
#define _MDCON0_OUT_MASK                                    0x20
#define _MDCON0_EN_POSN                                     0x7
#define _MDCON0_EN_POSITION                                 0x7
#define _MDCON0_EN_SIZE                                     0x1
#define _MDCON0_EN_LENGTH                                   0x1
#define _MDCON0_EN_MASK                                     0x80
#define _MDCON0_MDBIT_POSN                                  0x0
#define _MDCON0_MDBIT_POSITION                              0x0
#define _MDCON0_MDBIT_SIZE                                  0x1
#define _MDCON0_MDBIT_LENGTH                                0x1
#define _MDCON0_MDBIT_MASK                                  0x1
#define _MDCON0_MDOPOL_POSN                                 0x4
#define _MDCON0_MDOPOL_POSITION                             0x4
#define _MDCON0_MDOPOL_SIZE                                 0x1
#define _MDCON0_MDOPOL_LENGTH                               0x1
#define _MDCON0_MDOPOL_MASK                                 0x10
#define _MDCON0_MDOUT_POSN                                  0x5
#define _MDCON0_MDOUT_POSITION                              0x5
#define _MDCON0_MDOUT_SIZE                                  0x1
#define _MDCON0_MDOUT_LENGTH                                0x1
#define _MDCON0_MDOUT_MASK                                  0x20
#define _MDCON0_MDEN_POSN                                   0x7
#define _MDCON0_MDEN_POSITION                               0x7
#define _MDCON0_MDEN_SIZE                                   0x1
#define _MDCON0_MDEN_LENGTH                                 0x1
#define _MDCON0_MDEN_MASK                                   0x80

// Register: MDCON1
#define MDCON1 MDCON1
extern volatile unsigned char           MDCON1              __at(0xF52);
#ifndef _LIB_BUILD
asm("MDCON1 equ 0F52h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLSYNC                 :1;
        unsigned CLPOL                  :1;
        unsigned                        :2;
        unsigned CHSYNC                 :1;
        unsigned CHPOL                  :1;
    };
    struct {
        unsigned MDCLSYNC               :1;
        unsigned MDCLPOL                :1;
        unsigned                        :2;
        unsigned MDCHSYNC               :1;
        unsigned MDCHPOL                :1;
    };
} MDCON1bits_t;
extern volatile MDCON1bits_t MDCON1bits __at(0xF52);
// bitfield macros
#define _MDCON1_CLSYNC_POSN                                 0x0
#define _MDCON1_CLSYNC_POSITION                             0x0
#define _MDCON1_CLSYNC_SIZE                                 0x1
#define _MDCON1_CLSYNC_LENGTH                               0x1
#define _MDCON1_CLSYNC_MASK                                 0x1
#define _MDCON1_CLPOL_POSN                                  0x1
#define _MDCON1_CLPOL_POSITION                              0x1
#define _MDCON1_CLPOL_SIZE                                  0x1
#define _MDCON1_CLPOL_LENGTH                                0x1
#define _MDCON1_CLPOL_MASK                                  0x2
#define _MDCON1_CHSYNC_POSN                                 0x4
#define _MDCON1_CHSYNC_POSITION                             0x4
#define _MDCON1_CHSYNC_SIZE                                 0x1
#define _MDCON1_CHSYNC_LENGTH                               0x1
#define _MDCON1_CHSYNC_MASK                                 0x10
#define _MDCON1_CHPOL_POSN                                  0x5
#define _MDCON1_CHPOL_POSITION                              0x5
#define _MDCON1_CHPOL_SIZE                                  0x1
#define _MDCON1_CHPOL_LENGTH                                0x1
#define _MDCON1_CHPOL_MASK                                  0x20
#define _MDCON1_MDCLSYNC_POSN                               0x0
#define _MDCON1_MDCLSYNC_POSITION                           0x0
#define _MDCON1_MDCLSYNC_SIZE                               0x1
#define _MDCON1_MDCLSYNC_LENGTH                             0x1
#define _MDCON1_MDCLSYNC_MASK                               0x1
#define _MDCON1_MDCLPOL_POSN                                0x1
#define _MDCON1_MDCLPOL_POSITION                            0x1
#define _MDCON1_MDCLPOL_SIZE                                0x1
#define _MDCON1_MDCLPOL_LENGTH                              0x1
#define _MDCON1_MDCLPOL_MASK                                0x2
#define _MDCON1_MDCHSYNC_POSN                               0x4
#define _MDCON1_MDCHSYNC_POSITION                           0x4
#define _MDCON1_MDCHSYNC_SIZE                               0x1
#define _MDCON1_MDCHSYNC_LENGTH                             0x1
#define _MDCON1_MDCHSYNC_MASK                               0x10
#define _MDCON1_MDCHPOL_POSN                                0x5
#define _MDCON1_MDCHPOL_POSITION                            0x5
#define _MDCON1_MDCHPOL_SIZE                                0x1
#define _MDCON1_MDCHPOL_LENGTH                              0x1
#define _MDCON1_MDCHPOL_MASK                                0x20

// Register: MDSRC
#define MDSRC MDSRC
extern volatile unsigned char           MDSRC               __at(0xF53);
#ifndef _LIB_BUILD
asm("MDSRC equ 0F53h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SRCS0                  :1;
        unsigned SRCS1                  :1;
        unsigned SRCS2                  :1;
        unsigned SRCS3                  :1;
    };
    struct {
        unsigned SRCS                   :4;
    };
    struct {
        unsigned MDSRCS                 :4;
    };
    struct {
        unsigned MDSRCS0                :1;
        unsigned MDSRCS1                :1;
        unsigned MDSRCS2                :1;
        unsigned MDSRCS3                :1;
    };
} MDSRCbits_t;
extern volatile MDSRCbits_t MDSRCbits __at(0xF53);
// bitfield macros
#define _MDSRC_SRCS0_POSN                                   0x0
#define _MDSRC_SRCS0_POSITION                               0x0
#define _MDSRC_SRCS0_SIZE                                   0x1
#define _MDSRC_SRCS0_LENGTH                                 0x1
#define _MDSRC_SRCS0_MASK                                   0x1
#define _MDSRC_SRCS1_POSN                                   0x1
#define _MDSRC_SRCS1_POSITION                               0x1
#define _MDSRC_SRCS1_SIZE                                   0x1
#define _MDSRC_SRCS1_LENGTH                                 0x1
#define _MDSRC_SRCS1_MASK                                   0x2
#define _MDSRC_SRCS2_POSN                                   0x2
#define _MDSRC_SRCS2_POSITION                               0x2
#define _MDSRC_SRCS2_SIZE                                   0x1
#define _MDSRC_SRCS2_LENGTH                                 0x1
#define _MDSRC_SRCS2_MASK                                   0x4
#define _MDSRC_SRCS3_POSN                                   0x3
#define _MDSRC_SRCS3_POSITION                               0x3
#define _MDSRC_SRCS3_SIZE                                   0x1
#define _MDSRC_SRCS3_LENGTH                                 0x1
#define _MDSRC_SRCS3_MASK                                   0x8
#define _MDSRC_SRCS_POSN                                    0x0
#define _MDSRC_SRCS_POSITION                                0x0
#define _MDSRC_SRCS_SIZE                                    0x4
#define _MDSRC_SRCS_LENGTH                                  0x4
#define _MDSRC_SRCS_MASK                                    0xF
#define _MDSRC_MDSRCS_POSN                                  0x0
#define _MDSRC_MDSRCS_POSITION                              0x0
#define _MDSRC_MDSRCS_SIZE                                  0x4
#define _MDSRC_MDSRCS_LENGTH                                0x4
#define _MDSRC_MDSRCS_MASK                                  0xF
#define _MDSRC_MDSRCS0_POSN                                 0x0
#define _MDSRC_MDSRCS0_POSITION                             0x0
#define _MDSRC_MDSRCS0_SIZE                                 0x1
#define _MDSRC_MDSRCS0_LENGTH                               0x1
#define _MDSRC_MDSRCS0_MASK                                 0x1
#define _MDSRC_MDSRCS1_POSN                                 0x1
#define _MDSRC_MDSRCS1_POSITION                             0x1
#define _MDSRC_MDSRCS1_SIZE                                 0x1
#define _MDSRC_MDSRCS1_LENGTH                               0x1
#define _MDSRC_MDSRCS1_MASK                                 0x2
#define _MDSRC_MDSRCS2_POSN                                 0x2
#define _MDSRC_MDSRCS2_POSITION                             0x2
#define _MDSRC_MDSRCS2_SIZE                                 0x1
#define _MDSRC_MDSRCS2_LENGTH                               0x1
#define _MDSRC_MDSRCS2_MASK                                 0x4
#define _MDSRC_MDSRCS3_POSN                                 0x3
#define _MDSRC_MDSRCS3_POSITION                             0x3
#define _MDSRC_MDSRCS3_SIZE                                 0x1
#define _MDSRC_MDSRCS3_LENGTH                               0x1
#define _MDSRC_MDSRCS3_MASK                                 0x8

// Register: MDCARL
#define MDCARL MDCARL
extern volatile unsigned char           MDCARL              __at(0xF54);
#ifndef _LIB_BUILD
asm("MDCARL equ 0F54h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLS                    :3;
    };
    struct {
        unsigned MDCLS                  :3;
    };
    struct {
        unsigned MDCLS0                 :1;
        unsigned MDCLS1                 :1;
        unsigned MDCLS2                 :1;
    };
    struct {
        unsigned CLS0                   :1;
        unsigned CLS1                   :1;
        unsigned CLS2                   :1;
    };
} MDCARLbits_t;
extern volatile MDCARLbits_t MDCARLbits __at(0xF54);
// bitfield macros
#define _MDCARL_CLS_POSN                                    0x0
#define _MDCARL_CLS_POSITION                                0x0
#define _MDCARL_CLS_SIZE                                    0x3
#define _MDCARL_CLS_LENGTH                                  0x3
#define _MDCARL_CLS_MASK                                    0x7
#define _MDCARL_MDCLS_POSN                                  0x0
#define _MDCARL_MDCLS_POSITION                              0x0
#define _MDCARL_MDCLS_SIZE                                  0x3
#define _MDCARL_MDCLS_LENGTH                                0x3
#define _MDCARL_MDCLS_MASK                                  0x7
#define _MDCARL_MDCLS0_POSN                                 0x0
#define _MDCARL_MDCLS0_POSITION                             0x0
#define _MDCARL_MDCLS0_SIZE                                 0x1
#define _MDCARL_MDCLS0_LENGTH                               0x1
#define _MDCARL_MDCLS0_MASK                                 0x1
#define _MDCARL_MDCLS1_POSN                                 0x1
#define _MDCARL_MDCLS1_POSITION                             0x1
#define _MDCARL_MDCLS1_SIZE                                 0x1
#define _MDCARL_MDCLS1_LENGTH                               0x1
#define _MDCARL_MDCLS1_MASK                                 0x2
#define _MDCARL_MDCLS2_POSN                                 0x2
#define _MDCARL_MDCLS2_POSITION                             0x2
#define _MDCARL_MDCLS2_SIZE                                 0x1
#define _MDCARL_MDCLS2_LENGTH                               0x1
#define _MDCARL_MDCLS2_MASK                                 0x4
#define _MDCARL_CLS0_POSN                                   0x0
#define _MDCARL_CLS0_POSITION                               0x0
#define _MDCARL_CLS0_SIZE                                   0x1
#define _MDCARL_CLS0_LENGTH                                 0x1
#define _MDCARL_CLS0_MASK                                   0x1
#define _MDCARL_CLS1_POSN                                   0x1
#define _MDCARL_CLS1_POSITION                               0x1
#define _MDCARL_CLS1_SIZE                                   0x1
#define _MDCARL_CLS1_LENGTH                                 0x1
#define _MDCARL_CLS1_MASK                                   0x2
#define _MDCARL_CLS2_POSN                                   0x2
#define _MDCARL_CLS2_POSITION                               0x2
#define _MDCARL_CLS2_SIZE                                   0x1
#define _MDCARL_CLS2_LENGTH                                 0x1
#define _MDCARL_CLS2_MASK                                   0x4

// Register: MDCARH
#define MDCARH MDCARH
extern volatile unsigned char           MDCARH              __at(0xF55);
#ifndef _LIB_BUILD
asm("MDCARH equ 0F55h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CHS                    :3;
    };
    struct {
        unsigned CHS0                   :1;
        unsigned CHS1                   :1;
        unsigned CHS2                   :1;
    };
    struct {
        unsigned MDCHS                  :3;
    };
    struct {
        unsigned MDCHS0                 :1;
        unsigned MDCHS1                 :1;
        unsigned MDCHS2                 :1;
    };
} MDCARHbits_t;
extern volatile MDCARHbits_t MDCARHbits __at(0xF55);
// bitfield macros
#define _MDCARH_CHS_POSN                                    0x0
#define _MDCARH_CHS_POSITION                                0x0
#define _MDCARH_CHS_SIZE                                    0x3
#define _MDCARH_CHS_LENGTH                                  0x3
#define _MDCARH_CHS_MASK                                    0x7
#define _MDCARH_CHS0_POSN                                   0x0
#define _MDCARH_CHS0_POSITION                               0x0
#define _MDCARH_CHS0_SIZE                                   0x1
#define _MDCARH_CHS0_LENGTH                                 0x1
#define _MDCARH_CHS0_MASK                                   0x1
#define _MDCARH_CHS1_POSN                                   0x1
#define _MDCARH_CHS1_POSITION                               0x1
#define _MDCARH_CHS1_SIZE                                   0x1
#define _MDCARH_CHS1_LENGTH                                 0x1
#define _MDCARH_CHS1_MASK                                   0x2
#define _MDCARH_CHS2_POSN                                   0x2
#define _MDCARH_CHS2_POSITION                               0x2
#define _MDCARH_CHS2_SIZE                                   0x1
#define _MDCARH_CHS2_LENGTH                                 0x1
#define _MDCARH_CHS2_MASK                                   0x4
#define _MDCARH_MDCHS_POSN                                  0x0
#define _MDCARH_MDCHS_POSITION                              0x0
#define _MDCARH_MDCHS_SIZE                                  0x3
#define _MDCARH_MDCHS_LENGTH                                0x3
#define _MDCARH_MDCHS_MASK                                  0x7
#define _MDCARH_MDCHS0_POSN                                 0x0
#define _MDCARH_MDCHS0_POSITION                             0x0
#define _MDCARH_MDCHS0_SIZE                                 0x1
#define _MDCARH_MDCHS0_LENGTH                               0x1
#define _MDCARH_MDCHS0_MASK                                 0x1
#define _MDCARH_MDCHS1_POSN                                 0x1
#define _MDCARH_MDCHS1_POSITION                             0x1
#define _MDCARH_MDCHS1_SIZE                                 0x1
#define _MDCARH_MDCHS1_LENGTH                               0x1
#define _MDCARH_MDCHS1_MASK                                 0x2
#define _MDCARH_MDCHS2_POSN                                 0x2
#define _MDCARH_MDCHS2_POSITION                             0x2
#define _MDCARH_MDCHS2_SIZE                                 0x1
#define _MDCARH_MDCHS2_LENGTH                               0x1
#define _MDCARH_MDCHS2_MASK                                 0x4

// Register: ADACT
#define ADACT ADACT
extern volatile unsigned char           ADACT               __at(0xF56);
#ifndef _LIB_BUILD
asm("ADACT equ 0F56h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADACT                  :5;
    };
    struct {
        unsigned ADACT0                 :1;
        unsigned ADACT1                 :1;
        unsigned ADACT2                 :1;
        unsigned ADACT3                 :1;
        unsigned ADACT4                 :1;
    };
} ADACTbits_t;
extern volatile ADACTbits_t ADACTbits __at(0xF56);
// bitfield macros
#define _ADACT_ADACT_POSN                                   0x0
#define _ADACT_ADACT_POSITION                               0x0
#define _ADACT_ADACT_SIZE                                   0x5
#define _ADACT_ADACT_LENGTH                                 0x5
#define _ADACT_ADACT_MASK                                   0x1F
#define _ADACT_ADACT0_POSN                                  0x0
#define _ADACT_ADACT0_POSITION                              0x0
#define _ADACT_ADACT0_SIZE                                  0x1
#define _ADACT_ADACT0_LENGTH                                0x1
#define _ADACT_ADACT0_MASK                                  0x1
#define _ADACT_ADACT1_POSN                                  0x1
#define _ADACT_ADACT1_POSITION                              0x1
#define _ADACT_ADACT1_SIZE                                  0x1
#define _ADACT_ADACT1_LENGTH                                0x1
#define _ADACT_ADACT1_MASK                                  0x2
#define _ADACT_ADACT2_POSN                                  0x2
#define _ADACT_ADACT2_POSITION                              0x2
#define _ADACT_ADACT2_SIZE                                  0x1
#define _ADACT_ADACT2_LENGTH                                0x1
#define _ADACT_ADACT2_MASK                                  0x4
#define _ADACT_ADACT3_POSN                                  0x3
#define _ADACT_ADACT3_POSITION                              0x3
#define _ADACT_ADACT3_SIZE                                  0x1
#define _ADACT_ADACT3_LENGTH                                0x1
#define _ADACT_ADACT3_MASK                                  0x8
#define _ADACT_ADACT4_POSN                                  0x4
#define _ADACT_ADACT4_POSITION                              0x4
#define _ADACT_ADACT4_SIZE                                  0x1
#define _ADACT_ADACT4_LENGTH                                0x1
#define _ADACT_ADACT4_MASK                                  0x10

// Register: ADCLK
#define ADCLK ADCLK
extern volatile unsigned char           ADCLK               __at(0xF57);
#ifndef _LIB_BUILD
asm("ADCLK equ 0F57h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCS                   :6;
    };
    struct {
        unsigned ADCS0                  :1;
        unsigned ADCS1                  :1;
        unsigned ADCS2                  :1;
        unsigned ADCS3                  :1;
        unsigned ADCS4                  :1;
        unsigned ADCS5                  :1;
    };
} ADCLKbits_t;
extern volatile ADCLKbits_t ADCLKbits __at(0xF57);
// bitfield macros
#define _ADCLK_ADCS_POSN                                    0x0
#define _ADCLK_ADCS_POSITION                                0x0
#define _ADCLK_ADCS_SIZE                                    0x6
#define _ADCLK_ADCS_LENGTH                                  0x6
#define _ADCLK_ADCS_MASK                                    0x3F
#define _ADCLK_ADCS0_POSN                                   0x0
#define _ADCLK_ADCS0_POSITION                               0x0
#define _ADCLK_ADCS0_SIZE                                   0x1
#define _ADCLK_ADCS0_LENGTH                                 0x1
#define _ADCLK_ADCS0_MASK                                   0x1
#define _ADCLK_ADCS1_POSN                                   0x1
#define _ADCLK_ADCS1_POSITION                               0x1
#define _ADCLK_ADCS1_SIZE                                   0x1
#define _ADCLK_ADCS1_LENGTH                                 0x1
#define _ADCLK_ADCS1_MASK                                   0x2
#define _ADCLK_ADCS2_POSN                                   0x2
#define _ADCLK_ADCS2_POSITION                               0x2
#define _ADCLK_ADCS2_SIZE                                   0x1
#define _ADCLK_ADCS2_LENGTH                                 0x1
#define _ADCLK_ADCS2_MASK                                   0x4
#define _ADCLK_ADCS3_POSN                                   0x3
#define _ADCLK_ADCS3_POSITION                               0x3
#define _ADCLK_ADCS3_SIZE                                   0x1
#define _ADCLK_ADCS3_LENGTH                                 0x1
#define _ADCLK_ADCS3_MASK                                   0x8
#define _ADCLK_ADCS4_POSN                                   0x4
#define _ADCLK_ADCS4_POSITION                               0x4
#define _ADCLK_ADCS4_SIZE                                   0x1
#define _ADCLK_ADCS4_LENGTH                                 0x1
#define _ADCLK_ADCS4_MASK                                   0x10
#define _ADCLK_ADCS5_POSN                                   0x5
#define _ADCLK_ADCS5_POSITION                               0x5
#define _ADCLK_ADCS5_SIZE                                   0x1
#define _ADCLK_ADCS5_LENGTH                                 0x1
#define _ADCLK_ADCS5_MASK                                   0x20

// Register: ADREF
#define ADREF ADREF
extern volatile unsigned char           ADREF               __at(0xF58);
#ifndef _LIB_BUILD
asm("ADREF equ 0F58h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADPREF                 :2;
        unsigned                        :2;
        unsigned ADNREF                 :1;
    };
    struct {
        unsigned ADPREF0                :1;
        unsigned ADPREF1                :1;
    };
} ADREFbits_t;
extern volatile ADREFbits_t ADREFbits __at(0xF58);
// bitfield macros
#define _ADREF_ADPREF_POSN                                  0x0
#define _ADREF_ADPREF_POSITION                              0x0
#define _ADREF_ADPREF_SIZE                                  0x2
#define _ADREF_ADPREF_LENGTH                                0x2
#define _ADREF_ADPREF_MASK                                  0x3
#define _ADREF_ADNREF_POSN                                  0x4
#define _ADREF_ADNREF_POSITION                              0x4
#define _ADREF_ADNREF_SIZE                                  0x1
#define _ADREF_ADNREF_LENGTH                                0x1
#define _ADREF_ADNREF_MASK                                  0x10
#define _ADREF_ADPREF0_POSN                                 0x0
#define _ADREF_ADPREF0_POSITION                             0x0
#define _ADREF_ADPREF0_SIZE                                 0x1
#define _ADREF_ADPREF0_LENGTH                               0x1
#define _ADREF_ADPREF0_MASK                                 0x1
#define _ADREF_ADPREF1_POSN                                 0x1
#define _ADREF_ADPREF1_POSITION                             0x1
#define _ADREF_ADPREF1_SIZE                                 0x1
#define _ADREF_ADPREF1_LENGTH                               0x1
#define _ADREF_ADPREF1_MASK                                 0x2

// Register: ADCON1
#define ADCON1 ADCON1
extern volatile unsigned char           ADCON1              __at(0xF59);
#ifndef _LIB_BUILD
asm("ADCON1 equ 0F59h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADDSEN                 :1;
        unsigned                        :4;
        unsigned ADGPOL                 :1;
        unsigned ADIPEN                 :1;
        unsigned ADPPOL                 :1;
    };
} ADCON1bits_t;
extern volatile ADCON1bits_t ADCON1bits __at(0xF59);
// bitfield macros
#define _ADCON1_ADDSEN_POSN                                 0x0
#define _ADCON1_ADDSEN_POSITION                             0x0
#define _ADCON1_ADDSEN_SIZE                                 0x1
#define _ADCON1_ADDSEN_LENGTH                               0x1
#define _ADCON1_ADDSEN_MASK                                 0x1
#define _ADCON1_ADGPOL_POSN                                 0x5
#define _ADCON1_ADGPOL_POSITION                             0x5
#define _ADCON1_ADGPOL_SIZE                                 0x1
#define _ADCON1_ADGPOL_LENGTH                               0x1
#define _ADCON1_ADGPOL_MASK                                 0x20
#define _ADCON1_ADIPEN_POSN                                 0x6
#define _ADCON1_ADIPEN_POSITION                             0x6
#define _ADCON1_ADIPEN_SIZE                                 0x1
#define _ADCON1_ADIPEN_LENGTH                               0x1
#define _ADCON1_ADIPEN_MASK                                 0x40
#define _ADCON1_ADPPOL_POSN                                 0x7
#define _ADCON1_ADPPOL_POSITION                             0x7
#define _ADCON1_ADPPOL_SIZE                                 0x1
#define _ADCON1_ADPPOL_LENGTH                               0x1
#define _ADCON1_ADPPOL_MASK                                 0x80

// Register: ADCON2
#define ADCON2 ADCON2
extern volatile unsigned char           ADCON2              __at(0xF5A);
#ifndef _LIB_BUILD
asm("ADCON2 equ 0F5Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADMD                   :3;
        unsigned ADACLR                 :1;
        unsigned ADCRS                  :3;
        unsigned ADPSIS                 :1;
    };
    struct {
        unsigned ADMD0                  :1;
        unsigned ADMD1                  :1;
        unsigned ADMD2                  :1;
        unsigned                        :1;
        unsigned ADCRS0                 :1;
        unsigned ADCRS1                 :1;
        unsigned ADCRS2                 :1;
    };
} ADCON2bits_t;
extern volatile ADCON2bits_t ADCON2bits __at(0xF5A);
// bitfield macros
#define _ADCON2_ADMD_POSN                                   0x0
#define _ADCON2_ADMD_POSITION                               0x0
#define _ADCON2_ADMD_SIZE                                   0x3
#define _ADCON2_ADMD_LENGTH                                 0x3
#define _ADCON2_ADMD_MASK                                   0x7
#define _ADCON2_ADACLR_POSN                                 0x3
#define _ADCON2_ADACLR_POSITION                             0x3
#define _ADCON2_ADACLR_SIZE                                 0x1
#define _ADCON2_ADACLR_LENGTH                               0x1
#define _ADCON2_ADACLR_MASK                                 0x8
#define _ADCON2_ADCRS_POSN                                  0x4
#define _ADCON2_ADCRS_POSITION                              0x4
#define _ADCON2_ADCRS_SIZE                                  0x3
#define _ADCON2_ADCRS_LENGTH                                0x3
#define _ADCON2_ADCRS_MASK                                  0x70
#define _ADCON2_ADPSIS_POSN                                 0x7
#define _ADCON2_ADPSIS_POSITION                             0x7
#define _ADCON2_ADPSIS_SIZE                                 0x1
#define _ADCON2_ADPSIS_LENGTH                               0x1
#define _ADCON2_ADPSIS_MASK                                 0x80
#define _ADCON2_ADMD0_POSN                                  0x0
#define _ADCON2_ADMD0_POSITION                              0x0
#define _ADCON2_ADMD0_SIZE                                  0x1
#define _ADCON2_ADMD0_LENGTH                                0x1
#define _ADCON2_ADMD0_MASK                                  0x1
#define _ADCON2_ADMD1_POSN                                  0x1
#define _ADCON2_ADMD1_POSITION                              0x1
#define _ADCON2_ADMD1_SIZE                                  0x1
#define _ADCON2_ADMD1_LENGTH                                0x1
#define _ADCON2_ADMD1_MASK                                  0x2
#define _ADCON2_ADMD2_POSN                                  0x2
#define _ADCON2_ADMD2_POSITION                              0x2
#define _ADCON2_ADMD2_SIZE                                  0x1
#define _ADCON2_ADMD2_LENGTH                                0x1
#define _ADCON2_ADMD2_MASK                                  0x4
#define _ADCON2_ADCRS0_POSN                                 0x4
#define _ADCON2_ADCRS0_POSITION                             0x4
#define _ADCON2_ADCRS0_SIZE                                 0x1
#define _ADCON2_ADCRS0_LENGTH                               0x1
#define _ADCON2_ADCRS0_MASK                                 0x10
#define _ADCON2_ADCRS1_POSN                                 0x5
#define _ADCON2_ADCRS1_POSITION                             0x5
#define _ADCON2_ADCRS1_SIZE                                 0x1
#define _ADCON2_ADCRS1_LENGTH                               0x1
#define _ADCON2_ADCRS1_MASK                                 0x20
#define _ADCON2_ADCRS2_POSN                                 0x6
#define _ADCON2_ADCRS2_POSITION                             0x6
#define _ADCON2_ADCRS2_SIZE                                 0x1
#define _ADCON2_ADCRS2_LENGTH                               0x1
#define _ADCON2_ADCRS2_MASK                                 0x40

// Register: ADCON3
#define ADCON3 ADCON3
extern volatile unsigned char           ADCON3              __at(0xF5B);
#ifndef _LIB_BUILD
asm("ADCON3 equ 0F5Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADTMD                  :3;
        unsigned ADSOI                  :1;
        unsigned ADCALC                 :3;
    };
    struct {
        unsigned ADTMD0                 :1;
        unsigned ADTMD1                 :1;
        unsigned ADTMD2                 :1;
        unsigned                        :1;
        unsigned ADCALC0                :1;
        unsigned ADCALC1                :1;
        unsigned ADCALC2                :1;
    };
} ADCON3bits_t;
extern volatile ADCON3bits_t ADCON3bits __at(0xF5B);
// bitfield macros
#define _ADCON3_ADTMD_POSN                                  0x0
#define _ADCON3_ADTMD_POSITION                              0x0
#define _ADCON3_ADTMD_SIZE                                  0x3
#define _ADCON3_ADTMD_LENGTH                                0x3
#define _ADCON3_ADTMD_MASK                                  0x7
#define _ADCON3_ADSOI_POSN                                  0x3
#define _ADCON3_ADSOI_POSITION                              0x3
#define _ADCON3_ADSOI_SIZE                                  0x1
#define _ADCON3_ADSOI_LENGTH                                0x1
#define _ADCON3_ADSOI_MASK                                  0x8
#define _ADCON3_ADCALC_POSN                                 0x4
#define _ADCON3_ADCALC_POSITION                             0x4
#define _ADCON3_ADCALC_SIZE                                 0x3
#define _ADCON3_ADCALC_LENGTH                               0x3
#define _ADCON3_ADCALC_MASK                                 0x70
#define _ADCON3_ADTMD0_POSN                                 0x0
#define _ADCON3_ADTMD0_POSITION                             0x0
#define _ADCON3_ADTMD0_SIZE                                 0x1
#define _ADCON3_ADTMD0_LENGTH                               0x1
#define _ADCON3_ADTMD0_MASK                                 0x1
#define _ADCON3_ADTMD1_POSN                                 0x1
#define _ADCON3_ADTMD1_POSITION                             0x1
#define _ADCON3_ADTMD1_SIZE                                 0x1
#define _ADCON3_ADTMD1_LENGTH                               0x1
#define _ADCON3_ADTMD1_MASK                                 0x2
#define _ADCON3_ADTMD2_POSN                                 0x2
#define _ADCON3_ADTMD2_POSITION                             0x2
#define _ADCON3_ADTMD2_SIZE                                 0x1
#define _ADCON3_ADTMD2_LENGTH                               0x1
#define _ADCON3_ADTMD2_MASK                                 0x4
#define _ADCON3_ADCALC0_POSN                                0x4
#define _ADCON3_ADCALC0_POSITION                            0x4
#define _ADCON3_ADCALC0_SIZE                                0x1
#define _ADCON3_ADCALC0_LENGTH                              0x1
#define _ADCON3_ADCALC0_MASK                                0x10
#define _ADCON3_ADCALC1_POSN                                0x5
#define _ADCON3_ADCALC1_POSITION                            0x5
#define _ADCON3_ADCALC1_SIZE                                0x1
#define _ADCON3_ADCALC1_LENGTH                              0x1
#define _ADCON3_ADCALC1_MASK                                0x20
#define _ADCON3_ADCALC2_POSN                                0x6
#define _ADCON3_ADCALC2_POSITION                            0x6
#define _ADCON3_ADCALC2_SIZE                                0x1
#define _ADCON3_ADCALC2_LENGTH                              0x1
#define _ADCON3_ADCALC2_MASK                                0x40

// Register: ADACQ
#define ADACQ ADACQ
extern volatile unsigned char           ADACQ               __at(0xF5C);
#ifndef _LIB_BUILD
asm("ADACQ equ 0F5Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADACQ                  :8;
    };
    struct {
        unsigned ADACQ0                 :1;
        unsigned ADACQ1                 :1;
        unsigned ADACQ2                 :1;
        unsigned ADACQ3                 :1;
        unsigned ADACQ4                 :1;
        unsigned ADACQ5                 :1;
        unsigned ADACQ6                 :1;
        unsigned ADACQ7                 :1;
    };
} ADACQbits_t;
extern volatile ADACQbits_t ADACQbits __at(0xF5C);
// bitfield macros
#define _ADACQ_ADACQ_POSN                                   0x0
#define _ADACQ_ADACQ_POSITION                               0x0
#define _ADACQ_ADACQ_SIZE                                   0x8
#define _ADACQ_ADACQ_LENGTH                                 0x8
#define _ADACQ_ADACQ_MASK                                   0xFF
#define _ADACQ_ADACQ0_POSN                                  0x0
#define _ADACQ_ADACQ0_POSITION                              0x0
#define _ADACQ_ADACQ0_SIZE                                  0x1
#define _ADACQ_ADACQ0_LENGTH                                0x1
#define _ADACQ_ADACQ0_MASK                                  0x1
#define _ADACQ_ADACQ1_POSN                                  0x1
#define _ADACQ_ADACQ1_POSITION                              0x1
#define _ADACQ_ADACQ1_SIZE                                  0x1
#define _ADACQ_ADACQ1_LENGTH                                0x1
#define _ADACQ_ADACQ1_MASK                                  0x2
#define _ADACQ_ADACQ2_POSN                                  0x2
#define _ADACQ_ADACQ2_POSITION                              0x2
#define _ADACQ_ADACQ2_SIZE                                  0x1
#define _ADACQ_ADACQ2_LENGTH                                0x1
#define _ADACQ_ADACQ2_MASK                                  0x4
#define _ADACQ_ADACQ3_POSN                                  0x3
#define _ADACQ_ADACQ3_POSITION                              0x3
#define _ADACQ_ADACQ3_SIZE                                  0x1
#define _ADACQ_ADACQ3_LENGTH                                0x1
#define _ADACQ_ADACQ3_MASK                                  0x8
#define _ADACQ_ADACQ4_POSN                                  0x4
#define _ADACQ_ADACQ4_POSITION                              0x4
#define _ADACQ_ADACQ4_SIZE                                  0x1
#define _ADACQ_ADACQ4_LENGTH                                0x1
#define _ADACQ_ADACQ4_MASK                                  0x10
#define _ADACQ_ADACQ5_POSN                                  0x5
#define _ADACQ_ADACQ5_POSITION                              0x5
#define _ADACQ_ADACQ5_SIZE                                  0x1
#define _ADACQ_ADACQ5_LENGTH                                0x1
#define _ADACQ_ADACQ5_MASK                                  0x20
#define _ADACQ_ADACQ6_POSN                                  0x6
#define _ADACQ_ADACQ6_POSITION                              0x6
#define _ADACQ_ADACQ6_SIZE                                  0x1
#define _ADACQ_ADACQ6_LENGTH                                0x1
#define _ADACQ_ADACQ6_MASK                                  0x40
#define _ADACQ_ADACQ7_POSN                                  0x7
#define _ADACQ_ADACQ7_POSITION                              0x7
#define _ADACQ_ADACQ7_SIZE                                  0x1
#define _ADACQ_ADACQ7_LENGTH                                0x1
#define _ADACQ_ADACQ7_MASK                                  0x80

// Register: ADCAP
#define ADCAP ADCAP
extern volatile unsigned char           ADCAP               __at(0xF5D);
#ifndef _LIB_BUILD
asm("ADCAP equ 0F5Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCAP                  :5;
    };
    struct {
        unsigned ADCAP0                 :1;
        unsigned ADCAP1                 :1;
        unsigned ADCAP2                 :1;
        unsigned ADCAP3                 :1;
        unsigned ADCAP4                 :1;
    };
} ADCAPbits_t;
extern volatile ADCAPbits_t ADCAPbits __at(0xF5D);
// bitfield macros
#define _ADCAP_ADCAP_POSN                                   0x0
#define _ADCAP_ADCAP_POSITION                               0x0
#define _ADCAP_ADCAP_SIZE                                   0x5
#define _ADCAP_ADCAP_LENGTH                                 0x5
#define _ADCAP_ADCAP_MASK                                   0x1F
#define _ADCAP_ADCAP0_POSN                                  0x0
#define _ADCAP_ADCAP0_POSITION                              0x0
#define _ADCAP_ADCAP0_SIZE                                  0x1
#define _ADCAP_ADCAP0_LENGTH                                0x1
#define _ADCAP_ADCAP0_MASK                                  0x1
#define _ADCAP_ADCAP1_POSN                                  0x1
#define _ADCAP_ADCAP1_POSITION                              0x1
#define _ADCAP_ADCAP1_SIZE                                  0x1
#define _ADCAP_ADCAP1_LENGTH                                0x1
#define _ADCAP_ADCAP1_MASK                                  0x2
#define _ADCAP_ADCAP2_POSN                                  0x2
#define _ADCAP_ADCAP2_POSITION                              0x2
#define _ADCAP_ADCAP2_SIZE                                  0x1
#define _ADCAP_ADCAP2_LENGTH                                0x1
#define _ADCAP_ADCAP2_MASK                                  0x4
#define _ADCAP_ADCAP3_POSN                                  0x3
#define _ADCAP_ADCAP3_POSITION                              0x3
#define _ADCAP_ADCAP3_SIZE                                  0x1
#define _ADCAP_ADCAP3_LENGTH                                0x1
#define _ADCAP_ADCAP3_MASK                                  0x8
#define _ADCAP_ADCAP4_POSN                                  0x4
#define _ADCAP_ADCAP4_POSITION                              0x4
#define _ADCAP_ADCAP4_SIZE                                  0x1
#define _ADCAP_ADCAP4_LENGTH                                0x1
#define _ADCAP_ADCAP4_MASK                                  0x10

// Register: ADPRE
#define ADPRE ADPRE
extern volatile unsigned char           ADPRE               __at(0xF5E);
#ifndef _LIB_BUILD
asm("ADPRE equ 0F5Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADPRE                  :8;
    };
    struct {
        unsigned ADPRE0                 :1;
        unsigned ADPRE1                 :1;
        unsigned ADPRE2                 :1;
        unsigned ADPRE3                 :1;
        unsigned ADPRE4                 :1;
        unsigned ADPRE5                 :1;
        unsigned ADPRE6                 :1;
        unsigned ADPRE7                 :1;
    };
} ADPREbits_t;
extern volatile ADPREbits_t ADPREbits __at(0xF5E);
// bitfield macros
#define _ADPRE_ADPRE_POSN                                   0x0
#define _ADPRE_ADPRE_POSITION                               0x0
#define _ADPRE_ADPRE_SIZE                                   0x8
#define _ADPRE_ADPRE_LENGTH                                 0x8
#define _ADPRE_ADPRE_MASK                                   0xFF
#define _ADPRE_ADPRE0_POSN                                  0x0
#define _ADPRE_ADPRE0_POSITION                              0x0
#define _ADPRE_ADPRE0_SIZE                                  0x1
#define _ADPRE_ADPRE0_LENGTH                                0x1
#define _ADPRE_ADPRE0_MASK                                  0x1
#define _ADPRE_ADPRE1_POSN                                  0x1
#define _ADPRE_ADPRE1_POSITION                              0x1
#define _ADPRE_ADPRE1_SIZE                                  0x1
#define _ADPRE_ADPRE1_LENGTH                                0x1
#define _ADPRE_ADPRE1_MASK                                  0x2
#define _ADPRE_ADPRE2_POSN                                  0x2
#define _ADPRE_ADPRE2_POSITION                              0x2
#define _ADPRE_ADPRE2_SIZE                                  0x1
#define _ADPRE_ADPRE2_LENGTH                                0x1
#define _ADPRE_ADPRE2_MASK                                  0x4
#define _ADPRE_ADPRE3_POSN                                  0x3
#define _ADPRE_ADPRE3_POSITION                              0x3
#define _ADPRE_ADPRE3_SIZE                                  0x1
#define _ADPRE_ADPRE3_LENGTH                                0x1
#define _ADPRE_ADPRE3_MASK                                  0x8
#define _ADPRE_ADPRE4_POSN                                  0x4
#define _ADPRE_ADPRE4_POSITION                              0x4
#define _ADPRE_ADPRE4_SIZE                                  0x1
#define _ADPRE_ADPRE4_LENGTH                                0x1
#define _ADPRE_ADPRE4_MASK                                  0x10
#define _ADPRE_ADPRE5_POSN                                  0x5
#define _ADPRE_ADPRE5_POSITION                              0x5
#define _ADPRE_ADPRE5_SIZE                                  0x1
#define _ADPRE_ADPRE5_LENGTH                                0x1
#define _ADPRE_ADPRE5_MASK                                  0x20
#define _ADPRE_ADPRE6_POSN                                  0x6
#define _ADPRE_ADPRE6_POSITION                              0x6
#define _ADPRE_ADPRE6_SIZE                                  0x1
#define _ADPRE_ADPRE6_LENGTH                                0x1
#define _ADPRE_ADPRE6_MASK                                  0x40
#define _ADPRE_ADPRE7_POSN                                  0x7
#define _ADPRE_ADPRE7_POSITION                              0x7
#define _ADPRE_ADPRE7_SIZE                                  0x1
#define _ADPRE_ADPRE7_LENGTH                                0x1
#define _ADPRE_ADPRE7_MASK                                  0x80

// Register: ADPCH
#define ADPCH ADPCH
extern volatile unsigned char           ADPCH               __at(0xF5F);
#ifndef _LIB_BUILD
asm("ADPCH equ 0F5Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADPCH                  :6;
    };
    struct {
        unsigned ADPCH0                 :1;
        unsigned ADPCH1                 :1;
        unsigned ADPCH2                 :1;
        unsigned ADPCH3                 :1;
        unsigned ADPCH4                 :1;
        unsigned ADPCH5                 :1;
    };
} ADPCHbits_t;
extern volatile ADPCHbits_t ADPCHbits __at(0xF5F);
// bitfield macros
#define _ADPCH_ADPCH_POSN                                   0x0
#define _ADPCH_ADPCH_POSITION                               0x0
#define _ADPCH_ADPCH_SIZE                                   0x6
#define _ADPCH_ADPCH_LENGTH                                 0x6
#define _ADPCH_ADPCH_MASK                                   0x3F
#define _ADPCH_ADPCH0_POSN                                  0x0
#define _ADPCH_ADPCH0_POSITION                              0x0
#define _ADPCH_ADPCH0_SIZE                                  0x1
#define _ADPCH_ADPCH0_LENGTH                                0x1
#define _ADPCH_ADPCH0_MASK                                  0x1
#define _ADPCH_ADPCH1_POSN                                  0x1
#define _ADPCH_ADPCH1_POSITION                              0x1
#define _ADPCH_ADPCH1_SIZE                                  0x1
#define _ADPCH_ADPCH1_LENGTH                                0x1
#define _ADPCH_ADPCH1_MASK                                  0x2
#define _ADPCH_ADPCH2_POSN                                  0x2
#define _ADPCH_ADPCH2_POSITION                              0x2
#define _ADPCH_ADPCH2_SIZE                                  0x1
#define _ADPCH_ADPCH2_LENGTH                                0x1
#define _ADPCH_ADPCH2_MASK                                  0x4
#define _ADPCH_ADPCH3_POSN                                  0x3
#define _ADPCH_ADPCH3_POSITION                              0x3
#define _ADPCH_ADPCH3_SIZE                                  0x1
#define _ADPCH_ADPCH3_LENGTH                                0x1
#define _ADPCH_ADPCH3_MASK                                  0x8
#define _ADPCH_ADPCH4_POSN                                  0x4
#define _ADPCH_ADPCH4_POSITION                              0x4
#define _ADPCH_ADPCH4_SIZE                                  0x1
#define _ADPCH_ADPCH4_LENGTH                                0x1
#define _ADPCH_ADPCH4_MASK                                  0x10
#define _ADPCH_ADPCH5_POSN                                  0x5
#define _ADPCH_ADPCH5_POSITION                              0x5
#define _ADPCH_ADPCH5_SIZE                                  0x1
#define _ADPCH_ADPCH5_LENGTH                                0x1
#define _ADPCH_ADPCH5_MASK                                  0x20

// Register: ADCON0
#define ADCON0 ADCON0
extern volatile unsigned char           ADCON0              __at(0xF60);
#ifndef _LIB_BUILD
asm("ADCON0 equ 0F60h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADGO                   :1;
        unsigned                        :1;
        unsigned ADFM                   :1;
        unsigned                        :1;
        unsigned ADCS                   :1;
        unsigned                        :1;
        unsigned ADCONT                 :1;
        unsigned ADON                   :1;
    };
    struct {
        unsigned GO                     :1;
        unsigned                        :1;
        unsigned ADFM0                  :1;
    };
    struct {
        unsigned DONE                   :1;
    };
    struct {
        unsigned GO_NOT_DONE            :1;
    };
    struct {
        unsigned GO_nDONE               :1;
    };
    struct {
        unsigned                        :7;
        unsigned ADCAL                  :1;
    };
} ADCON0bits_t;
extern volatile ADCON0bits_t ADCON0bits __at(0xF60);
// bitfield macros
#define _ADCON0_ADGO_POSN                                   0x0
#define _ADCON0_ADGO_POSITION                               0x0
#define _ADCON0_ADGO_SIZE                                   0x1
#define _ADCON0_ADGO_LENGTH                                 0x1
#define _ADCON0_ADGO_MASK                                   0x1
#define _ADCON0_ADFM_POSN                                   0x2
#define _ADCON0_ADFM_POSITION                               0x2
#define _ADCON0_ADFM_SIZE                                   0x1
#define _ADCON0_ADFM_LENGTH                                 0x1
#define _ADCON0_ADFM_MASK                                   0x4
#define _ADCON0_ADCS_POSN                                   0x4
#define _ADCON0_ADCS_POSITION                               0x4
#define _ADCON0_ADCS_SIZE                                   0x1
#define _ADCON0_ADCS_LENGTH                                 0x1
#define _ADCON0_ADCS_MASK                                   0x10
#define _ADCON0_ADCONT_POSN                                 0x6
#define _ADCON0_ADCONT_POSITION                             0x6
#define _ADCON0_ADCONT_SIZE                                 0x1
#define _ADCON0_ADCONT_LENGTH                               0x1
#define _ADCON0_ADCONT_MASK                                 0x40
#define _ADCON0_ADON_POSN                                   0x7
#define _ADCON0_ADON_POSITION                               0x7
#define _ADCON0_ADON_SIZE                                   0x1
#define _ADCON0_ADON_LENGTH                                 0x1
#define _ADCON0_ADON_MASK                                   0x80
#define _ADCON0_GO_POSN                                     0x0
#define _ADCON0_GO_POSITION                                 0x0
#define _ADCON0_GO_SIZE                                     0x1
#define _ADCON0_GO_LENGTH                                   0x1
#define _ADCON0_GO_MASK                                     0x1
#define _ADCON0_ADFM0_POSN                                  0x2
#define _ADCON0_ADFM0_POSITION                              0x2
#define _ADCON0_ADFM0_SIZE                                  0x1
#define _ADCON0_ADFM0_LENGTH                                0x1
#define _ADCON0_ADFM0_MASK                                  0x4
#define _ADCON0_DONE_POSN                                   0x0
#define _ADCON0_DONE_POSITION                               0x0
#define _ADCON0_DONE_SIZE                                   0x1
#define _ADCON0_DONE_LENGTH                                 0x1
#define _ADCON0_DONE_MASK                                   0x1
#define _ADCON0_GO_NOT_DONE_POSN                            0x0
#define _ADCON0_GO_NOT_DONE_POSITION                        0x0
#define _ADCON0_GO_NOT_DONE_SIZE                            0x1
#define _ADCON0_GO_NOT_DONE_LENGTH                          0x1
#define _ADCON0_GO_NOT_DONE_MASK                            0x1
#define _ADCON0_GO_nDONE_POSN                               0x0
#define _ADCON0_GO_nDONE_POSITION                           0x0
#define _ADCON0_GO_nDONE_SIZE                               0x1
#define _ADCON0_GO_nDONE_LENGTH                             0x1
#define _ADCON0_GO_nDONE_MASK                               0x1
#define _ADCON0_ADCAL_POSN                                  0x7
#define _ADCON0_ADCAL_POSITION                              0x7
#define _ADCON0_ADCAL_SIZE                                  0x1
#define _ADCON0_ADCAL_LENGTH                                0x1
#define _ADCON0_ADCAL_MASK                                  0x80

// Register: ADPREV
#define ADPREV ADPREV
extern volatile unsigned short          ADPREV              __at(0xF61);
#ifndef _LIB_BUILD
asm("ADPREV equ 0F61h");
#endif

// Register: ADPREVL
#define ADPREVL ADPREVL
extern volatile unsigned char           ADPREVL             __at(0xF61);
#ifndef _LIB_BUILD
asm("ADPREVL equ 0F61h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADPREVL                :8;
    };
    struct {
        unsigned ADPREV0                :1;
        unsigned ADPREV1                :1;
        unsigned ADPREV2                :1;
        unsigned ADPREV3                :1;
        unsigned ADPREV4                :1;
        unsigned ADPREV5                :1;
        unsigned ADPREV6                :1;
        unsigned ADPREV7                :1;
    };
} ADPREVLbits_t;
extern volatile ADPREVLbits_t ADPREVLbits __at(0xF61);
// bitfield macros
#define _ADPREVL_ADPREVL_POSN                               0x0
#define _ADPREVL_ADPREVL_POSITION                           0x0
#define _ADPREVL_ADPREVL_SIZE                               0x8
#define _ADPREVL_ADPREVL_LENGTH                             0x8
#define _ADPREVL_ADPREVL_MASK                               0xFF
#define _ADPREVL_ADPREV0_POSN                               0x0
#define _ADPREVL_ADPREV0_POSITION                           0x0
#define _ADPREVL_ADPREV0_SIZE                               0x1
#define _ADPREVL_ADPREV0_LENGTH                             0x1
#define _ADPREVL_ADPREV0_MASK                               0x1
#define _ADPREVL_ADPREV1_POSN                               0x1
#define _ADPREVL_ADPREV1_POSITION                           0x1
#define _ADPREVL_ADPREV1_SIZE                               0x1
#define _ADPREVL_ADPREV1_LENGTH                             0x1
#define _ADPREVL_ADPREV1_MASK                               0x2
#define _ADPREVL_ADPREV2_POSN                               0x2
#define _ADPREVL_ADPREV2_POSITION                           0x2
#define _ADPREVL_ADPREV2_SIZE                               0x1
#define _ADPREVL_ADPREV2_LENGTH                             0x1
#define _ADPREVL_ADPREV2_MASK                               0x4
#define _ADPREVL_ADPREV3_POSN                               0x3
#define _ADPREVL_ADPREV3_POSITION                           0x3
#define _ADPREVL_ADPREV3_SIZE                               0x1
#define _ADPREVL_ADPREV3_LENGTH                             0x1
#define _ADPREVL_ADPREV3_MASK                               0x8
#define _ADPREVL_ADPREV4_POSN                               0x4
#define _ADPREVL_ADPREV4_POSITION                           0x4
#define _ADPREVL_ADPREV4_SIZE                               0x1
#define _ADPREVL_ADPREV4_LENGTH                             0x1
#define _ADPREVL_ADPREV4_MASK                               0x10
#define _ADPREVL_ADPREV5_POSN                               0x5
#define _ADPREVL_ADPREV5_POSITION                           0x5
#define _ADPREVL_ADPREV5_SIZE                               0x1
#define _ADPREVL_ADPREV5_LENGTH                             0x1
#define _ADPREVL_ADPREV5_MASK                               0x20
#define _ADPREVL_ADPREV6_POSN                               0x6
#define _ADPREVL_ADPREV6_POSITION                           0x6
#define _ADPREVL_ADPREV6_SIZE                               0x1
#define _ADPREVL_ADPREV6_LENGTH                             0x1
#define _ADPREVL_ADPREV6_MASK                               0x40
#define _ADPREVL_ADPREV7_POSN                               0x7
#define _ADPREVL_ADPREV7_POSITION                           0x7
#define _ADPREVL_ADPREV7_SIZE                               0x1
#define _ADPREVL_ADPREV7_LENGTH                             0x1
#define _ADPREVL_ADPREV7_MASK                               0x80

// Register: ADPREVH
#define ADPREVH ADPREVH
extern volatile unsigned char           ADPREVH             __at(0xF62);
#ifndef _LIB_BUILD
asm("ADPREVH equ 0F62h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADPREVH                :8;
    };
    struct {
        unsigned ADPREV8                :1;
        unsigned ADPREV9                :1;
        unsigned ADPREV10               :1;
        unsigned ADPREV11               :1;
        unsigned ADPREV12               :1;
        unsigned ADPREV13               :1;
        unsigned ADPREV14               :1;
        unsigned ADPREV15               :1;
    };
} ADPREVHbits_t;
extern volatile ADPREVHbits_t ADPREVHbits __at(0xF62);
// bitfield macros
#define _ADPREVH_ADPREVH_POSN                               0x0
#define _ADPREVH_ADPREVH_POSITION                           0x0
#define _ADPREVH_ADPREVH_SIZE                               0x8
#define _ADPREVH_ADPREVH_LENGTH                             0x8
#define _ADPREVH_ADPREVH_MASK                               0xFF
#define _ADPREVH_ADPREV8_POSN                               0x0
#define _ADPREVH_ADPREV8_POSITION                           0x0
#define _ADPREVH_ADPREV8_SIZE                               0x1
#define _ADPREVH_ADPREV8_LENGTH                             0x1
#define _ADPREVH_ADPREV8_MASK                               0x1
#define _ADPREVH_ADPREV9_POSN                               0x1
#define _ADPREVH_ADPREV9_POSITION                           0x1
#define _ADPREVH_ADPREV9_SIZE                               0x1
#define _ADPREVH_ADPREV9_LENGTH                             0x1
#define _ADPREVH_ADPREV9_MASK                               0x2
#define _ADPREVH_ADPREV10_POSN                              0x2
#define _ADPREVH_ADPREV10_POSITION                          0x2
#define _ADPREVH_ADPREV10_SIZE                              0x1
#define _ADPREVH_ADPREV10_LENGTH                            0x1
#define _ADPREVH_ADPREV10_MASK                              0x4
#define _ADPREVH_ADPREV11_POSN                              0x3
#define _ADPREVH_ADPREV11_POSITION                          0x3
#define _ADPREVH_ADPREV11_SIZE                              0x1
#define _ADPREVH_ADPREV11_LENGTH                            0x1
#define _ADPREVH_ADPREV11_MASK                              0x8
#define _ADPREVH_ADPREV12_POSN                              0x4
#define _ADPREVH_ADPREV12_POSITION                          0x4
#define _ADPREVH_ADPREV12_SIZE                              0x1
#define _ADPREVH_ADPREV12_LENGTH                            0x1
#define _ADPREVH_ADPREV12_MASK                              0x10
#define _ADPREVH_ADPREV13_POSN                              0x5
#define _ADPREVH_ADPREV13_POSITION                          0x5
#define _ADPREVH_ADPREV13_SIZE                              0x1
#define _ADPREVH_ADPREV13_LENGTH                            0x1
#define _ADPREVH_ADPREV13_MASK                              0x20
#define _ADPREVH_ADPREV14_POSN                              0x6
#define _ADPREVH_ADPREV14_POSITION                          0x6
#define _ADPREVH_ADPREV14_SIZE                              0x1
#define _ADPREVH_ADPREV14_LENGTH                            0x1
#define _ADPREVH_ADPREV14_MASK                              0x40
#define _ADPREVH_ADPREV15_POSN                              0x7
#define _ADPREVH_ADPREV15_POSITION                          0x7
#define _ADPREVH_ADPREV15_SIZE                              0x1
#define _ADPREVH_ADPREV15_LENGTH                            0x1
#define _ADPREVH_ADPREV15_MASK                              0x80

// Register: ADRES
#define ADRES ADRES
extern volatile unsigned short          ADRES               __at(0xF63);
#ifndef _LIB_BUILD
asm("ADRES equ 0F63h");
#endif

// Register: ADRESL
#define ADRESL ADRESL
extern volatile unsigned char           ADRESL              __at(0xF63);
#ifndef _LIB_BUILD
asm("ADRESL equ 0F63h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADRESL                 :8;
    };
    struct {
        unsigned ADRES0                 :1;
        unsigned ADRES1                 :1;
        unsigned ADRES2                 :1;
        unsigned ADRES3                 :1;
        unsigned ADRES4                 :1;
        unsigned ADRES5                 :1;
        unsigned ADRES6                 :1;
        unsigned ADRES7                 :1;
    };
} ADRESLbits_t;
extern volatile ADRESLbits_t ADRESLbits __at(0xF63);
// bitfield macros
#define _ADRESL_ADRESL_POSN                                 0x0
#define _ADRESL_ADRESL_POSITION                             0x0
#define _ADRESL_ADRESL_SIZE                                 0x8
#define _ADRESL_ADRESL_LENGTH                               0x8
#define _ADRESL_ADRESL_MASK                                 0xFF
#define _ADRESL_ADRES0_POSN                                 0x0
#define _ADRESL_ADRES0_POSITION                             0x0
#define _ADRESL_ADRES0_SIZE                                 0x1
#define _ADRESL_ADRES0_LENGTH                               0x1
#define _ADRESL_ADRES0_MASK                                 0x1
#define _ADRESL_ADRES1_POSN                                 0x1
#define _ADRESL_ADRES1_POSITION                             0x1
#define _ADRESL_ADRES1_SIZE                                 0x1
#define _ADRESL_ADRES1_LENGTH                               0x1
#define _ADRESL_ADRES1_MASK                                 0x2
#define _ADRESL_ADRES2_POSN                                 0x2
#define _ADRESL_ADRES2_POSITION                             0x2
#define _ADRESL_ADRES2_SIZE                                 0x1
#define _ADRESL_ADRES2_LENGTH                               0x1
#define _ADRESL_ADRES2_MASK                                 0x4
#define _ADRESL_ADRES3_POSN                                 0x3
#define _ADRESL_ADRES3_POSITION                             0x3
#define _ADRESL_ADRES3_SIZE                                 0x1
#define _ADRESL_ADRES3_LENGTH                               0x1
#define _ADRESL_ADRES3_MASK                                 0x8
#define _ADRESL_ADRES4_POSN                                 0x4
#define _ADRESL_ADRES4_POSITION                             0x4
#define _ADRESL_ADRES4_SIZE                                 0x1
#define _ADRESL_ADRES4_LENGTH                               0x1
#define _ADRESL_ADRES4_MASK                                 0x10
#define _ADRESL_ADRES5_POSN                                 0x5
#define _ADRESL_ADRES5_POSITION                             0x5
#define _ADRESL_ADRES5_SIZE                                 0x1
#define _ADRESL_ADRES5_LENGTH                               0x1
#define _ADRESL_ADRES5_MASK                                 0x20
#define _ADRESL_ADRES6_POSN                                 0x6
#define _ADRESL_ADRES6_POSITION                             0x6
#define _ADRESL_ADRES6_SIZE                                 0x1
#define _ADRESL_ADRES6_LENGTH                               0x1
#define _ADRESL_ADRES6_MASK                                 0x40
#define _ADRESL_ADRES7_POSN                                 0x7
#define _ADRESL_ADRES7_POSITION                             0x7
#define _ADRESL_ADRES7_SIZE                                 0x1
#define _ADRESL_ADRES7_LENGTH                               0x1
#define _ADRESL_ADRES7_MASK                                 0x80

// Register: ADRESH
#define ADRESH ADRESH
extern volatile unsigned char           ADRESH              __at(0xF64);
#ifndef _LIB_BUILD
asm("ADRESH equ 0F64h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADRES8                 :1;
        unsigned ADRES9                 :1;
        unsigned ADRES10                :1;
        unsigned ADRES11                :1;
        unsigned ADRES12                :1;
        unsigned ADRES13                :1;
        unsigned ADRES14                :1;
        unsigned ADRES15                :1;
    };
} ADRESHbits_t;
extern volatile ADRESHbits_t ADRESHbits __at(0xF64);
// bitfield macros
#define _ADRESH_ADRES8_POSN                                 0x0
#define _ADRESH_ADRES8_POSITION                             0x0
#define _ADRESH_ADRES8_SIZE                                 0x1
#define _ADRESH_ADRES8_LENGTH                               0x1
#define _ADRESH_ADRES8_MASK                                 0x1
#define _ADRESH_ADRES9_POSN                                 0x1
#define _ADRESH_ADRES9_POSITION                             0x1
#define _ADRESH_ADRES9_SIZE                                 0x1
#define _ADRESH_ADRES9_LENGTH                               0x1
#define _ADRESH_ADRES9_MASK                                 0x2
#define _ADRESH_ADRES10_POSN                                0x2
#define _ADRESH_ADRES10_POSITION                            0x2
#define _ADRESH_ADRES10_SIZE                                0x1
#define _ADRESH_ADRES10_LENGTH                              0x1
#define _ADRESH_ADRES10_MASK                                0x4
#define _ADRESH_ADRES11_POSN                                0x3
#define _ADRESH_ADRES11_POSITION                            0x3
#define _ADRESH_ADRES11_SIZE                                0x1
#define _ADRESH_ADRES11_LENGTH                              0x1
#define _ADRESH_ADRES11_MASK                                0x8
#define _ADRESH_ADRES12_POSN                                0x4
#define _ADRESH_ADRES12_POSITION                            0x4
#define _ADRESH_ADRES12_SIZE                                0x1
#define _ADRESH_ADRES12_LENGTH                              0x1
#define _ADRESH_ADRES12_MASK                                0x10
#define _ADRESH_ADRES13_POSN                                0x5
#define _ADRESH_ADRES13_POSITION                            0x5
#define _ADRESH_ADRES13_SIZE                                0x1
#define _ADRESH_ADRES13_LENGTH                              0x1
#define _ADRESH_ADRES13_MASK                                0x20
#define _ADRESH_ADRES14_POSN                                0x6
#define _ADRESH_ADRES14_POSITION                            0x6
#define _ADRESH_ADRES14_SIZE                                0x1
#define _ADRESH_ADRES14_LENGTH                              0x1
#define _ADRESH_ADRES14_MASK                                0x40
#define _ADRESH_ADRES15_POSN                                0x7
#define _ADRESH_ADRES15_POSITION                            0x7
#define _ADRESH_ADRES15_SIZE                                0x1
#define _ADRESH_ADRES15_LENGTH                              0x1
#define _ADRESH_ADRES15_MASK                                0x80

// Register: ADSTAT
#define ADSTAT ADSTAT
extern volatile unsigned char           ADSTAT              __at(0xF65);
#ifndef _LIB_BUILD
asm("ADSTAT equ 0F65h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADSTAT                 :3;
        unsigned                        :1;
        unsigned ADMATH                 :1;
        unsigned ADLTHR                 :1;
        unsigned ADUTHR                 :1;
        unsigned ADAOV                  :1;
    };
    struct {
        unsigned ADSTAT0                :1;
        unsigned ADSTAT1                :1;
        unsigned ADSTAT2                :1;
    };
} ADSTATbits_t;
extern volatile ADSTATbits_t ADSTATbits __at(0xF65);
// bitfield macros
#define _ADSTAT_ADSTAT_POSN                                 0x0
#define _ADSTAT_ADSTAT_POSITION                             0x0
#define _ADSTAT_ADSTAT_SIZE                                 0x3
#define _ADSTAT_ADSTAT_LENGTH                               0x3
#define _ADSTAT_ADSTAT_MASK                                 0x7
#define _ADSTAT_ADMATH_POSN                                 0x4
#define _ADSTAT_ADMATH_POSITION                             0x4
#define _ADSTAT_ADMATH_SIZE                                 0x1
#define _ADSTAT_ADMATH_LENGTH                               0x1
#define _ADSTAT_ADMATH_MASK                                 0x10
#define _ADSTAT_ADLTHR_POSN                                 0x5
#define _ADSTAT_ADLTHR_POSITION                             0x5
#define _ADSTAT_ADLTHR_SIZE                                 0x1
#define _ADSTAT_ADLTHR_LENGTH                               0x1
#define _ADSTAT_ADLTHR_MASK                                 0x20
#define _ADSTAT_ADUTHR_POSN                                 0x6
#define _ADSTAT_ADUTHR_POSITION                             0x6
#define _ADSTAT_ADUTHR_SIZE                                 0x1
#define _ADSTAT_ADUTHR_LENGTH                               0x1
#define _ADSTAT_ADUTHR_MASK                                 0x40
#define _ADSTAT_ADAOV_POSN                                  0x7
#define _ADSTAT_ADAOV_POSITION                              0x7
#define _ADSTAT_ADAOV_SIZE                                  0x1
#define _ADSTAT_ADAOV_LENGTH                                0x1
#define _ADSTAT_ADAOV_MASK                                  0x80
#define _ADSTAT_ADSTAT0_POSN                                0x0
#define _ADSTAT_ADSTAT0_POSITION                            0x0
#define _ADSTAT_ADSTAT0_SIZE                                0x1
#define _ADSTAT_ADSTAT0_LENGTH                              0x1
#define _ADSTAT_ADSTAT0_MASK                                0x1
#define _ADSTAT_ADSTAT1_POSN                                0x1
#define _ADSTAT_ADSTAT1_POSITION                            0x1
#define _ADSTAT_ADSTAT1_SIZE                                0x1
#define _ADSTAT_ADSTAT1_LENGTH                              0x1
#define _ADSTAT_ADSTAT1_MASK                                0x2
#define _ADSTAT_ADSTAT2_POSN                                0x2
#define _ADSTAT_ADSTAT2_POSITION                            0x2
#define _ADSTAT_ADSTAT2_SIZE                                0x1
#define _ADSTAT_ADSTAT2_LENGTH                              0x1
#define _ADSTAT_ADSTAT2_MASK                                0x4

// Register: ADRPT
#define ADRPT ADRPT
extern volatile unsigned char           ADRPT               __at(0xF66);
#ifndef _LIB_BUILD
asm("ADRPT equ 0F66h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADRPT                  :8;
    };
    struct {
        unsigned ADRPT0                 :1;
        unsigned ADRPT1                 :1;
        unsigned ADRPT2                 :1;
        unsigned ADRPT3                 :1;
        unsigned ADRPT4                 :1;
        unsigned ADRPT5                 :1;
        unsigned ADRPT6                 :1;
        unsigned ADRPT7                 :1;
    };
} ADRPTbits_t;
extern volatile ADRPTbits_t ADRPTbits __at(0xF66);
// bitfield macros
#define _ADRPT_ADRPT_POSN                                   0x0
#define _ADRPT_ADRPT_POSITION                               0x0
#define _ADRPT_ADRPT_SIZE                                   0x8
#define _ADRPT_ADRPT_LENGTH                                 0x8
#define _ADRPT_ADRPT_MASK                                   0xFF
#define _ADRPT_ADRPT0_POSN                                  0x0
#define _ADRPT_ADRPT0_POSITION                              0x0
#define _ADRPT_ADRPT0_SIZE                                  0x1
#define _ADRPT_ADRPT0_LENGTH                                0x1
#define _ADRPT_ADRPT0_MASK                                  0x1
#define _ADRPT_ADRPT1_POSN                                  0x1
#define _ADRPT_ADRPT1_POSITION                              0x1
#define _ADRPT_ADRPT1_SIZE                                  0x1
#define _ADRPT_ADRPT1_LENGTH                                0x1
#define _ADRPT_ADRPT1_MASK                                  0x2
#define _ADRPT_ADRPT2_POSN                                  0x2
#define _ADRPT_ADRPT2_POSITION                              0x2
#define _ADRPT_ADRPT2_SIZE                                  0x1
#define _ADRPT_ADRPT2_LENGTH                                0x1
#define _ADRPT_ADRPT2_MASK                                  0x4
#define _ADRPT_ADRPT3_POSN                                  0x3
#define _ADRPT_ADRPT3_POSITION                              0x3
#define _ADRPT_ADRPT3_SIZE                                  0x1
#define _ADRPT_ADRPT3_LENGTH                                0x1
#define _ADRPT_ADRPT3_MASK                                  0x8
#define _ADRPT_ADRPT4_POSN                                  0x4
#define _ADRPT_ADRPT4_POSITION                              0x4
#define _ADRPT_ADRPT4_SIZE                                  0x1
#define _ADRPT_ADRPT4_LENGTH                                0x1
#define _ADRPT_ADRPT4_MASK                                  0x10
#define _ADRPT_ADRPT5_POSN                                  0x5
#define _ADRPT_ADRPT5_POSITION                              0x5
#define _ADRPT_ADRPT5_SIZE                                  0x1
#define _ADRPT_ADRPT5_LENGTH                                0x1
#define _ADRPT_ADRPT5_MASK                                  0x20
#define _ADRPT_ADRPT6_POSN                                  0x6
#define _ADRPT_ADRPT6_POSITION                              0x6
#define _ADRPT_ADRPT6_SIZE                                  0x1
#define _ADRPT_ADRPT6_LENGTH                                0x1
#define _ADRPT_ADRPT6_MASK                                  0x40
#define _ADRPT_ADRPT7_POSN                                  0x7
#define _ADRPT_ADRPT7_POSITION                              0x7
#define _ADRPT_ADRPT7_SIZE                                  0x1
#define _ADRPT_ADRPT7_LENGTH                                0x1
#define _ADRPT_ADRPT7_MASK                                  0x80

// Register: ADCNT
#define ADCNT ADCNT
extern volatile unsigned char           ADCNT               __at(0xF67);
#ifndef _LIB_BUILD
asm("ADCNT equ 0F67h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCNT                  :8;
    };
    struct {
        unsigned ADCNT0                 :1;
        unsigned ADCNT1                 :1;
        unsigned ADCNT2                 :1;
        unsigned ADCNT3                 :1;
        unsigned ADCNT4                 :1;
        unsigned ADCNT5                 :1;
        unsigned ADCNT6                 :1;
        unsigned ADCNT7                 :1;
    };
} ADCNTbits_t;
extern volatile ADCNTbits_t ADCNTbits __at(0xF67);
// bitfield macros
#define _ADCNT_ADCNT_POSN                                   0x0
#define _ADCNT_ADCNT_POSITION                               0x0
#define _ADCNT_ADCNT_SIZE                                   0x8
#define _ADCNT_ADCNT_LENGTH                                 0x8
#define _ADCNT_ADCNT_MASK                                   0xFF
#define _ADCNT_ADCNT0_POSN                                  0x0
#define _ADCNT_ADCNT0_POSITION                              0x0
#define _ADCNT_ADCNT0_SIZE                                  0x1
#define _ADCNT_ADCNT0_LENGTH                                0x1
#define _ADCNT_ADCNT0_MASK                                  0x1
#define _ADCNT_ADCNT1_POSN                                  0x1
#define _ADCNT_ADCNT1_POSITION                              0x1
#define _ADCNT_ADCNT1_SIZE                                  0x1
#define _ADCNT_ADCNT1_LENGTH                                0x1
#define _ADCNT_ADCNT1_MASK                                  0x2
#define _ADCNT_ADCNT2_POSN                                  0x2
#define _ADCNT_ADCNT2_POSITION                              0x2
#define _ADCNT_ADCNT2_SIZE                                  0x1
#define _ADCNT_ADCNT2_LENGTH                                0x1
#define _ADCNT_ADCNT2_MASK                                  0x4
#define _ADCNT_ADCNT3_POSN                                  0x3
#define _ADCNT_ADCNT3_POSITION                              0x3
#define _ADCNT_ADCNT3_SIZE                                  0x1
#define _ADCNT_ADCNT3_LENGTH                                0x1
#define _ADCNT_ADCNT3_MASK                                  0x8
#define _ADCNT_ADCNT4_POSN                                  0x4
#define _ADCNT_ADCNT4_POSITION                              0x4
#define _ADCNT_ADCNT4_SIZE                                  0x1
#define _ADCNT_ADCNT4_LENGTH                                0x1
#define _ADCNT_ADCNT4_MASK                                  0x10
#define _ADCNT_ADCNT5_POSN                                  0x5
#define _ADCNT_ADCNT5_POSITION                              0x5
#define _ADCNT_ADCNT5_SIZE                                  0x1
#define _ADCNT_ADCNT5_LENGTH                                0x1
#define _ADCNT_ADCNT5_MASK                                  0x20
#define _ADCNT_ADCNT6_POSN                                  0x6
#define _ADCNT_ADCNT6_POSITION                              0x6
#define _ADCNT_ADCNT6_SIZE                                  0x1
#define _ADCNT_ADCNT6_LENGTH                                0x1
#define _ADCNT_ADCNT6_MASK                                  0x40
#define _ADCNT_ADCNT7_POSN                                  0x7
#define _ADCNT_ADCNT7_POSITION                              0x7
#define _ADCNT_ADCNT7_SIZE                                  0x1
#define _ADCNT_ADCNT7_LENGTH                                0x1
#define _ADCNT_ADCNT7_MASK                                  0x80

// Register: ADSTPT
#define ADSTPT ADSTPT
extern volatile unsigned short          ADSTPT              __at(0xF68);
#ifndef _LIB_BUILD
asm("ADSTPT equ 0F68h");
#endif

// Register: ADSTPTL
#define ADSTPTL ADSTPTL
extern volatile unsigned char           ADSTPTL             __at(0xF68);
#ifndef _LIB_BUILD
asm("ADSTPTL equ 0F68h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADSTPTL                :8;
    };
    struct {
        unsigned ADSTPT0                :1;
        unsigned ADSTPT1                :1;
        unsigned ADSTPT2                :1;
        unsigned ADSTPT3                :1;
        unsigned ADSTPT4                :1;
        unsigned ADSTPT5                :1;
        unsigned ADSTPT6                :1;
        unsigned ADSTPT7                :1;
    };
} ADSTPTLbits_t;
extern volatile ADSTPTLbits_t ADSTPTLbits __at(0xF68);
// bitfield macros
#define _ADSTPTL_ADSTPTL_POSN                               0x0
#define _ADSTPTL_ADSTPTL_POSITION                           0x0
#define _ADSTPTL_ADSTPTL_SIZE                               0x8
#define _ADSTPTL_ADSTPTL_LENGTH                             0x8
#define _ADSTPTL_ADSTPTL_MASK                               0xFF
#define _ADSTPTL_ADSTPT0_POSN                               0x0
#define _ADSTPTL_ADSTPT0_POSITION                           0x0
#define _ADSTPTL_ADSTPT0_SIZE                               0x1
#define _ADSTPTL_ADSTPT0_LENGTH                             0x1
#define _ADSTPTL_ADSTPT0_MASK                               0x1
#define _ADSTPTL_ADSTPT1_POSN                               0x1
#define _ADSTPTL_ADSTPT1_POSITION                           0x1
#define _ADSTPTL_ADSTPT1_SIZE                               0x1
#define _ADSTPTL_ADSTPT1_LENGTH                             0x1
#define _ADSTPTL_ADSTPT1_MASK                               0x2
#define _ADSTPTL_ADSTPT2_POSN                               0x2
#define _ADSTPTL_ADSTPT2_POSITION                           0x2
#define _ADSTPTL_ADSTPT2_SIZE                               0x1
#define _ADSTPTL_ADSTPT2_LENGTH                             0x1
#define _ADSTPTL_ADSTPT2_MASK                               0x4
#define _ADSTPTL_ADSTPT3_POSN                               0x3
#define _ADSTPTL_ADSTPT3_POSITION                           0x3
#define _ADSTPTL_ADSTPT3_SIZE                               0x1
#define _ADSTPTL_ADSTPT3_LENGTH                             0x1
#define _ADSTPTL_ADSTPT3_MASK                               0x8
#define _ADSTPTL_ADSTPT4_POSN                               0x4
#define _ADSTPTL_ADSTPT4_POSITION                           0x4
#define _ADSTPTL_ADSTPT4_SIZE                               0x1
#define _ADSTPTL_ADSTPT4_LENGTH                             0x1
#define _ADSTPTL_ADSTPT4_MASK                               0x10
#define _ADSTPTL_ADSTPT5_POSN                               0x5
#define _ADSTPTL_ADSTPT5_POSITION                           0x5
#define _ADSTPTL_ADSTPT5_SIZE                               0x1
#define _ADSTPTL_ADSTPT5_LENGTH                             0x1
#define _ADSTPTL_ADSTPT5_MASK                               0x20
#define _ADSTPTL_ADSTPT6_POSN                               0x6
#define _ADSTPTL_ADSTPT6_POSITION                           0x6
#define _ADSTPTL_ADSTPT6_SIZE                               0x1
#define _ADSTPTL_ADSTPT6_LENGTH                             0x1
#define _ADSTPTL_ADSTPT6_MASK                               0x40
#define _ADSTPTL_ADSTPT7_POSN                               0x7
#define _ADSTPTL_ADSTPT7_POSITION                           0x7
#define _ADSTPTL_ADSTPT7_SIZE                               0x1
#define _ADSTPTL_ADSTPT7_LENGTH                             0x1
#define _ADSTPTL_ADSTPT7_MASK                               0x80

// Register: ADSTPTH
#define ADSTPTH ADSTPTH
extern volatile unsigned char           ADSTPTH             __at(0xF69);
#ifndef _LIB_BUILD
asm("ADSTPTH equ 0F69h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADSTPTH                :8;
    };
    struct {
        unsigned ADSTPT8                :1;
        unsigned ADSTPT9                :1;
        unsigned ADSTPT10               :1;
        unsigned ADSTPT11               :1;
        unsigned ADSTPT12               :1;
        unsigned ADSTPT13               :1;
        unsigned ADSTPT14               :1;
        unsigned ADSTPT15               :1;
    };
} ADSTPTHbits_t;
extern volatile ADSTPTHbits_t ADSTPTHbits __at(0xF69);
// bitfield macros
#define _ADSTPTH_ADSTPTH_POSN                               0x0
#define _ADSTPTH_ADSTPTH_POSITION                           0x0
#define _ADSTPTH_ADSTPTH_SIZE                               0x8
#define _ADSTPTH_ADSTPTH_LENGTH                             0x8
#define _ADSTPTH_ADSTPTH_MASK                               0xFF
#define _ADSTPTH_ADSTPT8_POSN                               0x0
#define _ADSTPTH_ADSTPT8_POSITION                           0x0
#define _ADSTPTH_ADSTPT8_SIZE                               0x1
#define _ADSTPTH_ADSTPT8_LENGTH                             0x1
#define _ADSTPTH_ADSTPT8_MASK                               0x1
#define _ADSTPTH_ADSTPT9_POSN                               0x1
#define _ADSTPTH_ADSTPT9_POSITION                           0x1
#define _ADSTPTH_ADSTPT9_SIZE                               0x1
#define _ADSTPTH_ADSTPT9_LENGTH                             0x1
#define _ADSTPTH_ADSTPT9_MASK                               0x2
#define _ADSTPTH_ADSTPT10_POSN                              0x2
#define _ADSTPTH_ADSTPT10_POSITION                          0x2
#define _ADSTPTH_ADSTPT10_SIZE                              0x1
#define _ADSTPTH_ADSTPT10_LENGTH                            0x1
#define _ADSTPTH_ADSTPT10_MASK                              0x4
#define _ADSTPTH_ADSTPT11_POSN                              0x3
#define _ADSTPTH_ADSTPT11_POSITION                          0x3
#define _ADSTPTH_ADSTPT11_SIZE                              0x1
#define _ADSTPTH_ADSTPT11_LENGTH                            0x1
#define _ADSTPTH_ADSTPT11_MASK                              0x8
#define _ADSTPTH_ADSTPT12_POSN                              0x4
#define _ADSTPTH_ADSTPT12_POSITION                          0x4
#define _ADSTPTH_ADSTPT12_SIZE                              0x1
#define _ADSTPTH_ADSTPT12_LENGTH                            0x1
#define _ADSTPTH_ADSTPT12_MASK                              0x10
#define _ADSTPTH_ADSTPT13_POSN                              0x5
#define _ADSTPTH_ADSTPT13_POSITION                          0x5
#define _ADSTPTH_ADSTPT13_SIZE                              0x1
#define _ADSTPTH_ADSTPT13_LENGTH                            0x1
#define _ADSTPTH_ADSTPT13_MASK                              0x20
#define _ADSTPTH_ADSTPT14_POSN                              0x6
#define _ADSTPTH_ADSTPT14_POSITION                          0x6
#define _ADSTPTH_ADSTPT14_SIZE                              0x1
#define _ADSTPTH_ADSTPT14_LENGTH                            0x1
#define _ADSTPTH_ADSTPT14_MASK                              0x40
#define _ADSTPTH_ADSTPT15_POSN                              0x7
#define _ADSTPTH_ADSTPT15_POSITION                          0x7
#define _ADSTPTH_ADSTPT15_SIZE                              0x1
#define _ADSTPTH_ADSTPT15_LENGTH                            0x1
#define _ADSTPTH_ADSTPT15_MASK                              0x80

// Register: ADLTH
#define ADLTH ADLTH
extern volatile unsigned short          ADLTH               __at(0xF6A);
#ifndef _LIB_BUILD
asm("ADLTH equ 0F6Ah");
#endif

// Register: ADLTHL
#define ADLTHL ADLTHL
extern volatile unsigned char           ADLTHL              __at(0xF6A);
#ifndef _LIB_BUILD
asm("ADLTHL equ 0F6Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADLTHL                 :8;
    };
    struct {
        unsigned ADLTH0                 :1;
        unsigned ADLTH1                 :1;
        unsigned ADLTH2                 :1;
        unsigned ADLTH3                 :1;
        unsigned ADLTH4                 :1;
        unsigned ADLTH5                 :1;
        unsigned ADLTH6                 :1;
        unsigned ADLTH7                 :1;
    };
} ADLTHLbits_t;
extern volatile ADLTHLbits_t ADLTHLbits __at(0xF6A);
// bitfield macros
#define _ADLTHL_ADLTHL_POSN                                 0x0
#define _ADLTHL_ADLTHL_POSITION                             0x0
#define _ADLTHL_ADLTHL_SIZE                                 0x8
#define _ADLTHL_ADLTHL_LENGTH                               0x8
#define _ADLTHL_ADLTHL_MASK                                 0xFF
#define _ADLTHL_ADLTH0_POSN                                 0x0
#define _ADLTHL_ADLTH0_POSITION                             0x0
#define _ADLTHL_ADLTH0_SIZE                                 0x1
#define _ADLTHL_ADLTH0_LENGTH                               0x1
#define _ADLTHL_ADLTH0_MASK                                 0x1
#define _ADLTHL_ADLTH1_POSN                                 0x1
#define _ADLTHL_ADLTH1_POSITION                             0x1
#define _ADLTHL_ADLTH1_SIZE                                 0x1
#define _ADLTHL_ADLTH1_LENGTH                               0x1
#define _ADLTHL_ADLTH1_MASK                                 0x2
#define _ADLTHL_ADLTH2_POSN                                 0x2
#define _ADLTHL_ADLTH2_POSITION                             0x2
#define _ADLTHL_ADLTH2_SIZE                                 0x1
#define _ADLTHL_ADLTH2_LENGTH                               0x1
#define _ADLTHL_ADLTH2_MASK                                 0x4
#define _ADLTHL_ADLTH3_POSN                                 0x3
#define _ADLTHL_ADLTH3_POSITION                             0x3
#define _ADLTHL_ADLTH3_SIZE                                 0x1
#define _ADLTHL_ADLTH3_LENGTH                               0x1
#define _ADLTHL_ADLTH3_MASK                                 0x8
#define _ADLTHL_ADLTH4_POSN                                 0x4
#define _ADLTHL_ADLTH4_POSITION                             0x4
#define _ADLTHL_ADLTH4_SIZE                                 0x1
#define _ADLTHL_ADLTH4_LENGTH                               0x1
#define _ADLTHL_ADLTH4_MASK                                 0x10
#define _ADLTHL_ADLTH5_POSN                                 0x5
#define _ADLTHL_ADLTH5_POSITION                             0x5
#define _ADLTHL_ADLTH5_SIZE                                 0x1
#define _ADLTHL_ADLTH5_LENGTH                               0x1
#define _ADLTHL_ADLTH5_MASK                                 0x20
#define _ADLTHL_ADLTH6_POSN                                 0x6
#define _ADLTHL_ADLTH6_POSITION                             0x6
#define _ADLTHL_ADLTH6_SIZE                                 0x1
#define _ADLTHL_ADLTH6_LENGTH                               0x1
#define _ADLTHL_ADLTH6_MASK                                 0x40
#define _ADLTHL_ADLTH7_POSN                                 0x7
#define _ADLTHL_ADLTH7_POSITION                             0x7
#define _ADLTHL_ADLTH7_SIZE                                 0x1
#define _ADLTHL_ADLTH7_LENGTH                               0x1
#define _ADLTHL_ADLTH7_MASK                                 0x80

// Register: ADLTHH
#define ADLTHH ADLTHH
extern volatile unsigned char           ADLTHH              __at(0xF6B);
#ifndef _LIB_BUILD
asm("ADLTHH equ 0F6Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADLTHH                 :8;
    };
    struct {
        unsigned ADLTH8                 :1;
        unsigned ADLTH9                 :1;
        unsigned ADLTH10                :1;
        unsigned ADLTH11                :1;
        unsigned ADLTH12                :1;
        unsigned ADLTH13                :1;
        unsigned ADLTH14                :1;
        unsigned ADLTH15                :1;
    };
} ADLTHHbits_t;
extern volatile ADLTHHbits_t ADLTHHbits __at(0xF6B);
// bitfield macros
#define _ADLTHH_ADLTHH_POSN                                 0x0
#define _ADLTHH_ADLTHH_POSITION                             0x0
#define _ADLTHH_ADLTHH_SIZE                                 0x8
#define _ADLTHH_ADLTHH_LENGTH                               0x8
#define _ADLTHH_ADLTHH_MASK                                 0xFF
#define _ADLTHH_ADLTH8_POSN                                 0x0
#define _ADLTHH_ADLTH8_POSITION                             0x0
#define _ADLTHH_ADLTH8_SIZE                                 0x1
#define _ADLTHH_ADLTH8_LENGTH                               0x1
#define _ADLTHH_ADLTH8_MASK                                 0x1
#define _ADLTHH_ADLTH9_POSN                                 0x1
#define _ADLTHH_ADLTH9_POSITION                             0x1
#define _ADLTHH_ADLTH9_SIZE                                 0x1
#define _ADLTHH_ADLTH9_LENGTH                               0x1
#define _ADLTHH_ADLTH9_MASK                                 0x2
#define _ADLTHH_ADLTH10_POSN                                0x2
#define _ADLTHH_ADLTH10_POSITION                            0x2
#define _ADLTHH_ADLTH10_SIZE                                0x1
#define _ADLTHH_ADLTH10_LENGTH                              0x1
#define _ADLTHH_ADLTH10_MASK                                0x4
#define _ADLTHH_ADLTH11_POSN                                0x3
#define _ADLTHH_ADLTH11_POSITION                            0x3
#define _ADLTHH_ADLTH11_SIZE                                0x1
#define _ADLTHH_ADLTH11_LENGTH                              0x1
#define _ADLTHH_ADLTH11_MASK                                0x8
#define _ADLTHH_ADLTH12_POSN                                0x4
#define _ADLTHH_ADLTH12_POSITION                            0x4
#define _ADLTHH_ADLTH12_SIZE                                0x1
#define _ADLTHH_ADLTH12_LENGTH                              0x1
#define _ADLTHH_ADLTH12_MASK                                0x10
#define _ADLTHH_ADLTH13_POSN                                0x5
#define _ADLTHH_ADLTH13_POSITION                            0x5
#define _ADLTHH_ADLTH13_SIZE                                0x1
#define _ADLTHH_ADLTH13_LENGTH                              0x1
#define _ADLTHH_ADLTH13_MASK                                0x20
#define _ADLTHH_ADLTH14_POSN                                0x6
#define _ADLTHH_ADLTH14_POSITION                            0x6
#define _ADLTHH_ADLTH14_SIZE                                0x1
#define _ADLTHH_ADLTH14_LENGTH                              0x1
#define _ADLTHH_ADLTH14_MASK                                0x40
#define _ADLTHH_ADLTH15_POSN                                0x7
#define _ADLTHH_ADLTH15_POSITION                            0x7
#define _ADLTHH_ADLTH15_SIZE                                0x1
#define _ADLTHH_ADLTH15_LENGTH                              0x1
#define _ADLTHH_ADLTH15_MASK                                0x80

// Register: ADUTH
#define ADUTH ADUTH
extern volatile unsigned short          ADUTH               __at(0xF6C);
#ifndef _LIB_BUILD
asm("ADUTH equ 0F6Ch");
#endif

// Register: ADUTHL
#define ADUTHL ADUTHL
extern volatile unsigned char           ADUTHL              __at(0xF6C);
#ifndef _LIB_BUILD
asm("ADUTHL equ 0F6Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADUTHL                 :8;
    };
    struct {
        unsigned ADUTH0                 :1;
        unsigned ADUTH1                 :1;
        unsigned ADUTH2                 :1;
        unsigned ADUTH3                 :1;
        unsigned ADUTH4                 :1;
        unsigned ADUTH5                 :1;
        unsigned ADUTH6                 :1;
        unsigned ADUTH7                 :1;
    };
} ADUTHLbits_t;
extern volatile ADUTHLbits_t ADUTHLbits __at(0xF6C);
// bitfield macros
#define _ADUTHL_ADUTHL_POSN                                 0x0
#define _ADUTHL_ADUTHL_POSITION                             0x0
#define _ADUTHL_ADUTHL_SIZE                                 0x8
#define _ADUTHL_ADUTHL_LENGTH                               0x8
#define _ADUTHL_ADUTHL_MASK                                 0xFF
#define _ADUTHL_ADUTH0_POSN                                 0x0
#define _ADUTHL_ADUTH0_POSITION                             0x0
#define _ADUTHL_ADUTH0_SIZE                                 0x1
#define _ADUTHL_ADUTH0_LENGTH                               0x1
#define _ADUTHL_ADUTH0_MASK                                 0x1
#define _ADUTHL_ADUTH1_POSN                                 0x1
#define _ADUTHL_ADUTH1_POSITION                             0x1
#define _ADUTHL_ADUTH1_SIZE                                 0x1
#define _ADUTHL_ADUTH1_LENGTH                               0x1
#define _ADUTHL_ADUTH1_MASK                                 0x2
#define _ADUTHL_ADUTH2_POSN                                 0x2
#define _ADUTHL_ADUTH2_POSITION                             0x2
#define _ADUTHL_ADUTH2_SIZE                                 0x1
#define _ADUTHL_ADUTH2_LENGTH                               0x1
#define _ADUTHL_ADUTH2_MASK                                 0x4
#define _ADUTHL_ADUTH3_POSN                                 0x3
#define _ADUTHL_ADUTH3_POSITION                             0x3
#define _ADUTHL_ADUTH3_SIZE                                 0x1
#define _ADUTHL_ADUTH3_LENGTH                               0x1
#define _ADUTHL_ADUTH3_MASK                                 0x8
#define _ADUTHL_ADUTH4_POSN                                 0x4
#define _ADUTHL_ADUTH4_POSITION                             0x4
#define _ADUTHL_ADUTH4_SIZE                                 0x1
#define _ADUTHL_ADUTH4_LENGTH                               0x1
#define _ADUTHL_ADUTH4_MASK                                 0x10
#define _ADUTHL_ADUTH5_POSN                                 0x5
#define _ADUTHL_ADUTH5_POSITION                             0x5
#define _ADUTHL_ADUTH5_SIZE                                 0x1
#define _ADUTHL_ADUTH5_LENGTH                               0x1
#define _ADUTHL_ADUTH5_MASK                                 0x20
#define _ADUTHL_ADUTH6_POSN                                 0x6
#define _ADUTHL_ADUTH6_POSITION                             0x6
#define _ADUTHL_ADUTH6_SIZE                                 0x1
#define _ADUTHL_ADUTH6_LENGTH                               0x1
#define _ADUTHL_ADUTH6_MASK                                 0x40
#define _ADUTHL_ADUTH7_POSN                                 0x7
#define _ADUTHL_ADUTH7_POSITION                             0x7
#define _ADUTHL_ADUTH7_SIZE                                 0x1
#define _ADUTHL_ADUTH7_LENGTH                               0x1
#define _ADUTHL_ADUTH7_MASK                                 0x80

// Register: ADUTHH
#define ADUTHH ADUTHH
extern volatile unsigned char           ADUTHH              __at(0xF6D);
#ifndef _LIB_BUILD
asm("ADUTHH equ 0F6Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADUTHH                 :8;
    };
    struct {
        unsigned ADUTH8                 :1;
        unsigned ADUTH9                 :1;
        unsigned ADUTH10                :1;
        unsigned ADUTH11                :1;
        unsigned ADUTH12                :1;
        unsigned ADUTH13                :1;
        unsigned ADUTH14                :1;
        unsigned ADUTH15                :1;
    };
} ADUTHHbits_t;
extern volatile ADUTHHbits_t ADUTHHbits __at(0xF6D);
// bitfield macros
#define _ADUTHH_ADUTHH_POSN                                 0x0
#define _ADUTHH_ADUTHH_POSITION                             0x0
#define _ADUTHH_ADUTHH_SIZE                                 0x8
#define _ADUTHH_ADUTHH_LENGTH                               0x8
#define _ADUTHH_ADUTHH_MASK                                 0xFF
#define _ADUTHH_ADUTH8_POSN                                 0x0
#define _ADUTHH_ADUTH8_POSITION                             0x0
#define _ADUTHH_ADUTH8_SIZE                                 0x1
#define _ADUTHH_ADUTH8_LENGTH                               0x1
#define _ADUTHH_ADUTH8_MASK                                 0x1
#define _ADUTHH_ADUTH9_POSN                                 0x1
#define _ADUTHH_ADUTH9_POSITION                             0x1
#define _ADUTHH_ADUTH9_SIZE                                 0x1
#define _ADUTHH_ADUTH9_LENGTH                               0x1
#define _ADUTHH_ADUTH9_MASK                                 0x2
#define _ADUTHH_ADUTH10_POSN                                0x2
#define _ADUTHH_ADUTH10_POSITION                            0x2
#define _ADUTHH_ADUTH10_SIZE                                0x1
#define _ADUTHH_ADUTH10_LENGTH                              0x1
#define _ADUTHH_ADUTH10_MASK                                0x4
#define _ADUTHH_ADUTH11_POSN                                0x3
#define _ADUTHH_ADUTH11_POSITION                            0x3
#define _ADUTHH_ADUTH11_SIZE                                0x1
#define _ADUTHH_ADUTH11_LENGTH                              0x1
#define _ADUTHH_ADUTH11_MASK                                0x8
#define _ADUTHH_ADUTH12_POSN                                0x4
#define _ADUTHH_ADUTH12_POSITION                            0x4
#define _ADUTHH_ADUTH12_SIZE                                0x1
#define _ADUTHH_ADUTH12_LENGTH                              0x1
#define _ADUTHH_ADUTH12_MASK                                0x10
#define _ADUTHH_ADUTH13_POSN                                0x5
#define _ADUTHH_ADUTH13_POSITION                            0x5
#define _ADUTHH_ADUTH13_SIZE                                0x1
#define _ADUTHH_ADUTH13_LENGTH                              0x1
#define _ADUTHH_ADUTH13_MASK                                0x20
#define _ADUTHH_ADUTH14_POSN                                0x6
#define _ADUTHH_ADUTH14_POSITION                            0x6
#define _ADUTHH_ADUTH14_SIZE                                0x1
#define _ADUTHH_ADUTH14_LENGTH                              0x1
#define _ADUTHH_ADUTH14_MASK                                0x40
#define _ADUTHH_ADUTH15_POSN                                0x7
#define _ADUTHH_ADUTH15_POSITION                            0x7
#define _ADUTHH_ADUTH15_SIZE                                0x1
#define _ADUTHH_ADUTH15_LENGTH                              0x1
#define _ADUTHH_ADUTH15_MASK                                0x80

// Register: ADERR
#define ADERR ADERR
extern volatile unsigned short          ADERR               __at(0xF6E);
#ifndef _LIB_BUILD
asm("ADERR equ 0F6Eh");
#endif

// Register: ADERRL
#define ADERRL ADERRL
extern volatile unsigned char           ADERRL              __at(0xF6E);
#ifndef _LIB_BUILD
asm("ADERRL equ 0F6Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADERRL                 :8;
    };
    struct {
        unsigned ADERR0                 :1;
        unsigned ADERR1                 :1;
        unsigned ADERR2                 :1;
        unsigned ADERR3                 :1;
        unsigned ADERR4                 :1;
        unsigned ADERR5                 :1;
        unsigned ADERR6                 :1;
        unsigned ADERR7                 :1;
    };
} ADERRLbits_t;
extern volatile ADERRLbits_t ADERRLbits __at(0xF6E);
// bitfield macros
#define _ADERRL_ADERRL_POSN                                 0x0
#define _ADERRL_ADERRL_POSITION                             0x0
#define _ADERRL_ADERRL_SIZE                                 0x8
#define _ADERRL_ADERRL_LENGTH                               0x8
#define _ADERRL_ADERRL_MASK                                 0xFF
#define _ADERRL_ADERR0_POSN                                 0x0
#define _ADERRL_ADERR0_POSITION                             0x0
#define _ADERRL_ADERR0_SIZE                                 0x1
#define _ADERRL_ADERR0_LENGTH                               0x1
#define _ADERRL_ADERR0_MASK                                 0x1
#define _ADERRL_ADERR1_POSN                                 0x1
#define _ADERRL_ADERR1_POSITION                             0x1
#define _ADERRL_ADERR1_SIZE                                 0x1
#define _ADERRL_ADERR1_LENGTH                               0x1
#define _ADERRL_ADERR1_MASK                                 0x2
#define _ADERRL_ADERR2_POSN                                 0x2
#define _ADERRL_ADERR2_POSITION                             0x2
#define _ADERRL_ADERR2_SIZE                                 0x1
#define _ADERRL_ADERR2_LENGTH                               0x1
#define _ADERRL_ADERR2_MASK                                 0x4
#define _ADERRL_ADERR3_POSN                                 0x3
#define _ADERRL_ADERR3_POSITION                             0x3
#define _ADERRL_ADERR3_SIZE                                 0x1
#define _ADERRL_ADERR3_LENGTH                               0x1
#define _ADERRL_ADERR3_MASK                                 0x8
#define _ADERRL_ADERR4_POSN                                 0x4
#define _ADERRL_ADERR4_POSITION                             0x4
#define _ADERRL_ADERR4_SIZE                                 0x1
#define _ADERRL_ADERR4_LENGTH                               0x1
#define _ADERRL_ADERR4_MASK                                 0x10
#define _ADERRL_ADERR5_POSN                                 0x5
#define _ADERRL_ADERR5_POSITION                             0x5
#define _ADERRL_ADERR5_SIZE                                 0x1
#define _ADERRL_ADERR5_LENGTH                               0x1
#define _ADERRL_ADERR5_MASK                                 0x20
#define _ADERRL_ADERR6_POSN                                 0x6
#define _ADERRL_ADERR6_POSITION                             0x6
#define _ADERRL_ADERR6_SIZE                                 0x1
#define _ADERRL_ADERR6_LENGTH                               0x1
#define _ADERRL_ADERR6_MASK                                 0x40
#define _ADERRL_ADERR7_POSN                                 0x7
#define _ADERRL_ADERR7_POSITION                             0x7
#define _ADERRL_ADERR7_SIZE                                 0x1
#define _ADERRL_ADERR7_LENGTH                               0x1
#define _ADERRL_ADERR7_MASK                                 0x80

// Register: ADERRH
#define ADERRH ADERRH
extern volatile unsigned char           ADERRH              __at(0xF6F);
#ifndef _LIB_BUILD
asm("ADERRH equ 0F6Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADERRH                 :8;
    };
    struct {
        unsigned ADERR8                 :1;
        unsigned ADERR9                 :1;
        unsigned ADERR10                :1;
        unsigned ADERR11                :1;
        unsigned ADERR12                :1;
        unsigned ADERR13                :1;
        unsigned ADERR14                :1;
        unsigned ADERR15                :1;
    };
} ADERRHbits_t;
extern volatile ADERRHbits_t ADERRHbits __at(0xF6F);
// bitfield macros
#define _ADERRH_ADERRH_POSN                                 0x0
#define _ADERRH_ADERRH_POSITION                             0x0
#define _ADERRH_ADERRH_SIZE                                 0x8
#define _ADERRH_ADERRH_LENGTH                               0x8
#define _ADERRH_ADERRH_MASK                                 0xFF
#define _ADERRH_ADERR8_POSN                                 0x0
#define _ADERRH_ADERR8_POSITION                             0x0
#define _ADERRH_ADERR8_SIZE                                 0x1
#define _ADERRH_ADERR8_LENGTH                               0x1
#define _ADERRH_ADERR8_MASK                                 0x1
#define _ADERRH_ADERR9_POSN                                 0x1
#define _ADERRH_ADERR9_POSITION                             0x1
#define _ADERRH_ADERR9_SIZE                                 0x1
#define _ADERRH_ADERR9_LENGTH                               0x1
#define _ADERRH_ADERR9_MASK                                 0x2
#define _ADERRH_ADERR10_POSN                                0x2
#define _ADERRH_ADERR10_POSITION                            0x2
#define _ADERRH_ADERR10_SIZE                                0x1
#define _ADERRH_ADERR10_LENGTH                              0x1
#define _ADERRH_ADERR10_MASK                                0x4
#define _ADERRH_ADERR11_POSN                                0x3
#define _ADERRH_ADERR11_POSITION                            0x3
#define _ADERRH_ADERR11_SIZE                                0x1
#define _ADERRH_ADERR11_LENGTH                              0x1
#define _ADERRH_ADERR11_MASK                                0x8
#define _ADERRH_ADERR12_POSN                                0x4
#define _ADERRH_ADERR12_POSITION                            0x4
#define _ADERRH_ADERR12_SIZE                                0x1
#define _ADERRH_ADERR12_LENGTH                              0x1
#define _ADERRH_ADERR12_MASK                                0x10
#define _ADERRH_ADERR13_POSN                                0x5
#define _ADERRH_ADERR13_POSITION                            0x5
#define _ADERRH_ADERR13_SIZE                                0x1
#define _ADERRH_ADERR13_LENGTH                              0x1
#define _ADERRH_ADERR13_MASK                                0x20
#define _ADERRH_ADERR14_POSN                                0x6
#define _ADERRH_ADERR14_POSITION                            0x6
#define _ADERRH_ADERR14_SIZE                                0x1
#define _ADERRH_ADERR14_LENGTH                              0x1
#define _ADERRH_ADERR14_MASK                                0x40
#define _ADERRH_ADERR15_POSN                                0x7
#define _ADERRH_ADERR15_POSITION                            0x7
#define _ADERRH_ADERR15_SIZE                                0x1
#define _ADERRH_ADERR15_LENGTH                              0x1
#define _ADERRH_ADERR15_MASK                                0x80

// Register: ADACC
#define ADACC ADACC
extern volatile unsigned short          ADACC               __at(0xF70);
#ifndef _LIB_BUILD
asm("ADACC equ 0F70h");
#endif

// Register: ADACCL
#define ADACCL ADACCL
extern volatile unsigned char           ADACCL              __at(0xF70);
#ifndef _LIB_BUILD
asm("ADACCL equ 0F70h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADACCL                 :8;
    };
    struct {
        unsigned ADACC0                 :1;
        unsigned ADACC1                 :1;
        unsigned ADACC2                 :1;
        unsigned ADACC3                 :1;
        unsigned ADACC4                 :1;
        unsigned ADACC5                 :1;
        unsigned ADACC6                 :1;
        unsigned ADACC7                 :1;
    };
} ADACCLbits_t;
extern volatile ADACCLbits_t ADACCLbits __at(0xF70);
// bitfield macros
#define _ADACCL_ADACCL_POSN                                 0x0
#define _ADACCL_ADACCL_POSITION                             0x0
#define _ADACCL_ADACCL_SIZE                                 0x8
#define _ADACCL_ADACCL_LENGTH                               0x8
#define _ADACCL_ADACCL_MASK                                 0xFF
#define _ADACCL_ADACC0_POSN                                 0x0
#define _ADACCL_ADACC0_POSITION                             0x0
#define _ADACCL_ADACC0_SIZE                                 0x1
#define _ADACCL_ADACC0_LENGTH                               0x1
#define _ADACCL_ADACC0_MASK                                 0x1
#define _ADACCL_ADACC1_POSN                                 0x1
#define _ADACCL_ADACC1_POSITION                             0x1
#define _ADACCL_ADACC1_SIZE                                 0x1
#define _ADACCL_ADACC1_LENGTH                               0x1
#define _ADACCL_ADACC1_MASK                                 0x2
#define _ADACCL_ADACC2_POSN                                 0x2
#define _ADACCL_ADACC2_POSITION                             0x2
#define _ADACCL_ADACC2_SIZE                                 0x1
#define _ADACCL_ADACC2_LENGTH                               0x1
#define _ADACCL_ADACC2_MASK                                 0x4
#define _ADACCL_ADACC3_POSN                                 0x3
#define _ADACCL_ADACC3_POSITION                             0x3
#define _ADACCL_ADACC3_SIZE                                 0x1
#define _ADACCL_ADACC3_LENGTH                               0x1
#define _ADACCL_ADACC3_MASK                                 0x8
#define _ADACCL_ADACC4_POSN                                 0x4
#define _ADACCL_ADACC4_POSITION                             0x4
#define _ADACCL_ADACC4_SIZE                                 0x1
#define _ADACCL_ADACC4_LENGTH                               0x1
#define _ADACCL_ADACC4_MASK                                 0x10
#define _ADACCL_ADACC5_POSN                                 0x5
#define _ADACCL_ADACC5_POSITION                             0x5
#define _ADACCL_ADACC5_SIZE                                 0x1
#define _ADACCL_ADACC5_LENGTH                               0x1
#define _ADACCL_ADACC5_MASK                                 0x20
#define _ADACCL_ADACC6_POSN                                 0x6
#define _ADACCL_ADACC6_POSITION                             0x6
#define _ADACCL_ADACC6_SIZE                                 0x1
#define _ADACCL_ADACC6_LENGTH                               0x1
#define _ADACCL_ADACC6_MASK                                 0x40
#define _ADACCL_ADACC7_POSN                                 0x7
#define _ADACCL_ADACC7_POSITION                             0x7
#define _ADACCL_ADACC7_SIZE                                 0x1
#define _ADACCL_ADACC7_LENGTH                               0x1
#define _ADACCL_ADACC7_MASK                                 0x80

// Register: ADACCH
#define ADACCH ADACCH
extern volatile unsigned char           ADACCH              __at(0xF71);
#ifndef _LIB_BUILD
asm("ADACCH equ 0F71h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADACCH                 :8;
    };
    struct {
        unsigned ADACC8                 :1;
        unsigned ADACC9                 :1;
        unsigned ADACC10                :1;
        unsigned ADACC11                :1;
        unsigned ADACC12                :1;
        unsigned ADACC13                :1;
        unsigned ADACC14                :1;
        unsigned ADACC15                :1;
    };
} ADACCHbits_t;
extern volatile ADACCHbits_t ADACCHbits __at(0xF71);
// bitfield macros
#define _ADACCH_ADACCH_POSN                                 0x0
#define _ADACCH_ADACCH_POSITION                             0x0
#define _ADACCH_ADACCH_SIZE                                 0x8
#define _ADACCH_ADACCH_LENGTH                               0x8
#define _ADACCH_ADACCH_MASK                                 0xFF
#define _ADACCH_ADACC8_POSN                                 0x0
#define _ADACCH_ADACC8_POSITION                             0x0
#define _ADACCH_ADACC8_SIZE                                 0x1
#define _ADACCH_ADACC8_LENGTH                               0x1
#define _ADACCH_ADACC8_MASK                                 0x1
#define _ADACCH_ADACC9_POSN                                 0x1
#define _ADACCH_ADACC9_POSITION                             0x1
#define _ADACCH_ADACC9_SIZE                                 0x1
#define _ADACCH_ADACC9_LENGTH                               0x1
#define _ADACCH_ADACC9_MASK                                 0x2
#define _ADACCH_ADACC10_POSN                                0x2
#define _ADACCH_ADACC10_POSITION                            0x2
#define _ADACCH_ADACC10_SIZE                                0x1
#define _ADACCH_ADACC10_LENGTH                              0x1
#define _ADACCH_ADACC10_MASK                                0x4
#define _ADACCH_ADACC11_POSN                                0x3
#define _ADACCH_ADACC11_POSITION                            0x3
#define _ADACCH_ADACC11_SIZE                                0x1
#define _ADACCH_ADACC11_LENGTH                              0x1
#define _ADACCH_ADACC11_MASK                                0x8
#define _ADACCH_ADACC12_POSN                                0x4
#define _ADACCH_ADACC12_POSITION                            0x4
#define _ADACCH_ADACC12_SIZE                                0x1
#define _ADACCH_ADACC12_LENGTH                              0x1
#define _ADACCH_ADACC12_MASK                                0x10
#define _ADACCH_ADACC13_POSN                                0x5
#define _ADACCH_ADACC13_POSITION                            0x5
#define _ADACCH_ADACC13_SIZE                                0x1
#define _ADACCH_ADACC13_LENGTH                              0x1
#define _ADACCH_ADACC13_MASK                                0x20
#define _ADACCH_ADACC14_POSN                                0x6
#define _ADACCH_ADACC14_POSITION                            0x6
#define _ADACCH_ADACC14_SIZE                                0x1
#define _ADACCH_ADACC14_LENGTH                              0x1
#define _ADACCH_ADACC14_MASK                                0x40
#define _ADACCH_ADACC15_POSN                                0x7
#define _ADACCH_ADACC15_POSITION                            0x7
#define _ADACCH_ADACC15_SIZE                                0x1
#define _ADACCH_ADACC15_LENGTH                              0x1
#define _ADACCH_ADACC15_MASK                                0x80

// Register: ADFLTR
#define ADFLTR ADFLTR
extern volatile unsigned short          ADFLTR              __at(0xF72);
#ifndef _LIB_BUILD
asm("ADFLTR equ 0F72h");
#endif

// Register: ADFLTRL
#define ADFLTRL ADFLTRL
extern volatile unsigned char           ADFLTRL             __at(0xF72);
#ifndef _LIB_BUILD
asm("ADFLTRL equ 0F72h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADFLTRL                :8;
    };
    struct {
        unsigned ADFLTR0                :1;
        unsigned ADFLTR1                :1;
        unsigned ADFLTR2                :1;
        unsigned ADFLTR3                :1;
        unsigned ADFLTR4                :1;
        unsigned ADFLTR5                :1;
        unsigned ADFLTR6                :1;
        unsigned ADFLTR7                :1;
    };
} ADFLTRLbits_t;
extern volatile ADFLTRLbits_t ADFLTRLbits __at(0xF72);
// bitfield macros
#define _ADFLTRL_ADFLTRL_POSN                               0x0
#define _ADFLTRL_ADFLTRL_POSITION                           0x0
#define _ADFLTRL_ADFLTRL_SIZE                               0x8
#define _ADFLTRL_ADFLTRL_LENGTH                             0x8
#define _ADFLTRL_ADFLTRL_MASK                               0xFF
#define _ADFLTRL_ADFLTR0_POSN                               0x0
#define _ADFLTRL_ADFLTR0_POSITION                           0x0
#define _ADFLTRL_ADFLTR0_SIZE                               0x1
#define _ADFLTRL_ADFLTR0_LENGTH                             0x1
#define _ADFLTRL_ADFLTR0_MASK                               0x1
#define _ADFLTRL_ADFLTR1_POSN                               0x1
#define _ADFLTRL_ADFLTR1_POSITION                           0x1
#define _ADFLTRL_ADFLTR1_SIZE                               0x1
#define _ADFLTRL_ADFLTR1_LENGTH                             0x1
#define _ADFLTRL_ADFLTR1_MASK                               0x2
#define _ADFLTRL_ADFLTR2_POSN                               0x2
#define _ADFLTRL_ADFLTR2_POSITION                           0x2
#define _ADFLTRL_ADFLTR2_SIZE                               0x1
#define _ADFLTRL_ADFLTR2_LENGTH                             0x1
#define _ADFLTRL_ADFLTR2_MASK                               0x4
#define _ADFLTRL_ADFLTR3_POSN                               0x3
#define _ADFLTRL_ADFLTR3_POSITION                           0x3
#define _ADFLTRL_ADFLTR3_SIZE                               0x1
#define _ADFLTRL_ADFLTR3_LENGTH                             0x1
#define _ADFLTRL_ADFLTR3_MASK                               0x8
#define _ADFLTRL_ADFLTR4_POSN                               0x4
#define _ADFLTRL_ADFLTR4_POSITION                           0x4
#define _ADFLTRL_ADFLTR4_SIZE                               0x1
#define _ADFLTRL_ADFLTR4_LENGTH                             0x1
#define _ADFLTRL_ADFLTR4_MASK                               0x10
#define _ADFLTRL_ADFLTR5_POSN                               0x5
#define _ADFLTRL_ADFLTR5_POSITION                           0x5
#define _ADFLTRL_ADFLTR5_SIZE                               0x1
#define _ADFLTRL_ADFLTR5_LENGTH                             0x1
#define _ADFLTRL_ADFLTR5_MASK                               0x20
#define _ADFLTRL_ADFLTR6_POSN                               0x6
#define _ADFLTRL_ADFLTR6_POSITION                           0x6
#define _ADFLTRL_ADFLTR6_SIZE                               0x1
#define _ADFLTRL_ADFLTR6_LENGTH                             0x1
#define _ADFLTRL_ADFLTR6_MASK                               0x40
#define _ADFLTRL_ADFLTR7_POSN                               0x7
#define _ADFLTRL_ADFLTR7_POSITION                           0x7
#define _ADFLTRL_ADFLTR7_SIZE                               0x1
#define _ADFLTRL_ADFLTR7_LENGTH                             0x1
#define _ADFLTRL_ADFLTR7_MASK                               0x80

// Register: ADFLTRH
#define ADFLTRH ADFLTRH
extern volatile unsigned char           ADFLTRH             __at(0xF73);
#ifndef _LIB_BUILD
asm("ADFLTRH equ 0F73h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADFLTRH                :8;
    };
    struct {
        unsigned ADFLTR8                :1;
        unsigned ADFLTR9                :1;
        unsigned ADFLTR10               :1;
        unsigned ADFLTR11               :1;
        unsigned ADFLTR12               :1;
        unsigned ADFLTR13               :1;
        unsigned ADFLTR14               :1;
        unsigned ADFLTR15               :1;
    };
} ADFLTRHbits_t;
extern volatile ADFLTRHbits_t ADFLTRHbits __at(0xF73);
// bitfield macros
#define _ADFLTRH_ADFLTRH_POSN                               0x0
#define _ADFLTRH_ADFLTRH_POSITION                           0x0
#define _ADFLTRH_ADFLTRH_SIZE                               0x8
#define _ADFLTRH_ADFLTRH_LENGTH                             0x8
#define _ADFLTRH_ADFLTRH_MASK                               0xFF
#define _ADFLTRH_ADFLTR8_POSN                               0x0
#define _ADFLTRH_ADFLTR8_POSITION                           0x0
#define _ADFLTRH_ADFLTR8_SIZE                               0x1
#define _ADFLTRH_ADFLTR8_LENGTH                             0x1
#define _ADFLTRH_ADFLTR8_MASK                               0x1
#define _ADFLTRH_ADFLTR9_POSN                               0x1
#define _ADFLTRH_ADFLTR9_POSITION                           0x1
#define _ADFLTRH_ADFLTR9_SIZE                               0x1
#define _ADFLTRH_ADFLTR9_LENGTH                             0x1
#define _ADFLTRH_ADFLTR9_MASK                               0x2
#define _ADFLTRH_ADFLTR10_POSN                              0x2
#define _ADFLTRH_ADFLTR10_POSITION                          0x2
#define _ADFLTRH_ADFLTR10_SIZE                              0x1
#define _ADFLTRH_ADFLTR10_LENGTH                            0x1
#define _ADFLTRH_ADFLTR10_MASK                              0x4
#define _ADFLTRH_ADFLTR11_POSN                              0x3
#define _ADFLTRH_ADFLTR11_POSITION                          0x3
#define _ADFLTRH_ADFLTR11_SIZE                              0x1
#define _ADFLTRH_ADFLTR11_LENGTH                            0x1
#define _ADFLTRH_ADFLTR11_MASK                              0x8
#define _ADFLTRH_ADFLTR12_POSN                              0x4
#define _ADFLTRH_ADFLTR12_POSITION                          0x4
#define _ADFLTRH_ADFLTR12_SIZE                              0x1
#define _ADFLTRH_ADFLTR12_LENGTH                            0x1
#define _ADFLTRH_ADFLTR12_MASK                              0x10
#define _ADFLTRH_ADFLTR13_POSN                              0x5
#define _ADFLTRH_ADFLTR13_POSITION                          0x5
#define _ADFLTRH_ADFLTR13_SIZE                              0x1
#define _ADFLTRH_ADFLTR13_LENGTH                            0x1
#define _ADFLTRH_ADFLTR13_MASK                              0x20
#define _ADFLTRH_ADFLTR14_POSN                              0x6
#define _ADFLTRH_ADFLTR14_POSITION                          0x6
#define _ADFLTRH_ADFLTR14_SIZE                              0x1
#define _ADFLTRH_ADFLTR14_LENGTH                            0x1
#define _ADFLTRH_ADFLTR14_MASK                              0x40
#define _ADFLTRH_ADFLTR15_POSN                              0x7
#define _ADFLTRH_ADFLTR15_POSITION                          0x7
#define _ADFLTRH_ADFLTR15_SIZE                              0x1
#define _ADFLTRH_ADFLTR15_LENGTH                            0x1
#define _ADFLTRH_ADFLTR15_MASK                              0x80

// Register: CRCDATA
#define CRCDATA CRCDATA
extern volatile unsigned short          CRCDATA             __at(0xF74);
#ifndef _LIB_BUILD
asm("CRCDATA equ 0F74h");
#endif

// Register: CRCDATL
#define CRCDATL CRCDATL
extern volatile unsigned char           CRCDATL             __at(0xF74);
#ifndef _LIB_BUILD
asm("CRCDATL equ 0F74h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DATA0                  :1;
        unsigned DATA1                  :1;
        unsigned DATA2                  :1;
        unsigned DATA3                  :1;
        unsigned DATA4                  :1;
        unsigned DATA5                  :1;
        unsigned DATA6                  :1;
        unsigned DATA7                  :1;
    };
} CRCDATLbits_t;
extern volatile CRCDATLbits_t CRCDATLbits __at(0xF74);
// bitfield macros
#define _CRCDATL_DATA0_POSN                                 0x0
#define _CRCDATL_DATA0_POSITION                             0x0
#define _CRCDATL_DATA0_SIZE                                 0x1
#define _CRCDATL_DATA0_LENGTH                               0x1
#define _CRCDATL_DATA0_MASK                                 0x1
#define _CRCDATL_DATA1_POSN                                 0x1
#define _CRCDATL_DATA1_POSITION                             0x1
#define _CRCDATL_DATA1_SIZE                                 0x1
#define _CRCDATL_DATA1_LENGTH                               0x1
#define _CRCDATL_DATA1_MASK                                 0x2
#define _CRCDATL_DATA2_POSN                                 0x2
#define _CRCDATL_DATA2_POSITION                             0x2
#define _CRCDATL_DATA2_SIZE                                 0x1
#define _CRCDATL_DATA2_LENGTH                               0x1
#define _CRCDATL_DATA2_MASK                                 0x4
#define _CRCDATL_DATA3_POSN                                 0x3
#define _CRCDATL_DATA3_POSITION                             0x3
#define _CRCDATL_DATA3_SIZE                                 0x1
#define _CRCDATL_DATA3_LENGTH                               0x1
#define _CRCDATL_DATA3_MASK                                 0x8
#define _CRCDATL_DATA4_POSN                                 0x4
#define _CRCDATL_DATA4_POSITION                             0x4
#define _CRCDATL_DATA4_SIZE                                 0x1
#define _CRCDATL_DATA4_LENGTH                               0x1
#define _CRCDATL_DATA4_MASK                                 0x10
#define _CRCDATL_DATA5_POSN                                 0x5
#define _CRCDATL_DATA5_POSITION                             0x5
#define _CRCDATL_DATA5_SIZE                                 0x1
#define _CRCDATL_DATA5_LENGTH                               0x1
#define _CRCDATL_DATA5_MASK                                 0x20
#define _CRCDATL_DATA6_POSN                                 0x6
#define _CRCDATL_DATA6_POSITION                             0x6
#define _CRCDATL_DATA6_SIZE                                 0x1
#define _CRCDATL_DATA6_LENGTH                               0x1
#define _CRCDATL_DATA6_MASK                                 0x40
#define _CRCDATL_DATA7_POSN                                 0x7
#define _CRCDATL_DATA7_POSITION                             0x7
#define _CRCDATL_DATA7_SIZE                                 0x1
#define _CRCDATL_DATA7_LENGTH                               0x1
#define _CRCDATL_DATA7_MASK                                 0x80

// Register: CRCDATH
#define CRCDATH CRCDATH
extern volatile unsigned char           CRCDATH             __at(0xF75);
#ifndef _LIB_BUILD
asm("CRCDATH equ 0F75h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DATA8                  :1;
        unsigned DATA9                  :1;
        unsigned DATA10                 :1;
        unsigned DATA11                 :1;
        unsigned DATA12                 :1;
        unsigned DATA13                 :1;
        unsigned DATA14                 :1;
        unsigned DATA15                 :1;
    };
} CRCDATHbits_t;
extern volatile CRCDATHbits_t CRCDATHbits __at(0xF75);
// bitfield macros
#define _CRCDATH_DATA8_POSN                                 0x0
#define _CRCDATH_DATA8_POSITION                             0x0
#define _CRCDATH_DATA8_SIZE                                 0x1
#define _CRCDATH_DATA8_LENGTH                               0x1
#define _CRCDATH_DATA8_MASK                                 0x1
#define _CRCDATH_DATA9_POSN                                 0x1
#define _CRCDATH_DATA9_POSITION                             0x1
#define _CRCDATH_DATA9_SIZE                                 0x1
#define _CRCDATH_DATA9_LENGTH                               0x1
#define _CRCDATH_DATA9_MASK                                 0x2
#define _CRCDATH_DATA10_POSN                                0x2
#define _CRCDATH_DATA10_POSITION                            0x2
#define _CRCDATH_DATA10_SIZE                                0x1
#define _CRCDATH_DATA10_LENGTH                              0x1
#define _CRCDATH_DATA10_MASK                                0x4
#define _CRCDATH_DATA11_POSN                                0x3
#define _CRCDATH_DATA11_POSITION                            0x3
#define _CRCDATH_DATA11_SIZE                                0x1
#define _CRCDATH_DATA11_LENGTH                              0x1
#define _CRCDATH_DATA11_MASK                                0x8
#define _CRCDATH_DATA12_POSN                                0x4
#define _CRCDATH_DATA12_POSITION                            0x4
#define _CRCDATH_DATA12_SIZE                                0x1
#define _CRCDATH_DATA12_LENGTH                              0x1
#define _CRCDATH_DATA12_MASK                                0x10
#define _CRCDATH_DATA13_POSN                                0x5
#define _CRCDATH_DATA13_POSITION                            0x5
#define _CRCDATH_DATA13_SIZE                                0x1
#define _CRCDATH_DATA13_LENGTH                              0x1
#define _CRCDATH_DATA13_MASK                                0x20
#define _CRCDATH_DATA14_POSN                                0x6
#define _CRCDATH_DATA14_POSITION                            0x6
#define _CRCDATH_DATA14_SIZE                                0x1
#define _CRCDATH_DATA14_LENGTH                              0x1
#define _CRCDATH_DATA14_MASK                                0x40
#define _CRCDATH_DATA15_POSN                                0x7
#define _CRCDATH_DATA15_POSITION                            0x7
#define _CRCDATH_DATA15_SIZE                                0x1
#define _CRCDATH_DATA15_LENGTH                              0x1
#define _CRCDATH_DATA15_MASK                                0x80

// Register: CRCACC
#define CRCACC CRCACC
extern volatile unsigned short          CRCACC              __at(0xF76);
#ifndef _LIB_BUILD
asm("CRCACC equ 0F76h");
#endif

// Register: CRCACCL
#define CRCACCL CRCACCL
extern volatile unsigned char           CRCACCL             __at(0xF76);
#ifndef _LIB_BUILD
asm("CRCACCL equ 0F76h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ACC0                   :1;
        unsigned ACC1                   :1;
        unsigned ACC2                   :1;
        unsigned ACC3                   :1;
        unsigned ACC4                   :1;
        unsigned ACC5                   :1;
        unsigned ACC6                   :1;
        unsigned ACC7                   :1;
    };
} CRCACCLbits_t;
extern volatile CRCACCLbits_t CRCACCLbits __at(0xF76);
// bitfield macros
#define _CRCACCL_ACC0_POSN                                  0x0
#define _CRCACCL_ACC0_POSITION                              0x0
#define _CRCACCL_ACC0_SIZE                                  0x1
#define _CRCACCL_ACC0_LENGTH                                0x1
#define _CRCACCL_ACC0_MASK                                  0x1
#define _CRCACCL_ACC1_POSN                                  0x1
#define _CRCACCL_ACC1_POSITION                              0x1
#define _CRCACCL_ACC1_SIZE                                  0x1
#define _CRCACCL_ACC1_LENGTH                                0x1
#define _CRCACCL_ACC1_MASK                                  0x2
#define _CRCACCL_ACC2_POSN                                  0x2
#define _CRCACCL_ACC2_POSITION                              0x2
#define _CRCACCL_ACC2_SIZE                                  0x1
#define _CRCACCL_ACC2_LENGTH                                0x1
#define _CRCACCL_ACC2_MASK                                  0x4
#define _CRCACCL_ACC3_POSN                                  0x3
#define _CRCACCL_ACC3_POSITION                              0x3
#define _CRCACCL_ACC3_SIZE                                  0x1
#define _CRCACCL_ACC3_LENGTH                                0x1
#define _CRCACCL_ACC3_MASK                                  0x8
#define _CRCACCL_ACC4_POSN                                  0x4
#define _CRCACCL_ACC4_POSITION                              0x4
#define _CRCACCL_ACC4_SIZE                                  0x1
#define _CRCACCL_ACC4_LENGTH                                0x1
#define _CRCACCL_ACC4_MASK                                  0x10
#define _CRCACCL_ACC5_POSN                                  0x5
#define _CRCACCL_ACC5_POSITION                              0x5
#define _CRCACCL_ACC5_SIZE                                  0x1
#define _CRCACCL_ACC5_LENGTH                                0x1
#define _CRCACCL_ACC5_MASK                                  0x20
#define _CRCACCL_ACC6_POSN                                  0x6
#define _CRCACCL_ACC6_POSITION                              0x6
#define _CRCACCL_ACC6_SIZE                                  0x1
#define _CRCACCL_ACC6_LENGTH                                0x1
#define _CRCACCL_ACC6_MASK                                  0x40
#define _CRCACCL_ACC7_POSN                                  0x7
#define _CRCACCL_ACC7_POSITION                              0x7
#define _CRCACCL_ACC7_SIZE                                  0x1
#define _CRCACCL_ACC7_LENGTH                                0x1
#define _CRCACCL_ACC7_MASK                                  0x80

// Register: CRCACCH
#define CRCACCH CRCACCH
extern volatile unsigned char           CRCACCH             __at(0xF77);
#ifndef _LIB_BUILD
asm("CRCACCH equ 0F77h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ACC8                   :1;
        unsigned ACC9                   :1;
        unsigned ACC10                  :1;
        unsigned ACC11                  :1;
        unsigned ACC12                  :1;
        unsigned ACC13                  :1;
        unsigned ACC14                  :1;
        unsigned ACC15                  :1;
    };
} CRCACCHbits_t;
extern volatile CRCACCHbits_t CRCACCHbits __at(0xF77);
// bitfield macros
#define _CRCACCH_ACC8_POSN                                  0x0
#define _CRCACCH_ACC8_POSITION                              0x0
#define _CRCACCH_ACC8_SIZE                                  0x1
#define _CRCACCH_ACC8_LENGTH                                0x1
#define _CRCACCH_ACC8_MASK                                  0x1
#define _CRCACCH_ACC9_POSN                                  0x1
#define _CRCACCH_ACC9_POSITION                              0x1
#define _CRCACCH_ACC9_SIZE                                  0x1
#define _CRCACCH_ACC9_LENGTH                                0x1
#define _CRCACCH_ACC9_MASK                                  0x2
#define _CRCACCH_ACC10_POSN                                 0x2
#define _CRCACCH_ACC10_POSITION                             0x2
#define _CRCACCH_ACC10_SIZE                                 0x1
#define _CRCACCH_ACC10_LENGTH                               0x1
#define _CRCACCH_ACC10_MASK                                 0x4
#define _CRCACCH_ACC11_POSN                                 0x3
#define _CRCACCH_ACC11_POSITION                             0x3
#define _CRCACCH_ACC11_SIZE                                 0x1
#define _CRCACCH_ACC11_LENGTH                               0x1
#define _CRCACCH_ACC11_MASK                                 0x8
#define _CRCACCH_ACC12_POSN                                 0x4
#define _CRCACCH_ACC12_POSITION                             0x4
#define _CRCACCH_ACC12_SIZE                                 0x1
#define _CRCACCH_ACC12_LENGTH                               0x1
#define _CRCACCH_ACC12_MASK                                 0x10
#define _CRCACCH_ACC13_POSN                                 0x5
#define _CRCACCH_ACC13_POSITION                             0x5
#define _CRCACCH_ACC13_SIZE                                 0x1
#define _CRCACCH_ACC13_LENGTH                               0x1
#define _CRCACCH_ACC13_MASK                                 0x20
#define _CRCACCH_ACC14_POSN                                 0x6
#define _CRCACCH_ACC14_POSITION                             0x6
#define _CRCACCH_ACC14_SIZE                                 0x1
#define _CRCACCH_ACC14_LENGTH                               0x1
#define _CRCACCH_ACC14_MASK                                 0x40
#define _CRCACCH_ACC15_POSN                                 0x7
#define _CRCACCH_ACC15_POSITION                             0x7
#define _CRCACCH_ACC15_SIZE                                 0x1
#define _CRCACCH_ACC15_LENGTH                               0x1
#define _CRCACCH_ACC15_MASK                                 0x80

// Register: CRCSHFT
#define CRCSHFT CRCSHFT
extern volatile unsigned short          CRCSHFT             __at(0xF78);
#ifndef _LIB_BUILD
asm("CRCSHFT equ 0F78h");
#endif

// Register: CRCSHIFTL
#define CRCSHIFTL CRCSHIFTL
extern volatile unsigned char           CRCSHIFTL           __at(0xF78);
#ifndef _LIB_BUILD
asm("CRCSHIFTL equ 0F78h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SHFT0                  :1;
        unsigned SHFT1                  :1;
        unsigned SHFT2                  :1;
        unsigned SHFT3                  :1;
        unsigned SHFT4                  :1;
        unsigned SHFT5                  :1;
        unsigned SHFT6                  :1;
        unsigned SHFT7                  :1;
    };
} CRCSHIFTLbits_t;
extern volatile CRCSHIFTLbits_t CRCSHIFTLbits __at(0xF78);
// bitfield macros
#define _CRCSHIFTL_SHFT0_POSN                               0x0
#define _CRCSHIFTL_SHFT0_POSITION                           0x0
#define _CRCSHIFTL_SHFT0_SIZE                               0x1
#define _CRCSHIFTL_SHFT0_LENGTH                             0x1
#define _CRCSHIFTL_SHFT0_MASK                               0x1
#define _CRCSHIFTL_SHFT1_POSN                               0x1
#define _CRCSHIFTL_SHFT1_POSITION                           0x1
#define _CRCSHIFTL_SHFT1_SIZE                               0x1
#define _CRCSHIFTL_SHFT1_LENGTH                             0x1
#define _CRCSHIFTL_SHFT1_MASK                               0x2
#define _CRCSHIFTL_SHFT2_POSN                               0x2
#define _CRCSHIFTL_SHFT2_POSITION                           0x2
#define _CRCSHIFTL_SHFT2_SIZE                               0x1
#define _CRCSHIFTL_SHFT2_LENGTH                             0x1
#define _CRCSHIFTL_SHFT2_MASK                               0x4
#define _CRCSHIFTL_SHFT3_POSN                               0x3
#define _CRCSHIFTL_SHFT3_POSITION                           0x3
#define _CRCSHIFTL_SHFT3_SIZE                               0x1
#define _CRCSHIFTL_SHFT3_LENGTH                             0x1
#define _CRCSHIFTL_SHFT3_MASK                               0x8
#define _CRCSHIFTL_SHFT4_POSN                               0x4
#define _CRCSHIFTL_SHFT4_POSITION                           0x4
#define _CRCSHIFTL_SHFT4_SIZE                               0x1
#define _CRCSHIFTL_SHFT4_LENGTH                             0x1
#define _CRCSHIFTL_SHFT4_MASK                               0x10
#define _CRCSHIFTL_SHFT5_POSN                               0x5
#define _CRCSHIFTL_SHFT5_POSITION                           0x5
#define _CRCSHIFTL_SHFT5_SIZE                               0x1
#define _CRCSHIFTL_SHFT5_LENGTH                             0x1
#define _CRCSHIFTL_SHFT5_MASK                               0x20
#define _CRCSHIFTL_SHFT6_POSN                               0x6
#define _CRCSHIFTL_SHFT6_POSITION                           0x6
#define _CRCSHIFTL_SHFT6_SIZE                               0x1
#define _CRCSHIFTL_SHFT6_LENGTH                             0x1
#define _CRCSHIFTL_SHFT6_MASK                               0x40
#define _CRCSHIFTL_SHFT7_POSN                               0x7
#define _CRCSHIFTL_SHFT7_POSITION                           0x7
#define _CRCSHIFTL_SHFT7_SIZE                               0x1
#define _CRCSHIFTL_SHFT7_LENGTH                             0x1
#define _CRCSHIFTL_SHFT7_MASK                               0x80

// Register: CRCSHIFTH
#define CRCSHIFTH CRCSHIFTH
extern volatile unsigned char           CRCSHIFTH           __at(0xF79);
#ifndef _LIB_BUILD
asm("CRCSHIFTH equ 0F79h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SHFT8                  :1;
        unsigned SHFT9                  :1;
        unsigned SHFT10                 :1;
        unsigned SHFT11                 :1;
        unsigned SHFT12                 :1;
        unsigned SHFT13                 :1;
        unsigned SHFT14                 :1;
        unsigned SHFT15                 :1;
    };
} CRCSHIFTHbits_t;
extern volatile CRCSHIFTHbits_t CRCSHIFTHbits __at(0xF79);
// bitfield macros
#define _CRCSHIFTH_SHFT8_POSN                               0x0
#define _CRCSHIFTH_SHFT8_POSITION                           0x0
#define _CRCSHIFTH_SHFT8_SIZE                               0x1
#define _CRCSHIFTH_SHFT8_LENGTH                             0x1
#define _CRCSHIFTH_SHFT8_MASK                               0x1
#define _CRCSHIFTH_SHFT9_POSN                               0x1
#define _CRCSHIFTH_SHFT9_POSITION                           0x1
#define _CRCSHIFTH_SHFT9_SIZE                               0x1
#define _CRCSHIFTH_SHFT9_LENGTH                             0x1
#define _CRCSHIFTH_SHFT9_MASK                               0x2
#define _CRCSHIFTH_SHFT10_POSN                              0x2
#define _CRCSHIFTH_SHFT10_POSITION                          0x2
#define _CRCSHIFTH_SHFT10_SIZE                              0x1
#define _CRCSHIFTH_SHFT10_LENGTH                            0x1
#define _CRCSHIFTH_SHFT10_MASK                              0x4
#define _CRCSHIFTH_SHFT11_POSN                              0x3
#define _CRCSHIFTH_SHFT11_POSITION                          0x3
#define _CRCSHIFTH_SHFT11_SIZE                              0x1
#define _CRCSHIFTH_SHFT11_LENGTH                            0x1
#define _CRCSHIFTH_SHFT11_MASK                              0x8
#define _CRCSHIFTH_SHFT12_POSN                              0x4
#define _CRCSHIFTH_SHFT12_POSITION                          0x4
#define _CRCSHIFTH_SHFT12_SIZE                              0x1
#define _CRCSHIFTH_SHFT12_LENGTH                            0x1
#define _CRCSHIFTH_SHFT12_MASK                              0x10
#define _CRCSHIFTH_SHFT13_POSN                              0x5
#define _CRCSHIFTH_SHFT13_POSITION                          0x5
#define _CRCSHIFTH_SHFT13_SIZE                              0x1
#define _CRCSHIFTH_SHFT13_LENGTH                            0x1
#define _CRCSHIFTH_SHFT13_MASK                              0x20
#define _CRCSHIFTH_SHFT14_POSN                              0x6
#define _CRCSHIFTH_SHFT14_POSITION                          0x6
#define _CRCSHIFTH_SHFT14_SIZE                              0x1
#define _CRCSHIFTH_SHFT14_LENGTH                            0x1
#define _CRCSHIFTH_SHFT14_MASK                              0x40
#define _CRCSHIFTH_SHFT15_POSN                              0x7
#define _CRCSHIFTH_SHFT15_POSITION                          0x7
#define _CRCSHIFTH_SHFT15_SIZE                              0x1
#define _CRCSHIFTH_SHFT15_LENGTH                            0x1
#define _CRCSHIFTH_SHFT15_MASK                              0x80

// Register: CRCXOR
#define CRCXOR CRCXOR
extern volatile unsigned short          CRCXOR              __at(0xF7A);
#ifndef _LIB_BUILD
asm("CRCXOR equ 0F7Ah");
#endif

// Register: CRCXORL
#define CRCXORL CRCXORL
extern volatile unsigned char           CRCXORL             __at(0xF7A);
#ifndef _LIB_BUILD
asm("CRCXORL equ 0F7Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :1;
        unsigned X1                     :1;
        unsigned X2                     :1;
        unsigned X3                     :1;
        unsigned X4                     :1;
        unsigned X5                     :1;
        unsigned X6                     :1;
        unsigned X7                     :1;
    };
} CRCXORLbits_t;
extern volatile CRCXORLbits_t CRCXORLbits __at(0xF7A);
// bitfield macros
#define _CRCXORL_X1_POSN                                    0x1
#define _CRCXORL_X1_POSITION                                0x1
#define _CRCXORL_X1_SIZE                                    0x1
#define _CRCXORL_X1_LENGTH                                  0x1
#define _CRCXORL_X1_MASK                                    0x2
#define _CRCXORL_X2_POSN                                    0x2
#define _CRCXORL_X2_POSITION                                0x2
#define _CRCXORL_X2_SIZE                                    0x1
#define _CRCXORL_X2_LENGTH                                  0x1
#define _CRCXORL_X2_MASK                                    0x4
#define _CRCXORL_X3_POSN                                    0x3
#define _CRCXORL_X3_POSITION                                0x3
#define _CRCXORL_X3_SIZE                                    0x1
#define _CRCXORL_X3_LENGTH                                  0x1
#define _CRCXORL_X3_MASK                                    0x8
#define _CRCXORL_X4_POSN                                    0x4
#define _CRCXORL_X4_POSITION                                0x4
#define _CRCXORL_X4_SIZE                                    0x1
#define _CRCXORL_X4_LENGTH                                  0x1
#define _CRCXORL_X4_MASK                                    0x10
#define _CRCXORL_X5_POSN                                    0x5
#define _CRCXORL_X5_POSITION                                0x5
#define _CRCXORL_X5_SIZE                                    0x1
#define _CRCXORL_X5_LENGTH                                  0x1
#define _CRCXORL_X5_MASK                                    0x20
#define _CRCXORL_X6_POSN                                    0x6
#define _CRCXORL_X6_POSITION                                0x6
#define _CRCXORL_X6_SIZE                                    0x1
#define _CRCXORL_X6_LENGTH                                  0x1
#define _CRCXORL_X6_MASK                                    0x40
#define _CRCXORL_X7_POSN                                    0x7
#define _CRCXORL_X7_POSITION                                0x7
#define _CRCXORL_X7_SIZE                                    0x1
#define _CRCXORL_X7_LENGTH                                  0x1
#define _CRCXORL_X7_MASK                                    0x80

// Register: CRCXORH
#define CRCXORH CRCXORH
extern volatile unsigned char           CRCXORH             __at(0xF7B);
#ifndef _LIB_BUILD
asm("CRCXORH equ 0F7Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned X8                     :1;
        unsigned X9                     :1;
        unsigned X10                    :1;
        unsigned X11                    :1;
        unsigned X12                    :1;
        unsigned X13                    :1;
        unsigned X14                    :1;
        unsigned X15                    :1;
    };
} CRCXORHbits_t;
extern volatile CRCXORHbits_t CRCXORHbits __at(0xF7B);
// bitfield macros
#define _CRCXORH_X8_POSN                                    0x0
#define _CRCXORH_X8_POSITION                                0x0
#define _CRCXORH_X8_SIZE                                    0x1
#define _CRCXORH_X8_LENGTH                                  0x1
#define _CRCXORH_X8_MASK                                    0x1
#define _CRCXORH_X9_POSN                                    0x1
#define _CRCXORH_X9_POSITION                                0x1
#define _CRCXORH_X9_SIZE                                    0x1
#define _CRCXORH_X9_LENGTH                                  0x1
#define _CRCXORH_X9_MASK                                    0x2
#define _CRCXORH_X10_POSN                                   0x2
#define _CRCXORH_X10_POSITION                               0x2
#define _CRCXORH_X10_SIZE                                   0x1
#define _CRCXORH_X10_LENGTH                                 0x1
#define _CRCXORH_X10_MASK                                   0x4
#define _CRCXORH_X11_POSN                                   0x3
#define _CRCXORH_X11_POSITION                               0x3
#define _CRCXORH_X11_SIZE                                   0x1
#define _CRCXORH_X11_LENGTH                                 0x1
#define _CRCXORH_X11_MASK                                   0x8
#define _CRCXORH_X12_POSN                                   0x4
#define _CRCXORH_X12_POSITION                               0x4
#define _CRCXORH_X12_SIZE                                   0x1
#define _CRCXORH_X12_LENGTH                                 0x1
#define _CRCXORH_X12_MASK                                   0x10
#define _CRCXORH_X13_POSN                                   0x5
#define _CRCXORH_X13_POSITION                               0x5
#define _CRCXORH_X13_SIZE                                   0x1
#define _CRCXORH_X13_LENGTH                                 0x1
#define _CRCXORH_X13_MASK                                   0x20
#define _CRCXORH_X14_POSN                                   0x6
#define _CRCXORH_X14_POSITION                               0x6
#define _CRCXORH_X14_SIZE                                   0x1
#define _CRCXORH_X14_LENGTH                                 0x1
#define _CRCXORH_X14_MASK                                   0x40
#define _CRCXORH_X15_POSN                                   0x7
#define _CRCXORH_X15_POSITION                               0x7
#define _CRCXORH_X15_SIZE                                   0x1
#define _CRCXORH_X15_LENGTH                                 0x1
#define _CRCXORH_X15_MASK                                   0x80

// Register: CRCCON0
#define CRCCON0 CRCCON0
extern volatile unsigned char           CRCCON0             __at(0xF7C);
#ifndef _LIB_BUILD
asm("CRCCON0 equ 0F7Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FULL                   :1;
        unsigned SHIFTM                 :1;
        unsigned                        :2;
        unsigned ACCM                   :1;
        unsigned BUSY                   :1;
        unsigned CRCGO                  :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned                        :7;
        unsigned CRCEN                  :1;
    };
} CRCCON0bits_t;
extern volatile CRCCON0bits_t CRCCON0bits __at(0xF7C);
// bitfield macros
#define _CRCCON0_FULL_POSN                                  0x0
#define _CRCCON0_FULL_POSITION                              0x0
#define _CRCCON0_FULL_SIZE                                  0x1
#define _CRCCON0_FULL_LENGTH                                0x1
#define _CRCCON0_FULL_MASK                                  0x1
#define _CRCCON0_SHIFTM_POSN                                0x1
#define _CRCCON0_SHIFTM_POSITION                            0x1
#define _CRCCON0_SHIFTM_SIZE                                0x1
#define _CRCCON0_SHIFTM_LENGTH                              0x1
#define _CRCCON0_SHIFTM_MASK                                0x2
#define _CRCCON0_ACCM_POSN                                  0x4
#define _CRCCON0_ACCM_POSITION                              0x4
#define _CRCCON0_ACCM_SIZE                                  0x1
#define _CRCCON0_ACCM_LENGTH                                0x1
#define _CRCCON0_ACCM_MASK                                  0x10
#define _CRCCON0_BUSY_POSN                                  0x5
#define _CRCCON0_BUSY_POSITION                              0x5
#define _CRCCON0_BUSY_SIZE                                  0x1
#define _CRCCON0_BUSY_LENGTH                                0x1
#define _CRCCON0_BUSY_MASK                                  0x20
#define _CRCCON0_CRCGO_POSN                                 0x6
#define _CRCCON0_CRCGO_POSITION                             0x6
#define _CRCCON0_CRCGO_SIZE                                 0x1
#define _CRCCON0_CRCGO_LENGTH                               0x1
#define _CRCCON0_CRCGO_MASK                                 0x40
#define _CRCCON0_EN_POSN                                    0x7
#define _CRCCON0_EN_POSITION                                0x7
#define _CRCCON0_EN_SIZE                                    0x1
#define _CRCCON0_EN_LENGTH                                  0x1
#define _CRCCON0_EN_MASK                                    0x80
#define _CRCCON0_CRCEN_POSN                                 0x7
#define _CRCCON0_CRCEN_POSITION                             0x7
#define _CRCCON0_CRCEN_SIZE                                 0x1
#define _CRCCON0_CRCEN_LENGTH                               0x1
#define _CRCCON0_CRCEN_MASK                                 0x80

// Register: CRCCON1
#define CRCCON1 CRCCON1
extern volatile unsigned char           CRCCON1             __at(0xF7D);
#ifndef _LIB_BUILD
asm("CRCCON1 equ 0F7Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PLEN                   :4;
        unsigned DLEN                   :4;
    };
    struct {
        unsigned PLEN0                  :1;
        unsigned PLEN1                  :1;
        unsigned PLEN2                  :1;
        unsigned PLEN3                  :1;
        unsigned DLEN0                  :1;
        unsigned DLEN1                  :1;
        unsigned DLEN2                  :1;
        unsigned DLEN3                  :1;
    };
} CRCCON1bits_t;
extern volatile CRCCON1bits_t CRCCON1bits __at(0xF7D);
// bitfield macros
#define _CRCCON1_PLEN_POSN                                  0x0
#define _CRCCON1_PLEN_POSITION                              0x0
#define _CRCCON1_PLEN_SIZE                                  0x4
#define _CRCCON1_PLEN_LENGTH                                0x4
#define _CRCCON1_PLEN_MASK                                  0xF
#define _CRCCON1_DLEN_POSN                                  0x4
#define _CRCCON1_DLEN_POSITION                              0x4
#define _CRCCON1_DLEN_SIZE                                  0x4
#define _CRCCON1_DLEN_LENGTH                                0x4
#define _CRCCON1_DLEN_MASK                                  0xF0
#define _CRCCON1_PLEN0_POSN                                 0x0
#define _CRCCON1_PLEN0_POSITION                             0x0
#define _CRCCON1_PLEN0_SIZE                                 0x1
#define _CRCCON1_PLEN0_LENGTH                               0x1
#define _CRCCON1_PLEN0_MASK                                 0x1
#define _CRCCON1_PLEN1_POSN                                 0x1
#define _CRCCON1_PLEN1_POSITION                             0x1
#define _CRCCON1_PLEN1_SIZE                                 0x1
#define _CRCCON1_PLEN1_LENGTH                               0x1
#define _CRCCON1_PLEN1_MASK                                 0x2
#define _CRCCON1_PLEN2_POSN                                 0x2
#define _CRCCON1_PLEN2_POSITION                             0x2
#define _CRCCON1_PLEN2_SIZE                                 0x1
#define _CRCCON1_PLEN2_LENGTH                               0x1
#define _CRCCON1_PLEN2_MASK                                 0x4
#define _CRCCON1_PLEN3_POSN                                 0x3
#define _CRCCON1_PLEN3_POSITION                             0x3
#define _CRCCON1_PLEN3_SIZE                                 0x1
#define _CRCCON1_PLEN3_LENGTH                               0x1
#define _CRCCON1_PLEN3_MASK                                 0x8
#define _CRCCON1_DLEN0_POSN                                 0x4
#define _CRCCON1_DLEN0_POSITION                             0x4
#define _CRCCON1_DLEN0_SIZE                                 0x1
#define _CRCCON1_DLEN0_LENGTH                               0x1
#define _CRCCON1_DLEN0_MASK                                 0x10
#define _CRCCON1_DLEN1_POSN                                 0x5
#define _CRCCON1_DLEN1_POSITION                             0x5
#define _CRCCON1_DLEN1_SIZE                                 0x1
#define _CRCCON1_DLEN1_LENGTH                               0x1
#define _CRCCON1_DLEN1_MASK                                 0x20
#define _CRCCON1_DLEN2_POSN                                 0x6
#define _CRCCON1_DLEN2_POSITION                             0x6
#define _CRCCON1_DLEN2_SIZE                                 0x1
#define _CRCCON1_DLEN2_LENGTH                               0x1
#define _CRCCON1_DLEN2_MASK                                 0x40
#define _CRCCON1_DLEN3_POSN                                 0x7
#define _CRCCON1_DLEN3_POSITION                             0x7
#define _CRCCON1_DLEN3_SIZE                                 0x1
#define _CRCCON1_DLEN3_LENGTH                               0x1
#define _CRCCON1_DLEN3_MASK                                 0x80

// Register: NVMADR
#define NVMADR NVMADR
extern volatile unsigned char           NVMADR              __at(0xF7E);
#ifndef _LIB_BUILD
asm("NVMADR equ 0F7Eh");
#endif
// aliases
extern volatile unsigned char           NVMADRL             __at(0xF7E);
#ifndef _LIB_BUILD
asm("NVMADRL equ 0F7Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADR                    :8;
    };
    struct {
        unsigned ADR0                   :1;
        unsigned ADR1                   :1;
        unsigned ADR2                   :1;
        unsigned ADR3                   :1;
        unsigned ADR4                   :1;
        unsigned ADR5                   :1;
        unsigned ADR6                   :1;
        unsigned ADR7                   :1;
    };
    struct {
        unsigned NVMADR0                :1;
        unsigned NVMADR1                :1;
        unsigned NVMADR2                :1;
        unsigned NVMADR3                :1;
        unsigned NVMADR4                :1;
        unsigned NVMADR5                :1;
        unsigned NVMADR6                :1;
        unsigned NVMADR7                :1;
    };
    struct {
        unsigned ADRL                   :8;
    };
} NVMADRbits_t;
extern volatile NVMADRbits_t NVMADRbits __at(0xF7E);
// bitfield macros
#define _NVMADR_ADR_POSN                                    0x0
#define _NVMADR_ADR_POSITION                                0x0
#define _NVMADR_ADR_SIZE                                    0x8
#define _NVMADR_ADR_LENGTH                                  0x8
#define _NVMADR_ADR_MASK                                    0xFF
#define _NVMADR_ADR0_POSN                                   0x0
#define _NVMADR_ADR0_POSITION                               0x0
#define _NVMADR_ADR0_SIZE                                   0x1
#define _NVMADR_ADR0_LENGTH                                 0x1
#define _NVMADR_ADR0_MASK                                   0x1
#define _NVMADR_ADR1_POSN                                   0x1
#define _NVMADR_ADR1_POSITION                               0x1
#define _NVMADR_ADR1_SIZE                                   0x1
#define _NVMADR_ADR1_LENGTH                                 0x1
#define _NVMADR_ADR1_MASK                                   0x2
#define _NVMADR_ADR2_POSN                                   0x2
#define _NVMADR_ADR2_POSITION                               0x2
#define _NVMADR_ADR2_SIZE                                   0x1
#define _NVMADR_ADR2_LENGTH                                 0x1
#define _NVMADR_ADR2_MASK                                   0x4
#define _NVMADR_ADR3_POSN                                   0x3
#define _NVMADR_ADR3_POSITION                               0x3
#define _NVMADR_ADR3_SIZE                                   0x1
#define _NVMADR_ADR3_LENGTH                                 0x1
#define _NVMADR_ADR3_MASK                                   0x8
#define _NVMADR_ADR4_POSN                                   0x4
#define _NVMADR_ADR4_POSITION                               0x4
#define _NVMADR_ADR4_SIZE                                   0x1
#define _NVMADR_ADR4_LENGTH                                 0x1
#define _NVMADR_ADR4_MASK                                   0x10
#define _NVMADR_ADR5_POSN                                   0x5
#define _NVMADR_ADR5_POSITION                               0x5
#define _NVMADR_ADR5_SIZE                                   0x1
#define _NVMADR_ADR5_LENGTH                                 0x1
#define _NVMADR_ADR5_MASK                                   0x20
#define _NVMADR_ADR6_POSN                                   0x6
#define _NVMADR_ADR6_POSITION                               0x6
#define _NVMADR_ADR6_SIZE                                   0x1
#define _NVMADR_ADR6_LENGTH                                 0x1
#define _NVMADR_ADR6_MASK                                   0x40
#define _NVMADR_ADR7_POSN                                   0x7
#define _NVMADR_ADR7_POSITION                               0x7
#define _NVMADR_ADR7_SIZE                                   0x1
#define _NVMADR_ADR7_LENGTH                                 0x1
#define _NVMADR_ADR7_MASK                                   0x80
#define _NVMADR_NVMADR0_POSN                                0x0
#define _NVMADR_NVMADR0_POSITION                            0x0
#define _NVMADR_NVMADR0_SIZE                                0x1
#define _NVMADR_NVMADR0_LENGTH                              0x1
#define _NVMADR_NVMADR0_MASK                                0x1
#define _NVMADR_NVMADR1_POSN                                0x1
#define _NVMADR_NVMADR1_POSITION                            0x1
#define _NVMADR_NVMADR1_SIZE                                0x1
#define _NVMADR_NVMADR1_LENGTH                              0x1
#define _NVMADR_NVMADR1_MASK                                0x2
#define _NVMADR_NVMADR2_POSN                                0x2
#define _NVMADR_NVMADR2_POSITION                            0x2
#define _NVMADR_NVMADR2_SIZE                                0x1
#define _NVMADR_NVMADR2_LENGTH                              0x1
#define _NVMADR_NVMADR2_MASK                                0x4
#define _NVMADR_NVMADR3_POSN                                0x3
#define _NVMADR_NVMADR3_POSITION                            0x3
#define _NVMADR_NVMADR3_SIZE                                0x1
#define _NVMADR_NVMADR3_LENGTH                              0x1
#define _NVMADR_NVMADR3_MASK                                0x8
#define _NVMADR_NVMADR4_POSN                                0x4
#define _NVMADR_NVMADR4_POSITION                            0x4
#define _NVMADR_NVMADR4_SIZE                                0x1
#define _NVMADR_NVMADR4_LENGTH                              0x1
#define _NVMADR_NVMADR4_MASK                                0x10
#define _NVMADR_NVMADR5_POSN                                0x5
#define _NVMADR_NVMADR5_POSITION                            0x5
#define _NVMADR_NVMADR5_SIZE                                0x1
#define _NVMADR_NVMADR5_LENGTH                              0x1
#define _NVMADR_NVMADR5_MASK                                0x20
#define _NVMADR_NVMADR6_POSN                                0x6
#define _NVMADR_NVMADR6_POSITION                            0x6
#define _NVMADR_NVMADR6_SIZE                                0x1
#define _NVMADR_NVMADR6_LENGTH                              0x1
#define _NVMADR_NVMADR6_MASK                                0x40
#define _NVMADR_NVMADR7_POSN                                0x7
#define _NVMADR_NVMADR7_POSITION                            0x7
#define _NVMADR_NVMADR7_SIZE                                0x1
#define _NVMADR_NVMADR7_LENGTH                              0x1
#define _NVMADR_NVMADR7_MASK                                0x80
#define _NVMADR_ADRL_POSN                                   0x0
#define _NVMADR_ADRL_POSITION                               0x0
#define _NVMADR_ADRL_SIZE                                   0x8
#define _NVMADR_ADRL_LENGTH                                 0x8
#define _NVMADR_ADRL_MASK                                   0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned ADR                    :8;
    };
    struct {
        unsigned ADR0                   :1;
        unsigned ADR1                   :1;
        unsigned ADR2                   :1;
        unsigned ADR3                   :1;
        unsigned ADR4                   :1;
        unsigned ADR5                   :1;
        unsigned ADR6                   :1;
        unsigned ADR7                   :1;
    };
    struct {
        unsigned NVMADR0                :1;
        unsigned NVMADR1                :1;
        unsigned NVMADR2                :1;
        unsigned NVMADR3                :1;
        unsigned NVMADR4                :1;
        unsigned NVMADR5                :1;
        unsigned NVMADR6                :1;
        unsigned NVMADR7                :1;
    };
    struct {
        unsigned ADRL                   :8;
    };
} NVMADRLbits_t;
extern volatile NVMADRLbits_t NVMADRLbits __at(0xF7E);
// bitfield macros
#define _NVMADRL_ADR_POSN                                   0x0
#define _NVMADRL_ADR_POSITION                               0x0
#define _NVMADRL_ADR_SIZE                                   0x8
#define _NVMADRL_ADR_LENGTH                                 0x8
#define _NVMADRL_ADR_MASK                                   0xFF
#define _NVMADRL_ADR0_POSN                                  0x0
#define _NVMADRL_ADR0_POSITION                              0x0
#define _NVMADRL_ADR0_SIZE                                  0x1
#define _NVMADRL_ADR0_LENGTH                                0x1
#define _NVMADRL_ADR0_MASK                                  0x1
#define _NVMADRL_ADR1_POSN                                  0x1
#define _NVMADRL_ADR1_POSITION                              0x1
#define _NVMADRL_ADR1_SIZE                                  0x1
#define _NVMADRL_ADR1_LENGTH                                0x1
#define _NVMADRL_ADR1_MASK                                  0x2
#define _NVMADRL_ADR2_POSN                                  0x2
#define _NVMADRL_ADR2_POSITION                              0x2
#define _NVMADRL_ADR2_SIZE                                  0x1
#define _NVMADRL_ADR2_LENGTH                                0x1
#define _NVMADRL_ADR2_MASK                                  0x4
#define _NVMADRL_ADR3_POSN                                  0x3
#define _NVMADRL_ADR3_POSITION                              0x3
#define _NVMADRL_ADR3_SIZE                                  0x1
#define _NVMADRL_ADR3_LENGTH                                0x1
#define _NVMADRL_ADR3_MASK                                  0x8
#define _NVMADRL_ADR4_POSN                                  0x4
#define _NVMADRL_ADR4_POSITION                              0x4
#define _NVMADRL_ADR4_SIZE                                  0x1
#define _NVMADRL_ADR4_LENGTH                                0x1
#define _NVMADRL_ADR4_MASK                                  0x10
#define _NVMADRL_ADR5_POSN                                  0x5
#define _NVMADRL_ADR5_POSITION                              0x5
#define _NVMADRL_ADR5_SIZE                                  0x1
#define _NVMADRL_ADR5_LENGTH                                0x1
#define _NVMADRL_ADR5_MASK                                  0x20
#define _NVMADRL_ADR6_POSN                                  0x6
#define _NVMADRL_ADR6_POSITION                              0x6
#define _NVMADRL_ADR6_SIZE                                  0x1
#define _NVMADRL_ADR6_LENGTH                                0x1
#define _NVMADRL_ADR6_MASK                                  0x40
#define _NVMADRL_ADR7_POSN                                  0x7
#define _NVMADRL_ADR7_POSITION                              0x7
#define _NVMADRL_ADR7_SIZE                                  0x1
#define _NVMADRL_ADR7_LENGTH                                0x1
#define _NVMADRL_ADR7_MASK                                  0x80
#define _NVMADRL_NVMADR0_POSN                               0x0
#define _NVMADRL_NVMADR0_POSITION                           0x0
#define _NVMADRL_NVMADR0_SIZE                               0x1
#define _NVMADRL_NVMADR0_LENGTH                             0x1
#define _NVMADRL_NVMADR0_MASK                               0x1
#define _NVMADRL_NVMADR1_POSN                               0x1
#define _NVMADRL_NVMADR1_POSITION                           0x1
#define _NVMADRL_NVMADR1_SIZE                               0x1
#define _NVMADRL_NVMADR1_LENGTH                             0x1
#define _NVMADRL_NVMADR1_MASK                               0x2
#define _NVMADRL_NVMADR2_POSN                               0x2
#define _NVMADRL_NVMADR2_POSITION                           0x2
#define _NVMADRL_NVMADR2_SIZE                               0x1
#define _NVMADRL_NVMADR2_LENGTH                             0x1
#define _NVMADRL_NVMADR2_MASK                               0x4
#define _NVMADRL_NVMADR3_POSN                               0x3
#define _NVMADRL_NVMADR3_POSITION                           0x3
#define _NVMADRL_NVMADR3_SIZE                               0x1
#define _NVMADRL_NVMADR3_LENGTH                             0x1
#define _NVMADRL_NVMADR3_MASK                               0x8
#define _NVMADRL_NVMADR4_POSN                               0x4
#define _NVMADRL_NVMADR4_POSITION                           0x4
#define _NVMADRL_NVMADR4_SIZE                               0x1
#define _NVMADRL_NVMADR4_LENGTH                             0x1
#define _NVMADRL_NVMADR4_MASK                               0x10
#define _NVMADRL_NVMADR5_POSN                               0x5
#define _NVMADRL_NVMADR5_POSITION                           0x5
#define _NVMADRL_NVMADR5_SIZE                               0x1
#define _NVMADRL_NVMADR5_LENGTH                             0x1
#define _NVMADRL_NVMADR5_MASK                               0x20
#define _NVMADRL_NVMADR6_POSN                               0x6
#define _NVMADRL_NVMADR6_POSITION                           0x6
#define _NVMADRL_NVMADR6_SIZE                               0x1
#define _NVMADRL_NVMADR6_LENGTH                             0x1
#define _NVMADRL_NVMADR6_MASK                               0x40
#define _NVMADRL_NVMADR7_POSN                               0x7
#define _NVMADRL_NVMADR7_POSITION                           0x7
#define _NVMADRL_NVMADR7_SIZE                               0x1
#define _NVMADRL_NVMADR7_LENGTH                             0x1
#define _NVMADRL_NVMADR7_MASK                               0x80
#define _NVMADRL_ADRL_POSN                                  0x0
#define _NVMADRL_ADRL_POSITION                              0x0
#define _NVMADRL_ADRL_SIZE                                  0x8
#define _NVMADRL_ADRL_LENGTH                                0x8
#define _NVMADRL_ADRL_MASK                                  0xFF

// Register: NVMDAT
#define NVMDAT NVMDAT
extern volatile unsigned char           NVMDAT              __at(0xF80);
#ifndef _LIB_BUILD
asm("NVMDAT equ 0F80h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NVMDAT                 :8;
    };
    struct {
        unsigned NVMDAT0                :1;
        unsigned NVMDAT1                :1;
        unsigned NVMDAT2                :1;
        unsigned NVMDAT3                :1;
        unsigned NVMDAT4                :1;
        unsigned NVMDAT5                :1;
        unsigned NVMDAT6                :1;
        unsigned NVMDAT7                :1;
    };
} NVMDATbits_t;
extern volatile NVMDATbits_t NVMDATbits __at(0xF80);
// bitfield macros
#define _NVMDAT_NVMDAT_POSN                                 0x0
#define _NVMDAT_NVMDAT_POSITION                             0x0
#define _NVMDAT_NVMDAT_SIZE                                 0x8
#define _NVMDAT_NVMDAT_LENGTH                               0x8
#define _NVMDAT_NVMDAT_MASK                                 0xFF
#define _NVMDAT_NVMDAT0_POSN                                0x0
#define _NVMDAT_NVMDAT0_POSITION                            0x0
#define _NVMDAT_NVMDAT0_SIZE                                0x1
#define _NVMDAT_NVMDAT0_LENGTH                              0x1
#define _NVMDAT_NVMDAT0_MASK                                0x1
#define _NVMDAT_NVMDAT1_POSN                                0x1
#define _NVMDAT_NVMDAT1_POSITION                            0x1
#define _NVMDAT_NVMDAT1_SIZE                                0x1
#define _NVMDAT_NVMDAT1_LENGTH                              0x1
#define _NVMDAT_NVMDAT1_MASK                                0x2
#define _NVMDAT_NVMDAT2_POSN                                0x2
#define _NVMDAT_NVMDAT2_POSITION                            0x2
#define _NVMDAT_NVMDAT2_SIZE                                0x1
#define _NVMDAT_NVMDAT2_LENGTH                              0x1
#define _NVMDAT_NVMDAT2_MASK                                0x4
#define _NVMDAT_NVMDAT3_POSN                                0x3
#define _NVMDAT_NVMDAT3_POSITION                            0x3
#define _NVMDAT_NVMDAT3_SIZE                                0x1
#define _NVMDAT_NVMDAT3_LENGTH                              0x1
#define _NVMDAT_NVMDAT3_MASK                                0x8
#define _NVMDAT_NVMDAT4_POSN                                0x4
#define _NVMDAT_NVMDAT4_POSITION                            0x4
#define _NVMDAT_NVMDAT4_SIZE                                0x1
#define _NVMDAT_NVMDAT4_LENGTH                              0x1
#define _NVMDAT_NVMDAT4_MASK                                0x10
#define _NVMDAT_NVMDAT5_POSN                                0x5
#define _NVMDAT_NVMDAT5_POSITION                            0x5
#define _NVMDAT_NVMDAT5_SIZE                                0x1
#define _NVMDAT_NVMDAT5_LENGTH                              0x1
#define _NVMDAT_NVMDAT5_MASK                                0x20
#define _NVMDAT_NVMDAT6_POSN                                0x6
#define _NVMDAT_NVMDAT6_POSITION                            0x6
#define _NVMDAT_NVMDAT6_SIZE                                0x1
#define _NVMDAT_NVMDAT6_LENGTH                              0x1
#define _NVMDAT_NVMDAT6_MASK                                0x40
#define _NVMDAT_NVMDAT7_POSN                                0x7
#define _NVMDAT_NVMDAT7_POSITION                            0x7
#define _NVMDAT_NVMDAT7_SIZE                                0x1
#define _NVMDAT_NVMDAT7_LENGTH                              0x1
#define _NVMDAT_NVMDAT7_MASK                                0x80

// Register: NVMCON1
#define NVMCON1 NVMCON1
extern volatile unsigned char           NVMCON1             __at(0xF81);
#ifndef _LIB_BUILD
asm("NVMCON1 equ 0F81h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RD                     :1;
        unsigned WR                     :1;
        unsigned WREN                   :1;
        unsigned WRERR                  :1;
        unsigned FREE                   :1;
        unsigned                        :1;
        unsigned NVMREG                 :2;
    };
    struct {
        unsigned                        :6;
        unsigned NVMREG0                :1;
        unsigned NVMREG1                :1;
    };
} NVMCON1bits_t;
extern volatile NVMCON1bits_t NVMCON1bits __at(0xF81);
// bitfield macros
#define _NVMCON1_RD_POSN                                    0x0
#define _NVMCON1_RD_POSITION                                0x0
#define _NVMCON1_RD_SIZE                                    0x1
#define _NVMCON1_RD_LENGTH                                  0x1
#define _NVMCON1_RD_MASK                                    0x1
#define _NVMCON1_WR_POSN                                    0x1
#define _NVMCON1_WR_POSITION                                0x1
#define _NVMCON1_WR_SIZE                                    0x1
#define _NVMCON1_WR_LENGTH                                  0x1
#define _NVMCON1_WR_MASK                                    0x2
#define _NVMCON1_WREN_POSN                                  0x2
#define _NVMCON1_WREN_POSITION                              0x2
#define _NVMCON1_WREN_SIZE                                  0x1
#define _NVMCON1_WREN_LENGTH                                0x1
#define _NVMCON1_WREN_MASK                                  0x4
#define _NVMCON1_WRERR_POSN                                 0x3
#define _NVMCON1_WRERR_POSITION                             0x3
#define _NVMCON1_WRERR_SIZE                                 0x1
#define _NVMCON1_WRERR_LENGTH                               0x1
#define _NVMCON1_WRERR_MASK                                 0x8
#define _NVMCON1_FREE_POSN                                  0x4
#define _NVMCON1_FREE_POSITION                              0x4
#define _NVMCON1_FREE_SIZE                                  0x1
#define _NVMCON1_FREE_LENGTH                                0x1
#define _NVMCON1_FREE_MASK                                  0x10
#define _NVMCON1_NVMREG_POSN                                0x6
#define _NVMCON1_NVMREG_POSITION                            0x6
#define _NVMCON1_NVMREG_SIZE                                0x2
#define _NVMCON1_NVMREG_LENGTH                              0x2
#define _NVMCON1_NVMREG_MASK                                0xC0
#define _NVMCON1_NVMREG0_POSN                               0x6
#define _NVMCON1_NVMREG0_POSITION                           0x6
#define _NVMCON1_NVMREG0_SIZE                               0x1
#define _NVMCON1_NVMREG0_LENGTH                             0x1
#define _NVMCON1_NVMREG0_MASK                               0x40
#define _NVMCON1_NVMREG1_POSN                               0x7
#define _NVMCON1_NVMREG1_POSITION                           0x7
#define _NVMCON1_NVMREG1_SIZE                               0x1
#define _NVMCON1_NVMREG1_LENGTH                             0x1
#define _NVMCON1_NVMREG1_MASK                               0x80

// Register: NVMCON2
#define NVMCON2 NVMCON2
extern volatile unsigned char           NVMCON2             __at(0xF82);
#ifndef _LIB_BUILD
asm("NVMCON2 equ 0F82h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NVMCON2                :8;
    };
} NVMCON2bits_t;
extern volatile NVMCON2bits_t NVMCON2bits __at(0xF82);
// bitfield macros
#define _NVMCON2_NVMCON2_POSN                               0x0
#define _NVMCON2_NVMCON2_POSITION                           0x0
#define _NVMCON2_NVMCON2_SIZE                               0x8
#define _NVMCON2_NVMCON2_LENGTH                             0x8
#define _NVMCON2_NVMCON2_MASK                               0xFF

// Register: LATA
#define LATA LATA
extern volatile unsigned char           LATA                __at(0xF83);
#ifndef _LIB_BUILD
asm("LATA equ 0F83h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LATA0                  :1;
        unsigned LATA1                  :1;
        unsigned LATA2                  :1;
        unsigned LATA3                  :1;
        unsigned LATA4                  :1;
        unsigned LATA5                  :1;
        unsigned LATA6                  :1;
        unsigned LATA7                  :1;
    };
    struct {
        unsigned LA0                    :1;
        unsigned LA1                    :1;
        unsigned LA2                    :1;
        unsigned LA3                    :1;
        unsigned LA4                    :1;
        unsigned LA5                    :1;
        unsigned LA6                    :1;
        unsigned LA7                    :1;
    };
} LATAbits_t;
extern volatile LATAbits_t LATAbits __at(0xF83);
// bitfield macros
#define _LATA_LATA0_POSN                                    0x0
#define _LATA_LATA0_POSITION                                0x0
#define _LATA_LATA0_SIZE                                    0x1
#define _LATA_LATA0_LENGTH                                  0x1
#define _LATA_LATA0_MASK                                    0x1
#define _LATA_LATA1_POSN                                    0x1
#define _LATA_LATA1_POSITION                                0x1
#define _LATA_LATA1_SIZE                                    0x1
#define _LATA_LATA1_LENGTH                                  0x1
#define _LATA_LATA1_MASK                                    0x2
#define _LATA_LATA2_POSN                                    0x2
#define _LATA_LATA2_POSITION                                0x2
#define _LATA_LATA2_SIZE                                    0x1
#define _LATA_LATA2_LENGTH                                  0x1
#define _LATA_LATA2_MASK                                    0x4
#define _LATA_LATA3_POSN                                    0x3
#define _LATA_LATA3_POSITION                                0x3
#define _LATA_LATA3_SIZE                                    0x1
#define _LATA_LATA3_LENGTH                                  0x1
#define _LATA_LATA3_MASK                                    0x8
#define _LATA_LATA4_POSN                                    0x4
#define _LATA_LATA4_POSITION                                0x4
#define _LATA_LATA4_SIZE                                    0x1
#define _LATA_LATA4_LENGTH                                  0x1
#define _LATA_LATA4_MASK                                    0x10
#define _LATA_LATA5_POSN                                    0x5
#define _LATA_LATA5_POSITION                                0x5
#define _LATA_LATA5_SIZE                                    0x1
#define _LATA_LATA5_LENGTH                                  0x1
#define _LATA_LATA5_MASK                                    0x20
#define _LATA_LATA6_POSN                                    0x6
#define _LATA_LATA6_POSITION                                0x6
#define _LATA_LATA6_SIZE                                    0x1
#define _LATA_LATA6_LENGTH                                  0x1
#define _LATA_LATA6_MASK                                    0x40
#define _LATA_LATA7_POSN                                    0x7
#define _LATA_LATA7_POSITION                                0x7
#define _LATA_LATA7_SIZE                                    0x1
#define _LATA_LATA7_LENGTH                                  0x1
#define _LATA_LATA7_MASK                                    0x80
#define _LATA_LA0_POSN                                      0x0
#define _LATA_LA0_POSITION                                  0x0
#define _LATA_LA0_SIZE                                      0x1
#define _LATA_LA0_LENGTH                                    0x1
#define _LATA_LA0_MASK                                      0x1
#define _LATA_LA1_POSN                                      0x1
#define _LATA_LA1_POSITION                                  0x1
#define _LATA_LA1_SIZE                                      0x1
#define _LATA_LA1_LENGTH                                    0x1
#define _LATA_LA1_MASK                                      0x2
#define _LATA_LA2_POSN                                      0x2
#define _LATA_LA2_POSITION                                  0x2
#define _LATA_LA2_SIZE                                      0x1
#define _LATA_LA2_LENGTH                                    0x1
#define _LATA_LA2_MASK                                      0x4
#define _LATA_LA3_POSN                                      0x3
#define _LATA_LA3_POSITION                                  0x3
#define _LATA_LA3_SIZE                                      0x1
#define _LATA_LA3_LENGTH                                    0x1
#define _LATA_LA3_MASK                                      0x8
#define _LATA_LA4_POSN                                      0x4
#define _LATA_LA4_POSITION                                  0x4
#define _LATA_LA4_SIZE                                      0x1
#define _LATA_LA4_LENGTH                                    0x1
#define _LATA_LA4_MASK                                      0x10
#define _LATA_LA5_POSN                                      0x5
#define _LATA_LA5_POSITION                                  0x5
#define _LATA_LA5_SIZE                                      0x1
#define _LATA_LA5_LENGTH                                    0x1
#define _LATA_LA5_MASK                                      0x20
#define _LATA_LA6_POSN                                      0x6
#define _LATA_LA6_POSITION                                  0x6
#define _LATA_LA6_SIZE                                      0x1
#define _LATA_LA6_LENGTH                                    0x1
#define _LATA_LA6_MASK                                      0x40
#define _LATA_LA7_POSN                                      0x7
#define _LATA_LA7_POSITION                                  0x7
#define _LATA_LA7_SIZE                                      0x1
#define _LATA_LA7_LENGTH                                    0x1
#define _LATA_LA7_MASK                                      0x80

// Register: LATB
#define LATB LATB
extern volatile unsigned char           LATB                __at(0xF84);
#ifndef _LIB_BUILD
asm("LATB equ 0F84h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LATB0                  :1;
        unsigned LATB1                  :1;
        unsigned LATB2                  :1;
        unsigned LATB3                  :1;
        unsigned LATB4                  :1;
        unsigned LATB5                  :1;
        unsigned LATB6                  :1;
        unsigned LATB7                  :1;
    };
    struct {
        unsigned LB0                    :1;
        unsigned LB1                    :1;
        unsigned LB2                    :1;
        unsigned LB3                    :1;
        unsigned LB4                    :1;
        unsigned LB5                    :1;
        unsigned LB6                    :1;
        unsigned LB7                    :1;
    };
} LATBbits_t;
extern volatile LATBbits_t LATBbits __at(0xF84);
// bitfield macros
#define _LATB_LATB0_POSN                                    0x0
#define _LATB_LATB0_POSITION                                0x0
#define _LATB_LATB0_SIZE                                    0x1
#define _LATB_LATB0_LENGTH                                  0x1
#define _LATB_LATB0_MASK                                    0x1
#define _LATB_LATB1_POSN                                    0x1
#define _LATB_LATB1_POSITION                                0x1
#define _LATB_LATB1_SIZE                                    0x1
#define _LATB_LATB1_LENGTH                                  0x1
#define _LATB_LATB1_MASK                                    0x2
#define _LATB_LATB2_POSN                                    0x2
#define _LATB_LATB2_POSITION                                0x2
#define _LATB_LATB2_SIZE                                    0x1
#define _LATB_LATB2_LENGTH                                  0x1
#define _LATB_LATB2_MASK                                    0x4
#define _LATB_LATB3_POSN                                    0x3
#define _LATB_LATB3_POSITION                                0x3
#define _LATB_LATB3_SIZE                                    0x1
#define _LATB_LATB3_LENGTH                                  0x1
#define _LATB_LATB3_MASK                                    0x8
#define _LATB_LATB4_POSN                                    0x4
#define _LATB_LATB4_POSITION                                0x4
#define _LATB_LATB4_SIZE                                    0x1
#define _LATB_LATB4_LENGTH                                  0x1
#define _LATB_LATB4_MASK                                    0x10
#define _LATB_LATB5_POSN                                    0x5
#define _LATB_LATB5_POSITION                                0x5
#define _LATB_LATB5_SIZE                                    0x1
#define _LATB_LATB5_LENGTH                                  0x1
#define _LATB_LATB5_MASK                                    0x20
#define _LATB_LATB6_POSN                                    0x6
#define _LATB_LATB6_POSITION                                0x6
#define _LATB_LATB6_SIZE                                    0x1
#define _LATB_LATB6_LENGTH                                  0x1
#define _LATB_LATB6_MASK                                    0x40
#define _LATB_LATB7_POSN                                    0x7
#define _LATB_LATB7_POSITION                                0x7
#define _LATB_LATB7_SIZE                                    0x1
#define _LATB_LATB7_LENGTH                                  0x1
#define _LATB_LATB7_MASK                                    0x80
#define _LATB_LB0_POSN                                      0x0
#define _LATB_LB0_POSITION                                  0x0
#define _LATB_LB0_SIZE                                      0x1
#define _LATB_LB0_LENGTH                                    0x1
#define _LATB_LB0_MASK                                      0x1
#define _LATB_LB1_POSN                                      0x1
#define _LATB_LB1_POSITION                                  0x1
#define _LATB_LB1_SIZE                                      0x1
#define _LATB_LB1_LENGTH                                    0x1
#define _LATB_LB1_MASK                                      0x2
#define _LATB_LB2_POSN                                      0x2
#define _LATB_LB2_POSITION                                  0x2
#define _LATB_LB2_SIZE                                      0x1
#define _LATB_LB2_LENGTH                                    0x1
#define _LATB_LB2_MASK                                      0x4
#define _LATB_LB3_POSN                                      0x3
#define _LATB_LB3_POSITION                                  0x3
#define _LATB_LB3_SIZE                                      0x1
#define _LATB_LB3_LENGTH                                    0x1
#define _LATB_LB3_MASK                                      0x8
#define _LATB_LB4_POSN                                      0x4
#define _LATB_LB4_POSITION                                  0x4
#define _LATB_LB4_SIZE                                      0x1
#define _LATB_LB4_LENGTH                                    0x1
#define _LATB_LB4_MASK                                      0x10
#define _LATB_LB5_POSN                                      0x5
#define _LATB_LB5_POSITION                                  0x5
#define _LATB_LB5_SIZE                                      0x1
#define _LATB_LB5_LENGTH                                    0x1
#define _LATB_LB5_MASK                                      0x20
#define _LATB_LB6_POSN                                      0x6
#define _LATB_LB6_POSITION                                  0x6
#define _LATB_LB6_SIZE                                      0x1
#define _LATB_LB6_LENGTH                                    0x1
#define _LATB_LB6_MASK                                      0x40
#define _LATB_LB7_POSN                                      0x7
#define _LATB_LB7_POSITION                                  0x7
#define _LATB_LB7_SIZE                                      0x1
#define _LATB_LB7_LENGTH                                    0x1
#define _LATB_LB7_MASK                                      0x80

// Register: LATC
#define LATC LATC
extern volatile unsigned char           LATC                __at(0xF85);
#ifndef _LIB_BUILD
asm("LATC equ 0F85h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LATC0                  :1;
        unsigned LATC1                  :1;
        unsigned LATC2                  :1;
        unsigned LATC3                  :1;
        unsigned LATC4                  :1;
        unsigned LATC5                  :1;
        unsigned LATC6                  :1;
        unsigned LATC7                  :1;
    };
    struct {
        unsigned LC0                    :1;
        unsigned LC1                    :1;
        unsigned LC2                    :1;
        unsigned LC3                    :1;
        unsigned LC4                    :1;
        unsigned LC5                    :1;
        unsigned LC6                    :1;
        unsigned LC7                    :1;
    };
} LATCbits_t;
extern volatile LATCbits_t LATCbits __at(0xF85);
// bitfield macros
#define _LATC_LATC0_POSN                                    0x0
#define _LATC_LATC0_POSITION                                0x0
#define _LATC_LATC0_SIZE                                    0x1
#define _LATC_LATC0_LENGTH                                  0x1
#define _LATC_LATC0_MASK                                    0x1
#define _LATC_LATC1_POSN                                    0x1
#define _LATC_LATC1_POSITION                                0x1
#define _LATC_LATC1_SIZE                                    0x1
#define _LATC_LATC1_LENGTH                                  0x1
#define _LATC_LATC1_MASK                                    0x2
#define _LATC_LATC2_POSN                                    0x2
#define _LATC_LATC2_POSITION                                0x2
#define _LATC_LATC2_SIZE                                    0x1
#define _LATC_LATC2_LENGTH                                  0x1
#define _LATC_LATC2_MASK                                    0x4
#define _LATC_LATC3_POSN                                    0x3
#define _LATC_LATC3_POSITION                                0x3
#define _LATC_LATC3_SIZE                                    0x1
#define _LATC_LATC3_LENGTH                                  0x1
#define _LATC_LATC3_MASK                                    0x8
#define _LATC_LATC4_POSN                                    0x4
#define _LATC_LATC4_POSITION                                0x4
#define _LATC_LATC4_SIZE                                    0x1
#define _LATC_LATC4_LENGTH                                  0x1
#define _LATC_LATC4_MASK                                    0x10
#define _LATC_LATC5_POSN                                    0x5
#define _LATC_LATC5_POSITION                                0x5
#define _LATC_LATC5_SIZE                                    0x1
#define _LATC_LATC5_LENGTH                                  0x1
#define _LATC_LATC5_MASK                                    0x20
#define _LATC_LATC6_POSN                                    0x6
#define _LATC_LATC6_POSITION                                0x6
#define _LATC_LATC6_SIZE                                    0x1
#define _LATC_LATC6_LENGTH                                  0x1
#define _LATC_LATC6_MASK                                    0x40
#define _LATC_LATC7_POSN                                    0x7
#define _LATC_LATC7_POSITION                                0x7
#define _LATC_LATC7_SIZE                                    0x1
#define _LATC_LATC7_LENGTH                                  0x1
#define _LATC_LATC7_MASK                                    0x80
#define _LATC_LC0_POSN                                      0x0
#define _LATC_LC0_POSITION                                  0x0
#define _LATC_LC0_SIZE                                      0x1
#define _LATC_LC0_LENGTH                                    0x1
#define _LATC_LC0_MASK                                      0x1
#define _LATC_LC1_POSN                                      0x1
#define _LATC_LC1_POSITION                                  0x1
#define _LATC_LC1_SIZE                                      0x1
#define _LATC_LC1_LENGTH                                    0x1
#define _LATC_LC1_MASK                                      0x2
#define _LATC_LC2_POSN                                      0x2
#define _LATC_LC2_POSITION                                  0x2
#define _LATC_LC2_SIZE                                      0x1
#define _LATC_LC2_LENGTH                                    0x1
#define _LATC_LC2_MASK                                      0x4
#define _LATC_LC3_POSN                                      0x3
#define _LATC_LC3_POSITION                                  0x3
#define _LATC_LC3_SIZE                                      0x1
#define _LATC_LC3_LENGTH                                    0x1
#define _LATC_LC3_MASK                                      0x8
#define _LATC_LC4_POSN                                      0x4
#define _LATC_LC4_POSITION                                  0x4
#define _LATC_LC4_SIZE                                      0x1
#define _LATC_LC4_LENGTH                                    0x1
#define _LATC_LC4_MASK                                      0x10
#define _LATC_LC5_POSN                                      0x5
#define _LATC_LC5_POSITION                                  0x5
#define _LATC_LC5_SIZE                                      0x1
#define _LATC_LC5_LENGTH                                    0x1
#define _LATC_LC5_MASK                                      0x20
#define _LATC_LC6_POSN                                      0x6
#define _LATC_LC6_POSITION                                  0x6
#define _LATC_LC6_SIZE                                      0x1
#define _LATC_LC6_LENGTH                                    0x1
#define _LATC_LC6_MASK                                      0x40
#define _LATC_LC7_POSN                                      0x7
#define _LATC_LC7_POSITION                                  0x7
#define _LATC_LC7_SIZE                                      0x1
#define _LATC_LC7_LENGTH                                    0x1
#define _LATC_LC7_MASK                                      0x80

// Register: TRISA
#define TRISA TRISA
extern volatile unsigned char           TRISA               __at(0xF88);
#ifndef _LIB_BUILD
asm("TRISA equ 0F88h");
#endif
// aliases
extern volatile unsigned char           DDRA                __at(0xF88);
#ifndef _LIB_BUILD
asm("DDRA equ 0F88h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TRISA0                 :1;
        unsigned TRISA1                 :1;
        unsigned TRISA2                 :1;
        unsigned TRISA3                 :1;
        unsigned TRISA4                 :1;
        unsigned TRISA5                 :1;
        unsigned TRISA6                 :1;
        unsigned TRISA7                 :1;
    };
} TRISAbits_t;
extern volatile TRISAbits_t TRISAbits __at(0xF88);
// bitfield macros
#define _TRISA_TRISA0_POSN                                  0x0
#define _TRISA_TRISA0_POSITION                              0x0
#define _TRISA_TRISA0_SIZE                                  0x1
#define _TRISA_TRISA0_LENGTH                                0x1
#define _TRISA_TRISA0_MASK                                  0x1
#define _TRISA_TRISA1_POSN                                  0x1
#define _TRISA_TRISA1_POSITION                              0x1
#define _TRISA_TRISA1_SIZE                                  0x1
#define _TRISA_TRISA1_LENGTH                                0x1
#define _TRISA_TRISA1_MASK                                  0x2
#define _TRISA_TRISA2_POSN                                  0x2
#define _TRISA_TRISA2_POSITION                              0x2
#define _TRISA_TRISA2_SIZE                                  0x1
#define _TRISA_TRISA2_LENGTH                                0x1
#define _TRISA_TRISA2_MASK                                  0x4
#define _TRISA_TRISA3_POSN                                  0x3
#define _TRISA_TRISA3_POSITION                              0x3
#define _TRISA_TRISA3_SIZE                                  0x1
#define _TRISA_TRISA3_LENGTH                                0x1
#define _TRISA_TRISA3_MASK                                  0x8
#define _TRISA_TRISA4_POSN                                  0x4
#define _TRISA_TRISA4_POSITION                              0x4
#define _TRISA_TRISA4_SIZE                                  0x1
#define _TRISA_TRISA4_LENGTH                                0x1
#define _TRISA_TRISA4_MASK                                  0x10
#define _TRISA_TRISA5_POSN                                  0x5
#define _TRISA_TRISA5_POSITION                              0x5
#define _TRISA_TRISA5_SIZE                                  0x1
#define _TRISA_TRISA5_LENGTH                                0x1
#define _TRISA_TRISA5_MASK                                  0x20
#define _TRISA_TRISA6_POSN                                  0x6
#define _TRISA_TRISA6_POSITION                              0x6
#define _TRISA_TRISA6_SIZE                                  0x1
#define _TRISA_TRISA6_LENGTH                                0x1
#define _TRISA_TRISA6_MASK                                  0x40
#define _TRISA_TRISA7_POSN                                  0x7
#define _TRISA_TRISA7_POSITION                              0x7
#define _TRISA_TRISA7_SIZE                                  0x1
#define _TRISA_TRISA7_LENGTH                                0x1
#define _TRISA_TRISA7_MASK                                  0x80
// alias bitfield definitions
typedef union {
    struct {
        unsigned TRISA0                 :1;
        unsigned TRISA1                 :1;
        unsigned TRISA2                 :1;
        unsigned TRISA3                 :1;
        unsigned TRISA4                 :1;
        unsigned TRISA5                 :1;
        unsigned TRISA6                 :1;
        unsigned TRISA7                 :1;
    };
} DDRAbits_t;
extern volatile DDRAbits_t DDRAbits __at(0xF88);
// bitfield macros
#define _DDRA_TRISA0_POSN                                   0x0
#define _DDRA_TRISA0_POSITION                               0x0
#define _DDRA_TRISA0_SIZE                                   0x1
#define _DDRA_TRISA0_LENGTH                                 0x1
#define _DDRA_TRISA0_MASK                                   0x1
#define _DDRA_TRISA1_POSN                                   0x1
#define _DDRA_TRISA1_POSITION                               0x1
#define _DDRA_TRISA1_SIZE                                   0x1
#define _DDRA_TRISA1_LENGTH                                 0x1
#define _DDRA_TRISA1_MASK                                   0x2
#define _DDRA_TRISA2_POSN                                   0x2
#define _DDRA_TRISA2_POSITION                               0x2
#define _DDRA_TRISA2_SIZE                                   0x1
#define _DDRA_TRISA2_LENGTH                                 0x1
#define _DDRA_TRISA2_MASK                                   0x4
#define _DDRA_TRISA3_POSN                                   0x3
#define _DDRA_TRISA3_POSITION                               0x3
#define _DDRA_TRISA3_SIZE                                   0x1
#define _DDRA_TRISA3_LENGTH                                 0x1
#define _DDRA_TRISA3_MASK                                   0x8
#define _DDRA_TRISA4_POSN                                   0x4
#define _DDRA_TRISA4_POSITION                               0x4
#define _DDRA_TRISA4_SIZE                                   0x1
#define _DDRA_TRISA4_LENGTH                                 0x1
#define _DDRA_TRISA4_MASK                                   0x10
#define _DDRA_TRISA5_POSN                                   0x5
#define _DDRA_TRISA5_POSITION                               0x5
#define _DDRA_TRISA5_SIZE                                   0x1
#define _DDRA_TRISA5_LENGTH                                 0x1
#define _DDRA_TRISA5_MASK                                   0x20
#define _DDRA_TRISA6_POSN                                   0x6
#define _DDRA_TRISA6_POSITION                               0x6
#define _DDRA_TRISA6_SIZE                                   0x1
#define _DDRA_TRISA6_LENGTH                                 0x1
#define _DDRA_TRISA6_MASK                                   0x40
#define _DDRA_TRISA7_POSN                                   0x7
#define _DDRA_TRISA7_POSITION                               0x7
#define _DDRA_TRISA7_SIZE                                   0x1
#define _DDRA_TRISA7_LENGTH                                 0x1
#define _DDRA_TRISA7_MASK                                   0x80

// Register: TRISB
#define TRISB TRISB
extern volatile unsigned char           TRISB               __at(0xF89);
#ifndef _LIB_BUILD
asm("TRISB equ 0F89h");
#endif
// aliases
extern volatile unsigned char           DDRB                __at(0xF89);
#ifndef _LIB_BUILD
asm("DDRB equ 0F89h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TRISB0                 :1;
        unsigned TRISB1                 :1;
        unsigned TRISB2                 :1;
        unsigned TRISB3                 :1;
        unsigned TRISB4                 :1;
        unsigned TRISB5                 :1;
        unsigned TRISB6                 :1;
        unsigned TRISB7                 :1;
    };
} TRISBbits_t;
extern volatile TRISBbits_t TRISBbits __at(0xF89);
// bitfield macros
#define _TRISB_TRISB0_POSN                                  0x0
#define _TRISB_TRISB0_POSITION                              0x0
#define _TRISB_TRISB0_SIZE                                  0x1
#define _TRISB_TRISB0_LENGTH                                0x1
#define _TRISB_TRISB0_MASK                                  0x1
#define _TRISB_TRISB1_POSN                                  0x1
#define _TRISB_TRISB1_POSITION                              0x1
#define _TRISB_TRISB1_SIZE                                  0x1
#define _TRISB_TRISB1_LENGTH                                0x1
#define _TRISB_TRISB1_MASK                                  0x2
#define _TRISB_TRISB2_POSN                                  0x2
#define _TRISB_TRISB2_POSITION                              0x2
#define _TRISB_TRISB2_SIZE                                  0x1
#define _TRISB_TRISB2_LENGTH                                0x1
#define _TRISB_TRISB2_MASK                                  0x4
#define _TRISB_TRISB3_POSN                                  0x3
#define _TRISB_TRISB3_POSITION                              0x3
#define _TRISB_TRISB3_SIZE                                  0x1
#define _TRISB_TRISB3_LENGTH                                0x1
#define _TRISB_TRISB3_MASK                                  0x8
#define _TRISB_TRISB4_POSN                                  0x4
#define _TRISB_TRISB4_POSITION                              0x4
#define _TRISB_TRISB4_SIZE                                  0x1
#define _TRISB_TRISB4_LENGTH                                0x1
#define _TRISB_TRISB4_MASK                                  0x10
#define _TRISB_TRISB5_POSN                                  0x5
#define _TRISB_TRISB5_POSITION                              0x5
#define _TRISB_TRISB5_SIZE                                  0x1
#define _TRISB_TRISB5_LENGTH                                0x1
#define _TRISB_TRISB5_MASK                                  0x20
#define _TRISB_TRISB6_POSN                                  0x6
#define _TRISB_TRISB6_POSITION                              0x6
#define _TRISB_TRISB6_SIZE                                  0x1
#define _TRISB_TRISB6_LENGTH                                0x1
#define _TRISB_TRISB6_MASK                                  0x40
#define _TRISB_TRISB7_POSN                                  0x7
#define _TRISB_TRISB7_POSITION                              0x7
#define _TRISB_TRISB7_SIZE                                  0x1
#define _TRISB_TRISB7_LENGTH                                0x1
#define _TRISB_TRISB7_MASK                                  0x80
// alias bitfield definitions
typedef union {
    struct {
        unsigned TRISB0                 :1;
        unsigned TRISB1                 :1;
        unsigned TRISB2                 :1;
        unsigned TRISB3                 :1;
        unsigned TRISB4                 :1;
        unsigned TRISB5                 :1;
        unsigned TRISB6                 :1;
        unsigned TRISB7                 :1;
    };
} DDRBbits_t;
extern volatile DDRBbits_t DDRBbits __at(0xF89);
// bitfield macros
#define _DDRB_TRISB0_POSN                                   0x0
#define _DDRB_TRISB0_POSITION                               0x0
#define _DDRB_TRISB0_SIZE                                   0x1
#define _DDRB_TRISB0_LENGTH                                 0x1
#define _DDRB_TRISB0_MASK                                   0x1
#define _DDRB_TRISB1_POSN                                   0x1
#define _DDRB_TRISB1_POSITION                               0x1
#define _DDRB_TRISB1_SIZE                                   0x1
#define _DDRB_TRISB1_LENGTH                                 0x1
#define _DDRB_TRISB1_MASK                                   0x2
#define _DDRB_TRISB2_POSN                                   0x2
#define _DDRB_TRISB2_POSITION                               0x2
#define _DDRB_TRISB2_SIZE                                   0x1
#define _DDRB_TRISB2_LENGTH                                 0x1
#define _DDRB_TRISB2_MASK                                   0x4
#define _DDRB_TRISB3_POSN                                   0x3
#define _DDRB_TRISB3_POSITION                               0x3
#define _DDRB_TRISB3_SIZE                                   0x1
#define _DDRB_TRISB3_LENGTH                                 0x1
#define _DDRB_TRISB3_MASK                                   0x8
#define _DDRB_TRISB4_POSN                                   0x4
#define _DDRB_TRISB4_POSITION                               0x4
#define _DDRB_TRISB4_SIZE                                   0x1
#define _DDRB_TRISB4_LENGTH                                 0x1
#define _DDRB_TRISB4_MASK                                   0x10
#define _DDRB_TRISB5_POSN                                   0x5
#define _DDRB_TRISB5_POSITION                               0x5
#define _DDRB_TRISB5_SIZE                                   0x1
#define _DDRB_TRISB5_LENGTH                                 0x1
#define _DDRB_TRISB5_MASK                                   0x20
#define _DDRB_TRISB6_POSN                                   0x6
#define _DDRB_TRISB6_POSITION                               0x6
#define _DDRB_TRISB6_SIZE                                   0x1
#define _DDRB_TRISB6_LENGTH                                 0x1
#define _DDRB_TRISB6_MASK                                   0x40
#define _DDRB_TRISB7_POSN                                   0x7
#define _DDRB_TRISB7_POSITION                               0x7
#define _DDRB_TRISB7_SIZE                                   0x1
#define _DDRB_TRISB7_LENGTH                                 0x1
#define _DDRB_TRISB7_MASK                                   0x80

// Register: TRISC
#define TRISC TRISC
extern volatile unsigned char           TRISC               __at(0xF8A);
#ifndef _LIB_BUILD
asm("TRISC equ 0F8Ah");
#endif
// aliases
extern volatile unsigned char           DDRC                __at(0xF8A);
#ifndef _LIB_BUILD
asm("DDRC equ 0F8Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TRISC0                 :1;
        unsigned TRISC1                 :1;
        unsigned TRISC2                 :1;
        unsigned TRISC3                 :1;
        unsigned TRISC4                 :1;
        unsigned TRISC5                 :1;
        unsigned TRISC6                 :1;
        unsigned TRISC7                 :1;
    };
} TRISCbits_t;
extern volatile TRISCbits_t TRISCbits __at(0xF8A);
// bitfield macros
#define _TRISC_TRISC0_POSN                                  0x0
#define _TRISC_TRISC0_POSITION                              0x0
#define _TRISC_TRISC0_SIZE                                  0x1
#define _TRISC_TRISC0_LENGTH                                0x1
#define _TRISC_TRISC0_MASK                                  0x1
#define _TRISC_TRISC1_POSN                                  0x1
#define _TRISC_TRISC1_POSITION                              0x1
#define _TRISC_TRISC1_SIZE                                  0x1
#define _TRISC_TRISC1_LENGTH                                0x1
#define _TRISC_TRISC1_MASK                                  0x2
#define _TRISC_TRISC2_POSN                                  0x2
#define _TRISC_TRISC2_POSITION                              0x2
#define _TRISC_TRISC2_SIZE                                  0x1
#define _TRISC_TRISC2_LENGTH                                0x1
#define _TRISC_TRISC2_MASK                                  0x4
#define _TRISC_TRISC3_POSN                                  0x3
#define _TRISC_TRISC3_POSITION                              0x3
#define _TRISC_TRISC3_SIZE                                  0x1
#define _TRISC_TRISC3_LENGTH                                0x1
#define _TRISC_TRISC3_MASK                                  0x8
#define _TRISC_TRISC4_POSN                                  0x4
#define _TRISC_TRISC4_POSITION                              0x4
#define _TRISC_TRISC4_SIZE                                  0x1
#define _TRISC_TRISC4_LENGTH                                0x1
#define _TRISC_TRISC4_MASK                                  0x10
#define _TRISC_TRISC5_POSN                                  0x5
#define _TRISC_TRISC5_POSITION                              0x5
#define _TRISC_TRISC5_SIZE                                  0x1
#define _TRISC_TRISC5_LENGTH                                0x1
#define _TRISC_TRISC5_MASK                                  0x20
#define _TRISC_TRISC6_POSN                                  0x6
#define _TRISC_TRISC6_POSITION                              0x6
#define _TRISC_TRISC6_SIZE                                  0x1
#define _TRISC_TRISC6_LENGTH                                0x1
#define _TRISC_TRISC6_MASK                                  0x40
#define _TRISC_TRISC7_POSN                                  0x7
#define _TRISC_TRISC7_POSITION                              0x7
#define _TRISC_TRISC7_SIZE                                  0x1
#define _TRISC_TRISC7_LENGTH                                0x1
#define _TRISC_TRISC7_MASK                                  0x80
// alias bitfield definitions
typedef union {
    struct {
        unsigned TRISC0                 :1;
        unsigned TRISC1                 :1;
        unsigned TRISC2                 :1;
        unsigned TRISC3                 :1;
        unsigned TRISC4                 :1;
        unsigned TRISC5                 :1;
        unsigned TRISC6                 :1;
        unsigned TRISC7                 :1;
    };
} DDRCbits_t;
extern volatile DDRCbits_t DDRCbits __at(0xF8A);
// bitfield macros
#define _DDRC_TRISC0_POSN                                   0x0
#define _DDRC_TRISC0_POSITION                               0x0
#define _DDRC_TRISC0_SIZE                                   0x1
#define _DDRC_TRISC0_LENGTH                                 0x1
#define _DDRC_TRISC0_MASK                                   0x1
#define _DDRC_TRISC1_POSN                                   0x1
#define _DDRC_TRISC1_POSITION                               0x1
#define _DDRC_TRISC1_SIZE                                   0x1
#define _DDRC_TRISC1_LENGTH                                 0x1
#define _DDRC_TRISC1_MASK                                   0x2
#define _DDRC_TRISC2_POSN                                   0x2
#define _DDRC_TRISC2_POSITION                               0x2
#define _DDRC_TRISC2_SIZE                                   0x1
#define _DDRC_TRISC2_LENGTH                                 0x1
#define _DDRC_TRISC2_MASK                                   0x4
#define _DDRC_TRISC3_POSN                                   0x3
#define _DDRC_TRISC3_POSITION                               0x3
#define _DDRC_TRISC3_SIZE                                   0x1
#define _DDRC_TRISC3_LENGTH                                 0x1
#define _DDRC_TRISC3_MASK                                   0x8
#define _DDRC_TRISC4_POSN                                   0x4
#define _DDRC_TRISC4_POSITION                               0x4
#define _DDRC_TRISC4_SIZE                                   0x1
#define _DDRC_TRISC4_LENGTH                                 0x1
#define _DDRC_TRISC4_MASK                                   0x10
#define _DDRC_TRISC5_POSN                                   0x5
#define _DDRC_TRISC5_POSITION                               0x5
#define _DDRC_TRISC5_SIZE                                   0x1
#define _DDRC_TRISC5_LENGTH                                 0x1
#define _DDRC_TRISC5_MASK                                   0x20
#define _DDRC_TRISC6_POSN                                   0x6
#define _DDRC_TRISC6_POSITION                               0x6
#define _DDRC_TRISC6_SIZE                                   0x1
#define _DDRC_TRISC6_LENGTH                                 0x1
#define _DDRC_TRISC6_MASK                                   0x40
#define _DDRC_TRISC7_POSN                                   0x7
#define _DDRC_TRISC7_POSITION                               0x7
#define _DDRC_TRISC7_SIZE                                   0x1
#define _DDRC_TRISC7_LENGTH                                 0x1
#define _DDRC_TRISC7_MASK                                   0x80

// Register: PORTA
#define PORTA PORTA
extern volatile unsigned char           PORTA               __at(0xF8D);
#ifndef _LIB_BUILD
asm("PORTA equ 0F8Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA0                    :1;
        unsigned RA1                    :1;
        unsigned RA2                    :1;
        unsigned RA3                    :1;
        unsigned RA4                    :1;
        unsigned RA5                    :1;
        unsigned RA6                    :1;
        unsigned RA7                    :1;
    };
    struct {
        unsigned ULPWUIN                :1;
        unsigned                        :4;
        unsigned LVDIN                  :1;
        unsigned                        :1;
        unsigned RJPU                   :1;
    };
} PORTAbits_t;
extern volatile PORTAbits_t PORTAbits __at(0xF8D);
// bitfield macros
#define _PORTA_RA0_POSN                                     0x0
#define _PORTA_RA0_POSITION                                 0x0
#define _PORTA_RA0_SIZE                                     0x1
#define _PORTA_RA0_LENGTH                                   0x1
#define _PORTA_RA0_MASK                                     0x1
#define _PORTA_RA1_POSN                                     0x1
#define _PORTA_RA1_POSITION                                 0x1
#define _PORTA_RA1_SIZE                                     0x1
#define _PORTA_RA1_LENGTH                                   0x1
#define _PORTA_RA1_MASK                                     0x2
#define _PORTA_RA2_POSN                                     0x2
#define _PORTA_RA2_POSITION                                 0x2
#define _PORTA_RA2_SIZE                                     0x1
#define _PORTA_RA2_LENGTH                                   0x1
#define _PORTA_RA2_MASK                                     0x4
#define _PORTA_RA3_POSN                                     0x3
#define _PORTA_RA3_POSITION                                 0x3
#define _PORTA_RA3_SIZE                                     0x1
#define _PORTA_RA3_LENGTH                                   0x1
#define _PORTA_RA3_MASK                                     0x8
#define _PORTA_RA4_POSN                                     0x4
#define _PORTA_RA4_POSITION                                 0x4
#define _PORTA_RA4_SIZE                                     0x1
#define _PORTA_RA4_LENGTH                                   0x1
#define _PORTA_RA4_MASK                                     0x10
#define _PORTA_RA5_POSN                                     0x5
#define _PORTA_RA5_POSITION                                 0x5
#define _PORTA_RA5_SIZE                                     0x1
#define _PORTA_RA5_LENGTH                                   0x1
#define _PORTA_RA5_MASK                                     0x20
#define _PORTA_RA6_POSN                                     0x6
#define _PORTA_RA6_POSITION                                 0x6
#define _PORTA_RA6_SIZE                                     0x1
#define _PORTA_RA6_LENGTH                                   0x1
#define _PORTA_RA6_MASK                                     0x40
#define _PORTA_RA7_POSN                                     0x7
#define _PORTA_RA7_POSITION                                 0x7
#define _PORTA_RA7_SIZE                                     0x1
#define _PORTA_RA7_LENGTH                                   0x1
#define _PORTA_RA7_MASK                                     0x80
#define _PORTA_ULPWUIN_POSN                                 0x0
#define _PORTA_ULPWUIN_POSITION                             0x0
#define _PORTA_ULPWUIN_SIZE                                 0x1
#define _PORTA_ULPWUIN_LENGTH                               0x1
#define _PORTA_ULPWUIN_MASK                                 0x1
#define _PORTA_LVDIN_POSN                                   0x5
#define _PORTA_LVDIN_POSITION                               0x5
#define _PORTA_LVDIN_SIZE                                   0x1
#define _PORTA_LVDIN_LENGTH                                 0x1
#define _PORTA_LVDIN_MASK                                   0x20
#define _PORTA_RJPU_POSN                                    0x7
#define _PORTA_RJPU_POSITION                                0x7
#define _PORTA_RJPU_SIZE                                    0x1
#define _PORTA_RJPU_LENGTH                                  0x1
#define _PORTA_RJPU_MASK                                    0x80

// Register: PORTB
#define PORTB PORTB
extern volatile unsigned char           PORTB               __at(0xF8E);
#ifndef _LIB_BUILD
asm("PORTB equ 0F8Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RB0                    :1;
        unsigned RB1                    :1;
        unsigned RB2                    :1;
        unsigned RB3                    :1;
        unsigned RB4                    :1;
        unsigned RB5                    :1;
        unsigned RB6                    :1;
        unsigned RB7                    :1;
    };
    struct {
        unsigned                        :3;
        unsigned CCP2_PA2               :1;
    };
} PORTBbits_t;
extern volatile PORTBbits_t PORTBbits __at(0xF8E);
// bitfield macros
#define _PORTB_RB0_POSN                                     0x0
#define _PORTB_RB0_POSITION                                 0x0
#define _PORTB_RB0_SIZE                                     0x1
#define _PORTB_RB0_LENGTH                                   0x1
#define _PORTB_RB0_MASK                                     0x1
#define _PORTB_RB1_POSN                                     0x1
#define _PORTB_RB1_POSITION                                 0x1
#define _PORTB_RB1_SIZE                                     0x1
#define _PORTB_RB1_LENGTH                                   0x1
#define _PORTB_RB1_MASK                                     0x2
#define _PORTB_RB2_POSN                                     0x2
#define _PORTB_RB2_POSITION                                 0x2
#define _PORTB_RB2_SIZE                                     0x1
#define _PORTB_RB2_LENGTH                                   0x1
#define _PORTB_RB2_MASK                                     0x4
#define _PORTB_RB3_POSN                                     0x3
#define _PORTB_RB3_POSITION                                 0x3
#define _PORTB_RB3_SIZE                                     0x1
#define _PORTB_RB3_LENGTH                                   0x1
#define _PORTB_RB3_MASK                                     0x8
#define _PORTB_RB4_POSN                                     0x4
#define _PORTB_RB4_POSITION                                 0x4
#define _PORTB_RB4_SIZE                                     0x1
#define _PORTB_RB4_LENGTH                                   0x1
#define _PORTB_RB4_MASK                                     0x10
#define _PORTB_RB5_POSN                                     0x5
#define _PORTB_RB5_POSITION                                 0x5
#define _PORTB_RB5_SIZE                                     0x1
#define _PORTB_RB5_LENGTH                                   0x1
#define _PORTB_RB5_MASK                                     0x20
#define _PORTB_RB6_POSN                                     0x6
#define _PORTB_RB6_POSITION                                 0x6
#define _PORTB_RB6_SIZE                                     0x1
#define _PORTB_RB6_LENGTH                                   0x1
#define _PORTB_RB6_MASK                                     0x40
#define _PORTB_RB7_POSN                                     0x7
#define _PORTB_RB7_POSITION                                 0x7
#define _PORTB_RB7_SIZE                                     0x1
#define _PORTB_RB7_LENGTH                                   0x1
#define _PORTB_RB7_MASK                                     0x80
#define _PORTB_CCP2_PA2_POSN                                0x3
#define _PORTB_CCP2_PA2_POSITION                            0x3
#define _PORTB_CCP2_PA2_SIZE                                0x1
#define _PORTB_CCP2_PA2_LENGTH                              0x1
#define _PORTB_CCP2_PA2_MASK                                0x8

// Register: PORTC
#define PORTC PORTC
extern volatile unsigned char           PORTC               __at(0xF8F);
#ifndef _LIB_BUILD
asm("PORTC equ 0F8Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC0                    :1;
        unsigned RC1                    :1;
        unsigned RC2                    :1;
        unsigned RC3                    :1;
        unsigned RC4                    :1;
        unsigned RC5                    :1;
        unsigned RC6                    :1;
        unsigned RC7                    :1;
    };
    struct {
        unsigned                        :1;
        unsigned CCP2                   :1;
        unsigned PA1                    :1;
    };
    struct {
        unsigned                        :1;
        unsigned PA2                    :1;
    };
} PORTCbits_t;
extern volatile PORTCbits_t PORTCbits __at(0xF8F);
// bitfield macros
#define _PORTC_RC0_POSN                                     0x0
#define _PORTC_RC0_POSITION                                 0x0
#define _PORTC_RC0_SIZE                                     0x1
#define _PORTC_RC0_LENGTH                                   0x1
#define _PORTC_RC0_MASK                                     0x1
#define _PORTC_RC1_POSN                                     0x1
#define _PORTC_RC1_POSITION                                 0x1
#define _PORTC_RC1_SIZE                                     0x1
#define _PORTC_RC1_LENGTH                                   0x1
#define _PORTC_RC1_MASK                                     0x2
#define _PORTC_RC2_POSN                                     0x2
#define _PORTC_RC2_POSITION                                 0x2
#define _PORTC_RC2_SIZE                                     0x1
#define _PORTC_RC2_LENGTH                                   0x1
#define _PORTC_RC2_MASK                                     0x4
#define _PORTC_RC3_POSN                                     0x3
#define _PORTC_RC3_POSITION                                 0x3
#define _PORTC_RC3_SIZE                                     0x1
#define _PORTC_RC3_LENGTH                                   0x1
#define _PORTC_RC3_MASK                                     0x8
#define _PORTC_RC4_POSN                                     0x4
#define _PORTC_RC4_POSITION                                 0x4
#define _PORTC_RC4_SIZE                                     0x1
#define _PORTC_RC4_LENGTH                                   0x1
#define _PORTC_RC4_MASK                                     0x10
#define _PORTC_RC5_POSN                                     0x5
#define _PORTC_RC5_POSITION                                 0x5
#define _PORTC_RC5_SIZE                                     0x1
#define _PORTC_RC5_LENGTH                                   0x1
#define _PORTC_RC5_MASK                                     0x20
#define _PORTC_RC6_POSN                                     0x6
#define _PORTC_RC6_POSITION                                 0x6
#define _PORTC_RC6_SIZE                                     0x1
#define _PORTC_RC6_LENGTH                                   0x1
#define _PORTC_RC6_MASK                                     0x40
#define _PORTC_RC7_POSN                                     0x7
#define _PORTC_RC7_POSITION                                 0x7
#define _PORTC_RC7_SIZE                                     0x1
#define _PORTC_RC7_LENGTH                                   0x1
#define _PORTC_RC7_MASK                                     0x80
#define _PORTC_CCP2_POSN                                    0x1
#define _PORTC_CCP2_POSITION                                0x1
#define _PORTC_CCP2_SIZE                                    0x1
#define _PORTC_CCP2_LENGTH                                  0x1
#define _PORTC_CCP2_MASK                                    0x2
#define _PORTC_PA1_POSN                                     0x2
#define _PORTC_PA1_POSITION                                 0x2
#define _PORTC_PA1_SIZE                                     0x1
#define _PORTC_PA1_LENGTH                                   0x1
#define _PORTC_PA1_MASK                                     0x4
#define _PORTC_PA2_POSN                                     0x1
#define _PORTC_PA2_POSITION                                 0x1
#define _PORTC_PA2_SIZE                                     0x1
#define _PORTC_PA2_LENGTH                                   0x1
#define _PORTC_PA2_MASK                                     0x2

// Register: PORTE
#define PORTE PORTE
extern volatile unsigned char           PORTE               __at(0xF91);
#ifndef _LIB_BUILD
asm("PORTE equ 0F91h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :3;
        unsigned RE3                    :1;
    };
    struct {
        unsigned                        :3;
        unsigned CCP9E                  :1;
    };
    struct {
        unsigned                        :3;
        unsigned PC3E                   :1;
    };
} PORTEbits_t;
extern volatile PORTEbits_t PORTEbits __at(0xF91);
// bitfield macros
#define _PORTE_RE3_POSN                                     0x3
#define _PORTE_RE3_POSITION                                 0x3
#define _PORTE_RE3_SIZE                                     0x1
#define _PORTE_RE3_LENGTH                                   0x1
#define _PORTE_RE3_MASK                                     0x8
#define _PORTE_CCP9E_POSN                                   0x3
#define _PORTE_CCP9E_POSITION                               0x3
#define _PORTE_CCP9E_SIZE                                   0x1
#define _PORTE_CCP9E_LENGTH                                 0x1
#define _PORTE_CCP9E_MASK                                   0x8
#define _PORTE_PC3E_POSN                                    0x3
#define _PORTE_PC3E_POSITION                                0x3
#define _PORTE_PC3E_SIZE                                    0x1
#define _PORTE_PC3E_LENGTH                                  0x1
#define _PORTE_PC3E_MASK                                    0x8

// Register: SSP1BUF
#define SSP1BUF SSP1BUF
extern volatile unsigned char           SSP1BUF             __at(0xF92);
#ifndef _LIB_BUILD
asm("SSP1BUF equ 0F92h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSPBUF                 :8;
    };
} SSP1BUFbits_t;
extern volatile SSP1BUFbits_t SSP1BUFbits __at(0xF92);
// bitfield macros
#define _SSP1BUF_SSPBUF_POSN                                0x0
#define _SSP1BUF_SSPBUF_POSITION                            0x0
#define _SSP1BUF_SSPBUF_SIZE                                0x8
#define _SSP1BUF_SSPBUF_LENGTH                              0x8
#define _SSP1BUF_SSPBUF_MASK                                0xFF

// Register: SSP1ADD
#define SSP1ADD SSP1ADD
extern volatile unsigned char           SSP1ADD             __at(0xF93);
#ifndef _LIB_BUILD
asm("SSP1ADD equ 0F93h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSPADD                 :8;
    };
    struct {
        unsigned MSK0                   :1;
        unsigned MSK1                   :1;
        unsigned MSK2                   :1;
        unsigned MSK3                   :1;
        unsigned MSK4                   :1;
        unsigned MSK5                   :1;
        unsigned MSK6                   :1;
        unsigned MSK7                   :1;
    };
    struct {
        unsigned MSK01                  :1;
        unsigned MSK11                  :1;
        unsigned MSK21                  :1;
        unsigned MSK31                  :1;
        unsigned MSK41                  :1;
        unsigned MSK51                  :1;
        unsigned MSK61                  :1;
        unsigned MSK71                  :1;
    };
} SSP1ADDbits_t;
extern volatile SSP1ADDbits_t SSP1ADDbits __at(0xF93);
// bitfield macros
#define _SSP1ADD_SSPADD_POSN                                0x0
#define _SSP1ADD_SSPADD_POSITION                            0x0
#define _SSP1ADD_SSPADD_SIZE                                0x8
#define _SSP1ADD_SSPADD_LENGTH                              0x8
#define _SSP1ADD_SSPADD_MASK                                0xFF
#define _SSP1ADD_MSK0_POSN                                  0x0
#define _SSP1ADD_MSK0_POSITION                              0x0
#define _SSP1ADD_MSK0_SIZE                                  0x1
#define _SSP1ADD_MSK0_LENGTH                                0x1
#define _SSP1ADD_MSK0_MASK                                  0x1
#define _SSP1ADD_MSK1_POSN                                  0x1
#define _SSP1ADD_MSK1_POSITION                              0x1
#define _SSP1ADD_MSK1_SIZE                                  0x1
#define _SSP1ADD_MSK1_LENGTH                                0x1
#define _SSP1ADD_MSK1_MASK                                  0x2
#define _SSP1ADD_MSK2_POSN                                  0x2
#define _SSP1ADD_MSK2_POSITION                              0x2
#define _SSP1ADD_MSK2_SIZE                                  0x1
#define _SSP1ADD_MSK2_LENGTH                                0x1
#define _SSP1ADD_MSK2_MASK                                  0x4
#define _SSP1ADD_MSK3_POSN                                  0x3
#define _SSP1ADD_MSK3_POSITION                              0x3
#define _SSP1ADD_MSK3_SIZE                                  0x1
#define _SSP1ADD_MSK3_LENGTH                                0x1
#define _SSP1ADD_MSK3_MASK                                  0x8
#define _SSP1ADD_MSK4_POSN                                  0x4
#define _SSP1ADD_MSK4_POSITION                              0x4
#define _SSP1ADD_MSK4_SIZE                                  0x1
#define _SSP1ADD_MSK4_LENGTH                                0x1
#define _SSP1ADD_MSK4_MASK                                  0x10
#define _SSP1ADD_MSK5_POSN                                  0x5
#define _SSP1ADD_MSK5_POSITION                              0x5
#define _SSP1ADD_MSK5_SIZE                                  0x1
#define _SSP1ADD_MSK5_LENGTH                                0x1
#define _SSP1ADD_MSK5_MASK                                  0x20
#define _SSP1ADD_MSK6_POSN                                  0x6
#define _SSP1ADD_MSK6_POSITION                              0x6
#define _SSP1ADD_MSK6_SIZE                                  0x1
#define _SSP1ADD_MSK6_LENGTH                                0x1
#define _SSP1ADD_MSK6_MASK                                  0x40
#define _SSP1ADD_MSK7_POSN                                  0x7
#define _SSP1ADD_MSK7_POSITION                              0x7
#define _SSP1ADD_MSK7_SIZE                                  0x1
#define _SSP1ADD_MSK7_LENGTH                                0x1
#define _SSP1ADD_MSK7_MASK                                  0x80
#define _SSP1ADD_MSK01_POSN                                 0x0
#define _SSP1ADD_MSK01_POSITION                             0x0
#define _SSP1ADD_MSK01_SIZE                                 0x1
#define _SSP1ADD_MSK01_LENGTH                               0x1
#define _SSP1ADD_MSK01_MASK                                 0x1
#define _SSP1ADD_MSK11_POSN                                 0x1
#define _SSP1ADD_MSK11_POSITION                             0x1
#define _SSP1ADD_MSK11_SIZE                                 0x1
#define _SSP1ADD_MSK11_LENGTH                               0x1
#define _SSP1ADD_MSK11_MASK                                 0x2
#define _SSP1ADD_MSK21_POSN                                 0x2
#define _SSP1ADD_MSK21_POSITION                             0x2
#define _SSP1ADD_MSK21_SIZE                                 0x1
#define _SSP1ADD_MSK21_LENGTH                               0x1
#define _SSP1ADD_MSK21_MASK                                 0x4
#define _SSP1ADD_MSK31_POSN                                 0x3
#define _SSP1ADD_MSK31_POSITION                             0x3
#define _SSP1ADD_MSK31_SIZE                                 0x1
#define _SSP1ADD_MSK31_LENGTH                               0x1
#define _SSP1ADD_MSK31_MASK                                 0x8
#define _SSP1ADD_MSK41_POSN                                 0x4
#define _SSP1ADD_MSK41_POSITION                             0x4
#define _SSP1ADD_MSK41_SIZE                                 0x1
#define _SSP1ADD_MSK41_LENGTH                               0x1
#define _SSP1ADD_MSK41_MASK                                 0x10
#define _SSP1ADD_MSK51_POSN                                 0x5
#define _SSP1ADD_MSK51_POSITION                             0x5
#define _SSP1ADD_MSK51_SIZE                                 0x1
#define _SSP1ADD_MSK51_LENGTH                               0x1
#define _SSP1ADD_MSK51_MASK                                 0x20
#define _SSP1ADD_MSK61_POSN                                 0x6
#define _SSP1ADD_MSK61_POSITION                             0x6
#define _SSP1ADD_MSK61_SIZE                                 0x1
#define _SSP1ADD_MSK61_LENGTH                               0x1
#define _SSP1ADD_MSK61_MASK                                 0x40
#define _SSP1ADD_MSK71_POSN                                 0x7
#define _SSP1ADD_MSK71_POSITION                             0x7
#define _SSP1ADD_MSK71_SIZE                                 0x1
#define _SSP1ADD_MSK71_LENGTH                               0x1
#define _SSP1ADD_MSK71_MASK                                 0x80

// Register: SSP1MSK
#define SSP1MSK SSP1MSK
extern volatile unsigned char           SSP1MSK             __at(0xF94);
#ifndef _LIB_BUILD
asm("SSP1MSK equ 0F94h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSPMSK                 :8;
    };
    struct {
        unsigned MSK0                   :1;
        unsigned MSK1                   :1;
        unsigned MSK2                   :1;
        unsigned MSK3                   :1;
        unsigned MSK4                   :1;
        unsigned MSK5                   :1;
        unsigned MSK6                   :1;
        unsigned MSK7                   :1;
    };
} SSP1MSKbits_t;
extern volatile SSP1MSKbits_t SSP1MSKbits __at(0xF94);
// bitfield macros
#define _SSP1MSK_SSPMSK_POSN                                0x0
#define _SSP1MSK_SSPMSK_POSITION                            0x0
#define _SSP1MSK_SSPMSK_SIZE                                0x8
#define _SSP1MSK_SSPMSK_LENGTH                              0x8
#define _SSP1MSK_SSPMSK_MASK                                0xFF
#define _SSP1MSK_MSK0_POSN                                  0x0
#define _SSP1MSK_MSK0_POSITION                              0x0
#define _SSP1MSK_MSK0_SIZE                                  0x1
#define _SSP1MSK_MSK0_LENGTH                                0x1
#define _SSP1MSK_MSK0_MASK                                  0x1
#define _SSP1MSK_MSK1_POSN                                  0x1
#define _SSP1MSK_MSK1_POSITION                              0x1
#define _SSP1MSK_MSK1_SIZE                                  0x1
#define _SSP1MSK_MSK1_LENGTH                                0x1
#define _SSP1MSK_MSK1_MASK                                  0x2
#define _SSP1MSK_MSK2_POSN                                  0x2
#define _SSP1MSK_MSK2_POSITION                              0x2
#define _SSP1MSK_MSK2_SIZE                                  0x1
#define _SSP1MSK_MSK2_LENGTH                                0x1
#define _SSP1MSK_MSK2_MASK                                  0x4
#define _SSP1MSK_MSK3_POSN                                  0x3
#define _SSP1MSK_MSK3_POSITION                              0x3
#define _SSP1MSK_MSK3_SIZE                                  0x1
#define _SSP1MSK_MSK3_LENGTH                                0x1
#define _SSP1MSK_MSK3_MASK                                  0x8
#define _SSP1MSK_MSK4_POSN                                  0x4
#define _SSP1MSK_MSK4_POSITION                              0x4
#define _SSP1MSK_MSK4_SIZE                                  0x1
#define _SSP1MSK_MSK4_LENGTH                                0x1
#define _SSP1MSK_MSK4_MASK                                  0x10
#define _SSP1MSK_MSK5_POSN                                  0x5
#define _SSP1MSK_MSK5_POSITION                              0x5
#define _SSP1MSK_MSK5_SIZE                                  0x1
#define _SSP1MSK_MSK5_LENGTH                                0x1
#define _SSP1MSK_MSK5_MASK                                  0x20
#define _SSP1MSK_MSK6_POSN                                  0x6
#define _SSP1MSK_MSK6_POSITION                              0x6
#define _SSP1MSK_MSK6_SIZE                                  0x1
#define _SSP1MSK_MSK6_LENGTH                                0x1
#define _SSP1MSK_MSK6_MASK                                  0x40
#define _SSP1MSK_MSK7_POSN                                  0x7
#define _SSP1MSK_MSK7_POSITION                              0x7
#define _SSP1MSK_MSK7_SIZE                                  0x1
#define _SSP1MSK_MSK7_LENGTH                                0x1
#define _SSP1MSK_MSK7_MASK                                  0x80

// Register: SSP1STAT
#define SSP1STAT SSP1STAT
extern volatile unsigned char           SSP1STAT            __at(0xF95);
#ifndef _LIB_BUILD
asm("SSP1STAT equ 0F95h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned R_NOT_W                :1;
    };
    struct {
        unsigned                        :5;
        unsigned D_NOT_A                :1;
    };
    struct {
        unsigned BF                     :1;
        unsigned UA                     :1;
        unsigned R_nW                   :1;
        unsigned S                      :1;
        unsigned P                      :1;
        unsigned D_nA                   :1;
        unsigned CKE                    :1;
        unsigned SMP                    :1;
    };
    struct {
        unsigned                        :2;
        unsigned R_W                    :1;
        unsigned                        :2;
        unsigned D_A                    :1;
    };
    struct {
        unsigned                        :2;
        unsigned nW                     :1;
        unsigned                        :2;
        unsigned nA                     :1;
    };
    struct {
        unsigned                        :2;
        unsigned NOT_WRITE              :1;
    };
    struct {
        unsigned                        :5;
        unsigned NOT_ADDRESS            :1;
    };
    struct {
        unsigned                        :2;
        unsigned nWRITE                 :1;
        unsigned                        :2;
        unsigned nADDRESS               :1;
    };
    struct {
        unsigned                        :2;
        unsigned READ_WRITE             :1;
        unsigned                        :2;
        unsigned DATA_ADDRESS           :1;
    };
    struct {
        unsigned                        :2;
        unsigned I2C_READ               :1;
        unsigned I2C_START              :1;
        unsigned I2C_STOP               :1;
        unsigned I2C_DAT                :1;
    };
    struct {
        unsigned BF1                    :1;
        unsigned UA1                    :1;
        unsigned R                      :1;
        unsigned START                  :1;
        unsigned STOP                   :1;
        unsigned D                      :1;
        unsigned CKE1                   :1;
        unsigned SMP1                   :1;
    };
    struct {
        unsigned                        :2;
        unsigned RW                     :1;
        unsigned START1                 :1;
        unsigned STOP1                  :1;
        unsigned DA                     :1;
    };
    struct {
        unsigned                        :2;
        unsigned RW1                    :1;
        unsigned I2C_START1             :1;
        unsigned I2C_STOP2              :1;
        unsigned DA1                    :1;
    };
    struct {
        unsigned                        :2;
        unsigned I2C_READ1              :1;
        unsigned S2                     :1;
        unsigned P2                     :1;
        unsigned DATA_ADDRESS1          :1;
    };
    struct {
        unsigned                        :2;
        unsigned READ_WRITE1            :1;
        unsigned                        :2;
        unsigned D_A1                   :1;
    };
    struct {
        unsigned                        :5;
        unsigned D_NOT_A1               :1;
    };
    struct {
        unsigned                        :2;
        unsigned R_W1                   :1;
        unsigned                        :2;
        unsigned D_nA1                  :1;
    };
    struct {
        unsigned                        :2;
        unsigned R_NOT_W1               :1;
    };
    struct {
        unsigned                        :2;
        unsigned R_nW1                  :1;
        unsigned                        :2;
        unsigned I2C_DAT1               :1;
    };
    struct {
        unsigned                        :2;
        unsigned NOT_W2                 :1;
    };
    struct {
        unsigned                        :5;
        unsigned NOT_A2                 :1;
    };
    struct {
        unsigned                        :2;
        unsigned nW2                    :1;
        unsigned                        :2;
        unsigned nA2                    :1;
    };
    struct {
        unsigned                        :2;
        unsigned NOT_WRITE1             :1;
    };
    struct {
        unsigned                        :5;
        unsigned NOT_ADDRESS1           :1;
    };
    struct {
        unsigned                        :2;
        unsigned nWRITE1                :1;
        unsigned                        :2;
        unsigned nADDRESS1              :1;
    };
} SSP1STATbits_t;
extern volatile SSP1STATbits_t SSP1STATbits __at(0xF95);
// bitfield macros
#define _SSP1STAT_R_NOT_W_POSN                              0x2
#define _SSP1STAT_R_NOT_W_POSITION                          0x2
#define _SSP1STAT_R_NOT_W_SIZE                              0x1
#define _SSP1STAT_R_NOT_W_LENGTH                            0x1
#define _SSP1STAT_R_NOT_W_MASK                              0x4
#define _SSP1STAT_D_NOT_A_POSN                              0x5
#define _SSP1STAT_D_NOT_A_POSITION                          0x5
#define _SSP1STAT_D_NOT_A_SIZE                              0x1
#define _SSP1STAT_D_NOT_A_LENGTH                            0x1
#define _SSP1STAT_D_NOT_A_MASK                              0x20
#define _SSP1STAT_BF_POSN                                   0x0
#define _SSP1STAT_BF_POSITION                               0x0
#define _SSP1STAT_BF_SIZE                                   0x1
#define _SSP1STAT_BF_LENGTH                                 0x1
#define _SSP1STAT_BF_MASK                                   0x1
#define _SSP1STAT_UA_POSN                                   0x1
#define _SSP1STAT_UA_POSITION                               0x1
#define _SSP1STAT_UA_SIZE                                   0x1
#define _SSP1STAT_UA_LENGTH                                 0x1
#define _SSP1STAT_UA_MASK                                   0x2
#define _SSP1STAT_R_nW_POSN                                 0x2
#define _SSP1STAT_R_nW_POSITION                             0x2
#define _SSP1STAT_R_nW_SIZE                                 0x1
#define _SSP1STAT_R_nW_LENGTH                               0x1
#define _SSP1STAT_R_nW_MASK                                 0x4
#define _SSP1STAT_S_POSN                                    0x3
#define _SSP1STAT_S_POSITION                                0x3
#define _SSP1STAT_S_SIZE                                    0x1
#define _SSP1STAT_S_LENGTH                                  0x1
#define _SSP1STAT_S_MASK                                    0x8
#define _SSP1STAT_P_POSN                                    0x4
#define _SSP1STAT_P_POSITION                                0x4
#define _SSP1STAT_P_SIZE                                    0x1
#define _SSP1STAT_P_LENGTH                                  0x1
#define _SSP1STAT_P_MASK                                    0x10
#define _SSP1STAT_D_nA_POSN                                 0x5
#define _SSP1STAT_D_nA_POSITION                             0x5
#define _SSP1STAT_D_nA_SIZE                                 0x1
#define _SSP1STAT_D_nA_LENGTH                               0x1
#define _SSP1STAT_D_nA_MASK                                 0x20
#define _SSP1STAT_CKE_POSN                                  0x6
#define _SSP1STAT_CKE_POSITION                              0x6
#define _SSP1STAT_CKE_SIZE                                  0x1
#define _SSP1STAT_CKE_LENGTH                                0x1
#define _SSP1STAT_CKE_MASK                                  0x40
#define _SSP1STAT_SMP_POSN                                  0x7
#define _SSP1STAT_SMP_POSITION                              0x7
#define _SSP1STAT_SMP_SIZE                                  0x1
#define _SSP1STAT_SMP_LENGTH                                0x1
#define _SSP1STAT_SMP_MASK                                  0x80
#define _SSP1STAT_R_W_POSN                                  0x2
#define _SSP1STAT_R_W_POSITION                              0x2
#define _SSP1STAT_R_W_SIZE                                  0x1
#define _SSP1STAT_R_W_LENGTH                                0x1
#define _SSP1STAT_R_W_MASK                                  0x4
#define _SSP1STAT_D_A_POSN                                  0x5
#define _SSP1STAT_D_A_POSITION                              0x5
#define _SSP1STAT_D_A_SIZE                                  0x1
#define _SSP1STAT_D_A_LENGTH                                0x1
#define _SSP1STAT_D_A_MASK                                  0x20
#define _SSP1STAT_nW_POSN                                   0x2
#define _SSP1STAT_nW_POSITION                               0x2
#define _SSP1STAT_nW_SIZE                                   0x1
#define _SSP1STAT_nW_LENGTH                                 0x1
#define _SSP1STAT_nW_MASK                                   0x4
#define _SSP1STAT_nA_POSN                                   0x5
#define _SSP1STAT_nA_POSITION                               0x5
#define _SSP1STAT_nA_SIZE                                   0x1
#define _SSP1STAT_nA_LENGTH                                 0x1
#define _SSP1STAT_nA_MASK                                   0x20
#define _SSP1STAT_NOT_WRITE_POSN                            0x2
#define _SSP1STAT_NOT_WRITE_POSITION                        0x2
#define _SSP1STAT_NOT_WRITE_SIZE                            0x1
#define _SSP1STAT_NOT_WRITE_LENGTH                          0x1
#define _SSP1STAT_NOT_WRITE_MASK                            0x4
#define _SSP1STAT_NOT_ADDRESS_POSN                          0x5
#define _SSP1STAT_NOT_ADDRESS_POSITION                      0x5
#define _SSP1STAT_NOT_ADDRESS_SIZE                          0x1
#define _SSP1STAT_NOT_ADDRESS_LENGTH                        0x1
#define _SSP1STAT_NOT_ADDRESS_MASK                          0x20
#define _SSP1STAT_nWRITE_POSN                               0x2
#define _SSP1STAT_nWRITE_POSITION                           0x2
#define _SSP1STAT_nWRITE_SIZE                               0x1
#define _SSP1STAT_nWRITE_LENGTH                             0x1
#define _SSP1STAT_nWRITE_MASK                               0x4
#define _SSP1STAT_nADDRESS_POSN                             0x5
#define _SSP1STAT_nADDRESS_POSITION                         0x5
#define _SSP1STAT_nADDRESS_SIZE                             0x1
#define _SSP1STAT_nADDRESS_LENGTH                           0x1
#define _SSP1STAT_nADDRESS_MASK                             0x20
#define _SSP1STAT_READ_WRITE_POSN                           0x2
#define _SSP1STAT_READ_WRITE_POSITION                       0x2
#define _SSP1STAT_READ_WRITE_SIZE                           0x1
#define _SSP1STAT_READ_WRITE_LENGTH                         0x1
#define _SSP1STAT_READ_WRITE_MASK                           0x4
#define _SSP1STAT_DATA_ADDRESS_POSN                         0x5
#define _SSP1STAT_DATA_ADDRESS_POSITION                     0x5
#define _SSP1STAT_DATA_ADDRESS_SIZE                         0x1
#define _SSP1STAT_DATA_ADDRESS_LENGTH                       0x1
#define _SSP1STAT_DATA_ADDRESS_MASK                         0x20
#define _SSP1STAT_I2C_READ_POSN                             0x2
#define _SSP1STAT_I2C_READ_POSITION                         0x2
#define _SSP1STAT_I2C_READ_SIZE                             0x1
#define _SSP1STAT_I2C_READ_LENGTH                           0x1
#define _SSP1STAT_I2C_READ_MASK                             0x4
#define _SSP1STAT_I2C_START_POSN                            0x3
#define _SSP1STAT_I2C_START_POSITION                        0x3
#define _SSP1STAT_I2C_START_SIZE                            0x1
#define _SSP1STAT_I2C_START_LENGTH                          0x1
#define _SSP1STAT_I2C_START_MASK                            0x8
#define _SSP1STAT_I2C_STOP_POSN                             0x4
#define _SSP1STAT_I2C_STOP_POSITION                         0x4
#define _SSP1STAT_I2C_STOP_SIZE                             0x1
#define _SSP1STAT_I2C_STOP_LENGTH                           0x1
#define _SSP1STAT_I2C_STOP_MASK                             0x10
#define _SSP1STAT_I2C_DAT_POSN                              0x5
#define _SSP1STAT_I2C_DAT_POSITION                          0x5
#define _SSP1STAT_I2C_DAT_SIZE                              0x1
#define _SSP1STAT_I2C_DAT_LENGTH                            0x1
#define _SSP1STAT_I2C_DAT_MASK                              0x20
#define _SSP1STAT_BF1_POSN                                  0x0
#define _SSP1STAT_BF1_POSITION                              0x0
#define _SSP1STAT_BF1_SIZE                                  0x1
#define _SSP1STAT_BF1_LENGTH                                0x1
#define _SSP1STAT_BF1_MASK                                  0x1
#define _SSP1STAT_UA1_POSN                                  0x1
#define _SSP1STAT_UA1_POSITION                              0x1
#define _SSP1STAT_UA1_SIZE                                  0x1
#define _SSP1STAT_UA1_LENGTH                                0x1
#define _SSP1STAT_UA1_MASK                                  0x2
#define _SSP1STAT_R_POSN                                    0x2
#define _SSP1STAT_R_POSITION                                0x2
#define _SSP1STAT_R_SIZE                                    0x1
#define _SSP1STAT_R_LENGTH                                  0x1
#define _SSP1STAT_R_MASK                                    0x4
#define _SSP1STAT_START_POSN                                0x3
#define _SSP1STAT_START_POSITION                            0x3
#define _SSP1STAT_START_SIZE                                0x1
#define _SSP1STAT_START_LENGTH                              0x1
#define _SSP1STAT_START_MASK                                0x8
#define _SSP1STAT_STOP_POSN                                 0x4
#define _SSP1STAT_STOP_POSITION                             0x4
#define _SSP1STAT_STOP_SIZE                                 0x1
#define _SSP1STAT_STOP_LENGTH                               0x1
#define _SSP1STAT_STOP_MASK                                 0x10
#define _SSP1STAT_D_POSN                                    0x5
#define _SSP1STAT_D_POSITION                                0x5
#define _SSP1STAT_D_SIZE                                    0x1
#define _SSP1STAT_D_LENGTH                                  0x1
#define _SSP1STAT_D_MASK                                    0x20
#define _SSP1STAT_CKE1_POSN                                 0x6
#define _SSP1STAT_CKE1_POSITION                             0x6
#define _SSP1STAT_CKE1_SIZE                                 0x1
#define _SSP1STAT_CKE1_LENGTH                               0x1
#define _SSP1STAT_CKE1_MASK                                 0x40
#define _SSP1STAT_SMP1_POSN                                 0x7
#define _SSP1STAT_SMP1_POSITION                             0x7
#define _SSP1STAT_SMP1_SIZE                                 0x1
#define _SSP1STAT_SMP1_LENGTH                               0x1
#define _SSP1STAT_SMP1_MASK                                 0x80
#define _SSP1STAT_RW_POSN                                   0x2
#define _SSP1STAT_RW_POSITION                               0x2
#define _SSP1STAT_RW_SIZE                                   0x1
#define _SSP1STAT_RW_LENGTH                                 0x1
#define _SSP1STAT_RW_MASK                                   0x4
#define _SSP1STAT_START1_POSN                               0x3
#define _SSP1STAT_START1_POSITION                           0x3
#define _SSP1STAT_START1_SIZE                               0x1
#define _SSP1STAT_START1_LENGTH                             0x1
#define _SSP1STAT_START1_MASK                               0x8
#define _SSP1STAT_STOP1_POSN                                0x4
#define _SSP1STAT_STOP1_POSITION                            0x4
#define _SSP1STAT_STOP1_SIZE                                0x1
#define _SSP1STAT_STOP1_LENGTH                              0x1
#define _SSP1STAT_STOP1_MASK                                0x10
#define _SSP1STAT_DA_POSN                                   0x5
#define _SSP1STAT_DA_POSITION                               0x5
#define _SSP1STAT_DA_SIZE                                   0x1
#define _SSP1STAT_DA_LENGTH                                 0x1
#define _SSP1STAT_DA_MASK                                   0x20
#define _SSP1STAT_RW1_POSN                                  0x2
#define _SSP1STAT_RW1_POSITION                              0x2
#define _SSP1STAT_RW1_SIZE                                  0x1
#define _SSP1STAT_RW1_LENGTH                                0x1
#define _SSP1STAT_RW1_MASK                                  0x4
#define _SSP1STAT_I2C_START1_POSN                           0x3
#define _SSP1STAT_I2C_START1_POSITION                       0x3
#define _SSP1STAT_I2C_START1_SIZE                           0x1
#define _SSP1STAT_I2C_START1_LENGTH                         0x1
#define _SSP1STAT_I2C_START1_MASK                           0x8
#define _SSP1STAT_I2C_STOP2_POSN                            0x4
#define _SSP1STAT_I2C_STOP2_POSITION                        0x4
#define _SSP1STAT_I2C_STOP2_SIZE                            0x1
#define _SSP1STAT_I2C_STOP2_LENGTH                          0x1
#define _SSP1STAT_I2C_STOP2_MASK                            0x10
#define _SSP1STAT_DA1_POSN                                  0x5
#define _SSP1STAT_DA1_POSITION                              0x5
#define _SSP1STAT_DA1_SIZE                                  0x1
#define _SSP1STAT_DA1_LENGTH                                0x1
#define _SSP1STAT_DA1_MASK                                  0x20
#define _SSP1STAT_I2C_READ1_POSN                            0x2
#define _SSP1STAT_I2C_READ1_POSITION                        0x2
#define _SSP1STAT_I2C_READ1_SIZE                            0x1
#define _SSP1STAT_I2C_READ1_LENGTH                          0x1
#define _SSP1STAT_I2C_READ1_MASK                            0x4
#define _SSP1STAT_S2_POSN                                   0x3
#define _SSP1STAT_S2_POSITION                               0x3
#define _SSP1STAT_S2_SIZE                                   0x1
#define _SSP1STAT_S2_LENGTH                                 0x1
#define _SSP1STAT_S2_MASK                                   0x8
#define _SSP1STAT_P2_POSN                                   0x4
#define _SSP1STAT_P2_POSITION                               0x4
#define _SSP1STAT_P2_SIZE                                   0x1
#define _SSP1STAT_P2_LENGTH                                 0x1
#define _SSP1STAT_P2_MASK                                   0x10
#define _SSP1STAT_DATA_ADDRESS1_POSN                        0x5
#define _SSP1STAT_DATA_ADDRESS1_POSITION                    0x5
#define _SSP1STAT_DATA_ADDRESS1_SIZE                        0x1
#define _SSP1STAT_DATA_ADDRESS1_LENGTH                      0x1
#define _SSP1STAT_DATA_ADDRESS1_MASK                        0x20
#define _SSP1STAT_READ_WRITE1_POSN                          0x2
#define _SSP1STAT_READ_WRITE1_POSITION                      0x2
#define _SSP1STAT_READ_WRITE1_SIZE                          0x1
#define _SSP1STAT_READ_WRITE1_LENGTH                        0x1
#define _SSP1STAT_READ_WRITE1_MASK                          0x4
#define _SSP1STAT_D_A1_POSN                                 0x5
#define _SSP1STAT_D_A1_POSITION                             0x5
#define _SSP1STAT_D_A1_SIZE                                 0x1
#define _SSP1STAT_D_A1_LENGTH                               0x1
#define _SSP1STAT_D_A1_MASK                                 0x20
#define _SSP1STAT_D_NOT_A1_POSN                             0x5
#define _SSP1STAT_D_NOT_A1_POSITION                         0x5
#define _SSP1STAT_D_NOT_A1_SIZE                             0x1
#define _SSP1STAT_D_NOT_A1_LENGTH                           0x1
#define _SSP1STAT_D_NOT_A1_MASK                             0x20
#define _SSP1STAT_R_W1_POSN                                 0x2
#define _SSP1STAT_R_W1_POSITION                             0x2
#define _SSP1STAT_R_W1_SIZE                                 0x1
#define _SSP1STAT_R_W1_LENGTH                               0x1
#define _SSP1STAT_R_W1_MASK                                 0x4
#define _SSP1STAT_D_nA1_POSN                                0x5
#define _SSP1STAT_D_nA1_POSITION                            0x5
#define _SSP1STAT_D_nA1_SIZE                                0x1
#define _SSP1STAT_D_nA1_LENGTH                              0x1
#define _SSP1STAT_D_nA1_MASK                                0x20
#define _SSP1STAT_R_NOT_W1_POSN                             0x2
#define _SSP1STAT_R_NOT_W1_POSITION                         0x2
#define _SSP1STAT_R_NOT_W1_SIZE                             0x1
#define _SSP1STAT_R_NOT_W1_LENGTH                           0x1
#define _SSP1STAT_R_NOT_W1_MASK                             0x4
#define _SSP1STAT_R_nW1_POSN                                0x2
#define _SSP1STAT_R_nW1_POSITION                            0x2
#define _SSP1STAT_R_nW1_SIZE                                0x1
#define _SSP1STAT_R_nW1_LENGTH                              0x1
#define _SSP1STAT_R_nW1_MASK                                0x4
#define _SSP1STAT_I2C_DAT1_POSN                             0x5
#define _SSP1STAT_I2C_DAT1_POSITION                         0x5
#define _SSP1STAT_I2C_DAT1_SIZE                             0x1
#define _SSP1STAT_I2C_DAT1_LENGTH                           0x1
#define _SSP1STAT_I2C_DAT1_MASK                             0x20
#define _SSP1STAT_NOT_W2_POSN                               0x2
#define _SSP1STAT_NOT_W2_POSITION                           0x2
#define _SSP1STAT_NOT_W2_SIZE                               0x1
#define _SSP1STAT_NOT_W2_LENGTH                             0x1
#define _SSP1STAT_NOT_W2_MASK                               0x4
#define _SSP1STAT_NOT_A2_POSN                               0x5
#define _SSP1STAT_NOT_A2_POSITION                           0x5
#define _SSP1STAT_NOT_A2_SIZE                               0x1
#define _SSP1STAT_NOT_A2_LENGTH                             0x1
#define _SSP1STAT_NOT_A2_MASK                               0x20
#define _SSP1STAT_nW2_POSN                                  0x2
#define _SSP1STAT_nW2_POSITION                              0x2
#define _SSP1STAT_nW2_SIZE                                  0x1
#define _SSP1STAT_nW2_LENGTH                                0x1
#define _SSP1STAT_nW2_MASK                                  0x4
#define _SSP1STAT_nA2_POSN                                  0x5
#define _SSP1STAT_nA2_POSITION                              0x5
#define _SSP1STAT_nA2_SIZE                                  0x1
#define _SSP1STAT_nA2_LENGTH                                0x1
#define _SSP1STAT_nA2_MASK                                  0x20
#define _SSP1STAT_NOT_WRITE1_POSN                           0x2
#define _SSP1STAT_NOT_WRITE1_POSITION                       0x2
#define _SSP1STAT_NOT_WRITE1_SIZE                           0x1
#define _SSP1STAT_NOT_WRITE1_LENGTH                         0x1
#define _SSP1STAT_NOT_WRITE1_MASK                           0x4
#define _SSP1STAT_NOT_ADDRESS1_POSN                         0x5
#define _SSP1STAT_NOT_ADDRESS1_POSITION                     0x5
#define _SSP1STAT_NOT_ADDRESS1_SIZE                         0x1
#define _SSP1STAT_NOT_ADDRESS1_LENGTH                       0x1
#define _SSP1STAT_NOT_ADDRESS1_MASK                         0x20
#define _SSP1STAT_nWRITE1_POSN                              0x2
#define _SSP1STAT_nWRITE1_POSITION                          0x2
#define _SSP1STAT_nWRITE1_SIZE                              0x1
#define _SSP1STAT_nWRITE1_LENGTH                            0x1
#define _SSP1STAT_nWRITE1_MASK                              0x4
#define _SSP1STAT_nADDRESS1_POSN                            0x5
#define _SSP1STAT_nADDRESS1_POSITION                        0x5
#define _SSP1STAT_nADDRESS1_SIZE                            0x1
#define _SSP1STAT_nADDRESS1_LENGTH                          0x1
#define _SSP1STAT_nADDRESS1_MASK                            0x20

// Register: SSP1CON1
#define SSP1CON1 SSP1CON1
extern volatile unsigned char           SSP1CON1            __at(0xF96);
#ifndef _LIB_BUILD
asm("SSP1CON1 equ 0F96h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSPM                   :4;
        unsigned CKP                    :1;
        unsigned SSPEN                  :1;
        unsigned SSPOV                  :1;
        unsigned WCOL                   :1;
    };
    struct {
        unsigned SSPM0                  :1;
        unsigned SSPM1                  :1;
        unsigned SSPM2                  :1;
        unsigned SSPM3                  :1;
    };
    struct {
        unsigned SSPM01                 :1;
        unsigned SSPM11                 :1;
        unsigned SSPM21                 :1;
        unsigned SSPM31                 :1;
        unsigned CKP1                   :1;
        unsigned SSPEN1                 :1;
        unsigned SSPOV1                 :1;
        unsigned WCOL1                  :1;
    };
} SSP1CON1bits_t;
extern volatile SSP1CON1bits_t SSP1CON1bits __at(0xF96);
// bitfield macros
#define _SSP1CON1_SSPM_POSN                                 0x0
#define _SSP1CON1_SSPM_POSITION                             0x0
#define _SSP1CON1_SSPM_SIZE                                 0x4
#define _SSP1CON1_SSPM_LENGTH                               0x4
#define _SSP1CON1_SSPM_MASK                                 0xF
#define _SSP1CON1_CKP_POSN                                  0x4
#define _SSP1CON1_CKP_POSITION                              0x4
#define _SSP1CON1_CKP_SIZE                                  0x1
#define _SSP1CON1_CKP_LENGTH                                0x1
#define _SSP1CON1_CKP_MASK                                  0x10
#define _SSP1CON1_SSPEN_POSN                                0x5
#define _SSP1CON1_SSPEN_POSITION                            0x5
#define _SSP1CON1_SSPEN_SIZE                                0x1
#define _SSP1CON1_SSPEN_LENGTH                              0x1
#define _SSP1CON1_SSPEN_MASK                                0x20
#define _SSP1CON1_SSPOV_POSN                                0x6
#define _SSP1CON1_SSPOV_POSITION                            0x6
#define _SSP1CON1_SSPOV_SIZE                                0x1
#define _SSP1CON1_SSPOV_LENGTH                              0x1
#define _SSP1CON1_SSPOV_MASK                                0x40
#define _SSP1CON1_WCOL_POSN                                 0x7
#define _SSP1CON1_WCOL_POSITION                             0x7
#define _SSP1CON1_WCOL_SIZE                                 0x1
#define _SSP1CON1_WCOL_LENGTH                               0x1
#define _SSP1CON1_WCOL_MASK                                 0x80
#define _SSP1CON1_SSPM0_POSN                                0x0
#define _SSP1CON1_SSPM0_POSITION                            0x0
#define _SSP1CON1_SSPM0_SIZE                                0x1
#define _SSP1CON1_SSPM0_LENGTH                              0x1
#define _SSP1CON1_SSPM0_MASK                                0x1
#define _SSP1CON1_SSPM1_POSN                                0x1
#define _SSP1CON1_SSPM1_POSITION                            0x1
#define _SSP1CON1_SSPM1_SIZE                                0x1
#define _SSP1CON1_SSPM1_LENGTH                              0x1
#define _SSP1CON1_SSPM1_MASK                                0x2
#define _SSP1CON1_SSPM2_POSN                                0x2
#define _SSP1CON1_SSPM2_POSITION                            0x2
#define _SSP1CON1_SSPM2_SIZE                                0x1
#define _SSP1CON1_SSPM2_LENGTH                              0x1
#define _SSP1CON1_SSPM2_MASK                                0x4
#define _SSP1CON1_SSPM3_POSN                                0x3
#define _SSP1CON1_SSPM3_POSITION                            0x3
#define _SSP1CON1_SSPM3_SIZE                                0x1
#define _SSP1CON1_SSPM3_LENGTH                              0x1
#define _SSP1CON1_SSPM3_MASK                                0x8
#define _SSP1CON1_SSPM01_POSN                               0x0
#define _SSP1CON1_SSPM01_POSITION                           0x0
#define _SSP1CON1_SSPM01_SIZE                               0x1
#define _SSP1CON1_SSPM01_LENGTH                             0x1
#define _SSP1CON1_SSPM01_MASK                               0x1
#define _SSP1CON1_SSPM11_POSN                               0x1
#define _SSP1CON1_SSPM11_POSITION                           0x1
#define _SSP1CON1_SSPM11_SIZE                               0x1
#define _SSP1CON1_SSPM11_LENGTH                             0x1
#define _SSP1CON1_SSPM11_MASK                               0x2
#define _SSP1CON1_SSPM21_POSN                               0x2
#define _SSP1CON1_SSPM21_POSITION                           0x2
#define _SSP1CON1_SSPM21_SIZE                               0x1
#define _SSP1CON1_SSPM21_LENGTH                             0x1
#define _SSP1CON1_SSPM21_MASK                               0x4
#define _SSP1CON1_SSPM31_POSN                               0x3
#define _SSP1CON1_SSPM31_POSITION                           0x3
#define _SSP1CON1_SSPM31_SIZE                               0x1
#define _SSP1CON1_SSPM31_LENGTH                             0x1
#define _SSP1CON1_SSPM31_MASK                               0x8
#define _SSP1CON1_CKP1_POSN                                 0x4
#define _SSP1CON1_CKP1_POSITION                             0x4
#define _SSP1CON1_CKP1_SIZE                                 0x1
#define _SSP1CON1_CKP1_LENGTH                               0x1
#define _SSP1CON1_CKP1_MASK                                 0x10
#define _SSP1CON1_SSPEN1_POSN                               0x5
#define _SSP1CON1_SSPEN1_POSITION                           0x5
#define _SSP1CON1_SSPEN1_SIZE                               0x1
#define _SSP1CON1_SSPEN1_LENGTH                             0x1
#define _SSP1CON1_SSPEN1_MASK                               0x20
#define _SSP1CON1_SSPOV1_POSN                               0x6
#define _SSP1CON1_SSPOV1_POSITION                           0x6
#define _SSP1CON1_SSPOV1_SIZE                               0x1
#define _SSP1CON1_SSPOV1_LENGTH                             0x1
#define _SSP1CON1_SSPOV1_MASK                               0x40
#define _SSP1CON1_WCOL1_POSN                                0x7
#define _SSP1CON1_WCOL1_POSITION                            0x7
#define _SSP1CON1_WCOL1_SIZE                                0x1
#define _SSP1CON1_WCOL1_LENGTH                              0x1
#define _SSP1CON1_WCOL1_MASK                                0x80

// Register: SSP1CON2
#define SSP1CON2 SSP1CON2
extern volatile unsigned char           SSP1CON2            __at(0xF97);
#ifndef _LIB_BUILD
asm("SSP1CON2 equ 0F97h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SEN                    :1;
        unsigned RSEN                   :1;
        unsigned PEN                    :1;
        unsigned RCEN                   :1;
        unsigned ACKEN                  :1;
        unsigned ACKDT                  :1;
        unsigned ACKSTAT                :1;
        unsigned GCEN                   :1;
    };
    struct {
        unsigned                        :1;
        unsigned ADMSK                  :5;
    };
    struct {
        unsigned                        :1;
        unsigned ADMSK1                 :1;
        unsigned ADMSK2                 :1;
        unsigned ADMSK3                 :1;
        unsigned ADMSK4                 :1;
        unsigned ADMSK5                 :1;
    };
    struct {
        unsigned SEN1                   :1;
        unsigned ADMSK11                :1;
        unsigned ADMSK21                :1;
        unsigned ADMSK31                :1;
        unsigned ACKEN1                 :1;
        unsigned ACKDT1                 :1;
        unsigned ACKSTAT1               :1;
        unsigned GCEN1                  :1;
    };
    struct {
        unsigned                        :1;
        unsigned RSEN1                  :1;
        unsigned PEN1                   :1;
        unsigned RCEN1                  :1;
        unsigned ADMSK41                :1;
        unsigned ADMSK51                :1;
    };
} SSP1CON2bits_t;
extern volatile SSP1CON2bits_t SSP1CON2bits __at(0xF97);
// bitfield macros
#define _SSP1CON2_SEN_POSN                                  0x0
#define _SSP1CON2_SEN_POSITION                              0x0
#define _SSP1CON2_SEN_SIZE                                  0x1
#define _SSP1CON2_SEN_LENGTH                                0x1
#define _SSP1CON2_SEN_MASK                                  0x1
#define _SSP1CON2_RSEN_POSN                                 0x1
#define _SSP1CON2_RSEN_POSITION                             0x1
#define _SSP1CON2_RSEN_SIZE                                 0x1
#define _SSP1CON2_RSEN_LENGTH                               0x1
#define _SSP1CON2_RSEN_MASK                                 0x2
#define _SSP1CON2_PEN_POSN                                  0x2
#define _SSP1CON2_PEN_POSITION                              0x2
#define _SSP1CON2_PEN_SIZE                                  0x1
#define _SSP1CON2_PEN_LENGTH                                0x1
#define _SSP1CON2_PEN_MASK                                  0x4
#define _SSP1CON2_RCEN_POSN                                 0x3
#define _SSP1CON2_RCEN_POSITION                             0x3
#define _SSP1CON2_RCEN_SIZE                                 0x1
#define _SSP1CON2_RCEN_LENGTH                               0x1
#define _SSP1CON2_RCEN_MASK                                 0x8
#define _SSP1CON2_ACKEN_POSN                                0x4
#define _SSP1CON2_ACKEN_POSITION                            0x4
#define _SSP1CON2_ACKEN_SIZE                                0x1
#define _SSP1CON2_ACKEN_LENGTH                              0x1
#define _SSP1CON2_ACKEN_MASK                                0x10
#define _SSP1CON2_ACKDT_POSN                                0x5
#define _SSP1CON2_ACKDT_POSITION                            0x5
#define _SSP1CON2_ACKDT_SIZE                                0x1
#define _SSP1CON2_ACKDT_LENGTH                              0x1
#define _SSP1CON2_ACKDT_MASK                                0x20
#define _SSP1CON2_ACKSTAT_POSN                              0x6
#define _SSP1CON2_ACKSTAT_POSITION                          0x6
#define _SSP1CON2_ACKSTAT_SIZE                              0x1
#define _SSP1CON2_ACKSTAT_LENGTH                            0x1
#define _SSP1CON2_ACKSTAT_MASK                              0x40
#define _SSP1CON2_GCEN_POSN                                 0x7
#define _SSP1CON2_GCEN_POSITION                             0x7
#define _SSP1CON2_GCEN_SIZE                                 0x1
#define _SSP1CON2_GCEN_LENGTH                               0x1
#define _SSP1CON2_GCEN_MASK                                 0x80
#define _SSP1CON2_ADMSK_POSN                                0x1
#define _SSP1CON2_ADMSK_POSITION                            0x1
#define _SSP1CON2_ADMSK_SIZE                                0x5
#define _SSP1CON2_ADMSK_LENGTH                              0x5
#define _SSP1CON2_ADMSK_MASK                                0x3E
#define _SSP1CON2_ADMSK1_POSN                               0x1
#define _SSP1CON2_ADMSK1_POSITION                           0x1
#define _SSP1CON2_ADMSK1_SIZE                               0x1
#define _SSP1CON2_ADMSK1_LENGTH                             0x1
#define _SSP1CON2_ADMSK1_MASK                               0x2
#define _SSP1CON2_ADMSK2_POSN                               0x2
#define _SSP1CON2_ADMSK2_POSITION                           0x2
#define _SSP1CON2_ADMSK2_SIZE                               0x1
#define _SSP1CON2_ADMSK2_LENGTH                             0x1
#define _SSP1CON2_ADMSK2_MASK                               0x4
#define _SSP1CON2_ADMSK3_POSN                               0x3
#define _SSP1CON2_ADMSK3_POSITION                           0x3
#define _SSP1CON2_ADMSK3_SIZE                               0x1
#define _SSP1CON2_ADMSK3_LENGTH                             0x1
#define _SSP1CON2_ADMSK3_MASK                               0x8
#define _SSP1CON2_ADMSK4_POSN                               0x4
#define _SSP1CON2_ADMSK4_POSITION                           0x4
#define _SSP1CON2_ADMSK4_SIZE                               0x1
#define _SSP1CON2_ADMSK4_LENGTH                             0x1
#define _SSP1CON2_ADMSK4_MASK                               0x10
#define _SSP1CON2_ADMSK5_POSN                               0x5
#define _SSP1CON2_ADMSK5_POSITION                           0x5
#define _SSP1CON2_ADMSK5_SIZE                               0x1
#define _SSP1CON2_ADMSK5_LENGTH                             0x1
#define _SSP1CON2_ADMSK5_MASK                               0x20
#define _SSP1CON2_SEN1_POSN                                 0x0
#define _SSP1CON2_SEN1_POSITION                             0x0
#define _SSP1CON2_SEN1_SIZE                                 0x1
#define _SSP1CON2_SEN1_LENGTH                               0x1
#define _SSP1CON2_SEN1_MASK                                 0x1
#define _SSP1CON2_ADMSK11_POSN                              0x1
#define _SSP1CON2_ADMSK11_POSITION                          0x1
#define _SSP1CON2_ADMSK11_SIZE                              0x1
#define _SSP1CON2_ADMSK11_LENGTH                            0x1
#define _SSP1CON2_ADMSK11_MASK                              0x2
#define _SSP1CON2_ADMSK21_POSN                              0x2
#define _SSP1CON2_ADMSK21_POSITION                          0x2
#define _SSP1CON2_ADMSK21_SIZE                              0x1
#define _SSP1CON2_ADMSK21_LENGTH                            0x1
#define _SSP1CON2_ADMSK21_MASK                              0x4
#define _SSP1CON2_ADMSK31_POSN                              0x3
#define _SSP1CON2_ADMSK31_POSITION                          0x3
#define _SSP1CON2_ADMSK31_SIZE                              0x1
#define _SSP1CON2_ADMSK31_LENGTH                            0x1
#define _SSP1CON2_ADMSK31_MASK                              0x8
#define _SSP1CON2_ACKEN1_POSN                               0x4
#define _SSP1CON2_ACKEN1_POSITION                           0x4
#define _SSP1CON2_ACKEN1_SIZE                               0x1
#define _SSP1CON2_ACKEN1_LENGTH                             0x1
#define _SSP1CON2_ACKEN1_MASK                               0x10
#define _SSP1CON2_ACKDT1_POSN                               0x5
#define _SSP1CON2_ACKDT1_POSITION                           0x5
#define _SSP1CON2_ACKDT1_SIZE                               0x1
#define _SSP1CON2_ACKDT1_LENGTH                             0x1
#define _SSP1CON2_ACKDT1_MASK                               0x20
#define _SSP1CON2_ACKSTAT1_POSN                             0x6
#define _SSP1CON2_ACKSTAT1_POSITION                         0x6
#define _SSP1CON2_ACKSTAT1_SIZE                             0x1
#define _SSP1CON2_ACKSTAT1_LENGTH                           0x1
#define _SSP1CON2_ACKSTAT1_MASK                             0x40
#define _SSP1CON2_GCEN1_POSN                                0x7
#define _SSP1CON2_GCEN1_POSITION                            0x7
#define _SSP1CON2_GCEN1_SIZE                                0x1
#define _SSP1CON2_GCEN1_LENGTH                              0x1
#define _SSP1CON2_GCEN1_MASK                                0x80
#define _SSP1CON2_RSEN1_POSN                                0x1
#define _SSP1CON2_RSEN1_POSITION                            0x1
#define _SSP1CON2_RSEN1_SIZE                                0x1
#define _SSP1CON2_RSEN1_LENGTH                              0x1
#define _SSP1CON2_RSEN1_MASK                                0x2
#define _SSP1CON2_PEN1_POSN                                 0x2
#define _SSP1CON2_PEN1_POSITION                             0x2
#define _SSP1CON2_PEN1_SIZE                                 0x1
#define _SSP1CON2_PEN1_LENGTH                               0x1
#define _SSP1CON2_PEN1_MASK                                 0x4
#define _SSP1CON2_RCEN1_POSN                                0x3
#define _SSP1CON2_RCEN1_POSITION                            0x3
#define _SSP1CON2_RCEN1_SIZE                                0x1
#define _SSP1CON2_RCEN1_LENGTH                              0x1
#define _SSP1CON2_RCEN1_MASK                                0x8
#define _SSP1CON2_ADMSK41_POSN                              0x4
#define _SSP1CON2_ADMSK41_POSITION                          0x4
#define _SSP1CON2_ADMSK41_SIZE                              0x1
#define _SSP1CON2_ADMSK41_LENGTH                            0x1
#define _SSP1CON2_ADMSK41_MASK                              0x10
#define _SSP1CON2_ADMSK51_POSN                              0x5
#define _SSP1CON2_ADMSK51_POSITION                          0x5
#define _SSP1CON2_ADMSK51_SIZE                              0x1
#define _SSP1CON2_ADMSK51_LENGTH                            0x1
#define _SSP1CON2_ADMSK51_MASK                              0x20

// Register: SSP1CON3
#define SSP1CON3 SSP1CON3
extern volatile unsigned char           SSP1CON3            __at(0xF98);
#ifndef _LIB_BUILD
asm("SSP1CON3 equ 0F98h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DHEN                   :1;
        unsigned AHEN                   :1;
        unsigned SBCDE                  :1;
        unsigned SDAHT                  :1;
        unsigned BOEN                   :1;
        unsigned SCIE                   :1;
        unsigned PCIE                   :1;
        unsigned ACKTIM                 :1;
    };
} SSP1CON3bits_t;
extern volatile SSP1CON3bits_t SSP1CON3bits __at(0xF98);
// bitfield macros
#define _SSP1CON3_DHEN_POSN                                 0x0
#define _SSP1CON3_DHEN_POSITION                             0x0
#define _SSP1CON3_DHEN_SIZE                                 0x1
#define _SSP1CON3_DHEN_LENGTH                               0x1
#define _SSP1CON3_DHEN_MASK                                 0x1
#define _SSP1CON3_AHEN_POSN                                 0x1
#define _SSP1CON3_AHEN_POSITION                             0x1
#define _SSP1CON3_AHEN_SIZE                                 0x1
#define _SSP1CON3_AHEN_LENGTH                               0x1
#define _SSP1CON3_AHEN_MASK                                 0x2
#define _SSP1CON3_SBCDE_POSN                                0x2
#define _SSP1CON3_SBCDE_POSITION                            0x2
#define _SSP1CON3_SBCDE_SIZE                                0x1
#define _SSP1CON3_SBCDE_LENGTH                              0x1
#define _SSP1CON3_SBCDE_MASK                                0x4
#define _SSP1CON3_SDAHT_POSN                                0x3
#define _SSP1CON3_SDAHT_POSITION                            0x3
#define _SSP1CON3_SDAHT_SIZE                                0x1
#define _SSP1CON3_SDAHT_LENGTH                              0x1
#define _SSP1CON3_SDAHT_MASK                                0x8
#define _SSP1CON3_BOEN_POSN                                 0x4
#define _SSP1CON3_BOEN_POSITION                             0x4
#define _SSP1CON3_BOEN_SIZE                                 0x1
#define _SSP1CON3_BOEN_LENGTH                               0x1
#define _SSP1CON3_BOEN_MASK                                 0x10
#define _SSP1CON3_SCIE_POSN                                 0x5
#define _SSP1CON3_SCIE_POSITION                             0x5
#define _SSP1CON3_SCIE_SIZE                                 0x1
#define _SSP1CON3_SCIE_LENGTH                               0x1
#define _SSP1CON3_SCIE_MASK                                 0x20
#define _SSP1CON3_PCIE_POSN                                 0x6
#define _SSP1CON3_PCIE_POSITION                             0x6
#define _SSP1CON3_PCIE_SIZE                                 0x1
#define _SSP1CON3_PCIE_LENGTH                               0x1
#define _SSP1CON3_PCIE_MASK                                 0x40
#define _SSP1CON3_ACKTIM_POSN                               0x7
#define _SSP1CON3_ACKTIM_POSITION                           0x7
#define _SSP1CON3_ACKTIM_SIZE                               0x1
#define _SSP1CON3_ACKTIM_LENGTH                             0x1
#define _SSP1CON3_ACKTIM_MASK                               0x80

// Register: RC1REG
#define RC1REG RC1REG
extern volatile unsigned char           RC1REG              __at(0xF99);
#ifndef _LIB_BUILD
asm("RC1REG equ 0F99h");
#endif
// aliases
extern volatile unsigned char           RCREG               __at(0xF99);
#ifndef _LIB_BUILD
asm("RCREG equ 0F99h");
#endif
extern volatile unsigned char           RCREG1              __at(0xF99);
#ifndef _LIB_BUILD
asm("RCREG1 equ 0F99h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC1REG                 :8;
    };
} RC1REGbits_t;
extern volatile RC1REGbits_t RC1REGbits __at(0xF99);
// bitfield macros
#define _RC1REG_RC1REG_POSN                                 0x0
#define _RC1REG_RC1REG_POSITION                             0x0
#define _RC1REG_RC1REG_SIZE                                 0x8
#define _RC1REG_RC1REG_LENGTH                               0x8
#define _RC1REG_RC1REG_MASK                                 0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned RC1REG                 :8;
    };
} RCREGbits_t;
extern volatile RCREGbits_t RCREGbits __at(0xF99);
// bitfield macros
#define _RCREG_RC1REG_POSN                                  0x0
#define _RCREG_RC1REG_POSITION                              0x0
#define _RCREG_RC1REG_SIZE                                  0x8
#define _RCREG_RC1REG_LENGTH                                0x8
#define _RCREG_RC1REG_MASK                                  0xFF
typedef union {
    struct {
        unsigned RC1REG                 :8;
    };
} RCREG1bits_t;
extern volatile RCREG1bits_t RCREG1bits __at(0xF99);
// bitfield macros
#define _RCREG1_RC1REG_POSN                                 0x0
#define _RCREG1_RC1REG_POSITION                             0x0
#define _RCREG1_RC1REG_SIZE                                 0x8
#define _RCREG1_RC1REG_LENGTH                               0x8
#define _RCREG1_RC1REG_MASK                                 0xFF

// Register: TX1REG
#define TX1REG TX1REG
extern volatile unsigned char           TX1REG              __at(0xF9A);
#ifndef _LIB_BUILD
asm("TX1REG equ 0F9Ah");
#endif
// aliases
extern volatile unsigned char           TXREG1              __at(0xF9A);
#ifndef _LIB_BUILD
asm("TXREG1 equ 0F9Ah");
#endif
extern volatile unsigned char           TXREG               __at(0xF9A);
#ifndef _LIB_BUILD
asm("TXREG equ 0F9Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TX1REG                 :8;
    };
} TX1REGbits_t;
extern volatile TX1REGbits_t TX1REGbits __at(0xF9A);
// bitfield macros
#define _TX1REG_TX1REG_POSN                                 0x0
#define _TX1REG_TX1REG_POSITION                             0x0
#define _TX1REG_TX1REG_SIZE                                 0x8
#define _TX1REG_TX1REG_LENGTH                               0x8
#define _TX1REG_TX1REG_MASK                                 0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned TX1REG                 :8;
    };
} TXREG1bits_t;
extern volatile TXREG1bits_t TXREG1bits __at(0xF9A);
// bitfield macros
#define _TXREG1_TX1REG_POSN                                 0x0
#define _TXREG1_TX1REG_POSITION                             0x0
#define _TXREG1_TX1REG_SIZE                                 0x8
#define _TXREG1_TX1REG_LENGTH                               0x8
#define _TXREG1_TX1REG_MASK                                 0xFF
typedef union {
    struct {
        unsigned TX1REG                 :8;
    };
} TXREGbits_t;
extern volatile TXREGbits_t TXREGbits __at(0xF9A);
// bitfield macros
#define _TXREG_TX1REG_POSN                                  0x0
#define _TXREG_TX1REG_POSITION                              0x0
#define _TXREG_TX1REG_SIZE                                  0x8
#define _TXREG_TX1REG_LENGTH                                0x8
#define _TXREG_TX1REG_MASK                                  0xFF

// Register: SP1BRG
#define SP1BRG SP1BRG
extern volatile unsigned short          SP1BRG              __at(0xF9B);
#ifndef _LIB_BUILD
asm("SP1BRG equ 0F9Bh");
#endif

// Register: SP1BRGL
#define SP1BRGL SP1BRGL
extern volatile unsigned char           SP1BRGL             __at(0xF9B);
#ifndef _LIB_BUILD
asm("SP1BRGL equ 0F9Bh");
#endif
// aliases
extern volatile unsigned char           SPBRG               __at(0xF9B);
#ifndef _LIB_BUILD
asm("SPBRG equ 0F9Bh");
#endif
extern volatile unsigned char           SPBRG1              __at(0xF9B);
#ifndef _LIB_BUILD
asm("SPBRG1 equ 0F9Bh");
#endif
extern volatile unsigned char           SPBRGL              __at(0xF9B);
#ifndef _LIB_BUILD
asm("SPBRGL equ 0F9Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SP1BRGL                :8;
    };
} SP1BRGLbits_t;
extern volatile SP1BRGLbits_t SP1BRGLbits __at(0xF9B);
// bitfield macros
#define _SP1BRGL_SP1BRGL_POSN                               0x0
#define _SP1BRGL_SP1BRGL_POSITION                           0x0
#define _SP1BRGL_SP1BRGL_SIZE                               0x8
#define _SP1BRGL_SP1BRGL_LENGTH                             0x8
#define _SP1BRGL_SP1BRGL_MASK                               0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned SP1BRGL                :8;
    };
} SPBRGbits_t;
extern volatile SPBRGbits_t SPBRGbits __at(0xF9B);
// bitfield macros
#define _SPBRG_SP1BRGL_POSN                                 0x0
#define _SPBRG_SP1BRGL_POSITION                             0x0
#define _SPBRG_SP1BRGL_SIZE                                 0x8
#define _SPBRG_SP1BRGL_LENGTH                               0x8
#define _SPBRG_SP1BRGL_MASK                                 0xFF
typedef union {
    struct {
        unsigned SP1BRGL                :8;
    };
} SPBRG1bits_t;
extern volatile SPBRG1bits_t SPBRG1bits __at(0xF9B);
// bitfield macros
#define _SPBRG1_SP1BRGL_POSN                                0x0
#define _SPBRG1_SP1BRGL_POSITION                            0x0
#define _SPBRG1_SP1BRGL_SIZE                                0x8
#define _SPBRG1_SP1BRGL_LENGTH                              0x8
#define _SPBRG1_SP1BRGL_MASK                                0xFF
typedef union {
    struct {
        unsigned SP1BRGL                :8;
    };
} SPBRGLbits_t;
extern volatile SPBRGLbits_t SPBRGLbits __at(0xF9B);
// bitfield macros
#define _SPBRGL_SP1BRGL_POSN                                0x0
#define _SPBRGL_SP1BRGL_POSITION                            0x0
#define _SPBRGL_SP1BRGL_SIZE                                0x8
#define _SPBRGL_SP1BRGL_LENGTH                              0x8
#define _SPBRGL_SP1BRGL_MASK                                0xFF

// Register: SP1BRGH
#define SP1BRGH SP1BRGH
extern volatile unsigned char           SP1BRGH             __at(0xF9C);
#ifndef _LIB_BUILD
asm("SP1BRGH equ 0F9Ch");
#endif
// aliases
extern volatile unsigned char           SPBRGH              __at(0xF9C);
#ifndef _LIB_BUILD
asm("SPBRGH equ 0F9Ch");
#endif
extern volatile unsigned char           SPBRGH1             __at(0xF9C);
#ifndef _LIB_BUILD
asm("SPBRGH1 equ 0F9Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SP1BRGH                :8;
    };
} SP1BRGHbits_t;
extern volatile SP1BRGHbits_t SP1BRGHbits __at(0xF9C);
// bitfield macros
#define _SP1BRGH_SP1BRGH_POSN                               0x0
#define _SP1BRGH_SP1BRGH_POSITION                           0x0
#define _SP1BRGH_SP1BRGH_SIZE                               0x8
#define _SP1BRGH_SP1BRGH_LENGTH                             0x8
#define _SP1BRGH_SP1BRGH_MASK                               0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned SP1BRGH                :8;
    };
} SPBRGHbits_t;
extern volatile SPBRGHbits_t SPBRGHbits __at(0xF9C);
// bitfield macros
#define _SPBRGH_SP1BRGH_POSN                                0x0
#define _SPBRGH_SP1BRGH_POSITION                            0x0
#define _SPBRGH_SP1BRGH_SIZE                                0x8
#define _SPBRGH_SP1BRGH_LENGTH                              0x8
#define _SPBRGH_SP1BRGH_MASK                                0xFF
typedef union {
    struct {
        unsigned SP1BRGH                :8;
    };
} SPBRGH1bits_t;
extern volatile SPBRGH1bits_t SPBRGH1bits __at(0xF9C);
// bitfield macros
#define _SPBRGH1_SP1BRGH_POSN                               0x0
#define _SPBRGH1_SP1BRGH_POSITION                           0x0
#define _SPBRGH1_SP1BRGH_SIZE                               0x8
#define _SPBRGH1_SP1BRGH_LENGTH                             0x8
#define _SPBRGH1_SP1BRGH_MASK                               0xFF

// Register: RC1STA
#define RC1STA RC1STA
extern volatile unsigned char           RC1STA              __at(0xF9D);
#ifndef _LIB_BUILD
asm("RC1STA equ 0F9Dh");
#endif
// aliases
extern volatile unsigned char           RCSTA1              __at(0xF9D);
#ifndef _LIB_BUILD
asm("RCSTA1 equ 0F9Dh");
#endif
extern volatile unsigned char           RCSTA               __at(0xF9D);
#ifndef _LIB_BUILD
asm("RCSTA equ 0F9Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RX9D                   :1;
        unsigned OERR                   :1;
        unsigned FERR                   :1;
        unsigned ADDEN                  :1;
        unsigned CREN                   :1;
        unsigned SREN                   :1;
        unsigned RX9                    :1;
        unsigned SPEN                   :1;
    };
    struct {
        unsigned                        :6;
        unsigned RC8_9                  :1;
    };
    struct {
        unsigned                        :6;
        unsigned RC9                    :1;
    };
    struct {
        unsigned RCD8                   :1;
    };
    struct {
        unsigned                        :5;
        unsigned SRENA                  :1;
    };
} RC1STAbits_t;
extern volatile RC1STAbits_t RC1STAbits __at(0xF9D);
// bitfield macros
#define _RC1STA_RX9D_POSN                                   0x0
#define _RC1STA_RX9D_POSITION                               0x0
#define _RC1STA_RX9D_SIZE                                   0x1
#define _RC1STA_RX9D_LENGTH                                 0x1
#define _RC1STA_RX9D_MASK                                   0x1
#define _RC1STA_OERR_POSN                                   0x1
#define _RC1STA_OERR_POSITION                               0x1
#define _RC1STA_OERR_SIZE                                   0x1
#define _RC1STA_OERR_LENGTH                                 0x1
#define _RC1STA_OERR_MASK                                   0x2
#define _RC1STA_FERR_POSN                                   0x2
#define _RC1STA_FERR_POSITION                               0x2
#define _RC1STA_FERR_SIZE                                   0x1
#define _RC1STA_FERR_LENGTH                                 0x1
#define _RC1STA_FERR_MASK                                   0x4
#define _RC1STA_ADDEN_POSN                                  0x3
#define _RC1STA_ADDEN_POSITION                              0x3
#define _RC1STA_ADDEN_SIZE                                  0x1
#define _RC1STA_ADDEN_LENGTH                                0x1
#define _RC1STA_ADDEN_MASK                                  0x8
#define _RC1STA_CREN_POSN                                   0x4
#define _RC1STA_CREN_POSITION                               0x4
#define _RC1STA_CREN_SIZE                                   0x1
#define _RC1STA_CREN_LENGTH                                 0x1
#define _RC1STA_CREN_MASK                                   0x10
#define _RC1STA_SREN_POSN                                   0x5
#define _RC1STA_SREN_POSITION                               0x5
#define _RC1STA_SREN_SIZE                                   0x1
#define _RC1STA_SREN_LENGTH                                 0x1
#define _RC1STA_SREN_MASK                                   0x20
#define _RC1STA_RX9_POSN                                    0x6
#define _RC1STA_RX9_POSITION                                0x6
#define _RC1STA_RX9_SIZE                                    0x1
#define _RC1STA_RX9_LENGTH                                  0x1
#define _RC1STA_RX9_MASK                                    0x40
#define _RC1STA_SPEN_POSN                                   0x7
#define _RC1STA_SPEN_POSITION                               0x7
#define _RC1STA_SPEN_SIZE                                   0x1
#define _RC1STA_SPEN_LENGTH                                 0x1
#define _RC1STA_SPEN_MASK                                   0x80
#define _RC1STA_RC8_9_POSN                                  0x6
#define _RC1STA_RC8_9_POSITION                              0x6
#define _RC1STA_RC8_9_SIZE                                  0x1
#define _RC1STA_RC8_9_LENGTH                                0x1
#define _RC1STA_RC8_9_MASK                                  0x40
#define _RC1STA_RC9_POSN                                    0x6
#define _RC1STA_RC9_POSITION                                0x6
#define _RC1STA_RC9_SIZE                                    0x1
#define _RC1STA_RC9_LENGTH                                  0x1
#define _RC1STA_RC9_MASK                                    0x40
#define _RC1STA_RCD8_POSN                                   0x0
#define _RC1STA_RCD8_POSITION                               0x0
#define _RC1STA_RCD8_SIZE                                   0x1
#define _RC1STA_RCD8_LENGTH                                 0x1
#define _RC1STA_RCD8_MASK                                   0x1
#define _RC1STA_SRENA_POSN                                  0x5
#define _RC1STA_SRENA_POSITION                              0x5
#define _RC1STA_SRENA_SIZE                                  0x1
#define _RC1STA_SRENA_LENGTH                                0x1
#define _RC1STA_SRENA_MASK                                  0x20
// alias bitfield definitions
typedef union {
    struct {
        unsigned RX9D                   :1;
        unsigned OERR                   :1;
        unsigned FERR                   :1;
        unsigned ADDEN                  :1;
        unsigned CREN                   :1;
        unsigned SREN                   :1;
        unsigned RX9                    :1;
        unsigned SPEN                   :1;
    };
    struct {
        unsigned                        :6;
        unsigned RC8_9                  :1;
    };
    struct {
        unsigned                        :6;
        unsigned RC9                    :1;
    };
    struct {
        unsigned RCD8                   :1;
    };
    struct {
        unsigned                        :5;
        unsigned SRENA                  :1;
    };
} RCSTA1bits_t;
extern volatile RCSTA1bits_t RCSTA1bits __at(0xF9D);
// bitfield macros
#define _RCSTA1_RX9D_POSN                                   0x0
#define _RCSTA1_RX9D_POSITION                               0x0
#define _RCSTA1_RX9D_SIZE                                   0x1
#define _RCSTA1_RX9D_LENGTH                                 0x1
#define _RCSTA1_RX9D_MASK                                   0x1
#define _RCSTA1_OERR_POSN                                   0x1
#define _RCSTA1_OERR_POSITION                               0x1
#define _RCSTA1_OERR_SIZE                                   0x1
#define _RCSTA1_OERR_LENGTH                                 0x1
#define _RCSTA1_OERR_MASK                                   0x2
#define _RCSTA1_FERR_POSN                                   0x2
#define _RCSTA1_FERR_POSITION                               0x2
#define _RCSTA1_FERR_SIZE                                   0x1
#define _RCSTA1_FERR_LENGTH                                 0x1
#define _RCSTA1_FERR_MASK                                   0x4
#define _RCSTA1_ADDEN_POSN                                  0x3
#define _RCSTA1_ADDEN_POSITION                              0x3
#define _RCSTA1_ADDEN_SIZE                                  0x1
#define _RCSTA1_ADDEN_LENGTH                                0x1
#define _RCSTA1_ADDEN_MASK                                  0x8
#define _RCSTA1_CREN_POSN                                   0x4
#define _RCSTA1_CREN_POSITION                               0x4
#define _RCSTA1_CREN_SIZE                                   0x1
#define _RCSTA1_CREN_LENGTH                                 0x1
#define _RCSTA1_CREN_MASK                                   0x10
#define _RCSTA1_SREN_POSN                                   0x5
#define _RCSTA1_SREN_POSITION                               0x5
#define _RCSTA1_SREN_SIZE                                   0x1
#define _RCSTA1_SREN_LENGTH                                 0x1
#define _RCSTA1_SREN_MASK                                   0x20
#define _RCSTA1_RX9_POSN                                    0x6
#define _RCSTA1_RX9_POSITION                                0x6
#define _RCSTA1_RX9_SIZE                                    0x1
#define _RCSTA1_RX9_LENGTH                                  0x1
#define _RCSTA1_RX9_MASK                                    0x40
#define _RCSTA1_SPEN_POSN                                   0x7
#define _RCSTA1_SPEN_POSITION                               0x7
#define _RCSTA1_SPEN_SIZE                                   0x1
#define _RCSTA1_SPEN_LENGTH                                 0x1
#define _RCSTA1_SPEN_MASK                                   0x80
#define _RCSTA1_RC8_9_POSN                                  0x6
#define _RCSTA1_RC8_9_POSITION                              0x6
#define _RCSTA1_RC8_9_SIZE                                  0x1
#define _RCSTA1_RC8_9_LENGTH                                0x1
#define _RCSTA1_RC8_9_MASK                                  0x40
#define _RCSTA1_RC9_POSN                                    0x6
#define _RCSTA1_RC9_POSITION                                0x6
#define _RCSTA1_RC9_SIZE                                    0x1
#define _RCSTA1_RC9_LENGTH                                  0x1
#define _RCSTA1_RC9_MASK                                    0x40
#define _RCSTA1_RCD8_POSN                                   0x0
#define _RCSTA1_RCD8_POSITION                               0x0
#define _RCSTA1_RCD8_SIZE                                   0x1
#define _RCSTA1_RCD8_LENGTH                                 0x1
#define _RCSTA1_RCD8_MASK                                   0x1
#define _RCSTA1_SRENA_POSN                                  0x5
#define _RCSTA1_SRENA_POSITION                              0x5
#define _RCSTA1_SRENA_SIZE                                  0x1
#define _RCSTA1_SRENA_LENGTH                                0x1
#define _RCSTA1_SRENA_MASK                                  0x20
typedef union {
    struct {
        unsigned RX9D                   :1;
        unsigned OERR                   :1;
        unsigned FERR                   :1;
        unsigned ADDEN                  :1;
        unsigned CREN                   :1;
        unsigned SREN                   :1;
        unsigned RX9                    :1;
        unsigned SPEN                   :1;
    };
    struct {
        unsigned                        :6;
        unsigned RC8_9                  :1;
    };
    struct {
        unsigned                        :6;
        unsigned RC9                    :1;
    };
    struct {
        unsigned RCD8                   :1;
    };
    struct {
        unsigned                        :5;
        unsigned SRENA                  :1;
    };
} RCSTAbits_t;
extern volatile RCSTAbits_t RCSTAbits __at(0xF9D);
// bitfield macros
#define _RCSTA_RX9D_POSN                                    0x0
#define _RCSTA_RX9D_POSITION                                0x0
#define _RCSTA_RX9D_SIZE                                    0x1
#define _RCSTA_RX9D_LENGTH                                  0x1
#define _RCSTA_RX9D_MASK                                    0x1
#define _RCSTA_OERR_POSN                                    0x1
#define _RCSTA_OERR_POSITION                                0x1
#define _RCSTA_OERR_SIZE                                    0x1
#define _RCSTA_OERR_LENGTH                                  0x1
#define _RCSTA_OERR_MASK                                    0x2
#define _RCSTA_FERR_POSN                                    0x2
#define _RCSTA_FERR_POSITION                                0x2
#define _RCSTA_FERR_SIZE                                    0x1
#define _RCSTA_FERR_LENGTH                                  0x1
#define _RCSTA_FERR_MASK                                    0x4
#define _RCSTA_ADDEN_POSN                                   0x3
#define _RCSTA_ADDEN_POSITION                               0x3
#define _RCSTA_ADDEN_SIZE                                   0x1
#define _RCSTA_ADDEN_LENGTH                                 0x1
#define _RCSTA_ADDEN_MASK                                   0x8
#define _RCSTA_CREN_POSN                                    0x4
#define _RCSTA_CREN_POSITION                                0x4
#define _RCSTA_CREN_SIZE                                    0x1
#define _RCSTA_CREN_LENGTH                                  0x1
#define _RCSTA_CREN_MASK                                    0x10
#define _RCSTA_SREN_POSN                                    0x5
#define _RCSTA_SREN_POSITION                                0x5
#define _RCSTA_SREN_SIZE                                    0x1
#define _RCSTA_SREN_LENGTH                                  0x1
#define _RCSTA_SREN_MASK                                    0x20
#define _RCSTA_RX9_POSN                                     0x6
#define _RCSTA_RX9_POSITION                                 0x6
#define _RCSTA_RX9_SIZE                                     0x1
#define _RCSTA_RX9_LENGTH                                   0x1
#define _RCSTA_RX9_MASK                                     0x40
#define _RCSTA_SPEN_POSN                                    0x7
#define _RCSTA_SPEN_POSITION                                0x7
#define _RCSTA_SPEN_SIZE                                    0x1
#define _RCSTA_SPEN_LENGTH                                  0x1
#define _RCSTA_SPEN_MASK                                    0x80
#define _RCSTA_RC8_9_POSN                                   0x6
#define _RCSTA_RC8_9_POSITION                               0x6
#define _RCSTA_RC8_9_SIZE                                   0x1
#define _RCSTA_RC8_9_LENGTH                                 0x1
#define _RCSTA_RC8_9_MASK                                   0x40
#define _RCSTA_RC9_POSN                                     0x6
#define _RCSTA_RC9_POSITION                                 0x6
#define _RCSTA_RC9_SIZE                                     0x1
#define _RCSTA_RC9_LENGTH                                   0x1
#define _RCSTA_RC9_MASK                                     0x40
#define _RCSTA_RCD8_POSN                                    0x0
#define _RCSTA_RCD8_POSITION                                0x0
#define _RCSTA_RCD8_SIZE                                    0x1
#define _RCSTA_RCD8_LENGTH                                  0x1
#define _RCSTA_RCD8_MASK                                    0x1
#define _RCSTA_SRENA_POSN                                   0x5
#define _RCSTA_SRENA_POSITION                               0x5
#define _RCSTA_SRENA_SIZE                                   0x1
#define _RCSTA_SRENA_LENGTH                                 0x1
#define _RCSTA_SRENA_MASK                                   0x20

// Register: TX1STA
#define TX1STA TX1STA
extern volatile unsigned char           TX1STA              __at(0xF9E);
#ifndef _LIB_BUILD
asm("TX1STA equ 0F9Eh");
#endif
// aliases
extern volatile unsigned char           TXSTA1              __at(0xF9E);
#ifndef _LIB_BUILD
asm("TXSTA1 equ 0F9Eh");
#endif
extern volatile unsigned char           TXSTA               __at(0xF9E);
#ifndef _LIB_BUILD
asm("TXSTA equ 0F9Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TX9D                   :1;
        unsigned TRMT                   :1;
        unsigned BRGH                   :1;
        unsigned SENDB                  :1;
        unsigned SYNC                   :1;
        unsigned TXEN                   :1;
        unsigned TX9                    :1;
        unsigned CSRC                   :1;
    };
    struct {
        unsigned                        :6;
        unsigned TX8_9                  :1;
    };
    struct {
        unsigned TXD8                   :1;
    };
    struct {
        unsigned                        :2;
        unsigned BRGH1                  :1;
    };
    struct {
        unsigned                        :7;
        unsigned CSRC1                  :1;
    };
    struct {
        unsigned                        :3;
        unsigned SENDB1                 :1;
    };
    struct {
        unsigned                        :4;
        unsigned SYNC1                  :1;
    };
    struct {
        unsigned                        :1;
        unsigned TRMT1                  :1;
    };
    struct {
        unsigned                        :6;
        unsigned TX91                   :1;
    };
    struct {
        unsigned TX9D1                  :1;
    };
    struct {
        unsigned                        :5;
        unsigned TXEN1                  :1;
    };
} TX1STAbits_t;
extern volatile TX1STAbits_t TX1STAbits __at(0xF9E);
// bitfield macros
#define _TX1STA_TX9D_POSN                                   0x0
#define _TX1STA_TX9D_POSITION                               0x0
#define _TX1STA_TX9D_SIZE                                   0x1
#define _TX1STA_TX9D_LENGTH                                 0x1
#define _TX1STA_TX9D_MASK                                   0x1
#define _TX1STA_TRMT_POSN                                   0x1
#define _TX1STA_TRMT_POSITION                               0x1
#define _TX1STA_TRMT_SIZE                                   0x1
#define _TX1STA_TRMT_LENGTH                                 0x1
#define _TX1STA_TRMT_MASK                                   0x2
#define _TX1STA_BRGH_POSN                                   0x2
#define _TX1STA_BRGH_POSITION                               0x2
#define _TX1STA_BRGH_SIZE                                   0x1
#define _TX1STA_BRGH_LENGTH                                 0x1
#define _TX1STA_BRGH_MASK                                   0x4
#define _TX1STA_SENDB_POSN                                  0x3
#define _TX1STA_SENDB_POSITION                              0x3
#define _TX1STA_SENDB_SIZE                                  0x1
#define _TX1STA_SENDB_LENGTH                                0x1
#define _TX1STA_SENDB_MASK                                  0x8
#define _TX1STA_SYNC_POSN                                   0x4
#define _TX1STA_SYNC_POSITION                               0x4
#define _TX1STA_SYNC_SIZE                                   0x1
#define _TX1STA_SYNC_LENGTH                                 0x1
#define _TX1STA_SYNC_MASK                                   0x10
#define _TX1STA_TXEN_POSN                                   0x5
#define _TX1STA_TXEN_POSITION                               0x5
#define _TX1STA_TXEN_SIZE                                   0x1
#define _TX1STA_TXEN_LENGTH                                 0x1
#define _TX1STA_TXEN_MASK                                   0x20
#define _TX1STA_TX9_POSN                                    0x6
#define _TX1STA_TX9_POSITION                                0x6
#define _TX1STA_TX9_SIZE                                    0x1
#define _TX1STA_TX9_LENGTH                                  0x1
#define _TX1STA_TX9_MASK                                    0x40
#define _TX1STA_CSRC_POSN                                   0x7
#define _TX1STA_CSRC_POSITION                               0x7
#define _TX1STA_CSRC_SIZE                                   0x1
#define _TX1STA_CSRC_LENGTH                                 0x1
#define _TX1STA_CSRC_MASK                                   0x80
#define _TX1STA_TX8_9_POSN                                  0x6
#define _TX1STA_TX8_9_POSITION                              0x6
#define _TX1STA_TX8_9_SIZE                                  0x1
#define _TX1STA_TX8_9_LENGTH                                0x1
#define _TX1STA_TX8_9_MASK                                  0x40
#define _TX1STA_TXD8_POSN                                   0x0
#define _TX1STA_TXD8_POSITION                               0x0
#define _TX1STA_TXD8_SIZE                                   0x1
#define _TX1STA_TXD8_LENGTH                                 0x1
#define _TX1STA_TXD8_MASK                                   0x1
#define _TX1STA_BRGH1_POSN                                  0x2
#define _TX1STA_BRGH1_POSITION                              0x2
#define _TX1STA_BRGH1_SIZE                                  0x1
#define _TX1STA_BRGH1_LENGTH                                0x1
#define _TX1STA_BRGH1_MASK                                  0x4
#define _TX1STA_CSRC1_POSN                                  0x7
#define _TX1STA_CSRC1_POSITION                              0x7
#define _TX1STA_CSRC1_SIZE                                  0x1
#define _TX1STA_CSRC1_LENGTH                                0x1
#define _TX1STA_CSRC1_MASK                                  0x80
#define _TX1STA_SENDB1_POSN                                 0x3
#define _TX1STA_SENDB1_POSITION                             0x3
#define _TX1STA_SENDB1_SIZE                                 0x1
#define _TX1STA_SENDB1_LENGTH                               0x1
#define _TX1STA_SENDB1_MASK                                 0x8
#define _TX1STA_SYNC1_POSN                                  0x4
#define _TX1STA_SYNC1_POSITION                              0x4
#define _TX1STA_SYNC1_SIZE                                  0x1
#define _TX1STA_SYNC1_LENGTH                                0x1
#define _TX1STA_SYNC1_MASK                                  0x10
#define _TX1STA_TRMT1_POSN                                  0x1
#define _TX1STA_TRMT1_POSITION                              0x1
#define _TX1STA_TRMT1_SIZE                                  0x1
#define _TX1STA_TRMT1_LENGTH                                0x1
#define _TX1STA_TRMT1_MASK                                  0x2
#define _TX1STA_TX91_POSN                                   0x6
#define _TX1STA_TX91_POSITION                               0x6
#define _TX1STA_TX91_SIZE                                   0x1
#define _TX1STA_TX91_LENGTH                                 0x1
#define _TX1STA_TX91_MASK                                   0x40
#define _TX1STA_TX9D1_POSN                                  0x0
#define _TX1STA_TX9D1_POSITION                              0x0
#define _TX1STA_TX9D1_SIZE                                  0x1
#define _TX1STA_TX9D1_LENGTH                                0x1
#define _TX1STA_TX9D1_MASK                                  0x1
#define _TX1STA_TXEN1_POSN                                  0x5
#define _TX1STA_TXEN1_POSITION                              0x5
#define _TX1STA_TXEN1_SIZE                                  0x1
#define _TX1STA_TXEN1_LENGTH                                0x1
#define _TX1STA_TXEN1_MASK                                  0x20
// alias bitfield definitions
typedef union {
    struct {
        unsigned TX9D                   :1;
        unsigned TRMT                   :1;
        unsigned BRGH                   :1;
        unsigned SENDB                  :1;
        unsigned SYNC                   :1;
        unsigned TXEN                   :1;
        unsigned TX9                    :1;
        unsigned CSRC                   :1;
    };
    struct {
        unsigned                        :6;
        unsigned TX8_9                  :1;
    };
    struct {
        unsigned TXD8                   :1;
    };
    struct {
        unsigned                        :2;
        unsigned BRGH1                  :1;
    };
    struct {
        unsigned                        :7;
        unsigned CSRC1                  :1;
    };
    struct {
        unsigned                        :3;
        unsigned SENDB1                 :1;
    };
    struct {
        unsigned                        :4;
        unsigned SYNC1                  :1;
    };
    struct {
        unsigned                        :1;
        unsigned TRMT1                  :1;
    };
    struct {
        unsigned                        :6;
        unsigned TX91                   :1;
    };
    struct {
        unsigned TX9D1                  :1;
    };
    struct {
        unsigned                        :5;
        unsigned TXEN1                  :1;
    };
} TXSTA1bits_t;
extern volatile TXSTA1bits_t TXSTA1bits __at(0xF9E);
// bitfield macros
#define _TXSTA1_TX9D_POSN                                   0x0
#define _TXSTA1_TX9D_POSITION                               0x0
#define _TXSTA1_TX9D_SIZE                                   0x1
#define _TXSTA1_TX9D_LENGTH                                 0x1
#define _TXSTA1_TX9D_MASK                                   0x1
#define _TXSTA1_TRMT_POSN                                   0x1
#define _TXSTA1_TRMT_POSITION                               0x1
#define _TXSTA1_TRMT_SIZE                                   0x1
#define _TXSTA1_TRMT_LENGTH                                 0x1
#define _TXSTA1_TRMT_MASK                                   0x2
#define _TXSTA1_BRGH_POSN                                   0x2
#define _TXSTA1_BRGH_POSITION                               0x2
#define _TXSTA1_BRGH_SIZE                                   0x1
#define _TXSTA1_BRGH_LENGTH                                 0x1
#define _TXSTA1_BRGH_MASK                                   0x4
#define _TXSTA1_SENDB_POSN                                  0x3
#define _TXSTA1_SENDB_POSITION                              0x3
#define _TXSTA1_SENDB_SIZE                                  0x1
#define _TXSTA1_SENDB_LENGTH                                0x1
#define _TXSTA1_SENDB_MASK                                  0x8
#define _TXSTA1_SYNC_POSN                                   0x4
#define _TXSTA1_SYNC_POSITION                               0x4
#define _TXSTA1_SYNC_SIZE                                   0x1
#define _TXSTA1_SYNC_LENGTH                                 0x1
#define _TXSTA1_SYNC_MASK                                   0x10
#define _TXSTA1_TXEN_POSN                                   0x5
#define _TXSTA1_TXEN_POSITION                               0x5
#define _TXSTA1_TXEN_SIZE                                   0x1
#define _TXSTA1_TXEN_LENGTH                                 0x1
#define _TXSTA1_TXEN_MASK                                   0x20
#define _TXSTA1_TX9_POSN                                    0x6
#define _TXSTA1_TX9_POSITION                                0x6
#define _TXSTA1_TX9_SIZE                                    0x1
#define _TXSTA1_TX9_LENGTH                                  0x1
#define _TXSTA1_TX9_MASK                                    0x40
#define _TXSTA1_CSRC_POSN                                   0x7
#define _TXSTA1_CSRC_POSITION                               0x7
#define _TXSTA1_CSRC_SIZE                                   0x1
#define _TXSTA1_CSRC_LENGTH                                 0x1
#define _TXSTA1_CSRC_MASK                                   0x80
#define _TXSTA1_TX8_9_POSN                                  0x6
#define _TXSTA1_TX8_9_POSITION                              0x6
#define _TXSTA1_TX8_9_SIZE                                  0x1
#define _TXSTA1_TX8_9_LENGTH                                0x1
#define _TXSTA1_TX8_9_MASK                                  0x40
#define _TXSTA1_TXD8_POSN                                   0x0
#define _TXSTA1_TXD8_POSITION                               0x0
#define _TXSTA1_TXD8_SIZE                                   0x1
#define _TXSTA1_TXD8_LENGTH                                 0x1
#define _TXSTA1_TXD8_MASK                                   0x1
#define _TXSTA1_BRGH1_POSN                                  0x2
#define _TXSTA1_BRGH1_POSITION                              0x2
#define _TXSTA1_BRGH1_SIZE                                  0x1
#define _TXSTA1_BRGH1_LENGTH                                0x1
#define _TXSTA1_BRGH1_MASK                                  0x4
#define _TXSTA1_CSRC1_POSN                                  0x7
#define _TXSTA1_CSRC1_POSITION                              0x7
#define _TXSTA1_CSRC1_SIZE                                  0x1
#define _TXSTA1_CSRC1_LENGTH                                0x1
#define _TXSTA1_CSRC1_MASK                                  0x80
#define _TXSTA1_SENDB1_POSN                                 0x3
#define _TXSTA1_SENDB1_POSITION                             0x3
#define _TXSTA1_SENDB1_SIZE                                 0x1
#define _TXSTA1_SENDB1_LENGTH                               0x1
#define _TXSTA1_SENDB1_MASK                                 0x8
#define _TXSTA1_SYNC1_POSN                                  0x4
#define _TXSTA1_SYNC1_POSITION                              0x4
#define _TXSTA1_SYNC1_SIZE                                  0x1
#define _TXSTA1_SYNC1_LENGTH                                0x1
#define _TXSTA1_SYNC1_MASK                                  0x10
#define _TXSTA1_TRMT1_POSN                                  0x1
#define _TXSTA1_TRMT1_POSITION                              0x1
#define _TXSTA1_TRMT1_SIZE                                  0x1
#define _TXSTA1_TRMT1_LENGTH                                0x1
#define _TXSTA1_TRMT1_MASK                                  0x2
#define _TXSTA1_TX91_POSN                                   0x6
#define _TXSTA1_TX91_POSITION                               0x6
#define _TXSTA1_TX91_SIZE                                   0x1
#define _TXSTA1_TX91_LENGTH                                 0x1
#define _TXSTA1_TX91_MASK                                   0x40
#define _TXSTA1_TX9D1_POSN                                  0x0
#define _TXSTA1_TX9D1_POSITION                              0x0
#define _TXSTA1_TX9D1_SIZE                                  0x1
#define _TXSTA1_TX9D1_LENGTH                                0x1
#define _TXSTA1_TX9D1_MASK                                  0x1
#define _TXSTA1_TXEN1_POSN                                  0x5
#define _TXSTA1_TXEN1_POSITION                              0x5
#define _TXSTA1_TXEN1_SIZE                                  0x1
#define _TXSTA1_TXEN1_LENGTH                                0x1
#define _TXSTA1_TXEN1_MASK                                  0x20
typedef union {
    struct {
        unsigned TX9D                   :1;
        unsigned TRMT                   :1;
        unsigned BRGH                   :1;
        unsigned SENDB                  :1;
        unsigned SYNC                   :1;
        unsigned TXEN                   :1;
        unsigned TX9                    :1;
        unsigned CSRC                   :1;
    };
    struct {
        unsigned                        :6;
        unsigned TX8_9                  :1;
    };
    struct {
        unsigned TXD8                   :1;
    };
    struct {
        unsigned                        :2;
        unsigned BRGH1                  :1;
    };
    struct {
        unsigned                        :7;
        unsigned CSRC1                  :1;
    };
    struct {
        unsigned                        :3;
        unsigned SENDB1                 :1;
    };
    struct {
        unsigned                        :4;
        unsigned SYNC1                  :1;
    };
    struct {
        unsigned                        :1;
        unsigned TRMT1                  :1;
    };
    struct {
        unsigned                        :6;
        unsigned TX91                   :1;
    };
    struct {
        unsigned TX9D1                  :1;
    };
    struct {
        unsigned                        :5;
        unsigned TXEN1                  :1;
    };
} TXSTAbits_t;
extern volatile TXSTAbits_t TXSTAbits __at(0xF9E);
// bitfield macros
#define _TXSTA_TX9D_POSN                                    0x0
#define _TXSTA_TX9D_POSITION                                0x0
#define _TXSTA_TX9D_SIZE                                    0x1
#define _TXSTA_TX9D_LENGTH                                  0x1
#define _TXSTA_TX9D_MASK                                    0x1
#define _TXSTA_TRMT_POSN                                    0x1
#define _TXSTA_TRMT_POSITION                                0x1
#define _TXSTA_TRMT_SIZE                                    0x1
#define _TXSTA_TRMT_LENGTH                                  0x1
#define _TXSTA_TRMT_MASK                                    0x2
#define _TXSTA_BRGH_POSN                                    0x2
#define _TXSTA_BRGH_POSITION                                0x2
#define _TXSTA_BRGH_SIZE                                    0x1
#define _TXSTA_BRGH_LENGTH                                  0x1
#define _TXSTA_BRGH_MASK                                    0x4
#define _TXSTA_SENDB_POSN                                   0x3
#define _TXSTA_SENDB_POSITION                               0x3
#define _TXSTA_SENDB_SIZE                                   0x1
#define _TXSTA_SENDB_LENGTH                                 0x1
#define _TXSTA_SENDB_MASK                                   0x8
#define _TXSTA_SYNC_POSN                                    0x4
#define _TXSTA_SYNC_POSITION                                0x4
#define _TXSTA_SYNC_SIZE                                    0x1
#define _TXSTA_SYNC_LENGTH                                  0x1
#define _TXSTA_SYNC_MASK                                    0x10
#define _TXSTA_TXEN_POSN                                    0x5
#define _TXSTA_TXEN_POSITION                                0x5
#define _TXSTA_TXEN_SIZE                                    0x1
#define _TXSTA_TXEN_LENGTH                                  0x1
#define _TXSTA_TXEN_MASK                                    0x20
#define _TXSTA_TX9_POSN                                     0x6
#define _TXSTA_TX9_POSITION                                 0x6
#define _TXSTA_TX9_SIZE                                     0x1
#define _TXSTA_TX9_LENGTH                                   0x1
#define _TXSTA_TX9_MASK                                     0x40
#define _TXSTA_CSRC_POSN                                    0x7
#define _TXSTA_CSRC_POSITION                                0x7
#define _TXSTA_CSRC_SIZE                                    0x1
#define _TXSTA_CSRC_LENGTH                                  0x1
#define _TXSTA_CSRC_MASK                                    0x80
#define _TXSTA_TX8_9_POSN                                   0x6
#define _TXSTA_TX8_9_POSITION                               0x6
#define _TXSTA_TX8_9_SIZE                                   0x1
#define _TXSTA_TX8_9_LENGTH                                 0x1
#define _TXSTA_TX8_9_MASK                                   0x40
#define _TXSTA_TXD8_POSN                                    0x0
#define _TXSTA_TXD8_POSITION                                0x0
#define _TXSTA_TXD8_SIZE                                    0x1
#define _TXSTA_TXD8_LENGTH                                  0x1
#define _TXSTA_TXD8_MASK                                    0x1
#define _TXSTA_BRGH1_POSN                                   0x2
#define _TXSTA_BRGH1_POSITION                               0x2
#define _TXSTA_BRGH1_SIZE                                   0x1
#define _TXSTA_BRGH1_LENGTH                                 0x1
#define _TXSTA_BRGH1_MASK                                   0x4
#define _TXSTA_CSRC1_POSN                                   0x7
#define _TXSTA_CSRC1_POSITION                               0x7
#define _TXSTA_CSRC1_SIZE                                   0x1
#define _TXSTA_CSRC1_LENGTH                                 0x1
#define _TXSTA_CSRC1_MASK                                   0x80
#define _TXSTA_SENDB1_POSN                                  0x3
#define _TXSTA_SENDB1_POSITION                              0x3
#define _TXSTA_SENDB1_SIZE                                  0x1
#define _TXSTA_SENDB1_LENGTH                                0x1
#define _TXSTA_SENDB1_MASK                                  0x8
#define _TXSTA_SYNC1_POSN                                   0x4
#define _TXSTA_SYNC1_POSITION                               0x4
#define _TXSTA_SYNC1_SIZE                                   0x1
#define _TXSTA_SYNC1_LENGTH                                 0x1
#define _TXSTA_SYNC1_MASK                                   0x10
#define _TXSTA_TRMT1_POSN                                   0x1
#define _TXSTA_TRMT1_POSITION                               0x1
#define _TXSTA_TRMT1_SIZE                                   0x1
#define _TXSTA_TRMT1_LENGTH                                 0x1
#define _TXSTA_TRMT1_MASK                                   0x2
#define _TXSTA_TX91_POSN                                    0x6
#define _TXSTA_TX91_POSITION                                0x6
#define _TXSTA_TX91_SIZE                                    0x1
#define _TXSTA_TX91_LENGTH                                  0x1
#define _TXSTA_TX91_MASK                                    0x40
#define _TXSTA_TX9D1_POSN                                   0x0
#define _TXSTA_TX9D1_POSITION                               0x0
#define _TXSTA_TX9D1_SIZE                                   0x1
#define _TXSTA_TX9D1_LENGTH                                 0x1
#define _TXSTA_TX9D1_MASK                                   0x1
#define _TXSTA_TXEN1_POSN                                   0x5
#define _TXSTA_TXEN1_POSITION                               0x5
#define _TXSTA_TXEN1_SIZE                                   0x1
#define _TXSTA_TXEN1_LENGTH                                 0x1
#define _TXSTA_TXEN1_MASK                                   0x20

// Register: BAUD1CON
#define BAUD1CON BAUD1CON
extern volatile unsigned char           BAUD1CON            __at(0xF9F);
#ifndef _LIB_BUILD
asm("BAUD1CON equ 0F9Fh");
#endif
// aliases
extern volatile unsigned char           BAUDCON1            __at(0xF9F);
#ifndef _LIB_BUILD
asm("BAUDCON1 equ 0F9Fh");
#endif
extern volatile unsigned char           BAUDCTL1            __at(0xF9F);
#ifndef _LIB_BUILD
asm("BAUDCTL1 equ 0F9Fh");
#endif
extern volatile unsigned char           BAUDCON             __at(0xF9F);
#ifndef _LIB_BUILD
asm("BAUDCON equ 0F9Fh");
#endif
extern volatile unsigned char           BAUDCTL             __at(0xF9F);
#ifndef _LIB_BUILD
asm("BAUDCTL equ 0F9Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ABDEN                  :1;
        unsigned WUE                    :1;
        unsigned                        :1;
        unsigned BRG16                  :1;
        unsigned SCKP                   :1;
        unsigned                        :1;
        unsigned RCIDL                  :1;
        unsigned ABDOVF                 :1;
    };
    struct {
        unsigned ABDEN1                 :1;
    };
    struct {
        unsigned                        :7;
        unsigned ABDOVF1                :1;
    };
    struct {
        unsigned                        :3;
        unsigned BRG161                 :1;
    };
    struct {
        unsigned                        :4;
        unsigned CKTXP                  :1;
    };
    struct {
        unsigned                        :6;
        unsigned RCIDL1                 :1;
    };
    struct {
        unsigned                        :6;
        unsigned RCMT                   :1;
    };
    struct {
        unsigned                        :6;
        unsigned RCMT1                  :1;
    };
    struct {
        unsigned                        :4;
        unsigned SCKP1                  :1;
    };
    struct {
        unsigned                        :4;
        unsigned TXCKP                  :1;
    };
    struct {
        unsigned                        :4;
        unsigned TXCKP1                 :1;
    };
    struct {
        unsigned                        :1;
        unsigned WUE1                   :1;
    };
    struct {
        unsigned                        :1;
        unsigned W4E                    :1;
    };
} BAUD1CONbits_t;
extern volatile BAUD1CONbits_t BAUD1CONbits __at(0xF9F);
// bitfield macros
#define _BAUD1CON_ABDEN_POSN                                0x0
#define _BAUD1CON_ABDEN_POSITION                            0x0
#define _BAUD1CON_ABDEN_SIZE                                0x1
#define _BAUD1CON_ABDEN_LENGTH                              0x1
#define _BAUD1CON_ABDEN_MASK                                0x1
#define _BAUD1CON_WUE_POSN                                  0x1
#define _BAUD1CON_WUE_POSITION                              0x1
#define _BAUD1CON_WUE_SIZE                                  0x1
#define _BAUD1CON_WUE_LENGTH                                0x1
#define _BAUD1CON_WUE_MASK                                  0x2
#define _BAUD1CON_BRG16_POSN                                0x3
#define _BAUD1CON_BRG16_POSITION                            0x3
#define _BAUD1CON_BRG16_SIZE                                0x1
#define _BAUD1CON_BRG16_LENGTH                              0x1
#define _BAUD1CON_BRG16_MASK                                0x8
#define _BAUD1CON_SCKP_POSN                                 0x4
#define _BAUD1CON_SCKP_POSITION                             0x4
#define _BAUD1CON_SCKP_SIZE                                 0x1
#define _BAUD1CON_SCKP_LENGTH                               0x1
#define _BAUD1CON_SCKP_MASK                                 0x10
#define _BAUD1CON_RCIDL_POSN                                0x6
#define _BAUD1CON_RCIDL_POSITION                            0x6
#define _BAUD1CON_RCIDL_SIZE                                0x1
#define _BAUD1CON_RCIDL_LENGTH                              0x1
#define _BAUD1CON_RCIDL_MASK                                0x40
#define _BAUD1CON_ABDOVF_POSN                               0x7
#define _BAUD1CON_ABDOVF_POSITION                           0x7
#define _BAUD1CON_ABDOVF_SIZE                               0x1
#define _BAUD1CON_ABDOVF_LENGTH                             0x1
#define _BAUD1CON_ABDOVF_MASK                               0x80
#define _BAUD1CON_ABDEN1_POSN                               0x0
#define _BAUD1CON_ABDEN1_POSITION                           0x0
#define _BAUD1CON_ABDEN1_SIZE                               0x1
#define _BAUD1CON_ABDEN1_LENGTH                             0x1
#define _BAUD1CON_ABDEN1_MASK                               0x1
#define _BAUD1CON_ABDOVF1_POSN                              0x7
#define _BAUD1CON_ABDOVF1_POSITION                          0x7
#define _BAUD1CON_ABDOVF1_SIZE                              0x1
#define _BAUD1CON_ABDOVF1_LENGTH                            0x1
#define _BAUD1CON_ABDOVF1_MASK                              0x80
#define _BAUD1CON_BRG161_POSN                               0x3
#define _BAUD1CON_BRG161_POSITION                           0x3
#define _BAUD1CON_BRG161_SIZE                               0x1
#define _BAUD1CON_BRG161_LENGTH                             0x1
#define _BAUD1CON_BRG161_MASK                               0x8
#define _BAUD1CON_CKTXP_POSN                                0x4
#define _BAUD1CON_CKTXP_POSITION                            0x4
#define _BAUD1CON_CKTXP_SIZE                                0x1
#define _BAUD1CON_CKTXP_LENGTH                              0x1
#define _BAUD1CON_CKTXP_MASK                                0x10
#define _BAUD1CON_RCIDL1_POSN                               0x6
#define _BAUD1CON_RCIDL1_POSITION                           0x6
#define _BAUD1CON_RCIDL1_SIZE                               0x1
#define _BAUD1CON_RCIDL1_LENGTH                             0x1
#define _BAUD1CON_RCIDL1_MASK                               0x40
#define _BAUD1CON_RCMT_POSN                                 0x6
#define _BAUD1CON_RCMT_POSITION                             0x6
#define _BAUD1CON_RCMT_SIZE                                 0x1
#define _BAUD1CON_RCMT_LENGTH                               0x1
#define _BAUD1CON_RCMT_MASK                                 0x40
#define _BAUD1CON_RCMT1_POSN                                0x6
#define _BAUD1CON_RCMT1_POSITION                            0x6
#define _BAUD1CON_RCMT1_SIZE                                0x1
#define _BAUD1CON_RCMT1_LENGTH                              0x1
#define _BAUD1CON_RCMT1_MASK                                0x40
#define _BAUD1CON_SCKP1_POSN                                0x4
#define _BAUD1CON_SCKP1_POSITION                            0x4
#define _BAUD1CON_SCKP1_SIZE                                0x1
#define _BAUD1CON_SCKP1_LENGTH                              0x1
#define _BAUD1CON_SCKP1_MASK                                0x10
#define _BAUD1CON_TXCKP_POSN                                0x4
#define _BAUD1CON_TXCKP_POSITION                            0x4
#define _BAUD1CON_TXCKP_SIZE                                0x1
#define _BAUD1CON_TXCKP_LENGTH                              0x1
#define _BAUD1CON_TXCKP_MASK                                0x10
#define _BAUD1CON_TXCKP1_POSN                               0x4
#define _BAUD1CON_TXCKP1_POSITION                           0x4
#define _BAUD1CON_TXCKP1_SIZE                               0x1
#define _BAUD1CON_TXCKP1_LENGTH                             0x1
#define _BAUD1CON_TXCKP1_MASK                               0x10
#define _BAUD1CON_WUE1_POSN                                 0x1
#define _BAUD1CON_WUE1_POSITION                             0x1
#define _BAUD1CON_WUE1_SIZE                                 0x1
#define _BAUD1CON_WUE1_LENGTH                               0x1
#define _BAUD1CON_WUE1_MASK                                 0x2
#define _BAUD1CON_W4E_POSN                                  0x1
#define _BAUD1CON_W4E_POSITION                              0x1
#define _BAUD1CON_W4E_SIZE                                  0x1
#define _BAUD1CON_W4E_LENGTH                                0x1
#define _BAUD1CON_W4E_MASK                                  0x2
// alias bitfield definitions
typedef union {
    struct {
        unsigned ABDEN                  :1;
        unsigned WUE                    :1;
        unsigned                        :1;
        unsigned BRG16                  :1;
        unsigned SCKP                   :1;
        unsigned                        :1;
        unsigned RCIDL                  :1;
        unsigned ABDOVF                 :1;
    };
    struct {
        unsigned ABDEN1                 :1;
    };
    struct {
        unsigned                        :7;
        unsigned ABDOVF1                :1;
    };
    struct {
        unsigned                        :3;
        unsigned BRG161                 :1;
    };
    struct {
        unsigned                        :4;
        unsigned CKTXP                  :1;
    };
    struct {
        unsigned                        :6;
        unsigned RCIDL1                 :1;
    };
    struct {
        unsigned                        :6;
        unsigned RCMT                   :1;
    };
    struct {
        unsigned                        :6;
        unsigned RCMT1                  :1;
    };
    struct {
        unsigned                        :4;
        unsigned SCKP1                  :1;
    };
    struct {
        unsigned                        :4;
        unsigned TXCKP                  :1;
    };
    struct {
        unsigned                        :4;
        unsigned TXCKP1                 :1;
    };
    struct {
        unsigned                        :1;
        unsigned WUE1                   :1;
    };
    struct {
        unsigned                        :1;
        unsigned W4E                    :1;
    };
} BAUDCON1bits_t;
extern volatile BAUDCON1bits_t BAUDCON1bits __at(0xF9F);
// bitfield macros
#define _BAUDCON1_ABDEN_POSN                                0x0
#define _BAUDCON1_ABDEN_POSITION                            0x0
#define _BAUDCON1_ABDEN_SIZE                                0x1
#define _BAUDCON1_ABDEN_LENGTH                              0x1
#define _BAUDCON1_ABDEN_MASK                                0x1
#define _BAUDCON1_WUE_POSN                                  0x1
#define _BAUDCON1_WUE_POSITION                              0x1
#define _BAUDCON1_WUE_SIZE                                  0x1
#define _BAUDCON1_WUE_LENGTH                                0x1
#define _BAUDCON1_WUE_MASK                                  0x2
#define _BAUDCON1_BRG16_POSN                                0x3
#define _BAUDCON1_BRG16_POSITION                            0x3
#define _BAUDCON1_BRG16_SIZE                                0x1
#define _BAUDCON1_BRG16_LENGTH                              0x1
#define _BAUDCON1_BRG16_MASK                                0x8
#define _BAUDCON1_SCKP_POSN                                 0x4
#define _BAUDCON1_SCKP_POSITION                             0x4
#define _BAUDCON1_SCKP_SIZE                                 0x1
#define _BAUDCON1_SCKP_LENGTH                               0x1
#define _BAUDCON1_SCKP_MASK                                 0x10
#define _BAUDCON1_RCIDL_POSN                                0x6
#define _BAUDCON1_RCIDL_POSITION                            0x6
#define _BAUDCON1_RCIDL_SIZE                                0x1
#define _BAUDCON1_RCIDL_LENGTH                              0x1
#define _BAUDCON1_RCIDL_MASK                                0x40
#define _BAUDCON1_ABDOVF_POSN                               0x7
#define _BAUDCON1_ABDOVF_POSITION                           0x7
#define _BAUDCON1_ABDOVF_SIZE                               0x1
#define _BAUDCON1_ABDOVF_LENGTH                             0x1
#define _BAUDCON1_ABDOVF_MASK                               0x80
#define _BAUDCON1_ABDEN1_POSN                               0x0
#define _BAUDCON1_ABDEN1_POSITION                           0x0
#define _BAUDCON1_ABDEN1_SIZE                               0x1
#define _BAUDCON1_ABDEN1_LENGTH                             0x1
#define _BAUDCON1_ABDEN1_MASK                               0x1
#define _BAUDCON1_ABDOVF1_POSN                              0x7
#define _BAUDCON1_ABDOVF1_POSITION                          0x7
#define _BAUDCON1_ABDOVF1_SIZE                              0x1
#define _BAUDCON1_ABDOVF1_LENGTH                            0x1
#define _BAUDCON1_ABDOVF1_MASK                              0x80
#define _BAUDCON1_BRG161_POSN                               0x3
#define _BAUDCON1_BRG161_POSITION                           0x3
#define _BAUDCON1_BRG161_SIZE                               0x1
#define _BAUDCON1_BRG161_LENGTH                             0x1
#define _BAUDCON1_BRG161_MASK                               0x8
#define _BAUDCON1_CKTXP_POSN                                0x4
#define _BAUDCON1_CKTXP_POSITION                            0x4
#define _BAUDCON1_CKTXP_SIZE                                0x1
#define _BAUDCON1_CKTXP_LENGTH                              0x1
#define _BAUDCON1_CKTXP_MASK                                0x10
#define _BAUDCON1_RCIDL1_POSN                               0x6
#define _BAUDCON1_RCIDL1_POSITION                           0x6
#define _BAUDCON1_RCIDL1_SIZE                               0x1
#define _BAUDCON1_RCIDL1_LENGTH                             0x1
#define _BAUDCON1_RCIDL1_MASK                               0x40
#define _BAUDCON1_RCMT_POSN                                 0x6
#define _BAUDCON1_RCMT_POSITION                             0x6
#define _BAUDCON1_RCMT_SIZE                                 0x1
#define _BAUDCON1_RCMT_LENGTH                               0x1
#define _BAUDCON1_RCMT_MASK                                 0x40
#define _BAUDCON1_RCMT1_POSN                                0x6
#define _BAUDCON1_RCMT1_POSITION                            0x6
#define _BAUDCON1_RCMT1_SIZE                                0x1
#define _BAUDCON1_RCMT1_LENGTH                              0x1
#define _BAUDCON1_RCMT1_MASK                                0x40
#define _BAUDCON1_SCKP1_POSN                                0x4
#define _BAUDCON1_SCKP1_POSITION                            0x4
#define _BAUDCON1_SCKP1_SIZE                                0x1
#define _BAUDCON1_SCKP1_LENGTH                              0x1
#define _BAUDCON1_SCKP1_MASK                                0x10
#define _BAUDCON1_TXCKP_POSN                                0x4
#define _BAUDCON1_TXCKP_POSITION                            0x4
#define _BAUDCON1_TXCKP_SIZE                                0x1
#define _BAUDCON1_TXCKP_LENGTH                              0x1
#define _BAUDCON1_TXCKP_MASK                                0x10
#define _BAUDCON1_TXCKP1_POSN                               0x4
#define _BAUDCON1_TXCKP1_POSITION                           0x4
#define _BAUDCON1_TXCKP1_SIZE                               0x1
#define _BAUDCON1_TXCKP1_LENGTH                             0x1
#define _BAUDCON1_TXCKP1_MASK                               0x10
#define _BAUDCON1_WUE1_POSN                                 0x1
#define _BAUDCON1_WUE1_POSITION                             0x1
#define _BAUDCON1_WUE1_SIZE                                 0x1
#define _BAUDCON1_WUE1_LENGTH                               0x1
#define _BAUDCON1_WUE1_MASK                                 0x2
#define _BAUDCON1_W4E_POSN                                  0x1
#define _BAUDCON1_W4E_POSITION                              0x1
#define _BAUDCON1_W4E_SIZE                                  0x1
#define _BAUDCON1_W4E_LENGTH                                0x1
#define _BAUDCON1_W4E_MASK                                  0x2
typedef union {
    struct {
        unsigned ABDEN                  :1;
        unsigned WUE                    :1;
        unsigned                        :1;
        unsigned BRG16                  :1;
        unsigned SCKP                   :1;
        unsigned                        :1;
        unsigned RCIDL                  :1;
        unsigned ABDOVF                 :1;
    };
    struct {
        unsigned ABDEN1                 :1;
    };
    struct {
        unsigned                        :7;
        unsigned ABDOVF1                :1;
    };
    struct {
        unsigned                        :3;
        unsigned BRG161                 :1;
    };
    struct {
        unsigned                        :4;
        unsigned CKTXP                  :1;
    };
    struct {
        unsigned                        :6;
        unsigned RCIDL1                 :1;
    };
    struct {
        unsigned                        :6;
        unsigned RCMT                   :1;
    };
    struct {
        unsigned                        :6;
        unsigned RCMT1                  :1;
    };
    struct {
        unsigned                        :4;
        unsigned SCKP1                  :1;
    };
    struct {
        unsigned                        :4;
        unsigned TXCKP                  :1;
    };
    struct {
        unsigned                        :4;
        unsigned TXCKP1                 :1;
    };
    struct {
        unsigned                        :1;
        unsigned WUE1                   :1;
    };
    struct {
        unsigned                        :1;
        unsigned W4E                    :1;
    };
} BAUDCTL1bits_t;
extern volatile BAUDCTL1bits_t BAUDCTL1bits __at(0xF9F);
// bitfield macros
#define _BAUDCTL1_ABDEN_POSN                                0x0
#define _BAUDCTL1_ABDEN_POSITION                            0x0
#define _BAUDCTL1_ABDEN_SIZE                                0x1
#define _BAUDCTL1_ABDEN_LENGTH                              0x1
#define _BAUDCTL1_ABDEN_MASK                                0x1
#define _BAUDCTL1_WUE_POSN                                  0x1
#define _BAUDCTL1_WUE_POSITION                              0x1
#define _BAUDCTL1_WUE_SIZE                                  0x1
#define _BAUDCTL1_WUE_LENGTH                                0x1
#define _BAUDCTL1_WUE_MASK                                  0x2
#define _BAUDCTL1_BRG16_POSN                                0x3
#define _BAUDCTL1_BRG16_POSITION                            0x3
#define _BAUDCTL1_BRG16_SIZE                                0x1
#define _BAUDCTL1_BRG16_LENGTH                              0x1
#define _BAUDCTL1_BRG16_MASK                                0x8
#define _BAUDCTL1_SCKP_POSN                                 0x4
#define _BAUDCTL1_SCKP_POSITION                             0x4
#define _BAUDCTL1_SCKP_SIZE                                 0x1
#define _BAUDCTL1_SCKP_LENGTH                               0x1
#define _BAUDCTL1_SCKP_MASK                                 0x10
#define _BAUDCTL1_RCIDL_POSN                                0x6
#define _BAUDCTL1_RCIDL_POSITION                            0x6
#define _BAUDCTL1_RCIDL_SIZE                                0x1
#define _BAUDCTL1_RCIDL_LENGTH                              0x1
#define _BAUDCTL1_RCIDL_MASK                                0x40
#define _BAUDCTL1_ABDOVF_POSN                               0x7
#define _BAUDCTL1_ABDOVF_POSITION                           0x7
#define _BAUDCTL1_ABDOVF_SIZE                               0x1
#define _BAUDCTL1_ABDOVF_LENGTH                             0x1
#define _BAUDCTL1_ABDOVF_MASK                               0x80
#define _BAUDCTL1_ABDEN1_POSN                               0x0
#define _BAUDCTL1_ABDEN1_POSITION                           0x0
#define _BAUDCTL1_ABDEN1_SIZE                               0x1
#define _BAUDCTL1_ABDEN1_LENGTH                             0x1
#define _BAUDCTL1_ABDEN1_MASK                               0x1
#define _BAUDCTL1_ABDOVF1_POSN                              0x7
#define _BAUDCTL1_ABDOVF1_POSITION                          0x7
#define _BAUDCTL1_ABDOVF1_SIZE                              0x1
#define _BAUDCTL1_ABDOVF1_LENGTH                            0x1
#define _BAUDCTL1_ABDOVF1_MASK                              0x80
#define _BAUDCTL1_BRG161_POSN                               0x3
#define _BAUDCTL1_BRG161_POSITION                           0x3
#define _BAUDCTL1_BRG161_SIZE                               0x1
#define _BAUDCTL1_BRG161_LENGTH                             0x1
#define _BAUDCTL1_BRG161_MASK                               0x8
#define _BAUDCTL1_CKTXP_POSN                                0x4
#define _BAUDCTL1_CKTXP_POSITION                            0x4
#define _BAUDCTL1_CKTXP_SIZE                                0x1
#define _BAUDCTL1_CKTXP_LENGTH                              0x1
#define _BAUDCTL1_CKTXP_MASK                                0x10
#define _BAUDCTL1_RCIDL1_POSN                               0x6
#define _BAUDCTL1_RCIDL1_POSITION                           0x6
#define _BAUDCTL1_RCIDL1_SIZE                               0x1
#define _BAUDCTL1_RCIDL1_LENGTH                             0x1
#define _BAUDCTL1_RCIDL1_MASK                               0x40
#define _BAUDCTL1_RCMT_POSN                                 0x6
#define _BAUDCTL1_RCMT_POSITION                             0x6
#define _BAUDCTL1_RCMT_SIZE                                 0x1
#define _BAUDCTL1_RCMT_LENGTH                               0x1
#define _BAUDCTL1_RCMT_MASK                                 0x40
#define _BAUDCTL1_RCMT1_POSN                                0x6
#define _BAUDCTL1_RCMT1_POSITION                            0x6
#define _BAUDCTL1_RCMT1_SIZE                                0x1
#define _BAUDCTL1_RCMT1_LENGTH                              0x1
#define _BAUDCTL1_RCMT1_MASK                                0x40
#define _BAUDCTL1_SCKP1_POSN                                0x4
#define _BAUDCTL1_SCKP1_POSITION                            0x4
#define _BAUDCTL1_SCKP1_SIZE                                0x1
#define _BAUDCTL1_SCKP1_LENGTH                              0x1
#define _BAUDCTL1_SCKP1_MASK                                0x10
#define _BAUDCTL1_TXCKP_POSN                                0x4
#define _BAUDCTL1_TXCKP_POSITION                            0x4
#define _BAUDCTL1_TXCKP_SIZE                                0x1
#define _BAUDCTL1_TXCKP_LENGTH                              0x1
#define _BAUDCTL1_TXCKP_MASK                                0x10
#define _BAUDCTL1_TXCKP1_POSN                               0x4
#define _BAUDCTL1_TXCKP1_POSITION                           0x4
#define _BAUDCTL1_TXCKP1_SIZE                               0x1
#define _BAUDCTL1_TXCKP1_LENGTH                             0x1
#define _BAUDCTL1_TXCKP1_MASK                               0x10
#define _BAUDCTL1_WUE1_POSN                                 0x1
#define _BAUDCTL1_WUE1_POSITION                             0x1
#define _BAUDCTL1_WUE1_SIZE                                 0x1
#define _BAUDCTL1_WUE1_LENGTH                               0x1
#define _BAUDCTL1_WUE1_MASK                                 0x2
#define _BAUDCTL1_W4E_POSN                                  0x1
#define _BAUDCTL1_W4E_POSITION                              0x1
#define _BAUDCTL1_W4E_SIZE                                  0x1
#define _BAUDCTL1_W4E_LENGTH                                0x1
#define _BAUDCTL1_W4E_MASK                                  0x2
typedef union {
    struct {
        unsigned ABDEN                  :1;
        unsigned WUE                    :1;
        unsigned                        :1;
        unsigned BRG16                  :1;
        unsigned SCKP                   :1;
        unsigned                        :1;
        unsigned RCIDL                  :1;
        unsigned ABDOVF                 :1;
    };
    struct {
        unsigned ABDEN1                 :1;
    };
    struct {
        unsigned                        :7;
        unsigned ABDOVF1                :1;
    };
    struct {
        unsigned                        :3;
        unsigned BRG161                 :1;
    };
    struct {
        unsigned                        :4;
        unsigned CKTXP                  :1;
    };
    struct {
        unsigned                        :6;
        unsigned RCIDL1                 :1;
    };
    struct {
        unsigned                        :6;
        unsigned RCMT                   :1;
    };
    struct {
        unsigned                        :6;
        unsigned RCMT1                  :1;
    };
    struct {
        unsigned                        :4;
        unsigned SCKP1                  :1;
    };
    struct {
        unsigned                        :4;
        unsigned TXCKP                  :1;
    };
    struct {
        unsigned                        :4;
        unsigned TXCKP1                 :1;
    };
    struct {
        unsigned                        :1;
        unsigned WUE1                   :1;
    };
    struct {
        unsigned                        :1;
        unsigned W4E                    :1;
    };
} BAUDCONbits_t;
extern volatile BAUDCONbits_t BAUDCONbits __at(0xF9F);
// bitfield macros
#define _BAUDCON_ABDEN_POSN                                 0x0
#define _BAUDCON_ABDEN_POSITION                             0x0
#define _BAUDCON_ABDEN_SIZE                                 0x1
#define _BAUDCON_ABDEN_LENGTH                               0x1
#define _BAUDCON_ABDEN_MASK                                 0x1
#define _BAUDCON_WUE_POSN                                   0x1
#define _BAUDCON_WUE_POSITION                               0x1
#define _BAUDCON_WUE_SIZE                                   0x1
#define _BAUDCON_WUE_LENGTH                                 0x1
#define _BAUDCON_WUE_MASK                                   0x2
#define _BAUDCON_BRG16_POSN                                 0x3
#define _BAUDCON_BRG16_POSITION                             0x3
#define _BAUDCON_BRG16_SIZE                                 0x1
#define _BAUDCON_BRG16_LENGTH                               0x1
#define _BAUDCON_BRG16_MASK                                 0x8
#define _BAUDCON_SCKP_POSN                                  0x4
#define _BAUDCON_SCKP_POSITION                              0x4
#define _BAUDCON_SCKP_SIZE                                  0x1
#define _BAUDCON_SCKP_LENGTH                                0x1
#define _BAUDCON_SCKP_MASK                                  0x10
#define _BAUDCON_RCIDL_POSN                                 0x6
#define _BAUDCON_RCIDL_POSITION                             0x6
#define _BAUDCON_RCIDL_SIZE                                 0x1
#define _BAUDCON_RCIDL_LENGTH                               0x1
#define _BAUDCON_RCIDL_MASK                                 0x40
#define _BAUDCON_ABDOVF_POSN                                0x7
#define _BAUDCON_ABDOVF_POSITION                            0x7
#define _BAUDCON_ABDOVF_SIZE                                0x1
#define _BAUDCON_ABDOVF_LENGTH                              0x1
#define _BAUDCON_ABDOVF_MASK                                0x80
#define _BAUDCON_ABDEN1_POSN                                0x0
#define _BAUDCON_ABDEN1_POSITION                            0x0
#define _BAUDCON_ABDEN1_SIZE                                0x1
#define _BAUDCON_ABDEN1_LENGTH                              0x1
#define _BAUDCON_ABDEN1_MASK                                0x1
#define _BAUDCON_ABDOVF1_POSN                               0x7
#define _BAUDCON_ABDOVF1_POSITION                           0x7
#define _BAUDCON_ABDOVF1_SIZE                               0x1
#define _BAUDCON_ABDOVF1_LENGTH                             0x1
#define _BAUDCON_ABDOVF1_MASK                               0x80
#define _BAUDCON_BRG161_POSN                                0x3
#define _BAUDCON_BRG161_POSITION                            0x3
#define _BAUDCON_BRG161_SIZE                                0x1
#define _BAUDCON_BRG161_LENGTH                              0x1
#define _BAUDCON_BRG161_MASK                                0x8
#define _BAUDCON_CKTXP_POSN                                 0x4
#define _BAUDCON_CKTXP_POSITION                             0x4
#define _BAUDCON_CKTXP_SIZE                                 0x1
#define _BAUDCON_CKTXP_LENGTH                               0x1
#define _BAUDCON_CKTXP_MASK                                 0x10
#define _BAUDCON_RCIDL1_POSN                                0x6
#define _BAUDCON_RCIDL1_POSITION                            0x6
#define _BAUDCON_RCIDL1_SIZE                                0x1
#define _BAUDCON_RCIDL1_LENGTH                              0x1
#define _BAUDCON_RCIDL1_MASK                                0x40
#define _BAUDCON_RCMT_POSN                                  0x6
#define _BAUDCON_RCMT_POSITION                              0x6
#define _BAUDCON_RCMT_SIZE                                  0x1
#define _BAUDCON_RCMT_LENGTH                                0x1
#define _BAUDCON_RCMT_MASK                                  0x40
#define _BAUDCON_RCMT1_POSN                                 0x6
#define _BAUDCON_RCMT1_POSITION                             0x6
#define _BAUDCON_RCMT1_SIZE                                 0x1
#define _BAUDCON_RCMT1_LENGTH                               0x1
#define _BAUDCON_RCMT1_MASK                                 0x40
#define _BAUDCON_SCKP1_POSN                                 0x4
#define _BAUDCON_SCKP1_POSITION                             0x4
#define _BAUDCON_SCKP1_SIZE                                 0x1
#define _BAUDCON_SCKP1_LENGTH                               0x1
#define _BAUDCON_SCKP1_MASK                                 0x10
#define _BAUDCON_TXCKP_POSN                                 0x4
#define _BAUDCON_TXCKP_POSITION                             0x4
#define _BAUDCON_TXCKP_SIZE                                 0x1
#define _BAUDCON_TXCKP_LENGTH                               0x1
#define _BAUDCON_TXCKP_MASK                                 0x10
#define _BAUDCON_TXCKP1_POSN                                0x4
#define _BAUDCON_TXCKP1_POSITION                            0x4
#define _BAUDCON_TXCKP1_SIZE                                0x1
#define _BAUDCON_TXCKP1_LENGTH                              0x1
#define _BAUDCON_TXCKP1_MASK                                0x10
#define _BAUDCON_WUE1_POSN                                  0x1
#define _BAUDCON_WUE1_POSITION                              0x1
#define _BAUDCON_WUE1_SIZE                                  0x1
#define _BAUDCON_WUE1_LENGTH                                0x1
#define _BAUDCON_WUE1_MASK                                  0x2
#define _BAUDCON_W4E_POSN                                   0x1
#define _BAUDCON_W4E_POSITION                               0x1
#define _BAUDCON_W4E_SIZE                                   0x1
#define _BAUDCON_W4E_LENGTH                                 0x1
#define _BAUDCON_W4E_MASK                                   0x2
typedef union {
    struct {
        unsigned ABDEN                  :1;
        unsigned WUE                    :1;
        unsigned                        :1;
        unsigned BRG16                  :1;
        unsigned SCKP                   :1;
        unsigned                        :1;
        unsigned RCIDL                  :1;
        unsigned ABDOVF                 :1;
    };
    struct {
        unsigned ABDEN1                 :1;
    };
    struct {
        unsigned                        :7;
        unsigned ABDOVF1                :1;
    };
    struct {
        unsigned                        :3;
        unsigned BRG161                 :1;
    };
    struct {
        unsigned                        :4;
        unsigned CKTXP                  :1;
    };
    struct {
        unsigned                        :6;
        unsigned RCIDL1                 :1;
    };
    struct {
        unsigned                        :6;
        unsigned RCMT                   :1;
    };
    struct {
        unsigned                        :6;
        unsigned RCMT1                  :1;
    };
    struct {
        unsigned                        :4;
        unsigned SCKP1                  :1;
    };
    struct {
        unsigned                        :4;
        unsigned TXCKP                  :1;
    };
    struct {
        unsigned                        :4;
        unsigned TXCKP1                 :1;
    };
    struct {
        unsigned                        :1;
        unsigned WUE1                   :1;
    };
    struct {
        unsigned                        :1;
        unsigned W4E                    :1;
    };
} BAUDCTLbits_t;
extern volatile BAUDCTLbits_t BAUDCTLbits __at(0xF9F);
// bitfield macros
#define _BAUDCTL_ABDEN_POSN                                 0x0
#define _BAUDCTL_ABDEN_POSITION                             0x0
#define _BAUDCTL_ABDEN_SIZE                                 0x1
#define _BAUDCTL_ABDEN_LENGTH                               0x1
#define _BAUDCTL_ABDEN_MASK                                 0x1
#define _BAUDCTL_WUE_POSN                                   0x1
#define _BAUDCTL_WUE_POSITION                               0x1
#define _BAUDCTL_WUE_SIZE                                   0x1
#define _BAUDCTL_WUE_LENGTH                                 0x1
#define _BAUDCTL_WUE_MASK                                   0x2
#define _BAUDCTL_BRG16_POSN                                 0x3
#define _BAUDCTL_BRG16_POSITION                             0x3
#define _BAUDCTL_BRG16_SIZE                                 0x1
#define _BAUDCTL_BRG16_LENGTH                               0x1
#define _BAUDCTL_BRG16_MASK                                 0x8
#define _BAUDCTL_SCKP_POSN                                  0x4
#define _BAUDCTL_SCKP_POSITION                              0x4
#define _BAUDCTL_SCKP_SIZE                                  0x1
#define _BAUDCTL_SCKP_LENGTH                                0x1
#define _BAUDCTL_SCKP_MASK                                  0x10
#define _BAUDCTL_RCIDL_POSN                                 0x6
#define _BAUDCTL_RCIDL_POSITION                             0x6
#define _BAUDCTL_RCIDL_SIZE                                 0x1
#define _BAUDCTL_RCIDL_LENGTH                               0x1
#define _BAUDCTL_RCIDL_MASK                                 0x40
#define _BAUDCTL_ABDOVF_POSN                                0x7
#define _BAUDCTL_ABDOVF_POSITION                            0x7
#define _BAUDCTL_ABDOVF_SIZE                                0x1
#define _BAUDCTL_ABDOVF_LENGTH                              0x1
#define _BAUDCTL_ABDOVF_MASK                                0x80
#define _BAUDCTL_ABDEN1_POSN                                0x0
#define _BAUDCTL_ABDEN1_POSITION                            0x0
#define _BAUDCTL_ABDEN1_SIZE                                0x1
#define _BAUDCTL_ABDEN1_LENGTH                              0x1
#define _BAUDCTL_ABDEN1_MASK                                0x1
#define _BAUDCTL_ABDOVF1_POSN                               0x7
#define _BAUDCTL_ABDOVF1_POSITION                           0x7
#define _BAUDCTL_ABDOVF1_SIZE                               0x1
#define _BAUDCTL_ABDOVF1_LENGTH                             0x1
#define _BAUDCTL_ABDOVF1_MASK                               0x80
#define _BAUDCTL_BRG161_POSN                                0x3
#define _BAUDCTL_BRG161_POSITION                            0x3
#define _BAUDCTL_BRG161_SIZE                                0x1
#define _BAUDCTL_BRG161_LENGTH                              0x1
#define _BAUDCTL_BRG161_MASK                                0x8
#define _BAUDCTL_CKTXP_POSN                                 0x4
#define _BAUDCTL_CKTXP_POSITION                             0x4
#define _BAUDCTL_CKTXP_SIZE                                 0x1
#define _BAUDCTL_CKTXP_LENGTH                               0x1
#define _BAUDCTL_CKTXP_MASK                                 0x10
#define _BAUDCTL_RCIDL1_POSN                                0x6
#define _BAUDCTL_RCIDL1_POSITION                            0x6
#define _BAUDCTL_RCIDL1_SIZE                                0x1
#define _BAUDCTL_RCIDL1_LENGTH                              0x1
#define _BAUDCTL_RCIDL1_MASK                                0x40
#define _BAUDCTL_RCMT_POSN                                  0x6
#define _BAUDCTL_RCMT_POSITION                              0x6
#define _BAUDCTL_RCMT_SIZE                                  0x1
#define _BAUDCTL_RCMT_LENGTH                                0x1
#define _BAUDCTL_RCMT_MASK                                  0x40
#define _BAUDCTL_RCMT1_POSN                                 0x6
#define _BAUDCTL_RCMT1_POSITION                             0x6
#define _BAUDCTL_RCMT1_SIZE                                 0x1
#define _BAUDCTL_RCMT1_LENGTH                               0x1
#define _BAUDCTL_RCMT1_MASK                                 0x40
#define _BAUDCTL_SCKP1_POSN                                 0x4
#define _BAUDCTL_SCKP1_POSITION                             0x4
#define _BAUDCTL_SCKP1_SIZE                                 0x1
#define _BAUDCTL_SCKP1_LENGTH                               0x1
#define _BAUDCTL_SCKP1_MASK                                 0x10
#define _BAUDCTL_TXCKP_POSN                                 0x4
#define _BAUDCTL_TXCKP_POSITION                             0x4
#define _BAUDCTL_TXCKP_SIZE                                 0x1
#define _BAUDCTL_TXCKP_LENGTH                               0x1
#define _BAUDCTL_TXCKP_MASK                                 0x10
#define _BAUDCTL_TXCKP1_POSN                                0x4
#define _BAUDCTL_TXCKP1_POSITION                            0x4
#define _BAUDCTL_TXCKP1_SIZE                                0x1
#define _BAUDCTL_TXCKP1_LENGTH                              0x1
#define _BAUDCTL_TXCKP1_MASK                                0x10
#define _BAUDCTL_WUE1_POSN                                  0x1
#define _BAUDCTL_WUE1_POSITION                              0x1
#define _BAUDCTL_WUE1_SIZE                                  0x1
#define _BAUDCTL_WUE1_LENGTH                                0x1
#define _BAUDCTL_WUE1_MASK                                  0x2
#define _BAUDCTL_W4E_POSN                                   0x1
#define _BAUDCTL_W4E_POSITION                               0x1
#define _BAUDCTL_W4E_SIZE                                   0x1
#define _BAUDCTL_W4E_LENGTH                                 0x1
#define _BAUDCTL_W4E_MASK                                   0x2

// Register: PWM4DC
#define PWM4DC PWM4DC
extern volatile unsigned short          PWM4DC              __at(0xFA0);
#ifndef _LIB_BUILD
asm("PWM4DC equ 0FA0h");
#endif

// Register: PWM4DCL
#define PWM4DCL PWM4DCL
extern volatile unsigned char           PWM4DCL             __at(0xFA0);
#ifndef _LIB_BUILD
asm("PWM4DCL equ 0FA0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :6;
        unsigned DC                     :2;
    };
    struct {
        unsigned                        :6;
        unsigned DC0                    :1;
        unsigned DC1                    :1;
    };
    struct {
        unsigned                        :6;
        unsigned PWM4DC0                :1;
        unsigned PWM4DC1                :1;
    };
    struct {
        unsigned                        :6;
        unsigned PWMPW0                 :1;
        unsigned PWMPW1                 :1;
    };
} PWM4DCLbits_t;
extern volatile PWM4DCLbits_t PWM4DCLbits __at(0xFA0);
// bitfield macros
#define _PWM4DCL_DC_POSN                                    0x6
#define _PWM4DCL_DC_POSITION                                0x6
#define _PWM4DCL_DC_SIZE                                    0x2
#define _PWM4DCL_DC_LENGTH                                  0x2
#define _PWM4DCL_DC_MASK                                    0xC0
#define _PWM4DCL_DC0_POSN                                   0x6
#define _PWM4DCL_DC0_POSITION                               0x6
#define _PWM4DCL_DC0_SIZE                                   0x1
#define _PWM4DCL_DC0_LENGTH                                 0x1
#define _PWM4DCL_DC0_MASK                                   0x40
#define _PWM4DCL_DC1_POSN                                   0x7
#define _PWM4DCL_DC1_POSITION                               0x7
#define _PWM4DCL_DC1_SIZE                                   0x1
#define _PWM4DCL_DC1_LENGTH                                 0x1
#define _PWM4DCL_DC1_MASK                                   0x80
#define _PWM4DCL_PWM4DC0_POSN                               0x6
#define _PWM4DCL_PWM4DC0_POSITION                           0x6
#define _PWM4DCL_PWM4DC0_SIZE                               0x1
#define _PWM4DCL_PWM4DC0_LENGTH                             0x1
#define _PWM4DCL_PWM4DC0_MASK                               0x40
#define _PWM4DCL_PWM4DC1_POSN                               0x7
#define _PWM4DCL_PWM4DC1_POSITION                           0x7
#define _PWM4DCL_PWM4DC1_SIZE                               0x1
#define _PWM4DCL_PWM4DC1_LENGTH                             0x1
#define _PWM4DCL_PWM4DC1_MASK                               0x80
#define _PWM4DCL_PWMPW0_POSN                                0x6
#define _PWM4DCL_PWMPW0_POSITION                            0x6
#define _PWM4DCL_PWMPW0_SIZE                                0x1
#define _PWM4DCL_PWMPW0_LENGTH                              0x1
#define _PWM4DCL_PWMPW0_MASK                                0x40
#define _PWM4DCL_PWMPW1_POSN                                0x7
#define _PWM4DCL_PWMPW1_POSITION                            0x7
#define _PWM4DCL_PWMPW1_SIZE                                0x1
#define _PWM4DCL_PWMPW1_LENGTH                              0x1
#define _PWM4DCL_PWMPW1_MASK                                0x80

// Register: PWM4DCH
#define PWM4DCH PWM4DCH
extern volatile unsigned char           PWM4DCH             __at(0xFA1);
#ifndef _LIB_BUILD
asm("PWM4DCH equ 0FA1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DC                     :8;
    };
    struct {
        unsigned DC2                    :1;
        unsigned DC3                    :1;
        unsigned DC4                    :1;
        unsigned DC5                    :1;
        unsigned DC6                    :1;
        unsigned DC7                    :1;
        unsigned DC8                    :1;
        unsigned DC9                    :1;
    };
    struct {
        unsigned PWM4DC2                :1;
        unsigned PWM4DC3                :1;
        unsigned PWM4DC4                :1;
        unsigned PWM4DC5                :1;
        unsigned PWM4DC6                :1;
        unsigned PWM4DC7                :1;
        unsigned PWM4DC8                :1;
        unsigned PWM4DC9                :1;
    };
    struct {
        unsigned PWMPW2                 :1;
        unsigned PWMPW3                 :1;
        unsigned PWMPW4                 :1;
        unsigned PWMPW5                 :1;
        unsigned PWMPW6                 :1;
        unsigned PWMPW7                 :1;
        unsigned PWMPW8                 :1;
        unsigned PWMPW9                 :1;
    };
} PWM4DCHbits_t;
extern volatile PWM4DCHbits_t PWM4DCHbits __at(0xFA1);
// bitfield macros
#define _PWM4DCH_DC_POSN                                    0x0
#define _PWM4DCH_DC_POSITION                                0x0
#define _PWM4DCH_DC_SIZE                                    0x8
#define _PWM4DCH_DC_LENGTH                                  0x8
#define _PWM4DCH_DC_MASK                                    0xFF
#define _PWM4DCH_DC2_POSN                                   0x0
#define _PWM4DCH_DC2_POSITION                               0x0
#define _PWM4DCH_DC2_SIZE                                   0x1
#define _PWM4DCH_DC2_LENGTH                                 0x1
#define _PWM4DCH_DC2_MASK                                   0x1
#define _PWM4DCH_DC3_POSN                                   0x1
#define _PWM4DCH_DC3_POSITION                               0x1
#define _PWM4DCH_DC3_SIZE                                   0x1
#define _PWM4DCH_DC3_LENGTH                                 0x1
#define _PWM4DCH_DC3_MASK                                   0x2
#define _PWM4DCH_DC4_POSN                                   0x2
#define _PWM4DCH_DC4_POSITION                               0x2
#define _PWM4DCH_DC4_SIZE                                   0x1
#define _PWM4DCH_DC4_LENGTH                                 0x1
#define _PWM4DCH_DC4_MASK                                   0x4
#define _PWM4DCH_DC5_POSN                                   0x3
#define _PWM4DCH_DC5_POSITION                               0x3
#define _PWM4DCH_DC5_SIZE                                   0x1
#define _PWM4DCH_DC5_LENGTH                                 0x1
#define _PWM4DCH_DC5_MASK                                   0x8
#define _PWM4DCH_DC6_POSN                                   0x4
#define _PWM4DCH_DC6_POSITION                               0x4
#define _PWM4DCH_DC6_SIZE                                   0x1
#define _PWM4DCH_DC6_LENGTH                                 0x1
#define _PWM4DCH_DC6_MASK                                   0x10
#define _PWM4DCH_DC7_POSN                                   0x5
#define _PWM4DCH_DC7_POSITION                               0x5
#define _PWM4DCH_DC7_SIZE                                   0x1
#define _PWM4DCH_DC7_LENGTH                                 0x1
#define _PWM4DCH_DC7_MASK                                   0x20
#define _PWM4DCH_DC8_POSN                                   0x6
#define _PWM4DCH_DC8_POSITION                               0x6
#define _PWM4DCH_DC8_SIZE                                   0x1
#define _PWM4DCH_DC8_LENGTH                                 0x1
#define _PWM4DCH_DC8_MASK                                   0x40
#define _PWM4DCH_DC9_POSN                                   0x7
#define _PWM4DCH_DC9_POSITION                               0x7
#define _PWM4DCH_DC9_SIZE                                   0x1
#define _PWM4DCH_DC9_LENGTH                                 0x1
#define _PWM4DCH_DC9_MASK                                   0x80
#define _PWM4DCH_PWM4DC2_POSN                               0x0
#define _PWM4DCH_PWM4DC2_POSITION                           0x0
#define _PWM4DCH_PWM4DC2_SIZE                               0x1
#define _PWM4DCH_PWM4DC2_LENGTH                             0x1
#define _PWM4DCH_PWM4DC2_MASK                               0x1
#define _PWM4DCH_PWM4DC3_POSN                               0x1
#define _PWM4DCH_PWM4DC3_POSITION                           0x1
#define _PWM4DCH_PWM4DC3_SIZE                               0x1
#define _PWM4DCH_PWM4DC3_LENGTH                             0x1
#define _PWM4DCH_PWM4DC3_MASK                               0x2
#define _PWM4DCH_PWM4DC4_POSN                               0x2
#define _PWM4DCH_PWM4DC4_POSITION                           0x2
#define _PWM4DCH_PWM4DC4_SIZE                               0x1
#define _PWM4DCH_PWM4DC4_LENGTH                             0x1
#define _PWM4DCH_PWM4DC4_MASK                               0x4
#define _PWM4DCH_PWM4DC5_POSN                               0x3
#define _PWM4DCH_PWM4DC5_POSITION                           0x3
#define _PWM4DCH_PWM4DC5_SIZE                               0x1
#define _PWM4DCH_PWM4DC5_LENGTH                             0x1
#define _PWM4DCH_PWM4DC5_MASK                               0x8
#define _PWM4DCH_PWM4DC6_POSN                               0x4
#define _PWM4DCH_PWM4DC6_POSITION                           0x4
#define _PWM4DCH_PWM4DC6_SIZE                               0x1
#define _PWM4DCH_PWM4DC6_LENGTH                             0x1
#define _PWM4DCH_PWM4DC6_MASK                               0x10
#define _PWM4DCH_PWM4DC7_POSN                               0x5
#define _PWM4DCH_PWM4DC7_POSITION                           0x5
#define _PWM4DCH_PWM4DC7_SIZE                               0x1
#define _PWM4DCH_PWM4DC7_LENGTH                             0x1
#define _PWM4DCH_PWM4DC7_MASK                               0x20
#define _PWM4DCH_PWM4DC8_POSN                               0x6
#define _PWM4DCH_PWM4DC8_POSITION                           0x6
#define _PWM4DCH_PWM4DC8_SIZE                               0x1
#define _PWM4DCH_PWM4DC8_LENGTH                             0x1
#define _PWM4DCH_PWM4DC8_MASK                               0x40
#define _PWM4DCH_PWM4DC9_POSN                               0x7
#define _PWM4DCH_PWM4DC9_POSITION                           0x7
#define _PWM4DCH_PWM4DC9_SIZE                               0x1
#define _PWM4DCH_PWM4DC9_LENGTH                             0x1
#define _PWM4DCH_PWM4DC9_MASK                               0x80
#define _PWM4DCH_PWMPW2_POSN                                0x0
#define _PWM4DCH_PWMPW2_POSITION                            0x0
#define _PWM4DCH_PWMPW2_SIZE                                0x1
#define _PWM4DCH_PWMPW2_LENGTH                              0x1
#define _PWM4DCH_PWMPW2_MASK                                0x1
#define _PWM4DCH_PWMPW3_POSN                                0x1
#define _PWM4DCH_PWMPW3_POSITION                            0x1
#define _PWM4DCH_PWMPW3_SIZE                                0x1
#define _PWM4DCH_PWMPW3_LENGTH                              0x1
#define _PWM4DCH_PWMPW3_MASK                                0x2
#define _PWM4DCH_PWMPW4_POSN                                0x2
#define _PWM4DCH_PWMPW4_POSITION                            0x2
#define _PWM4DCH_PWMPW4_SIZE                                0x1
#define _PWM4DCH_PWMPW4_LENGTH                              0x1
#define _PWM4DCH_PWMPW4_MASK                                0x4
#define _PWM4DCH_PWMPW5_POSN                                0x3
#define _PWM4DCH_PWMPW5_POSITION                            0x3
#define _PWM4DCH_PWMPW5_SIZE                                0x1
#define _PWM4DCH_PWMPW5_LENGTH                              0x1
#define _PWM4DCH_PWMPW5_MASK                                0x8
#define _PWM4DCH_PWMPW6_POSN                                0x4
#define _PWM4DCH_PWMPW6_POSITION                            0x4
#define _PWM4DCH_PWMPW6_SIZE                                0x1
#define _PWM4DCH_PWMPW6_LENGTH                              0x1
#define _PWM4DCH_PWMPW6_MASK                                0x10
#define _PWM4DCH_PWMPW7_POSN                                0x5
#define _PWM4DCH_PWMPW7_POSITION                            0x5
#define _PWM4DCH_PWMPW7_SIZE                                0x1
#define _PWM4DCH_PWMPW7_LENGTH                              0x1
#define _PWM4DCH_PWMPW7_MASK                                0x20
#define _PWM4DCH_PWMPW8_POSN                                0x6
#define _PWM4DCH_PWMPW8_POSITION                            0x6
#define _PWM4DCH_PWMPW8_SIZE                                0x1
#define _PWM4DCH_PWMPW8_LENGTH                              0x1
#define _PWM4DCH_PWMPW8_MASK                                0x40
#define _PWM4DCH_PWMPW9_POSN                                0x7
#define _PWM4DCH_PWMPW9_POSITION                            0x7
#define _PWM4DCH_PWMPW9_SIZE                                0x1
#define _PWM4DCH_PWMPW9_LENGTH                              0x1
#define _PWM4DCH_PWMPW9_MASK                                0x80

// Register: PWM4CON
#define PWM4CON PWM4CON
extern volatile unsigned char           PWM4CON             __at(0xFA2);
#ifndef _LIB_BUILD
asm("PWM4CON equ 0FA2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :4;
        unsigned POL                    :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned                        :4;
        unsigned PWM4POL                :1;
        unsigned PWM4OUT                :1;
        unsigned                        :1;
        unsigned PWM4EN                 :1;
    };
} PWM4CONbits_t;
extern volatile PWM4CONbits_t PWM4CONbits __at(0xFA2);
// bitfield macros
#define _PWM4CON_POL_POSN                                   0x4
#define _PWM4CON_POL_POSITION                               0x4
#define _PWM4CON_POL_SIZE                                   0x1
#define _PWM4CON_POL_LENGTH                                 0x1
#define _PWM4CON_POL_MASK                                   0x10
#define _PWM4CON_OUT_POSN                                   0x5
#define _PWM4CON_OUT_POSITION                               0x5
#define _PWM4CON_OUT_SIZE                                   0x1
#define _PWM4CON_OUT_LENGTH                                 0x1
#define _PWM4CON_OUT_MASK                                   0x20
#define _PWM4CON_EN_POSN                                    0x7
#define _PWM4CON_EN_POSITION                                0x7
#define _PWM4CON_EN_SIZE                                    0x1
#define _PWM4CON_EN_LENGTH                                  0x1
#define _PWM4CON_EN_MASK                                    0x80
#define _PWM4CON_PWM4POL_POSN                               0x4
#define _PWM4CON_PWM4POL_POSITION                           0x4
#define _PWM4CON_PWM4POL_SIZE                               0x1
#define _PWM4CON_PWM4POL_LENGTH                             0x1
#define _PWM4CON_PWM4POL_MASK                               0x10
#define _PWM4CON_PWM4OUT_POSN                               0x5
#define _PWM4CON_PWM4OUT_POSITION                           0x5
#define _PWM4CON_PWM4OUT_SIZE                               0x1
#define _PWM4CON_PWM4OUT_LENGTH                             0x1
#define _PWM4CON_PWM4OUT_MASK                               0x20
#define _PWM4CON_PWM4EN_POSN                                0x7
#define _PWM4CON_PWM4EN_POSITION                            0x7
#define _PWM4CON_PWM4EN_SIZE                                0x1
#define _PWM4CON_PWM4EN_LENGTH                              0x1
#define _PWM4CON_PWM4EN_MASK                                0x80

// Register: PWM3DC
#define PWM3DC PWM3DC
extern volatile unsigned short          PWM3DC              __at(0xFA3);
#ifndef _LIB_BUILD
asm("PWM3DC equ 0FA3h");
#endif

// Register: PWM3DCL
#define PWM3DCL PWM3DCL
extern volatile unsigned char           PWM3DCL             __at(0xFA3);
#ifndef _LIB_BUILD
asm("PWM3DCL equ 0FA3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :6;
        unsigned DC                     :2;
    };
    struct {
        unsigned                        :6;
        unsigned DC0                    :1;
        unsigned DC1                    :1;
    };
    struct {
        unsigned                        :6;
        unsigned PWM3DC0                :1;
        unsigned PWM3DC1                :1;
    };
    struct {
        unsigned                        :6;
        unsigned PWMPW0                 :1;
        unsigned PWMPW1                 :1;
    };
} PWM3DCLbits_t;
extern volatile PWM3DCLbits_t PWM3DCLbits __at(0xFA3);
// bitfield macros
#define _PWM3DCL_DC_POSN                                    0x6
#define _PWM3DCL_DC_POSITION                                0x6
#define _PWM3DCL_DC_SIZE                                    0x2
#define _PWM3DCL_DC_LENGTH                                  0x2
#define _PWM3DCL_DC_MASK                                    0xC0
#define _PWM3DCL_DC0_POSN                                   0x6
#define _PWM3DCL_DC0_POSITION                               0x6
#define _PWM3DCL_DC0_SIZE                                   0x1
#define _PWM3DCL_DC0_LENGTH                                 0x1
#define _PWM3DCL_DC0_MASK                                   0x40
#define _PWM3DCL_DC1_POSN                                   0x7
#define _PWM3DCL_DC1_POSITION                               0x7
#define _PWM3DCL_DC1_SIZE                                   0x1
#define _PWM3DCL_DC1_LENGTH                                 0x1
#define _PWM3DCL_DC1_MASK                                   0x80
#define _PWM3DCL_PWM3DC0_POSN                               0x6
#define _PWM3DCL_PWM3DC0_POSITION                           0x6
#define _PWM3DCL_PWM3DC0_SIZE                               0x1
#define _PWM3DCL_PWM3DC0_LENGTH                             0x1
#define _PWM3DCL_PWM3DC0_MASK                               0x40
#define _PWM3DCL_PWM3DC1_POSN                               0x7
#define _PWM3DCL_PWM3DC1_POSITION                           0x7
#define _PWM3DCL_PWM3DC1_SIZE                               0x1
#define _PWM3DCL_PWM3DC1_LENGTH                             0x1
#define _PWM3DCL_PWM3DC1_MASK                               0x80
#define _PWM3DCL_PWMPW0_POSN                                0x6
#define _PWM3DCL_PWMPW0_POSITION                            0x6
#define _PWM3DCL_PWMPW0_SIZE                                0x1
#define _PWM3DCL_PWMPW0_LENGTH                              0x1
#define _PWM3DCL_PWMPW0_MASK                                0x40
#define _PWM3DCL_PWMPW1_POSN                                0x7
#define _PWM3DCL_PWMPW1_POSITION                            0x7
#define _PWM3DCL_PWMPW1_SIZE                                0x1
#define _PWM3DCL_PWMPW1_LENGTH                              0x1
#define _PWM3DCL_PWMPW1_MASK                                0x80

// Register: PWM3DCH
#define PWM3DCH PWM3DCH
extern volatile unsigned char           PWM3DCH             __at(0xFA4);
#ifndef _LIB_BUILD
asm("PWM3DCH equ 0FA4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DC                     :8;
    };
    struct {
        unsigned DC2                    :1;
        unsigned DC3                    :1;
        unsigned DC4                    :1;
        unsigned DC5                    :1;
        unsigned DC6                    :1;
        unsigned DC7                    :1;
        unsigned DC8                    :1;
        unsigned DC9                    :1;
    };
    struct {
        unsigned PWM3DC2                :1;
        unsigned PWM3DC3                :1;
        unsigned PWM3DC4                :1;
        unsigned PWM3DC5                :1;
        unsigned PWM3DC6                :1;
        unsigned PWM3DC7                :1;
        unsigned PWM3DC8                :1;
        unsigned PWM3DC9                :1;
    };
    struct {
        unsigned PWMPW2                 :1;
        unsigned PWMPW3                 :1;
        unsigned PWMPW4                 :1;
        unsigned PWMPW5                 :1;
        unsigned PWMPW6                 :1;
        unsigned PWMPW7                 :1;
        unsigned PWMPW8                 :1;
        unsigned PWMPW9                 :1;
    };
} PWM3DCHbits_t;
extern volatile PWM3DCHbits_t PWM3DCHbits __at(0xFA4);
// bitfield macros
#define _PWM3DCH_DC_POSN                                    0x0
#define _PWM3DCH_DC_POSITION                                0x0
#define _PWM3DCH_DC_SIZE                                    0x8
#define _PWM3DCH_DC_LENGTH                                  0x8
#define _PWM3DCH_DC_MASK                                    0xFF
#define _PWM3DCH_DC2_POSN                                   0x0
#define _PWM3DCH_DC2_POSITION                               0x0
#define _PWM3DCH_DC2_SIZE                                   0x1
#define _PWM3DCH_DC2_LENGTH                                 0x1
#define _PWM3DCH_DC2_MASK                                   0x1
#define _PWM3DCH_DC3_POSN                                   0x1
#define _PWM3DCH_DC3_POSITION                               0x1
#define _PWM3DCH_DC3_SIZE                                   0x1
#define _PWM3DCH_DC3_LENGTH                                 0x1
#define _PWM3DCH_DC3_MASK                                   0x2
#define _PWM3DCH_DC4_POSN                                   0x2
#define _PWM3DCH_DC4_POSITION                               0x2
#define _PWM3DCH_DC4_SIZE                                   0x1
#define _PWM3DCH_DC4_LENGTH                                 0x1
#define _PWM3DCH_DC4_MASK                                   0x4
#define _PWM3DCH_DC5_POSN                                   0x3
#define _PWM3DCH_DC5_POSITION                               0x3
#define _PWM3DCH_DC5_SIZE                                   0x1
#define _PWM3DCH_DC5_LENGTH                                 0x1
#define _PWM3DCH_DC5_MASK                                   0x8
#define _PWM3DCH_DC6_POSN                                   0x4
#define _PWM3DCH_DC6_POSITION                               0x4
#define _PWM3DCH_DC6_SIZE                                   0x1
#define _PWM3DCH_DC6_LENGTH                                 0x1
#define _PWM3DCH_DC6_MASK                                   0x10
#define _PWM3DCH_DC7_POSN                                   0x5
#define _PWM3DCH_DC7_POSITION                               0x5
#define _PWM3DCH_DC7_SIZE                                   0x1
#define _PWM3DCH_DC7_LENGTH                                 0x1
#define _PWM3DCH_DC7_MASK                                   0x20
#define _PWM3DCH_DC8_POSN                                   0x6
#define _PWM3DCH_DC8_POSITION                               0x6
#define _PWM3DCH_DC8_SIZE                                   0x1
#define _PWM3DCH_DC8_LENGTH                                 0x1
#define _PWM3DCH_DC8_MASK                                   0x40
#define _PWM3DCH_DC9_POSN                                   0x7
#define _PWM3DCH_DC9_POSITION                               0x7
#define _PWM3DCH_DC9_SIZE                                   0x1
#define _PWM3DCH_DC9_LENGTH                                 0x1
#define _PWM3DCH_DC9_MASK                                   0x80
#define _PWM3DCH_PWM3DC2_POSN                               0x0
#define _PWM3DCH_PWM3DC2_POSITION                           0x0
#define _PWM3DCH_PWM3DC2_SIZE                               0x1
#define _PWM3DCH_PWM3DC2_LENGTH                             0x1
#define _PWM3DCH_PWM3DC2_MASK                               0x1
#define _PWM3DCH_PWM3DC3_POSN                               0x1
#define _PWM3DCH_PWM3DC3_POSITION                           0x1
#define _PWM3DCH_PWM3DC3_SIZE                               0x1
#define _PWM3DCH_PWM3DC3_LENGTH                             0x1
#define _PWM3DCH_PWM3DC3_MASK                               0x2
#define _PWM3DCH_PWM3DC4_POSN                               0x2
#define _PWM3DCH_PWM3DC4_POSITION                           0x2
#define _PWM3DCH_PWM3DC4_SIZE                               0x1
#define _PWM3DCH_PWM3DC4_LENGTH                             0x1
#define _PWM3DCH_PWM3DC4_MASK                               0x4
#define _PWM3DCH_PWM3DC5_POSN                               0x3
#define _PWM3DCH_PWM3DC5_POSITION                           0x3
#define _PWM3DCH_PWM3DC5_SIZE                               0x1
#define _PWM3DCH_PWM3DC5_LENGTH                             0x1
#define _PWM3DCH_PWM3DC5_MASK                               0x8
#define _PWM3DCH_PWM3DC6_POSN                               0x4
#define _PWM3DCH_PWM3DC6_POSITION                           0x4
#define _PWM3DCH_PWM3DC6_SIZE                               0x1
#define _PWM3DCH_PWM3DC6_LENGTH                             0x1
#define _PWM3DCH_PWM3DC6_MASK                               0x10
#define _PWM3DCH_PWM3DC7_POSN                               0x5
#define _PWM3DCH_PWM3DC7_POSITION                           0x5
#define _PWM3DCH_PWM3DC7_SIZE                               0x1
#define _PWM3DCH_PWM3DC7_LENGTH                             0x1
#define _PWM3DCH_PWM3DC7_MASK                               0x20
#define _PWM3DCH_PWM3DC8_POSN                               0x6
#define _PWM3DCH_PWM3DC8_POSITION                           0x6
#define _PWM3DCH_PWM3DC8_SIZE                               0x1
#define _PWM3DCH_PWM3DC8_LENGTH                             0x1
#define _PWM3DCH_PWM3DC8_MASK                               0x40
#define _PWM3DCH_PWM3DC9_POSN                               0x7
#define _PWM3DCH_PWM3DC9_POSITION                           0x7
#define _PWM3DCH_PWM3DC9_SIZE                               0x1
#define _PWM3DCH_PWM3DC9_LENGTH                             0x1
#define _PWM3DCH_PWM3DC9_MASK                               0x80
#define _PWM3DCH_PWMPW2_POSN                                0x0
#define _PWM3DCH_PWMPW2_POSITION                            0x0
#define _PWM3DCH_PWMPW2_SIZE                                0x1
#define _PWM3DCH_PWMPW2_LENGTH                              0x1
#define _PWM3DCH_PWMPW2_MASK                                0x1
#define _PWM3DCH_PWMPW3_POSN                                0x1
#define _PWM3DCH_PWMPW3_POSITION                            0x1
#define _PWM3DCH_PWMPW3_SIZE                                0x1
#define _PWM3DCH_PWMPW3_LENGTH                              0x1
#define _PWM3DCH_PWMPW3_MASK                                0x2
#define _PWM3DCH_PWMPW4_POSN                                0x2
#define _PWM3DCH_PWMPW4_POSITION                            0x2
#define _PWM3DCH_PWMPW4_SIZE                                0x1
#define _PWM3DCH_PWMPW4_LENGTH                              0x1
#define _PWM3DCH_PWMPW4_MASK                                0x4
#define _PWM3DCH_PWMPW5_POSN                                0x3
#define _PWM3DCH_PWMPW5_POSITION                            0x3
#define _PWM3DCH_PWMPW5_SIZE                                0x1
#define _PWM3DCH_PWMPW5_LENGTH                              0x1
#define _PWM3DCH_PWMPW5_MASK                                0x8
#define _PWM3DCH_PWMPW6_POSN                                0x4
#define _PWM3DCH_PWMPW6_POSITION                            0x4
#define _PWM3DCH_PWMPW6_SIZE                                0x1
#define _PWM3DCH_PWMPW6_LENGTH                              0x1
#define _PWM3DCH_PWMPW6_MASK                                0x10
#define _PWM3DCH_PWMPW7_POSN                                0x5
#define _PWM3DCH_PWMPW7_POSITION                            0x5
#define _PWM3DCH_PWMPW7_SIZE                                0x1
#define _PWM3DCH_PWMPW7_LENGTH                              0x1
#define _PWM3DCH_PWMPW7_MASK                                0x20
#define _PWM3DCH_PWMPW8_POSN                                0x6
#define _PWM3DCH_PWMPW8_POSITION                            0x6
#define _PWM3DCH_PWMPW8_SIZE                                0x1
#define _PWM3DCH_PWMPW8_LENGTH                              0x1
#define _PWM3DCH_PWMPW8_MASK                                0x40
#define _PWM3DCH_PWMPW9_POSN                                0x7
#define _PWM3DCH_PWMPW9_POSITION                            0x7
#define _PWM3DCH_PWMPW9_SIZE                                0x1
#define _PWM3DCH_PWMPW9_LENGTH                              0x1
#define _PWM3DCH_PWMPW9_MASK                                0x80

// Register: PWM3CON
#define PWM3CON PWM3CON
extern volatile unsigned char           PWM3CON             __at(0xFA5);
#ifndef _LIB_BUILD
asm("PWM3CON equ 0FA5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :4;
        unsigned POL                    :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned                        :4;
        unsigned PWM3POL                :1;
        unsigned PWM3OUT                :1;
        unsigned                        :1;
        unsigned PWM3EN                 :1;
    };
} PWM3CONbits_t;
extern volatile PWM3CONbits_t PWM3CONbits __at(0xFA5);
// bitfield macros
#define _PWM3CON_POL_POSN                                   0x4
#define _PWM3CON_POL_POSITION                               0x4
#define _PWM3CON_POL_SIZE                                   0x1
#define _PWM3CON_POL_LENGTH                                 0x1
#define _PWM3CON_POL_MASK                                   0x10
#define _PWM3CON_OUT_POSN                                   0x5
#define _PWM3CON_OUT_POSITION                               0x5
#define _PWM3CON_OUT_SIZE                                   0x1
#define _PWM3CON_OUT_LENGTH                                 0x1
#define _PWM3CON_OUT_MASK                                   0x20
#define _PWM3CON_EN_POSN                                    0x7
#define _PWM3CON_EN_POSITION                                0x7
#define _PWM3CON_EN_SIZE                                    0x1
#define _PWM3CON_EN_LENGTH                                  0x1
#define _PWM3CON_EN_MASK                                    0x80
#define _PWM3CON_PWM3POL_POSN                               0x4
#define _PWM3CON_PWM3POL_POSITION                           0x4
#define _PWM3CON_PWM3POL_SIZE                               0x1
#define _PWM3CON_PWM3POL_LENGTH                             0x1
#define _PWM3CON_PWM3POL_MASK                               0x10
#define _PWM3CON_PWM3OUT_POSN                               0x5
#define _PWM3CON_PWM3OUT_POSITION                           0x5
#define _PWM3CON_PWM3OUT_SIZE                               0x1
#define _PWM3CON_PWM3OUT_LENGTH                             0x1
#define _PWM3CON_PWM3OUT_MASK                               0x20
#define _PWM3CON_PWM3EN_POSN                                0x7
#define _PWM3CON_PWM3EN_POSITION                            0x7
#define _PWM3CON_PWM3EN_SIZE                                0x1
#define _PWM3CON_PWM3EN_LENGTH                              0x1
#define _PWM3CON_PWM3EN_MASK                                0x80

// Register: CCPR2
#define CCPR2 CCPR2
extern volatile unsigned short          CCPR2               __at(0xFA6);
#ifndef _LIB_BUILD
asm("CCPR2 equ 0FA6h");
#endif

// Register: CCPR2L
#define CCPR2L CCPR2L
extern volatile unsigned char           CCPR2L              __at(0xFA6);
#ifndef _LIB_BUILD
asm("CCPR2L equ 0FA6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RL                     :8;
    };
} CCPR2Lbits_t;
extern volatile CCPR2Lbits_t CCPR2Lbits __at(0xFA6);
// bitfield macros
#define _CCPR2L_RL_POSN                                     0x0
#define _CCPR2L_RL_POSITION                                 0x0
#define _CCPR2L_RL_SIZE                                     0x8
#define _CCPR2L_RL_LENGTH                                   0x8
#define _CCPR2L_RL_MASK                                     0xFF

// Register: CCPR2H
#define CCPR2H CCPR2H
extern volatile unsigned char           CCPR2H              __at(0xFA7);
#ifndef _LIB_BUILD
asm("CCPR2H equ 0FA7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RH                     :8;
    };
} CCPR2Hbits_t;
extern volatile CCPR2Hbits_t CCPR2Hbits __at(0xFA7);
// bitfield macros
#define _CCPR2H_RH_POSN                                     0x0
#define _CCPR2H_RH_POSITION                                 0x0
#define _CCPR2H_RH_SIZE                                     0x8
#define _CCPR2H_RH_LENGTH                                   0x8
#define _CCPR2H_RH_MASK                                     0xFF

// Register: CCP2CON
#define CCP2CON CCP2CON
extern volatile unsigned char           CCP2CON             __at(0xFA8);
#ifndef _LIB_BUILD
asm("CCP2CON equ 0FA8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :4;
        unsigned FMT                    :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned MODE3                  :1;
    };
    struct {
        unsigned CCP2MODE               :4;
        unsigned CCP2FMT                :1;
        unsigned CCP2OUT                :1;
        unsigned                        :1;
        unsigned CCP2EN                 :1;
    };
    struct {
        unsigned CCP2MODE0              :1;
        unsigned CCP2MODE1              :1;
        unsigned CCP2MODE2              :1;
        unsigned CCP2MODE3              :1;
    };
} CCP2CONbits_t;
extern volatile CCP2CONbits_t CCP2CONbits __at(0xFA8);
// bitfield macros
#define _CCP2CON_MODE_POSN                                  0x0
#define _CCP2CON_MODE_POSITION                              0x0
#define _CCP2CON_MODE_SIZE                                  0x4
#define _CCP2CON_MODE_LENGTH                                0x4
#define _CCP2CON_MODE_MASK                                  0xF
#define _CCP2CON_FMT_POSN                                   0x4
#define _CCP2CON_FMT_POSITION                               0x4
#define _CCP2CON_FMT_SIZE                                   0x1
#define _CCP2CON_FMT_LENGTH                                 0x1
#define _CCP2CON_FMT_MASK                                   0x10
#define _CCP2CON_OUT_POSN                                   0x5
#define _CCP2CON_OUT_POSITION                               0x5
#define _CCP2CON_OUT_SIZE                                   0x1
#define _CCP2CON_OUT_LENGTH                                 0x1
#define _CCP2CON_OUT_MASK                                   0x20
#define _CCP2CON_EN_POSN                                    0x7
#define _CCP2CON_EN_POSITION                                0x7
#define _CCP2CON_EN_SIZE                                    0x1
#define _CCP2CON_EN_LENGTH                                  0x1
#define _CCP2CON_EN_MASK                                    0x80
#define _CCP2CON_MODE0_POSN                                 0x0
#define _CCP2CON_MODE0_POSITION                             0x0
#define _CCP2CON_MODE0_SIZE                                 0x1
#define _CCP2CON_MODE0_LENGTH                               0x1
#define _CCP2CON_MODE0_MASK                                 0x1
#define _CCP2CON_MODE1_POSN                                 0x1
#define _CCP2CON_MODE1_POSITION                             0x1
#define _CCP2CON_MODE1_SIZE                                 0x1
#define _CCP2CON_MODE1_LENGTH                               0x1
#define _CCP2CON_MODE1_MASK                                 0x2
#define _CCP2CON_MODE2_POSN                                 0x2
#define _CCP2CON_MODE2_POSITION                             0x2
#define _CCP2CON_MODE2_SIZE                                 0x1
#define _CCP2CON_MODE2_LENGTH                               0x1
#define _CCP2CON_MODE2_MASK                                 0x4
#define _CCP2CON_MODE3_POSN                                 0x3
#define _CCP2CON_MODE3_POSITION                             0x3
#define _CCP2CON_MODE3_SIZE                                 0x1
#define _CCP2CON_MODE3_LENGTH                               0x1
#define _CCP2CON_MODE3_MASK                                 0x8
#define _CCP2CON_CCP2MODE_POSN                              0x0
#define _CCP2CON_CCP2MODE_POSITION                          0x0
#define _CCP2CON_CCP2MODE_SIZE                              0x4
#define _CCP2CON_CCP2MODE_LENGTH                            0x4
#define _CCP2CON_CCP2MODE_MASK                              0xF
#define _CCP2CON_CCP2FMT_POSN                               0x4
#define _CCP2CON_CCP2FMT_POSITION                           0x4
#define _CCP2CON_CCP2FMT_SIZE                               0x1
#define _CCP2CON_CCP2FMT_LENGTH                             0x1
#define _CCP2CON_CCP2FMT_MASK                               0x10
#define _CCP2CON_CCP2OUT_POSN                               0x5
#define _CCP2CON_CCP2OUT_POSITION                           0x5
#define _CCP2CON_CCP2OUT_SIZE                               0x1
#define _CCP2CON_CCP2OUT_LENGTH                             0x1
#define _CCP2CON_CCP2OUT_MASK                               0x20
#define _CCP2CON_CCP2EN_POSN                                0x7
#define _CCP2CON_CCP2EN_POSITION                            0x7
#define _CCP2CON_CCP2EN_SIZE                                0x1
#define _CCP2CON_CCP2EN_LENGTH                              0x1
#define _CCP2CON_CCP2EN_MASK                                0x80
#define _CCP2CON_CCP2MODE0_POSN                             0x0
#define _CCP2CON_CCP2MODE0_POSITION                         0x0
#define _CCP2CON_CCP2MODE0_SIZE                             0x1
#define _CCP2CON_CCP2MODE0_LENGTH                           0x1
#define _CCP2CON_CCP2MODE0_MASK                             0x1
#define _CCP2CON_CCP2MODE1_POSN                             0x1
#define _CCP2CON_CCP2MODE1_POSITION                         0x1
#define _CCP2CON_CCP2MODE1_SIZE                             0x1
#define _CCP2CON_CCP2MODE1_LENGTH                           0x1
#define _CCP2CON_CCP2MODE1_MASK                             0x2
#define _CCP2CON_CCP2MODE2_POSN                             0x2
#define _CCP2CON_CCP2MODE2_POSITION                         0x2
#define _CCP2CON_CCP2MODE2_SIZE                             0x1
#define _CCP2CON_CCP2MODE2_LENGTH                           0x1
#define _CCP2CON_CCP2MODE2_MASK                             0x4
#define _CCP2CON_CCP2MODE3_POSN                             0x3
#define _CCP2CON_CCP2MODE3_POSITION                         0x3
#define _CCP2CON_CCP2MODE3_SIZE                             0x1
#define _CCP2CON_CCP2MODE3_LENGTH                           0x1
#define _CCP2CON_CCP2MODE3_MASK                             0x8

// Register: CCP2CAP
#define CCP2CAP CCP2CAP
extern volatile unsigned char           CCP2CAP             __at(0xFA9);
#ifndef _LIB_BUILD
asm("CCP2CAP equ 0FA9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CTS                    :8;
    };
    struct {
        unsigned CTS0                   :1;
        unsigned CTS1                   :1;
    };
    struct {
        unsigned CCP2CTS                :8;
    };
    struct {
        unsigned CCP2CTS0               :1;
        unsigned CCP2CTS1               :1;
    };
} CCP2CAPbits_t;
extern volatile CCP2CAPbits_t CCP2CAPbits __at(0xFA9);
// bitfield macros
#define _CCP2CAP_CTS_POSN                                   0x0
#define _CCP2CAP_CTS_POSITION                               0x0
#define _CCP2CAP_CTS_SIZE                                   0x8
#define _CCP2CAP_CTS_LENGTH                                 0x8
#define _CCP2CAP_CTS_MASK                                   0xFF
#define _CCP2CAP_CTS0_POSN                                  0x0
#define _CCP2CAP_CTS0_POSITION                              0x0
#define _CCP2CAP_CTS0_SIZE                                  0x1
#define _CCP2CAP_CTS0_LENGTH                                0x1
#define _CCP2CAP_CTS0_MASK                                  0x1
#define _CCP2CAP_CTS1_POSN                                  0x1
#define _CCP2CAP_CTS1_POSITION                              0x1
#define _CCP2CAP_CTS1_SIZE                                  0x1
#define _CCP2CAP_CTS1_LENGTH                                0x1
#define _CCP2CAP_CTS1_MASK                                  0x2
#define _CCP2CAP_CCP2CTS_POSN                               0x0
#define _CCP2CAP_CCP2CTS_POSITION                           0x0
#define _CCP2CAP_CCP2CTS_SIZE                               0x8
#define _CCP2CAP_CCP2CTS_LENGTH                             0x8
#define _CCP2CAP_CCP2CTS_MASK                               0xFF
#define _CCP2CAP_CCP2CTS0_POSN                              0x0
#define _CCP2CAP_CCP2CTS0_POSITION                          0x0
#define _CCP2CAP_CCP2CTS0_SIZE                              0x1
#define _CCP2CAP_CCP2CTS0_LENGTH                            0x1
#define _CCP2CAP_CCP2CTS0_MASK                              0x1
#define _CCP2CAP_CCP2CTS1_POSN                              0x1
#define _CCP2CAP_CCP2CTS1_POSITION                          0x1
#define _CCP2CAP_CCP2CTS1_SIZE                              0x1
#define _CCP2CAP_CCP2CTS1_LENGTH                            0x1
#define _CCP2CAP_CCP2CTS1_MASK                              0x2

// Register: CCPR1
#define CCPR1 CCPR1
extern volatile unsigned short          CCPR1               __at(0xFAA);
#ifndef _LIB_BUILD
asm("CCPR1 equ 0FAAh");
#endif

// Register: CCPR1L
#define CCPR1L CCPR1L
extern volatile unsigned char           CCPR1L              __at(0xFAA);
#ifndef _LIB_BUILD
asm("CCPR1L equ 0FAAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RL                     :8;
    };
} CCPR1Lbits_t;
extern volatile CCPR1Lbits_t CCPR1Lbits __at(0xFAA);
// bitfield macros
#define _CCPR1L_RL_POSN                                     0x0
#define _CCPR1L_RL_POSITION                                 0x0
#define _CCPR1L_RL_SIZE                                     0x8
#define _CCPR1L_RL_LENGTH                                   0x8
#define _CCPR1L_RL_MASK                                     0xFF

// Register: CCPR1H
#define CCPR1H CCPR1H
extern volatile unsigned char           CCPR1H              __at(0xFAB);
#ifndef _LIB_BUILD
asm("CCPR1H equ 0FABh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RH                     :8;
    };
} CCPR1Hbits_t;
extern volatile CCPR1Hbits_t CCPR1Hbits __at(0xFAB);
// bitfield macros
#define _CCPR1H_RH_POSN                                     0x0
#define _CCPR1H_RH_POSITION                                 0x0
#define _CCPR1H_RH_SIZE                                     0x8
#define _CCPR1H_RH_LENGTH                                   0x8
#define _CCPR1H_RH_MASK                                     0xFF

// Register: CCP1CON
#define CCP1CON CCP1CON
extern volatile unsigned char           CCP1CON             __at(0xFAC);
#ifndef _LIB_BUILD
asm("CCP1CON equ 0FACh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :4;
        unsigned FMT                    :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned MODE3                  :1;
    };
    struct {
        unsigned CCP1MODE               :4;
        unsigned CCP1FMT                :1;
        unsigned CCP1OUT                :1;
        unsigned                        :1;
        unsigned CCP1EN                 :1;
    };
    struct {
        unsigned CCP1MODE0              :1;
        unsigned CCP1MODE1              :1;
        unsigned CCP1MODE2              :1;
        unsigned CCP1MODE3              :1;
    };
    struct {
        unsigned                        :7;
        unsigned P1M1                   :1;
    };
} CCP1CONbits_t;
extern volatile CCP1CONbits_t CCP1CONbits __at(0xFAC);
// bitfield macros
#define _CCP1CON_MODE_POSN                                  0x0
#define _CCP1CON_MODE_POSITION                              0x0
#define _CCP1CON_MODE_SIZE                                  0x4
#define _CCP1CON_MODE_LENGTH                                0x4
#define _CCP1CON_MODE_MASK                                  0xF
#define _CCP1CON_FMT_POSN                                   0x4
#define _CCP1CON_FMT_POSITION                               0x4
#define _CCP1CON_FMT_SIZE                                   0x1
#define _CCP1CON_FMT_LENGTH                                 0x1
#define _CCP1CON_FMT_MASK                                   0x10
#define _CCP1CON_OUT_POSN                                   0x5
#define _CCP1CON_OUT_POSITION                               0x5
#define _CCP1CON_OUT_SIZE                                   0x1
#define _CCP1CON_OUT_LENGTH                                 0x1
#define _CCP1CON_OUT_MASK                                   0x20
#define _CCP1CON_EN_POSN                                    0x7
#define _CCP1CON_EN_POSITION                                0x7
#define _CCP1CON_EN_SIZE                                    0x1
#define _CCP1CON_EN_LENGTH                                  0x1
#define _CCP1CON_EN_MASK                                    0x80
#define _CCP1CON_MODE0_POSN                                 0x0
#define _CCP1CON_MODE0_POSITION                             0x0
#define _CCP1CON_MODE0_SIZE                                 0x1
#define _CCP1CON_MODE0_LENGTH                               0x1
#define _CCP1CON_MODE0_MASK                                 0x1
#define _CCP1CON_MODE1_POSN                                 0x1
#define _CCP1CON_MODE1_POSITION                             0x1
#define _CCP1CON_MODE1_SIZE                                 0x1
#define _CCP1CON_MODE1_LENGTH                               0x1
#define _CCP1CON_MODE1_MASK                                 0x2
#define _CCP1CON_MODE2_POSN                                 0x2
#define _CCP1CON_MODE2_POSITION                             0x2
#define _CCP1CON_MODE2_SIZE                                 0x1
#define _CCP1CON_MODE2_LENGTH                               0x1
#define _CCP1CON_MODE2_MASK                                 0x4
#define _CCP1CON_MODE3_POSN                                 0x3
#define _CCP1CON_MODE3_POSITION                             0x3
#define _CCP1CON_MODE3_SIZE                                 0x1
#define _CCP1CON_MODE3_LENGTH                               0x1
#define _CCP1CON_MODE3_MASK                                 0x8
#define _CCP1CON_CCP1MODE_POSN                              0x0
#define _CCP1CON_CCP1MODE_POSITION                          0x0
#define _CCP1CON_CCP1MODE_SIZE                              0x4
#define _CCP1CON_CCP1MODE_LENGTH                            0x4
#define _CCP1CON_CCP1MODE_MASK                              0xF
#define _CCP1CON_CCP1FMT_POSN                               0x4
#define _CCP1CON_CCP1FMT_POSITION                           0x4
#define _CCP1CON_CCP1FMT_SIZE                               0x1
#define _CCP1CON_CCP1FMT_LENGTH                             0x1
#define _CCP1CON_CCP1FMT_MASK                               0x10
#define _CCP1CON_CCP1OUT_POSN                               0x5
#define _CCP1CON_CCP1OUT_POSITION                           0x5
#define _CCP1CON_CCP1OUT_SIZE                               0x1
#define _CCP1CON_CCP1OUT_LENGTH                             0x1
#define _CCP1CON_CCP1OUT_MASK                               0x20
#define _CCP1CON_CCP1EN_POSN                                0x7
#define _CCP1CON_CCP1EN_POSITION                            0x7
#define _CCP1CON_CCP1EN_SIZE                                0x1
#define _CCP1CON_CCP1EN_LENGTH                              0x1
#define _CCP1CON_CCP1EN_MASK                                0x80
#define _CCP1CON_CCP1MODE0_POSN                             0x0
#define _CCP1CON_CCP1MODE0_POSITION                         0x0
#define _CCP1CON_CCP1MODE0_SIZE                             0x1
#define _CCP1CON_CCP1MODE0_LENGTH                           0x1
#define _CCP1CON_CCP1MODE0_MASK                             0x1
#define _CCP1CON_CCP1MODE1_POSN                             0x1
#define _CCP1CON_CCP1MODE1_POSITION                         0x1
#define _CCP1CON_CCP1MODE1_SIZE                             0x1
#define _CCP1CON_CCP1MODE1_LENGTH                           0x1
#define _CCP1CON_CCP1MODE1_MASK                             0x2
#define _CCP1CON_CCP1MODE2_POSN                             0x2
#define _CCP1CON_CCP1MODE2_POSITION                         0x2
#define _CCP1CON_CCP1MODE2_SIZE                             0x1
#define _CCP1CON_CCP1MODE2_LENGTH                           0x1
#define _CCP1CON_CCP1MODE2_MASK                             0x4
#define _CCP1CON_CCP1MODE3_POSN                             0x3
#define _CCP1CON_CCP1MODE3_POSITION                         0x3
#define _CCP1CON_CCP1MODE3_SIZE                             0x1
#define _CCP1CON_CCP1MODE3_LENGTH                           0x1
#define _CCP1CON_CCP1MODE3_MASK                             0x8
#define _CCP1CON_P1M1_POSN                                  0x7
#define _CCP1CON_P1M1_POSITION                              0x7
#define _CCP1CON_P1M1_SIZE                                  0x1
#define _CCP1CON_P1M1_LENGTH                                0x1
#define _CCP1CON_P1M1_MASK                                  0x80

// Register: CCP1CAP
#define CCP1CAP CCP1CAP
extern volatile unsigned char           CCP1CAP             __at(0xFAD);
#ifndef _LIB_BUILD
asm("CCP1CAP equ 0FADh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CTS                    :8;
    };
    struct {
        unsigned CTS0                   :1;
        unsigned CTS1                   :1;
    };
    struct {
        unsigned CCP1CTS                :8;
    };
    struct {
        unsigned CCP1CTS0               :1;
        unsigned CCP1CTS1               :1;
    };
} CCP1CAPbits_t;
extern volatile CCP1CAPbits_t CCP1CAPbits __at(0xFAD);
// bitfield macros
#define _CCP1CAP_CTS_POSN                                   0x0
#define _CCP1CAP_CTS_POSITION                               0x0
#define _CCP1CAP_CTS_SIZE                                   0x8
#define _CCP1CAP_CTS_LENGTH                                 0x8
#define _CCP1CAP_CTS_MASK                                   0xFF
#define _CCP1CAP_CTS0_POSN                                  0x0
#define _CCP1CAP_CTS0_POSITION                              0x0
#define _CCP1CAP_CTS0_SIZE                                  0x1
#define _CCP1CAP_CTS0_LENGTH                                0x1
#define _CCP1CAP_CTS0_MASK                                  0x1
#define _CCP1CAP_CTS1_POSN                                  0x1
#define _CCP1CAP_CTS1_POSITION                              0x1
#define _CCP1CAP_CTS1_SIZE                                  0x1
#define _CCP1CAP_CTS1_LENGTH                                0x1
#define _CCP1CAP_CTS1_MASK                                  0x2
#define _CCP1CAP_CCP1CTS_POSN                               0x0
#define _CCP1CAP_CCP1CTS_POSITION                           0x0
#define _CCP1CAP_CCP1CTS_SIZE                               0x8
#define _CCP1CAP_CCP1CTS_LENGTH                             0x8
#define _CCP1CAP_CCP1CTS_MASK                               0xFF
#define _CCP1CAP_CCP1CTS0_POSN                              0x0
#define _CCP1CAP_CCP1CTS0_POSITION                          0x0
#define _CCP1CAP_CCP1CTS0_SIZE                              0x1
#define _CCP1CAP_CCP1CTS0_LENGTH                            0x1
#define _CCP1CAP_CCP1CTS0_MASK                              0x1
#define _CCP1CAP_CCP1CTS1_POSN                              0x1
#define _CCP1CAP_CCP1CTS1_POSITION                          0x1
#define _CCP1CAP_CCP1CTS1_SIZE                              0x1
#define _CCP1CAP_CCP1CTS1_LENGTH                            0x1
#define _CCP1CAP_CCP1CTS1_MASK                              0x2

// Register: CCPTMRS
#define CCPTMRS CCPTMRS
extern volatile unsigned char           CCPTMRS             __at(0xFAE);
#ifndef _LIB_BUILD
asm("CCPTMRS equ 0FAEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned C1TSEL                 :2;
        unsigned C2TSEL                 :2;
        unsigned P3TSEL                 :2;
        unsigned P4TSEL                 :2;
    };
    struct {
        unsigned C1TSEL0                :1;
        unsigned C1TSEL1                :1;
        unsigned C2TSEL0                :1;
        unsigned C2TSEL1                :1;
        unsigned P3TSEL0                :1;
        unsigned P3TSEL1                :1;
        unsigned P4TSEL0                :1;
        unsigned P4TSEL1                :1;
    };
} CCPTMRSbits_t;
extern volatile CCPTMRSbits_t CCPTMRSbits __at(0xFAE);
// bitfield macros
#define _CCPTMRS_C1TSEL_POSN                                0x0
#define _CCPTMRS_C1TSEL_POSITION                            0x0
#define _CCPTMRS_C1TSEL_SIZE                                0x2
#define _CCPTMRS_C1TSEL_LENGTH                              0x2
#define _CCPTMRS_C1TSEL_MASK                                0x3
#define _CCPTMRS_C2TSEL_POSN                                0x2
#define _CCPTMRS_C2TSEL_POSITION                            0x2
#define _CCPTMRS_C2TSEL_SIZE                                0x2
#define _CCPTMRS_C2TSEL_LENGTH                              0x2
#define _CCPTMRS_C2TSEL_MASK                                0xC
#define _CCPTMRS_P3TSEL_POSN                                0x4
#define _CCPTMRS_P3TSEL_POSITION                            0x4
#define _CCPTMRS_P3TSEL_SIZE                                0x2
#define _CCPTMRS_P3TSEL_LENGTH                              0x2
#define _CCPTMRS_P3TSEL_MASK                                0x30
#define _CCPTMRS_P4TSEL_POSN                                0x6
#define _CCPTMRS_P4TSEL_POSITION                            0x6
#define _CCPTMRS_P4TSEL_SIZE                                0x2
#define _CCPTMRS_P4TSEL_LENGTH                              0x2
#define _CCPTMRS_P4TSEL_MASK                                0xC0
#define _CCPTMRS_C1TSEL0_POSN                               0x0
#define _CCPTMRS_C1TSEL0_POSITION                           0x0
#define _CCPTMRS_C1TSEL0_SIZE                               0x1
#define _CCPTMRS_C1TSEL0_LENGTH                             0x1
#define _CCPTMRS_C1TSEL0_MASK                               0x1
#define _CCPTMRS_C1TSEL1_POSN                               0x1
#define _CCPTMRS_C1TSEL1_POSITION                           0x1
#define _CCPTMRS_C1TSEL1_SIZE                               0x1
#define _CCPTMRS_C1TSEL1_LENGTH                             0x1
#define _CCPTMRS_C1TSEL1_MASK                               0x2
#define _CCPTMRS_C2TSEL0_POSN                               0x2
#define _CCPTMRS_C2TSEL0_POSITION                           0x2
#define _CCPTMRS_C2TSEL0_SIZE                               0x1
#define _CCPTMRS_C2TSEL0_LENGTH                             0x1
#define _CCPTMRS_C2TSEL0_MASK                               0x4
#define _CCPTMRS_C2TSEL1_POSN                               0x3
#define _CCPTMRS_C2TSEL1_POSITION                           0x3
#define _CCPTMRS_C2TSEL1_SIZE                               0x1
#define _CCPTMRS_C2TSEL1_LENGTH                             0x1
#define _CCPTMRS_C2TSEL1_MASK                               0x8
#define _CCPTMRS_P3TSEL0_POSN                               0x4
#define _CCPTMRS_P3TSEL0_POSITION                           0x4
#define _CCPTMRS_P3TSEL0_SIZE                               0x1
#define _CCPTMRS_P3TSEL0_LENGTH                             0x1
#define _CCPTMRS_P3TSEL0_MASK                               0x10
#define _CCPTMRS_P3TSEL1_POSN                               0x5
#define _CCPTMRS_P3TSEL1_POSITION                           0x5
#define _CCPTMRS_P3TSEL1_SIZE                               0x1
#define _CCPTMRS_P3TSEL1_LENGTH                             0x1
#define _CCPTMRS_P3TSEL1_MASK                               0x20
#define _CCPTMRS_P4TSEL0_POSN                               0x6
#define _CCPTMRS_P4TSEL0_POSITION                           0x6
#define _CCPTMRS_P4TSEL0_SIZE                               0x1
#define _CCPTMRS_P4TSEL0_LENGTH                             0x1
#define _CCPTMRS_P4TSEL0_MASK                               0x40
#define _CCPTMRS_P4TSEL1_POSN                               0x7
#define _CCPTMRS_P4TSEL1_POSITION                           0x7
#define _CCPTMRS_P4TSEL1_SIZE                               0x1
#define _CCPTMRS_P4TSEL1_LENGTH                             0x1
#define _CCPTMRS_P4TSEL1_MASK                               0x80

// Register: T6TMR
#define T6TMR T6TMR
extern volatile unsigned char           T6TMR               __at(0xFAF);
#ifndef _LIB_BUILD
asm("T6TMR equ 0FAFh");
#endif
// aliases
extern volatile unsigned char           TMR6                __at(0xFAF);
#ifndef _LIB_BUILD
asm("TMR6 equ 0FAFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR6                   :8;
    };
} T6TMRbits_t;
extern volatile T6TMRbits_t T6TMRbits __at(0xFAF);
// bitfield macros
#define _T6TMR_TMR6_POSN                                    0x0
#define _T6TMR_TMR6_POSITION                                0x0
#define _T6TMR_TMR6_SIZE                                    0x8
#define _T6TMR_TMR6_LENGTH                                  0x8
#define _T6TMR_TMR6_MASK                                    0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned TMR6                   :8;
    };
} TMR6bits_t;
extern volatile TMR6bits_t TMR6bits __at(0xFAF);
// bitfield macros
#define _TMR6_TMR6_POSN                                     0x0
#define _TMR6_TMR6_POSITION                                 0x0
#define _TMR6_TMR6_SIZE                                     0x8
#define _TMR6_TMR6_LENGTH                                   0x8
#define _TMR6_TMR6_MASK                                     0xFF

// Register: T6PR
#define T6PR T6PR
extern volatile unsigned char           T6PR                __at(0xFB0);
#ifndef _LIB_BUILD
asm("T6PR equ 0FB0h");
#endif
// aliases
extern volatile unsigned char           PR6                 __at(0xFB0);
#ifndef _LIB_BUILD
asm("PR6 equ 0FB0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PR6                    :8;
    };
} T6PRbits_t;
extern volatile T6PRbits_t T6PRbits __at(0xFB0);
// bitfield macros
#define _T6PR_PR6_POSN                                      0x0
#define _T6PR_PR6_POSITION                                  0x0
#define _T6PR_PR6_SIZE                                      0x8
#define _T6PR_PR6_LENGTH                                    0x8
#define _T6PR_PR6_MASK                                      0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned PR6                    :8;
    };
} PR6bits_t;
extern volatile PR6bits_t PR6bits __at(0xFB0);
// bitfield macros
#define _PR6_PR6_POSN                                       0x0
#define _PR6_PR6_POSITION                                   0x0
#define _PR6_PR6_SIZE                                       0x8
#define _PR6_PR6_LENGTH                                     0x8
#define _PR6_PR6_MASK                                       0xFF

// Register: T6CON
#define T6CON T6CON
extern volatile unsigned char           T6CON               __at(0xFB1);
#ifndef _LIB_BUILD
asm("T6CON equ 0FB1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned OUTPS                  :4;
        unsigned CKPS                   :3;
        unsigned ON                     :1;
    };
    struct {
        unsigned T6OUTPS                :4;
        unsigned T6CKPS                 :3;
        unsigned T6ON                   :1;
    };
    struct {
        unsigned T6OUTPS0               :1;
        unsigned T6OUTPS1               :1;
        unsigned T6OUTPS2               :1;
        unsigned T6OUTPS3               :1;
        unsigned T6CKPS0                :1;
        unsigned T6CKPS1                :1;
        unsigned T6CKPS2                :1;
    };
    struct {
        unsigned OUTPS0                 :1;
        unsigned OUTPS1                 :1;
        unsigned OUTPS2                 :1;
        unsigned OUTPS3                 :1;
        unsigned CKPS0                  :1;
        unsigned CKPS1                  :1;
        unsigned CKPS2                  :1;
        unsigned TMR6ON                 :1;
    };
} T6CONbits_t;
extern volatile T6CONbits_t T6CONbits __at(0xFB1);
// bitfield macros
#define _T6CON_OUTPS_POSN                                   0x0
#define _T6CON_OUTPS_POSITION                               0x0
#define _T6CON_OUTPS_SIZE                                   0x4
#define _T6CON_OUTPS_LENGTH                                 0x4
#define _T6CON_OUTPS_MASK                                   0xF
#define _T6CON_CKPS_POSN                                    0x4
#define _T6CON_CKPS_POSITION                                0x4
#define _T6CON_CKPS_SIZE                                    0x3
#define _T6CON_CKPS_LENGTH                                  0x3
#define _T6CON_CKPS_MASK                                    0x70
#define _T6CON_ON_POSN                                      0x7
#define _T6CON_ON_POSITION                                  0x7
#define _T6CON_ON_SIZE                                      0x1
#define _T6CON_ON_LENGTH                                    0x1
#define _T6CON_ON_MASK                                      0x80
#define _T6CON_T6OUTPS_POSN                                 0x0
#define _T6CON_T6OUTPS_POSITION                             0x0
#define _T6CON_T6OUTPS_SIZE                                 0x4
#define _T6CON_T6OUTPS_LENGTH                               0x4
#define _T6CON_T6OUTPS_MASK                                 0xF
#define _T6CON_T6CKPS_POSN                                  0x4
#define _T6CON_T6CKPS_POSITION                              0x4
#define _T6CON_T6CKPS_SIZE                                  0x3
#define _T6CON_T6CKPS_LENGTH                                0x3
#define _T6CON_T6CKPS_MASK                                  0x70
#define _T6CON_T6ON_POSN                                    0x7
#define _T6CON_T6ON_POSITION                                0x7
#define _T6CON_T6ON_SIZE                                    0x1
#define _T6CON_T6ON_LENGTH                                  0x1
#define _T6CON_T6ON_MASK                                    0x80
#define _T6CON_T6OUTPS0_POSN                                0x0
#define _T6CON_T6OUTPS0_POSITION                            0x0
#define _T6CON_T6OUTPS0_SIZE                                0x1
#define _T6CON_T6OUTPS0_LENGTH                              0x1
#define _T6CON_T6OUTPS0_MASK                                0x1
#define _T6CON_T6OUTPS1_POSN                                0x1
#define _T6CON_T6OUTPS1_POSITION                            0x1
#define _T6CON_T6OUTPS1_SIZE                                0x1
#define _T6CON_T6OUTPS1_LENGTH                              0x1
#define _T6CON_T6OUTPS1_MASK                                0x2
#define _T6CON_T6OUTPS2_POSN                                0x2
#define _T6CON_T6OUTPS2_POSITION                            0x2
#define _T6CON_T6OUTPS2_SIZE                                0x1
#define _T6CON_T6OUTPS2_LENGTH                              0x1
#define _T6CON_T6OUTPS2_MASK                                0x4
#define _T6CON_T6OUTPS3_POSN                                0x3
#define _T6CON_T6OUTPS3_POSITION                            0x3
#define _T6CON_T6OUTPS3_SIZE                                0x1
#define _T6CON_T6OUTPS3_LENGTH                              0x1
#define _T6CON_T6OUTPS3_MASK                                0x8
#define _T6CON_T6CKPS0_POSN                                 0x4
#define _T6CON_T6CKPS0_POSITION                             0x4
#define _T6CON_T6CKPS0_SIZE                                 0x1
#define _T6CON_T6CKPS0_LENGTH                               0x1
#define _T6CON_T6CKPS0_MASK                                 0x10
#define _T6CON_T6CKPS1_POSN                                 0x5
#define _T6CON_T6CKPS1_POSITION                             0x5
#define _T6CON_T6CKPS1_SIZE                                 0x1
#define _T6CON_T6CKPS1_LENGTH                               0x1
#define _T6CON_T6CKPS1_MASK                                 0x20
#define _T6CON_T6CKPS2_POSN                                 0x6
#define _T6CON_T6CKPS2_POSITION                             0x6
#define _T6CON_T6CKPS2_SIZE                                 0x1
#define _T6CON_T6CKPS2_LENGTH                               0x1
#define _T6CON_T6CKPS2_MASK                                 0x40
#define _T6CON_OUTPS0_POSN                                  0x0
#define _T6CON_OUTPS0_POSITION                              0x0
#define _T6CON_OUTPS0_SIZE                                  0x1
#define _T6CON_OUTPS0_LENGTH                                0x1
#define _T6CON_OUTPS0_MASK                                  0x1
#define _T6CON_OUTPS1_POSN                                  0x1
#define _T6CON_OUTPS1_POSITION                              0x1
#define _T6CON_OUTPS1_SIZE                                  0x1
#define _T6CON_OUTPS1_LENGTH                                0x1
#define _T6CON_OUTPS1_MASK                                  0x2
#define _T6CON_OUTPS2_POSN                                  0x2
#define _T6CON_OUTPS2_POSITION                              0x2
#define _T6CON_OUTPS2_SIZE                                  0x1
#define _T6CON_OUTPS2_LENGTH                                0x1
#define _T6CON_OUTPS2_MASK                                  0x4
#define _T6CON_OUTPS3_POSN                                  0x3
#define _T6CON_OUTPS3_POSITION                              0x3
#define _T6CON_OUTPS3_SIZE                                  0x1
#define _T6CON_OUTPS3_LENGTH                                0x1
#define _T6CON_OUTPS3_MASK                                  0x8
#define _T6CON_CKPS0_POSN                                   0x4
#define _T6CON_CKPS0_POSITION                               0x4
#define _T6CON_CKPS0_SIZE                                   0x1
#define _T6CON_CKPS0_LENGTH                                 0x1
#define _T6CON_CKPS0_MASK                                   0x10
#define _T6CON_CKPS1_POSN                                   0x5
#define _T6CON_CKPS1_POSITION                               0x5
#define _T6CON_CKPS1_SIZE                                   0x1
#define _T6CON_CKPS1_LENGTH                                 0x1
#define _T6CON_CKPS1_MASK                                   0x20
#define _T6CON_CKPS2_POSN                                   0x6
#define _T6CON_CKPS2_POSITION                               0x6
#define _T6CON_CKPS2_SIZE                                   0x1
#define _T6CON_CKPS2_LENGTH                                 0x1
#define _T6CON_CKPS2_MASK                                   0x40
#define _T6CON_TMR6ON_POSN                                  0x7
#define _T6CON_TMR6ON_POSITION                              0x7
#define _T6CON_TMR6ON_SIZE                                  0x1
#define _T6CON_TMR6ON_LENGTH                                0x1
#define _T6CON_TMR6ON_MASK                                  0x80

// Register: T6HLT
#define T6HLT T6HLT
extern volatile unsigned char           T6HLT               __at(0xFB2);
#ifndef _LIB_BUILD
asm("T6HLT equ 0FB2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :5;
        unsigned CKSYNC                 :1;
        unsigned CKPOL                  :1;
        unsigned PSYNC                  :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned MODE3                  :1;
        unsigned MODE4                  :1;
    };
    struct {
        unsigned T6MODE                 :5;
        unsigned T6CKSYNC               :1;
        unsigned T6CKPOL                :1;
        unsigned T6PSYNC                :1;
    };
    struct {
        unsigned T6MODE0                :1;
        unsigned T6MODE1                :1;
        unsigned T6MODE2                :1;
        unsigned T6MODE3                :1;
        unsigned T6MODE4                :1;
    };
} T6HLTbits_t;
extern volatile T6HLTbits_t T6HLTbits __at(0xFB2);
// bitfield macros
#define _T6HLT_MODE_POSN                                    0x0
#define _T6HLT_MODE_POSITION                                0x0
#define _T6HLT_MODE_SIZE                                    0x5
#define _T6HLT_MODE_LENGTH                                  0x5
#define _T6HLT_MODE_MASK                                    0x1F
#define _T6HLT_CKSYNC_POSN                                  0x5
#define _T6HLT_CKSYNC_POSITION                              0x5
#define _T6HLT_CKSYNC_SIZE                                  0x1
#define _T6HLT_CKSYNC_LENGTH                                0x1
#define _T6HLT_CKSYNC_MASK                                  0x20
#define _T6HLT_CKPOL_POSN                                   0x6
#define _T6HLT_CKPOL_POSITION                               0x6
#define _T6HLT_CKPOL_SIZE                                   0x1
#define _T6HLT_CKPOL_LENGTH                                 0x1
#define _T6HLT_CKPOL_MASK                                   0x40
#define _T6HLT_PSYNC_POSN                                   0x7
#define _T6HLT_PSYNC_POSITION                               0x7
#define _T6HLT_PSYNC_SIZE                                   0x1
#define _T6HLT_PSYNC_LENGTH                                 0x1
#define _T6HLT_PSYNC_MASK                                   0x80
#define _T6HLT_MODE0_POSN                                   0x0
#define _T6HLT_MODE0_POSITION                               0x0
#define _T6HLT_MODE0_SIZE                                   0x1
#define _T6HLT_MODE0_LENGTH                                 0x1
#define _T6HLT_MODE0_MASK                                   0x1
#define _T6HLT_MODE1_POSN                                   0x1
#define _T6HLT_MODE1_POSITION                               0x1
#define _T6HLT_MODE1_SIZE                                   0x1
#define _T6HLT_MODE1_LENGTH                                 0x1
#define _T6HLT_MODE1_MASK                                   0x2
#define _T6HLT_MODE2_POSN                                   0x2
#define _T6HLT_MODE2_POSITION                               0x2
#define _T6HLT_MODE2_SIZE                                   0x1
#define _T6HLT_MODE2_LENGTH                                 0x1
#define _T6HLT_MODE2_MASK                                   0x4
#define _T6HLT_MODE3_POSN                                   0x3
#define _T6HLT_MODE3_POSITION                               0x3
#define _T6HLT_MODE3_SIZE                                   0x1
#define _T6HLT_MODE3_LENGTH                                 0x1
#define _T6HLT_MODE3_MASK                                   0x8
#define _T6HLT_MODE4_POSN                                   0x4
#define _T6HLT_MODE4_POSITION                               0x4
#define _T6HLT_MODE4_SIZE                                   0x1
#define _T6HLT_MODE4_LENGTH                                 0x1
#define _T6HLT_MODE4_MASK                                   0x10
#define _T6HLT_T6MODE_POSN                                  0x0
#define _T6HLT_T6MODE_POSITION                              0x0
#define _T6HLT_T6MODE_SIZE                                  0x5
#define _T6HLT_T6MODE_LENGTH                                0x5
#define _T6HLT_T6MODE_MASK                                  0x1F
#define _T6HLT_T6CKSYNC_POSN                                0x5
#define _T6HLT_T6CKSYNC_POSITION                            0x5
#define _T6HLT_T6CKSYNC_SIZE                                0x1
#define _T6HLT_T6CKSYNC_LENGTH                              0x1
#define _T6HLT_T6CKSYNC_MASK                                0x20
#define _T6HLT_T6CKPOL_POSN                                 0x6
#define _T6HLT_T6CKPOL_POSITION                             0x6
#define _T6HLT_T6CKPOL_SIZE                                 0x1
#define _T6HLT_T6CKPOL_LENGTH                               0x1
#define _T6HLT_T6CKPOL_MASK                                 0x40
#define _T6HLT_T6PSYNC_POSN                                 0x7
#define _T6HLT_T6PSYNC_POSITION                             0x7
#define _T6HLT_T6PSYNC_SIZE                                 0x1
#define _T6HLT_T6PSYNC_LENGTH                               0x1
#define _T6HLT_T6PSYNC_MASK                                 0x80
#define _T6HLT_T6MODE0_POSN                                 0x0
#define _T6HLT_T6MODE0_POSITION                             0x0
#define _T6HLT_T6MODE0_SIZE                                 0x1
#define _T6HLT_T6MODE0_LENGTH                               0x1
#define _T6HLT_T6MODE0_MASK                                 0x1
#define _T6HLT_T6MODE1_POSN                                 0x1
#define _T6HLT_T6MODE1_POSITION                             0x1
#define _T6HLT_T6MODE1_SIZE                                 0x1
#define _T6HLT_T6MODE1_LENGTH                               0x1
#define _T6HLT_T6MODE1_MASK                                 0x2
#define _T6HLT_T6MODE2_POSN                                 0x2
#define _T6HLT_T6MODE2_POSITION                             0x2
#define _T6HLT_T6MODE2_SIZE                                 0x1
#define _T6HLT_T6MODE2_LENGTH                               0x1
#define _T6HLT_T6MODE2_MASK                                 0x4
#define _T6HLT_T6MODE3_POSN                                 0x3
#define _T6HLT_T6MODE3_POSITION                             0x3
#define _T6HLT_T6MODE3_SIZE                                 0x1
#define _T6HLT_T6MODE3_LENGTH                               0x1
#define _T6HLT_T6MODE3_MASK                                 0x8
#define _T6HLT_T6MODE4_POSN                                 0x4
#define _T6HLT_T6MODE4_POSITION                             0x4
#define _T6HLT_T6MODE4_SIZE                                 0x1
#define _T6HLT_T6MODE4_LENGTH                               0x1
#define _T6HLT_T6MODE4_MASK                                 0x10

// Register: T6CLKCON
#define T6CLKCON T6CLKCON
extern volatile unsigned char           T6CLKCON            __at(0xFB3);
#ifndef _LIB_BUILD
asm("T6CLKCON equ 0FB3h");
#endif
// aliases
extern volatile unsigned char           T6CLK               __at(0xFB3);
#ifndef _LIB_BUILD
asm("T6CLK equ 0FB3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CS                     :4;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
    };
    struct {
        unsigned T6CS                   :4;
    };
    struct {
        unsigned T6CS0                  :1;
        unsigned T6CS1                  :1;
        unsigned T6CS2                  :1;
        unsigned T6CS3                  :1;
    };
} T6CLKCONbits_t;
extern volatile T6CLKCONbits_t T6CLKCONbits __at(0xFB3);
// bitfield macros
#define _T6CLKCON_CS_POSN                                   0x0
#define _T6CLKCON_CS_POSITION                               0x0
#define _T6CLKCON_CS_SIZE                                   0x4
#define _T6CLKCON_CS_LENGTH                                 0x4
#define _T6CLKCON_CS_MASK                                   0xF
#define _T6CLKCON_CS0_POSN                                  0x0
#define _T6CLKCON_CS0_POSITION                              0x0
#define _T6CLKCON_CS0_SIZE                                  0x1
#define _T6CLKCON_CS0_LENGTH                                0x1
#define _T6CLKCON_CS0_MASK                                  0x1
#define _T6CLKCON_CS1_POSN                                  0x1
#define _T6CLKCON_CS1_POSITION                              0x1
#define _T6CLKCON_CS1_SIZE                                  0x1
#define _T6CLKCON_CS1_LENGTH                                0x1
#define _T6CLKCON_CS1_MASK                                  0x2
#define _T6CLKCON_CS2_POSN                                  0x2
#define _T6CLKCON_CS2_POSITION                              0x2
#define _T6CLKCON_CS2_SIZE                                  0x1
#define _T6CLKCON_CS2_LENGTH                                0x1
#define _T6CLKCON_CS2_MASK                                  0x4
#define _T6CLKCON_CS3_POSN                                  0x3
#define _T6CLKCON_CS3_POSITION                              0x3
#define _T6CLKCON_CS3_SIZE                                  0x1
#define _T6CLKCON_CS3_LENGTH                                0x1
#define _T6CLKCON_CS3_MASK                                  0x8
#define _T6CLKCON_T6CS_POSN                                 0x0
#define _T6CLKCON_T6CS_POSITION                             0x0
#define _T6CLKCON_T6CS_SIZE                                 0x4
#define _T6CLKCON_T6CS_LENGTH                               0x4
#define _T6CLKCON_T6CS_MASK                                 0xF
#define _T6CLKCON_T6CS0_POSN                                0x0
#define _T6CLKCON_T6CS0_POSITION                            0x0
#define _T6CLKCON_T6CS0_SIZE                                0x1
#define _T6CLKCON_T6CS0_LENGTH                              0x1
#define _T6CLKCON_T6CS0_MASK                                0x1
#define _T6CLKCON_T6CS1_POSN                                0x1
#define _T6CLKCON_T6CS1_POSITION                            0x1
#define _T6CLKCON_T6CS1_SIZE                                0x1
#define _T6CLKCON_T6CS1_LENGTH                              0x1
#define _T6CLKCON_T6CS1_MASK                                0x2
#define _T6CLKCON_T6CS2_POSN                                0x2
#define _T6CLKCON_T6CS2_POSITION                            0x2
#define _T6CLKCON_T6CS2_SIZE                                0x1
#define _T6CLKCON_T6CS2_LENGTH                              0x1
#define _T6CLKCON_T6CS2_MASK                                0x4
#define _T6CLKCON_T6CS3_POSN                                0x3
#define _T6CLKCON_T6CS3_POSITION                            0x3
#define _T6CLKCON_T6CS3_SIZE                                0x1
#define _T6CLKCON_T6CS3_LENGTH                              0x1
#define _T6CLKCON_T6CS3_MASK                                0x8
// alias bitfield definitions
typedef union {
    struct {
        unsigned CS                     :4;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
    };
    struct {
        unsigned T6CS                   :4;
    };
    struct {
        unsigned T6CS0                  :1;
        unsigned T6CS1                  :1;
        unsigned T6CS2                  :1;
        unsigned T6CS3                  :1;
    };
} T6CLKbits_t;
extern volatile T6CLKbits_t T6CLKbits __at(0xFB3);
// bitfield macros
#define _T6CLK_CS_POSN                                      0x0
#define _T6CLK_CS_POSITION                                  0x0
#define _T6CLK_CS_SIZE                                      0x4
#define _T6CLK_CS_LENGTH                                    0x4
#define _T6CLK_CS_MASK                                      0xF
#define _T6CLK_CS0_POSN                                     0x0
#define _T6CLK_CS0_POSITION                                 0x0
#define _T6CLK_CS0_SIZE                                     0x1
#define _T6CLK_CS0_LENGTH                                   0x1
#define _T6CLK_CS0_MASK                                     0x1
#define _T6CLK_CS1_POSN                                     0x1
#define _T6CLK_CS1_POSITION                                 0x1
#define _T6CLK_CS1_SIZE                                     0x1
#define _T6CLK_CS1_LENGTH                                   0x1
#define _T6CLK_CS1_MASK                                     0x2
#define _T6CLK_CS2_POSN                                     0x2
#define _T6CLK_CS2_POSITION                                 0x2
#define _T6CLK_CS2_SIZE                                     0x1
#define _T6CLK_CS2_LENGTH                                   0x1
#define _T6CLK_CS2_MASK                                     0x4
#define _T6CLK_CS3_POSN                                     0x3
#define _T6CLK_CS3_POSITION                                 0x3
#define _T6CLK_CS3_SIZE                                     0x1
#define _T6CLK_CS3_LENGTH                                   0x1
#define _T6CLK_CS3_MASK                                     0x8
#define _T6CLK_T6CS_POSN                                    0x0
#define _T6CLK_T6CS_POSITION                                0x0
#define _T6CLK_T6CS_SIZE                                    0x4
#define _T6CLK_T6CS_LENGTH                                  0x4
#define _T6CLK_T6CS_MASK                                    0xF
#define _T6CLK_T6CS0_POSN                                   0x0
#define _T6CLK_T6CS0_POSITION                               0x0
#define _T6CLK_T6CS0_SIZE                                   0x1
#define _T6CLK_T6CS0_LENGTH                                 0x1
#define _T6CLK_T6CS0_MASK                                   0x1
#define _T6CLK_T6CS1_POSN                                   0x1
#define _T6CLK_T6CS1_POSITION                               0x1
#define _T6CLK_T6CS1_SIZE                                   0x1
#define _T6CLK_T6CS1_LENGTH                                 0x1
#define _T6CLK_T6CS1_MASK                                   0x2
#define _T6CLK_T6CS2_POSN                                   0x2
#define _T6CLK_T6CS2_POSITION                               0x2
#define _T6CLK_T6CS2_SIZE                                   0x1
#define _T6CLK_T6CS2_LENGTH                                 0x1
#define _T6CLK_T6CS2_MASK                                   0x4
#define _T6CLK_T6CS3_POSN                                   0x3
#define _T6CLK_T6CS3_POSITION                               0x3
#define _T6CLK_T6CS3_SIZE                                   0x1
#define _T6CLK_T6CS3_LENGTH                                 0x1
#define _T6CLK_T6CS3_MASK                                   0x8

// Register: T6RST
#define T6RST T6RST
extern volatile unsigned char           T6RST               __at(0xFB4);
#ifndef _LIB_BUILD
asm("T6RST equ 0FB4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RSEL                   :5;
    };
    struct {
        unsigned RSEL0                  :1;
        unsigned RSEL1                  :1;
        unsigned RSEL2                  :1;
        unsigned RSEL3                  :1;
    };
    struct {
        unsigned T6RSEL                 :5;
    };
    struct {
        unsigned T6RSEL0                :1;
        unsigned T6RSEL1                :1;
        unsigned T6RSEL2                :1;
        unsigned T6RSEL3                :1;
    };
} T6RSTbits_t;
extern volatile T6RSTbits_t T6RSTbits __at(0xFB4);
// bitfield macros
#define _T6RST_RSEL_POSN                                    0x0
#define _T6RST_RSEL_POSITION                                0x0
#define _T6RST_RSEL_SIZE                                    0x5
#define _T6RST_RSEL_LENGTH                                  0x5
#define _T6RST_RSEL_MASK                                    0x1F
#define _T6RST_RSEL0_POSN                                   0x0
#define _T6RST_RSEL0_POSITION                               0x0
#define _T6RST_RSEL0_SIZE                                   0x1
#define _T6RST_RSEL0_LENGTH                                 0x1
#define _T6RST_RSEL0_MASK                                   0x1
#define _T6RST_RSEL1_POSN                                   0x1
#define _T6RST_RSEL1_POSITION                               0x1
#define _T6RST_RSEL1_SIZE                                   0x1
#define _T6RST_RSEL1_LENGTH                                 0x1
#define _T6RST_RSEL1_MASK                                   0x2
#define _T6RST_RSEL2_POSN                                   0x2
#define _T6RST_RSEL2_POSITION                               0x2
#define _T6RST_RSEL2_SIZE                                   0x1
#define _T6RST_RSEL2_LENGTH                                 0x1
#define _T6RST_RSEL2_MASK                                   0x4
#define _T6RST_RSEL3_POSN                                   0x3
#define _T6RST_RSEL3_POSITION                               0x3
#define _T6RST_RSEL3_SIZE                                   0x1
#define _T6RST_RSEL3_LENGTH                                 0x1
#define _T6RST_RSEL3_MASK                                   0x8
#define _T6RST_T6RSEL_POSN                                  0x0
#define _T6RST_T6RSEL_POSITION                              0x0
#define _T6RST_T6RSEL_SIZE                                  0x5
#define _T6RST_T6RSEL_LENGTH                                0x5
#define _T6RST_T6RSEL_MASK                                  0x1F
#define _T6RST_T6RSEL0_POSN                                 0x0
#define _T6RST_T6RSEL0_POSITION                             0x0
#define _T6RST_T6RSEL0_SIZE                                 0x1
#define _T6RST_T6RSEL0_LENGTH                               0x1
#define _T6RST_T6RSEL0_MASK                                 0x1
#define _T6RST_T6RSEL1_POSN                                 0x1
#define _T6RST_T6RSEL1_POSITION                             0x1
#define _T6RST_T6RSEL1_SIZE                                 0x1
#define _T6RST_T6RSEL1_LENGTH                               0x1
#define _T6RST_T6RSEL1_MASK                                 0x2
#define _T6RST_T6RSEL2_POSN                                 0x2
#define _T6RST_T6RSEL2_POSITION                             0x2
#define _T6RST_T6RSEL2_SIZE                                 0x1
#define _T6RST_T6RSEL2_LENGTH                               0x1
#define _T6RST_T6RSEL2_MASK                                 0x4
#define _T6RST_T6RSEL3_POSN                                 0x3
#define _T6RST_T6RSEL3_POSITION                             0x3
#define _T6RST_T6RSEL3_SIZE                                 0x1
#define _T6RST_T6RSEL3_LENGTH                               0x1
#define _T6RST_T6RSEL3_MASK                                 0x8

// Register: T4TMR
#define T4TMR T4TMR
extern volatile unsigned char           T4TMR               __at(0xFB5);
#ifndef _LIB_BUILD
asm("T4TMR equ 0FB5h");
#endif
// aliases
extern volatile unsigned char           TMR4                __at(0xFB5);
#ifndef _LIB_BUILD
asm("TMR4 equ 0FB5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR4                   :8;
    };
} T4TMRbits_t;
extern volatile T4TMRbits_t T4TMRbits __at(0xFB5);
// bitfield macros
#define _T4TMR_TMR4_POSN                                    0x0
#define _T4TMR_TMR4_POSITION                                0x0
#define _T4TMR_TMR4_SIZE                                    0x8
#define _T4TMR_TMR4_LENGTH                                  0x8
#define _T4TMR_TMR4_MASK                                    0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned TMR4                   :8;
    };
} TMR4bits_t;
extern volatile TMR4bits_t TMR4bits __at(0xFB5);
// bitfield macros
#define _TMR4_TMR4_POSN                                     0x0
#define _TMR4_TMR4_POSITION                                 0x0
#define _TMR4_TMR4_SIZE                                     0x8
#define _TMR4_TMR4_LENGTH                                   0x8
#define _TMR4_TMR4_MASK                                     0xFF

// Register: T4PR
#define T4PR T4PR
extern volatile unsigned char           T4PR                __at(0xFB6);
#ifndef _LIB_BUILD
asm("T4PR equ 0FB6h");
#endif
// aliases
extern volatile unsigned char           PR4                 __at(0xFB6);
#ifndef _LIB_BUILD
asm("PR4 equ 0FB6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PR4                    :8;
    };
} T4PRbits_t;
extern volatile T4PRbits_t T4PRbits __at(0xFB6);
// bitfield macros
#define _T4PR_PR4_POSN                                      0x0
#define _T4PR_PR4_POSITION                                  0x0
#define _T4PR_PR4_SIZE                                      0x8
#define _T4PR_PR4_LENGTH                                    0x8
#define _T4PR_PR4_MASK                                      0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned PR4                    :8;
    };
} PR4bits_t;
extern volatile PR4bits_t PR4bits __at(0xFB6);
// bitfield macros
#define _PR4_PR4_POSN                                       0x0
#define _PR4_PR4_POSITION                                   0x0
#define _PR4_PR4_SIZE                                       0x8
#define _PR4_PR4_LENGTH                                     0x8
#define _PR4_PR4_MASK                                       0xFF

// Register: T4CON
#define T4CON T4CON
extern volatile unsigned char           T4CON               __at(0xFB7);
#ifndef _LIB_BUILD
asm("T4CON equ 0FB7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned OUTPS                  :4;
        unsigned CKPS                   :3;
        unsigned ON                     :1;
    };
    struct {
        unsigned T4OUTPS                :4;
        unsigned T4CKPS                 :3;
        unsigned T4ON                   :1;
    };
    struct {
        unsigned T4OUTPS0               :1;
        unsigned T4OUTPS1               :1;
        unsigned T4OUTPS2               :1;
        unsigned T4OUTPS3               :1;
        unsigned T4CKPS0                :1;
        unsigned T4CKPS1                :1;
        unsigned T4CKPS2                :1;
    };
    struct {
        unsigned OUTPS0                 :1;
        unsigned OUTPS1                 :1;
        unsigned OUTPS2                 :1;
        unsigned OUTPS3                 :1;
        unsigned CKPS0                  :1;
        unsigned CKPS1                  :1;
        unsigned CKPS2                  :1;
        unsigned TMR4ON                 :1;
    };
} T4CONbits_t;
extern volatile T4CONbits_t T4CONbits __at(0xFB7);
// bitfield macros
#define _T4CON_OUTPS_POSN                                   0x0
#define _T4CON_OUTPS_POSITION                               0x0
#define _T4CON_OUTPS_SIZE                                   0x4
#define _T4CON_OUTPS_LENGTH                                 0x4
#define _T4CON_OUTPS_MASK                                   0xF
#define _T4CON_CKPS_POSN                                    0x4
#define _T4CON_CKPS_POSITION                                0x4
#define _T4CON_CKPS_SIZE                                    0x3
#define _T4CON_CKPS_LENGTH                                  0x3
#define _T4CON_CKPS_MASK                                    0x70
#define _T4CON_ON_POSN                                      0x7
#define _T4CON_ON_POSITION                                  0x7
#define _T4CON_ON_SIZE                                      0x1
#define _T4CON_ON_LENGTH                                    0x1
#define _T4CON_ON_MASK                                      0x80
#define _T4CON_T4OUTPS_POSN                                 0x0
#define _T4CON_T4OUTPS_POSITION                             0x0
#define _T4CON_T4OUTPS_SIZE                                 0x4
#define _T4CON_T4OUTPS_LENGTH                               0x4
#define _T4CON_T4OUTPS_MASK                                 0xF
#define _T4CON_T4CKPS_POSN                                  0x4
#define _T4CON_T4CKPS_POSITION                              0x4
#define _T4CON_T4CKPS_SIZE                                  0x3
#define _T4CON_T4CKPS_LENGTH                                0x3
#define _T4CON_T4CKPS_MASK                                  0x70
#define _T4CON_T4ON_POSN                                    0x7
#define _T4CON_T4ON_POSITION                                0x7
#define _T4CON_T4ON_SIZE                                    0x1
#define _T4CON_T4ON_LENGTH                                  0x1
#define _T4CON_T4ON_MASK                                    0x80
#define _T4CON_T4OUTPS0_POSN                                0x0
#define _T4CON_T4OUTPS0_POSITION                            0x0
#define _T4CON_T4OUTPS0_SIZE                                0x1
#define _T4CON_T4OUTPS0_LENGTH                              0x1
#define _T4CON_T4OUTPS0_MASK                                0x1
#define _T4CON_T4OUTPS1_POSN                                0x1
#define _T4CON_T4OUTPS1_POSITION                            0x1
#define _T4CON_T4OUTPS1_SIZE                                0x1
#define _T4CON_T4OUTPS1_LENGTH                              0x1
#define _T4CON_T4OUTPS1_MASK                                0x2
#define _T4CON_T4OUTPS2_POSN                                0x2
#define _T4CON_T4OUTPS2_POSITION                            0x2
#define _T4CON_T4OUTPS2_SIZE                                0x1
#define _T4CON_T4OUTPS2_LENGTH                              0x1
#define _T4CON_T4OUTPS2_MASK                                0x4
#define _T4CON_T4OUTPS3_POSN                                0x3
#define _T4CON_T4OUTPS3_POSITION                            0x3
#define _T4CON_T4OUTPS3_SIZE                                0x1
#define _T4CON_T4OUTPS3_LENGTH                              0x1
#define _T4CON_T4OUTPS3_MASK                                0x8
#define _T4CON_T4CKPS0_POSN                                 0x4
#define _T4CON_T4CKPS0_POSITION                             0x4
#define _T4CON_T4CKPS0_SIZE                                 0x1
#define _T4CON_T4CKPS0_LENGTH                               0x1
#define _T4CON_T4CKPS0_MASK                                 0x10
#define _T4CON_T4CKPS1_POSN                                 0x5
#define _T4CON_T4CKPS1_POSITION                             0x5
#define _T4CON_T4CKPS1_SIZE                                 0x1
#define _T4CON_T4CKPS1_LENGTH                               0x1
#define _T4CON_T4CKPS1_MASK                                 0x20
#define _T4CON_T4CKPS2_POSN                                 0x6
#define _T4CON_T4CKPS2_POSITION                             0x6
#define _T4CON_T4CKPS2_SIZE                                 0x1
#define _T4CON_T4CKPS2_LENGTH                               0x1
#define _T4CON_T4CKPS2_MASK                                 0x40
#define _T4CON_OUTPS0_POSN                                  0x0
#define _T4CON_OUTPS0_POSITION                              0x0
#define _T4CON_OUTPS0_SIZE                                  0x1
#define _T4CON_OUTPS0_LENGTH                                0x1
#define _T4CON_OUTPS0_MASK                                  0x1
#define _T4CON_OUTPS1_POSN                                  0x1
#define _T4CON_OUTPS1_POSITION                              0x1
#define _T4CON_OUTPS1_SIZE                                  0x1
#define _T4CON_OUTPS1_LENGTH                                0x1
#define _T4CON_OUTPS1_MASK                                  0x2
#define _T4CON_OUTPS2_POSN                                  0x2
#define _T4CON_OUTPS2_POSITION                              0x2
#define _T4CON_OUTPS2_SIZE                                  0x1
#define _T4CON_OUTPS2_LENGTH                                0x1
#define _T4CON_OUTPS2_MASK                                  0x4
#define _T4CON_OUTPS3_POSN                                  0x3
#define _T4CON_OUTPS3_POSITION                              0x3
#define _T4CON_OUTPS3_SIZE                                  0x1
#define _T4CON_OUTPS3_LENGTH                                0x1
#define _T4CON_OUTPS3_MASK                                  0x8
#define _T4CON_CKPS0_POSN                                   0x4
#define _T4CON_CKPS0_POSITION                               0x4
#define _T4CON_CKPS0_SIZE                                   0x1
#define _T4CON_CKPS0_LENGTH                                 0x1
#define _T4CON_CKPS0_MASK                                   0x10
#define _T4CON_CKPS1_POSN                                   0x5
#define _T4CON_CKPS1_POSITION                               0x5
#define _T4CON_CKPS1_SIZE                                   0x1
#define _T4CON_CKPS1_LENGTH                                 0x1
#define _T4CON_CKPS1_MASK                                   0x20
#define _T4CON_CKPS2_POSN                                   0x6
#define _T4CON_CKPS2_POSITION                               0x6
#define _T4CON_CKPS2_SIZE                                   0x1
#define _T4CON_CKPS2_LENGTH                                 0x1
#define _T4CON_CKPS2_MASK                                   0x40
#define _T4CON_TMR4ON_POSN                                  0x7
#define _T4CON_TMR4ON_POSITION                              0x7
#define _T4CON_TMR4ON_SIZE                                  0x1
#define _T4CON_TMR4ON_LENGTH                                0x1
#define _T4CON_TMR4ON_MASK                                  0x80

// Register: T4HLT
#define T4HLT T4HLT
extern volatile unsigned char           T4HLT               __at(0xFB8);
#ifndef _LIB_BUILD
asm("T4HLT equ 0FB8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :5;
        unsigned CKSYNC                 :1;
        unsigned CKPOL                  :1;
        unsigned PSYNC                  :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned MODE3                  :1;
        unsigned MODE4                  :1;
    };
    struct {
        unsigned T4MODE                 :5;
        unsigned T4CKSYNC               :1;
        unsigned T4CKPOL                :1;
        unsigned T4PSYNC                :1;
    };
    struct {
        unsigned T4MODE0                :1;
        unsigned T4MODE1                :1;
        unsigned T4MODE2                :1;
        unsigned T4MODE3                :1;
        unsigned T4MODE4                :1;
    };
} T4HLTbits_t;
extern volatile T4HLTbits_t T4HLTbits __at(0xFB8);
// bitfield macros
#define _T4HLT_MODE_POSN                                    0x0
#define _T4HLT_MODE_POSITION                                0x0
#define _T4HLT_MODE_SIZE                                    0x5
#define _T4HLT_MODE_LENGTH                                  0x5
#define _T4HLT_MODE_MASK                                    0x1F
#define _T4HLT_CKSYNC_POSN                                  0x5
#define _T4HLT_CKSYNC_POSITION                              0x5
#define _T4HLT_CKSYNC_SIZE                                  0x1
#define _T4HLT_CKSYNC_LENGTH                                0x1
#define _T4HLT_CKSYNC_MASK                                  0x20
#define _T4HLT_CKPOL_POSN                                   0x6
#define _T4HLT_CKPOL_POSITION                               0x6
#define _T4HLT_CKPOL_SIZE                                   0x1
#define _T4HLT_CKPOL_LENGTH                                 0x1
#define _T4HLT_CKPOL_MASK                                   0x40
#define _T4HLT_PSYNC_POSN                                   0x7
#define _T4HLT_PSYNC_POSITION                               0x7
#define _T4HLT_PSYNC_SIZE                                   0x1
#define _T4HLT_PSYNC_LENGTH                                 0x1
#define _T4HLT_PSYNC_MASK                                   0x80
#define _T4HLT_MODE0_POSN                                   0x0
#define _T4HLT_MODE0_POSITION                               0x0
#define _T4HLT_MODE0_SIZE                                   0x1
#define _T4HLT_MODE0_LENGTH                                 0x1
#define _T4HLT_MODE0_MASK                                   0x1
#define _T4HLT_MODE1_POSN                                   0x1
#define _T4HLT_MODE1_POSITION                               0x1
#define _T4HLT_MODE1_SIZE                                   0x1
#define _T4HLT_MODE1_LENGTH                                 0x1
#define _T4HLT_MODE1_MASK                                   0x2
#define _T4HLT_MODE2_POSN                                   0x2
#define _T4HLT_MODE2_POSITION                               0x2
#define _T4HLT_MODE2_SIZE                                   0x1
#define _T4HLT_MODE2_LENGTH                                 0x1
#define _T4HLT_MODE2_MASK                                   0x4
#define _T4HLT_MODE3_POSN                                   0x3
#define _T4HLT_MODE3_POSITION                               0x3
#define _T4HLT_MODE3_SIZE                                   0x1
#define _T4HLT_MODE3_LENGTH                                 0x1
#define _T4HLT_MODE3_MASK                                   0x8
#define _T4HLT_MODE4_POSN                                   0x4
#define _T4HLT_MODE4_POSITION                               0x4
#define _T4HLT_MODE4_SIZE                                   0x1
#define _T4HLT_MODE4_LENGTH                                 0x1
#define _T4HLT_MODE4_MASK                                   0x10
#define _T4HLT_T4MODE_POSN                                  0x0
#define _T4HLT_T4MODE_POSITION                              0x0
#define _T4HLT_T4MODE_SIZE                                  0x5
#define _T4HLT_T4MODE_LENGTH                                0x5
#define _T4HLT_T4MODE_MASK                                  0x1F
#define _T4HLT_T4CKSYNC_POSN                                0x5
#define _T4HLT_T4CKSYNC_POSITION                            0x5
#define _T4HLT_T4CKSYNC_SIZE                                0x1
#define _T4HLT_T4CKSYNC_LENGTH                              0x1
#define _T4HLT_T4CKSYNC_MASK                                0x20
#define _T4HLT_T4CKPOL_POSN                                 0x6
#define _T4HLT_T4CKPOL_POSITION                             0x6
#define _T4HLT_T4CKPOL_SIZE                                 0x1
#define _T4HLT_T4CKPOL_LENGTH                               0x1
#define _T4HLT_T4CKPOL_MASK                                 0x40
#define _T4HLT_T4PSYNC_POSN                                 0x7
#define _T4HLT_T4PSYNC_POSITION                             0x7
#define _T4HLT_T4PSYNC_SIZE                                 0x1
#define _T4HLT_T4PSYNC_LENGTH                               0x1
#define _T4HLT_T4PSYNC_MASK                                 0x80
#define _T4HLT_T4MODE0_POSN                                 0x0
#define _T4HLT_T4MODE0_POSITION                             0x0
#define _T4HLT_T4MODE0_SIZE                                 0x1
#define _T4HLT_T4MODE0_LENGTH                               0x1
#define _T4HLT_T4MODE0_MASK                                 0x1
#define _T4HLT_T4MODE1_POSN                                 0x1
#define _T4HLT_T4MODE1_POSITION                             0x1
#define _T4HLT_T4MODE1_SIZE                                 0x1
#define _T4HLT_T4MODE1_LENGTH                               0x1
#define _T4HLT_T4MODE1_MASK                                 0x2
#define _T4HLT_T4MODE2_POSN                                 0x2
#define _T4HLT_T4MODE2_POSITION                             0x2
#define _T4HLT_T4MODE2_SIZE                                 0x1
#define _T4HLT_T4MODE2_LENGTH                               0x1
#define _T4HLT_T4MODE2_MASK                                 0x4
#define _T4HLT_T4MODE3_POSN                                 0x3
#define _T4HLT_T4MODE3_POSITION                             0x3
#define _T4HLT_T4MODE3_SIZE                                 0x1
#define _T4HLT_T4MODE3_LENGTH                               0x1
#define _T4HLT_T4MODE3_MASK                                 0x8
#define _T4HLT_T4MODE4_POSN                                 0x4
#define _T4HLT_T4MODE4_POSITION                             0x4
#define _T4HLT_T4MODE4_SIZE                                 0x1
#define _T4HLT_T4MODE4_LENGTH                               0x1
#define _T4HLT_T4MODE4_MASK                                 0x10

// Register: T4CLKCON
#define T4CLKCON T4CLKCON
extern volatile unsigned char           T4CLKCON            __at(0xFB9);
#ifndef _LIB_BUILD
asm("T4CLKCON equ 0FB9h");
#endif
// aliases
extern volatile unsigned char           T4CLK               __at(0xFB9);
#ifndef _LIB_BUILD
asm("T4CLK equ 0FB9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CS                     :4;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
    };
    struct {
        unsigned T4CS                   :4;
    };
    struct {
        unsigned T4CS0                  :1;
        unsigned T4CS1                  :1;
        unsigned T4CS2                  :1;
        unsigned T4CS3                  :1;
    };
} T4CLKCONbits_t;
extern volatile T4CLKCONbits_t T4CLKCONbits __at(0xFB9);
// bitfield macros
#define _T4CLKCON_CS_POSN                                   0x0
#define _T4CLKCON_CS_POSITION                               0x0
#define _T4CLKCON_CS_SIZE                                   0x4
#define _T4CLKCON_CS_LENGTH                                 0x4
#define _T4CLKCON_CS_MASK                                   0xF
#define _T4CLKCON_CS0_POSN                                  0x0
#define _T4CLKCON_CS0_POSITION                              0x0
#define _T4CLKCON_CS0_SIZE                                  0x1
#define _T4CLKCON_CS0_LENGTH                                0x1
#define _T4CLKCON_CS0_MASK                                  0x1
#define _T4CLKCON_CS1_POSN                                  0x1
#define _T4CLKCON_CS1_POSITION                              0x1
#define _T4CLKCON_CS1_SIZE                                  0x1
#define _T4CLKCON_CS1_LENGTH                                0x1
#define _T4CLKCON_CS1_MASK                                  0x2
#define _T4CLKCON_CS2_POSN                                  0x2
#define _T4CLKCON_CS2_POSITION                              0x2
#define _T4CLKCON_CS2_SIZE                                  0x1
#define _T4CLKCON_CS2_LENGTH                                0x1
#define _T4CLKCON_CS2_MASK                                  0x4
#define _T4CLKCON_CS3_POSN                                  0x3
#define _T4CLKCON_CS3_POSITION                              0x3
#define _T4CLKCON_CS3_SIZE                                  0x1
#define _T4CLKCON_CS3_LENGTH                                0x1
#define _T4CLKCON_CS3_MASK                                  0x8
#define _T4CLKCON_T4CS_POSN                                 0x0
#define _T4CLKCON_T4CS_POSITION                             0x0
#define _T4CLKCON_T4CS_SIZE                                 0x4
#define _T4CLKCON_T4CS_LENGTH                               0x4
#define _T4CLKCON_T4CS_MASK                                 0xF
#define _T4CLKCON_T4CS0_POSN                                0x0
#define _T4CLKCON_T4CS0_POSITION                            0x0
#define _T4CLKCON_T4CS0_SIZE                                0x1
#define _T4CLKCON_T4CS0_LENGTH                              0x1
#define _T4CLKCON_T4CS0_MASK                                0x1
#define _T4CLKCON_T4CS1_POSN                                0x1
#define _T4CLKCON_T4CS1_POSITION                            0x1
#define _T4CLKCON_T4CS1_SIZE                                0x1
#define _T4CLKCON_T4CS1_LENGTH                              0x1
#define _T4CLKCON_T4CS1_MASK                                0x2
#define _T4CLKCON_T4CS2_POSN                                0x2
#define _T4CLKCON_T4CS2_POSITION                            0x2
#define _T4CLKCON_T4CS2_SIZE                                0x1
#define _T4CLKCON_T4CS2_LENGTH                              0x1
#define _T4CLKCON_T4CS2_MASK                                0x4
#define _T4CLKCON_T4CS3_POSN                                0x3
#define _T4CLKCON_T4CS3_POSITION                            0x3
#define _T4CLKCON_T4CS3_SIZE                                0x1
#define _T4CLKCON_T4CS3_LENGTH                              0x1
#define _T4CLKCON_T4CS3_MASK                                0x8
// alias bitfield definitions
typedef union {
    struct {
        unsigned CS                     :4;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
    };
    struct {
        unsigned T4CS                   :4;
    };
    struct {
        unsigned T4CS0                  :1;
        unsigned T4CS1                  :1;
        unsigned T4CS2                  :1;
        unsigned T4CS3                  :1;
    };
} T4CLKbits_t;
extern volatile T4CLKbits_t T4CLKbits __at(0xFB9);
// bitfield macros
#define _T4CLK_CS_POSN                                      0x0
#define _T4CLK_CS_POSITION                                  0x0
#define _T4CLK_CS_SIZE                                      0x4
#define _T4CLK_CS_LENGTH                                    0x4
#define _T4CLK_CS_MASK                                      0xF
#define _T4CLK_CS0_POSN                                     0x0
#define _T4CLK_CS0_POSITION                                 0x0
#define _T4CLK_CS0_SIZE                                     0x1
#define _T4CLK_CS0_LENGTH                                   0x1
#define _T4CLK_CS0_MASK                                     0x1
#define _T4CLK_CS1_POSN                                     0x1
#define _T4CLK_CS1_POSITION                                 0x1
#define _T4CLK_CS1_SIZE                                     0x1
#define _T4CLK_CS1_LENGTH                                   0x1
#define _T4CLK_CS1_MASK                                     0x2
#define _T4CLK_CS2_POSN                                     0x2
#define _T4CLK_CS2_POSITION                                 0x2
#define _T4CLK_CS2_SIZE                                     0x1
#define _T4CLK_CS2_LENGTH                                   0x1
#define _T4CLK_CS2_MASK                                     0x4
#define _T4CLK_CS3_POSN                                     0x3
#define _T4CLK_CS3_POSITION                                 0x3
#define _T4CLK_CS3_SIZE                                     0x1
#define _T4CLK_CS3_LENGTH                                   0x1
#define _T4CLK_CS3_MASK                                     0x8
#define _T4CLK_T4CS_POSN                                    0x0
#define _T4CLK_T4CS_POSITION                                0x0
#define _T4CLK_T4CS_SIZE                                    0x4
#define _T4CLK_T4CS_LENGTH                                  0x4
#define _T4CLK_T4CS_MASK                                    0xF
#define _T4CLK_T4CS0_POSN                                   0x0
#define _T4CLK_T4CS0_POSITION                               0x0
#define _T4CLK_T4CS0_SIZE                                   0x1
#define _T4CLK_T4CS0_LENGTH                                 0x1
#define _T4CLK_T4CS0_MASK                                   0x1
#define _T4CLK_T4CS1_POSN                                   0x1
#define _T4CLK_T4CS1_POSITION                               0x1
#define _T4CLK_T4CS1_SIZE                                   0x1
#define _T4CLK_T4CS1_LENGTH                                 0x1
#define _T4CLK_T4CS1_MASK                                   0x2
#define _T4CLK_T4CS2_POSN                                   0x2
#define _T4CLK_T4CS2_POSITION                               0x2
#define _T4CLK_T4CS2_SIZE                                   0x1
#define _T4CLK_T4CS2_LENGTH                                 0x1
#define _T4CLK_T4CS2_MASK                                   0x4
#define _T4CLK_T4CS3_POSN                                   0x3
#define _T4CLK_T4CS3_POSITION                               0x3
#define _T4CLK_T4CS3_SIZE                                   0x1
#define _T4CLK_T4CS3_LENGTH                                 0x1
#define _T4CLK_T4CS3_MASK                                   0x8

// Register: T4RST
#define T4RST T4RST
extern volatile unsigned char           T4RST               __at(0xFBA);
#ifndef _LIB_BUILD
asm("T4RST equ 0FBAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RSEL                   :5;
    };
    struct {
        unsigned RSEL0                  :1;
        unsigned RSEL1                  :1;
        unsigned RSEL2                  :1;
        unsigned RSEL3                  :1;
    };
    struct {
        unsigned T4RSEL                 :5;
    };
    struct {
        unsigned T4RSEL0                :1;
        unsigned T4RSEL1                :1;
        unsigned T4RSEL2                :1;
        unsigned T4RSEL3                :1;
    };
} T4RSTbits_t;
extern volatile T4RSTbits_t T4RSTbits __at(0xFBA);
// bitfield macros
#define _T4RST_RSEL_POSN                                    0x0
#define _T4RST_RSEL_POSITION                                0x0
#define _T4RST_RSEL_SIZE                                    0x5
#define _T4RST_RSEL_LENGTH                                  0x5
#define _T4RST_RSEL_MASK                                    0x1F
#define _T4RST_RSEL0_POSN                                   0x0
#define _T4RST_RSEL0_POSITION                               0x0
#define _T4RST_RSEL0_SIZE                                   0x1
#define _T4RST_RSEL0_LENGTH                                 0x1
#define _T4RST_RSEL0_MASK                                   0x1
#define _T4RST_RSEL1_POSN                                   0x1
#define _T4RST_RSEL1_POSITION                               0x1
#define _T4RST_RSEL1_SIZE                                   0x1
#define _T4RST_RSEL1_LENGTH                                 0x1
#define _T4RST_RSEL1_MASK                                   0x2
#define _T4RST_RSEL2_POSN                                   0x2
#define _T4RST_RSEL2_POSITION                               0x2
#define _T4RST_RSEL2_SIZE                                   0x1
#define _T4RST_RSEL2_LENGTH                                 0x1
#define _T4RST_RSEL2_MASK                                   0x4
#define _T4RST_RSEL3_POSN                                   0x3
#define _T4RST_RSEL3_POSITION                               0x3
#define _T4RST_RSEL3_SIZE                                   0x1
#define _T4RST_RSEL3_LENGTH                                 0x1
#define _T4RST_RSEL3_MASK                                   0x8
#define _T4RST_T4RSEL_POSN                                  0x0
#define _T4RST_T4RSEL_POSITION                              0x0
#define _T4RST_T4RSEL_SIZE                                  0x5
#define _T4RST_T4RSEL_LENGTH                                0x5
#define _T4RST_T4RSEL_MASK                                  0x1F
#define _T4RST_T4RSEL0_POSN                                 0x0
#define _T4RST_T4RSEL0_POSITION                             0x0
#define _T4RST_T4RSEL0_SIZE                                 0x1
#define _T4RST_T4RSEL0_LENGTH                               0x1
#define _T4RST_T4RSEL0_MASK                                 0x1
#define _T4RST_T4RSEL1_POSN                                 0x1
#define _T4RST_T4RSEL1_POSITION                             0x1
#define _T4RST_T4RSEL1_SIZE                                 0x1
#define _T4RST_T4RSEL1_LENGTH                               0x1
#define _T4RST_T4RSEL1_MASK                                 0x2
#define _T4RST_T4RSEL2_POSN                                 0x2
#define _T4RST_T4RSEL2_POSITION                             0x2
#define _T4RST_T4RSEL2_SIZE                                 0x1
#define _T4RST_T4RSEL2_LENGTH                               0x1
#define _T4RST_T4RSEL2_MASK                                 0x4
#define _T4RST_T4RSEL3_POSN                                 0x3
#define _T4RST_T4RSEL3_POSITION                             0x3
#define _T4RST_T4RSEL3_SIZE                                 0x1
#define _T4RST_T4RSEL3_LENGTH                               0x1
#define _T4RST_T4RSEL3_MASK                                 0x8

// Register: T2TMR
#define T2TMR T2TMR
extern volatile unsigned char           T2TMR               __at(0xFBB);
#ifndef _LIB_BUILD
asm("T2TMR equ 0FBBh");
#endif
// aliases
extern volatile unsigned char           TMR2                __at(0xFBB);
#ifndef _LIB_BUILD
asm("TMR2 equ 0FBBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR2                   :8;
    };
} T2TMRbits_t;
extern volatile T2TMRbits_t T2TMRbits __at(0xFBB);
// bitfield macros
#define _T2TMR_TMR2_POSN                                    0x0
#define _T2TMR_TMR2_POSITION                                0x0
#define _T2TMR_TMR2_SIZE                                    0x8
#define _T2TMR_TMR2_LENGTH                                  0x8
#define _T2TMR_TMR2_MASK                                    0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned TMR2                   :8;
    };
} TMR2bits_t;
extern volatile TMR2bits_t TMR2bits __at(0xFBB);
// bitfield macros
#define _TMR2_TMR2_POSN                                     0x0
#define _TMR2_TMR2_POSITION                                 0x0
#define _TMR2_TMR2_SIZE                                     0x8
#define _TMR2_TMR2_LENGTH                                   0x8
#define _TMR2_TMR2_MASK                                     0xFF

// Register: T2PR
#define T2PR T2PR
extern volatile unsigned char           T2PR                __at(0xFBC);
#ifndef _LIB_BUILD
asm("T2PR equ 0FBCh");
#endif
// aliases
extern volatile unsigned char           PR2                 __at(0xFBC);
#ifndef _LIB_BUILD
asm("PR2 equ 0FBCh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PR2                    :8;
    };
} T2PRbits_t;
extern volatile T2PRbits_t T2PRbits __at(0xFBC);
// bitfield macros
#define _T2PR_PR2_POSN                                      0x0
#define _T2PR_PR2_POSITION                                  0x0
#define _T2PR_PR2_SIZE                                      0x8
#define _T2PR_PR2_LENGTH                                    0x8
#define _T2PR_PR2_MASK                                      0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned PR2                    :8;
    };
} PR2bits_t;
extern volatile PR2bits_t PR2bits __at(0xFBC);
// bitfield macros
#define _PR2_PR2_POSN                                       0x0
#define _PR2_PR2_POSITION                                   0x0
#define _PR2_PR2_SIZE                                       0x8
#define _PR2_PR2_LENGTH                                     0x8
#define _PR2_PR2_MASK                                       0xFF

// Register: T2CON
#define T2CON T2CON
extern volatile unsigned char           T2CON               __at(0xFBD);
#ifndef _LIB_BUILD
asm("T2CON equ 0FBDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned OUTPS                  :4;
        unsigned CKPS                   :3;
        unsigned ON                     :1;
    };
    struct {
        unsigned T2OUTPS                :4;
        unsigned T2CKPS                 :3;
        unsigned T2ON                   :1;
    };
    struct {
        unsigned T2OUTPS0               :1;
        unsigned T2OUTPS1               :1;
        unsigned T2OUTPS2               :1;
        unsigned T2OUTPS3               :1;
        unsigned T2CKPS0                :1;
        unsigned T2CKPS1                :1;
        unsigned T2CKPS2                :1;
    };
    struct {
        unsigned OUTPS0                 :1;
        unsigned OUTPS1                 :1;
        unsigned OUTPS2                 :1;
        unsigned OUTPS3                 :1;
        unsigned CKPS0                  :1;
        unsigned CKPS1                  :1;
        unsigned CKPS2                  :1;
        unsigned TMR2ON                 :1;
    };
} T2CONbits_t;
extern volatile T2CONbits_t T2CONbits __at(0xFBD);
// bitfield macros
#define _T2CON_OUTPS_POSN                                   0x0
#define _T2CON_OUTPS_POSITION                               0x0
#define _T2CON_OUTPS_SIZE                                   0x4
#define _T2CON_OUTPS_LENGTH                                 0x4
#define _T2CON_OUTPS_MASK                                   0xF
#define _T2CON_CKPS_POSN                                    0x4
#define _T2CON_CKPS_POSITION                                0x4
#define _T2CON_CKPS_SIZE                                    0x3
#define _T2CON_CKPS_LENGTH                                  0x3
#define _T2CON_CKPS_MASK                                    0x70
#define _T2CON_ON_POSN                                      0x7
#define _T2CON_ON_POSITION                                  0x7
#define _T2CON_ON_SIZE                                      0x1
#define _T2CON_ON_LENGTH                                    0x1
#define _T2CON_ON_MASK                                      0x80
#define _T2CON_T2OUTPS_POSN                                 0x0
#define _T2CON_T2OUTPS_POSITION                             0x0
#define _T2CON_T2OUTPS_SIZE                                 0x4
#define _T2CON_T2OUTPS_LENGTH                               0x4
#define _T2CON_T2OUTPS_MASK                                 0xF
#define _T2CON_T2CKPS_POSN                                  0x4
#define _T2CON_T2CKPS_POSITION                              0x4
#define _T2CON_T2CKPS_SIZE                                  0x3
#define _T2CON_T2CKPS_LENGTH                                0x3
#define _T2CON_T2CKPS_MASK                                  0x70
#define _T2CON_T2ON_POSN                                    0x7
#define _T2CON_T2ON_POSITION                                0x7
#define _T2CON_T2ON_SIZE                                    0x1
#define _T2CON_T2ON_LENGTH                                  0x1
#define _T2CON_T2ON_MASK                                    0x80
#define _T2CON_T2OUTPS0_POSN                                0x0
#define _T2CON_T2OUTPS0_POSITION                            0x0
#define _T2CON_T2OUTPS0_SIZE                                0x1
#define _T2CON_T2OUTPS0_LENGTH                              0x1
#define _T2CON_T2OUTPS0_MASK                                0x1
#define _T2CON_T2OUTPS1_POSN                                0x1
#define _T2CON_T2OUTPS1_POSITION                            0x1
#define _T2CON_T2OUTPS1_SIZE                                0x1
#define _T2CON_T2OUTPS1_LENGTH                              0x1
#define _T2CON_T2OUTPS1_MASK                                0x2
#define _T2CON_T2OUTPS2_POSN                                0x2
#define _T2CON_T2OUTPS2_POSITION                            0x2
#define _T2CON_T2OUTPS2_SIZE                                0x1
#define _T2CON_T2OUTPS2_LENGTH                              0x1
#define _T2CON_T2OUTPS2_MASK                                0x4
#define _T2CON_T2OUTPS3_POSN                                0x3
#define _T2CON_T2OUTPS3_POSITION                            0x3
#define _T2CON_T2OUTPS3_SIZE                                0x1
#define _T2CON_T2OUTPS3_LENGTH                              0x1
#define _T2CON_T2OUTPS3_MASK                                0x8
#define _T2CON_T2CKPS0_POSN                                 0x4
#define _T2CON_T2CKPS0_POSITION                             0x4
#define _T2CON_T2CKPS0_SIZE                                 0x1
#define _T2CON_T2CKPS0_LENGTH                               0x1
#define _T2CON_T2CKPS0_MASK                                 0x10
#define _T2CON_T2CKPS1_POSN                                 0x5
#define _T2CON_T2CKPS1_POSITION                             0x5
#define _T2CON_T2CKPS1_SIZE                                 0x1
#define _T2CON_T2CKPS1_LENGTH                               0x1
#define _T2CON_T2CKPS1_MASK                                 0x20
#define _T2CON_T2CKPS2_POSN                                 0x6
#define _T2CON_T2CKPS2_POSITION                             0x6
#define _T2CON_T2CKPS2_SIZE                                 0x1
#define _T2CON_T2CKPS2_LENGTH                               0x1
#define _T2CON_T2CKPS2_MASK                                 0x40
#define _T2CON_OUTPS0_POSN                                  0x0
#define _T2CON_OUTPS0_POSITION                              0x0
#define _T2CON_OUTPS0_SIZE                                  0x1
#define _T2CON_OUTPS0_LENGTH                                0x1
#define _T2CON_OUTPS0_MASK                                  0x1
#define _T2CON_OUTPS1_POSN                                  0x1
#define _T2CON_OUTPS1_POSITION                              0x1
#define _T2CON_OUTPS1_SIZE                                  0x1
#define _T2CON_OUTPS1_LENGTH                                0x1
#define _T2CON_OUTPS1_MASK                                  0x2
#define _T2CON_OUTPS2_POSN                                  0x2
#define _T2CON_OUTPS2_POSITION                              0x2
#define _T2CON_OUTPS2_SIZE                                  0x1
#define _T2CON_OUTPS2_LENGTH                                0x1
#define _T2CON_OUTPS2_MASK                                  0x4
#define _T2CON_OUTPS3_POSN                                  0x3
#define _T2CON_OUTPS3_POSITION                              0x3
#define _T2CON_OUTPS3_SIZE                                  0x1
#define _T2CON_OUTPS3_LENGTH                                0x1
#define _T2CON_OUTPS3_MASK                                  0x8
#define _T2CON_CKPS0_POSN                                   0x4
#define _T2CON_CKPS0_POSITION                               0x4
#define _T2CON_CKPS0_SIZE                                   0x1
#define _T2CON_CKPS0_LENGTH                                 0x1
#define _T2CON_CKPS0_MASK                                   0x10
#define _T2CON_CKPS1_POSN                                   0x5
#define _T2CON_CKPS1_POSITION                               0x5
#define _T2CON_CKPS1_SIZE                                   0x1
#define _T2CON_CKPS1_LENGTH                                 0x1
#define _T2CON_CKPS1_MASK                                   0x20
#define _T2CON_CKPS2_POSN                                   0x6
#define _T2CON_CKPS2_POSITION                               0x6
#define _T2CON_CKPS2_SIZE                                   0x1
#define _T2CON_CKPS2_LENGTH                                 0x1
#define _T2CON_CKPS2_MASK                                   0x40
#define _T2CON_TMR2ON_POSN                                  0x7
#define _T2CON_TMR2ON_POSITION                              0x7
#define _T2CON_TMR2ON_SIZE                                  0x1
#define _T2CON_TMR2ON_LENGTH                                0x1
#define _T2CON_TMR2ON_MASK                                  0x80

// Register: T2HLT
#define T2HLT T2HLT
extern volatile unsigned char           T2HLT               __at(0xFBE);
#ifndef _LIB_BUILD
asm("T2HLT equ 0FBEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :5;
        unsigned CKSYNC                 :1;
        unsigned CKPOL                  :1;
        unsigned PSYNC                  :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned MODE3                  :1;
        unsigned MODE4                  :1;
    };
    struct {
        unsigned T2MODE                 :5;
        unsigned T2CKSYNC               :1;
        unsigned T2CKPOL                :1;
        unsigned T2PSYNC                :1;
    };
    struct {
        unsigned T2MODE0                :1;
        unsigned T2MODE1                :1;
        unsigned T2MODE2                :1;
        unsigned T2MODE3                :1;
        unsigned T2MODE4                :1;
    };
} T2HLTbits_t;
extern volatile T2HLTbits_t T2HLTbits __at(0xFBE);
// bitfield macros
#define _T2HLT_MODE_POSN                                    0x0
#define _T2HLT_MODE_POSITION                                0x0
#define _T2HLT_MODE_SIZE                                    0x5
#define _T2HLT_MODE_LENGTH                                  0x5
#define _T2HLT_MODE_MASK                                    0x1F
#define _T2HLT_CKSYNC_POSN                                  0x5
#define _T2HLT_CKSYNC_POSITION                              0x5
#define _T2HLT_CKSYNC_SIZE                                  0x1
#define _T2HLT_CKSYNC_LENGTH                                0x1
#define _T2HLT_CKSYNC_MASK                                  0x20
#define _T2HLT_CKPOL_POSN                                   0x6
#define _T2HLT_CKPOL_POSITION                               0x6
#define _T2HLT_CKPOL_SIZE                                   0x1
#define _T2HLT_CKPOL_LENGTH                                 0x1
#define _T2HLT_CKPOL_MASK                                   0x40
#define _T2HLT_PSYNC_POSN                                   0x7
#define _T2HLT_PSYNC_POSITION                               0x7
#define _T2HLT_PSYNC_SIZE                                   0x1
#define _T2HLT_PSYNC_LENGTH                                 0x1
#define _T2HLT_PSYNC_MASK                                   0x80
#define _T2HLT_MODE0_POSN                                   0x0
#define _T2HLT_MODE0_POSITION                               0x0
#define _T2HLT_MODE0_SIZE                                   0x1
#define _T2HLT_MODE0_LENGTH                                 0x1
#define _T2HLT_MODE0_MASK                                   0x1
#define _T2HLT_MODE1_POSN                                   0x1
#define _T2HLT_MODE1_POSITION                               0x1
#define _T2HLT_MODE1_SIZE                                   0x1
#define _T2HLT_MODE1_LENGTH                                 0x1
#define _T2HLT_MODE1_MASK                                   0x2
#define _T2HLT_MODE2_POSN                                   0x2
#define _T2HLT_MODE2_POSITION                               0x2
#define _T2HLT_MODE2_SIZE                                   0x1
#define _T2HLT_MODE2_LENGTH                                 0x1
#define _T2HLT_MODE2_MASK                                   0x4
#define _T2HLT_MODE3_POSN                                   0x3
#define _T2HLT_MODE3_POSITION                               0x3
#define _T2HLT_MODE3_SIZE                                   0x1
#define _T2HLT_MODE3_LENGTH                                 0x1
#define _T2HLT_MODE3_MASK                                   0x8
#define _T2HLT_MODE4_POSN                                   0x4
#define _T2HLT_MODE4_POSITION                               0x4
#define _T2HLT_MODE4_SIZE                                   0x1
#define _T2HLT_MODE4_LENGTH                                 0x1
#define _T2HLT_MODE4_MASK                                   0x10
#define _T2HLT_T2MODE_POSN                                  0x0
#define _T2HLT_T2MODE_POSITION                              0x0
#define _T2HLT_T2MODE_SIZE                                  0x5
#define _T2HLT_T2MODE_LENGTH                                0x5
#define _T2HLT_T2MODE_MASK                                  0x1F
#define _T2HLT_T2CKSYNC_POSN                                0x5
#define _T2HLT_T2CKSYNC_POSITION                            0x5
#define _T2HLT_T2CKSYNC_SIZE                                0x1
#define _T2HLT_T2CKSYNC_LENGTH                              0x1
#define _T2HLT_T2CKSYNC_MASK                                0x20
#define _T2HLT_T2CKPOL_POSN                                 0x6
#define _T2HLT_T2CKPOL_POSITION                             0x6
#define _T2HLT_T2CKPOL_SIZE                                 0x1
#define _T2HLT_T2CKPOL_LENGTH                               0x1
#define _T2HLT_T2CKPOL_MASK                                 0x40
#define _T2HLT_T2PSYNC_POSN                                 0x7
#define _T2HLT_T2PSYNC_POSITION                             0x7
#define _T2HLT_T2PSYNC_SIZE                                 0x1
#define _T2HLT_T2PSYNC_LENGTH                               0x1
#define _T2HLT_T2PSYNC_MASK                                 0x80
#define _T2HLT_T2MODE0_POSN                                 0x0
#define _T2HLT_T2MODE0_POSITION                             0x0
#define _T2HLT_T2MODE0_SIZE                                 0x1
#define _T2HLT_T2MODE0_LENGTH                               0x1
#define _T2HLT_T2MODE0_MASK                                 0x1
#define _T2HLT_T2MODE1_POSN                                 0x1
#define _T2HLT_T2MODE1_POSITION                             0x1
#define _T2HLT_T2MODE1_SIZE                                 0x1
#define _T2HLT_T2MODE1_LENGTH                               0x1
#define _T2HLT_T2MODE1_MASK                                 0x2
#define _T2HLT_T2MODE2_POSN                                 0x2
#define _T2HLT_T2MODE2_POSITION                             0x2
#define _T2HLT_T2MODE2_SIZE                                 0x1
#define _T2HLT_T2MODE2_LENGTH                               0x1
#define _T2HLT_T2MODE2_MASK                                 0x4
#define _T2HLT_T2MODE3_POSN                                 0x3
#define _T2HLT_T2MODE3_POSITION                             0x3
#define _T2HLT_T2MODE3_SIZE                                 0x1
#define _T2HLT_T2MODE3_LENGTH                               0x1
#define _T2HLT_T2MODE3_MASK                                 0x8
#define _T2HLT_T2MODE4_POSN                                 0x4
#define _T2HLT_T2MODE4_POSITION                             0x4
#define _T2HLT_T2MODE4_SIZE                                 0x1
#define _T2HLT_T2MODE4_LENGTH                               0x1
#define _T2HLT_T2MODE4_MASK                                 0x10

// Register: T2CLKCON
#define T2CLKCON T2CLKCON
extern volatile unsigned char           T2CLKCON            __at(0xFBF);
#ifndef _LIB_BUILD
asm("T2CLKCON equ 0FBFh");
#endif
// aliases
extern volatile unsigned char           T2CLK               __at(0xFBF);
#ifndef _LIB_BUILD
asm("T2CLK equ 0FBFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CS                     :4;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
    };
    struct {
        unsigned T2CS                   :4;
    };
    struct {
        unsigned T2CS0                  :1;
        unsigned T2CS1                  :1;
        unsigned T2CS2                  :1;
        unsigned T2CS3                  :1;
    };
} T2CLKCONbits_t;
extern volatile T2CLKCONbits_t T2CLKCONbits __at(0xFBF);
// bitfield macros
#define _T2CLKCON_CS_POSN                                   0x0
#define _T2CLKCON_CS_POSITION                               0x0
#define _T2CLKCON_CS_SIZE                                   0x4
#define _T2CLKCON_CS_LENGTH                                 0x4
#define _T2CLKCON_CS_MASK                                   0xF
#define _T2CLKCON_CS0_POSN                                  0x0
#define _T2CLKCON_CS0_POSITION                              0x0
#define _T2CLKCON_CS0_SIZE                                  0x1
#define _T2CLKCON_CS0_LENGTH                                0x1
#define _T2CLKCON_CS0_MASK                                  0x1
#define _T2CLKCON_CS1_POSN                                  0x1
#define _T2CLKCON_CS1_POSITION                              0x1
#define _T2CLKCON_CS1_SIZE                                  0x1
#define _T2CLKCON_CS1_LENGTH                                0x1
#define _T2CLKCON_CS1_MASK                                  0x2
#define _T2CLKCON_CS2_POSN                                  0x2
#define _T2CLKCON_CS2_POSITION                              0x2
#define _T2CLKCON_CS2_SIZE                                  0x1
#define _T2CLKCON_CS2_LENGTH                                0x1
#define _T2CLKCON_CS2_MASK                                  0x4
#define _T2CLKCON_CS3_POSN                                  0x3
#define _T2CLKCON_CS3_POSITION                              0x3
#define _T2CLKCON_CS3_SIZE                                  0x1
#define _T2CLKCON_CS3_LENGTH                                0x1
#define _T2CLKCON_CS3_MASK                                  0x8
#define _T2CLKCON_T2CS_POSN                                 0x0
#define _T2CLKCON_T2CS_POSITION                             0x0
#define _T2CLKCON_T2CS_SIZE                                 0x4
#define _T2CLKCON_T2CS_LENGTH                               0x4
#define _T2CLKCON_T2CS_MASK                                 0xF
#define _T2CLKCON_T2CS0_POSN                                0x0
#define _T2CLKCON_T2CS0_POSITION                            0x0
#define _T2CLKCON_T2CS0_SIZE                                0x1
#define _T2CLKCON_T2CS0_LENGTH                              0x1
#define _T2CLKCON_T2CS0_MASK                                0x1
#define _T2CLKCON_T2CS1_POSN                                0x1
#define _T2CLKCON_T2CS1_POSITION                            0x1
#define _T2CLKCON_T2CS1_SIZE                                0x1
#define _T2CLKCON_T2CS1_LENGTH                              0x1
#define _T2CLKCON_T2CS1_MASK                                0x2
#define _T2CLKCON_T2CS2_POSN                                0x2
#define _T2CLKCON_T2CS2_POSITION                            0x2
#define _T2CLKCON_T2CS2_SIZE                                0x1
#define _T2CLKCON_T2CS2_LENGTH                              0x1
#define _T2CLKCON_T2CS2_MASK                                0x4
#define _T2CLKCON_T2CS3_POSN                                0x3
#define _T2CLKCON_T2CS3_POSITION                            0x3
#define _T2CLKCON_T2CS3_SIZE                                0x1
#define _T2CLKCON_T2CS3_LENGTH                              0x1
#define _T2CLKCON_T2CS3_MASK                                0x8
// alias bitfield definitions
typedef union {
    struct {
        unsigned CS                     :4;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
    };
    struct {
        unsigned T2CS                   :4;
    };
    struct {
        unsigned T2CS0                  :1;
        unsigned T2CS1                  :1;
        unsigned T2CS2                  :1;
        unsigned T2CS3                  :1;
    };
} T2CLKbits_t;
extern volatile T2CLKbits_t T2CLKbits __at(0xFBF);
// bitfield macros
#define _T2CLK_CS_POSN                                      0x0
#define _T2CLK_CS_POSITION                                  0x0
#define _T2CLK_CS_SIZE                                      0x4
#define _T2CLK_CS_LENGTH                                    0x4
#define _T2CLK_CS_MASK                                      0xF
#define _T2CLK_CS0_POSN                                     0x0
#define _T2CLK_CS0_POSITION                                 0x0
#define _T2CLK_CS0_SIZE                                     0x1
#define _T2CLK_CS0_LENGTH                                   0x1
#define _T2CLK_CS0_MASK                                     0x1
#define _T2CLK_CS1_POSN                                     0x1
#define _T2CLK_CS1_POSITION                                 0x1
#define _T2CLK_CS1_SIZE                                     0x1
#define _T2CLK_CS1_LENGTH                                   0x1
#define _T2CLK_CS1_MASK                                     0x2
#define _T2CLK_CS2_POSN                                     0x2
#define _T2CLK_CS2_POSITION                                 0x2
#define _T2CLK_CS2_SIZE                                     0x1
#define _T2CLK_CS2_LENGTH                                   0x1
#define _T2CLK_CS2_MASK                                     0x4
#define _T2CLK_CS3_POSN                                     0x3
#define _T2CLK_CS3_POSITION                                 0x3
#define _T2CLK_CS3_SIZE                                     0x1
#define _T2CLK_CS3_LENGTH                                   0x1
#define _T2CLK_CS3_MASK                                     0x8
#define _T2CLK_T2CS_POSN                                    0x0
#define _T2CLK_T2CS_POSITION                                0x0
#define _T2CLK_T2CS_SIZE                                    0x4
#define _T2CLK_T2CS_LENGTH                                  0x4
#define _T2CLK_T2CS_MASK                                    0xF
#define _T2CLK_T2CS0_POSN                                   0x0
#define _T2CLK_T2CS0_POSITION                               0x0
#define _T2CLK_T2CS0_SIZE                                   0x1
#define _T2CLK_T2CS0_LENGTH                                 0x1
#define _T2CLK_T2CS0_MASK                                   0x1
#define _T2CLK_T2CS1_POSN                                   0x1
#define _T2CLK_T2CS1_POSITION                               0x1
#define _T2CLK_T2CS1_SIZE                                   0x1
#define _T2CLK_T2CS1_LENGTH                                 0x1
#define _T2CLK_T2CS1_MASK                                   0x2
#define _T2CLK_T2CS2_POSN                                   0x2
#define _T2CLK_T2CS2_POSITION                               0x2
#define _T2CLK_T2CS2_SIZE                                   0x1
#define _T2CLK_T2CS2_LENGTH                                 0x1
#define _T2CLK_T2CS2_MASK                                   0x4
#define _T2CLK_T2CS3_POSN                                   0x3
#define _T2CLK_T2CS3_POSITION                               0x3
#define _T2CLK_T2CS3_SIZE                                   0x1
#define _T2CLK_T2CS3_LENGTH                                 0x1
#define _T2CLK_T2CS3_MASK                                   0x8

// Register: T2RST
#define T2RST T2RST
extern volatile unsigned char           T2RST               __at(0xFC0);
#ifndef _LIB_BUILD
asm("T2RST equ 0FC0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RSEL                   :5;
    };
    struct {
        unsigned RSEL0                  :1;
        unsigned RSEL1                  :1;
        unsigned RSEL2                  :1;
        unsigned RSEL3                  :1;
    };
    struct {
        unsigned T2RSEL                 :5;
    };
    struct {
        unsigned T2RSEL0                :1;
        unsigned T2RSEL1                :1;
        unsigned T2RSEL2                :1;
        unsigned T2RSEL3                :1;
    };
} T2RSTbits_t;
extern volatile T2RSTbits_t T2RSTbits __at(0xFC0);
// bitfield macros
#define _T2RST_RSEL_POSN                                    0x0
#define _T2RST_RSEL_POSITION                                0x0
#define _T2RST_RSEL_SIZE                                    0x5
#define _T2RST_RSEL_LENGTH                                  0x5
#define _T2RST_RSEL_MASK                                    0x1F
#define _T2RST_RSEL0_POSN                                   0x0
#define _T2RST_RSEL0_POSITION                               0x0
#define _T2RST_RSEL0_SIZE                                   0x1
#define _T2RST_RSEL0_LENGTH                                 0x1
#define _T2RST_RSEL0_MASK                                   0x1
#define _T2RST_RSEL1_POSN                                   0x1
#define _T2RST_RSEL1_POSITION                               0x1
#define _T2RST_RSEL1_SIZE                                   0x1
#define _T2RST_RSEL1_LENGTH                                 0x1
#define _T2RST_RSEL1_MASK                                   0x2
#define _T2RST_RSEL2_POSN                                   0x2
#define _T2RST_RSEL2_POSITION                               0x2
#define _T2RST_RSEL2_SIZE                                   0x1
#define _T2RST_RSEL2_LENGTH                                 0x1
#define _T2RST_RSEL2_MASK                                   0x4
#define _T2RST_RSEL3_POSN                                   0x3
#define _T2RST_RSEL3_POSITION                               0x3
#define _T2RST_RSEL3_SIZE                                   0x1
#define _T2RST_RSEL3_LENGTH                                 0x1
#define _T2RST_RSEL3_MASK                                   0x8
#define _T2RST_T2RSEL_POSN                                  0x0
#define _T2RST_T2RSEL_POSITION                              0x0
#define _T2RST_T2RSEL_SIZE                                  0x5
#define _T2RST_T2RSEL_LENGTH                                0x5
#define _T2RST_T2RSEL_MASK                                  0x1F
#define _T2RST_T2RSEL0_POSN                                 0x0
#define _T2RST_T2RSEL0_POSITION                             0x0
#define _T2RST_T2RSEL0_SIZE                                 0x1
#define _T2RST_T2RSEL0_LENGTH                               0x1
#define _T2RST_T2RSEL0_MASK                                 0x1
#define _T2RST_T2RSEL1_POSN                                 0x1
#define _T2RST_T2RSEL1_POSITION                             0x1
#define _T2RST_T2RSEL1_SIZE                                 0x1
#define _T2RST_T2RSEL1_LENGTH                               0x1
#define _T2RST_T2RSEL1_MASK                                 0x2
#define _T2RST_T2RSEL2_POSN                                 0x2
#define _T2RST_T2RSEL2_POSITION                             0x2
#define _T2RST_T2RSEL2_SIZE                                 0x1
#define _T2RST_T2RSEL2_LENGTH                               0x1
#define _T2RST_T2RSEL2_MASK                                 0x4
#define _T2RST_T2RSEL3_POSN                                 0x3
#define _T2RST_T2RSEL3_POSITION                             0x3
#define _T2RST_T2RSEL3_SIZE                                 0x1
#define _T2RST_T2RSEL3_LENGTH                               0x1
#define _T2RST_T2RSEL3_MASK                                 0x8

// Register: TMR5
#define TMR5 TMR5
extern volatile unsigned short          TMR5                __at(0xFC1);
#ifndef _LIB_BUILD
asm("TMR5 equ 0FC1h");
#endif

// Register: TMR5L
#define TMR5L TMR5L
extern volatile unsigned char           TMR5L               __at(0xFC1);
#ifndef _LIB_BUILD
asm("TMR5L equ 0FC1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR5L0                 :1;
        unsigned TMR5L1                 :1;
        unsigned TMR5L2                 :1;
        unsigned TMR5L3                 :1;
        unsigned TMR5L4                 :1;
        unsigned TMR5L5                 :1;
        unsigned TMR5L6                 :1;
        unsigned TMR5L7                 :1;
    };
    struct {
        unsigned TMR5L                  :8;
    };
    struct {
        unsigned TMR50                  :1;
        unsigned TMR51                  :1;
        unsigned TMR52                  :1;
        unsigned TMR53                  :1;
        unsigned TMR54                  :1;
        unsigned TMR55                  :1;
        unsigned TMR56                  :1;
        unsigned TMR57                  :1;
    };
    struct {
        unsigned CAL05                  :1;
        unsigned CAL15                  :1;
        unsigned CAL25                  :1;
        unsigned CAL35                  :1;
        unsigned CAL45                  :1;
        unsigned CAL55                  :1;
        unsigned CAL65                  :1;
        unsigned CAL75                  :1;
    };
} TMR5Lbits_t;
extern volatile TMR5Lbits_t TMR5Lbits __at(0xFC1);
// bitfield macros
#define _TMR5L_TMR5L0_POSN                                  0x0
#define _TMR5L_TMR5L0_POSITION                              0x0
#define _TMR5L_TMR5L0_SIZE                                  0x1
#define _TMR5L_TMR5L0_LENGTH                                0x1
#define _TMR5L_TMR5L0_MASK                                  0x1
#define _TMR5L_TMR5L1_POSN                                  0x1
#define _TMR5L_TMR5L1_POSITION                              0x1
#define _TMR5L_TMR5L1_SIZE                                  0x1
#define _TMR5L_TMR5L1_LENGTH                                0x1
#define _TMR5L_TMR5L1_MASK                                  0x2
#define _TMR5L_TMR5L2_POSN                                  0x2
#define _TMR5L_TMR5L2_POSITION                              0x2
#define _TMR5L_TMR5L2_SIZE                                  0x1
#define _TMR5L_TMR5L2_LENGTH                                0x1
#define _TMR5L_TMR5L2_MASK                                  0x4
#define _TMR5L_TMR5L3_POSN                                  0x3
#define _TMR5L_TMR5L3_POSITION                              0x3
#define _TMR5L_TMR5L3_SIZE                                  0x1
#define _TMR5L_TMR5L3_LENGTH                                0x1
#define _TMR5L_TMR5L3_MASK                                  0x8
#define _TMR5L_TMR5L4_POSN                                  0x4
#define _TMR5L_TMR5L4_POSITION                              0x4
#define _TMR5L_TMR5L4_SIZE                                  0x1
#define _TMR5L_TMR5L4_LENGTH                                0x1
#define _TMR5L_TMR5L4_MASK                                  0x10
#define _TMR5L_TMR5L5_POSN                                  0x5
#define _TMR5L_TMR5L5_POSITION                              0x5
#define _TMR5L_TMR5L5_SIZE                                  0x1
#define _TMR5L_TMR5L5_LENGTH                                0x1
#define _TMR5L_TMR5L5_MASK                                  0x20
#define _TMR5L_TMR5L6_POSN                                  0x6
#define _TMR5L_TMR5L6_POSITION                              0x6
#define _TMR5L_TMR5L6_SIZE                                  0x1
#define _TMR5L_TMR5L6_LENGTH                                0x1
#define _TMR5L_TMR5L6_MASK                                  0x40
#define _TMR5L_TMR5L7_POSN                                  0x7
#define _TMR5L_TMR5L7_POSITION                              0x7
#define _TMR5L_TMR5L7_SIZE                                  0x1
#define _TMR5L_TMR5L7_LENGTH                                0x1
#define _TMR5L_TMR5L7_MASK                                  0x80
#define _TMR5L_TMR5L_POSN                                   0x0
#define _TMR5L_TMR5L_POSITION                               0x0
#define _TMR5L_TMR5L_SIZE                                   0x8
#define _TMR5L_TMR5L_LENGTH                                 0x8
#define _TMR5L_TMR5L_MASK                                   0xFF
#define _TMR5L_TMR50_POSN                                   0x0
#define _TMR5L_TMR50_POSITION                               0x0
#define _TMR5L_TMR50_SIZE                                   0x1
#define _TMR5L_TMR50_LENGTH                                 0x1
#define _TMR5L_TMR50_MASK                                   0x1
#define _TMR5L_TMR51_POSN                                   0x1
#define _TMR5L_TMR51_POSITION                               0x1
#define _TMR5L_TMR51_SIZE                                   0x1
#define _TMR5L_TMR51_LENGTH                                 0x1
#define _TMR5L_TMR51_MASK                                   0x2
#define _TMR5L_TMR52_POSN                                   0x2
#define _TMR5L_TMR52_POSITION                               0x2
#define _TMR5L_TMR52_SIZE                                   0x1
#define _TMR5L_TMR52_LENGTH                                 0x1
#define _TMR5L_TMR52_MASK                                   0x4
#define _TMR5L_TMR53_POSN                                   0x3
#define _TMR5L_TMR53_POSITION                               0x3
#define _TMR5L_TMR53_SIZE                                   0x1
#define _TMR5L_TMR53_LENGTH                                 0x1
#define _TMR5L_TMR53_MASK                                   0x8
#define _TMR5L_TMR54_POSN                                   0x4
#define _TMR5L_TMR54_POSITION                               0x4
#define _TMR5L_TMR54_SIZE                                   0x1
#define _TMR5L_TMR54_LENGTH                                 0x1
#define _TMR5L_TMR54_MASK                                   0x10
#define _TMR5L_TMR55_POSN                                   0x5
#define _TMR5L_TMR55_POSITION                               0x5
#define _TMR5L_TMR55_SIZE                                   0x1
#define _TMR5L_TMR55_LENGTH                                 0x1
#define _TMR5L_TMR55_MASK                                   0x20
#define _TMR5L_TMR56_POSN                                   0x6
#define _TMR5L_TMR56_POSITION                               0x6
#define _TMR5L_TMR56_SIZE                                   0x1
#define _TMR5L_TMR56_LENGTH                                 0x1
#define _TMR5L_TMR56_MASK                                   0x40
#define _TMR5L_TMR57_POSN                                   0x7
#define _TMR5L_TMR57_POSITION                               0x7
#define _TMR5L_TMR57_SIZE                                   0x1
#define _TMR5L_TMR57_LENGTH                                 0x1
#define _TMR5L_TMR57_MASK                                   0x80
#define _TMR5L_CAL05_POSN                                   0x0
#define _TMR5L_CAL05_POSITION                               0x0
#define _TMR5L_CAL05_SIZE                                   0x1
#define _TMR5L_CAL05_LENGTH                                 0x1
#define _TMR5L_CAL05_MASK                                   0x1
#define _TMR5L_CAL15_POSN                                   0x1
#define _TMR5L_CAL15_POSITION                               0x1
#define _TMR5L_CAL15_SIZE                                   0x1
#define _TMR5L_CAL15_LENGTH                                 0x1
#define _TMR5L_CAL15_MASK                                   0x2
#define _TMR5L_CAL25_POSN                                   0x2
#define _TMR5L_CAL25_POSITION                               0x2
#define _TMR5L_CAL25_SIZE                                   0x1
#define _TMR5L_CAL25_LENGTH                                 0x1
#define _TMR5L_CAL25_MASK                                   0x4
#define _TMR5L_CAL35_POSN                                   0x3
#define _TMR5L_CAL35_POSITION                               0x3
#define _TMR5L_CAL35_SIZE                                   0x1
#define _TMR5L_CAL35_LENGTH                                 0x1
#define _TMR5L_CAL35_MASK                                   0x8
#define _TMR5L_CAL45_POSN                                   0x4
#define _TMR5L_CAL45_POSITION                               0x4
#define _TMR5L_CAL45_SIZE                                   0x1
#define _TMR5L_CAL45_LENGTH                                 0x1
#define _TMR5L_CAL45_MASK                                   0x10
#define _TMR5L_CAL55_POSN                                   0x5
#define _TMR5L_CAL55_POSITION                               0x5
#define _TMR5L_CAL55_SIZE                                   0x1
#define _TMR5L_CAL55_LENGTH                                 0x1
#define _TMR5L_CAL55_MASK                                   0x20
#define _TMR5L_CAL65_POSN                                   0x6
#define _TMR5L_CAL65_POSITION                               0x6
#define _TMR5L_CAL65_SIZE                                   0x1
#define _TMR5L_CAL65_LENGTH                                 0x1
#define _TMR5L_CAL65_MASK                                   0x40
#define _TMR5L_CAL75_POSN                                   0x7
#define _TMR5L_CAL75_POSITION                               0x7
#define _TMR5L_CAL75_SIZE                                   0x1
#define _TMR5L_CAL75_LENGTH                                 0x1
#define _TMR5L_CAL75_MASK                                   0x80

// Register: TMR5H
#define TMR5H TMR5H
extern volatile unsigned char           TMR5H               __at(0xFC2);
#ifndef _LIB_BUILD
asm("TMR5H equ 0FC2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR5H0                 :1;
        unsigned TMR5H1                 :1;
        unsigned TMR5H2                 :1;
        unsigned TMR5H3                 :1;
        unsigned TMR5H4                 :1;
        unsigned TMR5H5                 :1;
        unsigned TMR5H6                 :1;
        unsigned TMR5H7                 :1;
    };
    struct {
        unsigned TMR5H                  :8;
    };
    struct {
        unsigned TMR58                  :1;
        unsigned TMR59                  :1;
        unsigned TMR510                 :1;
        unsigned TMR511                 :1;
        unsigned TMR512                 :1;
        unsigned TMR513                 :1;
        unsigned TMR514                 :1;
        unsigned TMR515                 :1;
    };
} TMR5Hbits_t;
extern volatile TMR5Hbits_t TMR5Hbits __at(0xFC2);
// bitfield macros
#define _TMR5H_TMR5H0_POSN                                  0x0
#define _TMR5H_TMR5H0_POSITION                              0x0
#define _TMR5H_TMR5H0_SIZE                                  0x1
#define _TMR5H_TMR5H0_LENGTH                                0x1
#define _TMR5H_TMR5H0_MASK                                  0x1
#define _TMR5H_TMR5H1_POSN                                  0x1
#define _TMR5H_TMR5H1_POSITION                              0x1
#define _TMR5H_TMR5H1_SIZE                                  0x1
#define _TMR5H_TMR5H1_LENGTH                                0x1
#define _TMR5H_TMR5H1_MASK                                  0x2
#define _TMR5H_TMR5H2_POSN                                  0x2
#define _TMR5H_TMR5H2_POSITION                              0x2
#define _TMR5H_TMR5H2_SIZE                                  0x1
#define _TMR5H_TMR5H2_LENGTH                                0x1
#define _TMR5H_TMR5H2_MASK                                  0x4
#define _TMR5H_TMR5H3_POSN                                  0x3
#define _TMR5H_TMR5H3_POSITION                              0x3
#define _TMR5H_TMR5H3_SIZE                                  0x1
#define _TMR5H_TMR5H3_LENGTH                                0x1
#define _TMR5H_TMR5H3_MASK                                  0x8
#define _TMR5H_TMR5H4_POSN                                  0x4
#define _TMR5H_TMR5H4_POSITION                              0x4
#define _TMR5H_TMR5H4_SIZE                                  0x1
#define _TMR5H_TMR5H4_LENGTH                                0x1
#define _TMR5H_TMR5H4_MASK                                  0x10
#define _TMR5H_TMR5H5_POSN                                  0x5
#define _TMR5H_TMR5H5_POSITION                              0x5
#define _TMR5H_TMR5H5_SIZE                                  0x1
#define _TMR5H_TMR5H5_LENGTH                                0x1
#define _TMR5H_TMR5H5_MASK                                  0x20
#define _TMR5H_TMR5H6_POSN                                  0x6
#define _TMR5H_TMR5H6_POSITION                              0x6
#define _TMR5H_TMR5H6_SIZE                                  0x1
#define _TMR5H_TMR5H6_LENGTH                                0x1
#define _TMR5H_TMR5H6_MASK                                  0x40
#define _TMR5H_TMR5H7_POSN                                  0x7
#define _TMR5H_TMR5H7_POSITION                              0x7
#define _TMR5H_TMR5H7_SIZE                                  0x1
#define _TMR5H_TMR5H7_LENGTH                                0x1
#define _TMR5H_TMR5H7_MASK                                  0x80
#define _TMR5H_TMR5H_POSN                                   0x0
#define _TMR5H_TMR5H_POSITION                               0x0
#define _TMR5H_TMR5H_SIZE                                   0x8
#define _TMR5H_TMR5H_LENGTH                                 0x8
#define _TMR5H_TMR5H_MASK                                   0xFF
#define _TMR5H_TMR58_POSN                                   0x0
#define _TMR5H_TMR58_POSITION                               0x0
#define _TMR5H_TMR58_SIZE                                   0x1
#define _TMR5H_TMR58_LENGTH                                 0x1
#define _TMR5H_TMR58_MASK                                   0x1
#define _TMR5H_TMR59_POSN                                   0x1
#define _TMR5H_TMR59_POSITION                               0x1
#define _TMR5H_TMR59_SIZE                                   0x1
#define _TMR5H_TMR59_LENGTH                                 0x1
#define _TMR5H_TMR59_MASK                                   0x2
#define _TMR5H_TMR510_POSN                                  0x2
#define _TMR5H_TMR510_POSITION                              0x2
#define _TMR5H_TMR510_SIZE                                  0x1
#define _TMR5H_TMR510_LENGTH                                0x1
#define _TMR5H_TMR510_MASK                                  0x4
#define _TMR5H_TMR511_POSN                                  0x3
#define _TMR5H_TMR511_POSITION                              0x3
#define _TMR5H_TMR511_SIZE                                  0x1
#define _TMR5H_TMR511_LENGTH                                0x1
#define _TMR5H_TMR511_MASK                                  0x8
#define _TMR5H_TMR512_POSN                                  0x4
#define _TMR5H_TMR512_POSITION                              0x4
#define _TMR5H_TMR512_SIZE                                  0x1
#define _TMR5H_TMR512_LENGTH                                0x1
#define _TMR5H_TMR512_MASK                                  0x10
#define _TMR5H_TMR513_POSN                                  0x5
#define _TMR5H_TMR513_POSITION                              0x5
#define _TMR5H_TMR513_SIZE                                  0x1
#define _TMR5H_TMR513_LENGTH                                0x1
#define _TMR5H_TMR513_MASK                                  0x20
#define _TMR5H_TMR514_POSN                                  0x6
#define _TMR5H_TMR514_POSITION                              0x6
#define _TMR5H_TMR514_SIZE                                  0x1
#define _TMR5H_TMR514_LENGTH                                0x1
#define _TMR5H_TMR514_MASK                                  0x40
#define _TMR5H_TMR515_POSN                                  0x7
#define _TMR5H_TMR515_POSITION                              0x7
#define _TMR5H_TMR515_SIZE                                  0x1
#define _TMR5H_TMR515_LENGTH                                0x1
#define _TMR5H_TMR515_MASK                                  0x80

// Register: T5CON
#define T5CON T5CON
extern volatile unsigned char           T5CON               __at(0xFC3);
#ifndef _LIB_BUILD
asm("T5CON equ 0FC3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned NOT_SYNC               :1;
    };
    struct {
        unsigned ON                     :1;
        unsigned RD16                   :1;
        unsigned nSYNC                  :1;
        unsigned                        :1;
        unsigned CKPS                   :2;
    };
    struct {
        unsigned                        :2;
        unsigned NOT_T5SYNC             :1;
    };
    struct {
        unsigned TMR5ON                 :1;
        unsigned T5RD16                 :1;
        unsigned nT5SYNC                :1;
        unsigned                        :1;
        unsigned T5CKPS0                :1;
        unsigned T5CKPS1                :1;
    };
    struct {
        unsigned                        :4;
        unsigned CKPS0                  :1;
        unsigned CKPS1                  :1;
    };
    struct {
        unsigned                        :1;
        unsigned RD165                  :1;
    };
} T5CONbits_t;
extern volatile T5CONbits_t T5CONbits __at(0xFC3);
// bitfield macros
#define _T5CON_NOT_SYNC_POSN                                0x2
#define _T5CON_NOT_SYNC_POSITION                            0x2
#define _T5CON_NOT_SYNC_SIZE                                0x1
#define _T5CON_NOT_SYNC_LENGTH                              0x1
#define _T5CON_NOT_SYNC_MASK                                0x4
#define _T5CON_ON_POSN                                      0x0
#define _T5CON_ON_POSITION                                  0x0
#define _T5CON_ON_SIZE                                      0x1
#define _T5CON_ON_LENGTH                                    0x1
#define _T5CON_ON_MASK                                      0x1
#define _T5CON_RD16_POSN                                    0x1
#define _T5CON_RD16_POSITION                                0x1
#define _T5CON_RD16_SIZE                                    0x1
#define _T5CON_RD16_LENGTH                                  0x1
#define _T5CON_RD16_MASK                                    0x2
#define _T5CON_nSYNC_POSN                                   0x2
#define _T5CON_nSYNC_POSITION                               0x2
#define _T5CON_nSYNC_SIZE                                   0x1
#define _T5CON_nSYNC_LENGTH                                 0x1
#define _T5CON_nSYNC_MASK                                   0x4
#define _T5CON_CKPS_POSN                                    0x4
#define _T5CON_CKPS_POSITION                                0x4
#define _T5CON_CKPS_SIZE                                    0x2
#define _T5CON_CKPS_LENGTH                                  0x2
#define _T5CON_CKPS_MASK                                    0x30
#define _T5CON_NOT_T5SYNC_POSN                              0x2
#define _T5CON_NOT_T5SYNC_POSITION                          0x2
#define _T5CON_NOT_T5SYNC_SIZE                              0x1
#define _T5CON_NOT_T5SYNC_LENGTH                            0x1
#define _T5CON_NOT_T5SYNC_MASK                              0x4
#define _T5CON_TMR5ON_POSN                                  0x0
#define _T5CON_TMR5ON_POSITION                              0x0
#define _T5CON_TMR5ON_SIZE                                  0x1
#define _T5CON_TMR5ON_LENGTH                                0x1
#define _T5CON_TMR5ON_MASK                                  0x1
#define _T5CON_T5RD16_POSN                                  0x1
#define _T5CON_T5RD16_POSITION                              0x1
#define _T5CON_T5RD16_SIZE                                  0x1
#define _T5CON_T5RD16_LENGTH                                0x1
#define _T5CON_T5RD16_MASK                                  0x2
#define _T5CON_nT5SYNC_POSN                                 0x2
#define _T5CON_nT5SYNC_POSITION                             0x2
#define _T5CON_nT5SYNC_SIZE                                 0x1
#define _T5CON_nT5SYNC_LENGTH                               0x1
#define _T5CON_nT5SYNC_MASK                                 0x4
#define _T5CON_T5CKPS0_POSN                                 0x4
#define _T5CON_T5CKPS0_POSITION                             0x4
#define _T5CON_T5CKPS0_SIZE                                 0x1
#define _T5CON_T5CKPS0_LENGTH                               0x1
#define _T5CON_T5CKPS0_MASK                                 0x10
#define _T5CON_T5CKPS1_POSN                                 0x5
#define _T5CON_T5CKPS1_POSITION                             0x5
#define _T5CON_T5CKPS1_SIZE                                 0x1
#define _T5CON_T5CKPS1_LENGTH                               0x1
#define _T5CON_T5CKPS1_MASK                                 0x20
#define _T5CON_CKPS0_POSN                                   0x4
#define _T5CON_CKPS0_POSITION                               0x4
#define _T5CON_CKPS0_SIZE                                   0x1
#define _T5CON_CKPS0_LENGTH                                 0x1
#define _T5CON_CKPS0_MASK                                   0x10
#define _T5CON_CKPS1_POSN                                   0x5
#define _T5CON_CKPS1_POSITION                               0x5
#define _T5CON_CKPS1_SIZE                                   0x1
#define _T5CON_CKPS1_LENGTH                                 0x1
#define _T5CON_CKPS1_MASK                                   0x20
#define _T5CON_RD165_POSN                                   0x1
#define _T5CON_RD165_POSITION                               0x1
#define _T5CON_RD165_SIZE                                   0x1
#define _T5CON_RD165_LENGTH                                 0x1
#define _T5CON_RD165_MASK                                   0x2

// Register: T5GCON
#define T5GCON T5GCON
extern volatile unsigned char           T5GCON              __at(0xFC4);
#ifndef _LIB_BUILD
asm("T5GCON equ 0FC4h");
#endif
// aliases
extern volatile unsigned char           PR5                 __at(0xFC4);
#ifndef _LIB_BUILD
asm("PR5 equ 0FC4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :3;
        unsigned GGO_NOT_DONE           :1;
    };
    struct {
        unsigned                        :2;
        unsigned GVAL                   :1;
        unsigned GGO_nDONE              :1;
        unsigned GSPM                   :1;
        unsigned GTM                    :1;
        unsigned GPOL                   :1;
        unsigned GE                     :1;
    };
    struct {
        unsigned                        :3;
        unsigned T5GGO_NOT_DONE         :1;
    };
    struct {
        unsigned                        :2;
        unsigned T5GVAL                 :1;
        unsigned T5GGO_nDONE            :1;
        unsigned T5GSPM                 :1;
        unsigned T5GTM                  :1;
        unsigned T5GPOL                 :1;
        unsigned T5GE                   :1;
    };
    struct {
        unsigned                        :3;
        unsigned T5GGO                  :1;
    };
} T5GCONbits_t;
extern volatile T5GCONbits_t T5GCONbits __at(0xFC4);
// bitfield macros
#define _T5GCON_GGO_NOT_DONE_POSN                           0x3
#define _T5GCON_GGO_NOT_DONE_POSITION                       0x3
#define _T5GCON_GGO_NOT_DONE_SIZE                           0x1
#define _T5GCON_GGO_NOT_DONE_LENGTH                         0x1
#define _T5GCON_GGO_NOT_DONE_MASK                           0x8
#define _T5GCON_GVAL_POSN                                   0x2
#define _T5GCON_GVAL_POSITION                               0x2
#define _T5GCON_GVAL_SIZE                                   0x1
#define _T5GCON_GVAL_LENGTH                                 0x1
#define _T5GCON_GVAL_MASK                                   0x4
#define _T5GCON_GGO_nDONE_POSN                              0x3
#define _T5GCON_GGO_nDONE_POSITION                          0x3
#define _T5GCON_GGO_nDONE_SIZE                              0x1
#define _T5GCON_GGO_nDONE_LENGTH                            0x1
#define _T5GCON_GGO_nDONE_MASK                              0x8
#define _T5GCON_GSPM_POSN                                   0x4
#define _T5GCON_GSPM_POSITION                               0x4
#define _T5GCON_GSPM_SIZE                                   0x1
#define _T5GCON_GSPM_LENGTH                                 0x1
#define _T5GCON_GSPM_MASK                                   0x10
#define _T5GCON_GTM_POSN                                    0x5
#define _T5GCON_GTM_POSITION                                0x5
#define _T5GCON_GTM_SIZE                                    0x1
#define _T5GCON_GTM_LENGTH                                  0x1
#define _T5GCON_GTM_MASK                                    0x20
#define _T5GCON_GPOL_POSN                                   0x6
#define _T5GCON_GPOL_POSITION                               0x6
#define _T5GCON_GPOL_SIZE                                   0x1
#define _T5GCON_GPOL_LENGTH                                 0x1
#define _T5GCON_GPOL_MASK                                   0x40
#define _T5GCON_GE_POSN                                     0x7
#define _T5GCON_GE_POSITION                                 0x7
#define _T5GCON_GE_SIZE                                     0x1
#define _T5GCON_GE_LENGTH                                   0x1
#define _T5GCON_GE_MASK                                     0x80
#define _T5GCON_T5GGO_NOT_DONE_POSN                         0x3
#define _T5GCON_T5GGO_NOT_DONE_POSITION                     0x3
#define _T5GCON_T5GGO_NOT_DONE_SIZE                         0x1
#define _T5GCON_T5GGO_NOT_DONE_LENGTH                       0x1
#define _T5GCON_T5GGO_NOT_DONE_MASK                         0x8
#define _T5GCON_T5GVAL_POSN                                 0x2
#define _T5GCON_T5GVAL_POSITION                             0x2
#define _T5GCON_T5GVAL_SIZE                                 0x1
#define _T5GCON_T5GVAL_LENGTH                               0x1
#define _T5GCON_T5GVAL_MASK                                 0x4
#define _T5GCON_T5GGO_nDONE_POSN                            0x3
#define _T5GCON_T5GGO_nDONE_POSITION                        0x3
#define _T5GCON_T5GGO_nDONE_SIZE                            0x1
#define _T5GCON_T5GGO_nDONE_LENGTH                          0x1
#define _T5GCON_T5GGO_nDONE_MASK                            0x8
#define _T5GCON_T5GSPM_POSN                                 0x4
#define _T5GCON_T5GSPM_POSITION                             0x4
#define _T5GCON_T5GSPM_SIZE                                 0x1
#define _T5GCON_T5GSPM_LENGTH                               0x1
#define _T5GCON_T5GSPM_MASK                                 0x10
#define _T5GCON_T5GTM_POSN                                  0x5
#define _T5GCON_T5GTM_POSITION                              0x5
#define _T5GCON_T5GTM_SIZE                                  0x1
#define _T5GCON_T5GTM_LENGTH                                0x1
#define _T5GCON_T5GTM_MASK                                  0x20
#define _T5GCON_T5GPOL_POSN                                 0x6
#define _T5GCON_T5GPOL_POSITION                             0x6
#define _T5GCON_T5GPOL_SIZE                                 0x1
#define _T5GCON_T5GPOL_LENGTH                               0x1
#define _T5GCON_T5GPOL_MASK                                 0x40
#define _T5GCON_T5GE_POSN                                   0x7
#define _T5GCON_T5GE_POSITION                               0x7
#define _T5GCON_T5GE_SIZE                                   0x1
#define _T5GCON_T5GE_LENGTH                                 0x1
#define _T5GCON_T5GE_MASK                                   0x80
#define _T5GCON_T5GGO_POSN                                  0x3
#define _T5GCON_T5GGO_POSITION                              0x3
#define _T5GCON_T5GGO_SIZE                                  0x1
#define _T5GCON_T5GGO_LENGTH                                0x1
#define _T5GCON_T5GGO_MASK                                  0x8
// alias bitfield definitions
typedef union {
    struct {
        unsigned                        :3;
        unsigned GGO_NOT_DONE           :1;
    };
    struct {
        unsigned                        :2;
        unsigned GVAL                   :1;
        unsigned GGO_nDONE              :1;
        unsigned GSPM                   :1;
        unsigned GTM                    :1;
        unsigned GPOL                   :1;
        unsigned GE                     :1;
    };
    struct {
        unsigned                        :3;
        unsigned T5GGO_NOT_DONE         :1;
    };
    struct {
        unsigned                        :2;
        unsigned T5GVAL                 :1;
        unsigned T5GGO_nDONE            :1;
        unsigned T5GSPM                 :1;
        unsigned T5GTM                  :1;
        unsigned T5GPOL                 :1;
        unsigned T5GE                   :1;
    };
    struct {
        unsigned                        :3;
        unsigned T5GGO                  :1;
    };
} PR5bits_t;
extern volatile PR5bits_t PR5bits __at(0xFC4);
// bitfield macros
#define _PR5_GGO_NOT_DONE_POSN                              0x3
#define _PR5_GGO_NOT_DONE_POSITION                          0x3
#define _PR5_GGO_NOT_DONE_SIZE                              0x1
#define _PR5_GGO_NOT_DONE_LENGTH                            0x1
#define _PR5_GGO_NOT_DONE_MASK                              0x8
#define _PR5_GVAL_POSN                                      0x2
#define _PR5_GVAL_POSITION                                  0x2
#define _PR5_GVAL_SIZE                                      0x1
#define _PR5_GVAL_LENGTH                                    0x1
#define _PR5_GVAL_MASK                                      0x4
#define _PR5_GGO_nDONE_POSN                                 0x3
#define _PR5_GGO_nDONE_POSITION                             0x3
#define _PR5_GGO_nDONE_SIZE                                 0x1
#define _PR5_GGO_nDONE_LENGTH                               0x1
#define _PR5_GGO_nDONE_MASK                                 0x8
#define _PR5_GSPM_POSN                                      0x4
#define _PR5_GSPM_POSITION                                  0x4
#define _PR5_GSPM_SIZE                                      0x1
#define _PR5_GSPM_LENGTH                                    0x1
#define _PR5_GSPM_MASK                                      0x10
#define _PR5_GTM_POSN                                       0x5
#define _PR5_GTM_POSITION                                   0x5
#define _PR5_GTM_SIZE                                       0x1
#define _PR5_GTM_LENGTH                                     0x1
#define _PR5_GTM_MASK                                       0x20
#define _PR5_GPOL_POSN                                      0x6
#define _PR5_GPOL_POSITION                                  0x6
#define _PR5_GPOL_SIZE                                      0x1
#define _PR5_GPOL_LENGTH                                    0x1
#define _PR5_GPOL_MASK                                      0x40
#define _PR5_GE_POSN                                        0x7
#define _PR5_GE_POSITION                                    0x7
#define _PR5_GE_SIZE                                        0x1
#define _PR5_GE_LENGTH                                      0x1
#define _PR5_GE_MASK                                        0x80
#define _PR5_T5GGO_NOT_DONE_POSN                            0x3
#define _PR5_T5GGO_NOT_DONE_POSITION                        0x3
#define _PR5_T5GGO_NOT_DONE_SIZE                            0x1
#define _PR5_T5GGO_NOT_DONE_LENGTH                          0x1
#define _PR5_T5GGO_NOT_DONE_MASK                            0x8
#define _PR5_T5GVAL_POSN                                    0x2
#define _PR5_T5GVAL_POSITION                                0x2
#define _PR5_T5GVAL_SIZE                                    0x1
#define _PR5_T5GVAL_LENGTH                                  0x1
#define _PR5_T5GVAL_MASK                                    0x4
#define _PR5_T5GGO_nDONE_POSN                               0x3
#define _PR5_T5GGO_nDONE_POSITION                           0x3
#define _PR5_T5GGO_nDONE_SIZE                               0x1
#define _PR5_T5GGO_nDONE_LENGTH                             0x1
#define _PR5_T5GGO_nDONE_MASK                               0x8
#define _PR5_T5GSPM_POSN                                    0x4
#define _PR5_T5GSPM_POSITION                                0x4
#define _PR5_T5GSPM_SIZE                                    0x1
#define _PR5_T5GSPM_LENGTH                                  0x1
#define _PR5_T5GSPM_MASK                                    0x10
#define _PR5_T5GTM_POSN                                     0x5
#define _PR5_T5GTM_POSITION                                 0x5
#define _PR5_T5GTM_SIZE                                     0x1
#define _PR5_T5GTM_LENGTH                                   0x1
#define _PR5_T5GTM_MASK                                     0x20
#define _PR5_T5GPOL_POSN                                    0x6
#define _PR5_T5GPOL_POSITION                                0x6
#define _PR5_T5GPOL_SIZE                                    0x1
#define _PR5_T5GPOL_LENGTH                                  0x1
#define _PR5_T5GPOL_MASK                                    0x40
#define _PR5_T5GE_POSN                                      0x7
#define _PR5_T5GE_POSITION                                  0x7
#define _PR5_T5GE_SIZE                                      0x1
#define _PR5_T5GE_LENGTH                                    0x1
#define _PR5_T5GE_MASK                                      0x80
#define _PR5_T5GGO_POSN                                     0x3
#define _PR5_T5GGO_POSITION                                 0x3
#define _PR5_T5GGO_SIZE                                     0x1
#define _PR5_T5GGO_LENGTH                                   0x1
#define _PR5_T5GGO_MASK                                     0x8

// Register: T5GATE
#define T5GATE T5GATE
extern volatile unsigned char           T5GATE              __at(0xFC5);
#ifndef _LIB_BUILD
asm("T5GATE equ 0FC5h");
#endif
// aliases
extern volatile unsigned char           TMR5GATE            __at(0xFC5);
#ifndef _LIB_BUILD
asm("TMR5GATE equ 0FC5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned GSS                    :5;
    };
    struct {
        unsigned GSS0                   :1;
        unsigned GSS1                   :1;
        unsigned GSS2                   :1;
        unsigned GSS3                   :1;
    };
    struct {
        unsigned T5GSS0                 :1;
        unsigned T5GSS1                 :1;
        unsigned T5GSS2                 :1;
        unsigned T5GSS3                 :1;
    };
} T5GATEbits_t;
extern volatile T5GATEbits_t T5GATEbits __at(0xFC5);
// bitfield macros
#define _T5GATE_GSS_POSN                                    0x0
#define _T5GATE_GSS_POSITION                                0x0
#define _T5GATE_GSS_SIZE                                    0x5
#define _T5GATE_GSS_LENGTH                                  0x5
#define _T5GATE_GSS_MASK                                    0x1F
#define _T5GATE_GSS0_POSN                                   0x0
#define _T5GATE_GSS0_POSITION                               0x0
#define _T5GATE_GSS0_SIZE                                   0x1
#define _T5GATE_GSS0_LENGTH                                 0x1
#define _T5GATE_GSS0_MASK                                   0x1
#define _T5GATE_GSS1_POSN                                   0x1
#define _T5GATE_GSS1_POSITION                               0x1
#define _T5GATE_GSS1_SIZE                                   0x1
#define _T5GATE_GSS1_LENGTH                                 0x1
#define _T5GATE_GSS1_MASK                                   0x2
#define _T5GATE_GSS2_POSN                                   0x2
#define _T5GATE_GSS2_POSITION                               0x2
#define _T5GATE_GSS2_SIZE                                   0x1
#define _T5GATE_GSS2_LENGTH                                 0x1
#define _T5GATE_GSS2_MASK                                   0x4
#define _T5GATE_GSS3_POSN                                   0x3
#define _T5GATE_GSS3_POSITION                               0x3
#define _T5GATE_GSS3_SIZE                                   0x1
#define _T5GATE_GSS3_LENGTH                                 0x1
#define _T5GATE_GSS3_MASK                                   0x8
#define _T5GATE_T5GSS0_POSN                                 0x0
#define _T5GATE_T5GSS0_POSITION                             0x0
#define _T5GATE_T5GSS0_SIZE                                 0x1
#define _T5GATE_T5GSS0_LENGTH                               0x1
#define _T5GATE_T5GSS0_MASK                                 0x1
#define _T5GATE_T5GSS1_POSN                                 0x1
#define _T5GATE_T5GSS1_POSITION                             0x1
#define _T5GATE_T5GSS1_SIZE                                 0x1
#define _T5GATE_T5GSS1_LENGTH                               0x1
#define _T5GATE_T5GSS1_MASK                                 0x2
#define _T5GATE_T5GSS2_POSN                                 0x2
#define _T5GATE_T5GSS2_POSITION                             0x2
#define _T5GATE_T5GSS2_SIZE                                 0x1
#define _T5GATE_T5GSS2_LENGTH                               0x1
#define _T5GATE_T5GSS2_MASK                                 0x4
#define _T5GATE_T5GSS3_POSN                                 0x3
#define _T5GATE_T5GSS3_POSITION                             0x3
#define _T5GATE_T5GSS3_SIZE                                 0x1
#define _T5GATE_T5GSS3_LENGTH                               0x1
#define _T5GATE_T5GSS3_MASK                                 0x8
// alias bitfield definitions
typedef union {
    struct {
        unsigned GSS                    :5;
    };
    struct {
        unsigned GSS0                   :1;
        unsigned GSS1                   :1;
        unsigned GSS2                   :1;
        unsigned GSS3                   :1;
    };
    struct {
        unsigned T5GSS0                 :1;
        unsigned T5GSS1                 :1;
        unsigned T5GSS2                 :1;
        unsigned T5GSS3                 :1;
    };
} TMR5GATEbits_t;
extern volatile TMR5GATEbits_t TMR5GATEbits __at(0xFC5);
// bitfield macros
#define _TMR5GATE_GSS_POSN                                  0x0
#define _TMR5GATE_GSS_POSITION                              0x0
#define _TMR5GATE_GSS_SIZE                                  0x5
#define _TMR5GATE_GSS_LENGTH                                0x5
#define _TMR5GATE_GSS_MASK                                  0x1F
#define _TMR5GATE_GSS0_POSN                                 0x0
#define _TMR5GATE_GSS0_POSITION                             0x0
#define _TMR5GATE_GSS0_SIZE                                 0x1
#define _TMR5GATE_GSS0_LENGTH                               0x1
#define _TMR5GATE_GSS0_MASK                                 0x1
#define _TMR5GATE_GSS1_POSN                                 0x1
#define _TMR5GATE_GSS1_POSITION                             0x1
#define _TMR5GATE_GSS1_SIZE                                 0x1
#define _TMR5GATE_GSS1_LENGTH                               0x1
#define _TMR5GATE_GSS1_MASK                                 0x2
#define _TMR5GATE_GSS2_POSN                                 0x2
#define _TMR5GATE_GSS2_POSITION                             0x2
#define _TMR5GATE_GSS2_SIZE                                 0x1
#define _TMR5GATE_GSS2_LENGTH                               0x1
#define _TMR5GATE_GSS2_MASK                                 0x4
#define _TMR5GATE_GSS3_POSN                                 0x3
#define _TMR5GATE_GSS3_POSITION                             0x3
#define _TMR5GATE_GSS3_SIZE                                 0x1
#define _TMR5GATE_GSS3_LENGTH                               0x1
#define _TMR5GATE_GSS3_MASK                                 0x8
#define _TMR5GATE_T5GSS0_POSN                               0x0
#define _TMR5GATE_T5GSS0_POSITION                           0x0
#define _TMR5GATE_T5GSS0_SIZE                               0x1
#define _TMR5GATE_T5GSS0_LENGTH                             0x1
#define _TMR5GATE_T5GSS0_MASK                               0x1
#define _TMR5GATE_T5GSS1_POSN                               0x1
#define _TMR5GATE_T5GSS1_POSITION                           0x1
#define _TMR5GATE_T5GSS1_SIZE                               0x1
#define _TMR5GATE_T5GSS1_LENGTH                             0x1
#define _TMR5GATE_T5GSS1_MASK                               0x2
#define _TMR5GATE_T5GSS2_POSN                               0x2
#define _TMR5GATE_T5GSS2_POSITION                           0x2
#define _TMR5GATE_T5GSS2_SIZE                               0x1
#define _TMR5GATE_T5GSS2_LENGTH                             0x1
#define _TMR5GATE_T5GSS2_MASK                               0x4
#define _TMR5GATE_T5GSS3_POSN                               0x3
#define _TMR5GATE_T5GSS3_POSITION                           0x3
#define _TMR5GATE_T5GSS3_SIZE                               0x1
#define _TMR5GATE_T5GSS3_LENGTH                             0x1
#define _TMR5GATE_T5GSS3_MASK                               0x8

// Register: T5CLK
#define T5CLK T5CLK
extern volatile unsigned char           T5CLK               __at(0xFC6);
#ifndef _LIB_BUILD
asm("T5CLK equ 0FC6h");
#endif
// aliases
extern volatile unsigned char           TMR5CLK             __at(0xFC6);
#ifndef _LIB_BUILD
asm("TMR5CLK equ 0FC6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CS                     :4;
    };
    struct {
        unsigned T5CS0                  :1;
        unsigned T5CS1                  :1;
        unsigned T5CS2                  :1;
        unsigned T5CS3                  :1;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
    };
} T5CLKbits_t;
extern volatile T5CLKbits_t T5CLKbits __at(0xFC6);
// bitfield macros
#define _T5CLK_CS_POSN                                      0x0
#define _T5CLK_CS_POSITION                                  0x0
#define _T5CLK_CS_SIZE                                      0x4
#define _T5CLK_CS_LENGTH                                    0x4
#define _T5CLK_CS_MASK                                      0xF
#define _T5CLK_T5CS0_POSN                                   0x0
#define _T5CLK_T5CS0_POSITION                               0x0
#define _T5CLK_T5CS0_SIZE                                   0x1
#define _T5CLK_T5CS0_LENGTH                                 0x1
#define _T5CLK_T5CS0_MASK                                   0x1
#define _T5CLK_T5CS1_POSN                                   0x1
#define _T5CLK_T5CS1_POSITION                               0x1
#define _T5CLK_T5CS1_SIZE                                   0x1
#define _T5CLK_T5CS1_LENGTH                                 0x1
#define _T5CLK_T5CS1_MASK                                   0x2
#define _T5CLK_T5CS2_POSN                                   0x2
#define _T5CLK_T5CS2_POSITION                               0x2
#define _T5CLK_T5CS2_SIZE                                   0x1
#define _T5CLK_T5CS2_LENGTH                                 0x1
#define _T5CLK_T5CS2_MASK                                   0x4
#define _T5CLK_T5CS3_POSN                                   0x3
#define _T5CLK_T5CS3_POSITION                               0x3
#define _T5CLK_T5CS3_SIZE                                   0x1
#define _T5CLK_T5CS3_LENGTH                                 0x1
#define _T5CLK_T5CS3_MASK                                   0x8
#define _T5CLK_CS0_POSN                                     0x0
#define _T5CLK_CS0_POSITION                                 0x0
#define _T5CLK_CS0_SIZE                                     0x1
#define _T5CLK_CS0_LENGTH                                   0x1
#define _T5CLK_CS0_MASK                                     0x1
#define _T5CLK_CS1_POSN                                     0x1
#define _T5CLK_CS1_POSITION                                 0x1
#define _T5CLK_CS1_SIZE                                     0x1
#define _T5CLK_CS1_LENGTH                                   0x1
#define _T5CLK_CS1_MASK                                     0x2
#define _T5CLK_CS2_POSN                                     0x2
#define _T5CLK_CS2_POSITION                                 0x2
#define _T5CLK_CS2_SIZE                                     0x1
#define _T5CLK_CS2_LENGTH                                   0x1
#define _T5CLK_CS2_MASK                                     0x4
#define _T5CLK_CS3_POSN                                     0x3
#define _T5CLK_CS3_POSITION                                 0x3
#define _T5CLK_CS3_SIZE                                     0x1
#define _T5CLK_CS3_LENGTH                                   0x1
#define _T5CLK_CS3_MASK                                     0x8
// alias bitfield definitions
typedef union {
    struct {
        unsigned CS                     :4;
    };
    struct {
        unsigned T5CS0                  :1;
        unsigned T5CS1                  :1;
        unsigned T5CS2                  :1;
        unsigned T5CS3                  :1;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
    };
} TMR5CLKbits_t;
extern volatile TMR5CLKbits_t TMR5CLKbits __at(0xFC6);
// bitfield macros
#define _TMR5CLK_CS_POSN                                    0x0
#define _TMR5CLK_CS_POSITION                                0x0
#define _TMR5CLK_CS_SIZE                                    0x4
#define _TMR5CLK_CS_LENGTH                                  0x4
#define _TMR5CLK_CS_MASK                                    0xF
#define _TMR5CLK_T5CS0_POSN                                 0x0
#define _TMR5CLK_T5CS0_POSITION                             0x0
#define _TMR5CLK_T5CS0_SIZE                                 0x1
#define _TMR5CLK_T5CS0_LENGTH                               0x1
#define _TMR5CLK_T5CS0_MASK                                 0x1
#define _TMR5CLK_T5CS1_POSN                                 0x1
#define _TMR5CLK_T5CS1_POSITION                             0x1
#define _TMR5CLK_T5CS1_SIZE                                 0x1
#define _TMR5CLK_T5CS1_LENGTH                               0x1
#define _TMR5CLK_T5CS1_MASK                                 0x2
#define _TMR5CLK_T5CS2_POSN                                 0x2
#define _TMR5CLK_T5CS2_POSITION                             0x2
#define _TMR5CLK_T5CS2_SIZE                                 0x1
#define _TMR5CLK_T5CS2_LENGTH                               0x1
#define _TMR5CLK_T5CS2_MASK                                 0x4
#define _TMR5CLK_T5CS3_POSN                                 0x3
#define _TMR5CLK_T5CS3_POSITION                             0x3
#define _TMR5CLK_T5CS3_SIZE                                 0x1
#define _TMR5CLK_T5CS3_LENGTH                               0x1
#define _TMR5CLK_T5CS3_MASK                                 0x8
#define _TMR5CLK_CS0_POSN                                   0x0
#define _TMR5CLK_CS0_POSITION                               0x0
#define _TMR5CLK_CS0_SIZE                                   0x1
#define _TMR5CLK_CS0_LENGTH                                 0x1
#define _TMR5CLK_CS0_MASK                                   0x1
#define _TMR5CLK_CS1_POSN                                   0x1
#define _TMR5CLK_CS1_POSITION                               0x1
#define _TMR5CLK_CS1_SIZE                                   0x1
#define _TMR5CLK_CS1_LENGTH                                 0x1
#define _TMR5CLK_CS1_MASK                                   0x2
#define _TMR5CLK_CS2_POSN                                   0x2
#define _TMR5CLK_CS2_POSITION                               0x2
#define _TMR5CLK_CS2_SIZE                                   0x1
#define _TMR5CLK_CS2_LENGTH                                 0x1
#define _TMR5CLK_CS2_MASK                                   0x4
#define _TMR5CLK_CS3_POSN                                   0x3
#define _TMR5CLK_CS3_POSITION                               0x3
#define _TMR5CLK_CS3_SIZE                                   0x1
#define _TMR5CLK_CS3_LENGTH                                 0x1
#define _TMR5CLK_CS3_MASK                                   0x8

// Register: TMR3
#define TMR3 TMR3
extern volatile unsigned short          TMR3                __at(0xFC7);
#ifndef _LIB_BUILD
asm("TMR3 equ 0FC7h");
#endif

// Register: TMR3L
#define TMR3L TMR3L
extern volatile unsigned char           TMR3L               __at(0xFC7);
#ifndef _LIB_BUILD
asm("TMR3L equ 0FC7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR3L0                 :1;
        unsigned TMR3L1                 :1;
        unsigned TMR3L2                 :1;
        unsigned TMR3L3                 :1;
        unsigned TMR3L4                 :1;
        unsigned TMR3L5                 :1;
        unsigned TMR3L6                 :1;
        unsigned TMR3L7                 :1;
    };
    struct {
        unsigned TMR3L                  :8;
    };
    struct {
        unsigned TMR30                  :1;
        unsigned TMR31                  :1;
        unsigned TMR32                  :1;
        unsigned TMR33                  :1;
        unsigned TMR34                  :1;
        unsigned TMR35                  :1;
        unsigned TMR36                  :1;
        unsigned TMR37                  :1;
    };
    struct {
        unsigned CAL03                  :1;
        unsigned CAL13                  :1;
        unsigned CAL23                  :1;
        unsigned CAL33                  :1;
        unsigned CAL43                  :1;
        unsigned CAL53                  :1;
        unsigned CAL63                  :1;
        unsigned CAL73                  :1;
    };
} TMR3Lbits_t;
extern volatile TMR3Lbits_t TMR3Lbits __at(0xFC7);
// bitfield macros
#define _TMR3L_TMR3L0_POSN                                  0x0
#define _TMR3L_TMR3L0_POSITION                              0x0
#define _TMR3L_TMR3L0_SIZE                                  0x1
#define _TMR3L_TMR3L0_LENGTH                                0x1
#define _TMR3L_TMR3L0_MASK                                  0x1
#define _TMR3L_TMR3L1_POSN                                  0x1
#define _TMR3L_TMR3L1_POSITION                              0x1
#define _TMR3L_TMR3L1_SIZE                                  0x1
#define _TMR3L_TMR3L1_LENGTH                                0x1
#define _TMR3L_TMR3L1_MASK                                  0x2
#define _TMR3L_TMR3L2_POSN                                  0x2
#define _TMR3L_TMR3L2_POSITION                              0x2
#define _TMR3L_TMR3L2_SIZE                                  0x1
#define _TMR3L_TMR3L2_LENGTH                                0x1
#define _TMR3L_TMR3L2_MASK                                  0x4
#define _TMR3L_TMR3L3_POSN                                  0x3
#define _TMR3L_TMR3L3_POSITION                              0x3
#define _TMR3L_TMR3L3_SIZE                                  0x1
#define _TMR3L_TMR3L3_LENGTH                                0x1
#define _TMR3L_TMR3L3_MASK                                  0x8
#define _TMR3L_TMR3L4_POSN                                  0x4
#define _TMR3L_TMR3L4_POSITION                              0x4
#define _TMR3L_TMR3L4_SIZE                                  0x1
#define _TMR3L_TMR3L4_LENGTH                                0x1
#define _TMR3L_TMR3L4_MASK                                  0x10
#define _TMR3L_TMR3L5_POSN                                  0x5
#define _TMR3L_TMR3L5_POSITION                              0x5
#define _TMR3L_TMR3L5_SIZE                                  0x1
#define _TMR3L_TMR3L5_LENGTH                                0x1
#define _TMR3L_TMR3L5_MASK                                  0x20
#define _TMR3L_TMR3L6_POSN                                  0x6
#define _TMR3L_TMR3L6_POSITION                              0x6
#define _TMR3L_TMR3L6_SIZE                                  0x1
#define _TMR3L_TMR3L6_LENGTH                                0x1
#define _TMR3L_TMR3L6_MASK                                  0x40
#define _TMR3L_TMR3L7_POSN                                  0x7
#define _TMR3L_TMR3L7_POSITION                              0x7
#define _TMR3L_TMR3L7_SIZE                                  0x1
#define _TMR3L_TMR3L7_LENGTH                                0x1
#define _TMR3L_TMR3L7_MASK                                  0x80
#define _TMR3L_TMR3L_POSN                                   0x0
#define _TMR3L_TMR3L_POSITION                               0x0
#define _TMR3L_TMR3L_SIZE                                   0x8
#define _TMR3L_TMR3L_LENGTH                                 0x8
#define _TMR3L_TMR3L_MASK                                   0xFF
#define _TMR3L_TMR30_POSN                                   0x0
#define _TMR3L_TMR30_POSITION                               0x0
#define _TMR3L_TMR30_SIZE                                   0x1
#define _TMR3L_TMR30_LENGTH                                 0x1
#define _TMR3L_TMR30_MASK                                   0x1
#define _TMR3L_TMR31_POSN                                   0x1
#define _TMR3L_TMR31_POSITION                               0x1
#define _TMR3L_TMR31_SIZE                                   0x1
#define _TMR3L_TMR31_LENGTH                                 0x1
#define _TMR3L_TMR31_MASK                                   0x2
#define _TMR3L_TMR32_POSN                                   0x2
#define _TMR3L_TMR32_POSITION                               0x2
#define _TMR3L_TMR32_SIZE                                   0x1
#define _TMR3L_TMR32_LENGTH                                 0x1
#define _TMR3L_TMR32_MASK                                   0x4
#define _TMR3L_TMR33_POSN                                   0x3
#define _TMR3L_TMR33_POSITION                               0x3
#define _TMR3L_TMR33_SIZE                                   0x1
#define _TMR3L_TMR33_LENGTH                                 0x1
#define _TMR3L_TMR33_MASK                                   0x8
#define _TMR3L_TMR34_POSN                                   0x4
#define _TMR3L_TMR34_POSITION                               0x4
#define _TMR3L_TMR34_SIZE                                   0x1
#define _TMR3L_TMR34_LENGTH                                 0x1
#define _TMR3L_TMR34_MASK                                   0x10
#define _TMR3L_TMR35_POSN                                   0x5
#define _TMR3L_TMR35_POSITION                               0x5
#define _TMR3L_TMR35_SIZE                                   0x1
#define _TMR3L_TMR35_LENGTH                                 0x1
#define _TMR3L_TMR35_MASK                                   0x20
#define _TMR3L_TMR36_POSN                                   0x6
#define _TMR3L_TMR36_POSITION                               0x6
#define _TMR3L_TMR36_SIZE                                   0x1
#define _TMR3L_TMR36_LENGTH                                 0x1
#define _TMR3L_TMR36_MASK                                   0x40
#define _TMR3L_TMR37_POSN                                   0x7
#define _TMR3L_TMR37_POSITION                               0x7
#define _TMR3L_TMR37_SIZE                                   0x1
#define _TMR3L_TMR37_LENGTH                                 0x1
#define _TMR3L_TMR37_MASK                                   0x80
#define _TMR3L_CAL03_POSN                                   0x0
#define _TMR3L_CAL03_POSITION                               0x0
#define _TMR3L_CAL03_SIZE                                   0x1
#define _TMR3L_CAL03_LENGTH                                 0x1
#define _TMR3L_CAL03_MASK                                   0x1
#define _TMR3L_CAL13_POSN                                   0x1
#define _TMR3L_CAL13_POSITION                               0x1
#define _TMR3L_CAL13_SIZE                                   0x1
#define _TMR3L_CAL13_LENGTH                                 0x1
#define _TMR3L_CAL13_MASK                                   0x2
#define _TMR3L_CAL23_POSN                                   0x2
#define _TMR3L_CAL23_POSITION                               0x2
#define _TMR3L_CAL23_SIZE                                   0x1
#define _TMR3L_CAL23_LENGTH                                 0x1
#define _TMR3L_CAL23_MASK                                   0x4
#define _TMR3L_CAL33_POSN                                   0x3
#define _TMR3L_CAL33_POSITION                               0x3
#define _TMR3L_CAL33_SIZE                                   0x1
#define _TMR3L_CAL33_LENGTH                                 0x1
#define _TMR3L_CAL33_MASK                                   0x8
#define _TMR3L_CAL43_POSN                                   0x4
#define _TMR3L_CAL43_POSITION                               0x4
#define _TMR3L_CAL43_SIZE                                   0x1
#define _TMR3L_CAL43_LENGTH                                 0x1
#define _TMR3L_CAL43_MASK                                   0x10
#define _TMR3L_CAL53_POSN                                   0x5
#define _TMR3L_CAL53_POSITION                               0x5
#define _TMR3L_CAL53_SIZE                                   0x1
#define _TMR3L_CAL53_LENGTH                                 0x1
#define _TMR3L_CAL53_MASK                                   0x20
#define _TMR3L_CAL63_POSN                                   0x6
#define _TMR3L_CAL63_POSITION                               0x6
#define _TMR3L_CAL63_SIZE                                   0x1
#define _TMR3L_CAL63_LENGTH                                 0x1
#define _TMR3L_CAL63_MASK                                   0x40
#define _TMR3L_CAL73_POSN                                   0x7
#define _TMR3L_CAL73_POSITION                               0x7
#define _TMR3L_CAL73_SIZE                                   0x1
#define _TMR3L_CAL73_LENGTH                                 0x1
#define _TMR3L_CAL73_MASK                                   0x80

// Register: TMR3H
#define TMR3H TMR3H
extern volatile unsigned char           TMR3H               __at(0xFC8);
#ifndef _LIB_BUILD
asm("TMR3H equ 0FC8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR3H0                 :1;
        unsigned TMR3H1                 :1;
        unsigned TMR3H2                 :1;
        unsigned TMR3H3                 :1;
        unsigned TMR3H4                 :1;
        unsigned TMR3H5                 :1;
        unsigned TMR3H6                 :1;
        unsigned TMR3H7                 :1;
    };
    struct {
        unsigned TMR3H                  :8;
    };
    struct {
        unsigned TMR38                  :1;
        unsigned TMR39                  :1;
        unsigned TMR310                 :1;
        unsigned TMR311                 :1;
        unsigned TMR312                 :1;
        unsigned TMR313                 :1;
        unsigned TMR314                 :1;
        unsigned TMR315                 :1;
    };
} TMR3Hbits_t;
extern volatile TMR3Hbits_t TMR3Hbits __at(0xFC8);
// bitfield macros
#define _TMR3H_TMR3H0_POSN                                  0x0
#define _TMR3H_TMR3H0_POSITION                              0x0
#define _TMR3H_TMR3H0_SIZE                                  0x1
#define _TMR3H_TMR3H0_LENGTH                                0x1
#define _TMR3H_TMR3H0_MASK                                  0x1
#define _TMR3H_TMR3H1_POSN                                  0x1
#define _TMR3H_TMR3H1_POSITION                              0x1
#define _TMR3H_TMR3H1_SIZE                                  0x1
#define _TMR3H_TMR3H1_LENGTH                                0x1
#define _TMR3H_TMR3H1_MASK                                  0x2
#define _TMR3H_TMR3H2_POSN                                  0x2
#define _TMR3H_TMR3H2_POSITION                              0x2
#define _TMR3H_TMR3H2_SIZE                                  0x1
#define _TMR3H_TMR3H2_LENGTH                                0x1
#define _TMR3H_TMR3H2_MASK                                  0x4
#define _TMR3H_TMR3H3_POSN                                  0x3
#define _TMR3H_TMR3H3_POSITION                              0x3
#define _TMR3H_TMR3H3_SIZE                                  0x1
#define _TMR3H_TMR3H3_LENGTH                                0x1
#define _TMR3H_TMR3H3_MASK                                  0x8
#define _TMR3H_TMR3H4_POSN                                  0x4
#define _TMR3H_TMR3H4_POSITION                              0x4
#define _TMR3H_TMR3H4_SIZE                                  0x1
#define _TMR3H_TMR3H4_LENGTH                                0x1
#define _TMR3H_TMR3H4_MASK                                  0x10
#define _TMR3H_TMR3H5_POSN                                  0x5
#define _TMR3H_TMR3H5_POSITION                              0x5
#define _TMR3H_TMR3H5_SIZE                                  0x1
#define _TMR3H_TMR3H5_LENGTH                                0x1
#define _TMR3H_TMR3H5_MASK                                  0x20
#define _TMR3H_TMR3H6_POSN                                  0x6
#define _TMR3H_TMR3H6_POSITION                              0x6
#define _TMR3H_TMR3H6_SIZE                                  0x1
#define _TMR3H_TMR3H6_LENGTH                                0x1
#define _TMR3H_TMR3H6_MASK                                  0x40
#define _TMR3H_TMR3H7_POSN                                  0x7
#define _TMR3H_TMR3H7_POSITION                              0x7
#define _TMR3H_TMR3H7_SIZE                                  0x1
#define _TMR3H_TMR3H7_LENGTH                                0x1
#define _TMR3H_TMR3H7_MASK                                  0x80
#define _TMR3H_TMR3H_POSN                                   0x0
#define _TMR3H_TMR3H_POSITION                               0x0
#define _TMR3H_TMR3H_SIZE                                   0x8
#define _TMR3H_TMR3H_LENGTH                                 0x8
#define _TMR3H_TMR3H_MASK                                   0xFF
#define _TMR3H_TMR38_POSN                                   0x0
#define _TMR3H_TMR38_POSITION                               0x0
#define _TMR3H_TMR38_SIZE                                   0x1
#define _TMR3H_TMR38_LENGTH                                 0x1
#define _TMR3H_TMR38_MASK                                   0x1
#define _TMR3H_TMR39_POSN                                   0x1
#define _TMR3H_TMR39_POSITION                               0x1
#define _TMR3H_TMR39_SIZE                                   0x1
#define _TMR3H_TMR39_LENGTH                                 0x1
#define _TMR3H_TMR39_MASK                                   0x2
#define _TMR3H_TMR310_POSN                                  0x2
#define _TMR3H_TMR310_POSITION                              0x2
#define _TMR3H_TMR310_SIZE                                  0x1
#define _TMR3H_TMR310_LENGTH                                0x1
#define _TMR3H_TMR310_MASK                                  0x4
#define _TMR3H_TMR311_POSN                                  0x3
#define _TMR3H_TMR311_POSITION                              0x3
#define _TMR3H_TMR311_SIZE                                  0x1
#define _TMR3H_TMR311_LENGTH                                0x1
#define _TMR3H_TMR311_MASK                                  0x8
#define _TMR3H_TMR312_POSN                                  0x4
#define _TMR3H_TMR312_POSITION                              0x4
#define _TMR3H_TMR312_SIZE                                  0x1
#define _TMR3H_TMR312_LENGTH                                0x1
#define _TMR3H_TMR312_MASK                                  0x10
#define _TMR3H_TMR313_POSN                                  0x5
#define _TMR3H_TMR313_POSITION                              0x5
#define _TMR3H_TMR313_SIZE                                  0x1
#define _TMR3H_TMR313_LENGTH                                0x1
#define _TMR3H_TMR313_MASK                                  0x20
#define _TMR3H_TMR314_POSN                                  0x6
#define _TMR3H_TMR314_POSITION                              0x6
#define _TMR3H_TMR314_SIZE                                  0x1
#define _TMR3H_TMR314_LENGTH                                0x1
#define _TMR3H_TMR314_MASK                                  0x40
#define _TMR3H_TMR315_POSN                                  0x7
#define _TMR3H_TMR315_POSITION                              0x7
#define _TMR3H_TMR315_SIZE                                  0x1
#define _TMR3H_TMR315_LENGTH                                0x1
#define _TMR3H_TMR315_MASK                                  0x80

// Register: T3CON
#define T3CON T3CON
extern volatile unsigned char           T3CON               __at(0xFC9);
#ifndef _LIB_BUILD
asm("T3CON equ 0FC9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned NOT_SYNC               :1;
    };
    struct {
        unsigned ON                     :1;
        unsigned RD16                   :1;
        unsigned nSYNC                  :1;
        unsigned                        :1;
        unsigned CKPS                   :2;
    };
    struct {
        unsigned                        :2;
        unsigned NOT_T3SYNC             :1;
    };
    struct {
        unsigned TMR3ON                 :1;
        unsigned T3RD16                 :1;
        unsigned nT3SYNC                :1;
        unsigned                        :1;
        unsigned T3CKPS0                :1;
        unsigned T3CKPS1                :1;
    };
    struct {
        unsigned                        :4;
        unsigned CKPS0                  :1;
        unsigned CKPS1                  :1;
    };
    struct {
        unsigned                        :1;
        unsigned RD163                  :1;
    };
} T3CONbits_t;
extern volatile T3CONbits_t T3CONbits __at(0xFC9);
// bitfield macros
#define _T3CON_NOT_SYNC_POSN                                0x2
#define _T3CON_NOT_SYNC_POSITION                            0x2
#define _T3CON_NOT_SYNC_SIZE                                0x1
#define _T3CON_NOT_SYNC_LENGTH                              0x1
#define _T3CON_NOT_SYNC_MASK                                0x4
#define _T3CON_ON_POSN                                      0x0
#define _T3CON_ON_POSITION                                  0x0
#define _T3CON_ON_SIZE                                      0x1
#define _T3CON_ON_LENGTH                                    0x1
#define _T3CON_ON_MASK                                      0x1
#define _T3CON_RD16_POSN                                    0x1
#define _T3CON_RD16_POSITION                                0x1
#define _T3CON_RD16_SIZE                                    0x1
#define _T3CON_RD16_LENGTH                                  0x1
#define _T3CON_RD16_MASK                                    0x2
#define _T3CON_nSYNC_POSN                                   0x2
#define _T3CON_nSYNC_POSITION                               0x2
#define _T3CON_nSYNC_SIZE                                   0x1
#define _T3CON_nSYNC_LENGTH                                 0x1
#define _T3CON_nSYNC_MASK                                   0x4
#define _T3CON_CKPS_POSN                                    0x4
#define _T3CON_CKPS_POSITION                                0x4
#define _T3CON_CKPS_SIZE                                    0x2
#define _T3CON_CKPS_LENGTH                                  0x2
#define _T3CON_CKPS_MASK                                    0x30
#define _T3CON_NOT_T3SYNC_POSN                              0x2
#define _T3CON_NOT_T3SYNC_POSITION                          0x2
#define _T3CON_NOT_T3SYNC_SIZE                              0x1
#define _T3CON_NOT_T3SYNC_LENGTH                            0x1
#define _T3CON_NOT_T3SYNC_MASK                              0x4
#define _T3CON_TMR3ON_POSN                                  0x0
#define _T3CON_TMR3ON_POSITION                              0x0
#define _T3CON_TMR3ON_SIZE                                  0x1
#define _T3CON_TMR3ON_LENGTH                                0x1
#define _T3CON_TMR3ON_MASK                                  0x1
#define _T3CON_T3RD16_POSN                                  0x1
#define _T3CON_T3RD16_POSITION                              0x1
#define _T3CON_T3RD16_SIZE                                  0x1
#define _T3CON_T3RD16_LENGTH                                0x1
#define _T3CON_T3RD16_MASK                                  0x2
#define _T3CON_nT3SYNC_POSN                                 0x2
#define _T3CON_nT3SYNC_POSITION                             0x2
#define _T3CON_nT3SYNC_SIZE                                 0x1
#define _T3CON_nT3SYNC_LENGTH                               0x1
#define _T3CON_nT3SYNC_MASK                                 0x4
#define _T3CON_T3CKPS0_POSN                                 0x4
#define _T3CON_T3CKPS0_POSITION                             0x4
#define _T3CON_T3CKPS0_SIZE                                 0x1
#define _T3CON_T3CKPS0_LENGTH                               0x1
#define _T3CON_T3CKPS0_MASK                                 0x10
#define _T3CON_T3CKPS1_POSN                                 0x5
#define _T3CON_T3CKPS1_POSITION                             0x5
#define _T3CON_T3CKPS1_SIZE                                 0x1
#define _T3CON_T3CKPS1_LENGTH                               0x1
#define _T3CON_T3CKPS1_MASK                                 0x20
#define _T3CON_CKPS0_POSN                                   0x4
#define _T3CON_CKPS0_POSITION                               0x4
#define _T3CON_CKPS0_SIZE                                   0x1
#define _T3CON_CKPS0_LENGTH                                 0x1
#define _T3CON_CKPS0_MASK                                   0x10
#define _T3CON_CKPS1_POSN                                   0x5
#define _T3CON_CKPS1_POSITION                               0x5
#define _T3CON_CKPS1_SIZE                                   0x1
#define _T3CON_CKPS1_LENGTH                                 0x1
#define _T3CON_CKPS1_MASK                                   0x20
#define _T3CON_RD163_POSN                                   0x1
#define _T3CON_RD163_POSITION                               0x1
#define _T3CON_RD163_SIZE                                   0x1
#define _T3CON_RD163_LENGTH                                 0x1
#define _T3CON_RD163_MASK                                   0x2

// Register: T3GCON
#define T3GCON T3GCON
extern volatile unsigned char           T3GCON              __at(0xFCA);
#ifndef _LIB_BUILD
asm("T3GCON equ 0FCAh");
#endif
// aliases
extern volatile unsigned char           PR3                 __at(0xFCA);
#ifndef _LIB_BUILD
asm("PR3 equ 0FCAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :3;
        unsigned GGO_NOT_DONE           :1;
    };
    struct {
        unsigned                        :2;
        unsigned GVAL                   :1;
        unsigned GGO_nDONE              :1;
        unsigned GSPM                   :1;
        unsigned GTM                    :1;
        unsigned GPOL                   :1;
        unsigned GE                     :1;
    };
    struct {
        unsigned                        :3;
        unsigned T3GGO_NOT_DONE         :1;
    };
    struct {
        unsigned                        :2;
        unsigned T3GVAL                 :1;
        unsigned T3GGO_nDONE            :1;
        unsigned T3GSPM                 :1;
        unsigned T3GTM                  :1;
        unsigned T3GPOL                 :1;
        unsigned T3GE                   :1;
    };
    struct {
        unsigned                        :3;
        unsigned T3GGO                  :1;
    };
} T3GCONbits_t;
extern volatile T3GCONbits_t T3GCONbits __at(0xFCA);
// bitfield macros
#define _T3GCON_GGO_NOT_DONE_POSN                           0x3
#define _T3GCON_GGO_NOT_DONE_POSITION                       0x3
#define _T3GCON_GGO_NOT_DONE_SIZE                           0x1
#define _T3GCON_GGO_NOT_DONE_LENGTH                         0x1
#define _T3GCON_GGO_NOT_DONE_MASK                           0x8
#define _T3GCON_GVAL_POSN                                   0x2
#define _T3GCON_GVAL_POSITION                               0x2
#define _T3GCON_GVAL_SIZE                                   0x1
#define _T3GCON_GVAL_LENGTH                                 0x1
#define _T3GCON_GVAL_MASK                                   0x4
#define _T3GCON_GGO_nDONE_POSN                              0x3
#define _T3GCON_GGO_nDONE_POSITION                          0x3
#define _T3GCON_GGO_nDONE_SIZE                              0x1
#define _T3GCON_GGO_nDONE_LENGTH                            0x1
#define _T3GCON_GGO_nDONE_MASK                              0x8
#define _T3GCON_GSPM_POSN                                   0x4
#define _T3GCON_GSPM_POSITION                               0x4
#define _T3GCON_GSPM_SIZE                                   0x1
#define _T3GCON_GSPM_LENGTH                                 0x1
#define _T3GCON_GSPM_MASK                                   0x10
#define _T3GCON_GTM_POSN                                    0x5
#define _T3GCON_GTM_POSITION                                0x5
#define _T3GCON_GTM_SIZE                                    0x1
#define _T3GCON_GTM_LENGTH                                  0x1
#define _T3GCON_GTM_MASK                                    0x20
#define _T3GCON_GPOL_POSN                                   0x6
#define _T3GCON_GPOL_POSITION                               0x6
#define _T3GCON_GPOL_SIZE                                   0x1
#define _T3GCON_GPOL_LENGTH                                 0x1
#define _T3GCON_GPOL_MASK                                   0x40
#define _T3GCON_GE_POSN                                     0x7
#define _T3GCON_GE_POSITION                                 0x7
#define _T3GCON_GE_SIZE                                     0x1
#define _T3GCON_GE_LENGTH                                   0x1
#define _T3GCON_GE_MASK                                     0x80
#define _T3GCON_T3GGO_NOT_DONE_POSN                         0x3
#define _T3GCON_T3GGO_NOT_DONE_POSITION                     0x3
#define _T3GCON_T3GGO_NOT_DONE_SIZE                         0x1
#define _T3GCON_T3GGO_NOT_DONE_LENGTH                       0x1
#define _T3GCON_T3GGO_NOT_DONE_MASK                         0x8
#define _T3GCON_T3GVAL_POSN                                 0x2
#define _T3GCON_T3GVAL_POSITION                             0x2
#define _T3GCON_T3GVAL_SIZE                                 0x1
#define _T3GCON_T3GVAL_LENGTH                               0x1
#define _T3GCON_T3GVAL_MASK                                 0x4
#define _T3GCON_T3GGO_nDONE_POSN                            0x3
#define _T3GCON_T3GGO_nDONE_POSITION                        0x3
#define _T3GCON_T3GGO_nDONE_SIZE                            0x1
#define _T3GCON_T3GGO_nDONE_LENGTH                          0x1
#define _T3GCON_T3GGO_nDONE_MASK                            0x8
#define _T3GCON_T3GSPM_POSN                                 0x4
#define _T3GCON_T3GSPM_POSITION                             0x4
#define _T3GCON_T3GSPM_SIZE                                 0x1
#define _T3GCON_T3GSPM_LENGTH                               0x1
#define _T3GCON_T3GSPM_MASK                                 0x10
#define _T3GCON_T3GTM_POSN                                  0x5
#define _T3GCON_T3GTM_POSITION                              0x5
#define _T3GCON_T3GTM_SIZE                                  0x1
#define _T3GCON_T3GTM_LENGTH                                0x1
#define _T3GCON_T3GTM_MASK                                  0x20
#define _T3GCON_T3GPOL_POSN                                 0x6
#define _T3GCON_T3GPOL_POSITION                             0x6
#define _T3GCON_T3GPOL_SIZE                                 0x1
#define _T3GCON_T3GPOL_LENGTH                               0x1
#define _T3GCON_T3GPOL_MASK                                 0x40
#define _T3GCON_T3GE_POSN                                   0x7
#define _T3GCON_T3GE_POSITION                               0x7
#define _T3GCON_T3GE_SIZE                                   0x1
#define _T3GCON_T3GE_LENGTH                                 0x1
#define _T3GCON_T3GE_MASK                                   0x80
#define _T3GCON_T3GGO_POSN                                  0x3
#define _T3GCON_T3GGO_POSITION                              0x3
#define _T3GCON_T3GGO_SIZE                                  0x1
#define _T3GCON_T3GGO_LENGTH                                0x1
#define _T3GCON_T3GGO_MASK                                  0x8
// alias bitfield definitions
typedef union {
    struct {
        unsigned                        :3;
        unsigned GGO_NOT_DONE           :1;
    };
    struct {
        unsigned                        :2;
        unsigned GVAL                   :1;
        unsigned GGO_nDONE              :1;
        unsigned GSPM                   :1;
        unsigned GTM                    :1;
        unsigned GPOL                   :1;
        unsigned GE                     :1;
    };
    struct {
        unsigned                        :3;
        unsigned T3GGO_NOT_DONE         :1;
    };
    struct {
        unsigned                        :2;
        unsigned T3GVAL                 :1;
        unsigned T3GGO_nDONE            :1;
        unsigned T3GSPM                 :1;
        unsigned T3GTM                  :1;
        unsigned T3GPOL                 :1;
        unsigned T3GE                   :1;
    };
    struct {
        unsigned                        :3;
        unsigned T3GGO                  :1;
    };
} PR3bits_t;
extern volatile PR3bits_t PR3bits __at(0xFCA);
// bitfield macros
#define _PR3_GGO_NOT_DONE_POSN                              0x3
#define _PR3_GGO_NOT_DONE_POSITION                          0x3
#define _PR3_GGO_NOT_DONE_SIZE                              0x1
#define _PR3_GGO_NOT_DONE_LENGTH                            0x1
#define _PR3_GGO_NOT_DONE_MASK                              0x8
#define _PR3_GVAL_POSN                                      0x2
#define _PR3_GVAL_POSITION                                  0x2
#define _PR3_GVAL_SIZE                                      0x1
#define _PR3_GVAL_LENGTH                                    0x1
#define _PR3_GVAL_MASK                                      0x4
#define _PR3_GGO_nDONE_POSN                                 0x3
#define _PR3_GGO_nDONE_POSITION                             0x3
#define _PR3_GGO_nDONE_SIZE                                 0x1
#define _PR3_GGO_nDONE_LENGTH                               0x1
#define _PR3_GGO_nDONE_MASK                                 0x8
#define _PR3_GSPM_POSN                                      0x4
#define _PR3_GSPM_POSITION                                  0x4
#define _PR3_GSPM_SIZE                                      0x1
#define _PR3_GSPM_LENGTH                                    0x1
#define _PR3_GSPM_MASK                                      0x10
#define _PR3_GTM_POSN                                       0x5
#define _PR3_GTM_POSITION                                   0x5
#define _PR3_GTM_SIZE                                       0x1
#define _PR3_GTM_LENGTH                                     0x1
#define _PR3_GTM_MASK                                       0x20
#define _PR3_GPOL_POSN                                      0x6
#define _PR3_GPOL_POSITION                                  0x6
#define _PR3_GPOL_SIZE                                      0x1
#define _PR3_GPOL_LENGTH                                    0x1
#define _PR3_GPOL_MASK                                      0x40
#define _PR3_GE_POSN                                        0x7
#define _PR3_GE_POSITION                                    0x7
#define _PR3_GE_SIZE                                        0x1
#define _PR3_GE_LENGTH                                      0x1
#define _PR3_GE_MASK                                        0x80
#define _PR3_T3GGO_NOT_DONE_POSN                            0x3
#define _PR3_T3GGO_NOT_DONE_POSITION                        0x3
#define _PR3_T3GGO_NOT_DONE_SIZE                            0x1
#define _PR3_T3GGO_NOT_DONE_LENGTH                          0x1
#define _PR3_T3GGO_NOT_DONE_MASK                            0x8
#define _PR3_T3GVAL_POSN                                    0x2
#define _PR3_T3GVAL_POSITION                                0x2
#define _PR3_T3GVAL_SIZE                                    0x1
#define _PR3_T3GVAL_LENGTH                                  0x1
#define _PR3_T3GVAL_MASK                                    0x4
#define _PR3_T3GGO_nDONE_POSN                               0x3
#define _PR3_T3GGO_nDONE_POSITION                           0x3
#define _PR3_T3GGO_nDONE_SIZE                               0x1
#define _PR3_T3GGO_nDONE_LENGTH                             0x1
#define _PR3_T3GGO_nDONE_MASK                               0x8
#define _PR3_T3GSPM_POSN                                    0x4
#define _PR3_T3GSPM_POSITION                                0x4
#define _PR3_T3GSPM_SIZE                                    0x1
#define _PR3_T3GSPM_LENGTH                                  0x1
#define _PR3_T3GSPM_MASK                                    0x10
#define _PR3_T3GTM_POSN                                     0x5
#define _PR3_T3GTM_POSITION                                 0x5
#define _PR3_T3GTM_SIZE                                     0x1
#define _PR3_T3GTM_LENGTH                                   0x1
#define _PR3_T3GTM_MASK                                     0x20
#define _PR3_T3GPOL_POSN                                    0x6
#define _PR3_T3GPOL_POSITION                                0x6
#define _PR3_T3GPOL_SIZE                                    0x1
#define _PR3_T3GPOL_LENGTH                                  0x1
#define _PR3_T3GPOL_MASK                                    0x40
#define _PR3_T3GE_POSN                                      0x7
#define _PR3_T3GE_POSITION                                  0x7
#define _PR3_T3GE_SIZE                                      0x1
#define _PR3_T3GE_LENGTH                                    0x1
#define _PR3_T3GE_MASK                                      0x80
#define _PR3_T3GGO_POSN                                     0x3
#define _PR3_T3GGO_POSITION                                 0x3
#define _PR3_T3GGO_SIZE                                     0x1
#define _PR3_T3GGO_LENGTH                                   0x1
#define _PR3_T3GGO_MASK                                     0x8

// Register: T3GATE
#define T3GATE T3GATE
extern volatile unsigned char           T3GATE              __at(0xFCB);
#ifndef _LIB_BUILD
asm("T3GATE equ 0FCBh");
#endif
// aliases
extern volatile unsigned char           TMR3GATE            __at(0xFCB);
#ifndef _LIB_BUILD
asm("TMR3GATE equ 0FCBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned GSS                    :5;
    };
    struct {
        unsigned GSS0                   :1;
        unsigned GSS1                   :1;
        unsigned GSS2                   :1;
        unsigned GSS3                   :1;
    };
    struct {
        unsigned T3GSS0                 :1;
        unsigned T3GSS1                 :1;
        unsigned T3GSS2                 :1;
        unsigned T3GSS3                 :1;
    };
} T3GATEbits_t;
extern volatile T3GATEbits_t T3GATEbits __at(0xFCB);
// bitfield macros
#define _T3GATE_GSS_POSN                                    0x0
#define _T3GATE_GSS_POSITION                                0x0
#define _T3GATE_GSS_SIZE                                    0x5
#define _T3GATE_GSS_LENGTH                                  0x5
#define _T3GATE_GSS_MASK                                    0x1F
#define _T3GATE_GSS0_POSN                                   0x0
#define _T3GATE_GSS0_POSITION                               0x0
#define _T3GATE_GSS0_SIZE                                   0x1
#define _T3GATE_GSS0_LENGTH                                 0x1
#define _T3GATE_GSS0_MASK                                   0x1
#define _T3GATE_GSS1_POSN                                   0x1
#define _T3GATE_GSS1_POSITION                               0x1
#define _T3GATE_GSS1_SIZE                                   0x1
#define _T3GATE_GSS1_LENGTH                                 0x1
#define _T3GATE_GSS1_MASK                                   0x2
#define _T3GATE_GSS2_POSN                                   0x2
#define _T3GATE_GSS2_POSITION                               0x2
#define _T3GATE_GSS2_SIZE                                   0x1
#define _T3GATE_GSS2_LENGTH                                 0x1
#define _T3GATE_GSS2_MASK                                   0x4
#define _T3GATE_GSS3_POSN                                   0x3
#define _T3GATE_GSS3_POSITION                               0x3
#define _T3GATE_GSS3_SIZE                                   0x1
#define _T3GATE_GSS3_LENGTH                                 0x1
#define _T3GATE_GSS3_MASK                                   0x8
#define _T3GATE_T3GSS0_POSN                                 0x0
#define _T3GATE_T3GSS0_POSITION                             0x0
#define _T3GATE_T3GSS0_SIZE                                 0x1
#define _T3GATE_T3GSS0_LENGTH                               0x1
#define _T3GATE_T3GSS0_MASK                                 0x1
#define _T3GATE_T3GSS1_POSN                                 0x1
#define _T3GATE_T3GSS1_POSITION                             0x1
#define _T3GATE_T3GSS1_SIZE                                 0x1
#define _T3GATE_T3GSS1_LENGTH                               0x1
#define _T3GATE_T3GSS1_MASK                                 0x2
#define _T3GATE_T3GSS2_POSN                                 0x2
#define _T3GATE_T3GSS2_POSITION                             0x2
#define _T3GATE_T3GSS2_SIZE                                 0x1
#define _T3GATE_T3GSS2_LENGTH                               0x1
#define _T3GATE_T3GSS2_MASK                                 0x4
#define _T3GATE_T3GSS3_POSN                                 0x3
#define _T3GATE_T3GSS3_POSITION                             0x3
#define _T3GATE_T3GSS3_SIZE                                 0x1
#define _T3GATE_T3GSS3_LENGTH                               0x1
#define _T3GATE_T3GSS3_MASK                                 0x8
// alias bitfield definitions
typedef union {
    struct {
        unsigned GSS                    :5;
    };
    struct {
        unsigned GSS0                   :1;
        unsigned GSS1                   :1;
        unsigned GSS2                   :1;
        unsigned GSS3                   :1;
    };
    struct {
        unsigned T3GSS0                 :1;
        unsigned T3GSS1                 :1;
        unsigned T3GSS2                 :1;
        unsigned T3GSS3                 :1;
    };
} TMR3GATEbits_t;
extern volatile TMR3GATEbits_t TMR3GATEbits __at(0xFCB);
// bitfield macros
#define _TMR3GATE_GSS_POSN                                  0x0
#define _TMR3GATE_GSS_POSITION                              0x0
#define _TMR3GATE_GSS_SIZE                                  0x5
#define _TMR3GATE_GSS_LENGTH                                0x5
#define _TMR3GATE_GSS_MASK                                  0x1F
#define _TMR3GATE_GSS0_POSN                                 0x0
#define _TMR3GATE_GSS0_POSITION                             0x0
#define _TMR3GATE_GSS0_SIZE                                 0x1
#define _TMR3GATE_GSS0_LENGTH                               0x1
#define _TMR3GATE_GSS0_MASK                                 0x1
#define _TMR3GATE_GSS1_POSN                                 0x1
#define _TMR3GATE_GSS1_POSITION                             0x1
#define _TMR3GATE_GSS1_SIZE                                 0x1
#define _TMR3GATE_GSS1_LENGTH                               0x1
#define _TMR3GATE_GSS1_MASK                                 0x2
#define _TMR3GATE_GSS2_POSN                                 0x2
#define _TMR3GATE_GSS2_POSITION                             0x2
#define _TMR3GATE_GSS2_SIZE                                 0x1
#define _TMR3GATE_GSS2_LENGTH                               0x1
#define _TMR3GATE_GSS2_MASK                                 0x4
#define _TMR3GATE_GSS3_POSN                                 0x3
#define _TMR3GATE_GSS3_POSITION                             0x3
#define _TMR3GATE_GSS3_SIZE                                 0x1
#define _TMR3GATE_GSS3_LENGTH                               0x1
#define _TMR3GATE_GSS3_MASK                                 0x8
#define _TMR3GATE_T3GSS0_POSN                               0x0
#define _TMR3GATE_T3GSS0_POSITION                           0x0
#define _TMR3GATE_T3GSS0_SIZE                               0x1
#define _TMR3GATE_T3GSS0_LENGTH                             0x1
#define _TMR3GATE_T3GSS0_MASK                               0x1
#define _TMR3GATE_T3GSS1_POSN                               0x1
#define _TMR3GATE_T3GSS1_POSITION                           0x1
#define _TMR3GATE_T3GSS1_SIZE                               0x1
#define _TMR3GATE_T3GSS1_LENGTH                             0x1
#define _TMR3GATE_T3GSS1_MASK                               0x2
#define _TMR3GATE_T3GSS2_POSN                               0x2
#define _TMR3GATE_T3GSS2_POSITION                           0x2
#define _TMR3GATE_T3GSS2_SIZE                               0x1
#define _TMR3GATE_T3GSS2_LENGTH                             0x1
#define _TMR3GATE_T3GSS2_MASK                               0x4
#define _TMR3GATE_T3GSS3_POSN                               0x3
#define _TMR3GATE_T3GSS3_POSITION                           0x3
#define _TMR3GATE_T3GSS3_SIZE                               0x1
#define _TMR3GATE_T3GSS3_LENGTH                             0x1
#define _TMR3GATE_T3GSS3_MASK                               0x8

// Register: T3CLK
#define T3CLK T3CLK
extern volatile unsigned char           T3CLK               __at(0xFCC);
#ifndef _LIB_BUILD
asm("T3CLK equ 0FCCh");
#endif
// aliases
extern volatile unsigned char           TMR3CLK             __at(0xFCC);
#ifndef _LIB_BUILD
asm("TMR3CLK equ 0FCCh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CS                     :4;
    };
    struct {
        unsigned T3CS0                  :1;
        unsigned T3CS1                  :1;
        unsigned T3CS2                  :1;
        unsigned T3CS3                  :1;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
    };
} T3CLKbits_t;
extern volatile T3CLKbits_t T3CLKbits __at(0xFCC);
// bitfield macros
#define _T3CLK_CS_POSN                                      0x0
#define _T3CLK_CS_POSITION                                  0x0
#define _T3CLK_CS_SIZE                                      0x4
#define _T3CLK_CS_LENGTH                                    0x4
#define _T3CLK_CS_MASK                                      0xF
#define _T3CLK_T3CS0_POSN                                   0x0
#define _T3CLK_T3CS0_POSITION                               0x0
#define _T3CLK_T3CS0_SIZE                                   0x1
#define _T3CLK_T3CS0_LENGTH                                 0x1
#define _T3CLK_T3CS0_MASK                                   0x1
#define _T3CLK_T3CS1_POSN                                   0x1
#define _T3CLK_T3CS1_POSITION                               0x1
#define _T3CLK_T3CS1_SIZE                                   0x1
#define _T3CLK_T3CS1_LENGTH                                 0x1
#define _T3CLK_T3CS1_MASK                                   0x2
#define _T3CLK_T3CS2_POSN                                   0x2
#define _T3CLK_T3CS2_POSITION                               0x2
#define _T3CLK_T3CS2_SIZE                                   0x1
#define _T3CLK_T3CS2_LENGTH                                 0x1
#define _T3CLK_T3CS2_MASK                                   0x4
#define _T3CLK_T3CS3_POSN                                   0x3
#define _T3CLK_T3CS3_POSITION                               0x3
#define _T3CLK_T3CS3_SIZE                                   0x1
#define _T3CLK_T3CS3_LENGTH                                 0x1
#define _T3CLK_T3CS3_MASK                                   0x8
#define _T3CLK_CS0_POSN                                     0x0
#define _T3CLK_CS0_POSITION                                 0x0
#define _T3CLK_CS0_SIZE                                     0x1
#define _T3CLK_CS0_LENGTH                                   0x1
#define _T3CLK_CS0_MASK                                     0x1
#define _T3CLK_CS1_POSN                                     0x1
#define _T3CLK_CS1_POSITION                                 0x1
#define _T3CLK_CS1_SIZE                                     0x1
#define _T3CLK_CS1_LENGTH                                   0x1
#define _T3CLK_CS1_MASK                                     0x2
#define _T3CLK_CS2_POSN                                     0x2
#define _T3CLK_CS2_POSITION                                 0x2
#define _T3CLK_CS2_SIZE                                     0x1
#define _T3CLK_CS2_LENGTH                                   0x1
#define _T3CLK_CS2_MASK                                     0x4
#define _T3CLK_CS3_POSN                                     0x3
#define _T3CLK_CS3_POSITION                                 0x3
#define _T3CLK_CS3_SIZE                                     0x1
#define _T3CLK_CS3_LENGTH                                   0x1
#define _T3CLK_CS3_MASK                                     0x8
// alias bitfield definitions
typedef union {
    struct {
        unsigned CS                     :4;
    };
    struct {
        unsigned T3CS0                  :1;
        unsigned T3CS1                  :1;
        unsigned T3CS2                  :1;
        unsigned T3CS3                  :1;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
    };
} TMR3CLKbits_t;
extern volatile TMR3CLKbits_t TMR3CLKbits __at(0xFCC);
// bitfield macros
#define _TMR3CLK_CS_POSN                                    0x0
#define _TMR3CLK_CS_POSITION                                0x0
#define _TMR3CLK_CS_SIZE                                    0x4
#define _TMR3CLK_CS_LENGTH                                  0x4
#define _TMR3CLK_CS_MASK                                    0xF
#define _TMR3CLK_T3CS0_POSN                                 0x0
#define _TMR3CLK_T3CS0_POSITION                             0x0
#define _TMR3CLK_T3CS0_SIZE                                 0x1
#define _TMR3CLK_T3CS0_LENGTH                               0x1
#define _TMR3CLK_T3CS0_MASK                                 0x1
#define _TMR3CLK_T3CS1_POSN                                 0x1
#define _TMR3CLK_T3CS1_POSITION                             0x1
#define _TMR3CLK_T3CS1_SIZE                                 0x1
#define _TMR3CLK_T3CS1_LENGTH                               0x1
#define _TMR3CLK_T3CS1_MASK                                 0x2
#define _TMR3CLK_T3CS2_POSN                                 0x2
#define _TMR3CLK_T3CS2_POSITION                             0x2
#define _TMR3CLK_T3CS2_SIZE                                 0x1
#define _TMR3CLK_T3CS2_LENGTH                               0x1
#define _TMR3CLK_T3CS2_MASK                                 0x4
#define _TMR3CLK_T3CS3_POSN                                 0x3
#define _TMR3CLK_T3CS3_POSITION                             0x3
#define _TMR3CLK_T3CS3_SIZE                                 0x1
#define _TMR3CLK_T3CS3_LENGTH                               0x1
#define _TMR3CLK_T3CS3_MASK                                 0x8
#define _TMR3CLK_CS0_POSN                                   0x0
#define _TMR3CLK_CS0_POSITION                               0x0
#define _TMR3CLK_CS0_SIZE                                   0x1
#define _TMR3CLK_CS0_LENGTH                                 0x1
#define _TMR3CLK_CS0_MASK                                   0x1
#define _TMR3CLK_CS1_POSN                                   0x1
#define _TMR3CLK_CS1_POSITION                               0x1
#define _TMR3CLK_CS1_SIZE                                   0x1
#define _TMR3CLK_CS1_LENGTH                                 0x1
#define _TMR3CLK_CS1_MASK                                   0x2
#define _TMR3CLK_CS2_POSN                                   0x2
#define _TMR3CLK_CS2_POSITION                               0x2
#define _TMR3CLK_CS2_SIZE                                   0x1
#define _TMR3CLK_CS2_LENGTH                                 0x1
#define _TMR3CLK_CS2_MASK                                   0x4
#define _TMR3CLK_CS3_POSN                                   0x3
#define _TMR3CLK_CS3_POSITION                               0x3
#define _TMR3CLK_CS3_SIZE                                   0x1
#define _TMR3CLK_CS3_LENGTH                                 0x1
#define _TMR3CLK_CS3_MASK                                   0x8

// Register: TMR1
#define TMR1 TMR1
extern volatile unsigned short          TMR1                __at(0xFCD);
#ifndef _LIB_BUILD
asm("TMR1 equ 0FCDh");
#endif

// Register: TMR1L
#define TMR1L TMR1L
extern volatile unsigned char           TMR1L               __at(0xFCD);
#ifndef _LIB_BUILD
asm("TMR1L equ 0FCDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR1L0                 :1;
        unsigned TMR1L1                 :1;
        unsigned TMR1L2                 :1;
        unsigned TMR1L3                 :1;
        unsigned TMR1L4                 :1;
        unsigned TMR1L5                 :1;
        unsigned TMR1L6                 :1;
        unsigned TMR1L7                 :1;
    };
    struct {
        unsigned TMR1L                  :8;
    };
    struct {
        unsigned TMR10                  :1;
        unsigned TMR11                  :1;
        unsigned TMR12                  :1;
        unsigned TMR13                  :1;
        unsigned TMR14                  :1;
        unsigned TMR15                  :1;
        unsigned TMR16                  :1;
        unsigned TMR17                  :1;
    };
    struct {
        unsigned CAL01                  :1;
        unsigned CAL11                  :1;
        unsigned CAL21                  :1;
        unsigned CAL31                  :1;
        unsigned CAL41                  :1;
        unsigned CAL51                  :1;
        unsigned CAL61                  :1;
        unsigned CAL71                  :1;
    };
} TMR1Lbits_t;
extern volatile TMR1Lbits_t TMR1Lbits __at(0xFCD);
// bitfield macros
#define _TMR1L_TMR1L0_POSN                                  0x0
#define _TMR1L_TMR1L0_POSITION                              0x0
#define _TMR1L_TMR1L0_SIZE                                  0x1
#define _TMR1L_TMR1L0_LENGTH                                0x1
#define _TMR1L_TMR1L0_MASK                                  0x1
#define _TMR1L_TMR1L1_POSN                                  0x1
#define _TMR1L_TMR1L1_POSITION                              0x1
#define _TMR1L_TMR1L1_SIZE                                  0x1
#define _TMR1L_TMR1L1_LENGTH                                0x1
#define _TMR1L_TMR1L1_MASK                                  0x2
#define _TMR1L_TMR1L2_POSN                                  0x2
#define _TMR1L_TMR1L2_POSITION                              0x2
#define _TMR1L_TMR1L2_SIZE                                  0x1
#define _TMR1L_TMR1L2_LENGTH                                0x1
#define _TMR1L_TMR1L2_MASK                                  0x4
#define _TMR1L_TMR1L3_POSN                                  0x3
#define _TMR1L_TMR1L3_POSITION                              0x3
#define _TMR1L_TMR1L3_SIZE                                  0x1
#define _TMR1L_TMR1L3_LENGTH                                0x1
#define _TMR1L_TMR1L3_MASK                                  0x8
#define _TMR1L_TMR1L4_POSN                                  0x4
#define _TMR1L_TMR1L4_POSITION                              0x4
#define _TMR1L_TMR1L4_SIZE                                  0x1
#define _TMR1L_TMR1L4_LENGTH                                0x1
#define _TMR1L_TMR1L4_MASK                                  0x10
#define _TMR1L_TMR1L5_POSN                                  0x5
#define _TMR1L_TMR1L5_POSITION                              0x5
#define _TMR1L_TMR1L5_SIZE                                  0x1
#define _TMR1L_TMR1L5_LENGTH                                0x1
#define _TMR1L_TMR1L5_MASK                                  0x20
#define _TMR1L_TMR1L6_POSN                                  0x6
#define _TMR1L_TMR1L6_POSITION                              0x6
#define _TMR1L_TMR1L6_SIZE                                  0x1
#define _TMR1L_TMR1L6_LENGTH                                0x1
#define _TMR1L_TMR1L6_MASK                                  0x40
#define _TMR1L_TMR1L7_POSN                                  0x7
#define _TMR1L_TMR1L7_POSITION                              0x7
#define _TMR1L_TMR1L7_SIZE                                  0x1
#define _TMR1L_TMR1L7_LENGTH                                0x1
#define _TMR1L_TMR1L7_MASK                                  0x80
#define _TMR1L_TMR1L_POSN                                   0x0
#define _TMR1L_TMR1L_POSITION                               0x0
#define _TMR1L_TMR1L_SIZE                                   0x8
#define _TMR1L_TMR1L_LENGTH                                 0x8
#define _TMR1L_TMR1L_MASK                                   0xFF
#define _TMR1L_TMR10_POSN                                   0x0
#define _TMR1L_TMR10_POSITION                               0x0
#define _TMR1L_TMR10_SIZE                                   0x1
#define _TMR1L_TMR10_LENGTH                                 0x1
#define _TMR1L_TMR10_MASK                                   0x1
#define _TMR1L_TMR11_POSN                                   0x1
#define _TMR1L_TMR11_POSITION                               0x1
#define _TMR1L_TMR11_SIZE                                   0x1
#define _TMR1L_TMR11_LENGTH                                 0x1
#define _TMR1L_TMR11_MASK                                   0x2
#define _TMR1L_TMR12_POSN                                   0x2
#define _TMR1L_TMR12_POSITION                               0x2
#define _TMR1L_TMR12_SIZE                                   0x1
#define _TMR1L_TMR12_LENGTH                                 0x1
#define _TMR1L_TMR12_MASK                                   0x4
#define _TMR1L_TMR13_POSN                                   0x3
#define _TMR1L_TMR13_POSITION                               0x3
#define _TMR1L_TMR13_SIZE                                   0x1
#define _TMR1L_TMR13_LENGTH                                 0x1
#define _TMR1L_TMR13_MASK                                   0x8
#define _TMR1L_TMR14_POSN                                   0x4
#define _TMR1L_TMR14_POSITION                               0x4
#define _TMR1L_TMR14_SIZE                                   0x1
#define _TMR1L_TMR14_LENGTH                                 0x1
#define _TMR1L_TMR14_MASK                                   0x10
#define _TMR1L_TMR15_POSN                                   0x5
#define _TMR1L_TMR15_POSITION                               0x5
#define _TMR1L_TMR15_SIZE                                   0x1
#define _TMR1L_TMR15_LENGTH                                 0x1
#define _TMR1L_TMR15_MASK                                   0x20
#define _TMR1L_TMR16_POSN                                   0x6
#define _TMR1L_TMR16_POSITION                               0x6
#define _TMR1L_TMR16_SIZE                                   0x1
#define _TMR1L_TMR16_LENGTH                                 0x1
#define _TMR1L_TMR16_MASK                                   0x40
#define _TMR1L_TMR17_POSN                                   0x7
#define _TMR1L_TMR17_POSITION                               0x7
#define _TMR1L_TMR17_SIZE                                   0x1
#define _TMR1L_TMR17_LENGTH                                 0x1
#define _TMR1L_TMR17_MASK                                   0x80
#define _TMR1L_CAL01_POSN                                   0x0
#define _TMR1L_CAL01_POSITION                               0x0
#define _TMR1L_CAL01_SIZE                                   0x1
#define _TMR1L_CAL01_LENGTH                                 0x1
#define _TMR1L_CAL01_MASK                                   0x1
#define _TMR1L_CAL11_POSN                                   0x1
#define _TMR1L_CAL11_POSITION                               0x1
#define _TMR1L_CAL11_SIZE                                   0x1
#define _TMR1L_CAL11_LENGTH                                 0x1
#define _TMR1L_CAL11_MASK                                   0x2
#define _TMR1L_CAL21_POSN                                   0x2
#define _TMR1L_CAL21_POSITION                               0x2
#define _TMR1L_CAL21_SIZE                                   0x1
#define _TMR1L_CAL21_LENGTH                                 0x1
#define _TMR1L_CAL21_MASK                                   0x4
#define _TMR1L_CAL31_POSN                                   0x3
#define _TMR1L_CAL31_POSITION                               0x3
#define _TMR1L_CAL31_SIZE                                   0x1
#define _TMR1L_CAL31_LENGTH                                 0x1
#define _TMR1L_CAL31_MASK                                   0x8
#define _TMR1L_CAL41_POSN                                   0x4
#define _TMR1L_CAL41_POSITION                               0x4
#define _TMR1L_CAL41_SIZE                                   0x1
#define _TMR1L_CAL41_LENGTH                                 0x1
#define _TMR1L_CAL41_MASK                                   0x10
#define _TMR1L_CAL51_POSN                                   0x5
#define _TMR1L_CAL51_POSITION                               0x5
#define _TMR1L_CAL51_SIZE                                   0x1
#define _TMR1L_CAL51_LENGTH                                 0x1
#define _TMR1L_CAL51_MASK                                   0x20
#define _TMR1L_CAL61_POSN                                   0x6
#define _TMR1L_CAL61_POSITION                               0x6
#define _TMR1L_CAL61_SIZE                                   0x1
#define _TMR1L_CAL61_LENGTH                                 0x1
#define _TMR1L_CAL61_MASK                                   0x40
#define _TMR1L_CAL71_POSN                                   0x7
#define _TMR1L_CAL71_POSITION                               0x7
#define _TMR1L_CAL71_SIZE                                   0x1
#define _TMR1L_CAL71_LENGTH                                 0x1
#define _TMR1L_CAL71_MASK                                   0x80

// Register: TMR1H
#define TMR1H TMR1H
extern volatile unsigned char           TMR1H               __at(0xFCE);
#ifndef _LIB_BUILD
asm("TMR1H equ 0FCEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR1H0                 :1;
        unsigned TMR1H1                 :1;
        unsigned TMR1H2                 :1;
        unsigned TMR1H3                 :1;
        unsigned TMR1H4                 :1;
        unsigned TMR1H5                 :1;
        unsigned TMR1H6                 :1;
        unsigned TMR1H7                 :1;
    };
    struct {
        unsigned TMR1H                  :8;
    };
    struct {
        unsigned TMR18                  :1;
        unsigned TMR19                  :1;
        unsigned TMR110                 :1;
        unsigned TMR111                 :1;
        unsigned TMR112                 :1;
        unsigned TMR113                 :1;
        unsigned TMR114                 :1;
        unsigned TMR115                 :1;
    };
} TMR1Hbits_t;
extern volatile TMR1Hbits_t TMR1Hbits __at(0xFCE);
// bitfield macros
#define _TMR1H_TMR1H0_POSN                                  0x0
#define _TMR1H_TMR1H0_POSITION                              0x0
#define _TMR1H_TMR1H0_SIZE                                  0x1
#define _TMR1H_TMR1H0_LENGTH                                0x1
#define _TMR1H_TMR1H0_MASK                                  0x1
#define _TMR1H_TMR1H1_POSN                                  0x1
#define _TMR1H_TMR1H1_POSITION                              0x1
#define _TMR1H_TMR1H1_SIZE                                  0x1
#define _TMR1H_TMR1H1_LENGTH                                0x1
#define _TMR1H_TMR1H1_MASK                                  0x2
#define _TMR1H_TMR1H2_POSN                                  0x2
#define _TMR1H_TMR1H2_POSITION                              0x2
#define _TMR1H_TMR1H2_SIZE                                  0x1
#define _TMR1H_TMR1H2_LENGTH                                0x1
#define _TMR1H_TMR1H2_MASK                                  0x4
#define _TMR1H_TMR1H3_POSN                                  0x3
#define _TMR1H_TMR1H3_POSITION                              0x3
#define _TMR1H_TMR1H3_SIZE                                  0x1
#define _TMR1H_TMR1H3_LENGTH                                0x1
#define _TMR1H_TMR1H3_MASK                                  0x8
#define _TMR1H_TMR1H4_POSN                                  0x4
#define _TMR1H_TMR1H4_POSITION                              0x4
#define _TMR1H_TMR1H4_SIZE                                  0x1
#define _TMR1H_TMR1H4_LENGTH                                0x1
#define _TMR1H_TMR1H4_MASK                                  0x10
#define _TMR1H_TMR1H5_POSN                                  0x5
#define _TMR1H_TMR1H5_POSITION                              0x5
#define _TMR1H_TMR1H5_SIZE                                  0x1
#define _TMR1H_TMR1H5_LENGTH                                0x1
#define _TMR1H_TMR1H5_MASK                                  0x20
#define _TMR1H_TMR1H6_POSN                                  0x6
#define _TMR1H_TMR1H6_POSITION                              0x6
#define _TMR1H_TMR1H6_SIZE                                  0x1
#define _TMR1H_TMR1H6_LENGTH                                0x1
#define _TMR1H_TMR1H6_MASK                                  0x40
#define _TMR1H_TMR1H7_POSN                                  0x7
#define _TMR1H_TMR1H7_POSITION                              0x7
#define _TMR1H_TMR1H7_SIZE                                  0x1
#define _TMR1H_TMR1H7_LENGTH                                0x1
#define _TMR1H_TMR1H7_MASK                                  0x80
#define _TMR1H_TMR1H_POSN                                   0x0
#define _TMR1H_TMR1H_POSITION                               0x0
#define _TMR1H_TMR1H_SIZE                                   0x8
#define _TMR1H_TMR1H_LENGTH                                 0x8
#define _TMR1H_TMR1H_MASK                                   0xFF
#define _TMR1H_TMR18_POSN                                   0x0
#define _TMR1H_TMR18_POSITION                               0x0
#define _TMR1H_TMR18_SIZE                                   0x1
#define _TMR1H_TMR18_LENGTH                                 0x1
#define _TMR1H_TMR18_MASK                                   0x1
#define _TMR1H_TMR19_POSN                                   0x1
#define _TMR1H_TMR19_POSITION                               0x1
#define _TMR1H_TMR19_SIZE                                   0x1
#define _TMR1H_TMR19_LENGTH                                 0x1
#define _TMR1H_TMR19_MASK                                   0x2
#define _TMR1H_TMR110_POSN                                  0x2
#define _TMR1H_TMR110_POSITION                              0x2
#define _TMR1H_TMR110_SIZE                                  0x1
#define _TMR1H_TMR110_LENGTH                                0x1
#define _TMR1H_TMR110_MASK                                  0x4
#define _TMR1H_TMR111_POSN                                  0x3
#define _TMR1H_TMR111_POSITION                              0x3
#define _TMR1H_TMR111_SIZE                                  0x1
#define _TMR1H_TMR111_LENGTH                                0x1
#define _TMR1H_TMR111_MASK                                  0x8
#define _TMR1H_TMR112_POSN                                  0x4
#define _TMR1H_TMR112_POSITION                              0x4
#define _TMR1H_TMR112_SIZE                                  0x1
#define _TMR1H_TMR112_LENGTH                                0x1
#define _TMR1H_TMR112_MASK                                  0x10
#define _TMR1H_TMR113_POSN                                  0x5
#define _TMR1H_TMR113_POSITION                              0x5
#define _TMR1H_TMR113_SIZE                                  0x1
#define _TMR1H_TMR113_LENGTH                                0x1
#define _TMR1H_TMR113_MASK                                  0x20
#define _TMR1H_TMR114_POSN                                  0x6
#define _TMR1H_TMR114_POSITION                              0x6
#define _TMR1H_TMR114_SIZE                                  0x1
#define _TMR1H_TMR114_LENGTH                                0x1
#define _TMR1H_TMR114_MASK                                  0x40
#define _TMR1H_TMR115_POSN                                  0x7
#define _TMR1H_TMR115_POSITION                              0x7
#define _TMR1H_TMR115_SIZE                                  0x1
#define _TMR1H_TMR115_LENGTH                                0x1
#define _TMR1H_TMR115_MASK                                  0x80

// Register: T1CON
#define T1CON T1CON
extern volatile unsigned char           T1CON               __at(0xFCF);
#ifndef _LIB_BUILD
asm("T1CON equ 0FCFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned NOT_SYNC               :1;
    };
    struct {
        unsigned ON                     :1;
        unsigned RD16                   :1;
        unsigned nSYNC                  :1;
        unsigned                        :1;
        unsigned CKPS                   :2;
    };
    struct {
        unsigned                        :2;
        unsigned NOT_T1SYNC             :1;
    };
    struct {
        unsigned TMR1ON                 :1;
        unsigned T1RD16                 :1;
        unsigned nT1SYNC                :1;
        unsigned                        :1;
        unsigned T1CKPS0                :1;
        unsigned T1CKPS1                :1;
    };
    struct {
        unsigned                        :4;
        unsigned CKPS0                  :1;
        unsigned CKPS1                  :1;
    };
    struct {
        unsigned                        :1;
        unsigned RD161                  :1;
    };
} T1CONbits_t;
extern volatile T1CONbits_t T1CONbits __at(0xFCF);
// bitfield macros
#define _T1CON_NOT_SYNC_POSN                                0x2
#define _T1CON_NOT_SYNC_POSITION                            0x2
#define _T1CON_NOT_SYNC_SIZE                                0x1
#define _T1CON_NOT_SYNC_LENGTH                              0x1
#define _T1CON_NOT_SYNC_MASK                                0x4
#define _T1CON_ON_POSN                                      0x0
#define _T1CON_ON_POSITION                                  0x0
#define _T1CON_ON_SIZE                                      0x1
#define _T1CON_ON_LENGTH                                    0x1
#define _T1CON_ON_MASK                                      0x1
#define _T1CON_RD16_POSN                                    0x1
#define _T1CON_RD16_POSITION                                0x1
#define _T1CON_RD16_SIZE                                    0x1
#define _T1CON_RD16_LENGTH                                  0x1
#define _T1CON_RD16_MASK                                    0x2
#define _T1CON_nSYNC_POSN                                   0x2
#define _T1CON_nSYNC_POSITION                               0x2
#define _T1CON_nSYNC_SIZE                                   0x1
#define _T1CON_nSYNC_LENGTH                                 0x1
#define _T1CON_nSYNC_MASK                                   0x4
#define _T1CON_CKPS_POSN                                    0x4
#define _T1CON_CKPS_POSITION                                0x4
#define _T1CON_CKPS_SIZE                                    0x2
#define _T1CON_CKPS_LENGTH                                  0x2
#define _T1CON_CKPS_MASK                                    0x30
#define _T1CON_NOT_T1SYNC_POSN                              0x2
#define _T1CON_NOT_T1SYNC_POSITION                          0x2
#define _T1CON_NOT_T1SYNC_SIZE                              0x1
#define _T1CON_NOT_T1SYNC_LENGTH                            0x1
#define _T1CON_NOT_T1SYNC_MASK                              0x4
#define _T1CON_TMR1ON_POSN                                  0x0
#define _T1CON_TMR1ON_POSITION                              0x0
#define _T1CON_TMR1ON_SIZE                                  0x1
#define _T1CON_TMR1ON_LENGTH                                0x1
#define _T1CON_TMR1ON_MASK                                  0x1
#define _T1CON_T1RD16_POSN                                  0x1
#define _T1CON_T1RD16_POSITION                              0x1
#define _T1CON_T1RD16_SIZE                                  0x1
#define _T1CON_T1RD16_LENGTH                                0x1
#define _T1CON_T1RD16_MASK                                  0x2
#define _T1CON_nT1SYNC_POSN                                 0x2
#define _T1CON_nT1SYNC_POSITION                             0x2
#define _T1CON_nT1SYNC_SIZE                                 0x1
#define _T1CON_nT1SYNC_LENGTH                               0x1
#define _T1CON_nT1SYNC_MASK                                 0x4
#define _T1CON_T1CKPS0_POSN                                 0x4
#define _T1CON_T1CKPS0_POSITION                             0x4
#define _T1CON_T1CKPS0_SIZE                                 0x1
#define _T1CON_T1CKPS0_LENGTH                               0x1
#define _T1CON_T1CKPS0_MASK                                 0x10
#define _T1CON_T1CKPS1_POSN                                 0x5
#define _T1CON_T1CKPS1_POSITION                             0x5
#define _T1CON_T1CKPS1_SIZE                                 0x1
#define _T1CON_T1CKPS1_LENGTH                               0x1
#define _T1CON_T1CKPS1_MASK                                 0x20
#define _T1CON_CKPS0_POSN                                   0x4
#define _T1CON_CKPS0_POSITION                               0x4
#define _T1CON_CKPS0_SIZE                                   0x1
#define _T1CON_CKPS0_LENGTH                                 0x1
#define _T1CON_CKPS0_MASK                                   0x10
#define _T1CON_CKPS1_POSN                                   0x5
#define _T1CON_CKPS1_POSITION                               0x5
#define _T1CON_CKPS1_SIZE                                   0x1
#define _T1CON_CKPS1_LENGTH                                 0x1
#define _T1CON_CKPS1_MASK                                   0x20
#define _T1CON_RD161_POSN                                   0x1
#define _T1CON_RD161_POSITION                               0x1
#define _T1CON_RD161_SIZE                                   0x1
#define _T1CON_RD161_LENGTH                                 0x1
#define _T1CON_RD161_MASK                                   0x2

// Register: T1GCON
#define T1GCON T1GCON
extern volatile unsigned char           T1GCON              __at(0xFD0);
#ifndef _LIB_BUILD
asm("T1GCON equ 0FD0h");
#endif
// aliases
extern volatile unsigned char           PR1                 __at(0xFD0);
#ifndef _LIB_BUILD
asm("PR1 equ 0FD0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :3;
        unsigned GGO_NOT_DONE           :1;
    };
    struct {
        unsigned                        :2;
        unsigned GVAL                   :1;
        unsigned GGO_nDONE              :1;
        unsigned GSPM                   :1;
        unsigned GTM                    :1;
        unsigned GPOL                   :1;
        unsigned GE                     :1;
    };
    struct {
        unsigned                        :3;
        unsigned T1GGO_NOT_DONE         :1;
    };
    struct {
        unsigned                        :2;
        unsigned T1GVAL                 :1;
        unsigned T1GGO_nDONE            :1;
        unsigned T1GSPM                 :1;
        unsigned T1GTM                  :1;
        unsigned T1GPOL                 :1;
        unsigned T1GE                   :1;
    };
    struct {
        unsigned                        :3;
        unsigned T1GGO                  :1;
    };
} T1GCONbits_t;
extern volatile T1GCONbits_t T1GCONbits __at(0xFD0);
// bitfield macros
#define _T1GCON_GGO_NOT_DONE_POSN                           0x3
#define _T1GCON_GGO_NOT_DONE_POSITION                       0x3
#define _T1GCON_GGO_NOT_DONE_SIZE                           0x1
#define _T1GCON_GGO_NOT_DONE_LENGTH                         0x1
#define _T1GCON_GGO_NOT_DONE_MASK                           0x8
#define _T1GCON_GVAL_POSN                                   0x2
#define _T1GCON_GVAL_POSITION                               0x2
#define _T1GCON_GVAL_SIZE                                   0x1
#define _T1GCON_GVAL_LENGTH                                 0x1
#define _T1GCON_GVAL_MASK                                   0x4
#define _T1GCON_GGO_nDONE_POSN                              0x3
#define _T1GCON_GGO_nDONE_POSITION                          0x3
#define _T1GCON_GGO_nDONE_SIZE                              0x1
#define _T1GCON_GGO_nDONE_LENGTH                            0x1
#define _T1GCON_GGO_nDONE_MASK                              0x8
#define _T1GCON_GSPM_POSN                                   0x4
#define _T1GCON_GSPM_POSITION                               0x4
#define _T1GCON_GSPM_SIZE                                   0x1
#define _T1GCON_GSPM_LENGTH                                 0x1
#define _T1GCON_GSPM_MASK                                   0x10
#define _T1GCON_GTM_POSN                                    0x5
#define _T1GCON_GTM_POSITION                                0x5
#define _T1GCON_GTM_SIZE                                    0x1
#define _T1GCON_GTM_LENGTH                                  0x1
#define _T1GCON_GTM_MASK                                    0x20
#define _T1GCON_GPOL_POSN                                   0x6
#define _T1GCON_GPOL_POSITION                               0x6
#define _T1GCON_GPOL_SIZE                                   0x1
#define _T1GCON_GPOL_LENGTH                                 0x1
#define _T1GCON_GPOL_MASK                                   0x40
#define _T1GCON_GE_POSN                                     0x7
#define _T1GCON_GE_POSITION                                 0x7
#define _T1GCON_GE_SIZE                                     0x1
#define _T1GCON_GE_LENGTH                                   0x1
#define _T1GCON_GE_MASK                                     0x80
#define _T1GCON_T1GGO_NOT_DONE_POSN                         0x3
#define _T1GCON_T1GGO_NOT_DONE_POSITION                     0x3
#define _T1GCON_T1GGO_NOT_DONE_SIZE                         0x1
#define _T1GCON_T1GGO_NOT_DONE_LENGTH                       0x1
#define _T1GCON_T1GGO_NOT_DONE_MASK                         0x8
#define _T1GCON_T1GVAL_POSN                                 0x2
#define _T1GCON_T1GVAL_POSITION                             0x2
#define _T1GCON_T1GVAL_SIZE                                 0x1
#define _T1GCON_T1GVAL_LENGTH                               0x1
#define _T1GCON_T1GVAL_MASK                                 0x4
#define _T1GCON_T1GGO_nDONE_POSN                            0x3
#define _T1GCON_T1GGO_nDONE_POSITION                        0x3
#define _T1GCON_T1GGO_nDONE_SIZE                            0x1
#define _T1GCON_T1GGO_nDONE_LENGTH                          0x1
#define _T1GCON_T1GGO_nDONE_MASK                            0x8
#define _T1GCON_T1GSPM_POSN                                 0x4
#define _T1GCON_T1GSPM_POSITION                             0x4
#define _T1GCON_T1GSPM_SIZE                                 0x1
#define _T1GCON_T1GSPM_LENGTH                               0x1
#define _T1GCON_T1GSPM_MASK                                 0x10
#define _T1GCON_T1GTM_POSN                                  0x5
#define _T1GCON_T1GTM_POSITION                              0x5
#define _T1GCON_T1GTM_SIZE                                  0x1
#define _T1GCON_T1GTM_LENGTH                                0x1
#define _T1GCON_T1GTM_MASK                                  0x20
#define _T1GCON_T1GPOL_POSN                                 0x6
#define _T1GCON_T1GPOL_POSITION                             0x6
#define _T1GCON_T1GPOL_SIZE                                 0x1
#define _T1GCON_T1GPOL_LENGTH                               0x1
#define _T1GCON_T1GPOL_MASK                                 0x40
#define _T1GCON_T1GE_POSN                                   0x7
#define _T1GCON_T1GE_POSITION                               0x7
#define _T1GCON_T1GE_SIZE                                   0x1
#define _T1GCON_T1GE_LENGTH                                 0x1
#define _T1GCON_T1GE_MASK                                   0x80
#define _T1GCON_T1GGO_POSN                                  0x3
#define _T1GCON_T1GGO_POSITION                              0x3
#define _T1GCON_T1GGO_SIZE                                  0x1
#define _T1GCON_T1GGO_LENGTH                                0x1
#define _T1GCON_T1GGO_MASK                                  0x8
// alias bitfield definitions
typedef union {
    struct {
        unsigned                        :3;
        unsigned GGO_NOT_DONE           :1;
    };
    struct {
        unsigned                        :2;
        unsigned GVAL                   :1;
        unsigned GGO_nDONE              :1;
        unsigned GSPM                   :1;
        unsigned GTM                    :1;
        unsigned GPOL                   :1;
        unsigned GE                     :1;
    };
    struct {
        unsigned                        :3;
        unsigned T1GGO_NOT_DONE         :1;
    };
    struct {
        unsigned                        :2;
        unsigned T1GVAL                 :1;
        unsigned T1GGO_nDONE            :1;
        unsigned T1GSPM                 :1;
        unsigned T1GTM                  :1;
        unsigned T1GPOL                 :1;
        unsigned T1GE                   :1;
    };
    struct {
        unsigned                        :3;
        unsigned T1GGO                  :1;
    };
} PR1bits_t;
extern volatile PR1bits_t PR1bits __at(0xFD0);
// bitfield macros
#define _PR1_GGO_NOT_DONE_POSN                              0x3
#define _PR1_GGO_NOT_DONE_POSITION                          0x3
#define _PR1_GGO_NOT_DONE_SIZE                              0x1
#define _PR1_GGO_NOT_DONE_LENGTH                            0x1
#define _PR1_GGO_NOT_DONE_MASK                              0x8
#define _PR1_GVAL_POSN                                      0x2
#define _PR1_GVAL_POSITION                                  0x2
#define _PR1_GVAL_SIZE                                      0x1
#define _PR1_GVAL_LENGTH                                    0x1
#define _PR1_GVAL_MASK                                      0x4
#define _PR1_GGO_nDONE_POSN                                 0x3
#define _PR1_GGO_nDONE_POSITION                             0x3
#define _PR1_GGO_nDONE_SIZE                                 0x1
#define _PR1_GGO_nDONE_LENGTH                               0x1
#define _PR1_GGO_nDONE_MASK                                 0x8
#define _PR1_GSPM_POSN                                      0x4
#define _PR1_GSPM_POSITION                                  0x4
#define _PR1_GSPM_SIZE                                      0x1
#define _PR1_GSPM_LENGTH                                    0x1
#define _PR1_GSPM_MASK                                      0x10
#define _PR1_GTM_POSN                                       0x5
#define _PR1_GTM_POSITION                                   0x5
#define _PR1_GTM_SIZE                                       0x1
#define _PR1_GTM_LENGTH                                     0x1
#define _PR1_GTM_MASK                                       0x20
#define _PR1_GPOL_POSN                                      0x6
#define _PR1_GPOL_POSITION                                  0x6
#define _PR1_GPOL_SIZE                                      0x1
#define _PR1_GPOL_LENGTH                                    0x1
#define _PR1_GPOL_MASK                                      0x40
#define _PR1_GE_POSN                                        0x7
#define _PR1_GE_POSITION                                    0x7
#define _PR1_GE_SIZE                                        0x1
#define _PR1_GE_LENGTH                                      0x1
#define _PR1_GE_MASK                                        0x80
#define _PR1_T1GGO_NOT_DONE_POSN                            0x3
#define _PR1_T1GGO_NOT_DONE_POSITION                        0x3
#define _PR1_T1GGO_NOT_DONE_SIZE                            0x1
#define _PR1_T1GGO_NOT_DONE_LENGTH                          0x1
#define _PR1_T1GGO_NOT_DONE_MASK                            0x8
#define _PR1_T1GVAL_POSN                                    0x2
#define _PR1_T1GVAL_POSITION                                0x2
#define _PR1_T1GVAL_SIZE                                    0x1
#define _PR1_T1GVAL_LENGTH                                  0x1
#define _PR1_T1GVAL_MASK                                    0x4
#define _PR1_T1GGO_nDONE_POSN                               0x3
#define _PR1_T1GGO_nDONE_POSITION                           0x3
#define _PR1_T1GGO_nDONE_SIZE                               0x1
#define _PR1_T1GGO_nDONE_LENGTH                             0x1
#define _PR1_T1GGO_nDONE_MASK                               0x8
#define _PR1_T1GSPM_POSN                                    0x4
#define _PR1_T1GSPM_POSITION                                0x4
#define _PR1_T1GSPM_SIZE                                    0x1
#define _PR1_T1GSPM_LENGTH                                  0x1
#define _PR1_T1GSPM_MASK                                    0x10
#define _PR1_T1GTM_POSN                                     0x5
#define _PR1_T1GTM_POSITION                                 0x5
#define _PR1_T1GTM_SIZE                                     0x1
#define _PR1_T1GTM_LENGTH                                   0x1
#define _PR1_T1GTM_MASK                                     0x20
#define _PR1_T1GPOL_POSN                                    0x6
#define _PR1_T1GPOL_POSITION                                0x6
#define _PR1_T1GPOL_SIZE                                    0x1
#define _PR1_T1GPOL_LENGTH                                  0x1
#define _PR1_T1GPOL_MASK                                    0x40
#define _PR1_T1GE_POSN                                      0x7
#define _PR1_T1GE_POSITION                                  0x7
#define _PR1_T1GE_SIZE                                      0x1
#define _PR1_T1GE_LENGTH                                    0x1
#define _PR1_T1GE_MASK                                      0x80
#define _PR1_T1GGO_POSN                                     0x3
#define _PR1_T1GGO_POSITION                                 0x3
#define _PR1_T1GGO_SIZE                                     0x1
#define _PR1_T1GGO_LENGTH                                   0x1
#define _PR1_T1GGO_MASK                                     0x8

// Register: T1GATE
#define T1GATE T1GATE
extern volatile unsigned char           T1GATE              __at(0xFD1);
#ifndef _LIB_BUILD
asm("T1GATE equ 0FD1h");
#endif
// aliases
extern volatile unsigned char           TMR1GATE            __at(0xFD1);
#ifndef _LIB_BUILD
asm("TMR1GATE equ 0FD1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned GSS                    :5;
    };
    struct {
        unsigned GSS0                   :1;
        unsigned GSS1                   :1;
        unsigned GSS2                   :1;
        unsigned GSS3                   :1;
    };
    struct {
        unsigned T1GSS0                 :1;
        unsigned T1GSS1                 :1;
        unsigned T1GSS2                 :1;
        unsigned T1GSS3                 :1;
    };
} T1GATEbits_t;
extern volatile T1GATEbits_t T1GATEbits __at(0xFD1);
// bitfield macros
#define _T1GATE_GSS_POSN                                    0x0
#define _T1GATE_GSS_POSITION                                0x0
#define _T1GATE_GSS_SIZE                                    0x5
#define _T1GATE_GSS_LENGTH                                  0x5
#define _T1GATE_GSS_MASK                                    0x1F
#define _T1GATE_GSS0_POSN                                   0x0
#define _T1GATE_GSS0_POSITION                               0x0
#define _T1GATE_GSS0_SIZE                                   0x1
#define _T1GATE_GSS0_LENGTH                                 0x1
#define _T1GATE_GSS0_MASK                                   0x1
#define _T1GATE_GSS1_POSN                                   0x1
#define _T1GATE_GSS1_POSITION                               0x1
#define _T1GATE_GSS1_SIZE                                   0x1
#define _T1GATE_GSS1_LENGTH                                 0x1
#define _T1GATE_GSS1_MASK                                   0x2
#define _T1GATE_GSS2_POSN                                   0x2
#define _T1GATE_GSS2_POSITION                               0x2
#define _T1GATE_GSS2_SIZE                                   0x1
#define _T1GATE_GSS2_LENGTH                                 0x1
#define _T1GATE_GSS2_MASK                                   0x4
#define _T1GATE_GSS3_POSN                                   0x3
#define _T1GATE_GSS3_POSITION                               0x3
#define _T1GATE_GSS3_SIZE                                   0x1
#define _T1GATE_GSS3_LENGTH                                 0x1
#define _T1GATE_GSS3_MASK                                   0x8
#define _T1GATE_T1GSS0_POSN                                 0x0
#define _T1GATE_T1GSS0_POSITION                             0x0
#define _T1GATE_T1GSS0_SIZE                                 0x1
#define _T1GATE_T1GSS0_LENGTH                               0x1
#define _T1GATE_T1GSS0_MASK                                 0x1
#define _T1GATE_T1GSS1_POSN                                 0x1
#define _T1GATE_T1GSS1_POSITION                             0x1
#define _T1GATE_T1GSS1_SIZE                                 0x1
#define _T1GATE_T1GSS1_LENGTH                               0x1
#define _T1GATE_T1GSS1_MASK                                 0x2
#define _T1GATE_T1GSS2_POSN                                 0x2
#define _T1GATE_T1GSS2_POSITION                             0x2
#define _T1GATE_T1GSS2_SIZE                                 0x1
#define _T1GATE_T1GSS2_LENGTH                               0x1
#define _T1GATE_T1GSS2_MASK                                 0x4
#define _T1GATE_T1GSS3_POSN                                 0x3
#define _T1GATE_T1GSS3_POSITION                             0x3
#define _T1GATE_T1GSS3_SIZE                                 0x1
#define _T1GATE_T1GSS3_LENGTH                               0x1
#define _T1GATE_T1GSS3_MASK                                 0x8
// alias bitfield definitions
typedef union {
    struct {
        unsigned GSS                    :5;
    };
    struct {
        unsigned GSS0                   :1;
        unsigned GSS1                   :1;
        unsigned GSS2                   :1;
        unsigned GSS3                   :1;
    };
    struct {
        unsigned T1GSS0                 :1;
        unsigned T1GSS1                 :1;
        unsigned T1GSS2                 :1;
        unsigned T1GSS3                 :1;
    };
} TMR1GATEbits_t;
extern volatile TMR1GATEbits_t TMR1GATEbits __at(0xFD1);
// bitfield macros
#define _TMR1GATE_GSS_POSN                                  0x0
#define _TMR1GATE_GSS_POSITION                              0x0
#define _TMR1GATE_GSS_SIZE                                  0x5
#define _TMR1GATE_GSS_LENGTH                                0x5
#define _TMR1GATE_GSS_MASK                                  0x1F
#define _TMR1GATE_GSS0_POSN                                 0x0
#define _TMR1GATE_GSS0_POSITION                             0x0
#define _TMR1GATE_GSS0_SIZE                                 0x1
#define _TMR1GATE_GSS0_LENGTH                               0x1
#define _TMR1GATE_GSS0_MASK                                 0x1
#define _TMR1GATE_GSS1_POSN                                 0x1
#define _TMR1GATE_GSS1_POSITION                             0x1
#define _TMR1GATE_GSS1_SIZE                                 0x1
#define _TMR1GATE_GSS1_LENGTH                               0x1
#define _TMR1GATE_GSS1_MASK                                 0x2
#define _TMR1GATE_GSS2_POSN                                 0x2
#define _TMR1GATE_GSS2_POSITION                             0x2
#define _TMR1GATE_GSS2_SIZE                                 0x1
#define _TMR1GATE_GSS2_LENGTH                               0x1
#define _TMR1GATE_GSS2_MASK                                 0x4
#define _TMR1GATE_GSS3_POSN                                 0x3
#define _TMR1GATE_GSS3_POSITION                             0x3
#define _TMR1GATE_GSS3_SIZE                                 0x1
#define _TMR1GATE_GSS3_LENGTH                               0x1
#define _TMR1GATE_GSS3_MASK                                 0x8
#define _TMR1GATE_T1GSS0_POSN                               0x0
#define _TMR1GATE_T1GSS0_POSITION                           0x0
#define _TMR1GATE_T1GSS0_SIZE                               0x1
#define _TMR1GATE_T1GSS0_LENGTH                             0x1
#define _TMR1GATE_T1GSS0_MASK                               0x1
#define _TMR1GATE_T1GSS1_POSN                               0x1
#define _TMR1GATE_T1GSS1_POSITION                           0x1
#define _TMR1GATE_T1GSS1_SIZE                               0x1
#define _TMR1GATE_T1GSS1_LENGTH                             0x1
#define _TMR1GATE_T1GSS1_MASK                               0x2
#define _TMR1GATE_T1GSS2_POSN                               0x2
#define _TMR1GATE_T1GSS2_POSITION                           0x2
#define _TMR1GATE_T1GSS2_SIZE                               0x1
#define _TMR1GATE_T1GSS2_LENGTH                             0x1
#define _TMR1GATE_T1GSS2_MASK                               0x4
#define _TMR1GATE_T1GSS3_POSN                               0x3
#define _TMR1GATE_T1GSS3_POSITION                           0x3
#define _TMR1GATE_T1GSS3_SIZE                               0x1
#define _TMR1GATE_T1GSS3_LENGTH                             0x1
#define _TMR1GATE_T1GSS3_MASK                               0x8

// Register: T1CLK
#define T1CLK T1CLK
extern volatile unsigned char           T1CLK               __at(0xFD2);
#ifndef _LIB_BUILD
asm("T1CLK equ 0FD2h");
#endif
// aliases
extern volatile unsigned char           TMR1CLK             __at(0xFD2);
#ifndef _LIB_BUILD
asm("TMR1CLK equ 0FD2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CS                     :4;
    };
    struct {
        unsigned T1CS0                  :1;
        unsigned T1CS1                  :1;
        unsigned T1CS2                  :1;
        unsigned T1CS3                  :1;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
    };
} T1CLKbits_t;
extern volatile T1CLKbits_t T1CLKbits __at(0xFD2);
// bitfield macros
#define _T1CLK_CS_POSN                                      0x0
#define _T1CLK_CS_POSITION                                  0x0
#define _T1CLK_CS_SIZE                                      0x4
#define _T1CLK_CS_LENGTH                                    0x4
#define _T1CLK_CS_MASK                                      0xF
#define _T1CLK_T1CS0_POSN                                   0x0
#define _T1CLK_T1CS0_POSITION                               0x0
#define _T1CLK_T1CS0_SIZE                                   0x1
#define _T1CLK_T1CS0_LENGTH                                 0x1
#define _T1CLK_T1CS0_MASK                                   0x1
#define _T1CLK_T1CS1_POSN                                   0x1
#define _T1CLK_T1CS1_POSITION                               0x1
#define _T1CLK_T1CS1_SIZE                                   0x1
#define _T1CLK_T1CS1_LENGTH                                 0x1
#define _T1CLK_T1CS1_MASK                                   0x2
#define _T1CLK_T1CS2_POSN                                   0x2
#define _T1CLK_T1CS2_POSITION                               0x2
#define _T1CLK_T1CS2_SIZE                                   0x1
#define _T1CLK_T1CS2_LENGTH                                 0x1
#define _T1CLK_T1CS2_MASK                                   0x4
#define _T1CLK_T1CS3_POSN                                   0x3
#define _T1CLK_T1CS3_POSITION                               0x3
#define _T1CLK_T1CS3_SIZE                                   0x1
#define _T1CLK_T1CS3_LENGTH                                 0x1
#define _T1CLK_T1CS3_MASK                                   0x8
#define _T1CLK_CS0_POSN                                     0x0
#define _T1CLK_CS0_POSITION                                 0x0
#define _T1CLK_CS0_SIZE                                     0x1
#define _T1CLK_CS0_LENGTH                                   0x1
#define _T1CLK_CS0_MASK                                     0x1
#define _T1CLK_CS1_POSN                                     0x1
#define _T1CLK_CS1_POSITION                                 0x1
#define _T1CLK_CS1_SIZE                                     0x1
#define _T1CLK_CS1_LENGTH                                   0x1
#define _T1CLK_CS1_MASK                                     0x2
#define _T1CLK_CS2_POSN                                     0x2
#define _T1CLK_CS2_POSITION                                 0x2
#define _T1CLK_CS2_SIZE                                     0x1
#define _T1CLK_CS2_LENGTH                                   0x1
#define _T1CLK_CS2_MASK                                     0x4
#define _T1CLK_CS3_POSN                                     0x3
#define _T1CLK_CS3_POSITION                                 0x3
#define _T1CLK_CS3_SIZE                                     0x1
#define _T1CLK_CS3_LENGTH                                   0x1
#define _T1CLK_CS3_MASK                                     0x8
// alias bitfield definitions
typedef union {
    struct {
        unsigned CS                     :4;
    };
    struct {
        unsigned T1CS0                  :1;
        unsigned T1CS1                  :1;
        unsigned T1CS2                  :1;
        unsigned T1CS3                  :1;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
    };
} TMR1CLKbits_t;
extern volatile TMR1CLKbits_t TMR1CLKbits __at(0xFD2);
// bitfield macros
#define _TMR1CLK_CS_POSN                                    0x0
#define _TMR1CLK_CS_POSITION                                0x0
#define _TMR1CLK_CS_SIZE                                    0x4
#define _TMR1CLK_CS_LENGTH                                  0x4
#define _TMR1CLK_CS_MASK                                    0xF
#define _TMR1CLK_T1CS0_POSN                                 0x0
#define _TMR1CLK_T1CS0_POSITION                             0x0
#define _TMR1CLK_T1CS0_SIZE                                 0x1
#define _TMR1CLK_T1CS0_LENGTH                               0x1
#define _TMR1CLK_T1CS0_MASK                                 0x1
#define _TMR1CLK_T1CS1_POSN                                 0x1
#define _TMR1CLK_T1CS1_POSITION                             0x1
#define _TMR1CLK_T1CS1_SIZE                                 0x1
#define _TMR1CLK_T1CS1_LENGTH                               0x1
#define _TMR1CLK_T1CS1_MASK                                 0x2
#define _TMR1CLK_T1CS2_POSN                                 0x2
#define _TMR1CLK_T1CS2_POSITION                             0x2
#define _TMR1CLK_T1CS2_SIZE                                 0x1
#define _TMR1CLK_T1CS2_LENGTH                               0x1
#define _TMR1CLK_T1CS2_MASK                                 0x4
#define _TMR1CLK_T1CS3_POSN                                 0x3
#define _TMR1CLK_T1CS3_POSITION                             0x3
#define _TMR1CLK_T1CS3_SIZE                                 0x1
#define _TMR1CLK_T1CS3_LENGTH                               0x1
#define _TMR1CLK_T1CS3_MASK                                 0x8
#define _TMR1CLK_CS0_POSN                                   0x0
#define _TMR1CLK_CS0_POSITION                               0x0
#define _TMR1CLK_CS0_SIZE                                   0x1
#define _TMR1CLK_CS0_LENGTH                                 0x1
#define _TMR1CLK_CS0_MASK                                   0x1
#define _TMR1CLK_CS1_POSN                                   0x1
#define _TMR1CLK_CS1_POSITION                               0x1
#define _TMR1CLK_CS1_SIZE                                   0x1
#define _TMR1CLK_CS1_LENGTH                                 0x1
#define _TMR1CLK_CS1_MASK                                   0x2
#define _TMR1CLK_CS2_POSN                                   0x2
#define _TMR1CLK_CS2_POSITION                               0x2
#define _TMR1CLK_CS2_SIZE                                   0x1
#define _TMR1CLK_CS2_LENGTH                                 0x1
#define _TMR1CLK_CS2_MASK                                   0x4
#define _TMR1CLK_CS3_POSN                                   0x3
#define _TMR1CLK_CS3_POSITION                               0x3
#define _TMR1CLK_CS3_SIZE                                   0x1
#define _TMR1CLK_CS3_LENGTH                                 0x1
#define _TMR1CLK_CS3_MASK                                   0x8

// Register: TMR0L
#define TMR0L TMR0L
extern volatile unsigned char           TMR0L               __at(0xFD3);
#ifndef _LIB_BUILD
asm("TMR0L equ 0FD3h");
#endif
// aliases
extern volatile unsigned char           TMR0                __at(0xFD3);
#ifndef _LIB_BUILD
asm("TMR0 equ 0FD3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR0L                  :8;
    };
    struct {
        unsigned TMR0L0                 :1;
        unsigned TMR0L1                 :1;
        unsigned TMR0L2                 :1;
        unsigned TMR0L3                 :1;
        unsigned TMR0L4                 :1;
        unsigned TMR0L5                 :1;
        unsigned TMR0L6                 :1;
        unsigned TMR0L7                 :1;
    };
} TMR0Lbits_t;
extern volatile TMR0Lbits_t TMR0Lbits __at(0xFD3);
// bitfield macros
#define _TMR0L_TMR0L_POSN                                   0x0
#define _TMR0L_TMR0L_POSITION                               0x0
#define _TMR0L_TMR0L_SIZE                                   0x8
#define _TMR0L_TMR0L_LENGTH                                 0x8
#define _TMR0L_TMR0L_MASK                                   0xFF
#define _TMR0L_TMR0L0_POSN                                  0x0
#define _TMR0L_TMR0L0_POSITION                              0x0
#define _TMR0L_TMR0L0_SIZE                                  0x1
#define _TMR0L_TMR0L0_LENGTH                                0x1
#define _TMR0L_TMR0L0_MASK                                  0x1
#define _TMR0L_TMR0L1_POSN                                  0x1
#define _TMR0L_TMR0L1_POSITION                              0x1
#define _TMR0L_TMR0L1_SIZE                                  0x1
#define _TMR0L_TMR0L1_LENGTH                                0x1
#define _TMR0L_TMR0L1_MASK                                  0x2
#define _TMR0L_TMR0L2_POSN                                  0x2
#define _TMR0L_TMR0L2_POSITION                              0x2
#define _TMR0L_TMR0L2_SIZE                                  0x1
#define _TMR0L_TMR0L2_LENGTH                                0x1
#define _TMR0L_TMR0L2_MASK                                  0x4
#define _TMR0L_TMR0L3_POSN                                  0x3
#define _TMR0L_TMR0L3_POSITION                              0x3
#define _TMR0L_TMR0L3_SIZE                                  0x1
#define _TMR0L_TMR0L3_LENGTH                                0x1
#define _TMR0L_TMR0L3_MASK                                  0x8
#define _TMR0L_TMR0L4_POSN                                  0x4
#define _TMR0L_TMR0L4_POSITION                              0x4
#define _TMR0L_TMR0L4_SIZE                                  0x1
#define _TMR0L_TMR0L4_LENGTH                                0x1
#define _TMR0L_TMR0L4_MASK                                  0x10
#define _TMR0L_TMR0L5_POSN                                  0x5
#define _TMR0L_TMR0L5_POSITION                              0x5
#define _TMR0L_TMR0L5_SIZE                                  0x1
#define _TMR0L_TMR0L5_LENGTH                                0x1
#define _TMR0L_TMR0L5_MASK                                  0x20
#define _TMR0L_TMR0L6_POSN                                  0x6
#define _TMR0L_TMR0L6_POSITION                              0x6
#define _TMR0L_TMR0L6_SIZE                                  0x1
#define _TMR0L_TMR0L6_LENGTH                                0x1
#define _TMR0L_TMR0L6_MASK                                  0x40
#define _TMR0L_TMR0L7_POSN                                  0x7
#define _TMR0L_TMR0L7_POSITION                              0x7
#define _TMR0L_TMR0L7_SIZE                                  0x1
#define _TMR0L_TMR0L7_LENGTH                                0x1
#define _TMR0L_TMR0L7_MASK                                  0x80
// alias bitfield definitions
typedef union {
    struct {
        unsigned TMR0L                  :8;
    };
    struct {
        unsigned TMR0L0                 :1;
        unsigned TMR0L1                 :1;
        unsigned TMR0L2                 :1;
        unsigned TMR0L3                 :1;
        unsigned TMR0L4                 :1;
        unsigned TMR0L5                 :1;
        unsigned TMR0L6                 :1;
        unsigned TMR0L7                 :1;
    };
} TMR0bits_t;
extern volatile TMR0bits_t TMR0bits __at(0xFD3);
// bitfield macros
#define _TMR0_TMR0L_POSN                                    0x0
#define _TMR0_TMR0L_POSITION                                0x0
#define _TMR0_TMR0L_SIZE                                    0x8
#define _TMR0_TMR0L_LENGTH                                  0x8
#define _TMR0_TMR0L_MASK                                    0xFF
#define _TMR0_TMR0L0_POSN                                   0x0
#define _TMR0_TMR0L0_POSITION                               0x0
#define _TMR0_TMR0L0_SIZE                                   0x1
#define _TMR0_TMR0L0_LENGTH                                 0x1
#define _TMR0_TMR0L0_MASK                                   0x1
#define _TMR0_TMR0L1_POSN                                   0x1
#define _TMR0_TMR0L1_POSITION                               0x1
#define _TMR0_TMR0L1_SIZE                                   0x1
#define _TMR0_TMR0L1_LENGTH                                 0x1
#define _TMR0_TMR0L1_MASK                                   0x2
#define _TMR0_TMR0L2_POSN                                   0x2
#define _TMR0_TMR0L2_POSITION                               0x2
#define _TMR0_TMR0L2_SIZE                                   0x1
#define _TMR0_TMR0L2_LENGTH                                 0x1
#define _TMR0_TMR0L2_MASK                                   0x4
#define _TMR0_TMR0L3_POSN                                   0x3
#define _TMR0_TMR0L3_POSITION                               0x3
#define _TMR0_TMR0L3_SIZE                                   0x1
#define _TMR0_TMR0L3_LENGTH                                 0x1
#define _TMR0_TMR0L3_MASK                                   0x8
#define _TMR0_TMR0L4_POSN                                   0x4
#define _TMR0_TMR0L4_POSITION                               0x4
#define _TMR0_TMR0L4_SIZE                                   0x1
#define _TMR0_TMR0L4_LENGTH                                 0x1
#define _TMR0_TMR0L4_MASK                                   0x10
#define _TMR0_TMR0L5_POSN                                   0x5
#define _TMR0_TMR0L5_POSITION                               0x5
#define _TMR0_TMR0L5_SIZE                                   0x1
#define _TMR0_TMR0L5_LENGTH                                 0x1
#define _TMR0_TMR0L5_MASK                                   0x20
#define _TMR0_TMR0L6_POSN                                   0x6
#define _TMR0_TMR0L6_POSITION                               0x6
#define _TMR0_TMR0L6_SIZE                                   0x1
#define _TMR0_TMR0L6_LENGTH                                 0x1
#define _TMR0_TMR0L6_MASK                                   0x40
#define _TMR0_TMR0L7_POSN                                   0x7
#define _TMR0_TMR0L7_POSITION                               0x7
#define _TMR0_TMR0L7_SIZE                                   0x1
#define _TMR0_TMR0L7_LENGTH                                 0x1
#define _TMR0_TMR0L7_MASK                                   0x80

// Register: TMR0H
#define TMR0H TMR0H
extern volatile unsigned char           TMR0H               __at(0xFD4);
#ifndef _LIB_BUILD
asm("TMR0H equ 0FD4h");
#endif
// aliases
extern volatile unsigned char           PR0                 __at(0xFD4);
#ifndef _LIB_BUILD
asm("PR0 equ 0FD4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR0H                  :8;
    };
    struct {
        unsigned T0PR                   :8;
    };
    struct {
        unsigned TMR0H0                 :1;
        unsigned TMR0H1                 :1;
        unsigned TMR0H2                 :1;
        unsigned TMR0H3                 :1;
        unsigned TMR0H4                 :1;
        unsigned TMR0H5                 :1;
        unsigned TMR0H6                 :1;
        unsigned TMR0H7                 :1;
    };
    struct {
        unsigned T0PR0                  :1;
        unsigned T0PR1                  :1;
        unsigned T0PR2                  :1;
        unsigned T0PR3                  :1;
        unsigned T0PR4                  :1;
        unsigned T0PR5                  :1;
        unsigned T0PR6                  :1;
        unsigned T0PR7                  :1;
    };
} TMR0Hbits_t;
extern volatile TMR0Hbits_t TMR0Hbits __at(0xFD4);
// bitfield macros
#define _TMR0H_TMR0H_POSN                                   0x0
#define _TMR0H_TMR0H_POSITION                               0x0
#define _TMR0H_TMR0H_SIZE                                   0x8
#define _TMR0H_TMR0H_LENGTH                                 0x8
#define _TMR0H_TMR0H_MASK                                   0xFF
#define _TMR0H_T0PR_POSN                                    0x0
#define _TMR0H_T0PR_POSITION                                0x0
#define _TMR0H_T0PR_SIZE                                    0x8
#define _TMR0H_T0PR_LENGTH                                  0x8
#define _TMR0H_T0PR_MASK                                    0xFF
#define _TMR0H_TMR0H0_POSN                                  0x0
#define _TMR0H_TMR0H0_POSITION                              0x0
#define _TMR0H_TMR0H0_SIZE                                  0x1
#define _TMR0H_TMR0H0_LENGTH                                0x1
#define _TMR0H_TMR0H0_MASK                                  0x1
#define _TMR0H_TMR0H1_POSN                                  0x1
#define _TMR0H_TMR0H1_POSITION                              0x1
#define _TMR0H_TMR0H1_SIZE                                  0x1
#define _TMR0H_TMR0H1_LENGTH                                0x1
#define _TMR0H_TMR0H1_MASK                                  0x2
#define _TMR0H_TMR0H2_POSN                                  0x2
#define _TMR0H_TMR0H2_POSITION                              0x2
#define _TMR0H_TMR0H2_SIZE                                  0x1
#define _TMR0H_TMR0H2_LENGTH                                0x1
#define _TMR0H_TMR0H2_MASK                                  0x4
#define _TMR0H_TMR0H3_POSN                                  0x3
#define _TMR0H_TMR0H3_POSITION                              0x3
#define _TMR0H_TMR0H3_SIZE                                  0x1
#define _TMR0H_TMR0H3_LENGTH                                0x1
#define _TMR0H_TMR0H3_MASK                                  0x8
#define _TMR0H_TMR0H4_POSN                                  0x4
#define _TMR0H_TMR0H4_POSITION                              0x4
#define _TMR0H_TMR0H4_SIZE                                  0x1
#define _TMR0H_TMR0H4_LENGTH                                0x1
#define _TMR0H_TMR0H4_MASK                                  0x10
#define _TMR0H_TMR0H5_POSN                                  0x5
#define _TMR0H_TMR0H5_POSITION                              0x5
#define _TMR0H_TMR0H5_SIZE                                  0x1
#define _TMR0H_TMR0H5_LENGTH                                0x1
#define _TMR0H_TMR0H5_MASK                                  0x20
#define _TMR0H_TMR0H6_POSN                                  0x6
#define _TMR0H_TMR0H6_POSITION                              0x6
#define _TMR0H_TMR0H6_SIZE                                  0x1
#define _TMR0H_TMR0H6_LENGTH                                0x1
#define _TMR0H_TMR0H6_MASK                                  0x40
#define _TMR0H_TMR0H7_POSN                                  0x7
#define _TMR0H_TMR0H7_POSITION                              0x7
#define _TMR0H_TMR0H7_SIZE                                  0x1
#define _TMR0H_TMR0H7_LENGTH                                0x1
#define _TMR0H_TMR0H7_MASK                                  0x80
#define _TMR0H_T0PR0_POSN                                   0x0
#define _TMR0H_T0PR0_POSITION                               0x0
#define _TMR0H_T0PR0_SIZE                                   0x1
#define _TMR0H_T0PR0_LENGTH                                 0x1
#define _TMR0H_T0PR0_MASK                                   0x1
#define _TMR0H_T0PR1_POSN                                   0x1
#define _TMR0H_T0PR1_POSITION                               0x1
#define _TMR0H_T0PR1_SIZE                                   0x1
#define _TMR0H_T0PR1_LENGTH                                 0x1
#define _TMR0H_T0PR1_MASK                                   0x2
#define _TMR0H_T0PR2_POSN                                   0x2
#define _TMR0H_T0PR2_POSITION                               0x2
#define _TMR0H_T0PR2_SIZE                                   0x1
#define _TMR0H_T0PR2_LENGTH                                 0x1
#define _TMR0H_T0PR2_MASK                                   0x4
#define _TMR0H_T0PR3_POSN                                   0x3
#define _TMR0H_T0PR3_POSITION                               0x3
#define _TMR0H_T0PR3_SIZE                                   0x1
#define _TMR0H_T0PR3_LENGTH                                 0x1
#define _TMR0H_T0PR3_MASK                                   0x8
#define _TMR0H_T0PR4_POSN                                   0x4
#define _TMR0H_T0PR4_POSITION                               0x4
#define _TMR0H_T0PR4_SIZE                                   0x1
#define _TMR0H_T0PR4_LENGTH                                 0x1
#define _TMR0H_T0PR4_MASK                                   0x10
#define _TMR0H_T0PR5_POSN                                   0x5
#define _TMR0H_T0PR5_POSITION                               0x5
#define _TMR0H_T0PR5_SIZE                                   0x1
#define _TMR0H_T0PR5_LENGTH                                 0x1
#define _TMR0H_T0PR5_MASK                                   0x20
#define _TMR0H_T0PR6_POSN                                   0x6
#define _TMR0H_T0PR6_POSITION                               0x6
#define _TMR0H_T0PR6_SIZE                                   0x1
#define _TMR0H_T0PR6_LENGTH                                 0x1
#define _TMR0H_T0PR6_MASK                                   0x40
#define _TMR0H_T0PR7_POSN                                   0x7
#define _TMR0H_T0PR7_POSITION                               0x7
#define _TMR0H_T0PR7_SIZE                                   0x1
#define _TMR0H_T0PR7_LENGTH                                 0x1
#define _TMR0H_T0PR7_MASK                                   0x80
// alias bitfield definitions
typedef union {
    struct {
        unsigned TMR0H                  :8;
    };
    struct {
        unsigned T0PR                   :8;
    };
    struct {
        unsigned TMR0H0                 :1;
        unsigned TMR0H1                 :1;
        unsigned TMR0H2                 :1;
        unsigned TMR0H3                 :1;
        unsigned TMR0H4                 :1;
        unsigned TMR0H5                 :1;
        unsigned TMR0H6                 :1;
        unsigned TMR0H7                 :1;
    };
    struct {
        unsigned T0PR0                  :1;
        unsigned T0PR1                  :1;
        unsigned T0PR2                  :1;
        unsigned T0PR3                  :1;
        unsigned T0PR4                  :1;
        unsigned T0PR5                  :1;
        unsigned T0PR6                  :1;
        unsigned T0PR7                  :1;
    };
} PR0bits_t;
extern volatile PR0bits_t PR0bits __at(0xFD4);
// bitfield macros
#define _PR0_TMR0H_POSN                                     0x0
#define _PR0_TMR0H_POSITION                                 0x0
#define _PR0_TMR0H_SIZE                                     0x8
#define _PR0_TMR0H_LENGTH                                   0x8
#define _PR0_TMR0H_MASK                                     0xFF
#define _PR0_T0PR_POSN                                      0x0
#define _PR0_T0PR_POSITION                                  0x0
#define _PR0_T0PR_SIZE                                      0x8
#define _PR0_T0PR_LENGTH                                    0x8
#define _PR0_T0PR_MASK                                      0xFF
#define _PR0_TMR0H0_POSN                                    0x0
#define _PR0_TMR0H0_POSITION                                0x0
#define _PR0_TMR0H0_SIZE                                    0x1
#define _PR0_TMR0H0_LENGTH                                  0x1
#define _PR0_TMR0H0_MASK                                    0x1
#define _PR0_TMR0H1_POSN                                    0x1
#define _PR0_TMR0H1_POSITION                                0x1
#define _PR0_TMR0H1_SIZE                                    0x1
#define _PR0_TMR0H1_LENGTH                                  0x1
#define _PR0_TMR0H1_MASK                                    0x2
#define _PR0_TMR0H2_POSN                                    0x2
#define _PR0_TMR0H2_POSITION                                0x2
#define _PR0_TMR0H2_SIZE                                    0x1
#define _PR0_TMR0H2_LENGTH                                  0x1
#define _PR0_TMR0H2_MASK                                    0x4
#define _PR0_TMR0H3_POSN                                    0x3
#define _PR0_TMR0H3_POSITION                                0x3
#define _PR0_TMR0H3_SIZE                                    0x1
#define _PR0_TMR0H3_LENGTH                                  0x1
#define _PR0_TMR0H3_MASK                                    0x8
#define _PR0_TMR0H4_POSN                                    0x4
#define _PR0_TMR0H4_POSITION                                0x4
#define _PR0_TMR0H4_SIZE                                    0x1
#define _PR0_TMR0H4_LENGTH                                  0x1
#define _PR0_TMR0H4_MASK                                    0x10
#define _PR0_TMR0H5_POSN                                    0x5
#define _PR0_TMR0H5_POSITION                                0x5
#define _PR0_TMR0H5_SIZE                                    0x1
#define _PR0_TMR0H5_LENGTH                                  0x1
#define _PR0_TMR0H5_MASK                                    0x20
#define _PR0_TMR0H6_POSN                                    0x6
#define _PR0_TMR0H6_POSITION                                0x6
#define _PR0_TMR0H6_SIZE                                    0x1
#define _PR0_TMR0H6_LENGTH                                  0x1
#define _PR0_TMR0H6_MASK                                    0x40
#define _PR0_TMR0H7_POSN                                    0x7
#define _PR0_TMR0H7_POSITION                                0x7
#define _PR0_TMR0H7_SIZE                                    0x1
#define _PR0_TMR0H7_LENGTH                                  0x1
#define _PR0_TMR0H7_MASK                                    0x80
#define _PR0_T0PR0_POSN                                     0x0
#define _PR0_T0PR0_POSITION                                 0x0
#define _PR0_T0PR0_SIZE                                     0x1
#define _PR0_T0PR0_LENGTH                                   0x1
#define _PR0_T0PR0_MASK                                     0x1
#define _PR0_T0PR1_POSN                                     0x1
#define _PR0_T0PR1_POSITION                                 0x1
#define _PR0_T0PR1_SIZE                                     0x1
#define _PR0_T0PR1_LENGTH                                   0x1
#define _PR0_T0PR1_MASK                                     0x2
#define _PR0_T0PR2_POSN                                     0x2
#define _PR0_T0PR2_POSITION                                 0x2
#define _PR0_T0PR2_SIZE                                     0x1
#define _PR0_T0PR2_LENGTH                                   0x1
#define _PR0_T0PR2_MASK                                     0x4
#define _PR0_T0PR3_POSN                                     0x3
#define _PR0_T0PR3_POSITION                                 0x3
#define _PR0_T0PR3_SIZE                                     0x1
#define _PR0_T0PR3_LENGTH                                   0x1
#define _PR0_T0PR3_MASK                                     0x8
#define _PR0_T0PR4_POSN                                     0x4
#define _PR0_T0PR4_POSITION                                 0x4
#define _PR0_T0PR4_SIZE                                     0x1
#define _PR0_T0PR4_LENGTH                                   0x1
#define _PR0_T0PR4_MASK                                     0x10
#define _PR0_T0PR5_POSN                                     0x5
#define _PR0_T0PR5_POSITION                                 0x5
#define _PR0_T0PR5_SIZE                                     0x1
#define _PR0_T0PR5_LENGTH                                   0x1
#define _PR0_T0PR5_MASK                                     0x20
#define _PR0_T0PR6_POSN                                     0x6
#define _PR0_T0PR6_POSITION                                 0x6
#define _PR0_T0PR6_SIZE                                     0x1
#define _PR0_T0PR6_LENGTH                                   0x1
#define _PR0_T0PR6_MASK                                     0x40
#define _PR0_T0PR7_POSN                                     0x7
#define _PR0_T0PR7_POSITION                                 0x7
#define _PR0_T0PR7_SIZE                                     0x1
#define _PR0_T0PR7_LENGTH                                   0x1
#define _PR0_T0PR7_MASK                                     0x80

// Register: T0CON0
#define T0CON0 T0CON0
extern volatile unsigned char           T0CON0              __at(0xFD5);
#ifndef _LIB_BUILD
asm("T0CON0 equ 0FD5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T0OUTPS                :4;
        unsigned T016BIT                :1;
        unsigned T0OUT                  :1;
        unsigned                        :1;
        unsigned T0EN                   :1;
    };
    struct {
        unsigned T0OUTPS0               :1;
        unsigned T0OUTPS1               :1;
        unsigned T0OUTPS2               :1;
        unsigned T0OUTPS3               :1;
    };
} T0CON0bits_t;
extern volatile T0CON0bits_t T0CON0bits __at(0xFD5);
// bitfield macros
#define _T0CON0_T0OUTPS_POSN                                0x0
#define _T0CON0_T0OUTPS_POSITION                            0x0
#define _T0CON0_T0OUTPS_SIZE                                0x4
#define _T0CON0_T0OUTPS_LENGTH                              0x4
#define _T0CON0_T0OUTPS_MASK                                0xF
#define _T0CON0_T016BIT_POSN                                0x4
#define _T0CON0_T016BIT_POSITION                            0x4
#define _T0CON0_T016BIT_SIZE                                0x1
#define _T0CON0_T016BIT_LENGTH                              0x1
#define _T0CON0_T016BIT_MASK                                0x10
#define _T0CON0_T0OUT_POSN                                  0x5
#define _T0CON0_T0OUT_POSITION                              0x5
#define _T0CON0_T0OUT_SIZE                                  0x1
#define _T0CON0_T0OUT_LENGTH                                0x1
#define _T0CON0_T0OUT_MASK                                  0x20
#define _T0CON0_T0EN_POSN                                   0x7
#define _T0CON0_T0EN_POSITION                               0x7
#define _T0CON0_T0EN_SIZE                                   0x1
#define _T0CON0_T0EN_LENGTH                                 0x1
#define _T0CON0_T0EN_MASK                                   0x80
#define _T0CON0_T0OUTPS0_POSN                               0x0
#define _T0CON0_T0OUTPS0_POSITION                           0x0
#define _T0CON0_T0OUTPS0_SIZE                               0x1
#define _T0CON0_T0OUTPS0_LENGTH                             0x1
#define _T0CON0_T0OUTPS0_MASK                               0x1
#define _T0CON0_T0OUTPS1_POSN                               0x1
#define _T0CON0_T0OUTPS1_POSITION                           0x1
#define _T0CON0_T0OUTPS1_SIZE                               0x1
#define _T0CON0_T0OUTPS1_LENGTH                             0x1
#define _T0CON0_T0OUTPS1_MASK                               0x2
#define _T0CON0_T0OUTPS2_POSN                               0x2
#define _T0CON0_T0OUTPS2_POSITION                           0x2
#define _T0CON0_T0OUTPS2_SIZE                               0x1
#define _T0CON0_T0OUTPS2_LENGTH                             0x1
#define _T0CON0_T0OUTPS2_MASK                               0x4
#define _T0CON0_T0OUTPS3_POSN                               0x3
#define _T0CON0_T0OUTPS3_POSITION                           0x3
#define _T0CON0_T0OUTPS3_SIZE                               0x1
#define _T0CON0_T0OUTPS3_LENGTH                             0x1
#define _T0CON0_T0OUTPS3_MASK                               0x8

// Register: T0CON1
#define T0CON1 T0CON1
extern volatile unsigned char           T0CON1              __at(0xFD6);
#ifndef _LIB_BUILD
asm("T0CON1 equ 0FD6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T0CKPS                 :4;
        unsigned T0ASYNC                :1;
        unsigned T0CS                   :3;
    };
    struct {
        unsigned T0CKPS0                :1;
        unsigned T0CKPS1                :1;
        unsigned T0CKPS2                :1;
        unsigned T0CKPS3                :1;
        unsigned                        :1;
        unsigned T0CS0                  :1;
        unsigned T0CS1                  :1;
        unsigned T0CS2                  :1;
    };
    struct {
        unsigned T0PS0                  :1;
        unsigned T0PS1                  :1;
        unsigned T0PS2                  :1;
        unsigned T0PS3                  :1;
    };
    struct {
        unsigned T0PS                   :4;
    };
} T0CON1bits_t;
extern volatile T0CON1bits_t T0CON1bits __at(0xFD6);
// bitfield macros
#define _T0CON1_T0CKPS_POSN                                 0x0
#define _T0CON1_T0CKPS_POSITION                             0x0
#define _T0CON1_T0CKPS_SIZE                                 0x4
#define _T0CON1_T0CKPS_LENGTH                               0x4
#define _T0CON1_T0CKPS_MASK                                 0xF
#define _T0CON1_T0ASYNC_POSN                                0x4
#define _T0CON1_T0ASYNC_POSITION                            0x4
#define _T0CON1_T0ASYNC_SIZE                                0x1
#define _T0CON1_T0ASYNC_LENGTH                              0x1
#define _T0CON1_T0ASYNC_MASK                                0x10
#define _T0CON1_T0CS_POSN                                   0x5
#define _T0CON1_T0CS_POSITION                               0x5
#define _T0CON1_T0CS_SIZE                                   0x3
#define _T0CON1_T0CS_LENGTH                                 0x3
#define _T0CON1_T0CS_MASK                                   0xE0
#define _T0CON1_T0CKPS0_POSN                                0x0
#define _T0CON1_T0CKPS0_POSITION                            0x0
#define _T0CON1_T0CKPS0_SIZE                                0x1
#define _T0CON1_T0CKPS0_LENGTH                              0x1
#define _T0CON1_T0CKPS0_MASK                                0x1
#define _T0CON1_T0CKPS1_POSN                                0x1
#define _T0CON1_T0CKPS1_POSITION                            0x1
#define _T0CON1_T0CKPS1_SIZE                                0x1
#define _T0CON1_T0CKPS1_LENGTH                              0x1
#define _T0CON1_T0CKPS1_MASK                                0x2
#define _T0CON1_T0CKPS2_POSN                                0x2
#define _T0CON1_T0CKPS2_POSITION                            0x2
#define _T0CON1_T0CKPS2_SIZE                                0x1
#define _T0CON1_T0CKPS2_LENGTH                              0x1
#define _T0CON1_T0CKPS2_MASK                                0x4
#define _T0CON1_T0CKPS3_POSN                                0x3
#define _T0CON1_T0CKPS3_POSITION                            0x3
#define _T0CON1_T0CKPS3_SIZE                                0x1
#define _T0CON1_T0CKPS3_LENGTH                              0x1
#define _T0CON1_T0CKPS3_MASK                                0x8
#define _T0CON1_T0CS0_POSN                                  0x5
#define _T0CON1_T0CS0_POSITION                              0x5
#define _T0CON1_T0CS0_SIZE                                  0x1
#define _T0CON1_T0CS0_LENGTH                                0x1
#define _T0CON1_T0CS0_MASK                                  0x20
#define _T0CON1_T0CS1_POSN                                  0x6
#define _T0CON1_T0CS1_POSITION                              0x6
#define _T0CON1_T0CS1_SIZE                                  0x1
#define _T0CON1_T0CS1_LENGTH                                0x1
#define _T0CON1_T0CS1_MASK                                  0x40
#define _T0CON1_T0CS2_POSN                                  0x7
#define _T0CON1_T0CS2_POSITION                              0x7
#define _T0CON1_T0CS2_SIZE                                  0x1
#define _T0CON1_T0CS2_LENGTH                                0x1
#define _T0CON1_T0CS2_MASK                                  0x80
#define _T0CON1_T0PS0_POSN                                  0x0
#define _T0CON1_T0PS0_POSITION                              0x0
#define _T0CON1_T0PS0_SIZE                                  0x1
#define _T0CON1_T0PS0_LENGTH                                0x1
#define _T0CON1_T0PS0_MASK                                  0x1
#define _T0CON1_T0PS1_POSN                                  0x1
#define _T0CON1_T0PS1_POSITION                              0x1
#define _T0CON1_T0PS1_SIZE                                  0x1
#define _T0CON1_T0PS1_LENGTH                                0x1
#define _T0CON1_T0PS1_MASK                                  0x2
#define _T0CON1_T0PS2_POSN                                  0x2
#define _T0CON1_T0PS2_POSITION                              0x2
#define _T0CON1_T0PS2_SIZE                                  0x1
#define _T0CON1_T0PS2_LENGTH                                0x1
#define _T0CON1_T0PS2_MASK                                  0x4
#define _T0CON1_T0PS3_POSN                                  0x3
#define _T0CON1_T0PS3_POSITION                              0x3
#define _T0CON1_T0PS3_SIZE                                  0x1
#define _T0CON1_T0PS3_LENGTH                                0x1
#define _T0CON1_T0PS3_MASK                                  0x8
#define _T0CON1_T0PS_POSN                                   0x0
#define _T0CON1_T0PS_POSITION                               0x0
#define _T0CON1_T0PS_SIZE                                   0x4
#define _T0CON1_T0PS_LENGTH                                 0x4
#define _T0CON1_T0PS_MASK                                   0xF

// Register: PCON0
#define PCON0 PCON0
extern volatile unsigned char           PCON0               __at(0xFD7);
#ifndef _LIB_BUILD
asm("PCON0 equ 0FD7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NOT_BOR                :1;
    };
    struct {
        unsigned                        :1;
        unsigned NOT_POR                :1;
    };
    struct {
        unsigned                        :2;
        unsigned NOT_RI                 :1;
    };
    struct {
        unsigned                        :3;
        unsigned NOT_RMCLR              :1;
    };
    struct {
        unsigned                        :4;
        unsigned NOT_RWDT               :1;
    };
    struct {
        unsigned                        :5;
        unsigned NOT_WDTWV              :1;
    };
    struct {
        unsigned nBOR                   :1;
        unsigned nPOR                   :1;
        unsigned nRI                    :1;
        unsigned nRMCLR                 :1;
        unsigned nRWDT                  :1;
        unsigned nWDTWV                 :1;
        unsigned STKUNF                 :1;
        unsigned STKOVF                 :1;
    };
    struct {
        unsigned BOR                    :1;
        unsigned POR                    :1;
        unsigned RI                     :1;
        unsigned RMCLR                  :1;
        unsigned RWDT                   :1;
        unsigned WDTWV                  :1;
    };
} PCON0bits_t;
extern volatile PCON0bits_t PCON0bits __at(0xFD7);
// bitfield macros
#define _PCON0_NOT_BOR_POSN                                 0x0
#define _PCON0_NOT_BOR_POSITION                             0x0
#define _PCON0_NOT_BOR_SIZE                                 0x1
#define _PCON0_NOT_BOR_LENGTH                               0x1
#define _PCON0_NOT_BOR_MASK                                 0x1
#define _PCON0_NOT_POR_POSN                                 0x1
#define _PCON0_NOT_POR_POSITION                             0x1
#define _PCON0_NOT_POR_SIZE                                 0x1
#define _PCON0_NOT_POR_LENGTH                               0x1
#define _PCON0_NOT_POR_MASK                                 0x2
#define _PCON0_NOT_RI_POSN                                  0x2
#define _PCON0_NOT_RI_POSITION                              0x2
#define _PCON0_NOT_RI_SIZE                                  0x1
#define _PCON0_NOT_RI_LENGTH                                0x1
#define _PCON0_NOT_RI_MASK                                  0x4
#define _PCON0_NOT_RMCLR_POSN                               0x3
#define _PCON0_NOT_RMCLR_POSITION                           0x3
#define _PCON0_NOT_RMCLR_SIZE                               0x1
#define _PCON0_NOT_RMCLR_LENGTH                             0x1
#define _PCON0_NOT_RMCLR_MASK                               0x8
#define _PCON0_NOT_RWDT_POSN                                0x4
#define _PCON0_NOT_RWDT_POSITION                            0x4
#define _PCON0_NOT_RWDT_SIZE                                0x1
#define _PCON0_NOT_RWDT_LENGTH                              0x1
#define _PCON0_NOT_RWDT_MASK                                0x10
#define _PCON0_NOT_WDTWV_POSN                               0x5
#define _PCON0_NOT_WDTWV_POSITION                           0x5
#define _PCON0_NOT_WDTWV_SIZE                               0x1
#define _PCON0_NOT_WDTWV_LENGTH                             0x1
#define _PCON0_NOT_WDTWV_MASK                               0x20
#define _PCON0_nBOR_POSN                                    0x0
#define _PCON0_nBOR_POSITION                                0x0
#define _PCON0_nBOR_SIZE                                    0x1
#define _PCON0_nBOR_LENGTH                                  0x1
#define _PCON0_nBOR_MASK                                    0x1
#define _PCON0_nPOR_POSN                                    0x1
#define _PCON0_nPOR_POSITION                                0x1
#define _PCON0_nPOR_SIZE                                    0x1
#define _PCON0_nPOR_LENGTH                                  0x1
#define _PCON0_nPOR_MASK                                    0x2
#define _PCON0_nRI_POSN                                     0x2
#define _PCON0_nRI_POSITION                                 0x2
#define _PCON0_nRI_SIZE                                     0x1
#define _PCON0_nRI_LENGTH                                   0x1
#define _PCON0_nRI_MASK                                     0x4
#define _PCON0_nRMCLR_POSN                                  0x3
#define _PCON0_nRMCLR_POSITION                              0x3
#define _PCON0_nRMCLR_SIZE                                  0x1
#define _PCON0_nRMCLR_LENGTH                                0x1
#define _PCON0_nRMCLR_MASK                                  0x8
#define _PCON0_nRWDT_POSN                                   0x4
#define _PCON0_nRWDT_POSITION                               0x4
#define _PCON0_nRWDT_SIZE                                   0x1
#define _PCON0_nRWDT_LENGTH                                 0x1
#define _PCON0_nRWDT_MASK                                   0x10
#define _PCON0_nWDTWV_POSN                                  0x5
#define _PCON0_nWDTWV_POSITION                              0x5
#define _PCON0_nWDTWV_SIZE                                  0x1
#define _PCON0_nWDTWV_LENGTH                                0x1
#define _PCON0_nWDTWV_MASK                                  0x20
#define _PCON0_STKUNF_POSN                                  0x6
#define _PCON0_STKUNF_POSITION                              0x6
#define _PCON0_STKUNF_SIZE                                  0x1
#define _PCON0_STKUNF_LENGTH                                0x1
#define _PCON0_STKUNF_MASK                                  0x40
#define _PCON0_STKOVF_POSN                                  0x7
#define _PCON0_STKOVF_POSITION                              0x7
#define _PCON0_STKOVF_SIZE                                  0x1
#define _PCON0_STKOVF_LENGTH                                0x1
#define _PCON0_STKOVF_MASK                                  0x80
#define _PCON0_BOR_POSN                                     0x0
#define _PCON0_BOR_POSITION                                 0x0
#define _PCON0_BOR_SIZE                                     0x1
#define _PCON0_BOR_LENGTH                                   0x1
#define _PCON0_BOR_MASK                                     0x1
#define _PCON0_POR_POSN                                     0x1
#define _PCON0_POR_POSITION                                 0x1
#define _PCON0_POR_SIZE                                     0x1
#define _PCON0_POR_LENGTH                                   0x1
#define _PCON0_POR_MASK                                     0x2
#define _PCON0_RI_POSN                                      0x2
#define _PCON0_RI_POSITION                                  0x2
#define _PCON0_RI_SIZE                                      0x1
#define _PCON0_RI_LENGTH                                    0x1
#define _PCON0_RI_MASK                                      0x4
#define _PCON0_RMCLR_POSN                                   0x3
#define _PCON0_RMCLR_POSITION                               0x3
#define _PCON0_RMCLR_SIZE                                   0x1
#define _PCON0_RMCLR_LENGTH                                 0x1
#define _PCON0_RMCLR_MASK                                   0x8
#define _PCON0_RWDT_POSN                                    0x4
#define _PCON0_RWDT_POSITION                                0x4
#define _PCON0_RWDT_SIZE                                    0x1
#define _PCON0_RWDT_LENGTH                                  0x1
#define _PCON0_RWDT_MASK                                    0x10
#define _PCON0_WDTWV_POSN                                   0x5
#define _PCON0_WDTWV_POSITION                               0x5
#define _PCON0_WDTWV_SIZE                                   0x1
#define _PCON0_WDTWV_LENGTH                                 0x1
#define _PCON0_WDTWV_MASK                                   0x20

// Register: STATUS
#define STATUS STATUS
extern volatile unsigned char           STATUS              __at(0xFD8);
#ifndef _LIB_BUILD
asm("STATUS equ 0FD8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :5;
        unsigned NOT_PD                 :1;
    };
    struct {
        unsigned                        :6;
        unsigned NOT_TO                 :1;
    };
    struct {
        unsigned C                      :1;
        unsigned DC                     :1;
        unsigned Z                      :1;
        unsigned OV                     :1;
        unsigned N                      :1;
        unsigned nPD                    :1;
        unsigned nTO                    :1;
    };
    struct {
        unsigned                        :5;
        unsigned PD                     :1;
        unsigned TO                     :1;
    };
    struct {
        unsigned CARRY                  :1;
        unsigned                        :1;
        unsigned ZERO                   :1;
        unsigned OVERFLOW               :1;
        unsigned NEGATIVE               :1;
    };
} STATUSbits_t;
extern volatile STATUSbits_t STATUSbits __at(0xFD8);
// bitfield macros
#define _STATUS_NOT_PD_POSN                                 0x5
#define _STATUS_NOT_PD_POSITION                             0x5
#define _STATUS_NOT_PD_SIZE                                 0x1
#define _STATUS_NOT_PD_LENGTH                               0x1
#define _STATUS_NOT_PD_MASK                                 0x20
#define _STATUS_NOT_TO_POSN                                 0x6
#define _STATUS_NOT_TO_POSITION                             0x6
#define _STATUS_NOT_TO_SIZE                                 0x1
#define _STATUS_NOT_TO_LENGTH                               0x1
#define _STATUS_NOT_TO_MASK                                 0x40
#define _STATUS_C_POSN                                      0x0
#define _STATUS_C_POSITION                                  0x0
#define _STATUS_C_SIZE                                      0x1
#define _STATUS_C_LENGTH                                    0x1
#define _STATUS_C_MASK                                      0x1
#define _STATUS_DC_POSN                                     0x1
#define _STATUS_DC_POSITION                                 0x1
#define _STATUS_DC_SIZE                                     0x1
#define _STATUS_DC_LENGTH                                   0x1
#define _STATUS_DC_MASK                                     0x2
#define _STATUS_Z_POSN                                      0x2
#define _STATUS_Z_POSITION                                  0x2
#define _STATUS_Z_SIZE                                      0x1
#define _STATUS_Z_LENGTH                                    0x1
#define _STATUS_Z_MASK                                      0x4
#define _STATUS_OV_POSN                                     0x3
#define _STATUS_OV_POSITION                                 0x3
#define _STATUS_OV_SIZE                                     0x1
#define _STATUS_OV_LENGTH                                   0x1
#define _STATUS_OV_MASK                                     0x8
#define _STATUS_N_POSN                                      0x4
#define _STATUS_N_POSITION                                  0x4
#define _STATUS_N_SIZE                                      0x1
#define _STATUS_N_LENGTH                                    0x1
#define _STATUS_N_MASK                                      0x10
#define _STATUS_nPD_POSN                                    0x5
#define _STATUS_nPD_POSITION                                0x5
#define _STATUS_nPD_SIZE                                    0x1
#define _STATUS_nPD_LENGTH                                  0x1
#define _STATUS_nPD_MASK                                    0x20
#define _STATUS_nTO_POSN                                    0x6
#define _STATUS_nTO_POSITION                                0x6
#define _STATUS_nTO_SIZE                                    0x1
#define _STATUS_nTO_LENGTH                                  0x1
#define _STATUS_nTO_MASK                                    0x40
#define _STATUS_PD_POSN                                     0x5
#define _STATUS_PD_POSITION                                 0x5
#define _STATUS_PD_SIZE                                     0x1
#define _STATUS_PD_LENGTH                                   0x1
#define _STATUS_PD_MASK                                     0x20
#define _STATUS_TO_POSN                                     0x6
#define _STATUS_TO_POSITION                                 0x6
#define _STATUS_TO_SIZE                                     0x1
#define _STATUS_TO_LENGTH                                   0x1
#define _STATUS_TO_MASK                                     0x40
#define _STATUS_CARRY_POSN                                  0x0
#define _STATUS_CARRY_POSITION                              0x0
#define _STATUS_CARRY_SIZE                                  0x1
#define _STATUS_CARRY_LENGTH                                0x1
#define _STATUS_CARRY_MASK                                  0x1
#define _STATUS_ZERO_POSN                                   0x2
#define _STATUS_ZERO_POSITION                               0x2
#define _STATUS_ZERO_SIZE                                   0x1
#define _STATUS_ZERO_LENGTH                                 0x1
#define _STATUS_ZERO_MASK                                   0x4
#define _STATUS_OVERFLOW_POSN                               0x3
#define _STATUS_OVERFLOW_POSITION                           0x3
#define _STATUS_OVERFLOW_SIZE                               0x1
#define _STATUS_OVERFLOW_LENGTH                             0x1
#define _STATUS_OVERFLOW_MASK                               0x8
#define _STATUS_NEGATIVE_POSN                               0x4
#define _STATUS_NEGATIVE_POSITION                           0x4
#define _STATUS_NEGATIVE_SIZE                               0x1
#define _STATUS_NEGATIVE_LENGTH                             0x1
#define _STATUS_NEGATIVE_MASK                               0x10

// Register: FSR2
#define FSR2 FSR2
extern volatile unsigned short          FSR2                __at(0xFD9);
#ifndef _LIB_BUILD
asm("FSR2 equ 0FD9h");
#endif

// Register: FSR2L
#define FSR2L FSR2L
extern volatile unsigned char           FSR2L               __at(0xFD9);
#ifndef _LIB_BUILD
asm("FSR2L equ 0FD9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR2L                  :8;
    };
} FSR2Lbits_t;
extern volatile FSR2Lbits_t FSR2Lbits __at(0xFD9);
// bitfield macros
#define _FSR2L_FSR2L_POSN                                   0x0
#define _FSR2L_FSR2L_POSITION                               0x0
#define _FSR2L_FSR2L_SIZE                                   0x8
#define _FSR2L_FSR2L_LENGTH                                 0x8
#define _FSR2L_FSR2L_MASK                                   0xFF

// Register: FSR2H
#define FSR2H FSR2H
extern volatile unsigned char           FSR2H               __at(0xFDA);
#ifndef _LIB_BUILD
asm("FSR2H equ 0FDAh");
#endif

// Register: PLUSW2
#define PLUSW2 PLUSW2
extern volatile unsigned char           PLUSW2              __at(0xFDB);
#ifndef _LIB_BUILD
asm("PLUSW2 equ 0FDBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PLUSW2                 :8;
    };
} PLUSW2bits_t;
extern volatile PLUSW2bits_t PLUSW2bits __at(0xFDB);
// bitfield macros
#define _PLUSW2_PLUSW2_POSN                                 0x0
#define _PLUSW2_PLUSW2_POSITION                             0x0
#define _PLUSW2_PLUSW2_SIZE                                 0x8
#define _PLUSW2_PLUSW2_LENGTH                               0x8
#define _PLUSW2_PLUSW2_MASK                                 0xFF

// Register: PREINC2
#define PREINC2 PREINC2
extern volatile unsigned char           PREINC2             __at(0xFDC);
#ifndef _LIB_BUILD
asm("PREINC2 equ 0FDCh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PREINC2                :8;
    };
} PREINC2bits_t;
extern volatile PREINC2bits_t PREINC2bits __at(0xFDC);
// bitfield macros
#define _PREINC2_PREINC2_POSN                               0x0
#define _PREINC2_PREINC2_POSITION                           0x0
#define _PREINC2_PREINC2_SIZE                               0x8
#define _PREINC2_PREINC2_LENGTH                             0x8
#define _PREINC2_PREINC2_MASK                               0xFF

// Register: POSTDEC2
#define POSTDEC2 POSTDEC2
extern volatile unsigned char           POSTDEC2            __at(0xFDD);
#ifndef _LIB_BUILD
asm("POSTDEC2 equ 0FDDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned POSTDEC2               :8;
    };
} POSTDEC2bits_t;
extern volatile POSTDEC2bits_t POSTDEC2bits __at(0xFDD);
// bitfield macros
#define _POSTDEC2_POSTDEC2_POSN                             0x0
#define _POSTDEC2_POSTDEC2_POSITION                         0x0
#define _POSTDEC2_POSTDEC2_SIZE                             0x8
#define _POSTDEC2_POSTDEC2_LENGTH                           0x8
#define _POSTDEC2_POSTDEC2_MASK                             0xFF

// Register: POSTINC2
#define POSTINC2 POSTINC2
extern volatile unsigned char           POSTINC2            __at(0xFDE);
#ifndef _LIB_BUILD
asm("POSTINC2 equ 0FDEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned POSTINC2               :8;
    };
} POSTINC2bits_t;
extern volatile POSTINC2bits_t POSTINC2bits __at(0xFDE);
// bitfield macros
#define _POSTINC2_POSTINC2_POSN                             0x0
#define _POSTINC2_POSTINC2_POSITION                         0x0
#define _POSTINC2_POSTINC2_SIZE                             0x8
#define _POSTINC2_POSTINC2_LENGTH                           0x8
#define _POSTINC2_POSTINC2_MASK                             0xFF

// Register: INDF2
#define INDF2 INDF2
extern volatile unsigned char           INDF2               __at(0xFDF);
#ifndef _LIB_BUILD
asm("INDF2 equ 0FDFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INDF2                  :8;
    };
} INDF2bits_t;
extern volatile INDF2bits_t INDF2bits __at(0xFDF);
// bitfield macros
#define _INDF2_INDF2_POSN                                   0x0
#define _INDF2_INDF2_POSITION                               0x0
#define _INDF2_INDF2_SIZE                                   0x8
#define _INDF2_INDF2_LENGTH                                 0x8
#define _INDF2_INDF2_MASK                                   0xFF

// Register: BSR
#define BSR BSR
extern volatile unsigned char           BSR                 __at(0xFE0);
#ifndef _LIB_BUILD
asm("BSR equ 0FE0h");
#endif

// Register: FSR1
#define FSR1 FSR1
extern volatile unsigned short          FSR1                __at(0xFE1);
#ifndef _LIB_BUILD
asm("FSR1 equ 0FE1h");
#endif

// Register: FSR1L
#define FSR1L FSR1L
extern volatile unsigned char           FSR1L               __at(0xFE1);
#ifndef _LIB_BUILD
asm("FSR1L equ 0FE1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR1L                  :8;
    };
} FSR1Lbits_t;
extern volatile FSR1Lbits_t FSR1Lbits __at(0xFE1);
// bitfield macros
#define _FSR1L_FSR1L_POSN                                   0x0
#define _FSR1L_FSR1L_POSITION                               0x0
#define _FSR1L_FSR1L_SIZE                                   0x8
#define _FSR1L_FSR1L_LENGTH                                 0x8
#define _FSR1L_FSR1L_MASK                                   0xFF

// Register: FSR1H
#define FSR1H FSR1H
extern volatile unsigned char           FSR1H               __at(0xFE2);
#ifndef _LIB_BUILD
asm("FSR1H equ 0FE2h");
#endif

// Register: PLUSW1
#define PLUSW1 PLUSW1
extern volatile unsigned char           PLUSW1              __at(0xFE3);
#ifndef _LIB_BUILD
asm("PLUSW1 equ 0FE3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PLUSW1                 :8;
    };
} PLUSW1bits_t;
extern volatile PLUSW1bits_t PLUSW1bits __at(0xFE3);
// bitfield macros
#define _PLUSW1_PLUSW1_POSN                                 0x0
#define _PLUSW1_PLUSW1_POSITION                             0x0
#define _PLUSW1_PLUSW1_SIZE                                 0x8
#define _PLUSW1_PLUSW1_LENGTH                               0x8
#define _PLUSW1_PLUSW1_MASK                                 0xFF

// Register: PREINC1
#define PREINC1 PREINC1
extern volatile unsigned char           PREINC1             __at(0xFE4);
#ifndef _LIB_BUILD
asm("PREINC1 equ 0FE4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PREINC1                :8;
    };
} PREINC1bits_t;
extern volatile PREINC1bits_t PREINC1bits __at(0xFE4);
// bitfield macros
#define _PREINC1_PREINC1_POSN                               0x0
#define _PREINC1_PREINC1_POSITION                           0x0
#define _PREINC1_PREINC1_SIZE                               0x8
#define _PREINC1_PREINC1_LENGTH                             0x8
#define _PREINC1_PREINC1_MASK                               0xFF

// Register: POSTDEC1
#define POSTDEC1 POSTDEC1
extern volatile unsigned char           POSTDEC1            __at(0xFE5);
#ifndef _LIB_BUILD
asm("POSTDEC1 equ 0FE5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned POSTDEC1               :8;
    };
} POSTDEC1bits_t;
extern volatile POSTDEC1bits_t POSTDEC1bits __at(0xFE5);
// bitfield macros
#define _POSTDEC1_POSTDEC1_POSN                             0x0
#define _POSTDEC1_POSTDEC1_POSITION                         0x0
#define _POSTDEC1_POSTDEC1_SIZE                             0x8
#define _POSTDEC1_POSTDEC1_LENGTH                           0x8
#define _POSTDEC1_POSTDEC1_MASK                             0xFF

// Register: POSTINC1
#define POSTINC1 POSTINC1
extern volatile unsigned char           POSTINC1            __at(0xFE6);
#ifndef _LIB_BUILD
asm("POSTINC1 equ 0FE6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned POSTINC1               :8;
    };
} POSTINC1bits_t;
extern volatile POSTINC1bits_t POSTINC1bits __at(0xFE6);
// bitfield macros
#define _POSTINC1_POSTINC1_POSN                             0x0
#define _POSTINC1_POSTINC1_POSITION                         0x0
#define _POSTINC1_POSTINC1_SIZE                             0x8
#define _POSTINC1_POSTINC1_LENGTH                           0x8
#define _POSTINC1_POSTINC1_MASK                             0xFF

// Register: INDF1
#define INDF1 INDF1
extern volatile unsigned char           INDF1               __at(0xFE7);
#ifndef _LIB_BUILD
asm("INDF1 equ 0FE7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INDF1                  :8;
    };
} INDF1bits_t;
extern volatile INDF1bits_t INDF1bits __at(0xFE7);
// bitfield macros
#define _INDF1_INDF1_POSN                                   0x0
#define _INDF1_INDF1_POSITION                               0x0
#define _INDF1_INDF1_SIZE                                   0x8
#define _INDF1_INDF1_LENGTH                                 0x8
#define _INDF1_INDF1_MASK                                   0xFF

// Register: WREG
#define WREG WREG
extern volatile unsigned char           WREG                __at(0xFE8);
#ifndef _LIB_BUILD
asm("WREG equ 0FE8h");
#endif
// aliases
// extern volatile unsigned char           W                   __at(0xFE8);
#ifndef _LIB_BUILD
// asm("W equ 0FE8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WREG                   :8;
    };
} WREGbits_t;
extern volatile WREGbits_t WREGbits __at(0xFE8);
// bitfield macros
#define _WREG_WREG_POSN                                     0x0
#define _WREG_WREG_POSITION                                 0x0
#define _WREG_WREG_SIZE                                     0x8
#define _WREG_WREG_LENGTH                                   0x8
#define _WREG_WREG_MASK                                     0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned WREG                   :8;
    };
} Wbits_t;
extern volatile Wbits_t Wbits __at(0xFE8);
// bitfield macros
#define _W_WREG_POSN                                        0x0
#define _W_WREG_POSITION                                    0x0
#define _W_WREG_SIZE                                        0x8
#define _W_WREG_LENGTH                                      0x8
#define _W_WREG_MASK                                        0xFF

// Register: FSR0
#define FSR0 FSR0
extern volatile unsigned short          FSR0                __at(0xFE9);
#ifndef _LIB_BUILD
asm("FSR0 equ 0FE9h");
#endif

// Register: FSR0L
#define FSR0L FSR0L
extern volatile unsigned char           FSR0L               __at(0xFE9);
#ifndef _LIB_BUILD
asm("FSR0L equ 0FE9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR0L                  :8;
    };
} FSR0Lbits_t;
extern volatile FSR0Lbits_t FSR0Lbits __at(0xFE9);
// bitfield macros
#define _FSR0L_FSR0L_POSN                                   0x0
#define _FSR0L_FSR0L_POSITION                               0x0
#define _FSR0L_FSR0L_SIZE                                   0x8
#define _FSR0L_FSR0L_LENGTH                                 0x8
#define _FSR0L_FSR0L_MASK                                   0xFF

// Register: FSR0H
#define FSR0H FSR0H
extern volatile unsigned char           FSR0H               __at(0xFEA);
#ifndef _LIB_BUILD
asm("FSR0H equ 0FEAh");
#endif

// Register: PLUSW0
#define PLUSW0 PLUSW0
extern volatile unsigned char           PLUSW0              __at(0xFEB);
#ifndef _LIB_BUILD
asm("PLUSW0 equ 0FEBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PLUSW0                 :8;
    };
} PLUSW0bits_t;
extern volatile PLUSW0bits_t PLUSW0bits __at(0xFEB);
// bitfield macros
#define _PLUSW0_PLUSW0_POSN                                 0x0
#define _PLUSW0_PLUSW0_POSITION                             0x0
#define _PLUSW0_PLUSW0_SIZE                                 0x8
#define _PLUSW0_PLUSW0_LENGTH                               0x8
#define _PLUSW0_PLUSW0_MASK                                 0xFF

// Register: PREINC0
#define PREINC0 PREINC0
extern volatile unsigned char           PREINC0             __at(0xFEC);
#ifndef _LIB_BUILD
asm("PREINC0 equ 0FECh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PREINC0                :8;
    };
} PREINC0bits_t;
extern volatile PREINC0bits_t PREINC0bits __at(0xFEC);
// bitfield macros
#define _PREINC0_PREINC0_POSN                               0x0
#define _PREINC0_PREINC0_POSITION                           0x0
#define _PREINC0_PREINC0_SIZE                               0x8
#define _PREINC0_PREINC0_LENGTH                             0x8
#define _PREINC0_PREINC0_MASK                               0xFF

// Register: POSTDEC0
#define POSTDEC0 POSTDEC0
extern volatile unsigned char           POSTDEC0            __at(0xFED);
#ifndef _LIB_BUILD
asm("POSTDEC0 equ 0FEDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned POSTDEC0               :8;
    };
} POSTDEC0bits_t;
extern volatile POSTDEC0bits_t POSTDEC0bits __at(0xFED);
// bitfield macros
#define _POSTDEC0_POSTDEC0_POSN                             0x0
#define _POSTDEC0_POSTDEC0_POSITION                         0x0
#define _POSTDEC0_POSTDEC0_SIZE                             0x8
#define _POSTDEC0_POSTDEC0_LENGTH                           0x8
#define _POSTDEC0_POSTDEC0_MASK                             0xFF

// Register: POSTINC0
#define POSTINC0 POSTINC0
extern volatile unsigned char           POSTINC0            __at(0xFEE);
#ifndef _LIB_BUILD
asm("POSTINC0 equ 0FEEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned POSTINC0               :8;
    };
} POSTINC0bits_t;
extern volatile POSTINC0bits_t POSTINC0bits __at(0xFEE);
// bitfield macros
#define _POSTINC0_POSTINC0_POSN                             0x0
#define _POSTINC0_POSTINC0_POSITION                         0x0
#define _POSTINC0_POSTINC0_SIZE                             0x8
#define _POSTINC0_POSTINC0_LENGTH                           0x8
#define _POSTINC0_POSTINC0_MASK                             0xFF

// Register: INDF0
#define INDF0 INDF0
extern volatile unsigned char           INDF0               __at(0xFEF);
#ifndef _LIB_BUILD
asm("INDF0 equ 0FEFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INDF0                  :8;
    };
} INDF0bits_t;
extern volatile INDF0bits_t INDF0bits __at(0xFEF);
// bitfield macros
#define _INDF0_INDF0_POSN                                   0x0
#define _INDF0_INDF0_POSITION                               0x0
#define _INDF0_INDF0_SIZE                                   0x8
#define _INDF0_INDF0_LENGTH                                 0x8
#define _INDF0_INDF0_MASK                                   0xFF

// Register: INTCON
#define INTCON INTCON
extern volatile unsigned char           INTCON              __at(0xFF2);
#ifndef _LIB_BUILD
asm("INTCON equ 0FF2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INT0EDG                :1;
        unsigned INT1EDG                :1;
        unsigned INT2EDG                :1;
        unsigned                        :2;
        unsigned IPEN                   :1;
        unsigned PEIE_GIEL              :1;
        unsigned GIE_GIEH               :1;
    };
    struct {
        unsigned                        :6;
        unsigned PEIE                   :1;
        unsigned GIE                    :1;
    };
    struct {
        unsigned                        :6;
        unsigned GIEL                   :1;
        unsigned GIEH                   :1;
    };
} INTCONbits_t;
extern volatile INTCONbits_t INTCONbits __at(0xFF2);
// bitfield macros
#define _INTCON_INT0EDG_POSN                                0x0
#define _INTCON_INT0EDG_POSITION                            0x0
#define _INTCON_INT0EDG_SIZE                                0x1
#define _INTCON_INT0EDG_LENGTH                              0x1
#define _INTCON_INT0EDG_MASK                                0x1
#define _INTCON_INT1EDG_POSN                                0x1
#define _INTCON_INT1EDG_POSITION                            0x1
#define _INTCON_INT1EDG_SIZE                                0x1
#define _INTCON_INT1EDG_LENGTH                              0x1
#define _INTCON_INT1EDG_MASK                                0x2
#define _INTCON_INT2EDG_POSN                                0x2
#define _INTCON_INT2EDG_POSITION                            0x2
#define _INTCON_INT2EDG_SIZE                                0x1
#define _INTCON_INT2EDG_LENGTH                              0x1
#define _INTCON_INT2EDG_MASK                                0x4
#define _INTCON_IPEN_POSN                                   0x5
#define _INTCON_IPEN_POSITION                               0x5
#define _INTCON_IPEN_SIZE                                   0x1
#define _INTCON_IPEN_LENGTH                                 0x1
#define _INTCON_IPEN_MASK                                   0x20
#define _INTCON_PEIE_GIEL_POSN                              0x6
#define _INTCON_PEIE_GIEL_POSITION                          0x6
#define _INTCON_PEIE_GIEL_SIZE                              0x1
#define _INTCON_PEIE_GIEL_LENGTH                            0x1
#define _INTCON_PEIE_GIEL_MASK                              0x40
#define _INTCON_GIE_GIEH_POSN                               0x7
#define _INTCON_GIE_GIEH_POSITION                           0x7
#define _INTCON_GIE_GIEH_SIZE                               0x1
#define _INTCON_GIE_GIEH_LENGTH                             0x1
#define _INTCON_GIE_GIEH_MASK                               0x80
#define _INTCON_PEIE_POSN                                   0x6
#define _INTCON_PEIE_POSITION                               0x6
#define _INTCON_PEIE_SIZE                                   0x1
#define _INTCON_PEIE_LENGTH                                 0x1
#define _INTCON_PEIE_MASK                                   0x40
#define _INTCON_GIE_POSN                                    0x7
#define _INTCON_GIE_POSITION                                0x7
#define _INTCON_GIE_SIZE                                    0x1
#define _INTCON_GIE_LENGTH                                  0x1
#define _INTCON_GIE_MASK                                    0x80
#define _INTCON_GIEL_POSN                                   0x6
#define _INTCON_GIEL_POSITION                               0x6
#define _INTCON_GIEL_SIZE                                   0x1
#define _INTCON_GIEL_LENGTH                                 0x1
#define _INTCON_GIEL_MASK                                   0x40
#define _INTCON_GIEH_POSN                                   0x7
#define _INTCON_GIEH_POSITION                               0x7
#define _INTCON_GIEH_SIZE                                   0x1
#define _INTCON_GIEH_LENGTH                                 0x1
#define _INTCON_GIEH_MASK                                   0x80

// Register: PROD
#define PROD PROD
extern volatile unsigned short          PROD                __at(0xFF3);
#ifndef _LIB_BUILD
asm("PROD equ 0FF3h");
#endif

// Register: PRODL
#define PRODL PRODL
extern volatile unsigned char           PRODL               __at(0xFF3);
#ifndef _LIB_BUILD
asm("PRODL equ 0FF3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PRODL                  :8;
    };
} PRODLbits_t;
extern volatile PRODLbits_t PRODLbits __at(0xFF3);
// bitfield macros
#define _PRODL_PRODL_POSN                                   0x0
#define _PRODL_PRODL_POSITION                               0x0
#define _PRODL_PRODL_SIZE                                   0x8
#define _PRODL_PRODL_LENGTH                                 0x8
#define _PRODL_PRODL_MASK                                   0xFF

// Register: PRODH
#define PRODH PRODH
extern volatile unsigned char           PRODH               __at(0xFF4);
#ifndef _LIB_BUILD
asm("PRODH equ 0FF4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PRODH                  :8;
    };
} PRODHbits_t;
extern volatile PRODHbits_t PRODHbits __at(0xFF4);
// bitfield macros
#define _PRODH_PRODH_POSN                                   0x0
#define _PRODH_PRODH_POSITION                               0x0
#define _PRODH_PRODH_SIZE                                   0x8
#define _PRODH_PRODH_LENGTH                                 0x8
#define _PRODH_PRODH_MASK                                   0xFF

// Register: TABLAT
#define TABLAT TABLAT
extern volatile unsigned char           TABLAT              __at(0xFF5);
#ifndef _LIB_BUILD
asm("TABLAT equ 0FF5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TABLAT                 :8;
    };
} TABLATbits_t;
extern volatile TABLATbits_t TABLATbits __at(0xFF5);
// bitfield macros
#define _TABLAT_TABLAT_POSN                                 0x0
#define _TABLAT_TABLAT_POSITION                             0x0
#define _TABLAT_TABLAT_SIZE                                 0x8
#define _TABLAT_TABLAT_LENGTH                               0x8
#define _TABLAT_TABLAT_MASK                                 0xFF

// Register: TBLPTR
#define TBLPTR TBLPTR
#ifndef __CCI__
extern volatile __uint24                TBLPTR              __at(0xFF6);
#endif
#ifndef _LIB_BUILD
asm("TBLPTR equ 0FF6h");
#endif

// Register: TBLPTRL
#define TBLPTRL TBLPTRL
extern volatile unsigned char           TBLPTRL             __at(0xFF6);
#ifndef _LIB_BUILD
asm("TBLPTRL equ 0FF6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TBLPTRL                :8;
    };
} TBLPTRLbits_t;
extern volatile TBLPTRLbits_t TBLPTRLbits __at(0xFF6);
// bitfield macros
#define _TBLPTRL_TBLPTRL_POSN                               0x0
#define _TBLPTRL_TBLPTRL_POSITION                           0x0
#define _TBLPTRL_TBLPTRL_SIZE                               0x8
#define _TBLPTRL_TBLPTRL_LENGTH                             0x8
#define _TBLPTRL_TBLPTRL_MASK                               0xFF

// Register: TBLPTRH
#define TBLPTRH TBLPTRH
extern volatile unsigned char           TBLPTRH             __at(0xFF7);
#ifndef _LIB_BUILD
asm("TBLPTRH equ 0FF7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TBLPTRH                :8;
    };
} TBLPTRHbits_t;
extern volatile TBLPTRHbits_t TBLPTRHbits __at(0xFF7);
// bitfield macros
#define _TBLPTRH_TBLPTRH_POSN                               0x0
#define _TBLPTRH_TBLPTRH_POSITION                           0x0
#define _TBLPTRH_TBLPTRH_SIZE                               0x8
#define _TBLPTRH_TBLPTRH_LENGTH                             0x8
#define _TBLPTRH_TBLPTRH_MASK                               0xFF

// Register: TBLPTRU
#define TBLPTRU TBLPTRU
extern volatile unsigned char           TBLPTRU             __at(0xFF8);
#ifndef _LIB_BUILD
asm("TBLPTRU equ 0FF8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TBLPTRU                :6;
    };
    struct {
        unsigned                        :5;
        unsigned ACSS                   :1;
    };
} TBLPTRUbits_t;
extern volatile TBLPTRUbits_t TBLPTRUbits __at(0xFF8);
// bitfield macros
#define _TBLPTRU_TBLPTRU_POSN                               0x0
#define _TBLPTRU_TBLPTRU_POSITION                           0x0
#define _TBLPTRU_TBLPTRU_SIZE                               0x6
#define _TBLPTRU_TBLPTRU_LENGTH                             0x6
#define _TBLPTRU_TBLPTRU_MASK                               0x3F
#define _TBLPTRU_ACSS_POSN                                  0x5
#define _TBLPTRU_ACSS_POSITION                              0x5
#define _TBLPTRU_ACSS_SIZE                                  0x1
#define _TBLPTRU_ACSS_LENGTH                                0x1
#define _TBLPTRU_ACSS_MASK                                  0x20

// Register: PCLAT
#define PCLAT PCLAT
#ifndef __CCI__
extern volatile __uint24                PCLAT               __at(0xFF9);
#endif
#ifndef _LIB_BUILD
asm("PCLAT equ 0FF9h");
#endif
// aliases
#ifndef __CCI__
extern volatile __uint24                PC                  __at(0xFF9);
#endif
#ifndef _LIB_BUILD
asm("PC equ 0FF9h");
#endif

// Register: PCL
#define PCL PCL
extern volatile unsigned char           PCL                 __at(0xFF9);
#ifndef _LIB_BUILD
asm("PCL equ 0FF9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PCL                    :8;
    };
} PCLbits_t;
extern volatile PCLbits_t PCLbits __at(0xFF9);
// bitfield macros
#define _PCL_PCL_POSN                                       0x0
#define _PCL_PCL_POSITION                                   0x0
#define _PCL_PCL_SIZE                                       0x8
#define _PCL_PCL_LENGTH                                     0x8
#define _PCL_PCL_MASK                                       0xFF

// Register: PCLATH
#define PCLATH PCLATH
extern volatile unsigned char           PCLATH              __at(0xFFA);
#ifndef _LIB_BUILD
asm("PCLATH equ 0FFAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PCH                    :8;
    };
} PCLATHbits_t;
extern volatile PCLATHbits_t PCLATHbits __at(0xFFA);
// bitfield macros
#define _PCLATH_PCH_POSN                                    0x0
#define _PCLATH_PCH_POSITION                                0x0
#define _PCLATH_PCH_SIZE                                    0x8
#define _PCLATH_PCH_LENGTH                                  0x8
#define _PCLATH_PCH_MASK                                    0xFF

// Register: PCLATU
#define PCLATU PCLATU
extern volatile unsigned char           PCLATU              __at(0xFFB);
#ifndef _LIB_BUILD
asm("PCLATU equ 0FFBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PCU                    :5;
    };
} PCLATUbits_t;
extern volatile PCLATUbits_t PCLATUbits __at(0xFFB);
// bitfield macros
#define _PCLATU_PCU_POSN                                    0x0
#define _PCLATU_PCU_POSITION                                0x0
#define _PCLATU_PCU_SIZE                                    0x5
#define _PCLATU_PCU_LENGTH                                  0x5
#define _PCLATU_PCU_MASK                                    0x1F

// Register: STKPTR
#define STKPTR STKPTR
extern volatile unsigned char           STKPTR              __at(0xFFC);
#ifndef _LIB_BUILD
asm("STKPTR equ 0FFCh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned STKPTR                 :6;
    };
    struct {
        unsigned STKPTR0                :1;
        unsigned STKPTR1                :1;
        unsigned STKPTR2                :1;
        unsigned STKPTR3                :1;
        unsigned STKPTR4                :1;
        unsigned STKPTR5                :1;
    };
    struct {
        unsigned SP0                    :1;
        unsigned SP1                    :1;
        unsigned SP2                    :1;
        unsigned SP3                    :1;
        unsigned SP4                    :1;
        unsigned SP5                    :1;
    };
} STKPTRbits_t;
extern volatile STKPTRbits_t STKPTRbits __at(0xFFC);
// bitfield macros
#define _STKPTR_STKPTR_POSN                                 0x0
#define _STKPTR_STKPTR_POSITION                             0x0
#define _STKPTR_STKPTR_SIZE                                 0x6
#define _STKPTR_STKPTR_LENGTH                               0x6
#define _STKPTR_STKPTR_MASK                                 0x3F
#define _STKPTR_STKPTR0_POSN                                0x0
#define _STKPTR_STKPTR0_POSITION                            0x0
#define _STKPTR_STKPTR0_SIZE                                0x1
#define _STKPTR_STKPTR0_LENGTH                              0x1
#define _STKPTR_STKPTR0_MASK                                0x1
#define _STKPTR_STKPTR1_POSN                                0x1
#define _STKPTR_STKPTR1_POSITION                            0x1
#define _STKPTR_STKPTR1_SIZE                                0x1
#define _STKPTR_STKPTR1_LENGTH                              0x1
#define _STKPTR_STKPTR1_MASK                                0x2
#define _STKPTR_STKPTR2_POSN                                0x2
#define _STKPTR_STKPTR2_POSITION                            0x2
#define _STKPTR_STKPTR2_SIZE                                0x1
#define _STKPTR_STKPTR2_LENGTH                              0x1
#define _STKPTR_STKPTR2_MASK                                0x4
#define _STKPTR_STKPTR3_POSN                                0x3
#define _STKPTR_STKPTR3_POSITION                            0x3
#define _STKPTR_STKPTR3_SIZE                                0x1
#define _STKPTR_STKPTR3_LENGTH                              0x1
#define _STKPTR_STKPTR3_MASK                                0x8
#define _STKPTR_STKPTR4_POSN                                0x4
#define _STKPTR_STKPTR4_POSITION                            0x4
#define _STKPTR_STKPTR4_SIZE                                0x1
#define _STKPTR_STKPTR4_LENGTH                              0x1
#define _STKPTR_STKPTR4_MASK                                0x10
#define _STKPTR_STKPTR5_POSN                                0x5
#define _STKPTR_STKPTR5_POSITION                            0x5
#define _STKPTR_STKPTR5_SIZE                                0x1
#define _STKPTR_STKPTR5_LENGTH                              0x1
#define _STKPTR_STKPTR5_MASK                                0x20
#define _STKPTR_SP0_POSN                                    0x0
#define _STKPTR_SP0_POSITION                                0x0
#define _STKPTR_SP0_SIZE                                    0x1
#define _STKPTR_SP0_LENGTH                                  0x1
#define _STKPTR_SP0_MASK                                    0x1
#define _STKPTR_SP1_POSN                                    0x1
#define _STKPTR_SP1_POSITION                                0x1
#define _STKPTR_SP1_SIZE                                    0x1
#define _STKPTR_SP1_LENGTH                                  0x1
#define _STKPTR_SP1_MASK                                    0x2
#define _STKPTR_SP2_POSN                                    0x2
#define _STKPTR_SP2_POSITION                                0x2
#define _STKPTR_SP2_SIZE                                    0x1
#define _STKPTR_SP2_LENGTH                                  0x1
#define _STKPTR_SP2_MASK                                    0x4
#define _STKPTR_SP3_POSN                                    0x3
#define _STKPTR_SP3_POSITION                                0x3
#define _STKPTR_SP3_SIZE                                    0x1
#define _STKPTR_SP3_LENGTH                                  0x1
#define _STKPTR_SP3_MASK                                    0x8
#define _STKPTR_SP4_POSN                                    0x4
#define _STKPTR_SP4_POSITION                                0x4
#define _STKPTR_SP4_SIZE                                    0x1
#define _STKPTR_SP4_LENGTH                                  0x1
#define _STKPTR_SP4_MASK                                    0x10
#define _STKPTR_SP5_POSN                                    0x5
#define _STKPTR_SP5_POSITION                                0x5
#define _STKPTR_SP5_SIZE                                    0x1
#define _STKPTR_SP5_LENGTH                                  0x1
#define _STKPTR_SP5_MASK                                    0x20

// Register: TOS
#define TOS TOS
#ifndef __CCI__
extern volatile __uint24                TOS                 __at(0xFFD);
#endif
#ifndef _LIB_BUILD
asm("TOS equ 0FFDh");
#endif

// Register: TOSL
#define TOSL TOSL
extern volatile unsigned char           TOSL                __at(0xFFD);
#ifndef _LIB_BUILD
asm("TOSL equ 0FFDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TOSL                   :8;
    };
} TOSLbits_t;
extern volatile TOSLbits_t TOSLbits __at(0xFFD);
// bitfield macros
#define _TOSL_TOSL_POSN                                     0x0
#define _TOSL_TOSL_POSITION                                 0x0
#define _TOSL_TOSL_SIZE                                     0x8
#define _TOSL_TOSL_LENGTH                                   0x8
#define _TOSL_TOSL_MASK                                     0xFF

// Register: TOSH
#define TOSH TOSH
extern volatile unsigned char           TOSH                __at(0xFFE);
#ifndef _LIB_BUILD
asm("TOSH equ 0FFEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TOSH                   :8;
    };
} TOSHbits_t;
extern volatile TOSHbits_t TOSHbits __at(0xFFE);
// bitfield macros
#define _TOSH_TOSH_POSN                                     0x0
#define _TOSH_TOSH_POSITION                                 0x0
#define _TOSH_TOSH_SIZE                                     0x8
#define _TOSH_TOSH_LENGTH                                   0x8
#define _TOSH_TOSH_MASK                                     0xFF

// Register: TOSU
#define TOSU TOSU
extern volatile unsigned char           TOSU                __at(0xFFF);
#ifndef _LIB_BUILD
asm("TOSU equ 0FFFh");
#endif

/*
 * Bit Definitions
 */
#define _DEPRECATED __attribute__((__deprecated__))
#ifndef BANKMASK
#define BANKMASK(addr) ((addr)&0FFh)
#endif
#define _BIT_ACCESS(r,b) ___mkstr(BANKMASK(r)) "," ___mkstr(b)
#ifndef PAGEMASK
#define PAGEMASK(addr) ((addr)&0FFFFFh)
#endif
// BAUD1CON<ABDEN>
extern volatile __bit                   ABDEN               __at(0x7CF8);	// @ (0xF9F * 8 + 0)
#define                                 ABDEN_bit           _BIT_ACCESS(BAUD1CON,0)
// BAUD1CON<ABDEN1>
extern volatile __bit                   ABDEN1              __at(0x7CF8);	// @ (0xF9F * 8 + 0)
#define                                 ABDEN1_bit          _BIT_ACCESS(BAUD1CON,0)
// BAUD1CON<ABDOVF>
extern volatile __bit                   ABDOVF              __at(0x7CFF);	// @ (0xF9F * 8 + 7)
#define                                 ABDOVF_bit          _BIT_ACCESS(BAUD1CON,7)
// BAUD1CON<ABDOVF1>
extern volatile __bit                   ABDOVF1             __at(0x7CFF);	// @ (0xF9F * 8 + 7)
#define                                 ABDOVF1_bit         _BIT_ACCESS(BAUD1CON,7)
// CRCACCL<ACC0>
extern volatile __bit                   ACC0                __at(0x7BB0);	// @ (0xF76 * 8 + 0)
#define                                 ACC0_bit            _BIT_ACCESS(CRCACCL,0)
// CRCACCL<ACC1>
extern volatile __bit                   ACC1                __at(0x7BB1);	// @ (0xF76 * 8 + 1)
#define                                 ACC1_bit            _BIT_ACCESS(CRCACCL,1)
// CRCACCH<ACC10>
extern volatile __bit                   ACC10               __at(0x7BBA);	// @ (0xF77 * 8 + 2)
#define                                 ACC10_bit           _BIT_ACCESS(CRCACCH,2)
// CRCACCH<ACC11>
extern volatile __bit                   ACC11               __at(0x7BBB);	// @ (0xF77 * 8 + 3)
#define                                 ACC11_bit           _BIT_ACCESS(CRCACCH,3)
// CRCACCH<ACC12>
extern volatile __bit                   ACC12               __at(0x7BBC);	// @ (0xF77 * 8 + 4)
#define                                 ACC12_bit           _BIT_ACCESS(CRCACCH,4)
// CRCACCH<ACC13>
extern volatile __bit                   ACC13               __at(0x7BBD);	// @ (0xF77 * 8 + 5)
#define                                 ACC13_bit           _BIT_ACCESS(CRCACCH,5)
// CRCACCH<ACC14>
extern volatile __bit                   ACC14               __at(0x7BBE);	// @ (0xF77 * 8 + 6)
#define                                 ACC14_bit           _BIT_ACCESS(CRCACCH,6)
// CRCACCH<ACC15>
extern volatile __bit                   ACC15               __at(0x7BBF);	// @ (0xF77 * 8 + 7)
#define                                 ACC15_bit           _BIT_ACCESS(CRCACCH,7)
// CRCACCL<ACC2>
extern volatile __bit                   ACC2                __at(0x7BB2);	// @ (0xF76 * 8 + 2)
#define                                 ACC2_bit            _BIT_ACCESS(CRCACCL,2)
// CRCACCL<ACC3>
extern volatile __bit                   ACC3                __at(0x7BB3);	// @ (0xF76 * 8 + 3)
#define                                 ACC3_bit            _BIT_ACCESS(CRCACCL,3)
// CRCACCL<ACC4>
extern volatile __bit                   ACC4                __at(0x7BB4);	// @ (0xF76 * 8 + 4)
#define                                 ACC4_bit            _BIT_ACCESS(CRCACCL,4)
// CRCACCL<ACC5>
extern volatile __bit                   ACC5                __at(0x7BB5);	// @ (0xF76 * 8 + 5)
#define                                 ACC5_bit            _BIT_ACCESS(CRCACCL,5)
// CRCACCL<ACC6>
extern volatile __bit                   ACC6                __at(0x7BB6);	// @ (0xF76 * 8 + 6)
#define                                 ACC6_bit            _BIT_ACCESS(CRCACCL,6)
// CRCACCL<ACC7>
extern volatile __bit                   ACC7                __at(0x7BB7);	// @ (0xF76 * 8 + 7)
#define                                 ACC7_bit            _BIT_ACCESS(CRCACCL,7)
// CRCACCH<ACC8>
extern volatile __bit                   ACC8                __at(0x7BB8);	// @ (0xF77 * 8 + 0)
#define                                 ACC8_bit            _BIT_ACCESS(CRCACCH,0)
// CRCACCH<ACC9>
extern volatile __bit                   ACC9                __at(0x7BB9);	// @ (0xF77 * 8 + 1)
#define                                 ACC9_bit            _BIT_ACCESS(CRCACCH,1)
// CRCCON0<ACCM>
extern volatile __bit                   ACCM                __at(0x7BE4);	// @ (0xF7C * 8 + 4)
#define                                 ACCM_bit            _BIT_ACCESS(CRCCON0,4)
// SSP1CON2<ACKDT>
extern volatile __bit                   ACKDT               __at(0x7CBD);	// @ (0xF97 * 8 + 5)
#define                                 ACKDT_bit           _BIT_ACCESS(SSP1CON2,5)
// SSP1CON2<ACKDT1>
extern volatile __bit                   ACKDT1              __at(0x7CBD);	// @ (0xF97 * 8 + 5)
#define                                 ACKDT1_bit          _BIT_ACCESS(SSP1CON2,5)
// SSP1CON2<ACKEN>
extern volatile __bit                   ACKEN               __at(0x7CBC);	// @ (0xF97 * 8 + 4)
#define                                 ACKEN_bit           _BIT_ACCESS(SSP1CON2,4)
// SSP1CON2<ACKEN1>
extern volatile __bit                   ACKEN1              __at(0x7CBC);	// @ (0xF97 * 8 + 4)
#define                                 ACKEN1_bit          _BIT_ACCESS(SSP1CON2,4)
// SSP1CON2<ACKSTAT>
extern volatile __bit                   ACKSTAT             __at(0x7CBE);	// @ (0xF97 * 8 + 6)
#define                                 ACKSTAT_bit         _BIT_ACCESS(SSP1CON2,6)
// SSP1CON2<ACKSTAT1>
extern volatile __bit                   ACKSTAT1            __at(0x7CBE);	// @ (0xF97 * 8 + 6)
#define                                 ACKSTAT1_bit        _BIT_ACCESS(SSP1CON2,6)
// SSP1CON3<ACKTIM>
extern volatile __bit                   ACKTIM              __at(0x7CC7);	// @ (0xF98 * 8 + 7)
#define                                 ACKTIM_bit          _BIT_ACCESS(SSP1CON3,7)
// TBLPTRU<ACSS>
extern volatile __bit                   ACSS                __at(0x7FC5);	// @ (0xFF8 * 8 + 5)
#define                                 ACSS_bit            _BIT_ACCESS(TBLPTRU,5)
// ADACCL<ADACC0>
extern volatile __bit                   ADACC0              __at(0x7B80);	// @ (0xF70 * 8 + 0)
#define                                 ADACC0_bit          _BIT_ACCESS(ADACCL,0)
// ADACCL<ADACC1>
extern volatile __bit                   ADACC1              __at(0x7B81);	// @ (0xF70 * 8 + 1)
#define                                 ADACC1_bit          _BIT_ACCESS(ADACCL,1)
// ADACCH<ADACC10>
extern volatile __bit                   ADACC10             __at(0x7B8A);	// @ (0xF71 * 8 + 2)
#define                                 ADACC10_bit         _BIT_ACCESS(ADACCH,2)
// ADACCH<ADACC11>
extern volatile __bit                   ADACC11             __at(0x7B8B);	// @ (0xF71 * 8 + 3)
#define                                 ADACC11_bit         _BIT_ACCESS(ADACCH,3)
// ADACCH<ADACC12>
extern volatile __bit                   ADACC12             __at(0x7B8C);	// @ (0xF71 * 8 + 4)
#define                                 ADACC12_bit         _BIT_ACCESS(ADACCH,4)
// ADACCH<ADACC13>
extern volatile __bit                   ADACC13             __at(0x7B8D);	// @ (0xF71 * 8 + 5)
#define                                 ADACC13_bit         _BIT_ACCESS(ADACCH,5)
// ADACCH<ADACC14>
extern volatile __bit                   ADACC14             __at(0x7B8E);	// @ (0xF71 * 8 + 6)
#define                                 ADACC14_bit         _BIT_ACCESS(ADACCH,6)
// ADACCH<ADACC15>
extern volatile __bit                   ADACC15             __at(0x7B8F);	// @ (0xF71 * 8 + 7)
#define                                 ADACC15_bit         _BIT_ACCESS(ADACCH,7)
// ADACCL<ADACC2>
extern volatile __bit                   ADACC2              __at(0x7B82);	// @ (0xF70 * 8 + 2)
#define                                 ADACC2_bit          _BIT_ACCESS(ADACCL,2)
// ADACCL<ADACC3>
extern volatile __bit                   ADACC3              __at(0x7B83);	// @ (0xF70 * 8 + 3)
#define                                 ADACC3_bit          _BIT_ACCESS(ADACCL,3)
// ADACCL<ADACC4>
extern volatile __bit                   ADACC4              __at(0x7B84);	// @ (0xF70 * 8 + 4)
#define                                 ADACC4_bit          _BIT_ACCESS(ADACCL,4)
// ADACCL<ADACC5>
extern volatile __bit                   ADACC5              __at(0x7B85);	// @ (0xF70 * 8 + 5)
#define                                 ADACC5_bit          _BIT_ACCESS(ADACCL,5)
// ADACCL<ADACC6>
extern volatile __bit                   ADACC6              __at(0x7B86);	// @ (0xF70 * 8 + 6)
#define                                 ADACC6_bit          _BIT_ACCESS(ADACCL,6)
// ADACCL<ADACC7>
extern volatile __bit                   ADACC7              __at(0x7B87);	// @ (0xF70 * 8 + 7)
#define                                 ADACC7_bit          _BIT_ACCESS(ADACCL,7)
// ADACCH<ADACC8>
extern volatile __bit                   ADACC8              __at(0x7B88);	// @ (0xF71 * 8 + 0)
#define                                 ADACC8_bit          _BIT_ACCESS(ADACCH,0)
// ADACCH<ADACC9>
extern volatile __bit                   ADACC9              __at(0x7B89);	// @ (0xF71 * 8 + 1)
#define                                 ADACC9_bit          _BIT_ACCESS(ADACCH,1)
// ADCON2<ADACLR>
extern volatile __bit                   ADACLR              __at(0x7AD3);	// @ (0xF5A * 8 + 3)
#define                                 ADACLR_bit          _BIT_ACCESS(ADCON2,3)
// ADACQ<ADACQ0>
extern volatile __bit                   ADACQ0              __at(0x7AE0);	// @ (0xF5C * 8 + 0)
#define                                 ADACQ0_bit          _BIT_ACCESS(ADACQ,0)
// ADACQ<ADACQ1>
extern volatile __bit                   ADACQ1              __at(0x7AE1);	// @ (0xF5C * 8 + 1)
#define                                 ADACQ1_bit          _BIT_ACCESS(ADACQ,1)
// ADACQ<ADACQ2>
extern volatile __bit                   ADACQ2              __at(0x7AE2);	// @ (0xF5C * 8 + 2)
#define                                 ADACQ2_bit          _BIT_ACCESS(ADACQ,2)
// ADACQ<ADACQ3>
extern volatile __bit                   ADACQ3              __at(0x7AE3);	// @ (0xF5C * 8 + 3)
#define                                 ADACQ3_bit          _BIT_ACCESS(ADACQ,3)
// ADACQ<ADACQ4>
extern volatile __bit                   ADACQ4              __at(0x7AE4);	// @ (0xF5C * 8 + 4)
#define                                 ADACQ4_bit          _BIT_ACCESS(ADACQ,4)
// ADACQ<ADACQ5>
extern volatile __bit                   ADACQ5              __at(0x7AE5);	// @ (0xF5C * 8 + 5)
#define                                 ADACQ5_bit          _BIT_ACCESS(ADACQ,5)
// ADACQ<ADACQ6>
extern volatile __bit                   ADACQ6              __at(0x7AE6);	// @ (0xF5C * 8 + 6)
#define                                 ADACQ6_bit          _BIT_ACCESS(ADACQ,6)
// ADACQ<ADACQ7>
extern volatile __bit                   ADACQ7              __at(0x7AE7);	// @ (0xF5C * 8 + 7)
#define                                 ADACQ7_bit          _BIT_ACCESS(ADACQ,7)
// ADACT<ADACT0>
extern volatile __bit                   ADACT0              __at(0x7AB0);	// @ (0xF56 * 8 + 0)
#define                                 ADACT0_bit          _BIT_ACCESS(ADACT,0)
// ADACT<ADACT1>
extern volatile __bit                   ADACT1              __at(0x7AB1);	// @ (0xF56 * 8 + 1)
#define                                 ADACT1_bit          _BIT_ACCESS(ADACT,1)
// ADACT<ADACT2>
extern volatile __bit                   ADACT2              __at(0x7AB2);	// @ (0xF56 * 8 + 2)
#define                                 ADACT2_bit          _BIT_ACCESS(ADACT,2)
// ADACT<ADACT3>
extern volatile __bit                   ADACT3              __at(0x7AB3);	// @ (0xF56 * 8 + 3)
#define                                 ADACT3_bit          _BIT_ACCESS(ADACT,3)
// ADACT<ADACT4>
extern volatile __bit                   ADACT4              __at(0x7AB4);	// @ (0xF56 * 8 + 4)
#define                                 ADACT4_bit          _BIT_ACCESS(ADACT,4)
// ADACTPPS<ADACTPPS0>
extern volatile __bit                   ADACTPPS0           __at(0x7570);	// @ (0xEAE * 8 + 0)
#define                                 ADACTPPS0_bit       _BIT_ACCESS(ADACTPPS,0)
// ADACTPPS<ADACTPPS1>
extern volatile __bit                   ADACTPPS1           __at(0x7571);	// @ (0xEAE * 8 + 1)
#define                                 ADACTPPS1_bit       _BIT_ACCESS(ADACTPPS,1)
// ADACTPPS<ADACTPPS2>
extern volatile __bit                   ADACTPPS2           __at(0x7572);	// @ (0xEAE * 8 + 2)
#define                                 ADACTPPS2_bit       _BIT_ACCESS(ADACTPPS,2)
// ADACTPPS<ADACTPPS3>
extern volatile __bit                   ADACTPPS3           __at(0x7573);	// @ (0xEAE * 8 + 3)
#define                                 ADACTPPS3_bit       _BIT_ACCESS(ADACTPPS,3)
// ADACTPPS<ADACTPPS4>
extern volatile __bit                   ADACTPPS4           __at(0x7574);	// @ (0xEAE * 8 + 4)
#define                                 ADACTPPS4_bit       _BIT_ACCESS(ADACTPPS,4)
// ADSTAT<ADAOV>
extern volatile __bit                   ADAOV               __at(0x7B2F);	// @ (0xF65 * 8 + 7)
#define                                 ADAOV_bit           _BIT_ACCESS(ADSTAT,7)
// ADCON0<ADCAL>
extern volatile __bit                   ADCAL               __at(0x7B07);	// @ (0xF60 * 8 + 7)
#define                                 ADCAL_bit           _BIT_ACCESS(ADCON0,7)
// ADCON3<ADCALC0>
extern volatile __bit                   ADCALC0             __at(0x7ADC);	// @ (0xF5B * 8 + 4)
#define                                 ADCALC0_bit         _BIT_ACCESS(ADCON3,4)
// ADCON3<ADCALC1>
extern volatile __bit                   ADCALC1             __at(0x7ADD);	// @ (0xF5B * 8 + 5)
#define                                 ADCALC1_bit         _BIT_ACCESS(ADCON3,5)
// ADCON3<ADCALC2>
extern volatile __bit                   ADCALC2             __at(0x7ADE);	// @ (0xF5B * 8 + 6)
#define                                 ADCALC2_bit         _BIT_ACCESS(ADCON3,6)
// ADCAP<ADCAP0>
extern volatile __bit                   ADCAP0              __at(0x7AE8);	// @ (0xF5D * 8 + 0)
#define                                 ADCAP0_bit          _BIT_ACCESS(ADCAP,0)
// ADCAP<ADCAP1>
extern volatile __bit                   ADCAP1              __at(0x7AE9);	// @ (0xF5D * 8 + 1)
#define                                 ADCAP1_bit          _BIT_ACCESS(ADCAP,1)
// ADCAP<ADCAP2>
extern volatile __bit                   ADCAP2              __at(0x7AEA);	// @ (0xF5D * 8 + 2)
#define                                 ADCAP2_bit          _BIT_ACCESS(ADCAP,2)
// ADCAP<ADCAP3>
extern volatile __bit                   ADCAP3              __at(0x7AEB);	// @ (0xF5D * 8 + 3)
#define                                 ADCAP3_bit          _BIT_ACCESS(ADCAP,3)
// ADCAP<ADCAP4>
extern volatile __bit                   ADCAP4              __at(0x7AEC);	// @ (0xF5D * 8 + 4)
#define                                 ADCAP4_bit          _BIT_ACCESS(ADCAP,4)
// PMD2<ADCMD>
extern volatile __bit                   ADCMD               __at(0x771D);	// @ (0xEE3 * 8 + 5)
#define                                 ADCMD_bit           _BIT_ACCESS(PMD2,5)
// ADCNT<ADCNT0>
extern volatile __bit                   ADCNT0              __at(0x7B38);	// @ (0xF67 * 8 + 0)
#define                                 ADCNT0_bit          _BIT_ACCESS(ADCNT,0)
// ADCNT<ADCNT1>
extern volatile __bit                   ADCNT1              __at(0x7B39);	// @ (0xF67 * 8 + 1)
#define                                 ADCNT1_bit          _BIT_ACCESS(ADCNT,1)
// ADCNT<ADCNT2>
extern volatile __bit                   ADCNT2              __at(0x7B3A);	// @ (0xF67 * 8 + 2)
#define                                 ADCNT2_bit          _BIT_ACCESS(ADCNT,2)
// ADCNT<ADCNT3>
extern volatile __bit                   ADCNT3              __at(0x7B3B);	// @ (0xF67 * 8 + 3)
#define                                 ADCNT3_bit          _BIT_ACCESS(ADCNT,3)
// ADCNT<ADCNT4>
extern volatile __bit                   ADCNT4              __at(0x7B3C);	// @ (0xF67 * 8 + 4)
#define                                 ADCNT4_bit          _BIT_ACCESS(ADCNT,4)
// ADCNT<ADCNT5>
extern volatile __bit                   ADCNT5              __at(0x7B3D);	// @ (0xF67 * 8 + 5)
#define                                 ADCNT5_bit          _BIT_ACCESS(ADCNT,5)
// ADCNT<ADCNT6>
extern volatile __bit                   ADCNT6              __at(0x7B3E);	// @ (0xF67 * 8 + 6)
#define                                 ADCNT6_bit          _BIT_ACCESS(ADCNT,6)
// ADCNT<ADCNT7>
extern volatile __bit                   ADCNT7              __at(0x7B3F);	// @ (0xF67 * 8 + 7)
#define                                 ADCNT7_bit          _BIT_ACCESS(ADCNT,7)
// ADCON0<ADCONT>
extern volatile __bit                   ADCONT              __at(0x7B06);	// @ (0xF60 * 8 + 6)
#define                                 ADCONT_bit          _BIT_ACCESS(ADCON0,6)
// ADCON2<ADCRS0>
extern volatile __bit                   ADCRS0              __at(0x7AD4);	// @ (0xF5A * 8 + 4)
#define                                 ADCRS0_bit          _BIT_ACCESS(ADCON2,4)
// ADCON2<ADCRS1>
extern volatile __bit                   ADCRS1              __at(0x7AD5);	// @ (0xF5A * 8 + 5)
#define                                 ADCRS1_bit          _BIT_ACCESS(ADCON2,5)
// ADCON2<ADCRS2>
extern volatile __bit                   ADCRS2              __at(0x7AD6);	// @ (0xF5A * 8 + 6)
#define                                 ADCRS2_bit          _BIT_ACCESS(ADCON2,6)
// ADCON0<ADCS>
extern volatile __bit                   ADCS                __at(0x7B04);	// @ (0xF60 * 8 + 4)
#define                                 ADCS_bit            _BIT_ACCESS(ADCON0,4)
// ADCLK<ADCS0>
extern volatile __bit                   ADCS0               __at(0x7AB8);	// @ (0xF57 * 8 + 0)
#define                                 ADCS0_bit           _BIT_ACCESS(ADCLK,0)
// ADCLK<ADCS1>
extern volatile __bit                   ADCS1               __at(0x7AB9);	// @ (0xF57 * 8 + 1)
#define                                 ADCS1_bit           _BIT_ACCESS(ADCLK,1)
// ADCLK<ADCS2>
extern volatile __bit                   ADCS2               __at(0x7ABA);	// @ (0xF57 * 8 + 2)
#define                                 ADCS2_bit           _BIT_ACCESS(ADCLK,2)
// ADCLK<ADCS3>
extern volatile __bit                   ADCS3               __at(0x7ABB);	// @ (0xF57 * 8 + 3)
#define                                 ADCS3_bit           _BIT_ACCESS(ADCLK,3)
// ADCLK<ADCS4>
extern volatile __bit                   ADCS4               __at(0x7ABC);	// @ (0xF57 * 8 + 4)
#define                                 ADCS4_bit           _BIT_ACCESS(ADCLK,4)
// ADCLK<ADCS5>
extern volatile __bit                   ADCS5               __at(0x7ABD);	// @ (0xF57 * 8 + 5)
#define                                 ADCS5_bit           _BIT_ACCESS(ADCLK,5)
// RC1STA<ADDEN>
extern volatile __bit                   ADDEN               __at(0x7CEB);	// @ (0xF9D * 8 + 3)
#define                                 ADDEN_bit           _BIT_ACCESS(RC1STA,3)
// ADCON1<ADDSEN>
extern volatile __bit                   ADDSEN              __at(0x7AC8);	// @ (0xF59 * 8 + 0)
#define                                 ADDSEN_bit          _BIT_ACCESS(ADCON1,0)
// ADERRL<ADERR0>
extern volatile __bit                   ADERR0              __at(0x7B70);	// @ (0xF6E * 8 + 0)
#define                                 ADERR0_bit          _BIT_ACCESS(ADERRL,0)
// ADERRL<ADERR1>
extern volatile __bit                   ADERR1              __at(0x7B71);	// @ (0xF6E * 8 + 1)
#define                                 ADERR1_bit          _BIT_ACCESS(ADERRL,1)
// ADERRH<ADERR10>
extern volatile __bit                   ADERR10             __at(0x7B7A);	// @ (0xF6F * 8 + 2)
#define                                 ADERR10_bit         _BIT_ACCESS(ADERRH,2)
// ADERRH<ADERR11>
extern volatile __bit                   ADERR11             __at(0x7B7B);	// @ (0xF6F * 8 + 3)
#define                                 ADERR11_bit         _BIT_ACCESS(ADERRH,3)
// ADERRH<ADERR12>
extern volatile __bit                   ADERR12             __at(0x7B7C);	// @ (0xF6F * 8 + 4)
#define                                 ADERR12_bit         _BIT_ACCESS(ADERRH,4)
// ADERRH<ADERR13>
extern volatile __bit                   ADERR13             __at(0x7B7D);	// @ (0xF6F * 8 + 5)
#define                                 ADERR13_bit         _BIT_ACCESS(ADERRH,5)
// ADERRH<ADERR14>
extern volatile __bit                   ADERR14             __at(0x7B7E);	// @ (0xF6F * 8 + 6)
#define                                 ADERR14_bit         _BIT_ACCESS(ADERRH,6)
// ADERRH<ADERR15>
extern volatile __bit                   ADERR15             __at(0x7B7F);	// @ (0xF6F * 8 + 7)
#define                                 ADERR15_bit         _BIT_ACCESS(ADERRH,7)
// ADERRL<ADERR2>
extern volatile __bit                   ADERR2              __at(0x7B72);	// @ (0xF6E * 8 + 2)
#define                                 ADERR2_bit          _BIT_ACCESS(ADERRL,2)
// ADERRL<ADERR3>
extern volatile __bit                   ADERR3              __at(0x7B73);	// @ (0xF6E * 8 + 3)
#define                                 ADERR3_bit          _BIT_ACCESS(ADERRL,3)
// ADERRL<ADERR4>
extern volatile __bit                   ADERR4              __at(0x7B74);	// @ (0xF6E * 8 + 4)
#define                                 ADERR4_bit          _BIT_ACCESS(ADERRL,4)
// ADERRL<ADERR5>
extern volatile __bit                   ADERR5              __at(0x7B75);	// @ (0xF6E * 8 + 5)
#define                                 ADERR5_bit          _BIT_ACCESS(ADERRL,5)
// ADERRL<ADERR6>
extern volatile __bit                   ADERR6              __at(0x7B76);	// @ (0xF6E * 8 + 6)
#define                                 ADERR6_bit          _BIT_ACCESS(ADERRL,6)
// ADERRL<ADERR7>
extern volatile __bit                   ADERR7              __at(0x7B77);	// @ (0xF6E * 8 + 7)
#define                                 ADERR7_bit          _BIT_ACCESS(ADERRL,7)
// ADERRH<ADERR8>
extern volatile __bit                   ADERR8              __at(0x7B78);	// @ (0xF6F * 8 + 0)
#define                                 ADERR8_bit          _BIT_ACCESS(ADERRH,0)
// ADERRH<ADERR9>
extern volatile __bit                   ADERR9              __at(0x7B79);	// @ (0xF6F * 8 + 1)
#define                                 ADERR9_bit          _BIT_ACCESS(ADERRH,1)
// ADFLTRL<ADFLTR0>
extern volatile __bit                   ADFLTR0             __at(0x7B90);	// @ (0xF72 * 8 + 0)
#define                                 ADFLTR0_bit         _BIT_ACCESS(ADFLTRL,0)
// ADFLTRL<ADFLTR1>
extern volatile __bit                   ADFLTR1             __at(0x7B91);	// @ (0xF72 * 8 + 1)
#define                                 ADFLTR1_bit         _BIT_ACCESS(ADFLTRL,1)
// ADFLTRH<ADFLTR10>
extern volatile __bit                   ADFLTR10            __at(0x7B9A);	// @ (0xF73 * 8 + 2)
#define                                 ADFLTR10_bit        _BIT_ACCESS(ADFLTRH,2)
// ADFLTRH<ADFLTR11>
extern volatile __bit                   ADFLTR11            __at(0x7B9B);	// @ (0xF73 * 8 + 3)
#define                                 ADFLTR11_bit        _BIT_ACCESS(ADFLTRH,3)
// ADFLTRH<ADFLTR12>
extern volatile __bit                   ADFLTR12            __at(0x7B9C);	// @ (0xF73 * 8 + 4)
#define                                 ADFLTR12_bit        _BIT_ACCESS(ADFLTRH,4)
// ADFLTRH<ADFLTR13>
extern volatile __bit                   ADFLTR13            __at(0x7B9D);	// @ (0xF73 * 8 + 5)
#define                                 ADFLTR13_bit        _BIT_ACCESS(ADFLTRH,5)
// ADFLTRH<ADFLTR14>
extern volatile __bit                   ADFLTR14            __at(0x7B9E);	// @ (0xF73 * 8 + 6)
#define                                 ADFLTR14_bit        _BIT_ACCESS(ADFLTRH,6)
// ADFLTRH<ADFLTR15>
extern volatile __bit                   ADFLTR15            __at(0x7B9F);	// @ (0xF73 * 8 + 7)
#define                                 ADFLTR15_bit        _BIT_ACCESS(ADFLTRH,7)
// ADFLTRL<ADFLTR2>
extern volatile __bit                   ADFLTR2             __at(0x7B92);	// @ (0xF72 * 8 + 2)
#define                                 ADFLTR2_bit         _BIT_ACCESS(ADFLTRL,2)
// ADFLTRL<ADFLTR3>
extern volatile __bit                   ADFLTR3             __at(0x7B93);	// @ (0xF72 * 8 + 3)
#define                                 ADFLTR3_bit         _BIT_ACCESS(ADFLTRL,3)
// ADFLTRL<ADFLTR4>
extern volatile __bit                   ADFLTR4             __at(0x7B94);	// @ (0xF72 * 8 + 4)
#define                                 ADFLTR4_bit         _BIT_ACCESS(ADFLTRL,4)
// ADFLTRL<ADFLTR5>
extern volatile __bit                   ADFLTR5             __at(0x7B95);	// @ (0xF72 * 8 + 5)
#define                                 ADFLTR5_bit         _BIT_ACCESS(ADFLTRL,5)
// ADFLTRL<ADFLTR6>
extern volatile __bit                   ADFLTR6             __at(0x7B96);	// @ (0xF72 * 8 + 6)
#define                                 ADFLTR6_bit         _BIT_ACCESS(ADFLTRL,6)
// ADFLTRL<ADFLTR7>
extern volatile __bit                   ADFLTR7             __at(0x7B97);	// @ (0xF72 * 8 + 7)
#define                                 ADFLTR7_bit         _BIT_ACCESS(ADFLTRL,7)
// ADFLTRH<ADFLTR8>
extern volatile __bit                   ADFLTR8             __at(0x7B98);	// @ (0xF73 * 8 + 0)
#define                                 ADFLTR8_bit         _BIT_ACCESS(ADFLTRH,0)
// ADFLTRH<ADFLTR9>
extern volatile __bit                   ADFLTR9             __at(0x7B99);	// @ (0xF73 * 8 + 1)
#define                                 ADFLTR9_bit         _BIT_ACCESS(ADFLTRH,1)
// ADCON0<ADFM>
extern volatile __bit                   ADFM                __at(0x7B02);	// @ (0xF60 * 8 + 2)
#define                                 ADFM_bit            _BIT_ACCESS(ADCON0,2)
// ADCON0<ADFM0>
extern volatile __bit                   ADFM0               __at(0x7B02);	// @ (0xF60 * 8 + 2)
#define                                 ADFM0_bit           _BIT_ACCESS(ADCON0,2)
// FVRCON<ADFVR0>
extern volatile __bit                   ADFVR0              __at(0x7988);	// @ (0xF31 * 8 + 0)
#define                                 ADFVR0_bit          _BIT_ACCESS(FVRCON,0)
// FVRCON<ADFVR1>
extern volatile __bit                   ADFVR1              __at(0x7989);	// @ (0xF31 * 8 + 1)
#define                                 ADFVR1_bit          _BIT_ACCESS(FVRCON,1)
// ADCON0<ADGO>
extern volatile __bit                   ADGO                __at(0x7B00);	// @ (0xF60 * 8 + 0)
#define                                 ADGO_bit            _BIT_ACCESS(ADCON0,0)
// ADCON1<ADGPOL>
extern volatile __bit                   ADGPOL              __at(0x7ACD);	// @ (0xF59 * 8 + 5)
#define                                 ADGPOL_bit          _BIT_ACCESS(ADCON1,5)
// PIE1<ADIE>
extern volatile __bit                   ADIE                __at(0x7618);	// @ (0xEC3 * 8 + 0)
#define                                 ADIE_bit            _BIT_ACCESS(PIE1,0)
// PIR1<ADIF>
extern volatile __bit                   ADIF                __at(0x7658);	// @ (0xECB * 8 + 0)
#define                                 ADIF_bit            _BIT_ACCESS(PIR1,0)
// IPR1<ADIP>
extern volatile __bit                   ADIP                __at(0x75D8);	// @ (0xEBB * 8 + 0)
#define                                 ADIP_bit            _BIT_ACCESS(IPR1,0)
// ADCON1<ADIPEN>
extern volatile __bit                   ADIPEN              __at(0x7ACE);	// @ (0xF59 * 8 + 6)
#define                                 ADIPEN_bit          _BIT_ACCESS(ADCON1,6)
// ADLTHL<ADLTH0>
extern volatile __bit                   ADLTH0              __at(0x7B50);	// @ (0xF6A * 8 + 0)
#define                                 ADLTH0_bit          _BIT_ACCESS(ADLTHL,0)
// ADLTHL<ADLTH1>
extern volatile __bit                   ADLTH1              __at(0x7B51);	// @ (0xF6A * 8 + 1)
#define                                 ADLTH1_bit          _BIT_ACCESS(ADLTHL,1)
// ADLTHH<ADLTH10>
extern volatile __bit                   ADLTH10             __at(0x7B5A);	// @ (0xF6B * 8 + 2)
#define                                 ADLTH10_bit         _BIT_ACCESS(ADLTHH,2)
// ADLTHH<ADLTH11>
extern volatile __bit                   ADLTH11             __at(0x7B5B);	// @ (0xF6B * 8 + 3)
#define                                 ADLTH11_bit         _BIT_ACCESS(ADLTHH,3)
// ADLTHH<ADLTH12>
extern volatile __bit                   ADLTH12             __at(0x7B5C);	// @ (0xF6B * 8 + 4)
#define                                 ADLTH12_bit         _BIT_ACCESS(ADLTHH,4)
// ADLTHH<ADLTH13>
extern volatile __bit                   ADLTH13             __at(0x7B5D);	// @ (0xF6B * 8 + 5)
#define                                 ADLTH13_bit         _BIT_ACCESS(ADLTHH,5)
// ADLTHH<ADLTH14>
extern volatile __bit                   ADLTH14             __at(0x7B5E);	// @ (0xF6B * 8 + 6)
#define                                 ADLTH14_bit         _BIT_ACCESS(ADLTHH,6)
// ADLTHH<ADLTH15>
extern volatile __bit                   ADLTH15             __at(0x7B5F);	// @ (0xF6B * 8 + 7)
#define                                 ADLTH15_bit         _BIT_ACCESS(ADLTHH,7)
// ADLTHL<ADLTH2>
extern volatile __bit                   ADLTH2              __at(0x7B52);	// @ (0xF6A * 8 + 2)
#define                                 ADLTH2_bit          _BIT_ACCESS(ADLTHL,2)
// ADLTHL<ADLTH3>
extern volatile __bit                   ADLTH3              __at(0x7B53);	// @ (0xF6A * 8 + 3)
#define                                 ADLTH3_bit          _BIT_ACCESS(ADLTHL,3)
// ADLTHL<ADLTH4>
extern volatile __bit                   ADLTH4              __at(0x7B54);	// @ (0xF6A * 8 + 4)
#define                                 ADLTH4_bit          _BIT_ACCESS(ADLTHL,4)
// ADLTHL<ADLTH5>
extern volatile __bit                   ADLTH5              __at(0x7B55);	// @ (0xF6A * 8 + 5)
#define                                 ADLTH5_bit          _BIT_ACCESS(ADLTHL,5)
// ADLTHL<ADLTH6>
extern volatile __bit                   ADLTH6              __at(0x7B56);	// @ (0xF6A * 8 + 6)
#define                                 ADLTH6_bit          _BIT_ACCESS(ADLTHL,6)
// ADLTHL<ADLTH7>
extern volatile __bit                   ADLTH7              __at(0x7B57);	// @ (0xF6A * 8 + 7)
#define                                 ADLTH7_bit          _BIT_ACCESS(ADLTHL,7)
// ADLTHH<ADLTH8>
extern volatile __bit                   ADLTH8              __at(0x7B58);	// @ (0xF6B * 8 + 0)
#define                                 ADLTH8_bit          _BIT_ACCESS(ADLTHH,0)
// ADLTHH<ADLTH9>
extern volatile __bit                   ADLTH9              __at(0x7B59);	// @ (0xF6B * 8 + 1)
#define                                 ADLTH9_bit          _BIT_ACCESS(ADLTHH,1)
// ADSTAT<ADLTHR>
extern volatile __bit                   ADLTHR              __at(0x7B2D);	// @ (0xF65 * 8 + 5)
#define                                 ADLTHR_bit          _BIT_ACCESS(ADSTAT,5)
// ADSTAT<ADMATH>
extern volatile __bit                   ADMATH              __at(0x7B2C);	// @ (0xF65 * 8 + 4)
#define                                 ADMATH_bit          _BIT_ACCESS(ADSTAT,4)
// ADCON2<ADMD0>
extern volatile __bit                   ADMD0               __at(0x7AD0);	// @ (0xF5A * 8 + 0)
#define                                 ADMD0_bit           _BIT_ACCESS(ADCON2,0)
// ADCON2<ADMD1>
extern volatile __bit                   ADMD1               __at(0x7AD1);	// @ (0xF5A * 8 + 1)
#define                                 ADMD1_bit           _BIT_ACCESS(ADCON2,1)
// ADCON2<ADMD2>
extern volatile __bit                   ADMD2               __at(0x7AD2);	// @ (0xF5A * 8 + 2)
#define                                 ADMD2_bit           _BIT_ACCESS(ADCON2,2)
// SSP1CON2<ADMSK1>
extern volatile __bit                   ADMSK1              __at(0x7CB9);	// @ (0xF97 * 8 + 1)
#define                                 ADMSK1_bit          _BIT_ACCESS(SSP1CON2,1)
// SSP1CON2<ADMSK11>
extern volatile __bit                   ADMSK11             __at(0x7CB9);	// @ (0xF97 * 8 + 1)
#define                                 ADMSK11_bit         _BIT_ACCESS(SSP1CON2,1)
// SSP1CON2<ADMSK2>
extern volatile __bit                   ADMSK2              __at(0x7CBA);	// @ (0xF97 * 8 + 2)
#define                                 ADMSK2_bit          _BIT_ACCESS(SSP1CON2,2)
// SSP1CON2<ADMSK21>
extern volatile __bit                   ADMSK21             __at(0x7CBA);	// @ (0xF97 * 8 + 2)
#define                                 ADMSK21_bit         _BIT_ACCESS(SSP1CON2,2)
// SSP1CON2<ADMSK3>
extern volatile __bit                   ADMSK3              __at(0x7CBB);	// @ (0xF97 * 8 + 3)
#define                                 ADMSK3_bit          _BIT_ACCESS(SSP1CON2,3)
// SSP1CON2<ADMSK31>
extern volatile __bit                   ADMSK31             __at(0x7CBB);	// @ (0xF97 * 8 + 3)
#define                                 ADMSK31_bit         _BIT_ACCESS(SSP1CON2,3)
// SSP1CON2<ADMSK4>
extern volatile __bit                   ADMSK4              __at(0x7CBC);	// @ (0xF97 * 8 + 4)
#define                                 ADMSK4_bit          _BIT_ACCESS(SSP1CON2,4)
// SSP1CON2<ADMSK41>
extern volatile __bit                   ADMSK41             __at(0x7CBC);	// @ (0xF97 * 8 + 4)
#define                                 ADMSK41_bit         _BIT_ACCESS(SSP1CON2,4)
// SSP1CON2<ADMSK5>
extern volatile __bit                   ADMSK5              __at(0x7CBD);	// @ (0xF97 * 8 + 5)
#define                                 ADMSK5_bit          _BIT_ACCESS(SSP1CON2,5)
// SSP1CON2<ADMSK51>
extern volatile __bit                   ADMSK51             __at(0x7CBD);	// @ (0xF97 * 8 + 5)
#define                                 ADMSK51_bit         _BIT_ACCESS(SSP1CON2,5)
// ADREF<ADNREF>
extern volatile __bit                   ADNREF              __at(0x7AC4);	// @ (0xF58 * 8 + 4)
#define                                 ADNREF_bit          _BIT_ACCESS(ADREF,4)
// OSCEN<ADOEN>
extern volatile __bit                   ADOEN               __at(0x76E2);	// @ (0xEDC * 8 + 2)
#define                                 ADOEN_bit           _BIT_ACCESS(OSCEN,2)
// ADCON0<ADON>
extern volatile __bit                   ADON                __at(0x7B07);	// @ (0xF60 * 8 + 7)
#define                                 ADON_bit            _BIT_ACCESS(ADCON0,7)
// OSCSTAT<ADOR>
extern volatile __bit                   ADOR                __at(0x76DA);	// @ (0xEDB * 8 + 2)
#define                                 ADOR_bit            _BIT_ACCESS(OSCSTAT,2)
// ADPCH<ADPCH0>
extern volatile __bit                   ADPCH0              __at(0x7AF8);	// @ (0xF5F * 8 + 0)
#define                                 ADPCH0_bit          _BIT_ACCESS(ADPCH,0)
// ADPCH<ADPCH1>
extern volatile __bit                   ADPCH1              __at(0x7AF9);	// @ (0xF5F * 8 + 1)
#define                                 ADPCH1_bit          _BIT_ACCESS(ADPCH,1)
// ADPCH<ADPCH2>
extern volatile __bit                   ADPCH2              __at(0x7AFA);	// @ (0xF5F * 8 + 2)
#define                                 ADPCH2_bit          _BIT_ACCESS(ADPCH,2)
// ADPCH<ADPCH3>
extern volatile __bit                   ADPCH3              __at(0x7AFB);	// @ (0xF5F * 8 + 3)
#define                                 ADPCH3_bit          _BIT_ACCESS(ADPCH,3)
// ADPCH<ADPCH4>
extern volatile __bit                   ADPCH4              __at(0x7AFC);	// @ (0xF5F * 8 + 4)
#define                                 ADPCH4_bit          _BIT_ACCESS(ADPCH,4)
// ADPCH<ADPCH5>
extern volatile __bit                   ADPCH5              __at(0x7AFD);	// @ (0xF5F * 8 + 5)
#define                                 ADPCH5_bit          _BIT_ACCESS(ADPCH,5)
// ADCON1<ADPPOL>
extern volatile __bit                   ADPPOL              __at(0x7ACF);	// @ (0xF59 * 8 + 7)
#define                                 ADPPOL_bit          _BIT_ACCESS(ADCON1,7)
// ADPRE<ADPRE0>
extern volatile __bit                   ADPRE0              __at(0x7AF0);	// @ (0xF5E * 8 + 0)
#define                                 ADPRE0_bit          _BIT_ACCESS(ADPRE,0)
// ADPRE<ADPRE1>
extern volatile __bit                   ADPRE1              __at(0x7AF1);	// @ (0xF5E * 8 + 1)
#define                                 ADPRE1_bit          _BIT_ACCESS(ADPRE,1)
// ADPRE<ADPRE2>
extern volatile __bit                   ADPRE2              __at(0x7AF2);	// @ (0xF5E * 8 + 2)
#define                                 ADPRE2_bit          _BIT_ACCESS(ADPRE,2)
// ADPRE<ADPRE3>
extern volatile __bit                   ADPRE3              __at(0x7AF3);	// @ (0xF5E * 8 + 3)
#define                                 ADPRE3_bit          _BIT_ACCESS(ADPRE,3)
// ADPRE<ADPRE4>
extern volatile __bit                   ADPRE4              __at(0x7AF4);	// @ (0xF5E * 8 + 4)
#define                                 ADPRE4_bit          _BIT_ACCESS(ADPRE,4)
// ADPRE<ADPRE5>
extern volatile __bit                   ADPRE5              __at(0x7AF5);	// @ (0xF5E * 8 + 5)
#define                                 ADPRE5_bit          _BIT_ACCESS(ADPRE,5)
// ADPRE<ADPRE6>
extern volatile __bit                   ADPRE6              __at(0x7AF6);	// @ (0xF5E * 8 + 6)
#define                                 ADPRE6_bit          _BIT_ACCESS(ADPRE,6)
// ADPRE<ADPRE7>
extern volatile __bit                   ADPRE7              __at(0x7AF7);	// @ (0xF5E * 8 + 7)
#define                                 ADPRE7_bit          _BIT_ACCESS(ADPRE,7)
// ADREF<ADPREF0>
extern volatile __bit                   ADPREF0             __at(0x7AC0);	// @ (0xF58 * 8 + 0)
#define                                 ADPREF0_bit         _BIT_ACCESS(ADREF,0)
// ADREF<ADPREF1>
extern volatile __bit                   ADPREF1             __at(0x7AC1);	// @ (0xF58 * 8 + 1)
#define                                 ADPREF1_bit         _BIT_ACCESS(ADREF,1)
// ADPREVL<ADPREV0>
extern volatile __bit                   ADPREV0             __at(0x7B08);	// @ (0xF61 * 8 + 0)
#define                                 ADPREV0_bit         _BIT_ACCESS(ADPREVL,0)
// ADPREVL<ADPREV1>
extern volatile __bit                   ADPREV1             __at(0x7B09);	// @ (0xF61 * 8 + 1)
#define                                 ADPREV1_bit         _BIT_ACCESS(ADPREVL,1)
// ADPREVH<ADPREV10>
extern volatile __bit                   ADPREV10            __at(0x7B12);	// @ (0xF62 * 8 + 2)
#define                                 ADPREV10_bit        _BIT_ACCESS(ADPREVH,2)
// ADPREVH<ADPREV11>
extern volatile __bit                   ADPREV11            __at(0x7B13);	// @ (0xF62 * 8 + 3)
#define                                 ADPREV11_bit        _BIT_ACCESS(ADPREVH,3)
// ADPREVH<ADPREV12>
extern volatile __bit                   ADPREV12            __at(0x7B14);	// @ (0xF62 * 8 + 4)
#define                                 ADPREV12_bit        _BIT_ACCESS(ADPREVH,4)
// ADPREVH<ADPREV13>
extern volatile __bit                   ADPREV13            __at(0x7B15);	// @ (0xF62 * 8 + 5)
#define                                 ADPREV13_bit        _BIT_ACCESS(ADPREVH,5)
// ADPREVH<ADPREV14>
extern volatile __bit                   ADPREV14            __at(0x7B16);	// @ (0xF62 * 8 + 6)
#define                                 ADPREV14_bit        _BIT_ACCESS(ADPREVH,6)
// ADPREVH<ADPREV15>
extern volatile __bit                   ADPREV15            __at(0x7B17);	// @ (0xF62 * 8 + 7)
#define                                 ADPREV15_bit        _BIT_ACCESS(ADPREVH,7)
// ADPREVL<ADPREV2>
extern volatile __bit                   ADPREV2             __at(0x7B0A);	// @ (0xF61 * 8 + 2)
#define                                 ADPREV2_bit         _BIT_ACCESS(ADPREVL,2)
// ADPREVL<ADPREV3>
extern volatile __bit                   ADPREV3             __at(0x7B0B);	// @ (0xF61 * 8 + 3)
#define                                 ADPREV3_bit         _BIT_ACCESS(ADPREVL,3)
// ADPREVL<ADPREV4>
extern volatile __bit                   ADPREV4             __at(0x7B0C);	// @ (0xF61 * 8 + 4)
#define                                 ADPREV4_bit         _BIT_ACCESS(ADPREVL,4)
// ADPREVL<ADPREV5>
extern volatile __bit                   ADPREV5             __at(0x7B0D);	// @ (0xF61 * 8 + 5)
#define                                 ADPREV5_bit         _BIT_ACCESS(ADPREVL,5)
// ADPREVL<ADPREV6>
extern volatile __bit                   ADPREV6             __at(0x7B0E);	// @ (0xF61 * 8 + 6)
#define                                 ADPREV6_bit         _BIT_ACCESS(ADPREVL,6)
// ADPREVL<ADPREV7>
extern volatile __bit                   ADPREV7             __at(0x7B0F);	// @ (0xF61 * 8 + 7)
#define                                 ADPREV7_bit         _BIT_ACCESS(ADPREVL,7)
// ADPREVH<ADPREV8>
extern volatile __bit                   ADPREV8             __at(0x7B10);	// @ (0xF62 * 8 + 0)
#define                                 ADPREV8_bit         _BIT_ACCESS(ADPREVH,0)
// ADPREVH<ADPREV9>
extern volatile __bit                   ADPREV9             __at(0x7B11);	// @ (0xF62 * 8 + 1)
#define                                 ADPREV9_bit         _BIT_ACCESS(ADPREVH,1)
// ADCON2<ADPSIS>
extern volatile __bit                   ADPSIS              __at(0x7AD7);	// @ (0xF5A * 8 + 7)
#define                                 ADPSIS_bit          _BIT_ACCESS(ADCON2,7)
// NVMADR<ADR0>
extern volatile __bit                   ADR0                __at(0x7BF0);	// @ (0xF7E * 8 + 0)
#define                                 ADR0_bit            _BIT_ACCESS(NVMADR,0)
// NVMADR<ADR1>
extern volatile __bit                   ADR1                __at(0x7BF1);	// @ (0xF7E * 8 + 1)
#define                                 ADR1_bit            _BIT_ACCESS(NVMADR,1)
// NVMADR<ADR2>
extern volatile __bit                   ADR2                __at(0x7BF2);	// @ (0xF7E * 8 + 2)
#define                                 ADR2_bit            _BIT_ACCESS(NVMADR,2)
// NVMADR<ADR3>
extern volatile __bit                   ADR3                __at(0x7BF3);	// @ (0xF7E * 8 + 3)
#define                                 ADR3_bit            _BIT_ACCESS(NVMADR,3)
// NVMADR<ADR4>
extern volatile __bit                   ADR4                __at(0x7BF4);	// @ (0xF7E * 8 + 4)
#define                                 ADR4_bit            _BIT_ACCESS(NVMADR,4)
// NVMADR<ADR5>
extern volatile __bit                   ADR5                __at(0x7BF5);	// @ (0xF7E * 8 + 5)
#define                                 ADR5_bit            _BIT_ACCESS(NVMADR,5)
// NVMADR<ADR6>
extern volatile __bit                   ADR6                __at(0x7BF6);	// @ (0xF7E * 8 + 6)
#define                                 ADR6_bit            _BIT_ACCESS(NVMADR,6)
// NVMADR<ADR7>
extern volatile __bit                   ADR7                __at(0x7BF7);	// @ (0xF7E * 8 + 7)
#define                                 ADR7_bit            _BIT_ACCESS(NVMADR,7)
// ADRESL<ADRES0>
extern volatile __bit                   ADRES0              __at(0x7B18);	// @ (0xF63 * 8 + 0)
#define                                 ADRES0_bit          _BIT_ACCESS(ADRESL,0)
// ADRESL<ADRES1>
extern volatile __bit                   ADRES1              __at(0x7B19);	// @ (0xF63 * 8 + 1)
#define                                 ADRES1_bit          _BIT_ACCESS(ADRESL,1)
// ADRESH<ADRES10>
extern volatile __bit                   ADRES10             __at(0x7B22);	// @ (0xF64 * 8 + 2)
#define                                 ADRES10_bit         _BIT_ACCESS(ADRESH,2)
// ADRESH<ADRES11>
extern volatile __bit                   ADRES11             __at(0x7B23);	// @ (0xF64 * 8 + 3)
#define                                 ADRES11_bit         _BIT_ACCESS(ADRESH,3)
// ADRESH<ADRES12>
extern volatile __bit                   ADRES12             __at(0x7B24);	// @ (0xF64 * 8 + 4)
#define                                 ADRES12_bit         _BIT_ACCESS(ADRESH,4)
// ADRESH<ADRES13>
extern volatile __bit                   ADRES13             __at(0x7B25);	// @ (0xF64 * 8 + 5)
#define                                 ADRES13_bit         _BIT_ACCESS(ADRESH,5)
// ADRESH<ADRES14>
extern volatile __bit                   ADRES14             __at(0x7B26);	// @ (0xF64 * 8 + 6)
#define                                 ADRES14_bit         _BIT_ACCESS(ADRESH,6)
// ADRESH<ADRES15>
extern volatile __bit                   ADRES15             __at(0x7B27);	// @ (0xF64 * 8 + 7)
#define                                 ADRES15_bit         _BIT_ACCESS(ADRESH,7)
// ADRESL<ADRES2>
extern volatile __bit                   ADRES2              __at(0x7B1A);	// @ (0xF63 * 8 + 2)
#define                                 ADRES2_bit          _BIT_ACCESS(ADRESL,2)
// ADRESL<ADRES3>
extern volatile __bit                   ADRES3              __at(0x7B1B);	// @ (0xF63 * 8 + 3)
#define                                 ADRES3_bit          _BIT_ACCESS(ADRESL,3)
// ADRESL<ADRES4>
extern volatile __bit                   ADRES4              __at(0x7B1C);	// @ (0xF63 * 8 + 4)
#define                                 ADRES4_bit          _BIT_ACCESS(ADRESL,4)
// ADRESL<ADRES5>
extern volatile __bit                   ADRES5              __at(0x7B1D);	// @ (0xF63 * 8 + 5)
#define                                 ADRES5_bit          _BIT_ACCESS(ADRESL,5)
// ADRESL<ADRES6>
extern volatile __bit                   ADRES6              __at(0x7B1E);	// @ (0xF63 * 8 + 6)
#define                                 ADRES6_bit          _BIT_ACCESS(ADRESL,6)
// ADRESL<ADRES7>
extern volatile __bit                   ADRES7              __at(0x7B1F);	// @ (0xF63 * 8 + 7)
#define                                 ADRES7_bit          _BIT_ACCESS(ADRESL,7)
// ADRESH<ADRES8>
extern volatile __bit                   ADRES8              __at(0x7B20);	// @ (0xF64 * 8 + 0)
#define                                 ADRES8_bit          _BIT_ACCESS(ADRESH,0)
// ADRESH<ADRES9>
extern volatile __bit                   ADRES9              __at(0x7B21);	// @ (0xF64 * 8 + 1)
#define                                 ADRES9_bit          _BIT_ACCESS(ADRESH,1)
// ADRPT<ADRPT0>
extern volatile __bit                   ADRPT0              __at(0x7B30);	// @ (0xF66 * 8 + 0)
#define                                 ADRPT0_bit          _BIT_ACCESS(ADRPT,0)
// ADRPT<ADRPT1>
extern volatile __bit                   ADRPT1              __at(0x7B31);	// @ (0xF66 * 8 + 1)
#define                                 ADRPT1_bit          _BIT_ACCESS(ADRPT,1)
// ADRPT<ADRPT2>
extern volatile __bit                   ADRPT2              __at(0x7B32);	// @ (0xF66 * 8 + 2)
#define                                 ADRPT2_bit          _BIT_ACCESS(ADRPT,2)
// ADRPT<ADRPT3>
extern volatile __bit                   ADRPT3              __at(0x7B33);	// @ (0xF66 * 8 + 3)
#define                                 ADRPT3_bit          _BIT_ACCESS(ADRPT,3)
// ADRPT<ADRPT4>
extern volatile __bit                   ADRPT4              __at(0x7B34);	// @ (0xF66 * 8 + 4)
#define                                 ADRPT4_bit          _BIT_ACCESS(ADRPT,4)
// ADRPT<ADRPT5>
extern volatile __bit                   ADRPT5              __at(0x7B35);	// @ (0xF66 * 8 + 5)
#define                                 ADRPT5_bit          _BIT_ACCESS(ADRPT,5)
// ADRPT<ADRPT6>
extern volatile __bit                   ADRPT6              __at(0x7B36);	// @ (0xF66 * 8 + 6)
#define                                 ADRPT6_bit          _BIT_ACCESS(ADRPT,6)
// ADRPT<ADRPT7>
extern volatile __bit                   ADRPT7              __at(0x7B37);	// @ (0xF66 * 8 + 7)
#define                                 ADRPT7_bit          _BIT_ACCESS(ADRPT,7)
// ADCON3<ADSOI>
extern volatile __bit                   ADSOI               __at(0x7ADB);	// @ (0xF5B * 8 + 3)
#define                                 ADSOI_bit           _BIT_ACCESS(ADCON3,3)
// ADSTAT<ADSTAT0>
extern volatile __bit                   ADSTAT0             __at(0x7B28);	// @ (0xF65 * 8 + 0)
#define                                 ADSTAT0_bit         _BIT_ACCESS(ADSTAT,0)
// ADSTAT<ADSTAT1>
extern volatile __bit                   ADSTAT1             __at(0x7B29);	// @ (0xF65 * 8 + 1)
#define                                 ADSTAT1_bit         _BIT_ACCESS(ADSTAT,1)
// ADSTAT<ADSTAT2>
extern volatile __bit                   ADSTAT2             __at(0x7B2A);	// @ (0xF65 * 8 + 2)
#define                                 ADSTAT2_bit         _BIT_ACCESS(ADSTAT,2)
// ADSTPTL<ADSTPT0>
extern volatile __bit                   ADSTPT0             __at(0x7B40);	// @ (0xF68 * 8 + 0)
#define                                 ADSTPT0_bit         _BIT_ACCESS(ADSTPTL,0)
// ADSTPTL<ADSTPT1>
extern volatile __bit                   ADSTPT1             __at(0x7B41);	// @ (0xF68 * 8 + 1)
#define                                 ADSTPT1_bit         _BIT_ACCESS(ADSTPTL,1)
// ADSTPTH<ADSTPT10>
extern volatile __bit                   ADSTPT10            __at(0x7B4A);	// @ (0xF69 * 8 + 2)
#define                                 ADSTPT10_bit        _BIT_ACCESS(ADSTPTH,2)
// ADSTPTH<ADSTPT11>
extern volatile __bit                   ADSTPT11            __at(0x7B4B);	// @ (0xF69 * 8 + 3)
#define                                 ADSTPT11_bit        _BIT_ACCESS(ADSTPTH,3)
// ADSTPTH<ADSTPT12>
extern volatile __bit                   ADSTPT12            __at(0x7B4C);	// @ (0xF69 * 8 + 4)
#define                                 ADSTPT12_bit        _BIT_ACCESS(ADSTPTH,4)
// ADSTPTH<ADSTPT13>
extern volatile __bit                   ADSTPT13            __at(0x7B4D);	// @ (0xF69 * 8 + 5)
#define                                 ADSTPT13_bit        _BIT_ACCESS(ADSTPTH,5)
// ADSTPTH<ADSTPT14>
extern volatile __bit                   ADSTPT14            __at(0x7B4E);	// @ (0xF69 * 8 + 6)
#define                                 ADSTPT14_bit        _BIT_ACCESS(ADSTPTH,6)
// ADSTPTH<ADSTPT15>
extern volatile __bit                   ADSTPT15            __at(0x7B4F);	// @ (0xF69 * 8 + 7)
#define                                 ADSTPT15_bit        _BIT_ACCESS(ADSTPTH,7)
// ADSTPTL<ADSTPT2>
extern volatile __bit                   ADSTPT2             __at(0x7B42);	// @ (0xF68 * 8 + 2)
#define                                 ADSTPT2_bit         _BIT_ACCESS(ADSTPTL,2)
// ADSTPTL<ADSTPT3>
extern volatile __bit                   ADSTPT3             __at(0x7B43);	// @ (0xF68 * 8 + 3)
#define                                 ADSTPT3_bit         _BIT_ACCESS(ADSTPTL,3)
// ADSTPTL<ADSTPT4>
extern volatile __bit                   ADSTPT4             __at(0x7B44);	// @ (0xF68 * 8 + 4)
#define                                 ADSTPT4_bit         _BIT_ACCESS(ADSTPTL,4)
// ADSTPTL<ADSTPT5>
extern volatile __bit                   ADSTPT5             __at(0x7B45);	// @ (0xF68 * 8 + 5)
#define                                 ADSTPT5_bit         _BIT_ACCESS(ADSTPTL,5)
// ADSTPTL<ADSTPT6>
extern volatile __bit                   ADSTPT6             __at(0x7B46);	// @ (0xF68 * 8 + 6)
#define                                 ADSTPT6_bit         _BIT_ACCESS(ADSTPTL,6)
// ADSTPTL<ADSTPT7>
extern volatile __bit                   ADSTPT7             __at(0x7B47);	// @ (0xF68 * 8 + 7)
#define                                 ADSTPT7_bit         _BIT_ACCESS(ADSTPTL,7)
// ADSTPTH<ADSTPT8>
extern volatile __bit                   ADSTPT8             __at(0x7B48);	// @ (0xF69 * 8 + 0)
#define                                 ADSTPT8_bit         _BIT_ACCESS(ADSTPTH,0)
// ADSTPTH<ADSTPT9>
extern volatile __bit                   ADSTPT9             __at(0x7B49);	// @ (0xF69 * 8 + 1)
#define                                 ADSTPT9_bit         _BIT_ACCESS(ADSTPTH,1)
// PIE1<ADTIE>
extern volatile __bit                   ADTIE               __at(0x7619);	// @ (0xEC3 * 8 + 1)
#define                                 ADTIE_bit           _BIT_ACCESS(PIE1,1)
// PIR1<ADTIF>
extern volatile __bit                   ADTIF               __at(0x7659);	// @ (0xECB * 8 + 1)
#define                                 ADTIF_bit           _BIT_ACCESS(PIR1,1)
// IPR1<ADTIP>
extern volatile __bit                   ADTIP               __at(0x75D9);	// @ (0xEBB * 8 + 1)
#define                                 ADTIP_bit           _BIT_ACCESS(IPR1,1)
// ADCON3<ADTMD0>
extern volatile __bit                   ADTMD0              __at(0x7AD8);	// @ (0xF5B * 8 + 0)
#define                                 ADTMD0_bit          _BIT_ACCESS(ADCON3,0)
// ADCON3<ADTMD1>
extern volatile __bit                   ADTMD1              __at(0x7AD9);	// @ (0xF5B * 8 + 1)
#define                                 ADTMD1_bit          _BIT_ACCESS(ADCON3,1)
// ADCON3<ADTMD2>
extern volatile __bit                   ADTMD2              __at(0x7ADA);	// @ (0xF5B * 8 + 2)
#define                                 ADTMD2_bit          _BIT_ACCESS(ADCON3,2)
// ADUTHL<ADUTH0>
extern volatile __bit                   ADUTH0              __at(0x7B60);	// @ (0xF6C * 8 + 0)
#define                                 ADUTH0_bit          _BIT_ACCESS(ADUTHL,0)
// ADUTHL<ADUTH1>
extern volatile __bit                   ADUTH1              __at(0x7B61);	// @ (0xF6C * 8 + 1)
#define                                 ADUTH1_bit          _BIT_ACCESS(ADUTHL,1)
// ADUTHH<ADUTH10>
extern volatile __bit                   ADUTH10             __at(0x7B6A);	// @ (0xF6D * 8 + 2)
#define                                 ADUTH10_bit         _BIT_ACCESS(ADUTHH,2)
// ADUTHH<ADUTH11>
extern volatile __bit                   ADUTH11             __at(0x7B6B);	// @ (0xF6D * 8 + 3)
#define                                 ADUTH11_bit         _BIT_ACCESS(ADUTHH,3)
// ADUTHH<ADUTH12>
extern volatile __bit                   ADUTH12             __at(0x7B6C);	// @ (0xF6D * 8 + 4)
#define                                 ADUTH12_bit         _BIT_ACCESS(ADUTHH,4)
// ADUTHH<ADUTH13>
extern volatile __bit                   ADUTH13             __at(0x7B6D);	// @ (0xF6D * 8 + 5)
#define                                 ADUTH13_bit         _BIT_ACCESS(ADUTHH,5)
// ADUTHH<ADUTH14>
extern volatile __bit                   ADUTH14             __at(0x7B6E);	// @ (0xF6D * 8 + 6)
#define                                 ADUTH14_bit         _BIT_ACCESS(ADUTHH,6)
// ADUTHH<ADUTH15>
extern volatile __bit                   ADUTH15             __at(0x7B6F);	// @ (0xF6D * 8 + 7)
#define                                 ADUTH15_bit         _BIT_ACCESS(ADUTHH,7)
// ADUTHL<ADUTH2>
extern volatile __bit                   ADUTH2              __at(0x7B62);	// @ (0xF6C * 8 + 2)
#define                                 ADUTH2_bit          _BIT_ACCESS(ADUTHL,2)
// ADUTHL<ADUTH3>
extern volatile __bit                   ADUTH3              __at(0x7B63);	// @ (0xF6C * 8 + 3)
#define                                 ADUTH3_bit          _BIT_ACCESS(ADUTHL,3)
// ADUTHL<ADUTH4>
extern volatile __bit                   ADUTH4              __at(0x7B64);	// @ (0xF6C * 8 + 4)
#define                                 ADUTH4_bit          _BIT_ACCESS(ADUTHL,4)
// ADUTHL<ADUTH5>
extern volatile __bit                   ADUTH5              __at(0x7B65);	// @ (0xF6C * 8 + 5)
#define                                 ADUTH5_bit          _BIT_ACCESS(ADUTHL,5)
// ADUTHL<ADUTH6>
extern volatile __bit                   ADUTH6              __at(0x7B66);	// @ (0xF6C * 8 + 6)
#define                                 ADUTH6_bit          _BIT_ACCESS(ADUTHL,6)
// ADUTHL<ADUTH7>
extern volatile __bit                   ADUTH7              __at(0x7B67);	// @ (0xF6C * 8 + 7)
#define                                 ADUTH7_bit          _BIT_ACCESS(ADUTHL,7)
// ADUTHH<ADUTH8>
extern volatile __bit                   ADUTH8              __at(0x7B68);	// @ (0xF6D * 8 + 0)
#define                                 ADUTH8_bit          _BIT_ACCESS(ADUTHH,0)
// ADUTHH<ADUTH9>
extern volatile __bit                   ADUTH9              __at(0x7B69);	// @ (0xF6D * 8 + 1)
#define                                 ADUTH9_bit          _BIT_ACCESS(ADUTHH,1)
// ADSTAT<ADUTHR>
extern volatile __bit                   ADUTHR              __at(0x7B2E);	// @ (0xF65 * 8 + 6)
#define                                 ADUTHR_bit          _BIT_ACCESS(ADSTAT,6)
// SSP1CON3<AHEN>
extern volatile __bit                   AHEN                __at(0x7CC1);	// @ (0xF98 * 8 + 1)
#define                                 AHEN_bit            _BIT_ACCESS(SSP1CON3,1)
// ANSELA<ANSELA0>
extern volatile __bit                   ANSELA0             __at(0x7888);	// @ (0xF11 * 8 + 0)
#define                                 ANSELA0_bit         _BIT_ACCESS(ANSELA,0)
// ANSELA<ANSELA1>
extern volatile __bit                   ANSELA1             __at(0x7889);	// @ (0xF11 * 8 + 1)
#define                                 ANSELA1_bit         _BIT_ACCESS(ANSELA,1)
// ANSELA<ANSELA2>
extern volatile __bit                   ANSELA2             __at(0x788A);	// @ (0xF11 * 8 + 2)
#define                                 ANSELA2_bit         _BIT_ACCESS(ANSELA,2)
// ANSELA<ANSELA3>
extern volatile __bit                   ANSELA3             __at(0x788B);	// @ (0xF11 * 8 + 3)
#define                                 ANSELA3_bit         _BIT_ACCESS(ANSELA,3)
// ANSELA<ANSELA4>
extern volatile __bit                   ANSELA4             __at(0x788C);	// @ (0xF11 * 8 + 4)
#define                                 ANSELA4_bit         _BIT_ACCESS(ANSELA,4)
// ANSELA<ANSELA5>
extern volatile __bit                   ANSELA5             __at(0x788D);	// @ (0xF11 * 8 + 5)
#define                                 ANSELA5_bit         _BIT_ACCESS(ANSELA,5)
// ANSELA<ANSELA6>
extern volatile __bit                   ANSELA6             __at(0x788E);	// @ (0xF11 * 8 + 6)
#define                                 ANSELA6_bit         _BIT_ACCESS(ANSELA,6)
// ANSELA<ANSELA7>
extern volatile __bit                   ANSELA7             __at(0x788F);	// @ (0xF11 * 8 + 7)
#define                                 ANSELA7_bit         _BIT_ACCESS(ANSELA,7)
// ANSELB<ANSELB0>
extern volatile __bit                   ANSELB0             __at(0x78C8);	// @ (0xF19 * 8 + 0)
#define                                 ANSELB0_bit         _BIT_ACCESS(ANSELB,0)
// ANSELB<ANSELB1>
extern volatile __bit                   ANSELB1             __at(0x78C9);	// @ (0xF19 * 8 + 1)
#define                                 ANSELB1_bit         _BIT_ACCESS(ANSELB,1)
// ANSELB<ANSELB2>
extern volatile __bit                   ANSELB2             __at(0x78CA);	// @ (0xF19 * 8 + 2)
#define                                 ANSELB2_bit         _BIT_ACCESS(ANSELB,2)
// ANSELB<ANSELB3>
extern volatile __bit                   ANSELB3             __at(0x78CB);	// @ (0xF19 * 8 + 3)
#define                                 ANSELB3_bit         _BIT_ACCESS(ANSELB,3)
// ANSELB<ANSELB4>
extern volatile __bit                   ANSELB4             __at(0x78CC);	// @ (0xF19 * 8 + 4)
#define                                 ANSELB4_bit         _BIT_ACCESS(ANSELB,4)
// ANSELB<ANSELB5>
extern volatile __bit                   ANSELB5             __at(0x78CD);	// @ (0xF19 * 8 + 5)
#define                                 ANSELB5_bit         _BIT_ACCESS(ANSELB,5)
// ANSELB<ANSELB6>
extern volatile __bit                   ANSELB6             __at(0x78CE);	// @ (0xF19 * 8 + 6)
#define                                 ANSELB6_bit         _BIT_ACCESS(ANSELB,6)
// ANSELB<ANSELB7>
extern volatile __bit                   ANSELB7             __at(0x78CF);	// @ (0xF19 * 8 + 7)
#define                                 ANSELB7_bit         _BIT_ACCESS(ANSELB,7)
// ANSELC<ANSELC0>
extern volatile __bit                   ANSELC0             __at(0x7908);	// @ (0xF21 * 8 + 0)
#define                                 ANSELC0_bit         _BIT_ACCESS(ANSELC,0)
// ANSELC<ANSELC1>
extern volatile __bit                   ANSELC1             __at(0x7909);	// @ (0xF21 * 8 + 1)
#define                                 ANSELC1_bit         _BIT_ACCESS(ANSELC,1)
// ANSELC<ANSELC2>
extern volatile __bit                   ANSELC2             __at(0x790A);	// @ (0xF21 * 8 + 2)
#define                                 ANSELC2_bit         _BIT_ACCESS(ANSELC,2)
// ANSELC<ANSELC3>
extern volatile __bit                   ANSELC3             __at(0x790B);	// @ (0xF21 * 8 + 3)
#define                                 ANSELC3_bit         _BIT_ACCESS(ANSELC,3)
// ANSELC<ANSELC4>
extern volatile __bit                   ANSELC4             __at(0x790C);	// @ (0xF21 * 8 + 4)
#define                                 ANSELC4_bit         _BIT_ACCESS(ANSELC,4)
// ANSELC<ANSELC5>
extern volatile __bit                   ANSELC5             __at(0x790D);	// @ (0xF21 * 8 + 5)
#define                                 ANSELC5_bit         _BIT_ACCESS(ANSELC,5)
// ANSELC<ANSELC6>
extern volatile __bit                   ANSELC6             __at(0x790E);	// @ (0xF21 * 8 + 6)
#define                                 ANSELC6_bit         _BIT_ACCESS(ANSELC,6)
// ANSELC<ANSELC7>
extern volatile __bit                   ANSELC7             __at(0x790F);	// @ (0xF21 * 8 + 7)
#define                                 ANSELC7_bit         _BIT_ACCESS(ANSELC,7)
// CWG1AS1<AS0E>
extern volatile __bit                   AS0E                __at(0x7A38);	// @ (0xF47 * 8 + 0)
#define                                 AS0E_bit            _BIT_ACCESS(CWG1AS1,0)
// CWG1AS1<AS1E>
extern volatile __bit                   AS1E                __at(0x7A39);	// @ (0xF47 * 8 + 1)
#define                                 AS1E_bit            _BIT_ACCESS(CWG1AS1,1)
// CWG1AS1<AS2E>
extern volatile __bit                   AS2E                __at(0x7A3A);	// @ (0xF47 * 8 + 2)
#define                                 AS2E_bit            _BIT_ACCESS(CWG1AS1,2)
// CWG1AS1<AS3E>
extern volatile __bit                   AS3E                __at(0x7A3B);	// @ (0xF47 * 8 + 3)
#define                                 AS3E_bit            _BIT_ACCESS(CWG1AS1,3)
// CWG1AS1<AS4E>
extern volatile __bit                   AS4E                __at(0x7A3C);	// @ (0xF47 * 8 + 4)
#define                                 AS4E_bit            _BIT_ACCESS(CWG1AS1,4)
// CWG1AS1<AS5E>
extern volatile __bit                   AS5E                __at(0x7A3D);	// @ (0xF47 * 8 + 5)
#define                                 AS5E_bit            _BIT_ACCESS(CWG1AS1,5)
// PIE3<BCL1IE>
extern volatile __bit                   BCL1IE              __at(0x7629);	// @ (0xEC5 * 8 + 1)
#define                                 BCL1IE_bit          _BIT_ACCESS(PIE3,1)
// PIR3<BCL1IF>
extern volatile __bit                   BCL1IF              __at(0x7669);	// @ (0xECD * 8 + 1)
#define                                 BCL1IF_bit          _BIT_ACCESS(PIR3,1)
// IPR3<BCL1IP>
extern volatile __bit                   BCL1IP              __at(0x75E9);	// @ (0xEBD * 8 + 1)
#define                                 BCL1IP_bit          _BIT_ACCESS(IPR3,1)
// PIE3<BCLIE>
extern volatile __bit                   BCLIE               __at(0x7629);	// @ (0xEC5 * 8 + 1)
#define                                 BCLIE_bit           _BIT_ACCESS(PIE3,1)
// PIR3<BCLIF>
extern volatile __bit                   BCLIF               __at(0x7669);	// @ (0xECD * 8 + 1)
#define                                 BCLIF_bit           _BIT_ACCESS(PIR3,1)
// IPR3<BCLIP>
extern volatile __bit                   BCLIP               __at(0x75E9);	// @ (0xEBD * 8 + 1)
#define                                 BCLIP_bit           _BIT_ACCESS(IPR3,1)
// SSP1STAT<BF>
extern volatile __bit                   BF                  __at(0x7CA8);	// @ (0xF95 * 8 + 0)
#define                                 BF_bit              _BIT_ACCESS(SSP1STAT,0)
// SSP1STAT<BF1>
extern volatile __bit                   BF1                 __at(0x7CA8);	// @ (0xF95 * 8 + 0)
#define                                 BF1_bit             _BIT_ACCESS(SSP1STAT,0)
// MDCON0<BIT>
extern volatile __bit                   BIT                 __at(0x7A88);	// @ (0xF51 * 8 + 0)
#define                                 BIT_bit             _BIT_ACCESS(MDCON0,0)
// SSP1CON3<BOEN>
extern volatile __bit                   BOEN                __at(0x7CC4);	// @ (0xF98 * 8 + 4)
#define                                 BOEN_bit            _BIT_ACCESS(SSP1CON3,4)
// PCON0<BOR>
extern volatile __bit                   BOR                 __at(0x7EB8);	// @ (0xFD7 * 8 + 0)
#define                                 BOR_bit             _BIT_ACCESS(PCON0,0)
// BORCON<BORRDY>
extern volatile __bit                   BORRDY              __at(0x7700);	// @ (0xEE0 * 8 + 0)
#define                                 BORRDY_bit          _BIT_ACCESS(BORCON,0)
// BAUD1CON<BRG16>
extern volatile __bit                   BRG16               __at(0x7CFB);	// @ (0xF9F * 8 + 3)
#define                                 BRG16_bit           _BIT_ACCESS(BAUD1CON,3)
// BAUD1CON<BRG161>
extern volatile __bit                   BRG161              __at(0x7CFB);	// @ (0xF9F * 8 + 3)
#define                                 BRG161_bit          _BIT_ACCESS(BAUD1CON,3)
// TX1STA<BRGH>
extern volatile __bit                   BRGH                __at(0x7CF2);	// @ (0xF9E * 8 + 2)
#define                                 BRGH_bit            _BIT_ACCESS(TX1STA,2)
// TX1STA<BRGH1>
extern volatile __bit                   BRGH1               __at(0x7CF2);	// @ (0xF9E * 8 + 2)
#define                                 BRGH1_bit           _BIT_ACCESS(TX1STA,2)
// CM1CON0<C1EN>
extern volatile __bit                   C1EN                __at(0x79CF);	// @ (0xF39 * 8 + 7)
#define                                 C1EN_bit            _BIT_ACCESS(CM1CON0,7)
// CM1CON0<C1HYS>
extern volatile __bit                   C1HYS               __at(0x79C9);	// @ (0xF39 * 8 + 1)
#define                                 C1HYS_bit           _BIT_ACCESS(CM1CON0,1)
// PIE2<C1IE>
extern volatile __bit                   C1IE                __at(0x7620);	// @ (0xEC4 * 8 + 0)
#define                                 C1IE_bit            _BIT_ACCESS(PIE2,0)
// PIR2<C1IF>
extern volatile __bit                   C1IF                __at(0x7660);	// @ (0xECC * 8 + 0)
#define                                 C1IF_bit            _BIT_ACCESS(PIR2,0)
// CM1CON1<C1INTN>
extern volatile __bit                   C1INTN              __at(0x79D0);	// @ (0xF3A * 8 + 0)
#define                                 C1INTN_bit          _BIT_ACCESS(CM1CON1,0)
// CM1CON1<C1INTP>
extern volatile __bit                   C1INTP              __at(0x79D1);	// @ (0xF3A * 8 + 1)
#define                                 C1INTP_bit          _BIT_ACCESS(CM1CON1,1)
// IPR2<C1IP>
extern volatile __bit                   C1IP                __at(0x75E0);	// @ (0xEBC * 8 + 0)
#define                                 C1IP_bit            _BIT_ACCESS(IPR2,0)
// CM1NCH<C1NCH0>
extern volatile __bit                   C1NCH0              __at(0x79D8);	// @ (0xF3B * 8 + 0)
#define                                 C1NCH0_bit          _BIT_ACCESS(CM1NCH,0)
// CM1NCH<C1NCH1>
extern volatile __bit                   C1NCH1              __at(0x79D9);	// @ (0xF3B * 8 + 1)
#define                                 C1NCH1_bit          _BIT_ACCESS(CM1NCH,1)
// CM1NCH<C1NCH2>
extern volatile __bit                   C1NCH2              __at(0x79DA);	// @ (0xF3B * 8 + 2)
#define                                 C1NCH2_bit          _BIT_ACCESS(CM1NCH,2)
// CM1CON0<C1OUT>
extern volatile __bit                   C1OUT               __at(0x79CE);	// @ (0xF39 * 8 + 6)
#define                                 C1OUT_bit           _BIT_ACCESS(CM1CON0,6)
// CM1PCH<C1PCH0>
extern volatile __bit                   C1PCH0              __at(0x79E0);	// @ (0xF3C * 8 + 0)
#define                                 C1PCH0_bit          _BIT_ACCESS(CM1PCH,0)
// CM1PCH<C1PCH1>
extern volatile __bit                   C1PCH1              __at(0x79E1);	// @ (0xF3C * 8 + 1)
#define                                 C1PCH1_bit          _BIT_ACCESS(CM1PCH,1)
// CM1PCH<C1PCH2>
extern volatile __bit                   C1PCH2              __at(0x79E2);	// @ (0xF3C * 8 + 2)
#define                                 C1PCH2_bit          _BIT_ACCESS(CM1PCH,2)
// CM1CON0<C1POL>
extern volatile __bit                   C1POL               __at(0x79CC);	// @ (0xF39 * 8 + 4)
#define                                 C1POL_bit           _BIT_ACCESS(CM1CON0,4)
// CM1CON0<C1SYNC>
extern volatile __bit                   C1SYNC              __at(0x79C8);	// @ (0xF39 * 8 + 0)
#define                                 C1SYNC_bit          _BIT_ACCESS(CM1CON0,0)
// CCPTMRS<C1TSEL0>
extern volatile __bit                   C1TSEL0             __at(0x7D70);	// @ (0xFAE * 8 + 0)
#define                                 C1TSEL0_bit         _BIT_ACCESS(CCPTMRS,0)
// CCPTMRS<C1TSEL1>
extern volatile __bit                   C1TSEL1             __at(0x7D71);	// @ (0xFAE * 8 + 1)
#define                                 C1TSEL1_bit         _BIT_ACCESS(CCPTMRS,1)
// CM2CON0<C2EN>
extern volatile __bit                   C2EN                __at(0x79AF);	// @ (0xF35 * 8 + 7)
#define                                 C2EN_bit            _BIT_ACCESS(CM2CON0,7)
// CM2CON0<C2HYS>
extern volatile __bit                   C2HYS               __at(0x79A9);	// @ (0xF35 * 8 + 1)
#define                                 C2HYS_bit           _BIT_ACCESS(CM2CON0,1)
// PIE2<C2IE>
extern volatile __bit                   C2IE                __at(0x7621);	// @ (0xEC4 * 8 + 1)
#define                                 C2IE_bit            _BIT_ACCESS(PIE2,1)
// PIR2<C2IF>
extern volatile __bit                   C2IF                __at(0x7661);	// @ (0xECC * 8 + 1)
#define                                 C2IF_bit            _BIT_ACCESS(PIR2,1)
// CM2CON1<C2INTN>
extern volatile __bit                   C2INTN              __at(0x79B0);	// @ (0xF36 * 8 + 0)
#define                                 C2INTN_bit          _BIT_ACCESS(CM2CON1,0)
// CM2CON1<C2INTP>
extern volatile __bit                   C2INTP              __at(0x79B1);	// @ (0xF36 * 8 + 1)
#define                                 C2INTP_bit          _BIT_ACCESS(CM2CON1,1)
// IPR2<C2IP>
extern volatile __bit                   C2IP                __at(0x75E1);	// @ (0xEBC * 8 + 1)
#define                                 C2IP_bit            _BIT_ACCESS(IPR2,1)
// CM2NCH<C2NCH0>
extern volatile __bit                   C2NCH0              __at(0x79B8);	// @ (0xF37 * 8 + 0)
#define                                 C2NCH0_bit          _BIT_ACCESS(CM2NCH,0)
// CM2NCH<C2NCH1>
extern volatile __bit                   C2NCH1              __at(0x79B9);	// @ (0xF37 * 8 + 1)
#define                                 C2NCH1_bit          _BIT_ACCESS(CM2NCH,1)
// CM2NCH<C2NCH2>
extern volatile __bit                   C2NCH2              __at(0x79BA);	// @ (0xF37 * 8 + 2)
#define                                 C2NCH2_bit          _BIT_ACCESS(CM2NCH,2)
// CM2CON0<C2OUT>
extern volatile __bit                   C2OUT               __at(0x79AE);	// @ (0xF35 * 8 + 6)
#define                                 C2OUT_bit           _BIT_ACCESS(CM2CON0,6)
// CM2PCH<C2PCH0>
extern volatile __bit                   C2PCH0              __at(0x79C0);	// @ (0xF38 * 8 + 0)
#define                                 C2PCH0_bit          _BIT_ACCESS(CM2PCH,0)
// CM2PCH<C2PCH1>
extern volatile __bit                   C2PCH1              __at(0x79C1);	// @ (0xF38 * 8 + 1)
#define                                 C2PCH1_bit          _BIT_ACCESS(CM2PCH,1)
// CM2PCH<C2PCH2>
extern volatile __bit                   C2PCH2              __at(0x79C2);	// @ (0xF38 * 8 + 2)
#define                                 C2PCH2_bit          _BIT_ACCESS(CM2PCH,2)
// CM2CON0<C2POL>
extern volatile __bit                   C2POL               __at(0x79AC);	// @ (0xF35 * 8 + 4)
#define                                 C2POL_bit           _BIT_ACCESS(CM2CON0,4)
// CM2CON0<C2SYNC>
extern volatile __bit                   C2SYNC              __at(0x79A8);	// @ (0xF35 * 8 + 0)
#define                                 C2SYNC_bit          _BIT_ACCESS(CM2CON0,0)
// CCPTMRS<C2TSEL0>
extern volatile __bit                   C2TSEL0             __at(0x7D72);	// @ (0xFAE * 8 + 2)
#define                                 C2TSEL0_bit         _BIT_ACCESS(CCPTMRS,2)
// CCPTMRS<C2TSEL1>
extern volatile __bit                   C2TSEL1             __at(0x7D73);	// @ (0xFAE * 8 + 3)
#define                                 C2TSEL1_bit         _BIT_ACCESS(CCPTMRS,3)
// TMR1L<CAL01>
extern volatile __bit                   CAL01               __at(0x7E68);	// @ (0xFCD * 8 + 0)
#define                                 CAL01_bit           _BIT_ACCESS(TMR1L,0)
// TMR3L<CAL03>
extern volatile __bit                   CAL03               __at(0x7E38);	// @ (0xFC7 * 8 + 0)
#define                                 CAL03_bit           _BIT_ACCESS(TMR3L,0)
// TMR5L<CAL05>
extern volatile __bit                   CAL05               __at(0x7E08);	// @ (0xFC1 * 8 + 0)
#define                                 CAL05_bit           _BIT_ACCESS(TMR5L,0)
// TMR1L<CAL11>
extern volatile __bit                   CAL11               __at(0x7E69);	// @ (0xFCD * 8 + 1)
#define                                 CAL11_bit           _BIT_ACCESS(TMR1L,1)
// TMR3L<CAL13>
extern volatile __bit                   CAL13               __at(0x7E39);	// @ (0xFC7 * 8 + 1)
#define                                 CAL13_bit           _BIT_ACCESS(TMR3L,1)
// TMR5L<CAL15>
extern volatile __bit                   CAL15               __at(0x7E09);	// @ (0xFC1 * 8 + 1)
#define                                 CAL15_bit           _BIT_ACCESS(TMR5L,1)
// TMR1L<CAL21>
extern volatile __bit                   CAL21               __at(0x7E6A);	// @ (0xFCD * 8 + 2)
#define                                 CAL21_bit           _BIT_ACCESS(TMR1L,2)
// TMR3L<CAL23>
extern volatile __bit                   CAL23               __at(0x7E3A);	// @ (0xFC7 * 8 + 2)
#define                                 CAL23_bit           _BIT_ACCESS(TMR3L,2)
// TMR5L<CAL25>
extern volatile __bit                   CAL25               __at(0x7E0A);	// @ (0xFC1 * 8 + 2)
#define                                 CAL25_bit           _BIT_ACCESS(TMR5L,2)
// TMR1L<CAL31>
extern volatile __bit                   CAL31               __at(0x7E6B);	// @ (0xFCD * 8 + 3)
#define                                 CAL31_bit           _BIT_ACCESS(TMR1L,3)
// TMR3L<CAL33>
extern volatile __bit                   CAL33               __at(0x7E3B);	// @ (0xFC7 * 8 + 3)
#define                                 CAL33_bit           _BIT_ACCESS(TMR3L,3)
// TMR5L<CAL35>
extern volatile __bit                   CAL35               __at(0x7E0B);	// @ (0xFC1 * 8 + 3)
#define                                 CAL35_bit           _BIT_ACCESS(TMR5L,3)
// TMR1L<CAL41>
extern volatile __bit                   CAL41               __at(0x7E6C);	// @ (0xFCD * 8 + 4)
#define                                 CAL41_bit           _BIT_ACCESS(TMR1L,4)
// TMR3L<CAL43>
extern volatile __bit                   CAL43               __at(0x7E3C);	// @ (0xFC7 * 8 + 4)
#define                                 CAL43_bit           _BIT_ACCESS(TMR3L,4)
// TMR5L<CAL45>
extern volatile __bit                   CAL45               __at(0x7E0C);	// @ (0xFC1 * 8 + 4)
#define                                 CAL45_bit           _BIT_ACCESS(TMR5L,4)
// TMR1L<CAL51>
extern volatile __bit                   CAL51               __at(0x7E6D);	// @ (0xFCD * 8 + 5)
#define                                 CAL51_bit           _BIT_ACCESS(TMR1L,5)
// TMR3L<CAL53>
extern volatile __bit                   CAL53               __at(0x7E3D);	// @ (0xFC7 * 8 + 5)
#define                                 CAL53_bit           _BIT_ACCESS(TMR3L,5)
// TMR5L<CAL55>
extern volatile __bit                   CAL55               __at(0x7E0D);	// @ (0xFC1 * 8 + 5)
#define                                 CAL55_bit           _BIT_ACCESS(TMR5L,5)
// TMR1L<CAL61>
extern volatile __bit                   CAL61               __at(0x7E6E);	// @ (0xFCD * 8 + 6)
#define                                 CAL61_bit           _BIT_ACCESS(TMR1L,6)
// TMR3L<CAL63>
extern volatile __bit                   CAL63               __at(0x7E3E);	// @ (0xFC7 * 8 + 6)
#define                                 CAL63_bit           _BIT_ACCESS(TMR3L,6)
// TMR5L<CAL65>
extern volatile __bit                   CAL65               __at(0x7E0E);	// @ (0xFC1 * 8 + 6)
#define                                 CAL65_bit           _BIT_ACCESS(TMR5L,6)
// TMR1L<CAL71>
extern volatile __bit                   CAL71               __at(0x7E6F);	// @ (0xFCD * 8 + 7)
#define                                 CAL71_bit           _BIT_ACCESS(TMR1L,7)
// TMR3L<CAL73>
extern volatile __bit                   CAL73               __at(0x7E3F);	// @ (0xFC7 * 8 + 7)
#define                                 CAL73_bit           _BIT_ACCESS(TMR3L,7)
// TMR5L<CAL75>
extern volatile __bit                   CAL75               __at(0x7E0F);	// @ (0xFC1 * 8 + 7)
#define                                 CAL75_bit           _BIT_ACCESS(TMR5L,7)
// STATUS<CARRY>
extern volatile __bit                   CARRY               __at(0x7EC0);	// @ (0xFD8 * 8 + 0)
#define                                 CARRY_bit           _BIT_ACCESS(STATUS,0)
// IPR5<CCH05>
extern volatile __bit                   CCH05               __at(0x75F8);	// @ (0xEBF * 8 + 0)
#define                                 CCH05_bit           _BIT_ACCESS(IPR5,0)
// IPR5<CCH15>
extern volatile __bit                   CCH15               __at(0x75F9);	// @ (0xEBF * 8 + 1)
#define                                 CCH15_bit           _BIT_ACCESS(IPR5,1)
// IPR4<CCIP3IP>
extern volatile __bit                   CCIP3IP             __at(0x75F0);	// @ (0xEBE * 8 + 0)
#define                                 CCIP3IP_bit         _BIT_ACCESS(IPR4,0)
// CCP1CAP<CCP1CTS0>
extern volatile __bit                   CCP1CTS0            __at(0x7D68);	// @ (0xFAD * 8 + 0)
#define                                 CCP1CTS0_bit        _BIT_ACCESS(CCP1CAP,0)
// CCP1CAP<CCP1CTS1>
extern volatile __bit                   CCP1CTS1            __at(0x7D69);	// @ (0xFAD * 8 + 1)
#define                                 CCP1CTS1_bit        _BIT_ACCESS(CCP1CAP,1)
// CCP1CON<CCP1EN>
extern volatile __bit                   CCP1EN              __at(0x7D67);	// @ (0xFAC * 8 + 7)
#define                                 CCP1EN_bit          _BIT_ACCESS(CCP1CON,7)
// CCP1CON<CCP1FMT>
extern volatile __bit                   CCP1FMT             __at(0x7D64);	// @ (0xFAC * 8 + 4)
#define                                 CCP1FMT_bit         _BIT_ACCESS(CCP1CON,4)
// PIE6<CCP1IE>
extern volatile __bit                   CCP1IE              __at(0x7640);	// @ (0xEC8 * 8 + 0)
#define                                 CCP1IE_bit          _BIT_ACCESS(PIE6,0)
// PIR6<CCP1IF>
extern volatile __bit                   CCP1IF              __at(0x7680);	// @ (0xED0 * 8 + 0)
#define                                 CCP1IF_bit          _BIT_ACCESS(PIR6,0)
// IPR6<CCP1IP>
extern volatile __bit                   CCP1IP              __at(0x7600);	// @ (0xEC0 * 8 + 0)
#define                                 CCP1IP_bit          _BIT_ACCESS(IPR6,0)
// PMD3<CCP1MD>
extern volatile __bit                   CCP1MD              __at(0x7720);	// @ (0xEE4 * 8 + 0)
#define                                 CCP1MD_bit          _BIT_ACCESS(PMD3,0)
// CCP1CON<CCP1MODE0>
extern volatile __bit                   CCP1MODE0           __at(0x7D60);	// @ (0xFAC * 8 + 0)
#define                                 CCP1MODE0_bit       _BIT_ACCESS(CCP1CON,0)
// CCP1CON<CCP1MODE1>
extern volatile __bit                   CCP1MODE1           __at(0x7D61);	// @ (0xFAC * 8 + 1)
#define                                 CCP1MODE1_bit       _BIT_ACCESS(CCP1CON,1)
// CCP1CON<CCP1MODE2>
extern volatile __bit                   CCP1MODE2           __at(0x7D62);	// @ (0xFAC * 8 + 2)
#define                                 CCP1MODE2_bit       _BIT_ACCESS(CCP1CON,2)
// CCP1CON<CCP1MODE3>
extern volatile __bit                   CCP1MODE3           __at(0x7D63);	// @ (0xFAC * 8 + 3)
#define                                 CCP1MODE3_bit       _BIT_ACCESS(CCP1CON,3)
// CCP1CON<CCP1OUT>
extern volatile __bit                   CCP1OUT             __at(0x7D65);	// @ (0xFAC * 8 + 5)
#define                                 CCP1OUT_bit         _BIT_ACCESS(CCP1CON,5)
// CCP1PPS<CCP1PPS0>
extern volatile __bit                   CCP1PPS0            __at(0x7578);	// @ (0xEAF * 8 + 0)
#define                                 CCP1PPS0_bit        _BIT_ACCESS(CCP1PPS,0)
// CCP1PPS<CCP1PPS1>
extern volatile __bit                   CCP1PPS1            __at(0x7579);	// @ (0xEAF * 8 + 1)
#define                                 CCP1PPS1_bit        _BIT_ACCESS(CCP1PPS,1)
// CCP1PPS<CCP1PPS2>
extern volatile __bit                   CCP1PPS2            __at(0x757A);	// @ (0xEAF * 8 + 2)
#define                                 CCP1PPS2_bit        _BIT_ACCESS(CCP1PPS,2)
// CCP1PPS<CCP1PPS3>
extern volatile __bit                   CCP1PPS3            __at(0x757B);	// @ (0xEAF * 8 + 3)
#define                                 CCP1PPS3_bit        _BIT_ACCESS(CCP1PPS,3)
// CCP1PPS<CCP1PPS4>
extern volatile __bit                   CCP1PPS4            __at(0x757C);	// @ (0xEAF * 8 + 4)
#define                                 CCP1PPS4_bit        _BIT_ACCESS(CCP1PPS,4)
// PORTC<CCP2>
extern volatile __bit                   CCP2                __at(0x7C79);	// @ (0xF8F * 8 + 1)
#define                                 CCP2_bit            _BIT_ACCESS(PORTC,1)
// CCP2CAP<CCP2CTS0>
extern volatile __bit                   CCP2CTS0            __at(0x7D48);	// @ (0xFA9 * 8 + 0)
#define                                 CCP2CTS0_bit        _BIT_ACCESS(CCP2CAP,0)
// CCP2CAP<CCP2CTS1>
extern volatile __bit                   CCP2CTS1            __at(0x7D49);	// @ (0xFA9 * 8 + 1)
#define                                 CCP2CTS1_bit        _BIT_ACCESS(CCP2CAP,1)
// CCP2CON<CCP2EN>
extern volatile __bit                   CCP2EN              __at(0x7D47);	// @ (0xFA8 * 8 + 7)
#define                                 CCP2EN_bit          _BIT_ACCESS(CCP2CON,7)
// CCP2CON<CCP2FMT>
extern volatile __bit                   CCP2FMT             __at(0x7D44);	// @ (0xFA8 * 8 + 4)
#define                                 CCP2FMT_bit         _BIT_ACCESS(CCP2CON,4)
// PIE6<CCP2IE>
extern volatile __bit                   CCP2IE              __at(0x7641);	// @ (0xEC8 * 8 + 1)
#define                                 CCP2IE_bit          _BIT_ACCESS(PIE6,1)
// PIR6<CCP2IF>
extern volatile __bit                   CCP2IF              __at(0x7681);	// @ (0xED0 * 8 + 1)
#define                                 CCP2IF_bit          _BIT_ACCESS(PIR6,1)
// IPR6<CCP2IP>
extern volatile __bit                   CCP2IP              __at(0x7601);	// @ (0xEC0 * 8 + 1)
#define                                 CCP2IP_bit          _BIT_ACCESS(IPR6,1)
// PMD3<CCP2MD>
extern volatile __bit                   CCP2MD              __at(0x7721);	// @ (0xEE4 * 8 + 1)
#define                                 CCP2MD_bit          _BIT_ACCESS(PMD3,1)
// CCP2CON<CCP2MODE0>
extern volatile __bit                   CCP2MODE0           __at(0x7D40);	// @ (0xFA8 * 8 + 0)
#define                                 CCP2MODE0_bit       _BIT_ACCESS(CCP2CON,0)
// CCP2CON<CCP2MODE1>
extern volatile __bit                   CCP2MODE1           __at(0x7D41);	// @ (0xFA8 * 8 + 1)
#define                                 CCP2MODE1_bit       _BIT_ACCESS(CCP2CON,1)
// CCP2CON<CCP2MODE2>
extern volatile __bit                   CCP2MODE2           __at(0x7D42);	// @ (0xFA8 * 8 + 2)
#define                                 CCP2MODE2_bit       _BIT_ACCESS(CCP2CON,2)
// CCP2CON<CCP2MODE3>
extern volatile __bit                   CCP2MODE3           __at(0x7D43);	// @ (0xFA8 * 8 + 3)
#define                                 CCP2MODE3_bit       _BIT_ACCESS(CCP2CON,3)
// CCP2CON<CCP2OUT>
extern volatile __bit                   CCP2OUT             __at(0x7D45);	// @ (0xFA8 * 8 + 5)
#define                                 CCP2OUT_bit         _BIT_ACCESS(CCP2CON,5)
// CCP2PPS<CCP2PPS0>
extern volatile __bit                   CCP2PPS0            __at(0x7580);	// @ (0xEB0 * 8 + 0)
#define                                 CCP2PPS0_bit        _BIT_ACCESS(CCP2PPS,0)
// CCP2PPS<CCP2PPS1>
extern volatile __bit                   CCP2PPS1            __at(0x7581);	// @ (0xEB0 * 8 + 1)
#define                                 CCP2PPS1_bit        _BIT_ACCESS(CCP2PPS,1)
// CCP2PPS<CCP2PPS2>
extern volatile __bit                   CCP2PPS2            __at(0x7582);	// @ (0xEB0 * 8 + 2)
#define                                 CCP2PPS2_bit        _BIT_ACCESS(CCP2PPS,2)
// CCP2PPS<CCP2PPS3>
extern volatile __bit                   CCP2PPS3            __at(0x7583);	// @ (0xEB0 * 8 + 3)
#define                                 CCP2PPS3_bit        _BIT_ACCESS(CCP2PPS,3)
// CCP2PPS<CCP2PPS4>
extern volatile __bit                   CCP2PPS4            __at(0x7584);	// @ (0xEB0 * 8 + 4)
#define                                 CCP2PPS4_bit        _BIT_ACCESS(CCP2PPS,4)
// PORTB<CCP2_PA2>
extern volatile __bit                   CCP2_PA2            __at(0x7C73);	// @ (0xF8E * 8 + 3)
#define                                 CCP2_PA2_bit        _BIT_ACCESS(PORTB,3)
// PORTE<CCP9E>
extern volatile __bit                   CCP9E               __at(0x7C8B);	// @ (0xF91 * 8 + 3)
#define                                 CCP9E_bit           _BIT_ACCESS(PORTE,3)
// FVRCON<CDAFVR0>
extern volatile __bit                   CDAFVR0             __at(0x798A);	// @ (0xF31 * 8 + 2)
#define                                 CDAFVR0_bit         _BIT_ACCESS(FVRCON,2)
// FVRCON<CDAFVR1>
extern volatile __bit                   CDAFVR1             __at(0x798B);	// @ (0xF31 * 8 + 3)
#define                                 CDAFVR1_bit         _BIT_ACCESS(FVRCON,3)
// OSCCON2<CDIV0>
extern volatile __bit                   CDIV0               __at(0x76C8);	// @ (0xED9 * 8 + 0)
#define                                 CDIV0_bit           _BIT_ACCESS(OSCCON2,0)
// OSCCON2<CDIV1>
extern volatile __bit                   CDIV1               __at(0x76C9);	// @ (0xED9 * 8 + 1)
#define                                 CDIV1_bit           _BIT_ACCESS(OSCCON2,1)
// OSCCON2<CDIV2>
extern volatile __bit                   CDIV2               __at(0x76CA);	// @ (0xED9 * 8 + 2)
#define                                 CDIV2_bit           _BIT_ACCESS(OSCCON2,2)
// OSCCON2<CDIV3>
extern volatile __bit                   CDIV3               __at(0x76CB);	// @ (0xED9 * 8 + 3)
#define                                 CDIV3_bit           _BIT_ACCESS(OSCCON2,3)
// MDCON1<CHPOL>
extern volatile __bit                   CHPOL               __at(0x7A95);	// @ (0xF52 * 8 + 5)
#define                                 CHPOL_bit           _BIT_ACCESS(MDCON1,5)
// MDCARH<CHS0>
extern volatile __bit                   CHS0                __at(0x7AA8);	// @ (0xF55 * 8 + 0)
#define                                 CHS0_bit            _BIT_ACCESS(MDCARH,0)
// MDCARH<CHS1>
extern volatile __bit                   CHS1                __at(0x7AA9);	// @ (0xF55 * 8 + 1)
#define                                 CHS1_bit            _BIT_ACCESS(MDCARH,1)
// MDCARH<CHS2>
extern volatile __bit                   CHS2                __at(0x7AAA);	// @ (0xF55 * 8 + 2)
#define                                 CHS2_bit            _BIT_ACCESS(MDCARH,2)
// MDCON1<CHSYNC>
extern volatile __bit                   CHSYNC              __at(0x7A94);	// @ (0xF52 * 8 + 4)
#define                                 CHSYNC_bit          _BIT_ACCESS(MDCON1,4)
// SSP1STAT<CKE>
extern volatile __bit                   CKE                 __at(0x7CAE);	// @ (0xF95 * 8 + 6)
#define                                 CKE_bit             _BIT_ACCESS(SSP1STAT,6)
// SSP1STAT<CKE1>
extern volatile __bit                   CKE1                __at(0x7CAE);	// @ (0xF95 * 8 + 6)
#define                                 CKE1_bit            _BIT_ACCESS(SSP1STAT,6)
// SSP1CON1<CKP>
extern volatile __bit                   CKP                 __at(0x7CB4);	// @ (0xF96 * 8 + 4)
#define                                 CKP_bit             _BIT_ACCESS(SSP1CON1,4)
// SSP1CON1<CKP1>
extern volatile __bit                   CKP1                __at(0x7CB4);	// @ (0xF96 * 8 + 4)
#define                                 CKP1_bit            _BIT_ACCESS(SSP1CON1,4)
// BAUD1CON<CKTXP>
extern volatile __bit                   CKTXP               __at(0x7CFC);	// @ (0xF9F * 8 + 4)
#define                                 CKTXP_bit           _BIT_ACCESS(BAUD1CON,4)
// CLKRCLK<CLK0>
extern volatile __bit                   CLK0                __at(0x79F8);	// @ (0xF3F * 8 + 0)
#define                                 CLK0_bit            _BIT_ACCESS(CLKRCLK,0)
// CLKRCLK<CLK1>
extern volatile __bit                   CLK1                __at(0x79F9);	// @ (0xF3F * 8 + 1)
#define                                 CLK1_bit            _BIT_ACCESS(CLKRCLK,1)
// CLKRCLK<CLK2>
extern volatile __bit                   CLK2                __at(0x79FA);	// @ (0xF3F * 8 + 2)
#define                                 CLK2_bit            _BIT_ACCESS(CLKRCLK,2)
// CLKRCLK<CLKRCLK0>
extern volatile __bit                   CLKRCLK0            __at(0x79F8);	// @ (0xF3F * 8 + 0)
#define                                 CLKRCLK0_bit        _BIT_ACCESS(CLKRCLK,0)
// CLKRCLK<CLKRCLK1>
extern volatile __bit                   CLKRCLK1            __at(0x79F9);	// @ (0xF3F * 8 + 1)
#define                                 CLKRCLK1_bit        _BIT_ACCESS(CLKRCLK,1)
// CLKRCLK<CLKRCLK2>
extern volatile __bit                   CLKRCLK2            __at(0x79FA);	// @ (0xF3F * 8 + 2)
#define                                 CLKRCLK2_bit        _BIT_ACCESS(CLKRCLK,2)
// CLKRCON<CLKRDC0>
extern volatile __bit                   CLKRDC0             __at(0x79F3);	// @ (0xF3E * 8 + 3)
#define                                 CLKRDC0_bit         _BIT_ACCESS(CLKRCON,3)
// CLKRCON<CLKRDC1>
extern volatile __bit                   CLKRDC1             __at(0x79F4);	// @ (0xF3E * 8 + 4)
#define                                 CLKRDC1_bit         _BIT_ACCESS(CLKRCON,4)
// CLKRCON<CLKRDIV0>
extern volatile __bit                   CLKRDIV0            __at(0x79F0);	// @ (0xF3E * 8 + 0)
#define                                 CLKRDIV0_bit        _BIT_ACCESS(CLKRCON,0)
// CLKRCON<CLKRDIV1>
extern volatile __bit                   CLKRDIV1            __at(0x79F1);	// @ (0xF3E * 8 + 1)
#define                                 CLKRDIV1_bit        _BIT_ACCESS(CLKRCON,1)
// CLKRCON<CLKRDIV2>
extern volatile __bit                   CLKRDIV2            __at(0x79F2);	// @ (0xF3E * 8 + 2)
#define                                 CLKRDIV2_bit        _BIT_ACCESS(CLKRCON,2)
// CLKRCON<CLKREN>
extern volatile __bit                   CLKREN              __at(0x79F7);	// @ (0xF3E * 8 + 7)
#define                                 CLKREN_bit          _BIT_ACCESS(CLKRCON,7)
// PMD0<CLKRMD>
extern volatile __bit                   CLKRMD              __at(0x7709);	// @ (0xEE1 * 8 + 1)
#define                                 CLKRMD_bit          _BIT_ACCESS(PMD0,1)
// MDCON1<CLPOL>
extern volatile __bit                   CLPOL               __at(0x7A91);	// @ (0xF52 * 8 + 1)
#define                                 CLPOL_bit           _BIT_ACCESS(MDCON1,1)
// MDCARL<CLS0>
extern volatile __bit                   CLS0                __at(0x7AA0);	// @ (0xF54 * 8 + 0)
#define                                 CLS0_bit            _BIT_ACCESS(MDCARL,0)
// MDCARL<CLS1>
extern volatile __bit                   CLS1                __at(0x7AA1);	// @ (0xF54 * 8 + 1)
#define                                 CLS1_bit            _BIT_ACCESS(MDCARL,1)
// MDCARL<CLS2>
extern volatile __bit                   CLS2                __at(0x7AA2);	// @ (0xF54 * 8 + 2)
#define                                 CLS2_bit            _BIT_ACCESS(MDCARL,2)
// MDCON1<CLSYNC>
extern volatile __bit                   CLSYNC              __at(0x7A90);	// @ (0xF52 * 8 + 0)
#define                                 CLSYNC_bit          _BIT_ACCESS(MDCON1,0)
// PIE2<CMIE>
extern volatile __bit                   CMIE                __at(0x7626);	// @ (0xEC4 * 8 + 6)
#define                                 CMIE_bit            _BIT_ACCESS(PIE2,6)
// PIR2<CMIF>
extern volatile __bit                   CMIF                __at(0x7666);	// @ (0xECC * 8 + 6)
#define                                 CMIF_bit            _BIT_ACCESS(PIR2,6)
// IPR2<CMIP>
extern volatile __bit                   CMIP                __at(0x75E6);	// @ (0xEBC * 8 + 6)
#define                                 CMIP_bit            _BIT_ACCESS(IPR2,6)
// PMD2<CMP1MD>
extern volatile __bit                   CMP1MD              __at(0x7719);	// @ (0xEE3 * 8 + 1)
#define                                 CMP1MD_bit          _BIT_ACCESS(PMD2,1)
// PMD2<CMP2MD>
extern volatile __bit                   CMP2MD              __at(0x771A);	// @ (0xEE3 * 8 + 2)
#define                                 CMP2MD_bit          _BIT_ACCESS(PMD2,2)
// OSCCON2<COSC0>
extern volatile __bit                   COSC0               __at(0x76CC);	// @ (0xED9 * 8 + 4)
#define                                 COSC0_bit           _BIT_ACCESS(OSCCON2,4)
// OSCCON2<COSC1>
extern volatile __bit                   COSC1               __at(0x76CD);	// @ (0xED9 * 8 + 5)
#define                                 COSC1_bit           _BIT_ACCESS(OSCCON2,5)
// OSCCON2<COSC2>
extern volatile __bit                   COSC2               __at(0x76CE);	// @ (0xED9 * 8 + 6)
#define                                 COSC2_bit           _BIT_ACCESS(OSCCON2,6)
// CRCCON0<CRCEN>
extern volatile __bit                   CRCEN               __at(0x7BE7);	// @ (0xF7C * 8 + 7)
#define                                 CRCEN_bit           _BIT_ACCESS(CRCCON0,7)
// CRCCON0<CRCGO>
extern volatile __bit                   CRCGO               __at(0x7BE6);	// @ (0xF7C * 8 + 6)
#define                                 CRCGO_bit           _BIT_ACCESS(CRCCON0,6)
// PIE7<CRCIE>
extern volatile __bit                   CRCIE               __at(0x764E);	// @ (0xEC9 * 8 + 6)
#define                                 CRCIE_bit           _BIT_ACCESS(PIE7,6)
// PIR7<CRCIF>
extern volatile __bit                   CRCIF               __at(0x768E);	// @ (0xED1 * 8 + 6)
#define                                 CRCIF_bit           _BIT_ACCESS(PIR7,6)
// IPR7<CRCIP>
extern volatile __bit                   CRCIP               __at(0x760E);	// @ (0xEC1 * 8 + 6)
#define                                 CRCIP_bit           _BIT_ACCESS(IPR7,6)
// PMD0<CRCMD>
extern volatile __bit                   CRCMD               __at(0x770C);	// @ (0xEE1 * 8 + 4)
#define                                 CRCMD_bit           _BIT_ACCESS(PMD0,4)
// RC1STA<CREN>
extern volatile __bit                   CREN                __at(0x7CEC);	// @ (0xF9D * 8 + 4)
#define                                 CREN_bit            _BIT_ACCESS(RC1STA,4)
// CWG1CLK<CS>
extern volatile __bit                   CS                  __at(0x7A00);	// @ (0xF40 * 8 + 0)
#define                                 CS_bit              _BIT_ACCESS(CWG1CLK,0)
// TX1STA<CSRC>
extern volatile __bit                   CSRC                __at(0x7CF7);	// @ (0xF9E * 8 + 7)
#define                                 CSRC_bit            _BIT_ACCESS(TX1STA,7)
// TX1STA<CSRC1>
extern volatile __bit                   CSRC1               __at(0x7CF7);	// @ (0xF9E * 8 + 7)
#define                                 CSRC1_bit           _BIT_ACCESS(TX1STA,7)
// OSCCON3<CSWHOLD>
extern volatile __bit                   CSWHOLD             __at(0x76D7);	// @ (0xEDA * 8 + 7)
#define                                 CSWHOLD_bit         _BIT_ACCESS(OSCCON3,7)
// PIE1<CSWIE>
extern volatile __bit                   CSWIE               __at(0x761E);	// @ (0xEC3 * 8 + 6)
#define                                 CSWIE_bit           _BIT_ACCESS(PIE1,6)
// PIR1<CSWIF>
extern volatile __bit                   CSWIF               __at(0x765E);	// @ (0xECB * 8 + 6)
#define                                 CSWIF_bit           _BIT_ACCESS(PIR1,6)
// IPR1<CSWIP>
extern volatile __bit                   CSWIP               __at(0x75DE);	// @ (0xEBB * 8 + 6)
#define                                 CSWIP_bit           _BIT_ACCESS(IPR1,6)
// CWG1CLK<CWG1CS>
extern volatile __bit                   CWG1CS              __at(0x7A00);	// @ (0xF40 * 8 + 0)
#define                                 CWG1CS_bit          _BIT_ACCESS(CWG1CLK,0)
// CWG1DBF<CWG1DBF0>
extern volatile __bit                   CWG1DBF0            __at(0x7A18);	// @ (0xF43 * 8 + 0)
#define                                 CWG1DBF0_bit        _BIT_ACCESS(CWG1DBF,0)
// CWG1DBF<CWG1DBF1>
extern volatile __bit                   CWG1DBF1            __at(0x7A19);	// @ (0xF43 * 8 + 1)
#define                                 CWG1DBF1_bit        _BIT_ACCESS(CWG1DBF,1)
// CWG1DBF<CWG1DBF2>
extern volatile __bit                   CWG1DBF2            __at(0x7A1A);	// @ (0xF43 * 8 + 2)
#define                                 CWG1DBF2_bit        _BIT_ACCESS(CWG1DBF,2)
// CWG1DBF<CWG1DBF3>
extern volatile __bit                   CWG1DBF3            __at(0x7A1B);	// @ (0xF43 * 8 + 3)
#define                                 CWG1DBF3_bit        _BIT_ACCESS(CWG1DBF,3)
// CWG1DBF<CWG1DBF4>
extern volatile __bit                   CWG1DBF4            __at(0x7A1C);	// @ (0xF43 * 8 + 4)
#define                                 CWG1DBF4_bit        _BIT_ACCESS(CWG1DBF,4)
// CWG1DBF<CWG1DBF5>
extern volatile __bit                   CWG1DBF5            __at(0x7A1D);	// @ (0xF43 * 8 + 5)
#define                                 CWG1DBF5_bit        _BIT_ACCESS(CWG1DBF,5)
// CWG1DBR<CWG1DBR0>
extern volatile __bit                   CWG1DBR0            __at(0x7A10);	// @ (0xF42 * 8 + 0)
#define                                 CWG1DBR0_bit        _BIT_ACCESS(CWG1DBR,0)
// CWG1DBR<CWG1DBR1>
extern volatile __bit                   CWG1DBR1            __at(0x7A11);	// @ (0xF42 * 8 + 1)
#define                                 CWG1DBR1_bit        _BIT_ACCESS(CWG1DBR,1)
// CWG1DBR<CWG1DBR2>
extern volatile __bit                   CWG1DBR2            __at(0x7A12);	// @ (0xF42 * 8 + 2)
#define                                 CWG1DBR2_bit        _BIT_ACCESS(CWG1DBR,2)
// CWG1DBR<CWG1DBR3>
extern volatile __bit                   CWG1DBR3            __at(0x7A13);	// @ (0xF42 * 8 + 3)
#define                                 CWG1DBR3_bit        _BIT_ACCESS(CWG1DBR,3)
// CWG1DBR<CWG1DBR4>
extern volatile __bit                   CWG1DBR4            __at(0x7A14);	// @ (0xF42 * 8 + 4)
#define                                 CWG1DBR4_bit        _BIT_ACCESS(CWG1DBR,4)
// CWG1DBR<CWG1DBR5>
extern volatile __bit                   CWG1DBR5            __at(0x7A15);	// @ (0xF42 * 8 + 5)
#define                                 CWG1DBR5_bit        _BIT_ACCESS(CWG1DBR,5)
// CWG1CON0<CWG1EN>
extern volatile __bit                   CWG1EN              __at(0x7A27);	// @ (0xF44 * 8 + 7)
#define                                 CWG1EN_bit          _BIT_ACCESS(CWG1CON0,7)
// PIE7<CWG1IE>
extern volatile __bit                   CWG1IE              __at(0x7648);	// @ (0xEC9 * 8 + 0)
#define                                 CWG1IE_bit          _BIT_ACCESS(PIE7,0)
// PIR7<CWG1IF>
extern volatile __bit                   CWG1IF              __at(0x7688);	// @ (0xED1 * 8 + 0)
#define                                 CWG1IF_bit          _BIT_ACCESS(PIR7,0)
// CWG1CON1<CWG1IN>
extern volatile __bit                   CWG1IN              __at(0x7A2D);	// @ (0xF45 * 8 + 5)
#define                                 CWG1IN_bit          _BIT_ACCESS(CWG1CON1,5)
// CWG1PPS<CWG1INPPS0>
extern volatile __bit                   CWG1INPPS0          __at(0x7588);	// @ (0xEB1 * 8 + 0)
#define                                 CWG1INPPS0_bit      _BIT_ACCESS(CWG1PPS,0)
// CWG1PPS<CWG1INPPS1>
extern volatile __bit                   CWG1INPPS1          __at(0x7589);	// @ (0xEB1 * 8 + 1)
#define                                 CWG1INPPS1_bit      _BIT_ACCESS(CWG1PPS,1)
// CWG1PPS<CWG1INPPS2>
extern volatile __bit                   CWG1INPPS2          __at(0x758A);	// @ (0xEB1 * 8 + 2)
#define                                 CWG1INPPS2_bit      _BIT_ACCESS(CWG1PPS,2)
// CWG1PPS<CWG1INPPS3>
extern volatile __bit                   CWG1INPPS3          __at(0x758B);	// @ (0xEB1 * 8 + 3)
#define                                 CWG1INPPS3_bit      _BIT_ACCESS(CWG1PPS,3)
// CWG1PPS<CWG1INPPS4>
extern volatile __bit                   CWG1INPPS4          __at(0x758C);	// @ (0xEB1 * 8 + 4)
#define                                 CWG1INPPS4_bit      _BIT_ACCESS(CWG1PPS,4)
// IPR7<CWG1IP>
extern volatile __bit                   CWG1IP              __at(0x7608);	// @ (0xEC1 * 8 + 0)
#define                                 CWG1IP_bit          _BIT_ACCESS(IPR7,0)
// CWG1ISM<CWG1ISM0>
extern volatile __bit                   CWG1ISM0            __at(0x7A08);	// @ (0xF41 * 8 + 0)
#define                                 CWG1ISM0_bit        _BIT_ACCESS(CWG1ISM,0)
// CWG1ISM<CWG1ISM1>
extern volatile __bit                   CWG1ISM1            __at(0x7A09);	// @ (0xF41 * 8 + 1)
#define                                 CWG1ISM1_bit        _BIT_ACCESS(CWG1ISM,1)
// CWG1ISM<CWG1ISM2>
extern volatile __bit                   CWG1ISM2            __at(0x7A0A);	// @ (0xF41 * 8 + 2)
#define                                 CWG1ISM2_bit        _BIT_ACCESS(CWG1ISM,2)
// CWG1CON0<CWG1LD>
extern volatile __bit                   CWG1LD              __at(0x7A26);	// @ (0xF44 * 8 + 6)
#define                                 CWG1LD_bit          _BIT_ACCESS(CWG1CON0,6)
// CWG1AS0<CWG1LSAC0>
extern volatile __bit                   CWG1LSAC0           __at(0x7A32);	// @ (0xF46 * 8 + 2)
#define                                 CWG1LSAC0_bit       _BIT_ACCESS(CWG1AS0,2)
// CWG1AS0<CWG1LSAC1>
extern volatile __bit                   CWG1LSAC1           __at(0x7A33);	// @ (0xF46 * 8 + 3)
#define                                 CWG1LSAC1_bit       _BIT_ACCESS(CWG1AS0,3)
// CWG1AS0<CWG1LSBD0>
extern volatile __bit                   CWG1LSBD0           __at(0x7A34);	// @ (0xF46 * 8 + 4)
#define                                 CWG1LSBD0_bit       _BIT_ACCESS(CWG1AS0,4)
// CWG1AS0<CWG1LSBD1>
extern volatile __bit                   CWG1LSBD1           __at(0x7A35);	// @ (0xF46 * 8 + 5)
#define                                 CWG1LSBD1_bit       _BIT_ACCESS(CWG1AS0,5)
// PMD4<CWG1MD>
extern volatile __bit                   CWG1MD              __at(0x7728);	// @ (0xEE5 * 8 + 0)
#define                                 CWG1MD_bit          _BIT_ACCESS(PMD4,0)
// CWG1CON0<CWG1MODE0>
extern volatile __bit                   CWG1MODE0           __at(0x7A20);	// @ (0xF44 * 8 + 0)
#define                                 CWG1MODE0_bit       _BIT_ACCESS(CWG1CON0,0)
// CWG1CON0<CWG1MODE1>
extern volatile __bit                   CWG1MODE1           __at(0x7A21);	// @ (0xF44 * 8 + 1)
#define                                 CWG1MODE1_bit       _BIT_ACCESS(CWG1CON0,1)
// CWG1CON0<CWG1MODE2>
extern volatile __bit                   CWG1MODE2           __at(0x7A22);	// @ (0xF44 * 8 + 2)
#define                                 CWG1MODE2_bit       _BIT_ACCESS(CWG1CON0,2)
// CWG1STR<CWG1OVRA>
extern volatile __bit                   CWG1OVRA            __at(0x7A44);	// @ (0xF48 * 8 + 4)
#define                                 CWG1OVRA_bit        _BIT_ACCESS(CWG1STR,4)
// CWG1STR<CWG1OVRB>
extern volatile __bit                   CWG1OVRB            __at(0x7A45);	// @ (0xF48 * 8 + 5)
#define                                 CWG1OVRB_bit        _BIT_ACCESS(CWG1STR,5)
// CWG1STR<CWG1OVRC>
extern volatile __bit                   CWG1OVRC            __at(0x7A46);	// @ (0xF48 * 8 + 6)
#define                                 CWG1OVRC_bit        _BIT_ACCESS(CWG1STR,6)
// CWG1STR<CWG1OVRD>
extern volatile __bit                   CWG1OVRD            __at(0x7A47);	// @ (0xF48 * 8 + 7)
#define                                 CWG1OVRD_bit        _BIT_ACCESS(CWG1STR,7)
// CWG1CON1<CWG1POLA>
extern volatile __bit                   CWG1POLA            __at(0x7A28);	// @ (0xF45 * 8 + 0)
#define                                 CWG1POLA_bit        _BIT_ACCESS(CWG1CON1,0)
// CWG1CON1<CWG1POLB>
extern volatile __bit                   CWG1POLB            __at(0x7A29);	// @ (0xF45 * 8 + 1)
#define                                 CWG1POLB_bit        _BIT_ACCESS(CWG1CON1,1)
// CWG1CON1<CWG1POLC>
extern volatile __bit                   CWG1POLC            __at(0x7A2A);	// @ (0xF45 * 8 + 2)
#define                                 CWG1POLC_bit        _BIT_ACCESS(CWG1CON1,2)
// CWG1CON1<CWG1POLD>
extern volatile __bit                   CWG1POLD            __at(0x7A2B);	// @ (0xF45 * 8 + 3)
#define                                 CWG1POLD_bit        _BIT_ACCESS(CWG1CON1,3)
// CWG1AS0<CWG1REN>
extern volatile __bit                   CWG1REN             __at(0x7A36);	// @ (0xF46 * 8 + 6)
#define                                 CWG1REN_bit         _BIT_ACCESS(CWG1AS0,6)
// CWG1AS0<CWG1SHUTDOWN>
extern volatile __bit                   CWG1SHUTDOWN        __at(0x7A37);	// @ (0xF46 * 8 + 7)
#define                                 CWG1SHUTDOWN_bit    _BIT_ACCESS(CWG1AS0,7)
// CWG1STR<CWG1STRA>
extern volatile __bit                   CWG1STRA            __at(0x7A40);	// @ (0xF48 * 8 + 0)
#define                                 CWG1STRA_bit        _BIT_ACCESS(CWG1STR,0)
// CWG1STR<CWG1STRB>
extern volatile __bit                   CWG1STRB            __at(0x7A41);	// @ (0xF48 * 8 + 1)
#define                                 CWG1STRB_bit        _BIT_ACCESS(CWG1STR,1)
// CWG1STR<CWG1STRC>
extern volatile __bit                   CWG1STRC            __at(0x7A42);	// @ (0xF48 * 8 + 2)
#define                                 CWG1STRC_bit        _BIT_ACCESS(CWG1STR,2)
// CWG1STR<CWG1STRD>
extern volatile __bit                   CWG1STRD            __at(0x7A43);	// @ (0xF48 * 8 + 3)
#define                                 CWG1STRD_bit        _BIT_ACCESS(CWG1STR,3)
// PIE7<CWGIE>
extern volatile __bit                   CWGIE               __at(0x7648);	// @ (0xEC9 * 8 + 0)
#define                                 CWGIE_bit           _BIT_ACCESS(PIE7,0)
// PIR7<CWGIF>
extern volatile __bit                   CWGIF               __at(0x7688);	// @ (0xED1 * 8 + 0)
#define                                 CWGIF_bit           _BIT_ACCESS(PIR7,0)
// CWG1PPS<CWGINPPS0>
extern volatile __bit                   CWGINPPS0           __at(0x7588);	// @ (0xEB1 * 8 + 0)
#define                                 CWGINPPS0_bit       _BIT_ACCESS(CWG1PPS,0)
// CWG1PPS<CWGINPPS1>
extern volatile __bit                   CWGINPPS1           __at(0x7589);	// @ (0xEB1 * 8 + 1)
#define                                 CWGINPPS1_bit       _BIT_ACCESS(CWG1PPS,1)
// CWG1PPS<CWGINPPS2>
extern volatile __bit                   CWGINPPS2           __at(0x758A);	// @ (0xEB1 * 8 + 2)
#define                                 CWGINPPS2_bit       _BIT_ACCESS(CWG1PPS,2)
// CWG1PPS<CWGINPPS3>
extern volatile __bit                   CWGINPPS3           __at(0x758B);	// @ (0xEB1 * 8 + 3)
#define                                 CWGINPPS3_bit       _BIT_ACCESS(CWG1PPS,3)
// CWG1PPS<CWGINPPS4>
extern volatile __bit                   CWGINPPS4           __at(0x758C);	// @ (0xEB1 * 8 + 4)
#define                                 CWGINPPS4_bit       _BIT_ACCESS(CWG1PPS,4)
// IPR7<CWGIP>
extern volatile __bit                   CWGIP               __at(0x7608);	// @ (0xEC1 * 8 + 0)
#define                                 CWGIP_bit           _BIT_ACCESS(IPR7,0)
// PMD4<CWGMD>
extern volatile __bit                   CWGMD               __at(0x7728);	// @ (0xEE5 * 8 + 0)
#define                                 CWGMD_bit           _BIT_ACCESS(PMD4,0)
// SSP1STAT<DA>
extern volatile __bit                   DA                  __at(0x7CAD);	// @ (0xF95 * 8 + 5)
#define                                 DA_bit              _BIT_ACCESS(SSP1STAT,5)
// SSP1STAT<DA1>
extern volatile __bit                   DA1                 __at(0x7CAD);	// @ (0xF95 * 8 + 5)
#define                                 DA1_bit             _BIT_ACCESS(SSP1STAT,5)
// SCANCON0<DABORT>
extern volatile __bit                   DABORT              __at(0x7A7C);	// @ (0xF4F * 8 + 4)
#define                                 DABORT_bit          _BIT_ACCESS(SCANCON0,4)
// DAC1CON0<DAC1EN>
extern volatile __bit                   DAC1EN              __at(0x799F);	// @ (0xF33 * 8 + 7)
#define                                 DAC1EN_bit          _BIT_ACCESS(DAC1CON0,7)
// DAC1CON0<DAC1NSS>
extern volatile __bit                   DAC1NSS             __at(0x7998);	// @ (0xF33 * 8 + 0)
#define                                 DAC1NSS_bit         _BIT_ACCESS(DAC1CON0,0)
// DAC1CON0<DAC1OE1>
extern volatile __bit                   DAC1OE1             __at(0x799D);	// @ (0xF33 * 8 + 5)
#define                                 DAC1OE1_bit         _BIT_ACCESS(DAC1CON0,5)
// DAC1CON0<DAC1OE2>
extern volatile __bit                   DAC1OE2             __at(0x799C);	// @ (0xF33 * 8 + 4)
#define                                 DAC1OE2_bit         _BIT_ACCESS(DAC1CON0,4)
// DAC1CON0<DAC1PSS0>
extern volatile __bit                   DAC1PSS0            __at(0x799A);	// @ (0xF33 * 8 + 2)
#define                                 DAC1PSS0_bit        _BIT_ACCESS(DAC1CON0,2)
// DAC1CON0<DAC1PSS1>
extern volatile __bit                   DAC1PSS1            __at(0x799B);	// @ (0xF33 * 8 + 3)
#define                                 DAC1PSS1_bit        _BIT_ACCESS(DAC1CON0,3)
// DAC1CON1<DAC1R0>
extern volatile __bit                   DAC1R0              __at(0x79A0);	// @ (0xF34 * 8 + 0)
#define                                 DAC1R0_bit          _BIT_ACCESS(DAC1CON1,0)
// DAC1CON1<DAC1R1>
extern volatile __bit                   DAC1R1              __at(0x79A1);	// @ (0xF34 * 8 + 1)
#define                                 DAC1R1_bit          _BIT_ACCESS(DAC1CON1,1)
// DAC1CON1<DAC1R2>
extern volatile __bit                   DAC1R2              __at(0x79A2);	// @ (0xF34 * 8 + 2)
#define                                 DAC1R2_bit          _BIT_ACCESS(DAC1CON1,2)
// DAC1CON1<DAC1R3>
extern volatile __bit                   DAC1R3              __at(0x79A3);	// @ (0xF34 * 8 + 3)
#define                                 DAC1R3_bit          _BIT_ACCESS(DAC1CON1,3)
// DAC1CON1<DAC1R4>
extern volatile __bit                   DAC1R4              __at(0x79A4);	// @ (0xF34 * 8 + 4)
#define                                 DAC1R4_bit          _BIT_ACCESS(DAC1CON1,4)
// PMD2<DACMD>
extern volatile __bit                   DACMD               __at(0x771E);	// @ (0xEE3 * 8 + 6)
#define                                 DACMD_bit           _BIT_ACCESS(PMD2,6)
// CRCDATL<DATA0>
extern volatile __bit                   DATA0               __at(0x7BA0);	// @ (0xF74 * 8 + 0)
#define                                 DATA0_bit           _BIT_ACCESS(CRCDATL,0)
// CRCDATL<DATA1>
extern volatile __bit                   DATA1               __at(0x7BA1);	// @ (0xF74 * 8 + 1)
#define                                 DATA1_bit           _BIT_ACCESS(CRCDATL,1)
// CRCDATH<DATA10>
extern volatile __bit                   DATA10              __at(0x7BAA);	// @ (0xF75 * 8 + 2)
#define                                 DATA10_bit          _BIT_ACCESS(CRCDATH,2)
// CRCDATH<DATA11>
extern volatile __bit                   DATA11              __at(0x7BAB);	// @ (0xF75 * 8 + 3)
#define                                 DATA11_bit          _BIT_ACCESS(CRCDATH,3)
// CRCDATH<DATA12>
extern volatile __bit                   DATA12              __at(0x7BAC);	// @ (0xF75 * 8 + 4)
#define                                 DATA12_bit          _BIT_ACCESS(CRCDATH,4)
// CRCDATH<DATA13>
extern volatile __bit                   DATA13              __at(0x7BAD);	// @ (0xF75 * 8 + 5)
#define                                 DATA13_bit          _BIT_ACCESS(CRCDATH,5)
// CRCDATH<DATA14>
extern volatile __bit                   DATA14              __at(0x7BAE);	// @ (0xF75 * 8 + 6)
#define                                 DATA14_bit          _BIT_ACCESS(CRCDATH,6)
// CRCDATH<DATA15>
extern volatile __bit                   DATA15              __at(0x7BAF);	// @ (0xF75 * 8 + 7)
#define                                 DATA15_bit          _BIT_ACCESS(CRCDATH,7)
// CRCDATL<DATA2>
extern volatile __bit                   DATA2               __at(0x7BA2);	// @ (0xF74 * 8 + 2)
#define                                 DATA2_bit           _BIT_ACCESS(CRCDATL,2)
// CRCDATL<DATA3>
extern volatile __bit                   DATA3               __at(0x7BA3);	// @ (0xF74 * 8 + 3)
#define                                 DATA3_bit           _BIT_ACCESS(CRCDATL,3)
// CRCDATL<DATA4>
extern volatile __bit                   DATA4               __at(0x7BA4);	// @ (0xF74 * 8 + 4)
#define                                 DATA4_bit           _BIT_ACCESS(CRCDATL,4)
// CRCDATL<DATA5>
extern volatile __bit                   DATA5               __at(0x7BA5);	// @ (0xF74 * 8 + 5)
#define                                 DATA5_bit           _BIT_ACCESS(CRCDATL,5)
// CRCDATL<DATA6>
extern volatile __bit                   DATA6               __at(0x7BA6);	// @ (0xF74 * 8 + 6)
#define                                 DATA6_bit           _BIT_ACCESS(CRCDATL,6)
// CRCDATL<DATA7>
extern volatile __bit                   DATA7               __at(0x7BA7);	// @ (0xF74 * 8 + 7)
#define                                 DATA7_bit           _BIT_ACCESS(CRCDATL,7)
// CRCDATH<DATA8>
extern volatile __bit                   DATA8               __at(0x7BA8);	// @ (0xF75 * 8 + 0)
#define                                 DATA8_bit           _BIT_ACCESS(CRCDATH,0)
// CRCDATH<DATA9>
extern volatile __bit                   DATA9               __at(0x7BA9);	// @ (0xF75 * 8 + 1)
#define                                 DATA9_bit           _BIT_ACCESS(CRCDATH,1)
// SSP1STAT<DATA_ADDRESS>
extern volatile __bit                   DATA_ADDRESS        __at(0x7CAD);	// @ (0xF95 * 8 + 5)
#define                                 DATA_ADDRESS_bit    _BIT_ACCESS(SSP1STAT,5)
// SSP1STAT<DATA_ADDRESS1>
extern volatile __bit                   DATA_ADDRESS1       __at(0x7CAD);	// @ (0xF95 * 8 + 5)
#define                                 DATA_ADDRESS1_bit   _BIT_ACCESS(SSP1STAT,5)
// CWG1DBF<DBF0>
extern volatile __bit                   DBF0                __at(0x7A18);	// @ (0xF43 * 8 + 0)
#define                                 DBF0_bit            _BIT_ACCESS(CWG1DBF,0)
// CWG1DBF<DBF1>
extern volatile __bit                   DBF1                __at(0x7A19);	// @ (0xF43 * 8 + 1)
#define                                 DBF1_bit            _BIT_ACCESS(CWG1DBF,1)
// CWG1DBF<DBF2>
extern volatile __bit                   DBF2                __at(0x7A1A);	// @ (0xF43 * 8 + 2)
#define                                 DBF2_bit            _BIT_ACCESS(CWG1DBF,2)
// CWG1DBF<DBF3>
extern volatile __bit                   DBF3                __at(0x7A1B);	// @ (0xF43 * 8 + 3)
#define                                 DBF3_bit            _BIT_ACCESS(CWG1DBF,3)
// CWG1DBF<DBF4>
extern volatile __bit                   DBF4                __at(0x7A1C);	// @ (0xF43 * 8 + 4)
#define                                 DBF4_bit            _BIT_ACCESS(CWG1DBF,4)
// CWG1DBF<DBF5>
extern volatile __bit                   DBF5                __at(0x7A1D);	// @ (0xF43 * 8 + 5)
#define                                 DBF5_bit            _BIT_ACCESS(CWG1DBF,5)
// CWG1DBR<DBR0>
extern volatile __bit                   DBR0                __at(0x7A10);	// @ (0xF42 * 8 + 0)
#define                                 DBR0_bit            _BIT_ACCESS(CWG1DBR,0)
// CWG1DBR<DBR1>
extern volatile __bit                   DBR1                __at(0x7A11);	// @ (0xF42 * 8 + 1)
#define                                 DBR1_bit            _BIT_ACCESS(CWG1DBR,1)
// CWG1DBR<DBR2>
extern volatile __bit                   DBR2                __at(0x7A12);	// @ (0xF42 * 8 + 2)
#define                                 DBR2_bit            _BIT_ACCESS(CWG1DBR,2)
// CWG1DBR<DBR3>
extern volatile __bit                   DBR3                __at(0x7A13);	// @ (0xF42 * 8 + 3)
#define                                 DBR3_bit            _BIT_ACCESS(CWG1DBR,3)
// CWG1DBR<DBR4>
extern volatile __bit                   DBR4                __at(0x7A14);	// @ (0xF42 * 8 + 4)
#define                                 DBR4_bit            _BIT_ACCESS(CWG1DBR,4)
// CWG1DBR<DBR5>
extern volatile __bit                   DBR5                __at(0x7A15);	// @ (0xF42 * 8 + 5)
#define                                 DBR5_bit            _BIT_ACCESS(CWG1DBR,5)
// STATUS<DC>
extern volatile __bit                   DC                  __at(0x7EC1);	// @ (0xFD8 * 8 + 1)
#define                                 DC_bit              _BIT_ACCESS(STATUS,1)
// SSP1CON3<DHEN>
extern volatile __bit                   DHEN                __at(0x7CC0);	// @ (0xF98 * 8 + 0)
#define                                 DHEN_bit            _BIT_ACCESS(SSP1CON3,0)
// CLKRCON<DIV0>
extern volatile __bit                   DIV0                __at(0x79F0);	// @ (0xF3E * 8 + 0)
#define                                 DIV0_bit            _BIT_ACCESS(CLKRCON,0)
// CLKRCON<DIV1>
extern volatile __bit                   DIV1                __at(0x79F1);	// @ (0xF3E * 8 + 1)
#define                                 DIV1_bit            _BIT_ACCESS(CLKRCON,1)
// CLKRCON<DIV2>
extern volatile __bit                   DIV2                __at(0x79F2);	// @ (0xF3E * 8 + 2)
#define                                 DIV2_bit            _BIT_ACCESS(CLKRCON,2)
// CRCCON1<DLEN0>
extern volatile __bit                   DLEN0               __at(0x7BEC);	// @ (0xF7D * 8 + 4)
#define                                 DLEN0_bit           _BIT_ACCESS(CRCCON1,4)
// CRCCON1<DLEN1>
extern volatile __bit                   DLEN1               __at(0x7BED);	// @ (0xF7D * 8 + 5)
#define                                 DLEN1_bit           _BIT_ACCESS(CRCCON1,5)
// CRCCON1<DLEN2>
extern volatile __bit                   DLEN2               __at(0x7BEE);	// @ (0xF7D * 8 + 6)
#define                                 DLEN2_bit           _BIT_ACCESS(CRCCON1,6)
// CRCCON1<DLEN3>
extern volatile __bit                   DLEN3               __at(0x7BEF);	// @ (0xF7D * 8 + 7)
#define                                 DLEN3_bit           _BIT_ACCESS(CRCCON1,7)
// CPUDOZE<DOE>
extern volatile __bit                   DOE                 __at(0x76BC);	// @ (0xED7 * 8 + 4)
#define                                 DOE_bit             _BIT_ACCESS(CPUDOZE,4)
// ADCON0<DONE>
extern volatile __bit                   DONE                __at(0x7B00);	// @ (0xF60 * 8 + 0)
#define                                 DONE_bit            _BIT_ACCESS(ADCON0,0)
// CPUDOZE<DOZE0>
extern volatile __bit                   DOZE0               __at(0x76B8);	// @ (0xED7 * 8 + 0)
#define                                 DOZE0_bit           _BIT_ACCESS(CPUDOZE,0)
// CPUDOZE<DOZE1>
extern volatile __bit                   DOZE1               __at(0x76B9);	// @ (0xED7 * 8 + 1)
#define                                 DOZE1_bit           _BIT_ACCESS(CPUDOZE,1)
// CPUDOZE<DOZE2>
extern volatile __bit                   DOZE2               __at(0x76BA);	// @ (0xED7 * 8 + 2)
#define                                 DOZE2_bit           _BIT_ACCESS(CPUDOZE,2)
// CPUDOZE<DOZEN>
extern volatile __bit                   DOZEN               __at(0x76BE);	// @ (0xED7 * 8 + 6)
#define                                 DOZEN_bit           _BIT_ACCESS(CPUDOZE,6)
// PMD5<DSMMD>
extern volatile __bit                   DSMMD               __at(0x7730);	// @ (0xEE6 * 8 + 0)
#define                                 DSMMD_bit           _BIT_ACCESS(PMD5,0)
// SSP1STAT<D_A>
extern volatile __bit                   D_A                 __at(0x7CAD);	// @ (0xF95 * 8 + 5)
#define                                 D_A_bit             _BIT_ACCESS(SSP1STAT,5)
// SSP1STAT<D_A1>
extern volatile __bit                   D_A1                __at(0x7CAD);	// @ (0xF95 * 8 + 5)
#define                                 D_A1_bit            _BIT_ACCESS(SSP1STAT,5)
// SSP1STAT<D_NOT_A>
extern volatile __bit                   D_NOT_A             __at(0x7CAD);	// @ (0xF95 * 8 + 5)
#define                                 D_NOT_A_bit         _BIT_ACCESS(SSP1STAT,5)
// SSP1STAT<D_NOT_A1>
extern volatile __bit                   D_NOT_A1            __at(0x7CAD);	// @ (0xF95 * 8 + 5)
#define                                 D_NOT_A1_bit        _BIT_ACCESS(SSP1STAT,5)
// SSP1STAT<D_nA>
extern volatile __bit                   D_nA                __at(0x7CAD);	// @ (0xF95 * 8 + 5)
#define                                 D_nA_bit            _BIT_ACCESS(SSP1STAT,5)
// SSP1STAT<D_nA1>
extern volatile __bit                   D_nA1               __at(0x7CAD);	// @ (0xF95 * 8 + 5)
#define                                 D_nA1_bit           _BIT_ACCESS(SSP1STAT,5)
// PMD1<EMBMD>
extern volatile __bit                   EMBMD               __at(0x7710);	// @ (0xEE2 * 8 + 0)
#define                                 EMBMD_bit           _BIT_ACCESS(PMD1,0)
// OSCEN<EXTOEN>
extern volatile __bit                   EXTOEN              __at(0x76E7);	// @ (0xEDC * 8 + 7)
#define                                 EXTOEN_bit          _BIT_ACCESS(OSCEN,7)
// OSCSTAT<EXTOR>
extern volatile __bit                   EXTOR               __at(0x76DF);	// @ (0xEDB * 8 + 7)
#define                                 EXTOR_bit           _BIT_ACCESS(OSCSTAT,7)
// RC1STA<FERR>
extern volatile __bit                   FERR                __at(0x7CEA);	// @ (0xF9D * 8 + 2)
#define                                 FERR_bit            _BIT_ACCESS(RC1STA,2)
// NVMCON1<FREE>
extern volatile __bit                   FREE                __at(0x7C0C);	// @ (0xF81 * 8 + 4)
#define                                 FREE_bit            _BIT_ACCESS(NVMCON1,4)
// OSCFRQ<FRQ0>
extern volatile __bit                   FRQ0                __at(0x76F0);	// @ (0xEDE * 8 + 0)
#define                                 FRQ0_bit            _BIT_ACCESS(OSCFRQ,0)
// OSCFRQ<FRQ1>
extern volatile __bit                   FRQ1                __at(0x76F1);	// @ (0xEDE * 8 + 1)
#define                                 FRQ1_bit            _BIT_ACCESS(OSCFRQ,1)
// OSCFRQ<FRQ2>
extern volatile __bit                   FRQ2                __at(0x76F2);	// @ (0xEDE * 8 + 2)
#define                                 FRQ2_bit            _BIT_ACCESS(OSCFRQ,2)
// OSCFRQ<FRQ3>
extern volatile __bit                   FRQ3                __at(0x76F3);	// @ (0xEDE * 8 + 3)
#define                                 FRQ3_bit            _BIT_ACCESS(OSCFRQ,3)
// CRCCON0<FULL>
extern volatile __bit                   FULL                __at(0x7BE0);	// @ (0xF7C * 8 + 0)
#define                                 FULL_bit            _BIT_ACCESS(CRCCON0,0)
// FVRCON<FVREN>
extern volatile __bit                   FVREN               __at(0x798F);	// @ (0xF31 * 8 + 7)
#define                                 FVREN_bit           _BIT_ACCESS(FVRCON,7)
// PMD0<FVRMD>
extern volatile __bit                   FVRMD               __at(0x770E);	// @ (0xEE1 * 8 + 6)
#define                                 FVRMD_bit           _BIT_ACCESS(PMD0,6)
// FVRCON<FVRRDY>
extern volatile __bit                   FVRRDY              __at(0x798E);	// @ (0xF31 * 8 + 6)
#define                                 FVRRDY_bit          _BIT_ACCESS(FVRCON,6)
// CWG1CON0<G1EN>
extern volatile __bit                   G1EN                __at(0x7A27);	// @ (0xF44 * 8 + 7)
#define                                 G1EN_bit            _BIT_ACCESS(CWG1CON0,7)
// SSP1CON2<GCEN>
extern volatile __bit                   GCEN                __at(0x7CBF);	// @ (0xF97 * 8 + 7)
#define                                 GCEN_bit            _BIT_ACCESS(SSP1CON2,7)
// SSP1CON2<GCEN1>
extern volatile __bit                   GCEN1               __at(0x7CBF);	// @ (0xF97 * 8 + 7)
#define                                 GCEN1_bit           _BIT_ACCESS(SSP1CON2,7)
// INTCON<GIE>
extern volatile __bit                   GIE                 __at(0x7F97);	// @ (0xFF2 * 8 + 7)
#define                                 GIE_bit             _BIT_ACCESS(INTCON,7)
// INTCON<GIEH>
extern volatile __bit                   GIEH                __at(0x7F97);	// @ (0xFF2 * 8 + 7)
#define                                 GIEH_bit            _BIT_ACCESS(INTCON,7)
// INTCON<GIEL>
extern volatile __bit                   GIEL                __at(0x7F96);	// @ (0xFF2 * 8 + 6)
#define                                 GIEL_bit            _BIT_ACCESS(INTCON,6)
// INTCON<GIE_GIEH>
extern volatile __bit                   GIE_GIEH            __at(0x7F97);	// @ (0xFF2 * 8 + 7)
#define                                 GIE_GIEH_bit        _BIT_ACCESS(INTCON,7)
// ADCON0<GO_NOT_DONE>
extern volatile __bit                   GO_NOT_DONE         __at(0x7B00);	// @ (0xF60 * 8 + 0)
#define                                 GO_NOT_DONE_bit     _BIT_ACCESS(ADCON0,0)
// ADCON0<GO_nDONE>
extern volatile __bit                   GO_nDONE            __at(0x7B00);	// @ (0xF60 * 8 + 0)
#define                                 GO_nDONE_bit        _BIT_ACCESS(ADCON0,0)
// SCANHADRL<HADR0>
extern volatile __bit                   HADR0               __at(0x7A60);	// @ (0xF4C * 8 + 0)
#define                                 HADR0_bit           _BIT_ACCESS(SCANHADRL,0)
// SCANHADRL<HADR1>
extern volatile __bit                   HADR1               __at(0x7A61);	// @ (0xF4C * 8 + 1)
#define                                 HADR1_bit           _BIT_ACCESS(SCANHADRL,1)
// SCANHADRH<HADR10>
extern volatile __bit                   HADR10              __at(0x7A6A);	// @ (0xF4D * 8 + 2)
#define                                 HADR10_bit          _BIT_ACCESS(SCANHADRH,2)
// SCANHADRH<HADR11>
extern volatile __bit                   HADR11              __at(0x7A6B);	// @ (0xF4D * 8 + 3)
#define                                 HADR11_bit          _BIT_ACCESS(SCANHADRH,3)
// SCANHADRH<HADR12>
extern volatile __bit                   HADR12              __at(0x7A6C);	// @ (0xF4D * 8 + 4)
#define                                 HADR12_bit          _BIT_ACCESS(SCANHADRH,4)
// SCANHADRH<HADR13>
extern volatile __bit                   HADR13              __at(0x7A6D);	// @ (0xF4D * 8 + 5)
#define                                 HADR13_bit          _BIT_ACCESS(SCANHADRH,5)
// SCANHADRH<HADR14>
extern volatile __bit                   HADR14              __at(0x7A6E);	// @ (0xF4D * 8 + 6)
#define                                 HADR14_bit          _BIT_ACCESS(SCANHADRH,6)
// SCANHADRH<HADR15>
extern volatile __bit                   HADR15              __at(0x7A6F);	// @ (0xF4D * 8 + 7)
#define                                 HADR15_bit          _BIT_ACCESS(SCANHADRH,7)
// SCANHADRU<HADR16>
extern volatile __bit                   HADR16              __at(0x7A70);	// @ (0xF4E * 8 + 0)
#define                                 HADR16_bit          _BIT_ACCESS(SCANHADRU,0)
// SCANHADRU<HADR17>
extern volatile __bit                   HADR17              __at(0x7A71);	// @ (0xF4E * 8 + 1)
#define                                 HADR17_bit          _BIT_ACCESS(SCANHADRU,1)
// SCANHADRU<HADR18>
extern volatile __bit                   HADR18              __at(0x7A72);	// @ (0xF4E * 8 + 2)
#define                                 HADR18_bit          _BIT_ACCESS(SCANHADRU,2)
// SCANHADRU<HADR19>
extern volatile __bit                   HADR19              __at(0x7A73);	// @ (0xF4E * 8 + 3)
#define                                 HADR19_bit          _BIT_ACCESS(SCANHADRU,3)
// SCANHADRL<HADR2>
extern volatile __bit                   HADR2               __at(0x7A62);	// @ (0xF4C * 8 + 2)
#define                                 HADR2_bit           _BIT_ACCESS(SCANHADRL,2)
// SCANHADRU<HADR20>
extern volatile __bit                   HADR20              __at(0x7A74);	// @ (0xF4E * 8 + 4)
#define                                 HADR20_bit          _BIT_ACCESS(SCANHADRU,4)
// SCANHADRU<HADR21>
extern volatile __bit                   HADR21              __at(0x7A75);	// @ (0xF4E * 8 + 5)
#define                                 HADR21_bit          _BIT_ACCESS(SCANHADRU,5)
// SCANHADRL<HADR3>
extern volatile __bit                   HADR3               __at(0x7A63);	// @ (0xF4C * 8 + 3)
#define                                 HADR3_bit           _BIT_ACCESS(SCANHADRL,3)
// SCANHADRL<HADR4>
extern volatile __bit                   HADR4               __at(0x7A64);	// @ (0xF4C * 8 + 4)
#define                                 HADR4_bit           _BIT_ACCESS(SCANHADRL,4)
// SCANHADRL<HADR5>
extern volatile __bit                   HADR5               __at(0x7A65);	// @ (0xF4C * 8 + 5)
#define                                 HADR5_bit           _BIT_ACCESS(SCANHADRL,5)
// SCANHADRL<HADR6>
extern volatile __bit                   HADR6               __at(0x7A66);	// @ (0xF4C * 8 + 6)
#define                                 HADR6_bit           _BIT_ACCESS(SCANHADRL,6)
// SCANHADRL<HADR7>
extern volatile __bit                   HADR7               __at(0x7A67);	// @ (0xF4C * 8 + 7)
#define                                 HADR7_bit           _BIT_ACCESS(SCANHADRL,7)
// SCANHADRH<HADR8>
extern volatile __bit                   HADR8               __at(0x7A68);	// @ (0xF4D * 8 + 0)
#define                                 HADR8_bit           _BIT_ACCESS(SCANHADRH,0)
// SCANHADRH<HADR9>
extern volatile __bit                   HADR9               __at(0x7A69);	// @ (0xF4D * 8 + 1)
#define                                 HADR9_bit           _BIT_ACCESS(SCANHADRH,1)
// OSCEN<HFOEN>
extern volatile __bit                   HFOEN               __at(0x76E6);	// @ (0xEDC * 8 + 6)
#define                                 HFOEN_bit           _BIT_ACCESS(OSCEN,6)
// OSCSTAT<HFOR>
extern volatile __bit                   HFOR                __at(0x76DE);	// @ (0xEDB * 8 + 6)
#define                                 HFOR_bit            _BIT_ACCESS(OSCSTAT,6)
// HLVDCON0<HLVDEN>
extern volatile __bit                   HLVDEN              __at(0x797F);	// @ (0xF2F * 8 + 7)
#define                                 HLVDEN_bit          _BIT_ACCESS(HLVDCON0,7)
// PIE2<HLVDIE>
extern volatile __bit                   HLVDIE              __at(0x7627);	// @ (0xEC4 * 8 + 7)
#define                                 HLVDIE_bit          _BIT_ACCESS(PIE2,7)
// PIR2<HLVDIF>
extern volatile __bit                   HLVDIF              __at(0x7667);	// @ (0xECC * 8 + 7)
#define                                 HLVDIF_bit          _BIT_ACCESS(PIR2,7)
// HLVDCON0<HLVDINTH>
extern volatile __bit                   HLVDINTH            __at(0x7979);	// @ (0xF2F * 8 + 1)
#define                                 HLVDINTH_bit        _BIT_ACCESS(HLVDCON0,1)
// HLVDCON0<HLVDINTL>
extern volatile __bit                   HLVDINTL            __at(0x7978);	// @ (0xF2F * 8 + 0)
#define                                 HLVDINTL_bit        _BIT_ACCESS(HLVDCON0,0)
// IPR2<HLVDIP>
extern volatile __bit                   HLVDIP              __at(0x75E7);	// @ (0xEBC * 8 + 7)
#define                                 HLVDIP_bit          _BIT_ACCESS(IPR2,7)
// PMD0<HLVDMD>
extern volatile __bit                   HLVDMD              __at(0x770D);	// @ (0xEE1 * 8 + 5)
#define                                 HLVDMD_bit          _BIT_ACCESS(PMD0,5)
// HLVDCON0<HLVDOUT>
extern volatile __bit                   HLVDOUT             __at(0x797D);	// @ (0xF2F * 8 + 5)
#define                                 HLVDOUT_bit         _BIT_ACCESS(HLVDCON0,5)
// HLVDCON0<HLVDRDY>
extern volatile __bit                   HLVDRDY             __at(0x797C);	// @ (0xF2F * 8 + 4)
#define                                 HLVDRDY_bit         _BIT_ACCESS(HLVDCON0,4)
// HLVDCON1<HLVDSEL0>
extern volatile __bit                   HLVDSEL0            __at(0x7980);	// @ (0xF30 * 8 + 0)
#define                                 HLVDSEL0_bit        _BIT_ACCESS(HLVDCON1,0)
// HLVDCON1<HLVDSEL1>
extern volatile __bit                   HLVDSEL1            __at(0x7981);	// @ (0xF30 * 8 + 1)
#define                                 HLVDSEL1_bit        _BIT_ACCESS(HLVDCON1,1)
// HLVDCON1<HLVDSEL2>
extern volatile __bit                   HLVDSEL2            __at(0x7982);	// @ (0xF30 * 8 + 2)
#define                                 HLVDSEL2_bit        _BIT_ACCESS(HLVDCON1,2)
// HLVDCON1<HLVDSEL3>
extern volatile __bit                   HLVDSEL3            __at(0x7983);	// @ (0xF30 * 8 + 3)
#define                                 HLVDSEL3_bit        _BIT_ACCESS(HLVDCON1,3)
// SSP1STAT<I2C_DAT>
extern volatile __bit                   I2C_DAT             __at(0x7CAD);	// @ (0xF95 * 8 + 5)
#define                                 I2C_DAT_bit         _BIT_ACCESS(SSP1STAT,5)
// SSP1STAT<I2C_DAT1>
extern volatile __bit                   I2C_DAT1            __at(0x7CAD);	// @ (0xF95 * 8 + 5)
#define                                 I2C_DAT1_bit        _BIT_ACCESS(SSP1STAT,5)
// SSP1STAT<I2C_READ>
extern volatile __bit                   I2C_READ            __at(0x7CAA);	// @ (0xF95 * 8 + 2)
#define                                 I2C_READ_bit        _BIT_ACCESS(SSP1STAT,2)
// SSP1STAT<I2C_READ1>
extern volatile __bit                   I2C_READ1           __at(0x7CAA);	// @ (0xF95 * 8 + 2)
#define                                 I2C_READ1_bit       _BIT_ACCESS(SSP1STAT,2)
// SSP1STAT<I2C_START>
extern volatile __bit                   I2C_START           __at(0x7CAB);	// @ (0xF95 * 8 + 3)
#define                                 I2C_START_bit       _BIT_ACCESS(SSP1STAT,3)
// SSP1STAT<I2C_START1>
extern volatile __bit                   I2C_START1          __at(0x7CAB);	// @ (0xF95 * 8 + 3)
#define                                 I2C_START1_bit      _BIT_ACCESS(SSP1STAT,3)
// SSP1STAT<I2C_STOP>
extern volatile __bit                   I2C_STOP            __at(0x7CAC);	// @ (0xF95 * 8 + 4)
#define                                 I2C_STOP_bit        _BIT_ACCESS(SSP1STAT,4)
// SSP1STAT<I2C_STOP2>
extern volatile __bit                   I2C_STOP2           __at(0x7CAC);	// @ (0xF95 * 8 + 4)
#define                                 I2C_STOP2_bit       _BIT_ACCESS(SSP1STAT,4)
// CPUDOZE<IDLEN>
extern volatile __bit                   IDLEN               __at(0x76BF);	// @ (0xED7 * 8 + 7)
#define                                 IDLEN_bit           _BIT_ACCESS(CPUDOZE,7)
// CWG1CON1<IN>
extern volatile __bit                   IN                  __at(0x7A2D);	// @ (0xF45 * 8 + 5)
#define                                 IN_bit              _BIT_ACCESS(CWG1CON1,5)
// INLVLA<INLVLA0>
extern volatile __bit                   INLVLA0             __at(0x7868);	// @ (0xF0D * 8 + 0)
#define                                 INLVLA0_bit         _BIT_ACCESS(INLVLA,0)
// INLVLA<INLVLA1>
extern volatile __bit                   INLVLA1             __at(0x7869);	// @ (0xF0D * 8 + 1)
#define                                 INLVLA1_bit         _BIT_ACCESS(INLVLA,1)
// INLVLA<INLVLA2>
extern volatile __bit                   INLVLA2             __at(0x786A);	// @ (0xF0D * 8 + 2)
#define                                 INLVLA2_bit         _BIT_ACCESS(INLVLA,2)
// INLVLA<INLVLA3>
extern volatile __bit                   INLVLA3             __at(0x786B);	// @ (0xF0D * 8 + 3)
#define                                 INLVLA3_bit         _BIT_ACCESS(INLVLA,3)
// INLVLA<INLVLA4>
extern volatile __bit                   INLVLA4             __at(0x786C);	// @ (0xF0D * 8 + 4)
#define                                 INLVLA4_bit         _BIT_ACCESS(INLVLA,4)
// INLVLA<INLVLA5>
extern volatile __bit                   INLVLA5             __at(0x786D);	// @ (0xF0D * 8 + 5)
#define                                 INLVLA5_bit         _BIT_ACCESS(INLVLA,5)
// INLVLA<INLVLA6>
extern volatile __bit                   INLVLA6             __at(0x786E);	// @ (0xF0D * 8 + 6)
#define                                 INLVLA6_bit         _BIT_ACCESS(INLVLA,6)
// INLVLA<INLVLA7>
extern volatile __bit                   INLVLA7             __at(0x786F);	// @ (0xF0D * 8 + 7)
#define                                 INLVLA7_bit         _BIT_ACCESS(INLVLA,7)
// INLVLB<INLVLB0>
extern volatile __bit                   INLVLB0             __at(0x78A8);	// @ (0xF15 * 8 + 0)
#define                                 INLVLB0_bit         _BIT_ACCESS(INLVLB,0)
// INLVLB<INLVLB1>
extern volatile __bit                   INLVLB1             __at(0x78A9);	// @ (0xF15 * 8 + 1)
#define                                 INLVLB1_bit         _BIT_ACCESS(INLVLB,1)
// INLVLB<INLVLB2>
extern volatile __bit                   INLVLB2             __at(0x78AA);	// @ (0xF15 * 8 + 2)
#define                                 INLVLB2_bit         _BIT_ACCESS(INLVLB,2)
// INLVLB<INLVLB3>
extern volatile __bit                   INLVLB3             __at(0x78AB);	// @ (0xF15 * 8 + 3)
#define                                 INLVLB3_bit         _BIT_ACCESS(INLVLB,3)
// INLVLB<INLVLB4>
extern volatile __bit                   INLVLB4             __at(0x78AC);	// @ (0xF15 * 8 + 4)
#define                                 INLVLB4_bit         _BIT_ACCESS(INLVLB,4)
// INLVLB<INLVLB5>
extern volatile __bit                   INLVLB5             __at(0x78AD);	// @ (0xF15 * 8 + 5)
#define                                 INLVLB5_bit         _BIT_ACCESS(INLVLB,5)
// INLVLB<INLVLB6>
extern volatile __bit                   INLVLB6             __at(0x78AE);	// @ (0xF15 * 8 + 6)
#define                                 INLVLB6_bit         _BIT_ACCESS(INLVLB,6)
// INLVLB<INLVLB7>
extern volatile __bit                   INLVLB7             __at(0x78AF);	// @ (0xF15 * 8 + 7)
#define                                 INLVLB7_bit         _BIT_ACCESS(INLVLB,7)
// INLVLC<INLVLC0>
extern volatile __bit                   INLVLC0             __at(0x78E8);	// @ (0xF1D * 8 + 0)
#define                                 INLVLC0_bit         _BIT_ACCESS(INLVLC,0)
// INLVLC<INLVLC1>
extern volatile __bit                   INLVLC1             __at(0x78E9);	// @ (0xF1D * 8 + 1)
#define                                 INLVLC1_bit         _BIT_ACCESS(INLVLC,1)
// INLVLC<INLVLC2>
extern volatile __bit                   INLVLC2             __at(0x78EA);	// @ (0xF1D * 8 + 2)
#define                                 INLVLC2_bit         _BIT_ACCESS(INLVLC,2)
// INLVLC<INLVLC3>
extern volatile __bit                   INLVLC3             __at(0x78EB);	// @ (0xF1D * 8 + 3)
#define                                 INLVLC3_bit         _BIT_ACCESS(INLVLC,3)
// INLVLC<INLVLC4>
extern volatile __bit                   INLVLC4             __at(0x78EC);	// @ (0xF1D * 8 + 4)
#define                                 INLVLC4_bit         _BIT_ACCESS(INLVLC,4)
// INLVLC<INLVLC5>
extern volatile __bit                   INLVLC5             __at(0x78ED);	// @ (0xF1D * 8 + 5)
#define                                 INLVLC5_bit         _BIT_ACCESS(INLVLC,5)
// INLVLC<INLVLC6>
extern volatile __bit                   INLVLC6             __at(0x78EE);	// @ (0xF1D * 8 + 6)
#define                                 INLVLC6_bit         _BIT_ACCESS(INLVLC,6)
// INLVLC<INLVLC7>
extern volatile __bit                   INLVLC7             __at(0x78EF);	// @ (0xF1D * 8 + 7)
#define                                 INLVLC7_bit         _BIT_ACCESS(INLVLC,7)
// INLVLE<INLVLE3>
extern volatile __bit                   INLVLE3             __at(0x7953);	// @ (0xF2A * 8 + 3)
#define                                 INLVLE3_bit         _BIT_ACCESS(INLVLE,3)
// INTCON<INT0EDG>
extern volatile __bit                   INT0EDG             __at(0x7F90);	// @ (0xFF2 * 8 + 0)
#define                                 INT0EDG_bit         _BIT_ACCESS(INTCON,0)
// PIE0<INT0IE>
extern volatile __bit                   INT0IE              __at(0x7610);	// @ (0xEC2 * 8 + 0)
#define                                 INT0IE_bit          _BIT_ACCESS(PIE0,0)
// PIR0<INT0IF>
extern volatile __bit                   INT0IF              __at(0x7650);	// @ (0xECA * 8 + 0)
#define                                 INT0IF_bit          _BIT_ACCESS(PIR0,0)
// IPR0<INT0IP>
extern volatile __bit                   INT0IP              __at(0x75D0);	// @ (0xEBA * 8 + 0)
#define                                 INT0IP_bit          _BIT_ACCESS(IPR0,0)
// INT0PPS<INT0PPS0>
extern volatile __bit                   INT0PPS0            __at(0x7508);	// @ (0xEA1 * 8 + 0)
#define                                 INT0PPS0_bit        _BIT_ACCESS(INT0PPS,0)
// INT0PPS<INT0PPS1>
extern volatile __bit                   INT0PPS1            __at(0x7509);	// @ (0xEA1 * 8 + 1)
#define                                 INT0PPS1_bit        _BIT_ACCESS(INT0PPS,1)
// INT0PPS<INT0PPS2>
extern volatile __bit                   INT0PPS2            __at(0x750A);	// @ (0xEA1 * 8 + 2)
#define                                 INT0PPS2_bit        _BIT_ACCESS(INT0PPS,2)
// INT0PPS<INT0PPS3>
extern volatile __bit                   INT0PPS3            __at(0x750B);	// @ (0xEA1 * 8 + 3)
#define                                 INT0PPS3_bit        _BIT_ACCESS(INT0PPS,3)
// INTCON<INT1EDG>
extern volatile __bit                   INT1EDG             __at(0x7F91);	// @ (0xFF2 * 8 + 1)
#define                                 INT1EDG_bit         _BIT_ACCESS(INTCON,1)
// PIE0<INT1IE>
extern volatile __bit                   INT1IE              __at(0x7611);	// @ (0xEC2 * 8 + 1)
#define                                 INT1IE_bit          _BIT_ACCESS(PIE0,1)
// PIR0<INT1IF>
extern volatile __bit                   INT1IF              __at(0x7651);	// @ (0xECA * 8 + 1)
#define                                 INT1IF_bit          _BIT_ACCESS(PIR0,1)
// IPR0<INT1IP>
extern volatile __bit                   INT1IP              __at(0x75D1);	// @ (0xEBA * 8 + 1)
#define                                 INT1IP_bit          _BIT_ACCESS(IPR0,1)
// INT1PPS<INT1PPS0>
extern volatile __bit                   INT1PPS0            __at(0x7510);	// @ (0xEA2 * 8 + 0)
#define                                 INT1PPS0_bit        _BIT_ACCESS(INT1PPS,0)
// INT1PPS<INT1PPS1>
extern volatile __bit                   INT1PPS1            __at(0x7511);	// @ (0xEA2 * 8 + 1)
#define                                 INT1PPS1_bit        _BIT_ACCESS(INT1PPS,1)
// INT1PPS<INT1PPS2>
extern volatile __bit                   INT1PPS2            __at(0x7512);	// @ (0xEA2 * 8 + 2)
#define                                 INT1PPS2_bit        _BIT_ACCESS(INT1PPS,2)
// INT1PPS<INT1PPS3>
extern volatile __bit                   INT1PPS3            __at(0x7513);	// @ (0xEA2 * 8 + 3)
#define                                 INT1PPS3_bit        _BIT_ACCESS(INT1PPS,3)
// INTCON<INT2EDG>
extern volatile __bit                   INT2EDG             __at(0x7F92);	// @ (0xFF2 * 8 + 2)
#define                                 INT2EDG_bit         _BIT_ACCESS(INTCON,2)
// PIE0<INT2IE>
extern volatile __bit                   INT2IE              __at(0x7612);	// @ (0xEC2 * 8 + 2)
#define                                 INT2IE_bit          _BIT_ACCESS(PIE0,2)
// PIR0<INT2IF>
extern volatile __bit                   INT2IF              __at(0x7652);	// @ (0xECA * 8 + 2)
#define                                 INT2IF_bit          _BIT_ACCESS(PIR0,2)
// IPR0<INT2IP>
extern volatile __bit                   INT2IP              __at(0x75D2);	// @ (0xEBA * 8 + 2)
#define                                 INT2IP_bit          _BIT_ACCESS(IPR0,2)
// INT2PPS<INT2PPS0>
extern volatile __bit                   INT2PPS0            __at(0x7518);	// @ (0xEA3 * 8 + 0)
#define                                 INT2PPS0_bit        _BIT_ACCESS(INT2PPS,0)
// INT2PPS<INT2PPS1>
extern volatile __bit                   INT2PPS1            __at(0x7519);	// @ (0xEA3 * 8 + 1)
#define                                 INT2PPS1_bit        _BIT_ACCESS(INT2PPS,1)
// INT2PPS<INT2PPS2>
extern volatile __bit                   INT2PPS2            __at(0x751A);	// @ (0xEA3 * 8 + 2)
#define                                 INT2PPS2_bit        _BIT_ACCESS(INT2PPS,2)
// INT2PPS<INT2PPS3>
extern volatile __bit                   INT2PPS3            __at(0x751B);	// @ (0xEA3 * 8 + 3)
#define                                 INT2PPS3_bit        _BIT_ACCESS(INT2PPS,3)
// HLVDCON0<INTH>
extern volatile __bit                   INTH                __at(0x7979);	// @ (0xF2F * 8 + 1)
#define                                 INTH_bit            _BIT_ACCESS(HLVDCON0,1)
// HLVDCON0<INTL>
extern volatile __bit                   INTL                __at(0x7978);	// @ (0xF2F * 8 + 0)
#define                                 INTL_bit            _BIT_ACCESS(HLVDCON0,0)
// SCANCON0<INTM>
extern volatile __bit                   INTM                __at(0x7A7B);	// @ (0xF4F * 8 + 3)
#define                                 INTM_bit            _BIT_ACCESS(SCANCON0,3)
// SCANCON0<INVALID>
extern volatile __bit                   INVALID             __at(0x7A7C);	// @ (0xF4F * 8 + 4)
#define                                 INVALID_bit         _BIT_ACCESS(SCANCON0,4)
// IOCAF<IOCAF0>
extern volatile __bit                   IOCAF0              __at(0x7850);	// @ (0xF0A * 8 + 0)
#define                                 IOCAF0_bit          _BIT_ACCESS(IOCAF,0)
// IOCAF<IOCAF1>
extern volatile __bit                   IOCAF1              __at(0x7851);	// @ (0xF0A * 8 + 1)
#define                                 IOCAF1_bit          _BIT_ACCESS(IOCAF,1)
// IOCAF<IOCAF2>
extern volatile __bit                   IOCAF2              __at(0x7852);	// @ (0xF0A * 8 + 2)
#define                                 IOCAF2_bit          _BIT_ACCESS(IOCAF,2)
// IOCAF<IOCAF3>
extern volatile __bit                   IOCAF3              __at(0x7853);	// @ (0xF0A * 8 + 3)
#define                                 IOCAF3_bit          _BIT_ACCESS(IOCAF,3)
// IOCAF<IOCAF4>
extern volatile __bit                   IOCAF4              __at(0x7854);	// @ (0xF0A * 8 + 4)
#define                                 IOCAF4_bit          _BIT_ACCESS(IOCAF,4)
// IOCAF<IOCAF5>
extern volatile __bit                   IOCAF5              __at(0x7855);	// @ (0xF0A * 8 + 5)
#define                                 IOCAF5_bit          _BIT_ACCESS(IOCAF,5)
// IOCAF<IOCAF6>
extern volatile __bit                   IOCAF6              __at(0x7856);	// @ (0xF0A * 8 + 6)
#define                                 IOCAF6_bit          _BIT_ACCESS(IOCAF,6)
// IOCAF<IOCAF7>
extern volatile __bit                   IOCAF7              __at(0x7857);	// @ (0xF0A * 8 + 7)
#define                                 IOCAF7_bit          _BIT_ACCESS(IOCAF,7)
// IOCAN<IOCAN0>
extern volatile __bit                   IOCAN0              __at(0x7858);	// @ (0xF0B * 8 + 0)
#define                                 IOCAN0_bit          _BIT_ACCESS(IOCAN,0)
// IOCAN<IOCAN1>
extern volatile __bit                   IOCAN1              __at(0x7859);	// @ (0xF0B * 8 + 1)
#define                                 IOCAN1_bit          _BIT_ACCESS(IOCAN,1)
// IOCAN<IOCAN2>
extern volatile __bit                   IOCAN2              __at(0x785A);	// @ (0xF0B * 8 + 2)
#define                                 IOCAN2_bit          _BIT_ACCESS(IOCAN,2)
// IOCAN<IOCAN3>
extern volatile __bit                   IOCAN3              __at(0x785B);	// @ (0xF0B * 8 + 3)
#define                                 IOCAN3_bit          _BIT_ACCESS(IOCAN,3)
// IOCAN<IOCAN4>
extern volatile __bit                   IOCAN4              __at(0x785C);	// @ (0xF0B * 8 + 4)
#define                                 IOCAN4_bit          _BIT_ACCESS(IOCAN,4)
// IOCAN<IOCAN5>
extern volatile __bit                   IOCAN5              __at(0x785D);	// @ (0xF0B * 8 + 5)
#define                                 IOCAN5_bit          _BIT_ACCESS(IOCAN,5)
// IOCAN<IOCAN6>
extern volatile __bit                   IOCAN6              __at(0x785E);	// @ (0xF0B * 8 + 6)
#define                                 IOCAN6_bit          _BIT_ACCESS(IOCAN,6)
// IOCAN<IOCAN7>
extern volatile __bit                   IOCAN7              __at(0x785F);	// @ (0xF0B * 8 + 7)
#define                                 IOCAN7_bit          _BIT_ACCESS(IOCAN,7)
// IOCAP<IOCAP0>
extern volatile __bit                   IOCAP0              __at(0x7860);	// @ (0xF0C * 8 + 0)
#define                                 IOCAP0_bit          _BIT_ACCESS(IOCAP,0)
// IOCAP<IOCAP1>
extern volatile __bit                   IOCAP1              __at(0x7861);	// @ (0xF0C * 8 + 1)
#define                                 IOCAP1_bit          _BIT_ACCESS(IOCAP,1)
// IOCAP<IOCAP2>
extern volatile __bit                   IOCAP2              __at(0x7862);	// @ (0xF0C * 8 + 2)
#define                                 IOCAP2_bit          _BIT_ACCESS(IOCAP,2)
// IOCAP<IOCAP3>
extern volatile __bit                   IOCAP3              __at(0x7863);	// @ (0xF0C * 8 + 3)
#define                                 IOCAP3_bit          _BIT_ACCESS(IOCAP,3)
// IOCAP<IOCAP4>
extern volatile __bit                   IOCAP4              __at(0x7864);	// @ (0xF0C * 8 + 4)
#define                                 IOCAP4_bit          _BIT_ACCESS(IOCAP,4)
// IOCAP<IOCAP5>
extern volatile __bit                   IOCAP5              __at(0x7865);	// @ (0xF0C * 8 + 5)
#define                                 IOCAP5_bit          _BIT_ACCESS(IOCAP,5)
// IOCAP<IOCAP6>
extern volatile __bit                   IOCAP6              __at(0x7866);	// @ (0xF0C * 8 + 6)
#define                                 IOCAP6_bit          _BIT_ACCESS(IOCAP,6)
// IOCAP<IOCAP7>
extern volatile __bit                   IOCAP7              __at(0x7867);	// @ (0xF0C * 8 + 7)
#define                                 IOCAP7_bit          _BIT_ACCESS(IOCAP,7)
// IOCBF<IOCBF0>
extern volatile __bit                   IOCBF0              __at(0x7890);	// @ (0xF12 * 8 + 0)
#define                                 IOCBF0_bit          _BIT_ACCESS(IOCBF,0)
// IOCBF<IOCBF1>
extern volatile __bit                   IOCBF1              __at(0x7891);	// @ (0xF12 * 8 + 1)
#define                                 IOCBF1_bit          _BIT_ACCESS(IOCBF,1)
// IOCBF<IOCBF2>
extern volatile __bit                   IOCBF2              __at(0x7892);	// @ (0xF12 * 8 + 2)
#define                                 IOCBF2_bit          _BIT_ACCESS(IOCBF,2)
// IOCBF<IOCBF3>
extern volatile __bit                   IOCBF3              __at(0x7893);	// @ (0xF12 * 8 + 3)
#define                                 IOCBF3_bit          _BIT_ACCESS(IOCBF,3)
// IOCBF<IOCBF4>
extern volatile __bit                   IOCBF4              __at(0x7894);	// @ (0xF12 * 8 + 4)
#define                                 IOCBF4_bit          _BIT_ACCESS(IOCBF,4)
// IOCBF<IOCBF5>
extern volatile __bit                   IOCBF5              __at(0x7895);	// @ (0xF12 * 8 + 5)
#define                                 IOCBF5_bit          _BIT_ACCESS(IOCBF,5)
// IOCBF<IOCBF6>
extern volatile __bit                   IOCBF6              __at(0x7896);	// @ (0xF12 * 8 + 6)
#define                                 IOCBF6_bit          _BIT_ACCESS(IOCBF,6)
// IOCBF<IOCBF7>
extern volatile __bit                   IOCBF7              __at(0x7897);	// @ (0xF12 * 8 + 7)
#define                                 IOCBF7_bit          _BIT_ACCESS(IOCBF,7)
// IOCBN<IOCBN0>
extern volatile __bit                   IOCBN0              __at(0x7898);	// @ (0xF13 * 8 + 0)
#define                                 IOCBN0_bit          _BIT_ACCESS(IOCBN,0)
// IOCBN<IOCBN1>
extern volatile __bit                   IOCBN1              __at(0x7899);	// @ (0xF13 * 8 + 1)
#define                                 IOCBN1_bit          _BIT_ACCESS(IOCBN,1)
// IOCBN<IOCBN2>
extern volatile __bit                   IOCBN2              __at(0x789A);	// @ (0xF13 * 8 + 2)
#define                                 IOCBN2_bit          _BIT_ACCESS(IOCBN,2)
// IOCBN<IOCBN3>
extern volatile __bit                   IOCBN3              __at(0x789B);	// @ (0xF13 * 8 + 3)
#define                                 IOCBN3_bit          _BIT_ACCESS(IOCBN,3)
// IOCBN<IOCBN4>
extern volatile __bit                   IOCBN4              __at(0x789C);	// @ (0xF13 * 8 + 4)
#define                                 IOCBN4_bit          _BIT_ACCESS(IOCBN,4)
// IOCBN<IOCBN5>
extern volatile __bit                   IOCBN5              __at(0x789D);	// @ (0xF13 * 8 + 5)
#define                                 IOCBN5_bit          _BIT_ACCESS(IOCBN,5)
// IOCBN<IOCBN6>
extern volatile __bit                   IOCBN6              __at(0x789E);	// @ (0xF13 * 8 + 6)
#define                                 IOCBN6_bit          _BIT_ACCESS(IOCBN,6)
// IOCBN<IOCBN7>
extern volatile __bit                   IOCBN7              __at(0x789F);	// @ (0xF13 * 8 + 7)
#define                                 IOCBN7_bit          _BIT_ACCESS(IOCBN,7)
// IOCBP<IOCBP0>
extern volatile __bit                   IOCBP0              __at(0x78A0);	// @ (0xF14 * 8 + 0)
#define                                 IOCBP0_bit          _BIT_ACCESS(IOCBP,0)
// IOCBP<IOCBP1>
extern volatile __bit                   IOCBP1              __at(0x78A1);	// @ (0xF14 * 8 + 1)
#define                                 IOCBP1_bit          _BIT_ACCESS(IOCBP,1)
// IOCBP<IOCBP2>
extern volatile __bit                   IOCBP2              __at(0x78A2);	// @ (0xF14 * 8 + 2)
#define                                 IOCBP2_bit          _BIT_ACCESS(IOCBP,2)
// IOCBP<IOCBP3>
extern volatile __bit                   IOCBP3              __at(0x78A3);	// @ (0xF14 * 8 + 3)
#define                                 IOCBP3_bit          _BIT_ACCESS(IOCBP,3)
// IOCBP<IOCBP4>
extern volatile __bit                   IOCBP4              __at(0x78A4);	// @ (0xF14 * 8 + 4)
#define                                 IOCBP4_bit          _BIT_ACCESS(IOCBP,4)
// IOCBP<IOCBP5>
extern volatile __bit                   IOCBP5              __at(0x78A5);	// @ (0xF14 * 8 + 5)
#define                                 IOCBP5_bit          _BIT_ACCESS(IOCBP,5)
// IOCBP<IOCBP6>
extern volatile __bit                   IOCBP6              __at(0x78A6);	// @ (0xF14 * 8 + 6)
#define                                 IOCBP6_bit          _BIT_ACCESS(IOCBP,6)
// IOCBP<IOCBP7>
extern volatile __bit                   IOCBP7              __at(0x78A7);	// @ (0xF14 * 8 + 7)
#define                                 IOCBP7_bit          _BIT_ACCESS(IOCBP,7)
// IOCCF<IOCCF0>
extern volatile __bit                   IOCCF0              __at(0x78D0);	// @ (0xF1A * 8 + 0)
#define                                 IOCCF0_bit          _BIT_ACCESS(IOCCF,0)
// IOCCF<IOCCF1>
extern volatile __bit                   IOCCF1              __at(0x78D1);	// @ (0xF1A * 8 + 1)
#define                                 IOCCF1_bit          _BIT_ACCESS(IOCCF,1)
// IOCCF<IOCCF2>
extern volatile __bit                   IOCCF2              __at(0x78D2);	// @ (0xF1A * 8 + 2)
#define                                 IOCCF2_bit          _BIT_ACCESS(IOCCF,2)
// IOCCF<IOCCF3>
extern volatile __bit                   IOCCF3              __at(0x78D3);	// @ (0xF1A * 8 + 3)
#define                                 IOCCF3_bit          _BIT_ACCESS(IOCCF,3)
// IOCCF<IOCCF4>
extern volatile __bit                   IOCCF4              __at(0x78D4);	// @ (0xF1A * 8 + 4)
#define                                 IOCCF4_bit          _BIT_ACCESS(IOCCF,4)
// IOCCF<IOCCF5>
extern volatile __bit                   IOCCF5              __at(0x78D5);	// @ (0xF1A * 8 + 5)
#define                                 IOCCF5_bit          _BIT_ACCESS(IOCCF,5)
// IOCCF<IOCCF6>
extern volatile __bit                   IOCCF6              __at(0x78D6);	// @ (0xF1A * 8 + 6)
#define                                 IOCCF6_bit          _BIT_ACCESS(IOCCF,6)
// IOCCF<IOCCF7>
extern volatile __bit                   IOCCF7              __at(0x78D7);	// @ (0xF1A * 8 + 7)
#define                                 IOCCF7_bit          _BIT_ACCESS(IOCCF,7)
// IOCCN<IOCCN0>
extern volatile __bit                   IOCCN0              __at(0x78D8);	// @ (0xF1B * 8 + 0)
#define                                 IOCCN0_bit          _BIT_ACCESS(IOCCN,0)
// IOCCN<IOCCN1>
extern volatile __bit                   IOCCN1              __at(0x78D9);	// @ (0xF1B * 8 + 1)
#define                                 IOCCN1_bit          _BIT_ACCESS(IOCCN,1)
// IOCCN<IOCCN2>
extern volatile __bit                   IOCCN2              __at(0x78DA);	// @ (0xF1B * 8 + 2)
#define                                 IOCCN2_bit          _BIT_ACCESS(IOCCN,2)
// IOCCN<IOCCN3>
extern volatile __bit                   IOCCN3              __at(0x78DB);	// @ (0xF1B * 8 + 3)
#define                                 IOCCN3_bit          _BIT_ACCESS(IOCCN,3)
// IOCCN<IOCCN4>
extern volatile __bit                   IOCCN4              __at(0x78DC);	// @ (0xF1B * 8 + 4)
#define                                 IOCCN4_bit          _BIT_ACCESS(IOCCN,4)
// IOCCN<IOCCN5>
extern volatile __bit                   IOCCN5              __at(0x78DD);	// @ (0xF1B * 8 + 5)
#define                                 IOCCN5_bit          _BIT_ACCESS(IOCCN,5)
// IOCCN<IOCCN6>
extern volatile __bit                   IOCCN6              __at(0x78DE);	// @ (0xF1B * 8 + 6)
#define                                 IOCCN6_bit          _BIT_ACCESS(IOCCN,6)
// IOCCN<IOCCN7>
extern volatile __bit                   IOCCN7              __at(0x78DF);	// @ (0xF1B * 8 + 7)
#define                                 IOCCN7_bit          _BIT_ACCESS(IOCCN,7)
// IOCCP<IOCCP0>
extern volatile __bit                   IOCCP0              __at(0x78E0);	// @ (0xF1C * 8 + 0)
#define                                 IOCCP0_bit          _BIT_ACCESS(IOCCP,0)
// IOCCP<IOCCP1>
extern volatile __bit                   IOCCP1              __at(0x78E1);	// @ (0xF1C * 8 + 1)
#define                                 IOCCP1_bit          _BIT_ACCESS(IOCCP,1)
// IOCCP<IOCCP2>
extern volatile __bit                   IOCCP2              __at(0x78E2);	// @ (0xF1C * 8 + 2)
#define                                 IOCCP2_bit          _BIT_ACCESS(IOCCP,2)
// IOCCP<IOCCP3>
extern volatile __bit                   IOCCP3              __at(0x78E3);	// @ (0xF1C * 8 + 3)
#define                                 IOCCP3_bit          _BIT_ACCESS(IOCCP,3)
// IOCCP<IOCCP4>
extern volatile __bit                   IOCCP4              __at(0x78E4);	// @ (0xF1C * 8 + 4)
#define                                 IOCCP4_bit          _BIT_ACCESS(IOCCP,4)
// IOCCP<IOCCP5>
extern volatile __bit                   IOCCP5              __at(0x78E5);	// @ (0xF1C * 8 + 5)
#define                                 IOCCP5_bit          _BIT_ACCESS(IOCCP,5)
// IOCCP<IOCCP6>
extern volatile __bit                   IOCCP6              __at(0x78E6);	// @ (0xF1C * 8 + 6)
#define                                 IOCCP6_bit          _BIT_ACCESS(IOCCP,6)
// IOCCP<IOCCP7>
extern volatile __bit                   IOCCP7              __at(0x78E7);	// @ (0xF1C * 8 + 7)
#define                                 IOCCP7_bit          _BIT_ACCESS(IOCCP,7)
// IOCEF<IOCEF3>
extern volatile __bit                   IOCEF3              __at(0x793B);	// @ (0xF27 * 8 + 3)
#define                                 IOCEF3_bit          _BIT_ACCESS(IOCEF,3)
// IOCEN<IOCEN3>
extern volatile __bit                   IOCEN3              __at(0x7943);	// @ (0xF28 * 8 + 3)
#define                                 IOCEN3_bit          _BIT_ACCESS(IOCEN,3)
// IOCEP<IOCEP3>
extern volatile __bit                   IOCEP3              __at(0x794B);	// @ (0xF29 * 8 + 3)
#define                                 IOCEP3_bit          _BIT_ACCESS(IOCEP,3)
// PIE0<IOCIE>
extern volatile __bit                   IOCIE               __at(0x7614);	// @ (0xEC2 * 8 + 4)
#define                                 IOCIE_bit           _BIT_ACCESS(PIE0,4)
// PIR0<IOCIF>
extern volatile __bit                   IOCIF               __at(0x7654);	// @ (0xECA * 8 + 4)
#define                                 IOCIF_bit           _BIT_ACCESS(PIR0,4)
// IPR0<IOCIP>
extern volatile __bit                   IOCIP               __at(0x75D4);	// @ (0xEBA * 8 + 4)
#define                                 IOCIP_bit           _BIT_ACCESS(IPR0,4)
// PMD0<IOCMD>
extern volatile __bit                   IOCMD               __at(0x7708);	// @ (0xEE1 * 8 + 0)
#define                                 IOCMD_bit           _BIT_ACCESS(PMD0,0)
// INTCON<IPEN>
extern volatile __bit                   IPEN                __at(0x7F95);	// @ (0xFF2 * 8 + 5)
#define                                 IPEN_bit            _BIT_ACCESS(INTCON,5)
// LATA<LA0>
extern volatile __bit                   LA0                 __at(0x7C18);	// @ (0xF83 * 8 + 0)
#define                                 LA0_bit             _BIT_ACCESS(LATA,0)
// LATA<LA1>
extern volatile __bit                   LA1                 __at(0x7C19);	// @ (0xF83 * 8 + 1)
#define                                 LA1_bit             _BIT_ACCESS(LATA,1)
// LATA<LA2>
extern volatile __bit                   LA2                 __at(0x7C1A);	// @ (0xF83 * 8 + 2)
#define                                 LA2_bit             _BIT_ACCESS(LATA,2)
// LATA<LA3>
extern volatile __bit                   LA3                 __at(0x7C1B);	// @ (0xF83 * 8 + 3)
#define                                 LA3_bit             _BIT_ACCESS(LATA,3)
// LATA<LA4>
extern volatile __bit                   LA4                 __at(0x7C1C);	// @ (0xF83 * 8 + 4)
#define                                 LA4_bit             _BIT_ACCESS(LATA,4)
// LATA<LA5>
extern volatile __bit                   LA5                 __at(0x7C1D);	// @ (0xF83 * 8 + 5)
#define                                 LA5_bit             _BIT_ACCESS(LATA,5)
// LATA<LA6>
extern volatile __bit                   LA6                 __at(0x7C1E);	// @ (0xF83 * 8 + 6)
#define                                 LA6_bit             _BIT_ACCESS(LATA,6)
// LATA<LA7>
extern volatile __bit                   LA7                 __at(0x7C1F);	// @ (0xF83 * 8 + 7)
#define                                 LA7_bit             _BIT_ACCESS(LATA,7)
// SCANLADRL<LADR0>
extern volatile __bit                   LADR0               __at(0x7A48);	// @ (0xF49 * 8 + 0)
#define                                 LADR0_bit           _BIT_ACCESS(SCANLADRL,0)
// SCANLADRL<LADR1>
extern volatile __bit                   LADR1               __at(0x7A49);	// @ (0xF49 * 8 + 1)
#define                                 LADR1_bit           _BIT_ACCESS(SCANLADRL,1)
// SCANLADRH<LADR10>
extern volatile __bit                   LADR10              __at(0x7A52);	// @ (0xF4A * 8 + 2)
#define                                 LADR10_bit          _BIT_ACCESS(SCANLADRH,2)
// SCANLADRH<LADR11>
extern volatile __bit                   LADR11              __at(0x7A53);	// @ (0xF4A * 8 + 3)
#define                                 LADR11_bit          _BIT_ACCESS(SCANLADRH,3)
// SCANLADRH<LADR12>
extern volatile __bit                   LADR12              __at(0x7A54);	// @ (0xF4A * 8 + 4)
#define                                 LADR12_bit          _BIT_ACCESS(SCANLADRH,4)
// SCANLADRH<LADR13>
extern volatile __bit                   LADR13              __at(0x7A55);	// @ (0xF4A * 8 + 5)
#define                                 LADR13_bit          _BIT_ACCESS(SCANLADRH,5)
// SCANLADRH<LADR14>
extern volatile __bit                   LADR14              __at(0x7A56);	// @ (0xF4A * 8 + 6)
#define                                 LADR14_bit          _BIT_ACCESS(SCANLADRH,6)
// SCANLADRH<LADR15>
extern volatile __bit                   LADR15              __at(0x7A57);	// @ (0xF4A * 8 + 7)
#define                                 LADR15_bit          _BIT_ACCESS(SCANLADRH,7)
// SCANLADRU<LADR16>
extern volatile __bit                   LADR16              __at(0x7A58);	// @ (0xF4B * 8 + 0)
#define                                 LADR16_bit          _BIT_ACCESS(SCANLADRU,0)
// SCANLADRU<LADR17>
extern volatile __bit                   LADR17              __at(0x7A59);	// @ (0xF4B * 8 + 1)
#define                                 LADR17_bit          _BIT_ACCESS(SCANLADRU,1)
// SCANLADRU<LADR18>
extern volatile __bit                   LADR18              __at(0x7A5A);	// @ (0xF4B * 8 + 2)
#define                                 LADR18_bit          _BIT_ACCESS(SCANLADRU,2)
// SCANLADRU<LADR19>
extern volatile __bit                   LADR19              __at(0x7A5B);	// @ (0xF4B * 8 + 3)
#define                                 LADR19_bit          _BIT_ACCESS(SCANLADRU,3)
// SCANLADRL<LADR2>
extern volatile __bit                   LADR2               __at(0x7A4A);	// @ (0xF49 * 8 + 2)
#define                                 LADR2_bit           _BIT_ACCESS(SCANLADRL,2)
// SCANLADRU<LADR20>
extern volatile __bit                   LADR20              __at(0x7A5C);	// @ (0xF4B * 8 + 4)
#define                                 LADR20_bit          _BIT_ACCESS(SCANLADRU,4)
// SCANLADRU<LADR21>
extern volatile __bit                   LADR21              __at(0x7A5D);	// @ (0xF4B * 8 + 5)
#define                                 LADR21_bit          _BIT_ACCESS(SCANLADRU,5)
// SCANLADRL<LADR3>
extern volatile __bit                   LADR3               __at(0x7A4B);	// @ (0xF49 * 8 + 3)
#define                                 LADR3_bit           _BIT_ACCESS(SCANLADRL,3)
// SCANLADRL<LADR4>
extern volatile __bit                   LADR4               __at(0x7A4C);	// @ (0xF49 * 8 + 4)
#define                                 LADR4_bit           _BIT_ACCESS(SCANLADRL,4)
// SCANLADRL<LADR5>
extern volatile __bit                   LADR5               __at(0x7A4D);	// @ (0xF49 * 8 + 5)
#define                                 LADR5_bit           _BIT_ACCESS(SCANLADRL,5)
// SCANLADRL<LADR6>
extern volatile __bit                   LADR6               __at(0x7A4E);	// @ (0xF49 * 8 + 6)
#define                                 LADR6_bit           _BIT_ACCESS(SCANLADRL,6)
// SCANLADRL<LADR7>
extern volatile __bit                   LADR7               __at(0x7A4F);	// @ (0xF49 * 8 + 7)
#define                                 LADR7_bit           _BIT_ACCESS(SCANLADRL,7)
// SCANLADRH<LADR8>
extern volatile __bit                   LADR8               __at(0x7A50);	// @ (0xF4A * 8 + 0)
#define                                 LADR8_bit           _BIT_ACCESS(SCANLADRH,0)
// SCANLADRH<LADR9>
extern volatile __bit                   LADR9               __at(0x7A51);	// @ (0xF4A * 8 + 1)
#define                                 LADR9_bit           _BIT_ACCESS(SCANLADRH,1)
// LATA<LATA0>
extern volatile __bit                   LATA0               __at(0x7C18);	// @ (0xF83 * 8 + 0)
#define                                 LATA0_bit           _BIT_ACCESS(LATA,0)
// LATA<LATA1>
extern volatile __bit                   LATA1               __at(0x7C19);	// @ (0xF83 * 8 + 1)
#define                                 LATA1_bit           _BIT_ACCESS(LATA,1)
// LATA<LATA2>
extern volatile __bit                   LATA2               __at(0x7C1A);	// @ (0xF83 * 8 + 2)
#define                                 LATA2_bit           _BIT_ACCESS(LATA,2)
// LATA<LATA3>
extern volatile __bit                   LATA3               __at(0x7C1B);	// @ (0xF83 * 8 + 3)
#define                                 LATA3_bit           _BIT_ACCESS(LATA,3)
// LATA<LATA4>
extern volatile __bit                   LATA4               __at(0x7C1C);	// @ (0xF83 * 8 + 4)
#define                                 LATA4_bit           _BIT_ACCESS(LATA,4)
// LATA<LATA5>
extern volatile __bit                   LATA5               __at(0x7C1D);	// @ (0xF83 * 8 + 5)
#define                                 LATA5_bit           _BIT_ACCESS(LATA,5)
// LATA<LATA6>
extern volatile __bit                   LATA6               __at(0x7C1E);	// @ (0xF83 * 8 + 6)
#define                                 LATA6_bit           _BIT_ACCESS(LATA,6)
// LATA<LATA7>
extern volatile __bit                   LATA7               __at(0x7C1F);	// @ (0xF83 * 8 + 7)
#define                                 LATA7_bit           _BIT_ACCESS(LATA,7)
// LATB<LATB0>
extern volatile __bit                   LATB0               __at(0x7C20);	// @ (0xF84 * 8 + 0)
#define                                 LATB0_bit           _BIT_ACCESS(LATB,0)
// LATB<LATB1>
extern volatile __bit                   LATB1               __at(0x7C21);	// @ (0xF84 * 8 + 1)
#define                                 LATB1_bit           _BIT_ACCESS(LATB,1)
// LATB<LATB2>
extern volatile __bit                   LATB2               __at(0x7C22);	// @ (0xF84 * 8 + 2)
#define                                 LATB2_bit           _BIT_ACCESS(LATB,2)
// LATB<LATB3>
extern volatile __bit                   LATB3               __at(0x7C23);	// @ (0xF84 * 8 + 3)
#define                                 LATB3_bit           _BIT_ACCESS(LATB,3)
// LATB<LATB4>
extern volatile __bit                   LATB4               __at(0x7C24);	// @ (0xF84 * 8 + 4)
#define                                 LATB4_bit           _BIT_ACCESS(LATB,4)
// LATB<LATB5>
extern volatile __bit                   LATB5               __at(0x7C25);	// @ (0xF84 * 8 + 5)
#define                                 LATB5_bit           _BIT_ACCESS(LATB,5)
// LATB<LATB6>
extern volatile __bit                   LATB6               __at(0x7C26);	// @ (0xF84 * 8 + 6)
#define                                 LATB6_bit           _BIT_ACCESS(LATB,6)
// LATB<LATB7>
extern volatile __bit                   LATB7               __at(0x7C27);	// @ (0xF84 * 8 + 7)
#define                                 LATB7_bit           _BIT_ACCESS(LATB,7)
// LATC<LATC0>
extern volatile __bit                   LATC0               __at(0x7C28);	// @ (0xF85 * 8 + 0)
#define                                 LATC0_bit           _BIT_ACCESS(LATC,0)
// LATC<LATC1>
extern volatile __bit                   LATC1               __at(0x7C29);	// @ (0xF85 * 8 + 1)
#define                                 LATC1_bit           _BIT_ACCESS(LATC,1)
// LATC<LATC2>
extern volatile __bit                   LATC2               __at(0x7C2A);	// @ (0xF85 * 8 + 2)
#define                                 LATC2_bit           _BIT_ACCESS(LATC,2)
// LATC<LATC3>
extern volatile __bit                   LATC3               __at(0x7C2B);	// @ (0xF85 * 8 + 3)
#define                                 LATC3_bit           _BIT_ACCESS(LATC,3)
// LATC<LATC4>
extern volatile __bit                   LATC4               __at(0x7C2C);	// @ (0xF85 * 8 + 4)
#define                                 LATC4_bit           _BIT_ACCESS(LATC,4)
// LATC<LATC5>
extern volatile __bit                   LATC5               __at(0x7C2D);	// @ (0xF85 * 8 + 5)
#define                                 LATC5_bit           _BIT_ACCESS(LATC,5)
// LATC<LATC6>
extern volatile __bit                   LATC6               __at(0x7C2E);	// @ (0xF85 * 8 + 6)
#define                                 LATC6_bit           _BIT_ACCESS(LATC,6)
// LATC<LATC7>
extern volatile __bit                   LATC7               __at(0x7C2F);	// @ (0xF85 * 8 + 7)
#define                                 LATC7_bit           _BIT_ACCESS(LATC,7)
// LATB<LB0>
extern volatile __bit                   LB0                 __at(0x7C20);	// @ (0xF84 * 8 + 0)
#define                                 LB0_bit             _BIT_ACCESS(LATB,0)
// LATB<LB1>
extern volatile __bit                   LB1                 __at(0x7C21);	// @ (0xF84 * 8 + 1)
#define                                 LB1_bit             _BIT_ACCESS(LATB,1)
// LATB<LB2>
extern volatile __bit                   LB2                 __at(0x7C22);	// @ (0xF84 * 8 + 2)
#define                                 LB2_bit             _BIT_ACCESS(LATB,2)
// LATB<LB3>
extern volatile __bit                   LB3                 __at(0x7C23);	// @ (0xF84 * 8 + 3)
#define                                 LB3_bit             _BIT_ACCESS(LATB,3)
// LATB<LB4>
extern volatile __bit                   LB4                 __at(0x7C24);	// @ (0xF84 * 8 + 4)
#define                                 LB4_bit             _BIT_ACCESS(LATB,4)
// LATB<LB5>
extern volatile __bit                   LB5                 __at(0x7C25);	// @ (0xF84 * 8 + 5)
#define                                 LB5_bit             _BIT_ACCESS(LATB,5)
// LATB<LB6>
extern volatile __bit                   LB6                 __at(0x7C26);	// @ (0xF84 * 8 + 6)
#define                                 LB6_bit             _BIT_ACCESS(LATB,6)
// LATB<LB7>
extern volatile __bit                   LB7                 __at(0x7C27);	// @ (0xF84 * 8 + 7)
#define                                 LB7_bit             _BIT_ACCESS(LATB,7)
// LATC<LC0>
extern volatile __bit                   LC0                 __at(0x7C28);	// @ (0xF85 * 8 + 0)
#define                                 LC0_bit             _BIT_ACCESS(LATC,0)
// LATC<LC1>
extern volatile __bit                   LC1                 __at(0x7C29);	// @ (0xF85 * 8 + 1)
#define                                 LC1_bit             _BIT_ACCESS(LATC,1)
// LATC<LC2>
extern volatile __bit                   LC2                 __at(0x7C2A);	// @ (0xF85 * 8 + 2)
#define                                 LC2_bit             _BIT_ACCESS(LATC,2)
// LATC<LC3>
extern volatile __bit                   LC3                 __at(0x7C2B);	// @ (0xF85 * 8 + 3)
#define                                 LC3_bit             _BIT_ACCESS(LATC,3)
// LATC<LC4>
extern volatile __bit                   LC4                 __at(0x7C2C);	// @ (0xF85 * 8 + 4)
#define                                 LC4_bit             _BIT_ACCESS(LATC,4)
// LATC<LC5>
extern volatile __bit                   LC5                 __at(0x7C2D);	// @ (0xF85 * 8 + 5)
#define                                 LC5_bit             _BIT_ACCESS(LATC,5)
// LATC<LC6>
extern volatile __bit                   LC6                 __at(0x7C2E);	// @ (0xF85 * 8 + 6)
#define                                 LC6_bit             _BIT_ACCESS(LATC,6)
// LATC<LC7>
extern volatile __bit                   LC7                 __at(0x7C2F);	// @ (0xF85 * 8 + 7)
#define                                 LC7_bit             _BIT_ACCESS(LATC,7)
// CWG1CON0<LD>
extern volatile __bit                   LD                  __at(0x7A26);	// @ (0xF44 * 8 + 6)
#define                                 LD_bit              _BIT_ACCESS(CWG1CON0,6)
// OSCEN<LFOEN>
extern volatile __bit                   LFOEN               __at(0x76E4);	// @ (0xEDC * 8 + 4)
#define                                 LFOEN_bit           _BIT_ACCESS(OSCEN,4)
// OSCSTAT<LFOR>
extern volatile __bit                   LFOR                __at(0x76DC);	// @ (0xEDB * 8 + 4)
#define                                 LFOR_bit            _BIT_ACCESS(OSCSTAT,4)
// CWG1AS0<LSAC0>
extern volatile __bit                   LSAC0               __at(0x7A32);	// @ (0xF46 * 8 + 2)
#define                                 LSAC0_bit           _BIT_ACCESS(CWG1AS0,2)
// CWG1AS0<LSAC1>
extern volatile __bit                   LSAC1               __at(0x7A33);	// @ (0xF46 * 8 + 3)
#define                                 LSAC1_bit           _BIT_ACCESS(CWG1AS0,3)
// CWG1AS0<LSBD0>
extern volatile __bit                   LSBD0               __at(0x7A34);	// @ (0xF46 * 8 + 4)
#define                                 LSBD0_bit           _BIT_ACCESS(CWG1AS0,4)
// CWG1AS0<LSBD1>
extern volatile __bit                   LSBD1               __at(0x7A35);	// @ (0xF46 * 8 + 5)
#define                                 LSBD1_bit           _BIT_ACCESS(CWG1AS0,5)
// PORTA<LVDIN>
extern volatile __bit                   LVDIN               __at(0x7C6D);	// @ (0xF8D * 8 + 5)
#define                                 LVDIN_bit           _BIT_ACCESS(PORTA,5)
// CMOUT<MC1OUT>
extern volatile __bit                   MC1OUT              __at(0x79E8);	// @ (0xF3D * 8 + 0)
#define                                 MC1OUT_bit          _BIT_ACCESS(CMOUT,0)
// CMOUT<MC2OUT>
extern volatile __bit                   MC2OUT              __at(0x79E9);	// @ (0xF3D * 8 + 1)
#define                                 MC2OUT_bit          _BIT_ACCESS(CMOUT,1)
// MDCON0<MDBIT>
extern volatile __bit                   MDBIT               __at(0x7A88);	// @ (0xF51 * 8 + 0)
#define                                 MDBIT_bit           _BIT_ACCESS(MDCON0,0)
// MDCARHPPS<MDCARHPPS0>
extern volatile __bit                   MDCARHPPS0          __at(0x7598);	// @ (0xEB3 * 8 + 0)
#define                                 MDCARHPPS0_bit      _BIT_ACCESS(MDCARHPPS,0)
// MDCARHPPS<MDCARHPPS1>
extern volatile __bit                   MDCARHPPS1          __at(0x7599);	// @ (0xEB3 * 8 + 1)
#define                                 MDCARHPPS1_bit      _BIT_ACCESS(MDCARHPPS,1)
// MDCARHPPS<MDCARHPPS2>
extern volatile __bit                   MDCARHPPS2          __at(0x759A);	// @ (0xEB3 * 8 + 2)
#define                                 MDCARHPPS2_bit      _BIT_ACCESS(MDCARHPPS,2)
// MDCARHPPS<MDCARHPPS3>
extern volatile __bit                   MDCARHPPS3          __at(0x759B);	// @ (0xEB3 * 8 + 3)
#define                                 MDCARHPPS3_bit      _BIT_ACCESS(MDCARHPPS,3)
// MDCARHPPS<MDCARHPPS4>
extern volatile __bit                   MDCARHPPS4          __at(0x759C);	// @ (0xEB3 * 8 + 4)
#define                                 MDCARHPPS4_bit      _BIT_ACCESS(MDCARHPPS,4)
// MDCARLPPS<MDCARLPPS0>
extern volatile __bit                   MDCARLPPS0          __at(0x7590);	// @ (0xEB2 * 8 + 0)
#define                                 MDCARLPPS0_bit      _BIT_ACCESS(MDCARLPPS,0)
// MDCARLPPS<MDCARLPPS1>
extern volatile __bit                   MDCARLPPS1          __at(0x7591);	// @ (0xEB2 * 8 + 1)
#define                                 MDCARLPPS1_bit      _BIT_ACCESS(MDCARLPPS,1)
// MDCARLPPS<MDCARLPPS2>
extern volatile __bit                   MDCARLPPS2          __at(0x7592);	// @ (0xEB2 * 8 + 2)
#define                                 MDCARLPPS2_bit      _BIT_ACCESS(MDCARLPPS,2)
// MDCARLPPS<MDCARLPPS3>
extern volatile __bit                   MDCARLPPS3          __at(0x7593);	// @ (0xEB2 * 8 + 3)
#define                                 MDCARLPPS3_bit      _BIT_ACCESS(MDCARLPPS,3)
// MDCARLPPS<MDCARLPPS4>
extern volatile __bit                   MDCARLPPS4          __at(0x7594);	// @ (0xEB2 * 8 + 4)
#define                                 MDCARLPPS4_bit      _BIT_ACCESS(MDCARLPPS,4)
// MDCON1<MDCHPOL>
extern volatile __bit                   MDCHPOL             __at(0x7A95);	// @ (0xF52 * 8 + 5)
#define                                 MDCHPOL_bit         _BIT_ACCESS(MDCON1,5)
// MDCARH<MDCHS0>
extern volatile __bit                   MDCHS0              __at(0x7AA8);	// @ (0xF55 * 8 + 0)
#define                                 MDCHS0_bit          _BIT_ACCESS(MDCARH,0)
// MDCARH<MDCHS1>
extern volatile __bit                   MDCHS1              __at(0x7AA9);	// @ (0xF55 * 8 + 1)
#define                                 MDCHS1_bit          _BIT_ACCESS(MDCARH,1)
// MDCARH<MDCHS2>
extern volatile __bit                   MDCHS2              __at(0x7AAA);	// @ (0xF55 * 8 + 2)
#define                                 MDCHS2_bit          _BIT_ACCESS(MDCARH,2)
// MDCON1<MDCHSYNC>
extern volatile __bit                   MDCHSYNC            __at(0x7A94);	// @ (0xF52 * 8 + 4)
#define                                 MDCHSYNC_bit        _BIT_ACCESS(MDCON1,4)
// MDCON1<MDCLPOL>
extern volatile __bit                   MDCLPOL             __at(0x7A91);	// @ (0xF52 * 8 + 1)
#define                                 MDCLPOL_bit         _BIT_ACCESS(MDCON1,1)
// MDCARL<MDCLS0>
extern volatile __bit                   MDCLS0              __at(0x7AA0);	// @ (0xF54 * 8 + 0)
#define                                 MDCLS0_bit          _BIT_ACCESS(MDCARL,0)
// MDCARL<MDCLS1>
extern volatile __bit                   MDCLS1              __at(0x7AA1);	// @ (0xF54 * 8 + 1)
#define                                 MDCLS1_bit          _BIT_ACCESS(MDCARL,1)
// MDCARL<MDCLS2>
extern volatile __bit                   MDCLS2              __at(0x7AA2);	// @ (0xF54 * 8 + 2)
#define                                 MDCLS2_bit          _BIT_ACCESS(MDCARL,2)
// MDCON1<MDCLSYNC>
extern volatile __bit                   MDCLSYNC            __at(0x7A90);	// @ (0xF52 * 8 + 0)
#define                                 MDCLSYNC_bit        _BIT_ACCESS(MDCON1,0)
// MDCON0<MDEN>
extern volatile __bit                   MDEN                __at(0x7A8F);	// @ (0xF51 * 8 + 7)
#define                                 MDEN_bit            _BIT_ACCESS(MDCON0,7)
// MDCON0<MDOPOL>
extern volatile __bit                   MDOPOL              __at(0x7A8C);	// @ (0xF51 * 8 + 4)
#define                                 MDOPOL_bit          _BIT_ACCESS(MDCON0,4)
// MDCON0<MDOUT>
extern volatile __bit                   MDOUT               __at(0x7A8D);	// @ (0xF51 * 8 + 5)
#define                                 MDOUT_bit           _BIT_ACCESS(MDCON0,5)
// MDSRCPPS<MDSRCPPS0>
extern volatile __bit                   MDSRCPPS0           __at(0x75A0);	// @ (0xEB4 * 8 + 0)
#define                                 MDSRCPPS0_bit       _BIT_ACCESS(MDSRCPPS,0)
// MDSRCPPS<MDSRCPPS1>
extern volatile __bit                   MDSRCPPS1           __at(0x75A1);	// @ (0xEB4 * 8 + 1)
#define                                 MDSRCPPS1_bit       _BIT_ACCESS(MDSRCPPS,1)
// MDSRCPPS<MDSRCPPS2>
extern volatile __bit                   MDSRCPPS2           __at(0x75A2);	// @ (0xEB4 * 8 + 2)
#define                                 MDSRCPPS2_bit       _BIT_ACCESS(MDSRCPPS,2)
// MDSRCPPS<MDSRCPPS3>
extern volatile __bit                   MDSRCPPS3           __at(0x75A3);	// @ (0xEB4 * 8 + 3)
#define                                 MDSRCPPS3_bit       _BIT_ACCESS(MDSRCPPS,3)
// MDSRCPPS<MDSRCPPS4>
extern volatile __bit                   MDSRCPPS4           __at(0x75A4);	// @ (0xEB4 * 8 + 4)
#define                                 MDSRCPPS4_bit       _BIT_ACCESS(MDSRCPPS,4)
// MDSRC<MDSRCS0>
extern volatile __bit                   MDSRCS0             __at(0x7A98);	// @ (0xF53 * 8 + 0)
#define                                 MDSRCS0_bit         _BIT_ACCESS(MDSRC,0)
// MDSRC<MDSRCS1>
extern volatile __bit                   MDSRCS1             __at(0x7A99);	// @ (0xF53 * 8 + 1)
#define                                 MDSRCS1_bit         _BIT_ACCESS(MDSRC,1)
// MDSRC<MDSRCS2>
extern volatile __bit                   MDSRCS2             __at(0x7A9A);	// @ (0xF53 * 8 + 2)
#define                                 MDSRCS2_bit         _BIT_ACCESS(MDSRC,2)
// MDSRC<MDSRCS3>
extern volatile __bit                   MDSRCS3             __at(0x7A9B);	// @ (0xF53 * 8 + 3)
#define                                 MDSRCS3_bit         _BIT_ACCESS(MDSRC,3)
// OSCEN<MFOEN>
extern volatile __bit                   MFOEN               __at(0x76E5);	// @ (0xEDC * 8 + 5)
#define                                 MFOEN_bit           _BIT_ACCESS(OSCEN,5)
// OSCSTAT<MFOR>
extern volatile __bit                   MFOR                __at(0x76DD);	// @ (0xEDB * 8 + 5)
#define                                 MFOR_bit            _BIT_ACCESS(OSCSTAT,5)
// SSP1ADD<MSK01>
extern volatile __bit                   MSK01               __at(0x7C98);	// @ (0xF93 * 8 + 0)
#define                                 MSK01_bit           _BIT_ACCESS(SSP1ADD,0)
// SSP1ADD<MSK11>
extern volatile __bit                   MSK11               __at(0x7C99);	// @ (0xF93 * 8 + 1)
#define                                 MSK11_bit           _BIT_ACCESS(SSP1ADD,1)
// SSP1ADD<MSK21>
extern volatile __bit                   MSK21               __at(0x7C9A);	// @ (0xF93 * 8 + 2)
#define                                 MSK21_bit           _BIT_ACCESS(SSP1ADD,2)
// SSP1ADD<MSK31>
extern volatile __bit                   MSK31               __at(0x7C9B);	// @ (0xF93 * 8 + 3)
#define                                 MSK31_bit           _BIT_ACCESS(SSP1ADD,3)
// SSP1ADD<MSK41>
extern volatile __bit                   MSK41               __at(0x7C9C);	// @ (0xF93 * 8 + 4)
#define                                 MSK41_bit           _BIT_ACCESS(SSP1ADD,4)
// SSP1ADD<MSK51>
extern volatile __bit                   MSK51               __at(0x7C9D);	// @ (0xF93 * 8 + 5)
#define                                 MSK51_bit           _BIT_ACCESS(SSP1ADD,5)
// SSP1ADD<MSK61>
extern volatile __bit                   MSK61               __at(0x7C9E);	// @ (0xF93 * 8 + 6)
#define                                 MSK61_bit           _BIT_ACCESS(SSP1ADD,6)
// SSP1ADD<MSK71>
extern volatile __bit                   MSK71               __at(0x7C9F);	// @ (0xF93 * 8 + 7)
#define                                 MSK71_bit           _BIT_ACCESS(SSP1ADD,7)
// PMD4<MSSP1MD>
extern volatile __bit                   MSSP1MD             __at(0x772C);	// @ (0xEE5 * 8 + 4)
#define                                 MSSP1MD_bit         _BIT_ACCESS(PMD4,4)
// OSCCON1<NDIV0>
extern volatile __bit                   NDIV0               __at(0x76C0);	// @ (0xED8 * 8 + 0)
#define                                 NDIV0_bit           _BIT_ACCESS(OSCCON1,0)
// OSCCON1<NDIV1>
extern volatile __bit                   NDIV1               __at(0x76C1);	// @ (0xED8 * 8 + 1)
#define                                 NDIV1_bit           _BIT_ACCESS(OSCCON1,1)
// OSCCON1<NDIV2>
extern volatile __bit                   NDIV2               __at(0x76C2);	// @ (0xED8 * 8 + 2)
#define                                 NDIV2_bit           _BIT_ACCESS(OSCCON1,2)
// OSCCON1<NDIV3>
extern volatile __bit                   NDIV3               __at(0x76C3);	// @ (0xED8 * 8 + 3)
#define                                 NDIV3_bit           _BIT_ACCESS(OSCCON1,3)
// STATUS<NEGATIVE>
extern volatile __bit                   NEGATIVE            __at(0x7EC4);	// @ (0xFD8 * 8 + 4)
#define                                 NEGATIVE_bit        _BIT_ACCESS(STATUS,4)
// OSCCON1<NOSC0>
extern volatile __bit                   NOSC0               __at(0x76C4);	// @ (0xED8 * 8 + 4)
#define                                 NOSC0_bit           _BIT_ACCESS(OSCCON1,4)
// OSCCON1<NOSC1>
extern volatile __bit                   NOSC1               __at(0x76C5);	// @ (0xED8 * 8 + 5)
#define                                 NOSC1_bit           _BIT_ACCESS(OSCCON1,5)
// OSCCON1<NOSC2>
extern volatile __bit                   NOSC2               __at(0x76C6);	// @ (0xED8 * 8 + 6)
#define                                 NOSC2_bit           _BIT_ACCESS(OSCCON1,6)
// OSCCON3<NOSCR>
extern volatile __bit                   NOSCR               __at(0x76D3);	// @ (0xEDA * 8 + 3)
#define                                 NOSCR_bit           _BIT_ACCESS(OSCCON3,3)
// SSP1STAT<NOT_A2>
extern volatile __bit                   NOT_A2              __at(0x7CAD);	// @ (0xF95 * 8 + 5)
#define                                 NOT_A2_bit          _BIT_ACCESS(SSP1STAT,5)
// SSP1STAT<NOT_ADDRESS>
extern volatile __bit                   NOT_ADDRESS         __at(0x7CAD);	// @ (0xF95 * 8 + 5)
#define                                 NOT_ADDRESS_bit     _BIT_ACCESS(SSP1STAT,5)
// SSP1STAT<NOT_ADDRESS1>
extern volatile __bit                   NOT_ADDRESS1        __at(0x7CAD);	// @ (0xF95 * 8 + 5)
#define                                 NOT_ADDRESS1_bit    _BIT_ACCESS(SSP1STAT,5)
// PCON0<NOT_BOR>
extern volatile __bit                   NOT_BOR             __at(0x7EB8);	// @ (0xFD7 * 8 + 0)
#define                                 NOT_BOR_bit         _BIT_ACCESS(PCON0,0)
// STATUS<NOT_PD>
extern volatile __bit                   NOT_PD              __at(0x7EC5);	// @ (0xFD8 * 8 + 5)
#define                                 NOT_PD_bit          _BIT_ACCESS(STATUS,5)
// PCON0<NOT_POR>
extern volatile __bit                   NOT_POR             __at(0x7EB9);	// @ (0xFD7 * 8 + 1)
#define                                 NOT_POR_bit         _BIT_ACCESS(PCON0,1)
// PCON0<NOT_RI>
extern volatile __bit                   NOT_RI              __at(0x7EBA);	// @ (0xFD7 * 8 + 2)
#define                                 NOT_RI_bit          _BIT_ACCESS(PCON0,2)
// PCON0<NOT_RMCLR>
extern volatile __bit                   NOT_RMCLR           __at(0x7EBB);	// @ (0xFD7 * 8 + 3)
#define                                 NOT_RMCLR_bit       _BIT_ACCESS(PCON0,3)
// PCON0<NOT_RWDT>
extern volatile __bit                   NOT_RWDT            __at(0x7EBC);	// @ (0xFD7 * 8 + 4)
#define                                 NOT_RWDT_bit        _BIT_ACCESS(PCON0,4)
// T1CON<NOT_T1SYNC>
extern volatile __bit                   NOT_T1SYNC          __at(0x7E7A);	// @ (0xFCF * 8 + 2)
#define                                 NOT_T1SYNC_bit      _BIT_ACCESS(T1CON,2)
// T3CON<NOT_T3SYNC>
extern volatile __bit                   NOT_T3SYNC          __at(0x7E4A);	// @ (0xFC9 * 8 + 2)
#define                                 NOT_T3SYNC_bit      _BIT_ACCESS(T3CON,2)
// T5CON<NOT_T5SYNC>
extern volatile __bit                   NOT_T5SYNC          __at(0x7E1A);	// @ (0xFC3 * 8 + 2)
#define                                 NOT_T5SYNC_bit      _BIT_ACCESS(T5CON,2)
// STATUS<NOT_TO>
extern volatile __bit                   NOT_TO              __at(0x7EC6);	// @ (0xFD8 * 8 + 6)
#define                                 NOT_TO_bit          _BIT_ACCESS(STATUS,6)
// SSP1STAT<NOT_W2>
extern volatile __bit                   NOT_W2              __at(0x7CAA);	// @ (0xF95 * 8 + 2)
#define                                 NOT_W2_bit          _BIT_ACCESS(SSP1STAT,2)
// PCON0<NOT_WDTWV>
extern volatile __bit                   NOT_WDTWV           __at(0x7EBD);	// @ (0xFD7 * 8 + 5)
#define                                 NOT_WDTWV_bit       _BIT_ACCESS(PCON0,5)
// SSP1STAT<NOT_WRITE>
extern volatile __bit                   NOT_WRITE           __at(0x7CAA);	// @ (0xF95 * 8 + 2)
#define                                 NOT_WRITE_bit       _BIT_ACCESS(SSP1STAT,2)
// SSP1STAT<NOT_WRITE1>
extern volatile __bit                   NOT_WRITE1          __at(0x7CAA);	// @ (0xF95 * 8 + 2)
#define                                 NOT_WRITE1_bit      _BIT_ACCESS(SSP1STAT,2)
// DAC1CON0<NSS>
extern volatile __bit                   NSS                 __at(0x7998);	// @ (0xF33 * 8 + 0)
#define                                 NSS_bit             _BIT_ACCESS(DAC1CON0,0)
// NVMADR<NVMADR0>
extern volatile __bit                   NVMADR0             __at(0x7BF0);	// @ (0xF7E * 8 + 0)
#define                                 NVMADR0_bit         _BIT_ACCESS(NVMADR,0)
// NVMADR<NVMADR1>
extern volatile __bit                   NVMADR1             __at(0x7BF1);	// @ (0xF7E * 8 + 1)
#define                                 NVMADR1_bit         _BIT_ACCESS(NVMADR,1)
// NVMADR<NVMADR2>
extern volatile __bit                   NVMADR2             __at(0x7BF2);	// @ (0xF7E * 8 + 2)
#define                                 NVMADR2_bit         _BIT_ACCESS(NVMADR,2)
// NVMADR<NVMADR3>
extern volatile __bit                   NVMADR3             __at(0x7BF3);	// @ (0xF7E * 8 + 3)
#define                                 NVMADR3_bit         _BIT_ACCESS(NVMADR,3)
// NVMADR<NVMADR4>
extern volatile __bit                   NVMADR4             __at(0x7BF4);	// @ (0xF7E * 8 + 4)
#define                                 NVMADR4_bit         _BIT_ACCESS(NVMADR,4)
// NVMADR<NVMADR5>
extern volatile __bit                   NVMADR5             __at(0x7BF5);	// @ (0xF7E * 8 + 5)
#define                                 NVMADR5_bit         _BIT_ACCESS(NVMADR,5)
// NVMADR<NVMADR6>
extern volatile __bit                   NVMADR6             __at(0x7BF6);	// @ (0xF7E * 8 + 6)
#define                                 NVMADR6_bit         _BIT_ACCESS(NVMADR,6)
// NVMADR<NVMADR7>
extern volatile __bit                   NVMADR7             __at(0x7BF7);	// @ (0xF7E * 8 + 7)
#define                                 NVMADR7_bit         _BIT_ACCESS(NVMADR,7)
// NVMDAT<NVMDAT0>
extern volatile __bit                   NVMDAT0             __at(0x7C00);	// @ (0xF80 * 8 + 0)
#define                                 NVMDAT0_bit         _BIT_ACCESS(NVMDAT,0)
// NVMDAT<NVMDAT1>
extern volatile __bit                   NVMDAT1             __at(0x7C01);	// @ (0xF80 * 8 + 1)
#define                                 NVMDAT1_bit         _BIT_ACCESS(NVMDAT,1)
// NVMDAT<NVMDAT2>
extern volatile __bit                   NVMDAT2             __at(0x7C02);	// @ (0xF80 * 8 + 2)
#define                                 NVMDAT2_bit         _BIT_ACCESS(NVMDAT,2)
// NVMDAT<NVMDAT3>
extern volatile __bit                   NVMDAT3             __at(0x7C03);	// @ (0xF80 * 8 + 3)
#define                                 NVMDAT3_bit         _BIT_ACCESS(NVMDAT,3)
// NVMDAT<NVMDAT4>
extern volatile __bit                   NVMDAT4             __at(0x7C04);	// @ (0xF80 * 8 + 4)
#define                                 NVMDAT4_bit         _BIT_ACCESS(NVMDAT,4)
// NVMDAT<NVMDAT5>
extern volatile __bit                   NVMDAT5             __at(0x7C05);	// @ (0xF80 * 8 + 5)
#define                                 NVMDAT5_bit         _BIT_ACCESS(NVMDAT,5)
// NVMDAT<NVMDAT6>
extern volatile __bit                   NVMDAT6             __at(0x7C06);	// @ (0xF80 * 8 + 6)
#define                                 NVMDAT6_bit         _BIT_ACCESS(NVMDAT,6)
// NVMDAT<NVMDAT7>
extern volatile __bit                   NVMDAT7             __at(0x7C07);	// @ (0xF80 * 8 + 7)
#define                                 NVMDAT7_bit         _BIT_ACCESS(NVMDAT,7)
// PIE7<NVMIE>
extern volatile __bit                   NVMIE               __at(0x764D);	// @ (0xEC9 * 8 + 5)
#define                                 NVMIE_bit           _BIT_ACCESS(PIE7,5)
// PIR7<NVMIF>
extern volatile __bit                   NVMIF               __at(0x768D);	// @ (0xED1 * 8 + 5)
#define                                 NVMIF_bit           _BIT_ACCESS(PIR7,5)
// IPR7<NVMIP>
extern volatile __bit                   NVMIP               __at(0x760D);	// @ (0xEC1 * 8 + 5)
#define                                 NVMIP_bit           _BIT_ACCESS(IPR7,5)
// PMD0<NVMMD>
extern volatile __bit                   NVMMD               __at(0x770A);	// @ (0xEE1 * 8 + 2)
#define                                 NVMMD_bit           _BIT_ACCESS(PMD0,2)
// NVMCON1<NVMREG0>
extern volatile __bit                   NVMREG0             __at(0x7C0E);	// @ (0xF81 * 8 + 6)
#define                                 NVMREG0_bit         _BIT_ACCESS(NVMCON1,6)
// NVMCON1<NVMREG1>
extern volatile __bit                   NVMREG1             __at(0x7C0F);	// @ (0xF81 * 8 + 7)
#define                                 NVMREG1_bit         _BIT_ACCESS(NVMCON1,7)
// ODCONA<ODCA0>
extern volatile __bit                   ODCA0               __at(0x7878);	// @ (0xF0F * 8 + 0)
#define                                 ODCA0_bit           _BIT_ACCESS(ODCONA,0)
// ODCONA<ODCA1>
extern volatile __bit                   ODCA1               __at(0x7879);	// @ (0xF0F * 8 + 1)
#define                                 ODCA1_bit           _BIT_ACCESS(ODCONA,1)
// ODCONA<ODCA2>
extern volatile __bit                   ODCA2               __at(0x787A);	// @ (0xF0F * 8 + 2)
#define                                 ODCA2_bit           _BIT_ACCESS(ODCONA,2)
// ODCONA<ODCA3>
extern volatile __bit                   ODCA3               __at(0x787B);	// @ (0xF0F * 8 + 3)
#define                                 ODCA3_bit           _BIT_ACCESS(ODCONA,3)
// ODCONA<ODCA4>
extern volatile __bit                   ODCA4               __at(0x787C);	// @ (0xF0F * 8 + 4)
#define                                 ODCA4_bit           _BIT_ACCESS(ODCONA,4)
// ODCONA<ODCA5>
extern volatile __bit                   ODCA5               __at(0x787D);	// @ (0xF0F * 8 + 5)
#define                                 ODCA5_bit           _BIT_ACCESS(ODCONA,5)
// ODCONA<ODCA6>
extern volatile __bit                   ODCA6               __at(0x787E);	// @ (0xF0F * 8 + 6)
#define                                 ODCA6_bit           _BIT_ACCESS(ODCONA,6)
// ODCONA<ODCA7>
extern volatile __bit                   ODCA7               __at(0x787F);	// @ (0xF0F * 8 + 7)
#define                                 ODCA7_bit           _BIT_ACCESS(ODCONA,7)
// ODCONB<ODCB0>
extern volatile __bit                   ODCB0               __at(0x78B8);	// @ (0xF17 * 8 + 0)
#define                                 ODCB0_bit           _BIT_ACCESS(ODCONB,0)
// ODCONB<ODCB1>
extern volatile __bit                   ODCB1               __at(0x78B9);	// @ (0xF17 * 8 + 1)
#define                                 ODCB1_bit           _BIT_ACCESS(ODCONB,1)
// ODCONB<ODCB2>
extern volatile __bit                   ODCB2               __at(0x78BA);	// @ (0xF17 * 8 + 2)
#define                                 ODCB2_bit           _BIT_ACCESS(ODCONB,2)
// ODCONB<ODCB3>
extern volatile __bit                   ODCB3               __at(0x78BB);	// @ (0xF17 * 8 + 3)
#define                                 ODCB3_bit           _BIT_ACCESS(ODCONB,3)
// ODCONB<ODCB4>
extern volatile __bit                   ODCB4               __at(0x78BC);	// @ (0xF17 * 8 + 4)
#define                                 ODCB4_bit           _BIT_ACCESS(ODCONB,4)
// ODCONB<ODCB5>
extern volatile __bit                   ODCB5               __at(0x78BD);	// @ (0xF17 * 8 + 5)
#define                                 ODCB5_bit           _BIT_ACCESS(ODCONB,5)
// ODCONB<ODCB6>
extern volatile __bit                   ODCB6               __at(0x78BE);	// @ (0xF17 * 8 + 6)
#define                                 ODCB6_bit           _BIT_ACCESS(ODCONB,6)
// ODCONB<ODCB7>
extern volatile __bit                   ODCB7               __at(0x78BF);	// @ (0xF17 * 8 + 7)
#define                                 ODCB7_bit           _BIT_ACCESS(ODCONB,7)
// ODCONC<ODCC0>
extern volatile __bit                   ODCC0               __at(0x78F8);	// @ (0xF1F * 8 + 0)
#define                                 ODCC0_bit           _BIT_ACCESS(ODCONC,0)
// ODCONC<ODCC1>
extern volatile __bit                   ODCC1               __at(0x78F9);	// @ (0xF1F * 8 + 1)
#define                                 ODCC1_bit           _BIT_ACCESS(ODCONC,1)
// ODCONC<ODCC2>
extern volatile __bit                   ODCC2               __at(0x78FA);	// @ (0xF1F * 8 + 2)
#define                                 ODCC2_bit           _BIT_ACCESS(ODCONC,2)
// ODCONC<ODCC3>
extern volatile __bit                   ODCC3               __at(0x78FB);	// @ (0xF1F * 8 + 3)
#define                                 ODCC3_bit           _BIT_ACCESS(ODCONC,3)
// ODCONC<ODCC4>
extern volatile __bit                   ODCC4               __at(0x78FC);	// @ (0xF1F * 8 + 4)
#define                                 ODCC4_bit           _BIT_ACCESS(ODCONC,4)
// ODCONC<ODCC5>
extern volatile __bit                   ODCC5               __at(0x78FD);	// @ (0xF1F * 8 + 5)
#define                                 ODCC5_bit           _BIT_ACCESS(ODCONC,5)
// ODCONC<ODCC6>
extern volatile __bit                   ODCC6               __at(0x78FE);	// @ (0xF1F * 8 + 6)
#define                                 ODCC6_bit           _BIT_ACCESS(ODCONC,6)
// ODCONC<ODCC7>
extern volatile __bit                   ODCC7               __at(0x78FF);	// @ (0xF1F * 8 + 7)
#define                                 ODCC7_bit           _BIT_ACCESS(ODCONC,7)
// DAC1CON0<OE1>
extern volatile __bit                   OE1                 __at(0x799D);	// @ (0xF33 * 8 + 5)
#define                                 OE1_bit             _BIT_ACCESS(DAC1CON0,5)
// DAC1CON0<OE2>
extern volatile __bit                   OE2                 __at(0x799C);	// @ (0xF33 * 8 + 4)
#define                                 OE2_bit             _BIT_ACCESS(DAC1CON0,4)
// RC1STA<OERR>
extern volatile __bit                   OERR                __at(0x7CE9);	// @ (0xF9D * 8 + 1)
#define                                 OERR_bit            _BIT_ACCESS(RC1STA,1)
// MDCON0<OPOL>
extern volatile __bit                   OPOL                __at(0x7A8C);	// @ (0xF51 * 8 + 4)
#define                                 OPOL_bit            _BIT_ACCESS(MDCON0,4)
// OSCCON3<ORDY>
extern volatile __bit                   ORDY                __at(0x76D4);	// @ (0xEDA * 8 + 4)
#define                                 ORDY_bit            _BIT_ACCESS(OSCCON3,4)
// PIE1<OSCFIE>
extern volatile __bit                   OSCFIE              __at(0x761F);	// @ (0xEC3 * 8 + 7)
#define                                 OSCFIE_bit          _BIT_ACCESS(PIE1,7)
// PIR1<OSCFIF>
extern volatile __bit                   OSCFIF              __at(0x765F);	// @ (0xECB * 8 + 7)
#define                                 OSCFIF_bit          _BIT_ACCESS(PIR1,7)
// IPR1<OSCFIP>
extern volatile __bit                   OSCFIP              __at(0x75DF);	// @ (0xEBB * 8 + 7)
#define                                 OSCFIP_bit          _BIT_ACCESS(IPR1,7)
// STATUS<OV>
extern volatile __bit                   OV                  __at(0x7EC3);	// @ (0xFD8 * 8 + 3)
#define                                 OV_bit              _BIT_ACCESS(STATUS,3)
// STATUS<OVERFLOW>
extern volatile __bit                   OVERFLOW            __at(0x7EC3);	// @ (0xFD8 * 8 + 3)
#define                                 OVERFLOW_bit        _BIT_ACCESS(STATUS,3)
// CWG1STR<OVRA>
extern volatile __bit                   OVRA                __at(0x7A44);	// @ (0xF48 * 8 + 4)
#define                                 OVRA_bit            _BIT_ACCESS(CWG1STR,4)
// CWG1STR<OVRB>
extern volatile __bit                   OVRB                __at(0x7A45);	// @ (0xF48 * 8 + 5)
#define                                 OVRB_bit            _BIT_ACCESS(CWG1STR,5)
// CWG1STR<OVRC>
extern volatile __bit                   OVRC                __at(0x7A46);	// @ (0xF48 * 8 + 6)
#define                                 OVRC_bit            _BIT_ACCESS(CWG1STR,6)
// CWG1STR<OVRD>
extern volatile __bit                   OVRD                __at(0x7A47);	// @ (0xF48 * 8 + 7)
#define                                 OVRD_bit            _BIT_ACCESS(CWG1STR,7)
// CCP1CON<P1M1>
extern volatile __bit                   P1M1                __at(0x7D67);	// @ (0xFAC * 8 + 7)
#define                                 P1M1_bit            _BIT_ACCESS(CCP1CON,7)
// SSP1STAT<P2>
extern volatile __bit                   P2                  __at(0x7CAC);	// @ (0xF95 * 8 + 4)
#define                                 P2_bit              _BIT_ACCESS(SSP1STAT,4)
// CCPTMRS<P3TSEL0>
extern volatile __bit                   P3TSEL0             __at(0x7D74);	// @ (0xFAE * 8 + 4)
#define                                 P3TSEL0_bit         _BIT_ACCESS(CCPTMRS,4)
// CCPTMRS<P3TSEL1>
extern volatile __bit                   P3TSEL1             __at(0x7D75);	// @ (0xFAE * 8 + 5)
#define                                 P3TSEL1_bit         _BIT_ACCESS(CCPTMRS,5)
// CCPTMRS<P4TSEL0>
extern volatile __bit                   P4TSEL0             __at(0x7D76);	// @ (0xFAE * 8 + 6)
#define                                 P4TSEL0_bit         _BIT_ACCESS(CCPTMRS,6)
// CCPTMRS<P4TSEL1>
extern volatile __bit                   P4TSEL1             __at(0x7D77);	// @ (0xFAE * 8 + 7)
#define                                 P4TSEL1_bit         _BIT_ACCESS(CCPTMRS,7)
// PORTC<PA1>
extern volatile __bit                   PA1                 __at(0x7C7A);	// @ (0xF8F * 8 + 2)
#define                                 PA1_bit             _BIT_ACCESS(PORTC,2)
// PORTC<PA2>
extern volatile __bit                   PA2                 __at(0x7C79);	// @ (0xF8F * 8 + 1)
#define                                 PA2_bit             _BIT_ACCESS(PORTC,1)
// PORTE<PC3E>
extern volatile __bit                   PC3E                __at(0x7C8B);	// @ (0xF91 * 8 + 3)
#define                                 PC3E_bit            _BIT_ACCESS(PORTE,3)
// SSP1CON3<PCIE>
extern volatile __bit                   PCIE                __at(0x7CC6);	// @ (0xF98 * 8 + 6)
#define                                 PCIE_bit            _BIT_ACCESS(SSP1CON3,6)
// STATUS<PD>
extern volatile __bit                   PD                  __at(0x7EC5);	// @ (0xFD8 * 8 + 5)
#define                                 PD_bit              _BIT_ACCESS(STATUS,5)
// INTCON<PEIE>
extern volatile __bit                   PEIE                __at(0x7F96);	// @ (0xFF2 * 8 + 6)
#define                                 PEIE_bit            _BIT_ACCESS(INTCON,6)
// INTCON<PEIE_GIEL>
extern volatile __bit                   PEIE_GIEL           __at(0x7F96);	// @ (0xFF2 * 8 + 6)
#define                                 PEIE_GIEL_bit       _BIT_ACCESS(INTCON,6)
// SSP1CON2<PEN>
extern volatile __bit                   PEN                 __at(0x7CBA);	// @ (0xF97 * 8 + 2)
#define                                 PEN_bit             _BIT_ACCESS(SSP1CON2,2)
// SSP1CON2<PEN1>
extern volatile __bit                   PEN1                __at(0x7CBA);	// @ (0xF97 * 8 + 2)
#define                                 PEN1_bit            _BIT_ACCESS(SSP1CON2,2)
// CRCCON1<PLEN0>
extern volatile __bit                   PLEN0               __at(0x7BE8);	// @ (0xF7D * 8 + 0)
#define                                 PLEN0_bit           _BIT_ACCESS(CRCCON1,0)
// CRCCON1<PLEN1>
extern volatile __bit                   PLEN1               __at(0x7BE9);	// @ (0xF7D * 8 + 1)
#define                                 PLEN1_bit           _BIT_ACCESS(CRCCON1,1)
// CRCCON1<PLEN2>
extern volatile __bit                   PLEN2               __at(0x7BEA);	// @ (0xF7D * 8 + 2)
#define                                 PLEN2_bit           _BIT_ACCESS(CRCCON1,2)
// CRCCON1<PLEN3>
extern volatile __bit                   PLEN3               __at(0x7BEB);	// @ (0xF7D * 8 + 3)
#define                                 PLEN3_bit           _BIT_ACCESS(CRCCON1,3)
// OSCSTAT<PLLR>
extern volatile __bit                   PLLR                __at(0x76D8);	// @ (0xEDB * 8 + 0)
#define                                 PLLR_bit            _BIT_ACCESS(OSCSTAT,0)
// CWG1CON1<POLA>
extern volatile __bit                   POLA                __at(0x7A28);	// @ (0xF45 * 8 + 0)
#define                                 POLA_bit            _BIT_ACCESS(CWG1CON1,0)
// CWG1CON1<POLB>
extern volatile __bit                   POLB                __at(0x7A29);	// @ (0xF45 * 8 + 1)
#define                                 POLB_bit            _BIT_ACCESS(CWG1CON1,1)
// CWG1CON1<POLC>
extern volatile __bit                   POLC                __at(0x7A2A);	// @ (0xF45 * 8 + 2)
#define                                 POLC_bit            _BIT_ACCESS(CWG1CON1,2)
// CWG1CON1<POLD>
extern volatile __bit                   POLD                __at(0x7A2B);	// @ (0xF45 * 8 + 3)
#define                                 POLD_bit            _BIT_ACCESS(CWG1CON1,3)
// PCON0<POR>
extern volatile __bit                   POR                 __at(0x7EB9);	// @ (0xFD7 * 8 + 1)
#define                                 POR_bit             _BIT_ACCESS(PCON0,1)
// PPSLOCK<PPSLOCKED>
extern volatile __bit                   PPSLOCKED           __at(0x7500);	// @ (0xEA0 * 8 + 0)
#define                                 PPSLOCKED_bit       _BIT_ACCESS(PPSLOCK,0)
// WDTPSL<PSCNT0>
extern volatile __bit                   PSCNT0              __at(0x76A0);	// @ (0xED4 * 8 + 0)
#define                                 PSCNT0_bit          _BIT_ACCESS(WDTPSL,0)
// WDTPSL<PSCNT1>
extern volatile __bit                   PSCNT1              __at(0x76A1);	// @ (0xED4 * 8 + 1)
#define                                 PSCNT1_bit          _BIT_ACCESS(WDTPSL,1)
// WDTPSH<PSCNT10>
extern volatile __bit                   PSCNT10             __at(0x76AA);	// @ (0xED5 * 8 + 2)
#define                                 PSCNT10_bit         _BIT_ACCESS(WDTPSH,2)
// WDTPSH<PSCNT11>
extern volatile __bit                   PSCNT11             __at(0x76AB);	// @ (0xED5 * 8 + 3)
#define                                 PSCNT11_bit         _BIT_ACCESS(WDTPSH,3)
// WDTPSH<PSCNT12>
extern volatile __bit                   PSCNT12             __at(0x76AC);	// @ (0xED5 * 8 + 4)
#define                                 PSCNT12_bit         _BIT_ACCESS(WDTPSH,4)
// WDTPSH<PSCNT13>
extern volatile __bit                   PSCNT13             __at(0x76AD);	// @ (0xED5 * 8 + 5)
#define                                 PSCNT13_bit         _BIT_ACCESS(WDTPSH,5)
// WDTPSH<PSCNT14>
extern volatile __bit                   PSCNT14             __at(0x76AE);	// @ (0xED5 * 8 + 6)
#define                                 PSCNT14_bit         _BIT_ACCESS(WDTPSH,6)
// WDTPSH<PSCNT15>
extern volatile __bit                   PSCNT15             __at(0x76AF);	// @ (0xED5 * 8 + 7)
#define                                 PSCNT15_bit         _BIT_ACCESS(WDTPSH,7)
// WDTTMR<PSCNT16>
extern volatile __bit                   PSCNT16             __at(0x76B0);	// @ (0xED6 * 8 + 0)
#define                                 PSCNT16_bit         _BIT_ACCESS(WDTTMR,0)
// WDTTMR<PSCNT17>
extern volatile __bit                   PSCNT17             __at(0x76B1);	// @ (0xED6 * 8 + 1)
#define                                 PSCNT17_bit         _BIT_ACCESS(WDTTMR,1)
// WDTPSL<PSCNT2>
extern volatile __bit                   PSCNT2              __at(0x76A2);	// @ (0xED4 * 8 + 2)
#define                                 PSCNT2_bit          _BIT_ACCESS(WDTPSL,2)
// WDTPSL<PSCNT3>
extern volatile __bit                   PSCNT3              __at(0x76A3);	// @ (0xED4 * 8 + 3)
#define                                 PSCNT3_bit          _BIT_ACCESS(WDTPSL,3)
// WDTPSL<PSCNT4>
extern volatile __bit                   PSCNT4              __at(0x76A4);	// @ (0xED4 * 8 + 4)
#define                                 PSCNT4_bit          _BIT_ACCESS(WDTPSL,4)
// WDTPSL<PSCNT5>
extern volatile __bit                   PSCNT5              __at(0x76A5);	// @ (0xED4 * 8 + 5)
#define                                 PSCNT5_bit          _BIT_ACCESS(WDTPSL,5)
// WDTPSL<PSCNT6>
extern volatile __bit                   PSCNT6              __at(0x76A6);	// @ (0xED4 * 8 + 6)
#define                                 PSCNT6_bit          _BIT_ACCESS(WDTPSL,6)
// WDTPSL<PSCNT7>
extern volatile __bit                   PSCNT7              __at(0x76A7);	// @ (0xED4 * 8 + 7)
#define                                 PSCNT7_bit          _BIT_ACCESS(WDTPSL,7)
// WDTPSH<PSCNT8>
extern volatile __bit                   PSCNT8              __at(0x76A8);	// @ (0xED5 * 8 + 0)
#define                                 PSCNT8_bit          _BIT_ACCESS(WDTPSH,0)
// WDTPSH<PSCNT9>
extern volatile __bit                   PSCNT9              __at(0x76A9);	// @ (0xED5 * 8 + 1)
#define                                 PSCNT9_bit          _BIT_ACCESS(WDTPSH,1)
// PIE1<PSPIE>
extern volatile __bit                   PSPIE               __at(0x761F);	// @ (0xEC3 * 8 + 7)
#define                                 PSPIE_bit           _BIT_ACCESS(PIE1,7)
// PIR1<PSPIF>
extern volatile __bit                   PSPIF               __at(0x765F);	// @ (0xECB * 8 + 7)
#define                                 PSPIF_bit           _BIT_ACCESS(PIR1,7)
// IPR1<PSPIP>
extern volatile __bit                   PSPIP               __at(0x75DF);	// @ (0xEBB * 8 + 7)
#define                                 PSPIP_bit           _BIT_ACCESS(IPR1,7)
// DAC1CON0<PSS0>
extern volatile __bit                   PSS0                __at(0x799A);	// @ (0xF33 * 8 + 2)
#define                                 PSS0_bit            _BIT_ACCESS(DAC1CON0,2)
// DAC1CON0<PSS1>
extern volatile __bit                   PSS1                __at(0x799B);	// @ (0xF33 * 8 + 3)
#define                                 PSS1_bit            _BIT_ACCESS(DAC1CON0,3)
// PWM3DCL<PWM3DC0>
extern volatile __bit                   PWM3DC0             __at(0x7D1E);	// @ (0xFA3 * 8 + 6)
#define                                 PWM3DC0_bit         _BIT_ACCESS(PWM3DCL,6)
// PWM3DCL<PWM3DC1>
extern volatile __bit                   PWM3DC1             __at(0x7D1F);	// @ (0xFA3 * 8 + 7)
#define                                 PWM3DC1_bit         _BIT_ACCESS(PWM3DCL,7)
// PWM3DCH<PWM3DC2>
extern volatile __bit                   PWM3DC2             __at(0x7D20);	// @ (0xFA4 * 8 + 0)
#define                                 PWM3DC2_bit         _BIT_ACCESS(PWM3DCH,0)
// PWM3DCH<PWM3DC3>
extern volatile __bit                   PWM3DC3             __at(0x7D21);	// @ (0xFA4 * 8 + 1)
#define                                 PWM3DC3_bit         _BIT_ACCESS(PWM3DCH,1)
// PWM3DCH<PWM3DC4>
extern volatile __bit                   PWM3DC4             __at(0x7D22);	// @ (0xFA4 * 8 + 2)
#define                                 PWM3DC4_bit         _BIT_ACCESS(PWM3DCH,2)
// PWM3DCH<PWM3DC5>
extern volatile __bit                   PWM3DC5             __at(0x7D23);	// @ (0xFA4 * 8 + 3)
#define                                 PWM3DC5_bit         _BIT_ACCESS(PWM3DCH,3)
// PWM3DCH<PWM3DC6>
extern volatile __bit                   PWM3DC6             __at(0x7D24);	// @ (0xFA4 * 8 + 4)
#define                                 PWM3DC6_bit         _BIT_ACCESS(PWM3DCH,4)
// PWM3DCH<PWM3DC7>
extern volatile __bit                   PWM3DC7             __at(0x7D25);	// @ (0xFA4 * 8 + 5)
#define                                 PWM3DC7_bit         _BIT_ACCESS(PWM3DCH,5)
// PWM3DCH<PWM3DC8>
extern volatile __bit                   PWM3DC8             __at(0x7D26);	// @ (0xFA4 * 8 + 6)
#define                                 PWM3DC8_bit         _BIT_ACCESS(PWM3DCH,6)
// PWM3DCH<PWM3DC9>
extern volatile __bit                   PWM3DC9             __at(0x7D27);	// @ (0xFA4 * 8 + 7)
#define                                 PWM3DC9_bit         _BIT_ACCESS(PWM3DCH,7)
// PWM3CON<PWM3EN>
extern volatile __bit                   PWM3EN              __at(0x7D2F);	// @ (0xFA5 * 8 + 7)
#define                                 PWM3EN_bit          _BIT_ACCESS(PWM3CON,7)
// PMD3<PWM3MD>
extern volatile __bit                   PWM3MD              __at(0x7722);	// @ (0xEE4 * 8 + 2)
#define                                 PWM3MD_bit          _BIT_ACCESS(PMD3,2)
// PWM3CON<PWM3OUT>
extern volatile __bit                   PWM3OUT             __at(0x7D2D);	// @ (0xFA5 * 8 + 5)
#define                                 PWM3OUT_bit         _BIT_ACCESS(PWM3CON,5)
// PWM3CON<PWM3POL>
extern volatile __bit                   PWM3POL             __at(0x7D2C);	// @ (0xFA5 * 8 + 4)
#define                                 PWM3POL_bit         _BIT_ACCESS(PWM3CON,4)
// PWM4DCL<PWM4DC0>
extern volatile __bit                   PWM4DC0             __at(0x7D06);	// @ (0xFA0 * 8 + 6)
#define                                 PWM4DC0_bit         _BIT_ACCESS(PWM4DCL,6)
// PWM4DCL<PWM4DC1>
extern volatile __bit                   PWM4DC1             __at(0x7D07);	// @ (0xFA0 * 8 + 7)
#define                                 PWM4DC1_bit         _BIT_ACCESS(PWM4DCL,7)
// PWM4DCH<PWM4DC2>
extern volatile __bit                   PWM4DC2             __at(0x7D08);	// @ (0xFA1 * 8 + 0)
#define                                 PWM4DC2_bit         _BIT_ACCESS(PWM4DCH,0)
// PWM4DCH<PWM4DC3>
extern volatile __bit                   PWM4DC3             __at(0x7D09);	// @ (0xFA1 * 8 + 1)
#define                                 PWM4DC3_bit         _BIT_ACCESS(PWM4DCH,1)
// PWM4DCH<PWM4DC4>
extern volatile __bit                   PWM4DC4             __at(0x7D0A);	// @ (0xFA1 * 8 + 2)
#define                                 PWM4DC4_bit         _BIT_ACCESS(PWM4DCH,2)
// PWM4DCH<PWM4DC5>
extern volatile __bit                   PWM4DC5             __at(0x7D0B);	// @ (0xFA1 * 8 + 3)
#define                                 PWM4DC5_bit         _BIT_ACCESS(PWM4DCH,3)
// PWM4DCH<PWM4DC6>
extern volatile __bit                   PWM4DC6             __at(0x7D0C);	// @ (0xFA1 * 8 + 4)
#define                                 PWM4DC6_bit         _BIT_ACCESS(PWM4DCH,4)
// PWM4DCH<PWM4DC7>
extern volatile __bit                   PWM4DC7             __at(0x7D0D);	// @ (0xFA1 * 8 + 5)
#define                                 PWM4DC7_bit         _BIT_ACCESS(PWM4DCH,5)
// PWM4DCH<PWM4DC8>
extern volatile __bit                   PWM4DC8             __at(0x7D0E);	// @ (0xFA1 * 8 + 6)
#define                                 PWM4DC8_bit         _BIT_ACCESS(PWM4DCH,6)
// PWM4DCH<PWM4DC9>
extern volatile __bit                   PWM4DC9             __at(0x7D0F);	// @ (0xFA1 * 8 + 7)
#define                                 PWM4DC9_bit         _BIT_ACCESS(PWM4DCH,7)
// PWM4CON<PWM4EN>
extern volatile __bit                   PWM4EN              __at(0x7D17);	// @ (0xFA2 * 8 + 7)
#define                                 PWM4EN_bit          _BIT_ACCESS(PWM4CON,7)
// PMD3<PWM4MD>
extern volatile __bit                   PWM4MD              __at(0x7723);	// @ (0xEE4 * 8 + 3)
#define                                 PWM4MD_bit          _BIT_ACCESS(PMD3,3)
// PWM4CON<PWM4OUT>
extern volatile __bit                   PWM4OUT             __at(0x7D15);	// @ (0xFA2 * 8 + 5)
#define                                 PWM4OUT_bit         _BIT_ACCESS(PWM4CON,5)
// PWM4CON<PWM4POL>
extern volatile __bit                   PWM4POL             __at(0x7D14);	// @ (0xFA2 * 8 + 4)
#define                                 PWM4POL_bit         _BIT_ACCESS(PWM4CON,4)
// PORTA<RA0>
extern volatile __bit                   RA0                 __at(0x7C68);	// @ (0xF8D * 8 + 0)
#define                                 RA0_bit             _BIT_ACCESS(PORTA,0)
// RA0PPS<RA0PPS0>
extern volatile __bit                   RA0PPS0             __at(0x7738);	// @ (0xEE7 * 8 + 0)
#define                                 RA0PPS0_bit         _BIT_ACCESS(RA0PPS,0)
// RA0PPS<RA0PPS1>
extern volatile __bit                   RA0PPS1             __at(0x7739);	// @ (0xEE7 * 8 + 1)
#define                                 RA0PPS1_bit         _BIT_ACCESS(RA0PPS,1)
// RA0PPS<RA0PPS2>
extern volatile __bit                   RA0PPS2             __at(0x773A);	// @ (0xEE7 * 8 + 2)
#define                                 RA0PPS2_bit         _BIT_ACCESS(RA0PPS,2)
// RA0PPS<RA0PPS3>
extern volatile __bit                   RA0PPS3             __at(0x773B);	// @ (0xEE7 * 8 + 3)
#define                                 RA0PPS3_bit         _BIT_ACCESS(RA0PPS,3)
// RA0PPS<RA0PPS4>
extern volatile __bit                   RA0PPS4             __at(0x773C);	// @ (0xEE7 * 8 + 4)
#define                                 RA0PPS4_bit         _BIT_ACCESS(RA0PPS,4)
// PORTA<RA1>
extern volatile __bit                   RA1                 __at(0x7C69);	// @ (0xF8D * 8 + 1)
#define                                 RA1_bit             _BIT_ACCESS(PORTA,1)
// RA1PPS<RA1PPS0>
extern volatile __bit                   RA1PPS0             __at(0x7740);	// @ (0xEE8 * 8 + 0)
#define                                 RA1PPS0_bit         _BIT_ACCESS(RA1PPS,0)
// RA1PPS<RA1PPS1>
extern volatile __bit                   RA1PPS1             __at(0x7741);	// @ (0xEE8 * 8 + 1)
#define                                 RA1PPS1_bit         _BIT_ACCESS(RA1PPS,1)
// RA1PPS<RA1PPS2>
extern volatile __bit                   RA1PPS2             __at(0x7742);	// @ (0xEE8 * 8 + 2)
#define                                 RA1PPS2_bit         _BIT_ACCESS(RA1PPS,2)
// RA1PPS<RA1PPS3>
extern volatile __bit                   RA1PPS3             __at(0x7743);	// @ (0xEE8 * 8 + 3)
#define                                 RA1PPS3_bit         _BIT_ACCESS(RA1PPS,3)
// RA1PPS<RA1PPS4>
extern volatile __bit                   RA1PPS4             __at(0x7744);	// @ (0xEE8 * 8 + 4)
#define                                 RA1PPS4_bit         _BIT_ACCESS(RA1PPS,4)
// PORTA<RA2>
extern volatile __bit                   RA2                 __at(0x7C6A);	// @ (0xF8D * 8 + 2)
#define                                 RA2_bit             _BIT_ACCESS(PORTA,2)
// RA2PPS<RA2PPS0>
extern volatile __bit                   RA2PPS0             __at(0x7748);	// @ (0xEE9 * 8 + 0)
#define                                 RA2PPS0_bit         _BIT_ACCESS(RA2PPS,0)
// RA2PPS<RA2PPS1>
extern volatile __bit                   RA2PPS1             __at(0x7749);	// @ (0xEE9 * 8 + 1)
#define                                 RA2PPS1_bit         _BIT_ACCESS(RA2PPS,1)
// RA2PPS<RA2PPS2>
extern volatile __bit                   RA2PPS2             __at(0x774A);	// @ (0xEE9 * 8 + 2)
#define                                 RA2PPS2_bit         _BIT_ACCESS(RA2PPS,2)
// RA2PPS<RA2PPS3>
extern volatile __bit                   RA2PPS3             __at(0x774B);	// @ (0xEE9 * 8 + 3)
#define                                 RA2PPS3_bit         _BIT_ACCESS(RA2PPS,3)
// RA2PPS<RA2PPS4>
extern volatile __bit                   RA2PPS4             __at(0x774C);	// @ (0xEE9 * 8 + 4)
#define                                 RA2PPS4_bit         _BIT_ACCESS(RA2PPS,4)
// PORTA<RA3>
extern volatile __bit                   RA3                 __at(0x7C6B);	// @ (0xF8D * 8 + 3)
#define                                 RA3_bit             _BIT_ACCESS(PORTA,3)
// RA3PPS<RA3PPS0>
extern volatile __bit                   RA3PPS0             __at(0x7750);	// @ (0xEEA * 8 + 0)
#define                                 RA3PPS0_bit         _BIT_ACCESS(RA3PPS,0)
// RA3PPS<RA3PPS1>
extern volatile __bit                   RA3PPS1             __at(0x7751);	// @ (0xEEA * 8 + 1)
#define                                 RA3PPS1_bit         _BIT_ACCESS(RA3PPS,1)
// RA3PPS<RA3PPS2>
extern volatile __bit                   RA3PPS2             __at(0x7752);	// @ (0xEEA * 8 + 2)
#define                                 RA3PPS2_bit         _BIT_ACCESS(RA3PPS,2)
// RA3PPS<RA3PPS3>
extern volatile __bit                   RA3PPS3             __at(0x7753);	// @ (0xEEA * 8 + 3)
#define                                 RA3PPS3_bit         _BIT_ACCESS(RA3PPS,3)
// RA3PPS<RA3PPS4>
extern volatile __bit                   RA3PPS4             __at(0x7754);	// @ (0xEEA * 8 + 4)
#define                                 RA3PPS4_bit         _BIT_ACCESS(RA3PPS,4)
// PORTA<RA4>
extern volatile __bit                   RA4                 __at(0x7C6C);	// @ (0xF8D * 8 + 4)
#define                                 RA4_bit             _BIT_ACCESS(PORTA,4)
// RA4PPS<RA4PPS0>
extern volatile __bit                   RA4PPS0             __at(0x7758);	// @ (0xEEB * 8 + 0)
#define                                 RA4PPS0_bit         _BIT_ACCESS(RA4PPS,0)
// RA4PPS<RA4PPS1>
extern volatile __bit                   RA4PPS1             __at(0x7759);	// @ (0xEEB * 8 + 1)
#define                                 RA4PPS1_bit         _BIT_ACCESS(RA4PPS,1)
// RA4PPS<RA4PPS2>
extern volatile __bit                   RA4PPS2             __at(0x775A);	// @ (0xEEB * 8 + 2)
#define                                 RA4PPS2_bit         _BIT_ACCESS(RA4PPS,2)
// RA4PPS<RA4PPS3>
extern volatile __bit                   RA4PPS3             __at(0x775B);	// @ (0xEEB * 8 + 3)
#define                                 RA4PPS3_bit         _BIT_ACCESS(RA4PPS,3)
// RA4PPS<RA4PPS4>
extern volatile __bit                   RA4PPS4             __at(0x775C);	// @ (0xEEB * 8 + 4)
#define                                 RA4PPS4_bit         _BIT_ACCESS(RA4PPS,4)
// PORTA<RA5>
extern volatile __bit                   RA5                 __at(0x7C6D);	// @ (0xF8D * 8 + 5)
#define                                 RA5_bit             _BIT_ACCESS(PORTA,5)
// RA5PPS<RA5PPS0>
extern volatile __bit                   RA5PPS0             __at(0x7760);	// @ (0xEEC * 8 + 0)
#define                                 RA5PPS0_bit         _BIT_ACCESS(RA5PPS,0)
// RA5PPS<RA5PPS1>
extern volatile __bit                   RA5PPS1             __at(0x7761);	// @ (0xEEC * 8 + 1)
#define                                 RA5PPS1_bit         _BIT_ACCESS(RA5PPS,1)
// RA5PPS<RA5PPS2>
extern volatile __bit                   RA5PPS2             __at(0x7762);	// @ (0xEEC * 8 + 2)
#define                                 RA5PPS2_bit         _BIT_ACCESS(RA5PPS,2)
// RA5PPS<RA5PPS3>
extern volatile __bit                   RA5PPS3             __at(0x7763);	// @ (0xEEC * 8 + 3)
#define                                 RA5PPS3_bit         _BIT_ACCESS(RA5PPS,3)
// RA5PPS<RA5PPS4>
extern volatile __bit                   RA5PPS4             __at(0x7764);	// @ (0xEEC * 8 + 4)
#define                                 RA5PPS4_bit         _BIT_ACCESS(RA5PPS,4)
// PORTA<RA6>
extern volatile __bit                   RA6                 __at(0x7C6E);	// @ (0xF8D * 8 + 6)
#define                                 RA6_bit             _BIT_ACCESS(PORTA,6)
// RA6PPS<RA6PPS0>
extern volatile __bit                   RA6PPS0             __at(0x7768);	// @ (0xEED * 8 + 0)
#define                                 RA6PPS0_bit         _BIT_ACCESS(RA6PPS,0)
// RA6PPS<RA6PPS1>
extern volatile __bit                   RA6PPS1             __at(0x7769);	// @ (0xEED * 8 + 1)
#define                                 RA6PPS1_bit         _BIT_ACCESS(RA6PPS,1)
// RA6PPS<RA6PPS2>
extern volatile __bit                   RA6PPS2             __at(0x776A);	// @ (0xEED * 8 + 2)
#define                                 RA6PPS2_bit         _BIT_ACCESS(RA6PPS,2)
// RA6PPS<RA6PPS3>
extern volatile __bit                   RA6PPS3             __at(0x776B);	// @ (0xEED * 8 + 3)
#define                                 RA6PPS3_bit         _BIT_ACCESS(RA6PPS,3)
// RA6PPS<RA6PPS4>
extern volatile __bit                   RA6PPS4             __at(0x776C);	// @ (0xEED * 8 + 4)
#define                                 RA6PPS4_bit         _BIT_ACCESS(RA6PPS,4)
// PORTA<RA7>
extern volatile __bit                   RA7                 __at(0x7C6F);	// @ (0xF8D * 8 + 7)
#define                                 RA7_bit             _BIT_ACCESS(PORTA,7)
// RA7PPS<RA7PPS0>
extern volatile __bit                   RA7PPS0             __at(0x7770);	// @ (0xEEE * 8 + 0)
#define                                 RA7PPS0_bit         _BIT_ACCESS(RA7PPS,0)
// RA7PPS<RA7PPS1>
extern volatile __bit                   RA7PPS1             __at(0x7771);	// @ (0xEEE * 8 + 1)
#define                                 RA7PPS1_bit         _BIT_ACCESS(RA7PPS,1)
// RA7PPS<RA7PPS2>
extern volatile __bit                   RA7PPS2             __at(0x7772);	// @ (0xEEE * 8 + 2)
#define                                 RA7PPS2_bit         _BIT_ACCESS(RA7PPS,2)
// RA7PPS<RA7PPS3>
extern volatile __bit                   RA7PPS3             __at(0x7773);	// @ (0xEEE * 8 + 3)
#define                                 RA7PPS3_bit         _BIT_ACCESS(RA7PPS,3)
// RA7PPS<RA7PPS4>
extern volatile __bit                   RA7PPS4             __at(0x7774);	// @ (0xEEE * 8 + 4)
#define                                 RA7PPS4_bit         _BIT_ACCESS(RA7PPS,4)
// PORTB<RB0>
extern volatile __bit                   RB0                 __at(0x7C70);	// @ (0xF8E * 8 + 0)
#define                                 RB0_bit             _BIT_ACCESS(PORTB,0)
// RB0PPS<RB0PPS0>
extern volatile __bit                   RB0PPS0             __at(0x7778);	// @ (0xEEF * 8 + 0)
#define                                 RB0PPS0_bit         _BIT_ACCESS(RB0PPS,0)
// RB0PPS<RB0PPS1>
extern volatile __bit                   RB0PPS1             __at(0x7779);	// @ (0xEEF * 8 + 1)
#define                                 RB0PPS1_bit         _BIT_ACCESS(RB0PPS,1)
// RB0PPS<RB0PPS2>
extern volatile __bit                   RB0PPS2             __at(0x777A);	// @ (0xEEF * 8 + 2)
#define                                 RB0PPS2_bit         _BIT_ACCESS(RB0PPS,2)
// RB0PPS<RB0PPS3>
extern volatile __bit                   RB0PPS3             __at(0x777B);	// @ (0xEEF * 8 + 3)
#define                                 RB0PPS3_bit         _BIT_ACCESS(RB0PPS,3)
// RB0PPS<RB0PPS4>
extern volatile __bit                   RB0PPS4             __at(0x777C);	// @ (0xEEF * 8 + 4)
#define                                 RB0PPS4_bit         _BIT_ACCESS(RB0PPS,4)
// PORTB<RB1>
extern volatile __bit                   RB1                 __at(0x7C71);	// @ (0xF8E * 8 + 1)
#define                                 RB1_bit             _BIT_ACCESS(PORTB,1)
// RB1PPS<RB1PPS0>
extern volatile __bit                   RB1PPS0             __at(0x7780);	// @ (0xEF0 * 8 + 0)
#define                                 RB1PPS0_bit         _BIT_ACCESS(RB1PPS,0)
// RB1PPS<RB1PPS1>
extern volatile __bit                   RB1PPS1             __at(0x7781);	// @ (0xEF0 * 8 + 1)
#define                                 RB1PPS1_bit         _BIT_ACCESS(RB1PPS,1)
// RB1PPS<RB1PPS2>
extern volatile __bit                   RB1PPS2             __at(0x7782);	// @ (0xEF0 * 8 + 2)
#define                                 RB1PPS2_bit         _BIT_ACCESS(RB1PPS,2)
// RB1PPS<RB1PPS3>
extern volatile __bit                   RB1PPS3             __at(0x7783);	// @ (0xEF0 * 8 + 3)
#define                                 RB1PPS3_bit         _BIT_ACCESS(RB1PPS,3)
// RB1PPS<RB1PPS4>
extern volatile __bit                   RB1PPS4             __at(0x7784);	// @ (0xEF0 * 8 + 4)
#define                                 RB1PPS4_bit         _BIT_ACCESS(RB1PPS,4)
// PORTB<RB2>
extern volatile __bit                   RB2                 __at(0x7C72);	// @ (0xF8E * 8 + 2)
#define                                 RB2_bit             _BIT_ACCESS(PORTB,2)
// RB2PPS<RB2PPS0>
extern volatile __bit                   RB2PPS0             __at(0x7788);	// @ (0xEF1 * 8 + 0)
#define                                 RB2PPS0_bit         _BIT_ACCESS(RB2PPS,0)
// RB2PPS<RB2PPS1>
extern volatile __bit                   RB2PPS1             __at(0x7789);	// @ (0xEF1 * 8 + 1)
#define                                 RB2PPS1_bit         _BIT_ACCESS(RB2PPS,1)
// RB2PPS<RB2PPS2>
extern volatile __bit                   RB2PPS2             __at(0x778A);	// @ (0xEF1 * 8 + 2)
#define                                 RB2PPS2_bit         _BIT_ACCESS(RB2PPS,2)
// RB2PPS<RB2PPS3>
extern volatile __bit                   RB2PPS3             __at(0x778B);	// @ (0xEF1 * 8 + 3)
#define                                 RB2PPS3_bit         _BIT_ACCESS(RB2PPS,3)
// RB2PPS<RB2PPS4>
extern volatile __bit                   RB2PPS4             __at(0x778C);	// @ (0xEF1 * 8 + 4)
#define                                 RB2PPS4_bit         _BIT_ACCESS(RB2PPS,4)
// PORTB<RB3>
extern volatile __bit                   RB3                 __at(0x7C73);	// @ (0xF8E * 8 + 3)
#define                                 RB3_bit             _BIT_ACCESS(PORTB,3)
// RB3PPS<RB3PPS0>
extern volatile __bit                   RB3PPS0             __at(0x7790);	// @ (0xEF2 * 8 + 0)
#define                                 RB3PPS0_bit         _BIT_ACCESS(RB3PPS,0)
// RB3PPS<RB3PPS1>
extern volatile __bit                   RB3PPS1             __at(0x7791);	// @ (0xEF2 * 8 + 1)
#define                                 RB3PPS1_bit         _BIT_ACCESS(RB3PPS,1)
// RB3PPS<RB3PPS2>
extern volatile __bit                   RB3PPS2             __at(0x7792);	// @ (0xEF2 * 8 + 2)
#define                                 RB3PPS2_bit         _BIT_ACCESS(RB3PPS,2)
// RB3PPS<RB3PPS3>
extern volatile __bit                   RB3PPS3             __at(0x7793);	// @ (0xEF2 * 8 + 3)
#define                                 RB3PPS3_bit         _BIT_ACCESS(RB3PPS,3)
// RB3PPS<RB3PPS4>
extern volatile __bit                   RB3PPS4             __at(0x7794);	// @ (0xEF2 * 8 + 4)
#define                                 RB3PPS4_bit         _BIT_ACCESS(RB3PPS,4)
// PORTB<RB4>
extern volatile __bit                   RB4                 __at(0x7C74);	// @ (0xF8E * 8 + 4)
#define                                 RB4_bit             _BIT_ACCESS(PORTB,4)
// RB4PPS<RB4PPS0>
extern volatile __bit                   RB4PPS0             __at(0x7798);	// @ (0xEF3 * 8 + 0)
#define                                 RB4PPS0_bit         _BIT_ACCESS(RB4PPS,0)
// RB4PPS<RB4PPS1>
extern volatile __bit                   RB4PPS1             __at(0x7799);	// @ (0xEF3 * 8 + 1)
#define                                 RB4PPS1_bit         _BIT_ACCESS(RB4PPS,1)
// RB4PPS<RB4PPS2>
extern volatile __bit                   RB4PPS2             __at(0x779A);	// @ (0xEF3 * 8 + 2)
#define                                 RB4PPS2_bit         _BIT_ACCESS(RB4PPS,2)
// RB4PPS<RB4PPS3>
extern volatile __bit                   RB4PPS3             __at(0x779B);	// @ (0xEF3 * 8 + 3)
#define                                 RB4PPS3_bit         _BIT_ACCESS(RB4PPS,3)
// RB4PPS<RB4PPS4>
extern volatile __bit                   RB4PPS4             __at(0x779C);	// @ (0xEF3 * 8 + 4)
#define                                 RB4PPS4_bit         _BIT_ACCESS(RB4PPS,4)
// PORTB<RB5>
extern volatile __bit                   RB5                 __at(0x7C75);	// @ (0xF8E * 8 + 5)
#define                                 RB5_bit             _BIT_ACCESS(PORTB,5)
// RB5PPS<RB5PPS0>
extern volatile __bit                   RB5PPS0             __at(0x77A0);	// @ (0xEF4 * 8 + 0)
#define                                 RB5PPS0_bit         _BIT_ACCESS(RB5PPS,0)
// RB5PPS<RB5PPS1>
extern volatile __bit                   RB5PPS1             __at(0x77A1);	// @ (0xEF4 * 8 + 1)
#define                                 RB5PPS1_bit         _BIT_ACCESS(RB5PPS,1)
// RB5PPS<RB5PPS2>
extern volatile __bit                   RB5PPS2             __at(0x77A2);	// @ (0xEF4 * 8 + 2)
#define                                 RB5PPS2_bit         _BIT_ACCESS(RB5PPS,2)
// RB5PPS<RB5PPS3>
extern volatile __bit                   RB5PPS3             __at(0x77A3);	// @ (0xEF4 * 8 + 3)
#define                                 RB5PPS3_bit         _BIT_ACCESS(RB5PPS,3)
// RB5PPS<RB5PPS4>
extern volatile __bit                   RB5PPS4             __at(0x77A4);	// @ (0xEF4 * 8 + 4)
#define                                 RB5PPS4_bit         _BIT_ACCESS(RB5PPS,4)
// PORTB<RB6>
extern volatile __bit                   RB6                 __at(0x7C76);	// @ (0xF8E * 8 + 6)
#define                                 RB6_bit             _BIT_ACCESS(PORTB,6)
// RB6PPS<RB6PPS0>
extern volatile __bit                   RB6PPS0             __at(0x77A8);	// @ (0xEF5 * 8 + 0)
#define                                 RB6PPS0_bit         _BIT_ACCESS(RB6PPS,0)
// RB6PPS<RB6PPS1>
extern volatile __bit                   RB6PPS1             __at(0x77A9);	// @ (0xEF5 * 8 + 1)
#define                                 RB6PPS1_bit         _BIT_ACCESS(RB6PPS,1)
// RB6PPS<RB6PPS2>
extern volatile __bit                   RB6PPS2             __at(0x77AA);	// @ (0xEF5 * 8 + 2)
#define                                 RB6PPS2_bit         _BIT_ACCESS(RB6PPS,2)
// RB6PPS<RB6PPS3>
extern volatile __bit                   RB6PPS3             __at(0x77AB);	// @ (0xEF5 * 8 + 3)
#define                                 RB6PPS3_bit         _BIT_ACCESS(RB6PPS,3)
// RB6PPS<RB6PPS4>
extern volatile __bit                   RB6PPS4             __at(0x77AC);	// @ (0xEF5 * 8 + 4)
#define                                 RB6PPS4_bit         _BIT_ACCESS(RB6PPS,4)
// PORTB<RB7>
extern volatile __bit                   RB7                 __at(0x7C77);	// @ (0xF8E * 8 + 7)
#define                                 RB7_bit             _BIT_ACCESS(PORTB,7)
// RB7PPS<RB7PPS0>
extern volatile __bit                   RB7PPS0             __at(0x77B0);	// @ (0xEF6 * 8 + 0)
#define                                 RB7PPS0_bit         _BIT_ACCESS(RB7PPS,0)
// RB7PPS<RB7PPS1>
extern volatile __bit                   RB7PPS1             __at(0x77B1);	// @ (0xEF6 * 8 + 1)
#define                                 RB7PPS1_bit         _BIT_ACCESS(RB7PPS,1)
// RB7PPS<RB7PPS2>
extern volatile __bit                   RB7PPS2             __at(0x77B2);	// @ (0xEF6 * 8 + 2)
#define                                 RB7PPS2_bit         _BIT_ACCESS(RB7PPS,2)
// RB7PPS<RB7PPS3>
extern volatile __bit                   RB7PPS3             __at(0x77B3);	// @ (0xEF6 * 8 + 3)
#define                                 RB7PPS3_bit         _BIT_ACCESS(RB7PPS,3)
// RB7PPS<RB7PPS4>
extern volatile __bit                   RB7PPS4             __at(0x77B4);	// @ (0xEF6 * 8 + 4)
#define                                 RB7PPS4_bit         _BIT_ACCESS(RB7PPS,4)
// PORTC<RC0>
extern volatile __bit                   RC0                 __at(0x7C78);	// @ (0xF8F * 8 + 0)
#define                                 RC0_bit             _BIT_ACCESS(PORTC,0)
// RC0PPS<RC0PPS0>
extern volatile __bit                   RC0PPS0             __at(0x77B8);	// @ (0xEF7 * 8 + 0)
#define                                 RC0PPS0_bit         _BIT_ACCESS(RC0PPS,0)
// RC0PPS<RC0PPS1>
extern volatile __bit                   RC0PPS1             __at(0x77B9);	// @ (0xEF7 * 8 + 1)
#define                                 RC0PPS1_bit         _BIT_ACCESS(RC0PPS,1)
// RC0PPS<RC0PPS2>
extern volatile __bit                   RC0PPS2             __at(0x77BA);	// @ (0xEF7 * 8 + 2)
#define                                 RC0PPS2_bit         _BIT_ACCESS(RC0PPS,2)
// RC0PPS<RC0PPS3>
extern volatile __bit                   RC0PPS3             __at(0x77BB);	// @ (0xEF7 * 8 + 3)
#define                                 RC0PPS3_bit         _BIT_ACCESS(RC0PPS,3)
// RC0PPS<RC0PPS4>
extern volatile __bit                   RC0PPS4             __at(0x77BC);	// @ (0xEF7 * 8 + 4)
#define                                 RC0PPS4_bit         _BIT_ACCESS(RC0PPS,4)
// PORTC<RC1>
extern volatile __bit                   RC1                 __at(0x7C79);	// @ (0xF8F * 8 + 1)
#define                                 RC1_bit             _BIT_ACCESS(PORTC,1)
// PIE3<RC1IE>
extern volatile __bit                   RC1IE               __at(0x762D);	// @ (0xEC5 * 8 + 5)
#define                                 RC1IE_bit           _BIT_ACCESS(PIE3,5)
// PIR3<RC1IF>
extern volatile __bit                   RC1IF               __at(0x766D);	// @ (0xECD * 8 + 5)
#define                                 RC1IF_bit           _BIT_ACCESS(PIR3,5)
// RC1PPS<RC1PPS0>
extern volatile __bit                   RC1PPS0             __at(0x77C0);	// @ (0xEF8 * 8 + 0)
#define                                 RC1PPS0_bit         _BIT_ACCESS(RC1PPS,0)
// RC1PPS<RC1PPS1>
extern volatile __bit                   RC1PPS1             __at(0x77C1);	// @ (0xEF8 * 8 + 1)
#define                                 RC1PPS1_bit         _BIT_ACCESS(RC1PPS,1)
// RC1PPS<RC1PPS2>
extern volatile __bit                   RC1PPS2             __at(0x77C2);	// @ (0xEF8 * 8 + 2)
#define                                 RC1PPS2_bit         _BIT_ACCESS(RC1PPS,2)
// RC1PPS<RC1PPS3>
extern volatile __bit                   RC1PPS3             __at(0x77C3);	// @ (0xEF8 * 8 + 3)
#define                                 RC1PPS3_bit         _BIT_ACCESS(RC1PPS,3)
// RC1PPS<RC1PPS4>
extern volatile __bit                   RC1PPS4             __at(0x77C4);	// @ (0xEF8 * 8 + 4)
#define                                 RC1PPS4_bit         _BIT_ACCESS(RC1PPS,4)
// PORTC<RC2>
extern volatile __bit                   RC2                 __at(0x7C7A);	// @ (0xF8F * 8 + 2)
#define                                 RC2_bit             _BIT_ACCESS(PORTC,2)
// RC2PPS<RC2PPS0>
extern volatile __bit                   RC2PPS0             __at(0x77C8);	// @ (0xEF9 * 8 + 0)
#define                                 RC2PPS0_bit         _BIT_ACCESS(RC2PPS,0)
// RC2PPS<RC2PPS1>
extern volatile __bit                   RC2PPS1             __at(0x77C9);	// @ (0xEF9 * 8 + 1)
#define                                 RC2PPS1_bit         _BIT_ACCESS(RC2PPS,1)
// RC2PPS<RC2PPS2>
extern volatile __bit                   RC2PPS2             __at(0x77CA);	// @ (0xEF9 * 8 + 2)
#define                                 RC2PPS2_bit         _BIT_ACCESS(RC2PPS,2)
// RC2PPS<RC2PPS3>
extern volatile __bit                   RC2PPS3             __at(0x77CB);	// @ (0xEF9 * 8 + 3)
#define                                 RC2PPS3_bit         _BIT_ACCESS(RC2PPS,3)
// RC2PPS<RC2PPS4>
extern volatile __bit                   RC2PPS4             __at(0x77CC);	// @ (0xEF9 * 8 + 4)
#define                                 RC2PPS4_bit         _BIT_ACCESS(RC2PPS,4)
// PORTC<RC3>
extern volatile __bit                   RC3                 __at(0x7C7B);	// @ (0xF8F * 8 + 3)
#define                                 RC3_bit             _BIT_ACCESS(PORTC,3)
// RC3PPS<RC3PPS0>
extern volatile __bit                   RC3PPS0             __at(0x77D0);	// @ (0xEFA * 8 + 0)
#define                                 RC3PPS0_bit         _BIT_ACCESS(RC3PPS,0)
// RC3PPS<RC3PPS1>
extern volatile __bit                   RC3PPS1             __at(0x77D1);	// @ (0xEFA * 8 + 1)
#define                                 RC3PPS1_bit         _BIT_ACCESS(RC3PPS,1)
// RC3PPS<RC3PPS2>
extern volatile __bit                   RC3PPS2             __at(0x77D2);	// @ (0xEFA * 8 + 2)
#define                                 RC3PPS2_bit         _BIT_ACCESS(RC3PPS,2)
// RC3PPS<RC3PPS3>
extern volatile __bit                   RC3PPS3             __at(0x77D3);	// @ (0xEFA * 8 + 3)
#define                                 RC3PPS3_bit         _BIT_ACCESS(RC3PPS,3)
// RC3PPS<RC3PPS4>
extern volatile __bit                   RC3PPS4             __at(0x77D4);	// @ (0xEFA * 8 + 4)
#define                                 RC3PPS4_bit         _BIT_ACCESS(RC3PPS,4)
// PORTC<RC4>
extern volatile __bit                   RC4                 __at(0x7C7C);	// @ (0xF8F * 8 + 4)
#define                                 RC4_bit             _BIT_ACCESS(PORTC,4)
// RC4PPS<RC4PPS0>
extern volatile __bit                   RC4PPS0             __at(0x77D8);	// @ (0xEFB * 8 + 0)
#define                                 RC4PPS0_bit         _BIT_ACCESS(RC4PPS,0)
// RC4PPS<RC4PPS1>
extern volatile __bit                   RC4PPS1             __at(0x77D9);	// @ (0xEFB * 8 + 1)
#define                                 RC4PPS1_bit         _BIT_ACCESS(RC4PPS,1)
// RC4PPS<RC4PPS2>
extern volatile __bit                   RC4PPS2             __at(0x77DA);	// @ (0xEFB * 8 + 2)
#define                                 RC4PPS2_bit         _BIT_ACCESS(RC4PPS,2)
// RC4PPS<RC4PPS3>
extern volatile __bit                   RC4PPS3             __at(0x77DB);	// @ (0xEFB * 8 + 3)
#define                                 RC4PPS3_bit         _BIT_ACCESS(RC4PPS,3)
// RC4PPS<RC4PPS4>
extern volatile __bit                   RC4PPS4             __at(0x77DC);	// @ (0xEFB * 8 + 4)
#define                                 RC4PPS4_bit         _BIT_ACCESS(RC4PPS,4)
// PORTC<RC5>
extern volatile __bit                   RC5                 __at(0x7C7D);	// @ (0xF8F * 8 + 5)
#define                                 RC5_bit             _BIT_ACCESS(PORTC,5)
// RC5PPS<RC5PPS0>
extern volatile __bit                   RC5PPS0             __at(0x77E0);	// @ (0xEFC * 8 + 0)
#define                                 RC5PPS0_bit         _BIT_ACCESS(RC5PPS,0)
// RC5PPS<RC5PPS1>
extern volatile __bit                   RC5PPS1             __at(0x77E1);	// @ (0xEFC * 8 + 1)
#define                                 RC5PPS1_bit         _BIT_ACCESS(RC5PPS,1)
// RC5PPS<RC5PPS2>
extern volatile __bit                   RC5PPS2             __at(0x77E2);	// @ (0xEFC * 8 + 2)
#define                                 RC5PPS2_bit         _BIT_ACCESS(RC5PPS,2)
// RC5PPS<RC5PPS3>
extern volatile __bit                   RC5PPS3             __at(0x77E3);	// @ (0xEFC * 8 + 3)
#define                                 RC5PPS3_bit         _BIT_ACCESS(RC5PPS,3)
// RC5PPS<RC5PPS4>
extern volatile __bit                   RC5PPS4             __at(0x77E4);	// @ (0xEFC * 8 + 4)
#define                                 RC5PPS4_bit         _BIT_ACCESS(RC5PPS,4)
// PORTC<RC6>
extern volatile __bit                   RC6                 __at(0x7C7E);	// @ (0xF8F * 8 + 6)
#define                                 RC6_bit             _BIT_ACCESS(PORTC,6)
// RC6PPS<RC6PPS0>
extern volatile __bit                   RC6PPS0             __at(0x77E8);	// @ (0xEFD * 8 + 0)
#define                                 RC6PPS0_bit         _BIT_ACCESS(RC6PPS,0)
// RC6PPS<RC6PPS1>
extern volatile __bit                   RC6PPS1             __at(0x77E9);	// @ (0xEFD * 8 + 1)
#define                                 RC6PPS1_bit         _BIT_ACCESS(RC6PPS,1)
// RC6PPS<RC6PPS2>
extern volatile __bit                   RC6PPS2             __at(0x77EA);	// @ (0xEFD * 8 + 2)
#define                                 RC6PPS2_bit         _BIT_ACCESS(RC6PPS,2)
// RC6PPS<RC6PPS3>
extern volatile __bit                   RC6PPS3             __at(0x77EB);	// @ (0xEFD * 8 + 3)
#define                                 RC6PPS3_bit         _BIT_ACCESS(RC6PPS,3)
// RC6PPS<RC6PPS4>
extern volatile __bit                   RC6PPS4             __at(0x77EC);	// @ (0xEFD * 8 + 4)
#define                                 RC6PPS4_bit         _BIT_ACCESS(RC6PPS,4)
// PORTC<RC7>
extern volatile __bit                   RC7                 __at(0x7C7F);	// @ (0xF8F * 8 + 7)
#define                                 RC7_bit             _BIT_ACCESS(PORTC,7)
// RC7PPS<RC7PPS0>
extern volatile __bit                   RC7PPS0             __at(0x77F0);	// @ (0xEFE * 8 + 0)
#define                                 RC7PPS0_bit         _BIT_ACCESS(RC7PPS,0)
// RC7PPS<RC7PPS1>
extern volatile __bit                   RC7PPS1             __at(0x77F1);	// @ (0xEFE * 8 + 1)
#define                                 RC7PPS1_bit         _BIT_ACCESS(RC7PPS,1)
// RC7PPS<RC7PPS2>
extern volatile __bit                   RC7PPS2             __at(0x77F2);	// @ (0xEFE * 8 + 2)
#define                                 RC7PPS2_bit         _BIT_ACCESS(RC7PPS,2)
// RC7PPS<RC7PPS3>
extern volatile __bit                   RC7PPS3             __at(0x77F3);	// @ (0xEFE * 8 + 3)
#define                                 RC7PPS3_bit         _BIT_ACCESS(RC7PPS,3)
// RC7PPS<RC7PPS4>
extern volatile __bit                   RC7PPS4             __at(0x77F4);	// @ (0xEFE * 8 + 4)
#define                                 RC7PPS4_bit         _BIT_ACCESS(RC7PPS,4)
// RC1STA<RC8_9>
extern volatile __bit                   RC8_9               __at(0x7CEE);	// @ (0xF9D * 8 + 6)
#define                                 RC8_9_bit           _BIT_ACCESS(RC1STA,6)
// RC1STA<RC9>
extern volatile __bit                   RC9                 __at(0x7CEE);	// @ (0xF9D * 8 + 6)
#define                                 RC9_bit             _BIT_ACCESS(RC1STA,6)
// RC1STA<RCD8>
extern volatile __bit                   RCD8                __at(0x7CE8);	// @ (0xF9D * 8 + 0)
#define                                 RCD8_bit            _BIT_ACCESS(RC1STA,0)
// SSP1CON2<RCEN>
extern volatile __bit                   RCEN                __at(0x7CBB);	// @ (0xF97 * 8 + 3)
#define                                 RCEN_bit            _BIT_ACCESS(SSP1CON2,3)
// SSP1CON2<RCEN1>
extern volatile __bit                   RCEN1               __at(0x7CBB);	// @ (0xF97 * 8 + 3)
#define                                 RCEN1_bit           _BIT_ACCESS(SSP1CON2,3)
// BAUD1CON<RCIDL>
extern volatile __bit                   RCIDL               __at(0x7CFE);	// @ (0xF9F * 8 + 6)
#define                                 RCIDL_bit           _BIT_ACCESS(BAUD1CON,6)
// BAUD1CON<RCIDL1>
extern volatile __bit                   RCIDL1              __at(0x7CFE);	// @ (0xF9F * 8 + 6)
#define                                 RCIDL1_bit          _BIT_ACCESS(BAUD1CON,6)
// PIE3<RCIE>
extern volatile __bit                   RCIE                __at(0x762D);	// @ (0xEC5 * 8 + 5)
#define                                 RCIE_bit            _BIT_ACCESS(PIE3,5)
// PIR3<RCIF>
extern volatile __bit                   RCIF                __at(0x766D);	// @ (0xECD * 8 + 5)
#define                                 RCIF_bit            _BIT_ACCESS(PIR3,5)
// IPR3<RCIP>
extern volatile __bit                   RCIP                __at(0x75ED);	// @ (0xEBD * 8 + 5)
#define                                 RCIP_bit            _BIT_ACCESS(IPR3,5)
// BAUD1CON<RCMT>
extern volatile __bit                   RCMT                __at(0x7CFE);	// @ (0xF9F * 8 + 6)
#define                                 RCMT_bit            _BIT_ACCESS(BAUD1CON,6)
// BAUD1CON<RCMT1>
extern volatile __bit                   RCMT1               __at(0x7CFE);	// @ (0xF9F * 8 + 6)
#define                                 RCMT1_bit           _BIT_ACCESS(BAUD1CON,6)
// NVMCON1<RD>
extern volatile __bit                   RD                  __at(0x7C08);	// @ (0xF81 * 8 + 0)
#define                                 RD_bit              _BIT_ACCESS(NVMCON1,0)
// T1CON<RD161>
extern volatile __bit                   RD161               __at(0x7E79);	// @ (0xFCF * 8 + 1)
#define                                 RD161_bit           _BIT_ACCESS(T1CON,1)
// T3CON<RD163>
extern volatile __bit                   RD163               __at(0x7E49);	// @ (0xFC9 * 8 + 1)
#define                                 RD163_bit           _BIT_ACCESS(T3CON,1)
// T5CON<RD165>
extern volatile __bit                   RD165               __at(0x7E19);	// @ (0xFC3 * 8 + 1)
#define                                 RD165_bit           _BIT_ACCESS(T5CON,1)
// PORTE<RE3>
extern volatile __bit                   RE3                 __at(0x7C8B);	// @ (0xF91 * 8 + 3)
#define                                 RE3_bit             _BIT_ACCESS(PORTE,3)
// SSP1STAT<READ_WRITE>
extern volatile __bit                   READ_WRITE          __at(0x7CAA);	// @ (0xF95 * 8 + 2)
#define                                 READ_WRITE_bit      _BIT_ACCESS(SSP1STAT,2)
// SSP1STAT<READ_WRITE1>
extern volatile __bit                   READ_WRITE1         __at(0x7CAA);	// @ (0xF95 * 8 + 2)
#define                                 READ_WRITE1_bit     _BIT_ACCESS(SSP1STAT,2)
// CWG1AS0<REN>
extern volatile __bit                   REN                 __at(0x7A36);	// @ (0xF46 * 8 + 6)
#define                                 REN_bit             _BIT_ACCESS(CWG1AS0,6)
// PCON0<RI>
extern volatile __bit                   RI                  __at(0x7EBA);	// @ (0xFD7 * 8 + 2)
#define                                 RI_bit              _BIT_ACCESS(PCON0,2)
// PORTA<RJPU>
extern volatile __bit                   RJPU                __at(0x7C6F);	// @ (0xF8D * 8 + 7)
#define                                 RJPU_bit            _BIT_ACCESS(PORTA,7)
// PCON0<RMCLR>
extern volatile __bit                   RMCLR               __at(0x7EBB);	// @ (0xFD7 * 8 + 3)
#define                                 RMCLR_bit           _BIT_ACCESS(PCON0,3)
// CPUDOZE<ROI>
extern volatile __bit                   ROI                 __at(0x76BD);	// @ (0xED7 * 8 + 5)
#define                                 ROI_bit             _BIT_ACCESS(CPUDOZE,5)
// SSP1CON2<RSEN>
extern volatile __bit                   RSEN                __at(0x7CB9);	// @ (0xF97 * 8 + 1)
#define                                 RSEN_bit            _BIT_ACCESS(SSP1CON2,1)
// SSP1CON2<RSEN1>
extern volatile __bit                   RSEN1               __at(0x7CB9);	// @ (0xF97 * 8 + 1)
#define                                 RSEN1_bit           _BIT_ACCESS(SSP1CON2,1)
// SSP1STAT<RW>
extern volatile __bit                   RW                  __at(0x7CAA);	// @ (0xF95 * 8 + 2)
#define                                 RW_bit              _BIT_ACCESS(SSP1STAT,2)
// SSP1STAT<RW1>
extern volatile __bit                   RW1                 __at(0x7CAA);	// @ (0xF95 * 8 + 2)
#define                                 RW1_bit             _BIT_ACCESS(SSP1STAT,2)
// PCON0<RWDT>
extern volatile __bit                   RWDT                __at(0x7EBC);	// @ (0xFD7 * 8 + 4)
#define                                 RWDT_bit            _BIT_ACCESS(PCON0,4)
// RX1PPS<RX1PPS0>
extern volatile __bit                   RX1PPS0             __at(0x75A8);	// @ (0xEB5 * 8 + 0)
#define                                 RX1PPS0_bit         _BIT_ACCESS(RX1PPS,0)
// RX1PPS<RX1PPS1>
extern volatile __bit                   RX1PPS1             __at(0x75A9);	// @ (0xEB5 * 8 + 1)
#define                                 RX1PPS1_bit         _BIT_ACCESS(RX1PPS,1)
// RX1PPS<RX1PPS2>
extern volatile __bit                   RX1PPS2             __at(0x75AA);	// @ (0xEB5 * 8 + 2)
#define                                 RX1PPS2_bit         _BIT_ACCESS(RX1PPS,2)
// RX1PPS<RX1PPS3>
extern volatile __bit                   RX1PPS3             __at(0x75AB);	// @ (0xEB5 * 8 + 3)
#define                                 RX1PPS3_bit         _BIT_ACCESS(RX1PPS,3)
// RX1PPS<RX1PPS4>
extern volatile __bit                   RX1PPS4             __at(0x75AC);	// @ (0xEB5 * 8 + 4)
#define                                 RX1PPS4_bit         _BIT_ACCESS(RX1PPS,4)
// RC1STA<RX9>
extern volatile __bit                   RX9                 __at(0x7CEE);	// @ (0xF9D * 8 + 6)
#define                                 RX9_bit             _BIT_ACCESS(RC1STA,6)
// RC1STA<RX9D>
extern volatile __bit                   RX9D                __at(0x7CE8);	// @ (0xF9D * 8 + 0)
#define                                 RX9D_bit            _BIT_ACCESS(RC1STA,0)
// PIE3<RXB0IE>
extern volatile __bit                   RXB0IE              __at(0x7628);	// @ (0xEC5 * 8 + 0)
#define                                 RXB0IE_bit          _BIT_ACCESS(PIE3,0)
// PIE3<RXB1IE>
extern volatile __bit                   RXB1IE              __at(0x7629);	// @ (0xEC5 * 8 + 1)
#define                                 RXB1IE_bit          _BIT_ACCESS(PIE3,1)
// PIE3<RXBNIE>
extern volatile __bit                   RXBNIE              __at(0x7629);	// @ (0xEC5 * 8 + 1)
#define                                 RXBNIE_bit          _BIT_ACCESS(PIE3,1)
// PIR3<RXBNIF>
extern volatile __bit                   RXBNIF              __at(0x7669);	// @ (0xECD * 8 + 1)
#define                                 RXBNIF_bit          _BIT_ACCESS(PIR3,1)
// IPR3<RXBNIP>
extern volatile __bit                   RXBNIP              __at(0x75E9);	// @ (0xEBD * 8 + 1)
#define                                 RXBNIP_bit          _BIT_ACCESS(IPR3,1)
// RX1PPS<RXPPS0>
extern volatile __bit                   RXPPS0              __at(0x75A8);	// @ (0xEB5 * 8 + 0)
#define                                 RXPPS0_bit          _BIT_ACCESS(RX1PPS,0)
// RX1PPS<RXPPS1>
extern volatile __bit                   RXPPS1              __at(0x75A9);	// @ (0xEB5 * 8 + 1)
#define                                 RXPPS1_bit          _BIT_ACCESS(RX1PPS,1)
// RX1PPS<RXPPS2>
extern volatile __bit                   RXPPS2              __at(0x75AA);	// @ (0xEB5 * 8 + 2)
#define                                 RXPPS2_bit          _BIT_ACCESS(RX1PPS,2)
// RX1PPS<RXPPS3>
extern volatile __bit                   RXPPS3              __at(0x75AB);	// @ (0xEB5 * 8 + 3)
#define                                 RXPPS3_bit          _BIT_ACCESS(RX1PPS,3)
// RX1PPS<RXPPS4>
extern volatile __bit                   RXPPS4              __at(0x75AC);	// @ (0xEB5 * 8 + 4)
#define                                 RXPPS4_bit          _BIT_ACCESS(RX1PPS,4)
// SSP1STAT<R_NOT_W>
extern volatile __bit                   R_NOT_W             __at(0x7CAA);	// @ (0xF95 * 8 + 2)
#define                                 R_NOT_W_bit         _BIT_ACCESS(SSP1STAT,2)
// SSP1STAT<R_NOT_W1>
extern volatile __bit                   R_NOT_W1            __at(0x7CAA);	// @ (0xF95 * 8 + 2)
#define                                 R_NOT_W1_bit        _BIT_ACCESS(SSP1STAT,2)
// SSP1STAT<R_W>
extern volatile __bit                   R_W                 __at(0x7CAA);	// @ (0xF95 * 8 + 2)
#define                                 R_W_bit             _BIT_ACCESS(SSP1STAT,2)
// SSP1STAT<R_W1>
extern volatile __bit                   R_W1                __at(0x7CAA);	// @ (0xF95 * 8 + 2)
#define                                 R_W1_bit            _BIT_ACCESS(SSP1STAT,2)
// SSP1STAT<R_nW>
extern volatile __bit                   R_nW                __at(0x7CAA);	// @ (0xF95 * 8 + 2)
#define                                 R_nW_bit            _BIT_ACCESS(SSP1STAT,2)
// SSP1STAT<R_nW1>
extern volatile __bit                   R_nW1               __at(0x7CAA);	// @ (0xF95 * 8 + 2)
#define                                 R_nW1_bit           _BIT_ACCESS(SSP1STAT,2)
// SSP1STAT<S2>
extern volatile __bit                   S2                  __at(0x7CAB);	// @ (0xF95 * 8 + 3)
#define                                 S2_bit              _BIT_ACCESS(SSP1STAT,3)
// SSP1CON3<SBCDE>
extern volatile __bit                   SBCDE               __at(0x7CC2);	// @ (0xF98 * 8 + 2)
#define                                 SBCDE_bit           _BIT_ACCESS(SSP1CON3,2)
// BORCON<SBOREN>
extern volatile __bit                   SBOREN              __at(0x7707);	// @ (0xEE0 * 8 + 7)
#define                                 SBOREN_bit          _BIT_ACCESS(BORCON,7)
// SCANCON0<SCANBUSY>
extern volatile __bit                   SCANBUSY            __at(0x7A7D);	// @ (0xF4F * 8 + 5)
#define                                 SCANBUSY_bit        _BIT_ACCESS(SCANCON0,5)
// SCANCON0<SCANEN>
extern volatile __bit                   SCANEN              __at(0x7A7F);	// @ (0xF4F * 8 + 7)
#define                                 SCANEN_bit          _BIT_ACCESS(SCANCON0,7)
// SCANCON0<SCANGO>
extern volatile __bit                   SCANGO              __at(0x7A7E);	// @ (0xF4F * 8 + 6)
#define                                 SCANGO_bit          _BIT_ACCESS(SCANCON0,6)
// SCANHADRL<SCANHADR0>
extern volatile __bit                   SCANHADR0           __at(0x7A60);	// @ (0xF4C * 8 + 0)
#define                                 SCANHADR0_bit       _BIT_ACCESS(SCANHADRL,0)
// SCANHADRL<SCANHADR1>
extern volatile __bit                   SCANHADR1           __at(0x7A61);	// @ (0xF4C * 8 + 1)
#define                                 SCANHADR1_bit       _BIT_ACCESS(SCANHADRL,1)
// SCANHADRH<SCANHADR10>
extern volatile __bit                   SCANHADR10          __at(0x7A6A);	// @ (0xF4D * 8 + 2)
#define                                 SCANHADR10_bit      _BIT_ACCESS(SCANHADRH,2)
// SCANHADRH<SCANHADR11>
extern volatile __bit                   SCANHADR11          __at(0x7A6B);	// @ (0xF4D * 8 + 3)
#define                                 SCANHADR11_bit      _BIT_ACCESS(SCANHADRH,3)
// SCANHADRH<SCANHADR12>
extern volatile __bit                   SCANHADR12          __at(0x7A6C);	// @ (0xF4D * 8 + 4)
#define                                 SCANHADR12_bit      _BIT_ACCESS(SCANHADRH,4)
// SCANHADRH<SCANHADR13>
extern volatile __bit                   SCANHADR13          __at(0x7A6D);	// @ (0xF4D * 8 + 5)
#define                                 SCANHADR13_bit      _BIT_ACCESS(SCANHADRH,5)
// SCANHADRH<SCANHADR14>
extern volatile __bit                   SCANHADR14          __at(0x7A6E);	// @ (0xF4D * 8 + 6)
#define                                 SCANHADR14_bit      _BIT_ACCESS(SCANHADRH,6)
// SCANHADRH<SCANHADR15>
extern volatile __bit                   SCANHADR15          __at(0x7A6F);	// @ (0xF4D * 8 + 7)
#define                                 SCANHADR15_bit      _BIT_ACCESS(SCANHADRH,7)
// SCANHADRU<SCANHADR16>
extern volatile __bit                   SCANHADR16          __at(0x7A70);	// @ (0xF4E * 8 + 0)
#define                                 SCANHADR16_bit      _BIT_ACCESS(SCANHADRU,0)
// SCANHADRU<SCANHADR17>
extern volatile __bit                   SCANHADR17          __at(0x7A71);	// @ (0xF4E * 8 + 1)
#define                                 SCANHADR17_bit      _BIT_ACCESS(SCANHADRU,1)
// SCANHADRU<SCANHADR18>
extern volatile __bit                   SCANHADR18          __at(0x7A72);	// @ (0xF4E * 8 + 2)
#define                                 SCANHADR18_bit      _BIT_ACCESS(SCANHADRU,2)
// SCANHADRU<SCANHADR19>
extern volatile __bit                   SCANHADR19          __at(0x7A73);	// @ (0xF4E * 8 + 3)
#define                                 SCANHADR19_bit      _BIT_ACCESS(SCANHADRU,3)
// SCANHADRL<SCANHADR2>
extern volatile __bit                   SCANHADR2           __at(0x7A62);	// @ (0xF4C * 8 + 2)
#define                                 SCANHADR2_bit       _BIT_ACCESS(SCANHADRL,2)
// SCANHADRU<SCANHADR20>
extern volatile __bit                   SCANHADR20          __at(0x7A74);	// @ (0xF4E * 8 + 4)
#define                                 SCANHADR20_bit      _BIT_ACCESS(SCANHADRU,4)
// SCANHADRU<SCANHADR21>
extern volatile __bit                   SCANHADR21          __at(0x7A75);	// @ (0xF4E * 8 + 5)
#define                                 SCANHADR21_bit      _BIT_ACCESS(SCANHADRU,5)
// SCANHADRL<SCANHADR3>
extern volatile __bit                   SCANHADR3           __at(0x7A63);	// @ (0xF4C * 8 + 3)
#define                                 SCANHADR3_bit       _BIT_ACCESS(SCANHADRL,3)
// SCANHADRL<SCANHADR4>
extern volatile __bit                   SCANHADR4           __at(0x7A64);	// @ (0xF4C * 8 + 4)
#define                                 SCANHADR4_bit       _BIT_ACCESS(SCANHADRL,4)
// SCANHADRL<SCANHADR5>
extern volatile __bit                   SCANHADR5           __at(0x7A65);	// @ (0xF4C * 8 + 5)
#define                                 SCANHADR5_bit       _BIT_ACCESS(SCANHADRL,5)
// SCANHADRL<SCANHADR6>
extern volatile __bit                   SCANHADR6           __at(0x7A66);	// @ (0xF4C * 8 + 6)
#define                                 SCANHADR6_bit       _BIT_ACCESS(SCANHADRL,6)
// SCANHADRL<SCANHADR7>
extern volatile __bit                   SCANHADR7           __at(0x7A67);	// @ (0xF4C * 8 + 7)
#define                                 SCANHADR7_bit       _BIT_ACCESS(SCANHADRL,7)
// SCANHADRH<SCANHADR8>
extern volatile __bit                   SCANHADR8           __at(0x7A68);	// @ (0xF4D * 8 + 0)
#define                                 SCANHADR8_bit       _BIT_ACCESS(SCANHADRH,0)
// SCANHADRH<SCANHADR9>
extern volatile __bit                   SCANHADR9           __at(0x7A69);	// @ (0xF4D * 8 + 1)
#define                                 SCANHADR9_bit       _BIT_ACCESS(SCANHADRH,1)
// PIE7<SCANIE>
extern volatile __bit                   SCANIE              __at(0x764F);	// @ (0xEC9 * 8 + 7)
#define                                 SCANIE_bit          _BIT_ACCESS(PIE7,7)
// PIR7<SCANIF>
extern volatile __bit                   SCANIF              __at(0x768F);	// @ (0xED1 * 8 + 7)
#define                                 SCANIF_bit          _BIT_ACCESS(PIR7,7)
// SCANCON0<SCANINTM>
extern volatile __bit                   SCANINTM            __at(0x7A7B);	// @ (0xF4F * 8 + 3)
#define                                 SCANINTM_bit        _BIT_ACCESS(SCANCON0,3)
// SCANCON0<SCANINVALID>
extern volatile __bit                   SCANINVALID         __at(0x7A7C);	// @ (0xF4F * 8 + 4)
#define                                 SCANINVALID_bit     _BIT_ACCESS(SCANCON0,4)
// IPR7<SCANIP>
extern volatile __bit                   SCANIP              __at(0x760F);	// @ (0xEC1 * 8 + 7)
#define                                 SCANIP_bit          _BIT_ACCESS(IPR7,7)
// SCANLADRL<SCANLADR0>
extern volatile __bit                   SCANLADR0           __at(0x7A48);	// @ (0xF49 * 8 + 0)
#define                                 SCANLADR0_bit       _BIT_ACCESS(SCANLADRL,0)
// SCANLADRL<SCANLADR1>
extern volatile __bit                   SCANLADR1           __at(0x7A49);	// @ (0xF49 * 8 + 1)
#define                                 SCANLADR1_bit       _BIT_ACCESS(SCANLADRL,1)
// SCANLADRH<SCANLADR10>
extern volatile __bit                   SCANLADR10          __at(0x7A52);	// @ (0xF4A * 8 + 2)
#define                                 SCANLADR10_bit      _BIT_ACCESS(SCANLADRH,2)
// SCANLADRH<SCANLADR11>
extern volatile __bit                   SCANLADR11          __at(0x7A53);	// @ (0xF4A * 8 + 3)
#define                                 SCANLADR11_bit      _BIT_ACCESS(SCANLADRH,3)
// SCANLADRH<SCANLADR12>
extern volatile __bit                   SCANLADR12          __at(0x7A54);	// @ (0xF4A * 8 + 4)
#define                                 SCANLADR12_bit      _BIT_ACCESS(SCANLADRH,4)
// SCANLADRH<SCANLADR13>
extern volatile __bit                   SCANLADR13          __at(0x7A55);	// @ (0xF4A * 8 + 5)
#define                                 SCANLADR13_bit      _BIT_ACCESS(SCANLADRH,5)
// SCANLADRH<SCANLADR14>
extern volatile __bit                   SCANLADR14          __at(0x7A56);	// @ (0xF4A * 8 + 6)
#define                                 SCANLADR14_bit      _BIT_ACCESS(SCANLADRH,6)
// SCANLADRH<SCANLADR15>
extern volatile __bit                   SCANLADR15          __at(0x7A57);	// @ (0xF4A * 8 + 7)
#define                                 SCANLADR15_bit      _BIT_ACCESS(SCANLADRH,7)
// SCANLADRU<SCANLADR16>
extern volatile __bit                   SCANLADR16          __at(0x7A58);	// @ (0xF4B * 8 + 0)
#define                                 SCANLADR16_bit      _BIT_ACCESS(SCANLADRU,0)
// SCANLADRU<SCANLADR17>
extern volatile __bit                   SCANLADR17          __at(0x7A59);	// @ (0xF4B * 8 + 1)
#define                                 SCANLADR17_bit      _BIT_ACCESS(SCANLADRU,1)
// SCANLADRU<SCANLADR18>
extern volatile __bit                   SCANLADR18          __at(0x7A5A);	// @ (0xF4B * 8 + 2)
#define                                 SCANLADR18_bit      _BIT_ACCESS(SCANLADRU,2)
// SCANLADRU<SCANLADR19>
extern volatile __bit                   SCANLADR19          __at(0x7A5B);	// @ (0xF4B * 8 + 3)
#define                                 SCANLADR19_bit      _BIT_ACCESS(SCANLADRU,3)
// SCANLADRL<SCANLADR2>
extern volatile __bit                   SCANLADR2           __at(0x7A4A);	// @ (0xF49 * 8 + 2)
#define                                 SCANLADR2_bit       _BIT_ACCESS(SCANLADRL,2)
// SCANLADRU<SCANLADR20>
extern volatile __bit                   SCANLADR20          __at(0x7A5C);	// @ (0xF4B * 8 + 4)
#define                                 SCANLADR20_bit      _BIT_ACCESS(SCANLADRU,4)
// SCANLADRU<SCANLADR21>
extern volatile __bit                   SCANLADR21          __at(0x7A5D);	// @ (0xF4B * 8 + 5)
#define                                 SCANLADR21_bit      _BIT_ACCESS(SCANLADRU,5)
// SCANLADRL<SCANLADR3>
extern volatile __bit                   SCANLADR3           __at(0x7A4B);	// @ (0xF49 * 8 + 3)
#define                                 SCANLADR3_bit       _BIT_ACCESS(SCANLADRL,3)
// SCANLADRL<SCANLADR4>
extern volatile __bit                   SCANLADR4           __at(0x7A4C);	// @ (0xF49 * 8 + 4)
#define                                 SCANLADR4_bit       _BIT_ACCESS(SCANLADRL,4)
// SCANLADRL<SCANLADR5>
extern volatile __bit                   SCANLADR5           __at(0x7A4D);	// @ (0xF49 * 8 + 5)
#define                                 SCANLADR5_bit       _BIT_ACCESS(SCANLADRL,5)
// SCANLADRL<SCANLADR6>
extern volatile __bit                   SCANLADR6           __at(0x7A4E);	// @ (0xF49 * 8 + 6)
#define                                 SCANLADR6_bit       _BIT_ACCESS(SCANLADRL,6)
// SCANLADRL<SCANLADR7>
extern volatile __bit                   SCANLADR7           __at(0x7A4F);	// @ (0xF49 * 8 + 7)
#define                                 SCANLADR7_bit       _BIT_ACCESS(SCANLADRL,7)
// SCANLADRH<SCANLADR8>
extern volatile __bit                   SCANLADR8           __at(0x7A50);	// @ (0xF4A * 8 + 0)
#define                                 SCANLADR8_bit       _BIT_ACCESS(SCANLADRH,0)
// SCANLADRH<SCANLADR9>
extern volatile __bit                   SCANLADR9           __at(0x7A51);	// @ (0xF4A * 8 + 1)
#define                                 SCANLADR9_bit       _BIT_ACCESS(SCANLADRH,1)
// PMD0<SCANMD>
extern volatile __bit                   SCANMD              __at(0x770B);	// @ (0xEE1 * 8 + 3)
#define                                 SCANMD_bit          _BIT_ACCESS(PMD0,3)
// SCANCON0<SCANMODE0>
extern volatile __bit                   SCANMODE0           __at(0x7A78);	// @ (0xF4F * 8 + 0)
#define                                 SCANMODE0_bit       _BIT_ACCESS(SCANCON0,0)
// SCANCON0<SCANMODE1>
extern volatile __bit                   SCANMODE1           __at(0x7A79);	// @ (0xF4F * 8 + 1)
#define                                 SCANMODE1_bit       _BIT_ACCESS(SCANCON0,1)
// SCANTRIG<SCANTSEL0>
extern volatile __bit                   SCANTSEL0           __at(0x7A80);	// @ (0xF50 * 8 + 0)
#define                                 SCANTSEL0_bit       _BIT_ACCESS(SCANTRIG,0)
// SCANTRIG<SCANTSEL1>
extern volatile __bit                   SCANTSEL1           __at(0x7A81);	// @ (0xF50 * 8 + 1)
#define                                 SCANTSEL1_bit       _BIT_ACCESS(SCANTRIG,1)
// SCANTRIG<SCANTSEL2>
extern volatile __bit                   SCANTSEL2           __at(0x7A82);	// @ (0xF50 * 8 + 2)
#define                                 SCANTSEL2_bit       _BIT_ACCESS(SCANTRIG,2)
// SCANTRIG<SCANTSEL3>
extern volatile __bit                   SCANTSEL3           __at(0x7A83);	// @ (0xF50 * 8 + 3)
#define                                 SCANTSEL3_bit       _BIT_ACCESS(SCANTRIG,3)
// SSP1CON3<SCIE>
extern volatile __bit                   SCIE                __at(0x7CC5);	// @ (0xF98 * 8 + 5)
#define                                 SCIE_bit            _BIT_ACCESS(SSP1CON3,5)
// BAUD1CON<SCKP>
extern volatile __bit                   SCKP                __at(0x7CFC);	// @ (0xF9F * 8 + 4)
#define                                 SCKP_bit            _BIT_ACCESS(BAUD1CON,4)
// BAUD1CON<SCKP1>
extern volatile __bit                   SCKP1               __at(0x7CFC);	// @ (0xF9F * 8 + 4)
#define                                 SCKP1_bit           _BIT_ACCESS(BAUD1CON,4)
// SSP1CON3<SDAHT>
extern volatile __bit                   SDAHT               __at(0x7CC3);	// @ (0xF98 * 8 + 3)
#define                                 SDAHT_bit           _BIT_ACCESS(SSP1CON3,3)
// HLVDCON1<SEL0>
extern volatile __bit                   SEL0                __at(0x7980);	// @ (0xF30 * 8 + 0)
#define                                 SEL0_bit            _BIT_ACCESS(HLVDCON1,0)
// HLVDCON1<SEL1>
extern volatile __bit                   SEL1                __at(0x7981);	// @ (0xF30 * 8 + 1)
#define                                 SEL1_bit            _BIT_ACCESS(HLVDCON1,1)
// HLVDCON1<SEL2>
extern volatile __bit                   SEL2                __at(0x7982);	// @ (0xF30 * 8 + 2)
#define                                 SEL2_bit            _BIT_ACCESS(HLVDCON1,2)
// HLVDCON1<SEL3>
extern volatile __bit                   SEL3                __at(0x7983);	// @ (0xF30 * 8 + 3)
#define                                 SEL3_bit            _BIT_ACCESS(HLVDCON1,3)
// SSP1CON2<SEN1>
extern volatile __bit                   SEN1                __at(0x7CB8);	// @ (0xF97 * 8 + 0)
#define                                 SEN1_bit            _BIT_ACCESS(SSP1CON2,0)
// TX1STA<SENDB>
extern volatile __bit                   SENDB               __at(0x7CF3);	// @ (0xF9E * 8 + 3)
#define                                 SENDB_bit           _BIT_ACCESS(TX1STA,3)
// TX1STA<SENDB1>
extern volatile __bit                   SENDB1              __at(0x7CF3);	// @ (0xF9E * 8 + 3)
#define                                 SENDB1_bit          _BIT_ACCESS(TX1STA,3)
// CRCSHIFTL<SHFT0>
extern volatile __bit                   SHFT0               __at(0x7BC0);	// @ (0xF78 * 8 + 0)
#define                                 SHFT0_bit           _BIT_ACCESS(CRCSHIFTL,0)
// CRCSHIFTL<SHFT1>
extern volatile __bit                   SHFT1               __at(0x7BC1);	// @ (0xF78 * 8 + 1)
#define                                 SHFT1_bit           _BIT_ACCESS(CRCSHIFTL,1)
// CRCSHIFTH<SHFT10>
extern volatile __bit                   SHFT10              __at(0x7BCA);	// @ (0xF79 * 8 + 2)
#define                                 SHFT10_bit          _BIT_ACCESS(CRCSHIFTH,2)
// CRCSHIFTH<SHFT11>
extern volatile __bit                   SHFT11              __at(0x7BCB);	// @ (0xF79 * 8 + 3)
#define                                 SHFT11_bit          _BIT_ACCESS(CRCSHIFTH,3)
// CRCSHIFTH<SHFT12>
extern volatile __bit                   SHFT12              __at(0x7BCC);	// @ (0xF79 * 8 + 4)
#define                                 SHFT12_bit          _BIT_ACCESS(CRCSHIFTH,4)
// CRCSHIFTH<SHFT13>
extern volatile __bit                   SHFT13              __at(0x7BCD);	// @ (0xF79 * 8 + 5)
#define                                 SHFT13_bit          _BIT_ACCESS(CRCSHIFTH,5)
// CRCSHIFTH<SHFT14>
extern volatile __bit                   SHFT14              __at(0x7BCE);	// @ (0xF79 * 8 + 6)
#define                                 SHFT14_bit          _BIT_ACCESS(CRCSHIFTH,6)
// CRCSHIFTH<SHFT15>
extern volatile __bit                   SHFT15              __at(0x7BCF);	// @ (0xF79 * 8 + 7)
#define                                 SHFT15_bit          _BIT_ACCESS(CRCSHIFTH,7)
// CRCSHIFTL<SHFT2>
extern volatile __bit                   SHFT2               __at(0x7BC2);	// @ (0xF78 * 8 + 2)
#define                                 SHFT2_bit           _BIT_ACCESS(CRCSHIFTL,2)
// CRCSHIFTL<SHFT3>
extern volatile __bit                   SHFT3               __at(0x7BC3);	// @ (0xF78 * 8 + 3)
#define                                 SHFT3_bit           _BIT_ACCESS(CRCSHIFTL,3)
// CRCSHIFTL<SHFT4>
extern volatile __bit                   SHFT4               __at(0x7BC4);	// @ (0xF78 * 8 + 4)
#define                                 SHFT4_bit           _BIT_ACCESS(CRCSHIFTL,4)
// CRCSHIFTL<SHFT5>
extern volatile __bit                   SHFT5               __at(0x7BC5);	// @ (0xF78 * 8 + 5)
#define                                 SHFT5_bit           _BIT_ACCESS(CRCSHIFTL,5)
// CRCSHIFTL<SHFT6>
extern volatile __bit                   SHFT6               __at(0x7BC6);	// @ (0xF78 * 8 + 6)
#define                                 SHFT6_bit           _BIT_ACCESS(CRCSHIFTL,6)
// CRCSHIFTL<SHFT7>
extern volatile __bit                   SHFT7               __at(0x7BC7);	// @ (0xF78 * 8 + 7)
#define                                 SHFT7_bit           _BIT_ACCESS(CRCSHIFTL,7)
// CRCSHIFTH<SHFT8>
extern volatile __bit                   SHFT8               __at(0x7BC8);	// @ (0xF79 * 8 + 0)
#define                                 SHFT8_bit           _BIT_ACCESS(CRCSHIFTH,0)
// CRCSHIFTH<SHFT9>
extern volatile __bit                   SHFT9               __at(0x7BC9);	// @ (0xF79 * 8 + 1)
#define                                 SHFT9_bit           _BIT_ACCESS(CRCSHIFTH,1)
// CRCCON0<SHIFTM>
extern volatile __bit                   SHIFTM              __at(0x7BE1);	// @ (0xF7C * 8 + 1)
#define                                 SHIFTM_bit          _BIT_ACCESS(CRCCON0,1)
// CWG1AS0<SHUTDOWN>
extern volatile __bit                   SHUTDOWN            __at(0x7A37);	// @ (0xF46 * 8 + 7)
#define                                 SHUTDOWN_bit        _BIT_ACCESS(CWG1AS0,7)
// SLRCONA<SLRA0>
extern volatile __bit                   SLRA0               __at(0x7870);	// @ (0xF0E * 8 + 0)
#define                                 SLRA0_bit           _BIT_ACCESS(SLRCONA,0)
// SLRCONA<SLRA1>
extern volatile __bit                   SLRA1               __at(0x7871);	// @ (0xF0E * 8 + 1)
#define                                 SLRA1_bit           _BIT_ACCESS(SLRCONA,1)
// SLRCONA<SLRA2>
extern volatile __bit                   SLRA2               __at(0x7872);	// @ (0xF0E * 8 + 2)
#define                                 SLRA2_bit           _BIT_ACCESS(SLRCONA,2)
// SLRCONA<SLRA3>
extern volatile __bit                   SLRA3               __at(0x7873);	// @ (0xF0E * 8 + 3)
#define                                 SLRA3_bit           _BIT_ACCESS(SLRCONA,3)
// SLRCONA<SLRA4>
extern volatile __bit                   SLRA4               __at(0x7874);	// @ (0xF0E * 8 + 4)
#define                                 SLRA4_bit           _BIT_ACCESS(SLRCONA,4)
// SLRCONA<SLRA5>
extern volatile __bit                   SLRA5               __at(0x7875);	// @ (0xF0E * 8 + 5)
#define                                 SLRA5_bit           _BIT_ACCESS(SLRCONA,5)
// SLRCONA<SLRA6>
extern volatile __bit                   SLRA6               __at(0x7876);	// @ (0xF0E * 8 + 6)
#define                                 SLRA6_bit           _BIT_ACCESS(SLRCONA,6)
// SLRCONA<SLRA7>
extern volatile __bit                   SLRA7               __at(0x7877);	// @ (0xF0E * 8 + 7)
#define                                 SLRA7_bit           _BIT_ACCESS(SLRCONA,7)
// SLRCONB<SLRB0>
extern volatile __bit                   SLRB0               __at(0x78B0);	// @ (0xF16 * 8 + 0)
#define                                 SLRB0_bit           _BIT_ACCESS(SLRCONB,0)
// SLRCONB<SLRB1>
extern volatile __bit                   SLRB1               __at(0x78B1);	// @ (0xF16 * 8 + 1)
#define                                 SLRB1_bit           _BIT_ACCESS(SLRCONB,1)
// SLRCONB<SLRB2>
extern volatile __bit                   SLRB2               __at(0x78B2);	// @ (0xF16 * 8 + 2)
#define                                 SLRB2_bit           _BIT_ACCESS(SLRCONB,2)
// SLRCONB<SLRB3>
extern volatile __bit                   SLRB3               __at(0x78B3);	// @ (0xF16 * 8 + 3)
#define                                 SLRB3_bit           _BIT_ACCESS(SLRCONB,3)
// SLRCONB<SLRB4>
extern volatile __bit                   SLRB4               __at(0x78B4);	// @ (0xF16 * 8 + 4)
#define                                 SLRB4_bit           _BIT_ACCESS(SLRCONB,4)
// SLRCONB<SLRB5>
extern volatile __bit                   SLRB5               __at(0x78B5);	// @ (0xF16 * 8 + 5)
#define                                 SLRB5_bit           _BIT_ACCESS(SLRCONB,5)
// SLRCONB<SLRB6>
extern volatile __bit                   SLRB6               __at(0x78B6);	// @ (0xF16 * 8 + 6)
#define                                 SLRB6_bit           _BIT_ACCESS(SLRCONB,6)
// SLRCONB<SLRB7>
extern volatile __bit                   SLRB7               __at(0x78B7);	// @ (0xF16 * 8 + 7)
#define                                 SLRB7_bit           _BIT_ACCESS(SLRCONB,7)
// SLRCONC<SLRC0>
extern volatile __bit                   SLRC0               __at(0x78F0);	// @ (0xF1E * 8 + 0)
#define                                 SLRC0_bit           _BIT_ACCESS(SLRCONC,0)
// SLRCONC<SLRC1>
extern volatile __bit                   SLRC1               __at(0x78F1);	// @ (0xF1E * 8 + 1)
#define                                 SLRC1_bit           _BIT_ACCESS(SLRCONC,1)
// SLRCONC<SLRC2>
extern volatile __bit                   SLRC2               __at(0x78F2);	// @ (0xF1E * 8 + 2)
#define                                 SLRC2_bit           _BIT_ACCESS(SLRCONC,2)
// SLRCONC<SLRC3>
extern volatile __bit                   SLRC3               __at(0x78F3);	// @ (0xF1E * 8 + 3)
#define                                 SLRC3_bit           _BIT_ACCESS(SLRCONC,3)
// SLRCONC<SLRC4>
extern volatile __bit                   SLRC4               __at(0x78F4);	// @ (0xF1E * 8 + 4)
#define                                 SLRC4_bit           _BIT_ACCESS(SLRCONC,4)
// SLRCONC<SLRC5>
extern volatile __bit                   SLRC5               __at(0x78F5);	// @ (0xF1E * 8 + 5)
#define                                 SLRC5_bit           _BIT_ACCESS(SLRCONC,5)
// SLRCONC<SLRC6>
extern volatile __bit                   SLRC6               __at(0x78F6);	// @ (0xF1E * 8 + 6)
#define                                 SLRC6_bit           _BIT_ACCESS(SLRCONC,6)
// SLRCONC<SLRC7>
extern volatile __bit                   SLRC7               __at(0x78F7);	// @ (0xF1E * 8 + 7)
#define                                 SLRC7_bit           _BIT_ACCESS(SLRCONC,7)
// SSP1STAT<SMP>
extern volatile __bit                   SMP                 __at(0x7CAF);	// @ (0xF95 * 8 + 7)
#define                                 SMP_bit             _BIT_ACCESS(SSP1STAT,7)
// SSP1STAT<SMP1>
extern volatile __bit                   SMP1                __at(0x7CAF);	// @ (0xF95 * 8 + 7)
#define                                 SMP1_bit            _BIT_ACCESS(SSP1STAT,7)
// OSCSTAT<SOR>
extern volatile __bit                   SOR                 __at(0x76DB);	// @ (0xEDB * 8 + 3)
#define                                 SOR_bit             _BIT_ACCESS(OSCSTAT,3)
// OSCEN<SOSCEN>
extern volatile __bit                   SOSCEN              __at(0x76E3);	// @ (0xEDC * 8 + 3)
#define                                 SOSCEN_bit          _BIT_ACCESS(OSCEN,3)
// OSCCON3<SOSCPWR>
extern volatile __bit                   SOSCPWR             __at(0x76D6);	// @ (0xEDA * 8 + 6)
#define                                 SOSCPWR_bit         _BIT_ACCESS(OSCCON3,6)
// STKPTR<SP0>
extern volatile __bit                   SP0                 __at(0x7FE0);	// @ (0xFFC * 8 + 0)
#define                                 SP0_bit             _BIT_ACCESS(STKPTR,0)
// STKPTR<SP1>
extern volatile __bit                   SP1                 __at(0x7FE1);	// @ (0xFFC * 8 + 1)
#define                                 SP1_bit             _BIT_ACCESS(STKPTR,1)
// STKPTR<SP2>
extern volatile __bit                   SP2                 __at(0x7FE2);	// @ (0xFFC * 8 + 2)
#define                                 SP2_bit             _BIT_ACCESS(STKPTR,2)
// STKPTR<SP3>
extern volatile __bit                   SP3                 __at(0x7FE3);	// @ (0xFFC * 8 + 3)
#define                                 SP3_bit             _BIT_ACCESS(STKPTR,3)
// STKPTR<SP4>
extern volatile __bit                   SP4                 __at(0x7FE4);	// @ (0xFFC * 8 + 4)
#define                                 SP4_bit             _BIT_ACCESS(STKPTR,4)
// STKPTR<SP5>
extern volatile __bit                   SP5                 __at(0x7FE5);	// @ (0xFFC * 8 + 5)
#define                                 SP5_bit             _BIT_ACCESS(STKPTR,5)
// RC1STA<SPEN>
extern volatile __bit                   SPEN                __at(0x7CEF);	// @ (0xF9D * 8 + 7)
#define                                 SPEN_bit            _BIT_ACCESS(RC1STA,7)
// PMD0<SPI1MD>
extern volatile __bit                   SPI1MD              __at(0x7709);	// @ (0xEE1 * 8 + 1)
#define                                 SPI1MD_bit          _BIT_ACCESS(PMD0,1)
// PMD0<SPI2MD>
extern volatile __bit                   SPI2MD              __at(0x770A);	// @ (0xEE1 * 8 + 2)
#define                                 SPI2MD_bit          _BIT_ACCESS(PMD0,2)
// MDSRC<SRCS0>
extern volatile __bit                   SRCS0               __at(0x7A98);	// @ (0xF53 * 8 + 0)
#define                                 SRCS0_bit           _BIT_ACCESS(MDSRC,0)
// MDSRC<SRCS1>
extern volatile __bit                   SRCS1               __at(0x7A99);	// @ (0xF53 * 8 + 1)
#define                                 SRCS1_bit           _BIT_ACCESS(MDSRC,1)
// MDSRC<SRCS2>
extern volatile __bit                   SRCS2               __at(0x7A9A);	// @ (0xF53 * 8 + 2)
#define                                 SRCS2_bit           _BIT_ACCESS(MDSRC,2)
// MDSRC<SRCS3>
extern volatile __bit                   SRCS3               __at(0x7A9B);	// @ (0xF53 * 8 + 3)
#define                                 SRCS3_bit           _BIT_ACCESS(MDSRC,3)
// RC1STA<SREN>
extern volatile __bit                   SREN                __at(0x7CED);	// @ (0xF9D * 8 + 5)
#define                                 SREN_bit            _BIT_ACCESS(RC1STA,5)
// RC1STA<SRENA>
extern volatile __bit                   SRENA               __at(0x7CED);	// @ (0xF9D * 8 + 5)
#define                                 SRENA_bit           _BIT_ACCESS(RC1STA,5)
// SSP1CLKPPS<SSP1CLKPPS0>
extern volatile __bit                   SSP1CLKPPS0         __at(0x75B8);	// @ (0xEB7 * 8 + 0)
#define                                 SSP1CLKPPS0_bit     _BIT_ACCESS(SSP1CLKPPS,0)
// SSP1CLKPPS<SSP1CLKPPS1>
extern volatile __bit                   SSP1CLKPPS1         __at(0x75B9);	// @ (0xEB7 * 8 + 1)
#define                                 SSP1CLKPPS1_bit     _BIT_ACCESS(SSP1CLKPPS,1)
// SSP1CLKPPS<SSP1CLKPPS2>
extern volatile __bit                   SSP1CLKPPS2         __at(0x75BA);	// @ (0xEB7 * 8 + 2)
#define                                 SSP1CLKPPS2_bit     _BIT_ACCESS(SSP1CLKPPS,2)
// SSP1CLKPPS<SSP1CLKPPS3>
extern volatile __bit                   SSP1CLKPPS3         __at(0x75BB);	// @ (0xEB7 * 8 + 3)
#define                                 SSP1CLKPPS3_bit     _BIT_ACCESS(SSP1CLKPPS,3)
// SSP1CLKPPS<SSP1CLKPPS4>
extern volatile __bit                   SSP1CLKPPS4         __at(0x75BC);	// @ (0xEB7 * 8 + 4)
#define                                 SSP1CLKPPS4_bit     _BIT_ACCESS(SSP1CLKPPS,4)
// SSP1DATPPS<SSP1DATPPS0>
extern volatile __bit                   SSP1DATPPS0         __at(0x75C0);	// @ (0xEB8 * 8 + 0)
#define                                 SSP1DATPPS0_bit     _BIT_ACCESS(SSP1DATPPS,0)
// SSP1DATPPS<SSP1DATPPS1>
extern volatile __bit                   SSP1DATPPS1         __at(0x75C1);	// @ (0xEB8 * 8 + 1)
#define                                 SSP1DATPPS1_bit     _BIT_ACCESS(SSP1DATPPS,1)
// SSP1DATPPS<SSP1DATPPS2>
extern volatile __bit                   SSP1DATPPS2         __at(0x75C2);	// @ (0xEB8 * 8 + 2)
#define                                 SSP1DATPPS2_bit     _BIT_ACCESS(SSP1DATPPS,2)
// SSP1DATPPS<SSP1DATPPS3>
extern volatile __bit                   SSP1DATPPS3         __at(0x75C3);	// @ (0xEB8 * 8 + 3)
#define                                 SSP1DATPPS3_bit     _BIT_ACCESS(SSP1DATPPS,3)
// SSP1DATPPS<SSP1DATPPS4>
extern volatile __bit                   SSP1DATPPS4         __at(0x75C4);	// @ (0xEB8 * 8 + 4)
#define                                 SSP1DATPPS4_bit     _BIT_ACCESS(SSP1DATPPS,4)
// PIE3<SSP1IE>
extern volatile __bit                   SSP1IE              __at(0x7628);	// @ (0xEC5 * 8 + 0)
#define                                 SSP1IE_bit          _BIT_ACCESS(PIE3,0)
// PIR3<SSP1IF>
extern volatile __bit                   SSP1IF              __at(0x7668);	// @ (0xECD * 8 + 0)
#define                                 SSP1IF_bit          _BIT_ACCESS(PIR3,0)
// IPR3<SSP1IP>
extern volatile __bit                   SSP1IP              __at(0x75E8);	// @ (0xEBD * 8 + 0)
#define                                 SSP1IP_bit          _BIT_ACCESS(IPR3,0)
// SSP1SSPPS<SSP1SSPPS0>
extern volatile __bit                   SSP1SSPPS0          __at(0x75C8);	// @ (0xEB9 * 8 + 0)
#define                                 SSP1SSPPS0_bit      _BIT_ACCESS(SSP1SSPPS,0)
// SSP1SSPPS<SSP1SSPPS1>
extern volatile __bit                   SSP1SSPPS1          __at(0x75C9);	// @ (0xEB9 * 8 + 1)
#define                                 SSP1SSPPS1_bit      _BIT_ACCESS(SSP1SSPPS,1)
// SSP1SSPPS<SSP1SSPPS2>
extern volatile __bit                   SSP1SSPPS2          __at(0x75CA);	// @ (0xEB9 * 8 + 2)
#define                                 SSP1SSPPS2_bit      _BIT_ACCESS(SSP1SSPPS,2)
// SSP1SSPPS<SSP1SSPPS3>
extern volatile __bit                   SSP1SSPPS3          __at(0x75CB);	// @ (0xEB9 * 8 + 3)
#define                                 SSP1SSPPS3_bit      _BIT_ACCESS(SSP1SSPPS,3)
// SSP1SSPPS<SSP1SSPPS4>
extern volatile __bit                   SSP1SSPPS4          __at(0x75CC);	// @ (0xEB9 * 8 + 4)
#define                                 SSP1SSPPS4_bit      _BIT_ACCESS(SSP1SSPPS,4)
// SSP1CLKPPS<SSPCLKPPS0>
extern volatile __bit                   SSPCLKPPS0          __at(0x75B8);	// @ (0xEB7 * 8 + 0)
#define                                 SSPCLKPPS0_bit      _BIT_ACCESS(SSP1CLKPPS,0)
// SSP1CLKPPS<SSPCLKPPS1>
extern volatile __bit                   SSPCLKPPS1          __at(0x75B9);	// @ (0xEB7 * 8 + 1)
#define                                 SSPCLKPPS1_bit      _BIT_ACCESS(SSP1CLKPPS,1)
// SSP1CLKPPS<SSPCLKPPS2>
extern volatile __bit                   SSPCLKPPS2          __at(0x75BA);	// @ (0xEB7 * 8 + 2)
#define                                 SSPCLKPPS2_bit      _BIT_ACCESS(SSP1CLKPPS,2)
// SSP1CLKPPS<SSPCLKPPS3>
extern volatile __bit                   SSPCLKPPS3          __at(0x75BB);	// @ (0xEB7 * 8 + 3)
#define                                 SSPCLKPPS3_bit      _BIT_ACCESS(SSP1CLKPPS,3)
// SSP1CLKPPS<SSPCLKPPS4>
extern volatile __bit                   SSPCLKPPS4          __at(0x75BC);	// @ (0xEB7 * 8 + 4)
#define                                 SSPCLKPPS4_bit      _BIT_ACCESS(SSP1CLKPPS,4)
// SSP1DATPPS<SSPDATPPS0>
extern volatile __bit                   SSPDATPPS0          __at(0x75C0);	// @ (0xEB8 * 8 + 0)
#define                                 SSPDATPPS0_bit      _BIT_ACCESS(SSP1DATPPS,0)
// SSP1DATPPS<SSPDATPPS1>
extern volatile __bit                   SSPDATPPS1          __at(0x75C1);	// @ (0xEB8 * 8 + 1)
#define                                 SSPDATPPS1_bit      _BIT_ACCESS(SSP1DATPPS,1)
// SSP1DATPPS<SSPDATPPS2>
extern volatile __bit                   SSPDATPPS2          __at(0x75C2);	// @ (0xEB8 * 8 + 2)
#define                                 SSPDATPPS2_bit      _BIT_ACCESS(SSP1DATPPS,2)
// SSP1DATPPS<SSPDATPPS3>
extern volatile __bit                   SSPDATPPS3          __at(0x75C3);	// @ (0xEB8 * 8 + 3)
#define                                 SSPDATPPS3_bit      _BIT_ACCESS(SSP1DATPPS,3)
// SSP1DATPPS<SSPDATPPS4>
extern volatile __bit                   SSPDATPPS4          __at(0x75C4);	// @ (0xEB8 * 8 + 4)
#define                                 SSPDATPPS4_bit      _BIT_ACCESS(SSP1DATPPS,4)
// SSP1CON1<SSPEN>
extern volatile __bit                   SSPEN               __at(0x7CB5);	// @ (0xF96 * 8 + 5)
#define                                 SSPEN_bit           _BIT_ACCESS(SSP1CON1,5)
// SSP1CON1<SSPEN1>
extern volatile __bit                   SSPEN1              __at(0x7CB5);	// @ (0xF96 * 8 + 5)
#define                                 SSPEN1_bit          _BIT_ACCESS(SSP1CON1,5)
// PIE3<SSPIE>
extern volatile __bit                   SSPIE               __at(0x7628);	// @ (0xEC5 * 8 + 0)
#define                                 SSPIE_bit           _BIT_ACCESS(PIE3,0)
// PIR3<SSPIF>
extern volatile __bit                   SSPIF               __at(0x7668);	// @ (0xECD * 8 + 0)
#define                                 SSPIF_bit           _BIT_ACCESS(PIR3,0)
// IPR3<SSPIP>
extern volatile __bit                   SSPIP               __at(0x75E8);	// @ (0xEBD * 8 + 0)
#define                                 SSPIP_bit           _BIT_ACCESS(IPR3,0)
// SSP1CON1<SSPM0>
extern volatile __bit                   SSPM0               __at(0x7CB0);	// @ (0xF96 * 8 + 0)
#define                                 SSPM0_bit           _BIT_ACCESS(SSP1CON1,0)
// SSP1CON1<SSPM01>
extern volatile __bit                   SSPM01              __at(0x7CB0);	// @ (0xF96 * 8 + 0)
#define                                 SSPM01_bit          _BIT_ACCESS(SSP1CON1,0)
// SSP1CON1<SSPM1>
extern volatile __bit                   SSPM1               __at(0x7CB1);	// @ (0xF96 * 8 + 1)
#define                                 SSPM1_bit           _BIT_ACCESS(SSP1CON1,1)
// SSP1CON1<SSPM11>
extern volatile __bit                   SSPM11              __at(0x7CB1);	// @ (0xF96 * 8 + 1)
#define                                 SSPM11_bit          _BIT_ACCESS(SSP1CON1,1)
// SSP1CON1<SSPM2>
extern volatile __bit                   SSPM2               __at(0x7CB2);	// @ (0xF96 * 8 + 2)
#define                                 SSPM2_bit           _BIT_ACCESS(SSP1CON1,2)
// SSP1CON1<SSPM21>
extern volatile __bit                   SSPM21              __at(0x7CB2);	// @ (0xF96 * 8 + 2)
#define                                 SSPM21_bit          _BIT_ACCESS(SSP1CON1,2)
// SSP1CON1<SSPM3>
extern volatile __bit                   SSPM3               __at(0x7CB3);	// @ (0xF96 * 8 + 3)
#define                                 SSPM3_bit           _BIT_ACCESS(SSP1CON1,3)
// SSP1CON1<SSPM31>
extern volatile __bit                   SSPM31              __at(0x7CB3);	// @ (0xF96 * 8 + 3)
#define                                 SSPM31_bit          _BIT_ACCESS(SSP1CON1,3)
// SSP1CON1<SSPOV>
extern volatile __bit                   SSPOV               __at(0x7CB6);	// @ (0xF96 * 8 + 6)
#define                                 SSPOV_bit           _BIT_ACCESS(SSP1CON1,6)
// SSP1CON1<SSPOV1>
extern volatile __bit                   SSPOV1              __at(0x7CB6);	// @ (0xF96 * 8 + 6)
#define                                 SSPOV1_bit          _BIT_ACCESS(SSP1CON1,6)
// SSP1SSPPS<SSPSSPPS0>
extern volatile __bit                   SSPSSPPS0           __at(0x75C8);	// @ (0xEB9 * 8 + 0)
#define                                 SSPSSPPS0_bit       _BIT_ACCESS(SSP1SSPPS,0)
// SSP1SSPPS<SSPSSPPS1>
extern volatile __bit                   SSPSSPPS1           __at(0x75C9);	// @ (0xEB9 * 8 + 1)
#define                                 SSPSSPPS1_bit       _BIT_ACCESS(SSP1SSPPS,1)
// SSP1SSPPS<SSPSSPPS2>
extern volatile __bit                   SSPSSPPS2           __at(0x75CA);	// @ (0xEB9 * 8 + 2)
#define                                 SSPSSPPS2_bit       _BIT_ACCESS(SSP1SSPPS,2)
// SSP1SSPPS<SSPSSPPS3>
extern volatile __bit                   SSPSSPPS3           __at(0x75CB);	// @ (0xEB9 * 8 + 3)
#define                                 SSPSSPPS3_bit       _BIT_ACCESS(SSP1SSPPS,3)
// SSP1SSPPS<SSPSSPPS4>
extern volatile __bit                   SSPSSPPS4           __at(0x75CC);	// @ (0xEB9 * 8 + 4)
#define                                 SSPSSPPS4_bit       _BIT_ACCESS(SSP1SSPPS,4)
// SSP1STAT<START>
extern volatile __bit                   START               __at(0x7CAB);	// @ (0xF95 * 8 + 3)
#define                                 START_bit           _BIT_ACCESS(SSP1STAT,3)
// SSP1STAT<START1>
extern volatile __bit                   START1              __at(0x7CAB);	// @ (0xF95 * 8 + 3)
#define                                 START1_bit          _BIT_ACCESS(SSP1STAT,3)
// WDTTMR<STATE>
extern volatile __bit                   STATE               __at(0x76B2);	// @ (0xED6 * 8 + 2)
#define                                 STATE_bit           _BIT_ACCESS(WDTTMR,2)
// PCON0<STKOVF>
extern volatile __bit                   STKOVF              __at(0x7EBF);	// @ (0xFD7 * 8 + 7)
#define                                 STKOVF_bit          _BIT_ACCESS(PCON0,7)
// STKPTR<STKPTR0>
extern volatile __bit                   STKPTR0             __at(0x7FE0);	// @ (0xFFC * 8 + 0)
#define                                 STKPTR0_bit         _BIT_ACCESS(STKPTR,0)
// STKPTR<STKPTR1>
extern volatile __bit                   STKPTR1             __at(0x7FE1);	// @ (0xFFC * 8 + 1)
#define                                 STKPTR1_bit         _BIT_ACCESS(STKPTR,1)
// STKPTR<STKPTR2>
extern volatile __bit                   STKPTR2             __at(0x7FE2);	// @ (0xFFC * 8 + 2)
#define                                 STKPTR2_bit         _BIT_ACCESS(STKPTR,2)
// STKPTR<STKPTR3>
extern volatile __bit                   STKPTR3             __at(0x7FE3);	// @ (0xFFC * 8 + 3)
#define                                 STKPTR3_bit         _BIT_ACCESS(STKPTR,3)
// STKPTR<STKPTR4>
extern volatile __bit                   STKPTR4             __at(0x7FE4);	// @ (0xFFC * 8 + 4)
#define                                 STKPTR4_bit         _BIT_ACCESS(STKPTR,4)
// STKPTR<STKPTR5>
extern volatile __bit                   STKPTR5             __at(0x7FE5);	// @ (0xFFC * 8 + 5)
#define                                 STKPTR5_bit         _BIT_ACCESS(STKPTR,5)
// PCON0<STKUNF>
extern volatile __bit                   STKUNF              __at(0x7EBE);	// @ (0xFD7 * 8 + 6)
#define                                 STKUNF_bit          _BIT_ACCESS(PCON0,6)
// SSP1STAT<STOP>
extern volatile __bit                   STOP                __at(0x7CAC);	// @ (0xF95 * 8 + 4)
#define                                 STOP_bit            _BIT_ACCESS(SSP1STAT,4)
// SSP1STAT<STOP1>
extern volatile __bit                   STOP1               __at(0x7CAC);	// @ (0xF95 * 8 + 4)
#define                                 STOP1_bit           _BIT_ACCESS(SSP1STAT,4)
// CWG1STR<STRA>
extern volatile __bit                   STRA                __at(0x7A40);	// @ (0xF48 * 8 + 0)
#define                                 STRA_bit            _BIT_ACCESS(CWG1STR,0)
// CWG1STR<STRB>
extern volatile __bit                   STRB                __at(0x7A41);	// @ (0xF48 * 8 + 1)
#define                                 STRB_bit            _BIT_ACCESS(CWG1STR,1)
// CWG1STR<STRC>
extern volatile __bit                   STRC                __at(0x7A42);	// @ (0xF48 * 8 + 2)
#define                                 STRC_bit            _BIT_ACCESS(CWG1STR,2)
// CWG1STR<STRD>
extern volatile __bit                   STRD                __at(0x7A43);	// @ (0xF48 * 8 + 3)
#define                                 STRD_bit            _BIT_ACCESS(CWG1STR,3)
// WDTCON0<SWDTEN>
extern volatile __bit                   SWDTEN              __at(0x7690);	// @ (0xED2 * 8 + 0)
#define                                 SWDTEN_bit          _BIT_ACCESS(WDTCON0,0)
// TX1STA<SYNC1>
extern volatile __bit                   SYNC1               __at(0x7CF4);	// @ (0xF9E * 8 + 4)
#define                                 SYNC1_bit           _BIT_ACCESS(TX1STA,4)
// PMD0<SYSCMD>
extern volatile __bit                   SYSCMD              __at(0x770F);	// @ (0xEE1 * 8 + 7)
#define                                 SYSCMD_bit          _BIT_ACCESS(PMD0,7)
// T0CON0<T016BIT>
extern volatile __bit                   T016BIT             __at(0x7EAC);	// @ (0xFD5 * 8 + 4)
#define                                 T016BIT_bit         _BIT_ACCESS(T0CON0,4)
// T0CON1<T0ASYNC>
extern volatile __bit                   T0ASYNC             __at(0x7EB4);	// @ (0xFD6 * 8 + 4)
#define                                 T0ASYNC_bit         _BIT_ACCESS(T0CON1,4)
// T0CKIPPS<T0CKIPPS0>
extern volatile __bit                   T0CKIPPS0           __at(0x7520);	// @ (0xEA4 * 8 + 0)
#define                                 T0CKIPPS0_bit       _BIT_ACCESS(T0CKIPPS,0)
// T0CKIPPS<T0CKIPPS1>
extern volatile __bit                   T0CKIPPS1           __at(0x7521);	// @ (0xEA4 * 8 + 1)
#define                                 T0CKIPPS1_bit       _BIT_ACCESS(T0CKIPPS,1)
// T0CKIPPS<T0CKIPPS2>
extern volatile __bit                   T0CKIPPS2           __at(0x7522);	// @ (0xEA4 * 8 + 2)
#define                                 T0CKIPPS2_bit       _BIT_ACCESS(T0CKIPPS,2)
// T0CKIPPS<T0CKIPPS3>
extern volatile __bit                   T0CKIPPS3           __at(0x7523);	// @ (0xEA4 * 8 + 3)
#define                                 T0CKIPPS3_bit       _BIT_ACCESS(T0CKIPPS,3)
// T0CON1<T0CKPS0>
extern volatile __bit                   T0CKPS0             __at(0x7EB0);	// @ (0xFD6 * 8 + 0)
#define                                 T0CKPS0_bit         _BIT_ACCESS(T0CON1,0)
// T0CON1<T0CKPS1>
extern volatile __bit                   T0CKPS1             __at(0x7EB1);	// @ (0xFD6 * 8 + 1)
#define                                 T0CKPS1_bit         _BIT_ACCESS(T0CON1,1)
// T0CON1<T0CKPS2>
extern volatile __bit                   T0CKPS2             __at(0x7EB2);	// @ (0xFD6 * 8 + 2)
#define                                 T0CKPS2_bit         _BIT_ACCESS(T0CON1,2)
// T0CON1<T0CKPS3>
extern volatile __bit                   T0CKPS3             __at(0x7EB3);	// @ (0xFD6 * 8 + 3)
#define                                 T0CKPS3_bit         _BIT_ACCESS(T0CON1,3)
// T0CON1<T0CS0>
extern volatile __bit                   T0CS0               __at(0x7EB5);	// @ (0xFD6 * 8 + 5)
#define                                 T0CS0_bit           _BIT_ACCESS(T0CON1,5)
// T0CON1<T0CS1>
extern volatile __bit                   T0CS1               __at(0x7EB6);	// @ (0xFD6 * 8 + 6)
#define                                 T0CS1_bit           _BIT_ACCESS(T0CON1,6)
// T0CON1<T0CS2>
extern volatile __bit                   T0CS2               __at(0x7EB7);	// @ (0xFD6 * 8 + 7)
#define                                 T0CS2_bit           _BIT_ACCESS(T0CON1,7)
// T0CON0<T0EN>
extern volatile __bit                   T0EN                __at(0x7EAF);	// @ (0xFD5 * 8 + 7)
#define                                 T0EN_bit            _BIT_ACCESS(T0CON0,7)
// T0CON0<T0OUT>
extern volatile __bit                   T0OUT               __at(0x7EAD);	// @ (0xFD5 * 8 + 5)
#define                                 T0OUT_bit           _BIT_ACCESS(T0CON0,5)
// T0CON0<T0OUTPS0>
extern volatile __bit                   T0OUTPS0            __at(0x7EA8);	// @ (0xFD5 * 8 + 0)
#define                                 T0OUTPS0_bit        _BIT_ACCESS(T0CON0,0)
// T0CON0<T0OUTPS1>
extern volatile __bit                   T0OUTPS1            __at(0x7EA9);	// @ (0xFD5 * 8 + 1)
#define                                 T0OUTPS1_bit        _BIT_ACCESS(T0CON0,1)
// T0CON0<T0OUTPS2>
extern volatile __bit                   T0OUTPS2            __at(0x7EAA);	// @ (0xFD5 * 8 + 2)
#define                                 T0OUTPS2_bit        _BIT_ACCESS(T0CON0,2)
// T0CON0<T0OUTPS3>
extern volatile __bit                   T0OUTPS3            __at(0x7EAB);	// @ (0xFD5 * 8 + 3)
#define                                 T0OUTPS3_bit        _BIT_ACCESS(T0CON0,3)
// TMR0H<T0PR0>
extern volatile __bit                   T0PR0               __at(0x7EA0);	// @ (0xFD4 * 8 + 0)
#define                                 T0PR0_bit           _BIT_ACCESS(TMR0H,0)
// TMR0H<T0PR1>
extern volatile __bit                   T0PR1               __at(0x7EA1);	// @ (0xFD4 * 8 + 1)
#define                                 T0PR1_bit           _BIT_ACCESS(TMR0H,1)
// TMR0H<T0PR2>
extern volatile __bit                   T0PR2               __at(0x7EA2);	// @ (0xFD4 * 8 + 2)
#define                                 T0PR2_bit           _BIT_ACCESS(TMR0H,2)
// TMR0H<T0PR3>
extern volatile __bit                   T0PR3               __at(0x7EA3);	// @ (0xFD4 * 8 + 3)
#define                                 T0PR3_bit           _BIT_ACCESS(TMR0H,3)
// TMR0H<T0PR4>
extern volatile __bit                   T0PR4               __at(0x7EA4);	// @ (0xFD4 * 8 + 4)
#define                                 T0PR4_bit           _BIT_ACCESS(TMR0H,4)
// TMR0H<T0PR5>
extern volatile __bit                   T0PR5               __at(0x7EA5);	// @ (0xFD4 * 8 + 5)
#define                                 T0PR5_bit           _BIT_ACCESS(TMR0H,5)
// TMR0H<T0PR6>
extern volatile __bit                   T0PR6               __at(0x7EA6);	// @ (0xFD4 * 8 + 6)
#define                                 T0PR6_bit           _BIT_ACCESS(TMR0H,6)
// TMR0H<T0PR7>
extern volatile __bit                   T0PR7               __at(0x7EA7);	// @ (0xFD4 * 8 + 7)
#define                                 T0PR7_bit           _BIT_ACCESS(TMR0H,7)
// T0CON1<T0PS0>
extern volatile __bit                   T0PS0               __at(0x7EB0);	// @ (0xFD6 * 8 + 0)
#define                                 T0PS0_bit           _BIT_ACCESS(T0CON1,0)
// T0CON1<T0PS1>
extern volatile __bit                   T0PS1               __at(0x7EB1);	// @ (0xFD6 * 8 + 1)
#define                                 T0PS1_bit           _BIT_ACCESS(T0CON1,1)
// T0CON1<T0PS2>
extern volatile __bit                   T0PS2               __at(0x7EB2);	// @ (0xFD6 * 8 + 2)
#define                                 T0PS2_bit           _BIT_ACCESS(T0CON1,2)
// T0CON1<T0PS3>
extern volatile __bit                   T0PS3               __at(0x7EB3);	// @ (0xFD6 * 8 + 3)
#define                                 T0PS3_bit           _BIT_ACCESS(T0CON1,3)
// T1CKIPPS<T1CKIPPS0>
extern volatile __bit                   T1CKIPPS0           __at(0x7528);	// @ (0xEA5 * 8 + 0)
#define                                 T1CKIPPS0_bit       _BIT_ACCESS(T1CKIPPS,0)
// T1CKIPPS<T1CKIPPS1>
extern volatile __bit                   T1CKIPPS1           __at(0x7529);	// @ (0xEA5 * 8 + 1)
#define                                 T1CKIPPS1_bit       _BIT_ACCESS(T1CKIPPS,1)
// T1CKIPPS<T1CKIPPS2>
extern volatile __bit                   T1CKIPPS2           __at(0x752A);	// @ (0xEA5 * 8 + 2)
#define                                 T1CKIPPS2_bit       _BIT_ACCESS(T1CKIPPS,2)
// T1CKIPPS<T1CKIPPS3>
extern volatile __bit                   T1CKIPPS3           __at(0x752B);	// @ (0xEA5 * 8 + 3)
#define                                 T1CKIPPS3_bit       _BIT_ACCESS(T1CKIPPS,3)
// T1CKIPPS<T1CKIPPS4>
extern volatile __bit                   T1CKIPPS4           __at(0x752C);	// @ (0xEA5 * 8 + 4)
#define                                 T1CKIPPS4_bit       _BIT_ACCESS(T1CKIPPS,4)
// T1CON<T1CKPS0>
extern volatile __bit                   T1CKPS0             __at(0x7E7C);	// @ (0xFCF * 8 + 4)
#define                                 T1CKPS0_bit         _BIT_ACCESS(T1CON,4)
// T1CON<T1CKPS1>
extern volatile __bit                   T1CKPS1             __at(0x7E7D);	// @ (0xFCF * 8 + 5)
#define                                 T1CKPS1_bit         _BIT_ACCESS(T1CON,5)
// T1CLK<T1CS0>
extern volatile __bit                   T1CS0               __at(0x7E90);	// @ (0xFD2 * 8 + 0)
#define                                 T1CS0_bit           _BIT_ACCESS(T1CLK,0)
// T1CLK<T1CS1>
extern volatile __bit                   T1CS1               __at(0x7E91);	// @ (0xFD2 * 8 + 1)
#define                                 T1CS1_bit           _BIT_ACCESS(T1CLK,1)
// T1CLK<T1CS2>
extern volatile __bit                   T1CS2               __at(0x7E92);	// @ (0xFD2 * 8 + 2)
#define                                 T1CS2_bit           _BIT_ACCESS(T1CLK,2)
// T1CLK<T1CS3>
extern volatile __bit                   T1CS3               __at(0x7E93);	// @ (0xFD2 * 8 + 3)
#define                                 T1CS3_bit           _BIT_ACCESS(T1CLK,3)
// T1GCON<T1GE>
extern volatile __bit                   T1GE                __at(0x7E87);	// @ (0xFD0 * 8 + 7)
#define                                 T1GE_bit            _BIT_ACCESS(T1GCON,7)
// T1GCON<T1GGO>
extern volatile __bit                   T1GGO               __at(0x7E83);	// @ (0xFD0 * 8 + 3)
#define                                 T1GGO_bit           _BIT_ACCESS(T1GCON,3)
// T1GCON<T1GGO_NOT_DONE>
extern volatile __bit                   T1GGO_NOT_DONE      __at(0x7E83);	// @ (0xFD0 * 8 + 3)
#define                                 T1GGO_NOT_DONE_bit  _BIT_ACCESS(T1GCON,3)
// T1GCON<T1GGO_nDONE>
extern volatile __bit                   T1GGO_nDONE         __at(0x7E83);	// @ (0xFD0 * 8 + 3)
#define                                 T1GGO_nDONE_bit     _BIT_ACCESS(T1GCON,3)
// T1GCON<T1GPOL>
extern volatile __bit                   T1GPOL              __at(0x7E86);	// @ (0xFD0 * 8 + 6)
#define                                 T1GPOL_bit          _BIT_ACCESS(T1GCON,6)
// T1GPPS<T1GPPS0>
extern volatile __bit                   T1GPPS0             __at(0x7530);	// @ (0xEA6 * 8 + 0)
#define                                 T1GPPS0_bit         _BIT_ACCESS(T1GPPS,0)
// T1GPPS<T1GPPS1>
extern volatile __bit                   T1GPPS1             __at(0x7531);	// @ (0xEA6 * 8 + 1)
#define                                 T1GPPS1_bit         _BIT_ACCESS(T1GPPS,1)
// T1GPPS<T1GPPS2>
extern volatile __bit                   T1GPPS2             __at(0x7532);	// @ (0xEA6 * 8 + 2)
#define                                 T1GPPS2_bit         _BIT_ACCESS(T1GPPS,2)
// T1GPPS<T1GPPS3>
extern volatile __bit                   T1GPPS3             __at(0x7533);	// @ (0xEA6 * 8 + 3)
#define                                 T1GPPS3_bit         _BIT_ACCESS(T1GPPS,3)
// T1GPPS<T1GPPS4>
extern volatile __bit                   T1GPPS4             __at(0x7534);	// @ (0xEA6 * 8 + 4)
#define                                 T1GPPS4_bit         _BIT_ACCESS(T1GPPS,4)
// T1GCON<T1GSPM>
extern volatile __bit                   T1GSPM              __at(0x7E84);	// @ (0xFD0 * 8 + 4)
#define                                 T1GSPM_bit          _BIT_ACCESS(T1GCON,4)
// T1GATE<T1GSS0>
extern volatile __bit                   T1GSS0              __at(0x7E88);	// @ (0xFD1 * 8 + 0)
#define                                 T1GSS0_bit          _BIT_ACCESS(T1GATE,0)
// T1GATE<T1GSS1>
extern volatile __bit                   T1GSS1              __at(0x7E89);	// @ (0xFD1 * 8 + 1)
#define                                 T1GSS1_bit          _BIT_ACCESS(T1GATE,1)
// T1GATE<T1GSS2>
extern volatile __bit                   T1GSS2              __at(0x7E8A);	// @ (0xFD1 * 8 + 2)
#define                                 T1GSS2_bit          _BIT_ACCESS(T1GATE,2)
// T1GATE<T1GSS3>
extern volatile __bit                   T1GSS3              __at(0x7E8B);	// @ (0xFD1 * 8 + 3)
#define                                 T1GSS3_bit          _BIT_ACCESS(T1GATE,3)
// T1GCON<T1GTM>
extern volatile __bit                   T1GTM               __at(0x7E85);	// @ (0xFD0 * 8 + 5)
#define                                 T1GTM_bit           _BIT_ACCESS(T1GCON,5)
// T1GCON<T1GVAL>
extern volatile __bit                   T1GVAL              __at(0x7E82);	// @ (0xFD0 * 8 + 2)
#define                                 T1GVAL_bit          _BIT_ACCESS(T1GCON,2)
// T1CON<T1RD16>
extern volatile __bit                   T1RD16              __at(0x7E79);	// @ (0xFCF * 8 + 1)
#define                                 T1RD16_bit          _BIT_ACCESS(T1CON,1)
// T2HLT<T2CKPOL>
extern volatile __bit                   T2CKPOL             __at(0x7DF6);	// @ (0xFBE * 8 + 6)
#define                                 T2CKPOL_bit         _BIT_ACCESS(T2HLT,6)
// T2CON<T2CKPS0>
extern volatile __bit                   T2CKPS0             __at(0x7DEC);	// @ (0xFBD * 8 + 4)
#define                                 T2CKPS0_bit         _BIT_ACCESS(T2CON,4)
// T2CON<T2CKPS1>
extern volatile __bit                   T2CKPS1             __at(0x7DED);	// @ (0xFBD * 8 + 5)
#define                                 T2CKPS1_bit         _BIT_ACCESS(T2CON,5)
// T2CON<T2CKPS2>
extern volatile __bit                   T2CKPS2             __at(0x7DEE);	// @ (0xFBD * 8 + 6)
#define                                 T2CKPS2_bit         _BIT_ACCESS(T2CON,6)
// T2HLT<T2CKSYNC>
extern volatile __bit                   T2CKSYNC            __at(0x7DF5);	// @ (0xFBE * 8 + 5)
#define                                 T2CKSYNC_bit        _BIT_ACCESS(T2HLT,5)
// T2CLKCON<T2CS0>
extern volatile __bit                   T2CS0               __at(0x7DF8);	// @ (0xFBF * 8 + 0)
#define                                 T2CS0_bit           _BIT_ACCESS(T2CLKCON,0)
// T2CLKCON<T2CS1>
extern volatile __bit                   T2CS1               __at(0x7DF9);	// @ (0xFBF * 8 + 1)
#define                                 T2CS1_bit           _BIT_ACCESS(T2CLKCON,1)
// T2CLKCON<T2CS2>
extern volatile __bit                   T2CS2               __at(0x7DFA);	// @ (0xFBF * 8 + 2)
#define                                 T2CS2_bit           _BIT_ACCESS(T2CLKCON,2)
// T2CLKCON<T2CS3>
extern volatile __bit                   T2CS3               __at(0x7DFB);	// @ (0xFBF * 8 + 3)
#define                                 T2CS3_bit           _BIT_ACCESS(T2CLKCON,3)
// T2INPPS<T2INPPS0>
extern volatile __bit                   T2INPPS0            __at(0x7558);	// @ (0xEAB * 8 + 0)
#define                                 T2INPPS0_bit        _BIT_ACCESS(T2INPPS,0)
// T2INPPS<T2INPPS1>
extern volatile __bit                   T2INPPS1            __at(0x7559);	// @ (0xEAB * 8 + 1)
#define                                 T2INPPS1_bit        _BIT_ACCESS(T2INPPS,1)
// T2INPPS<T2INPPS2>
extern volatile __bit                   T2INPPS2            __at(0x755A);	// @ (0xEAB * 8 + 2)
#define                                 T2INPPS2_bit        _BIT_ACCESS(T2INPPS,2)
// T2INPPS<T2INPPS3>
extern volatile __bit                   T2INPPS3            __at(0x755B);	// @ (0xEAB * 8 + 3)
#define                                 T2INPPS3_bit        _BIT_ACCESS(T2INPPS,3)
// T2INPPS<T2INPPS4>
extern volatile __bit                   T2INPPS4            __at(0x755C);	// @ (0xEAB * 8 + 4)
#define                                 T2INPPS4_bit        _BIT_ACCESS(T2INPPS,4)
// T2HLT<T2MODE0>
extern volatile __bit                   T2MODE0             __at(0x7DF0);	// @ (0xFBE * 8 + 0)
#define                                 T2MODE0_bit         _BIT_ACCESS(T2HLT,0)
// T2HLT<T2MODE1>
extern volatile __bit                   T2MODE1             __at(0x7DF1);	// @ (0xFBE * 8 + 1)
#define                                 T2MODE1_bit         _BIT_ACCESS(T2HLT,1)
// T2HLT<T2MODE2>
extern volatile __bit                   T2MODE2             __at(0x7DF2);	// @ (0xFBE * 8 + 2)
#define                                 T2MODE2_bit         _BIT_ACCESS(T2HLT,2)
// T2HLT<T2MODE3>
extern volatile __bit                   T2MODE3             __at(0x7DF3);	// @ (0xFBE * 8 + 3)
#define                                 T2MODE3_bit         _BIT_ACCESS(T2HLT,3)
// T2HLT<T2MODE4>
extern volatile __bit                   T2MODE4             __at(0x7DF4);	// @ (0xFBE * 8 + 4)
#define                                 T2MODE4_bit         _BIT_ACCESS(T2HLT,4)
// T2CON<T2ON>
extern volatile __bit                   T2ON                __at(0x7DEF);	// @ (0xFBD * 8 + 7)
#define                                 T2ON_bit            _BIT_ACCESS(T2CON,7)
// T2CON<T2OUTPS0>
extern volatile __bit                   T2OUTPS0            __at(0x7DE8);	// @ (0xFBD * 8 + 0)
#define                                 T2OUTPS0_bit        _BIT_ACCESS(T2CON,0)
// T2CON<T2OUTPS1>
extern volatile __bit                   T2OUTPS1            __at(0x7DE9);	// @ (0xFBD * 8 + 1)
#define                                 T2OUTPS1_bit        _BIT_ACCESS(T2CON,1)
// T2CON<T2OUTPS2>
extern volatile __bit                   T2OUTPS2            __at(0x7DEA);	// @ (0xFBD * 8 + 2)
#define                                 T2OUTPS2_bit        _BIT_ACCESS(T2CON,2)
// T2CON<T2OUTPS3>
extern volatile __bit                   T2OUTPS3            __at(0x7DEB);	// @ (0xFBD * 8 + 3)
#define                                 T2OUTPS3_bit        _BIT_ACCESS(T2CON,3)
// T2HLT<T2PSYNC>
extern volatile __bit                   T2PSYNC             __at(0x7DF7);	// @ (0xFBE * 8 + 7)
#define                                 T2PSYNC_bit         _BIT_ACCESS(T2HLT,7)
// T2RST<T2RSEL0>
extern volatile __bit                   T2RSEL0             __at(0x7E00);	// @ (0xFC0 * 8 + 0)
#define                                 T2RSEL0_bit         _BIT_ACCESS(T2RST,0)
// T2RST<T2RSEL1>
extern volatile __bit                   T2RSEL1             __at(0x7E01);	// @ (0xFC0 * 8 + 1)
#define                                 T2RSEL1_bit         _BIT_ACCESS(T2RST,1)
// T2RST<T2RSEL2>
extern volatile __bit                   T2RSEL2             __at(0x7E02);	// @ (0xFC0 * 8 + 2)
#define                                 T2RSEL2_bit         _BIT_ACCESS(T2RST,2)
// T2RST<T2RSEL3>
extern volatile __bit                   T2RSEL3             __at(0x7E03);	// @ (0xFC0 * 8 + 3)
#define                                 T2RSEL3_bit         _BIT_ACCESS(T2RST,3)
// T3CKIPPS<T3CKIPPS0>
extern volatile __bit                   T3CKIPPS0           __at(0x7538);	// @ (0xEA7 * 8 + 0)
#define                                 T3CKIPPS0_bit       _BIT_ACCESS(T3CKIPPS,0)
// T3CKIPPS<T3CKIPPS1>
extern volatile __bit                   T3CKIPPS1           __at(0x7539);	// @ (0xEA7 * 8 + 1)
#define                                 T3CKIPPS1_bit       _BIT_ACCESS(T3CKIPPS,1)
// T3CKIPPS<T3CKIPPS2>
extern volatile __bit                   T3CKIPPS2           __at(0x753A);	// @ (0xEA7 * 8 + 2)
#define                                 T3CKIPPS2_bit       _BIT_ACCESS(T3CKIPPS,2)
// T3CKIPPS<T3CKIPPS3>
extern volatile __bit                   T3CKIPPS3           __at(0x753B);	// @ (0xEA7 * 8 + 3)
#define                                 T3CKIPPS3_bit       _BIT_ACCESS(T3CKIPPS,3)
// T3CKIPPS<T3CKIPPS4>
extern volatile __bit                   T3CKIPPS4           __at(0x753C);	// @ (0xEA7 * 8 + 4)
#define                                 T3CKIPPS4_bit       _BIT_ACCESS(T3CKIPPS,4)
// T3CON<T3CKPS0>
extern volatile __bit                   T3CKPS0             __at(0x7E4C);	// @ (0xFC9 * 8 + 4)
#define                                 T3CKPS0_bit         _BIT_ACCESS(T3CON,4)
// T3CON<T3CKPS1>
extern volatile __bit                   T3CKPS1             __at(0x7E4D);	// @ (0xFC9 * 8 + 5)
#define                                 T3CKPS1_bit         _BIT_ACCESS(T3CON,5)
// T3CLK<T3CS0>
extern volatile __bit                   T3CS0               __at(0x7E60);	// @ (0xFCC * 8 + 0)
#define                                 T3CS0_bit           _BIT_ACCESS(T3CLK,0)
// T3CLK<T3CS1>
extern volatile __bit                   T3CS1               __at(0x7E61);	// @ (0xFCC * 8 + 1)
#define                                 T3CS1_bit           _BIT_ACCESS(T3CLK,1)
// T3CLK<T3CS2>
extern volatile __bit                   T3CS2               __at(0x7E62);	// @ (0xFCC * 8 + 2)
#define                                 T3CS2_bit           _BIT_ACCESS(T3CLK,2)
// T3CLK<T3CS3>
extern volatile __bit                   T3CS3               __at(0x7E63);	// @ (0xFCC * 8 + 3)
#define                                 T3CS3_bit           _BIT_ACCESS(T3CLK,3)
// T3GCON<T3GE>
extern volatile __bit                   T3GE                __at(0x7E57);	// @ (0xFCA * 8 + 7)
#define                                 T3GE_bit            _BIT_ACCESS(T3GCON,7)
// T3GCON<T3GGO>
extern volatile __bit                   T3GGO               __at(0x7E53);	// @ (0xFCA * 8 + 3)
#define                                 T3GGO_bit           _BIT_ACCESS(T3GCON,3)
// T3GCON<T3GGO_NOT_DONE>
extern volatile __bit                   T3GGO_NOT_DONE      __at(0x7E53);	// @ (0xFCA * 8 + 3)
#define                                 T3GGO_NOT_DONE_bit  _BIT_ACCESS(T3GCON,3)
// T3GCON<T3GGO_nDONE>
extern volatile __bit                   T3GGO_nDONE         __at(0x7E53);	// @ (0xFCA * 8 + 3)
#define                                 T3GGO_nDONE_bit     _BIT_ACCESS(T3GCON,3)
// T3GCON<T3GPOL>
extern volatile __bit                   T3GPOL              __at(0x7E56);	// @ (0xFCA * 8 + 6)
#define                                 T3GPOL_bit          _BIT_ACCESS(T3GCON,6)
// T3GPPS<T3GPPS0>
extern volatile __bit                   T3GPPS0             __at(0x7540);	// @ (0xEA8 * 8 + 0)
#define                                 T3GPPS0_bit         _BIT_ACCESS(T3GPPS,0)
// T3GPPS<T3GPPS1>
extern volatile __bit                   T3GPPS1             __at(0x7541);	// @ (0xEA8 * 8 + 1)
#define                                 T3GPPS1_bit         _BIT_ACCESS(T3GPPS,1)
// T3GPPS<T3GPPS2>
extern volatile __bit                   T3GPPS2             __at(0x7542);	// @ (0xEA8 * 8 + 2)
#define                                 T3GPPS2_bit         _BIT_ACCESS(T3GPPS,2)
// T3GPPS<T3GPPS3>
extern volatile __bit                   T3GPPS3             __at(0x7543);	// @ (0xEA8 * 8 + 3)
#define                                 T3GPPS3_bit         _BIT_ACCESS(T3GPPS,3)
// T3GPPS<T3GPPS4>
extern volatile __bit                   T3GPPS4             __at(0x7544);	// @ (0xEA8 * 8 + 4)
#define                                 T3GPPS4_bit         _BIT_ACCESS(T3GPPS,4)
// T3GCON<T3GSPM>
extern volatile __bit                   T3GSPM              __at(0x7E54);	// @ (0xFCA * 8 + 4)
#define                                 T3GSPM_bit          _BIT_ACCESS(T3GCON,4)
// T3GATE<T3GSS0>
extern volatile __bit                   T3GSS0              __at(0x7E58);	// @ (0xFCB * 8 + 0)
#define                                 T3GSS0_bit          _BIT_ACCESS(T3GATE,0)
// T3GATE<T3GSS1>
extern volatile __bit                   T3GSS1              __at(0x7E59);	// @ (0xFCB * 8 + 1)
#define                                 T3GSS1_bit          _BIT_ACCESS(T3GATE,1)
// T3GATE<T3GSS2>
extern volatile __bit                   T3GSS2              __at(0x7E5A);	// @ (0xFCB * 8 + 2)
#define                                 T3GSS2_bit          _BIT_ACCESS(T3GATE,2)
// T3GATE<T3GSS3>
extern volatile __bit                   T3GSS3              __at(0x7E5B);	// @ (0xFCB * 8 + 3)
#define                                 T3GSS3_bit          _BIT_ACCESS(T3GATE,3)
// T3GCON<T3GTM>
extern volatile __bit                   T3GTM               __at(0x7E55);	// @ (0xFCA * 8 + 5)
#define                                 T3GTM_bit           _BIT_ACCESS(T3GCON,5)
// T3GCON<T3GVAL>
extern volatile __bit                   T3GVAL              __at(0x7E52);	// @ (0xFCA * 8 + 2)
#define                                 T3GVAL_bit          _BIT_ACCESS(T3GCON,2)
// T3CON<T3RD16>
extern volatile __bit                   T3RD16              __at(0x7E49);	// @ (0xFC9 * 8 + 1)
#define                                 T3RD16_bit          _BIT_ACCESS(T3CON,1)
// T4HLT<T4CKPOL>
extern volatile __bit                   T4CKPOL             __at(0x7DC6);	// @ (0xFB8 * 8 + 6)
#define                                 T4CKPOL_bit         _BIT_ACCESS(T4HLT,6)
// T4CON<T4CKPS0>
extern volatile __bit                   T4CKPS0             __at(0x7DBC);	// @ (0xFB7 * 8 + 4)
#define                                 T4CKPS0_bit         _BIT_ACCESS(T4CON,4)
// T4CON<T4CKPS1>
extern volatile __bit                   T4CKPS1             __at(0x7DBD);	// @ (0xFB7 * 8 + 5)
#define                                 T4CKPS1_bit         _BIT_ACCESS(T4CON,5)
// T4CON<T4CKPS2>
extern volatile __bit                   T4CKPS2             __at(0x7DBE);	// @ (0xFB7 * 8 + 6)
#define                                 T4CKPS2_bit         _BIT_ACCESS(T4CON,6)
// T4HLT<T4CKSYNC>
extern volatile __bit                   T4CKSYNC            __at(0x7DC5);	// @ (0xFB8 * 8 + 5)
#define                                 T4CKSYNC_bit        _BIT_ACCESS(T4HLT,5)
// T4CLKCON<T4CS0>
extern volatile __bit                   T4CS0               __at(0x7DC8);	// @ (0xFB9 * 8 + 0)
#define                                 T4CS0_bit           _BIT_ACCESS(T4CLKCON,0)
// T4CLKCON<T4CS1>
extern volatile __bit                   T4CS1               __at(0x7DC9);	// @ (0xFB9 * 8 + 1)
#define                                 T4CS1_bit           _BIT_ACCESS(T4CLKCON,1)
// T4CLKCON<T4CS2>
extern volatile __bit                   T4CS2               __at(0x7DCA);	// @ (0xFB9 * 8 + 2)
#define                                 T4CS2_bit           _BIT_ACCESS(T4CLKCON,2)
// T4CLKCON<T4CS3>
extern volatile __bit                   T4CS3               __at(0x7DCB);	// @ (0xFB9 * 8 + 3)
#define                                 T4CS3_bit           _BIT_ACCESS(T4CLKCON,3)
// T4INPPS<T4INPPS0>
extern volatile __bit                   T4INPPS0            __at(0x7560);	// @ (0xEAC * 8 + 0)
#define                                 T4INPPS0_bit        _BIT_ACCESS(T4INPPS,0)
// T4INPPS<T4INPPS1>
extern volatile __bit                   T4INPPS1            __at(0x7561);	// @ (0xEAC * 8 + 1)
#define                                 T4INPPS1_bit        _BIT_ACCESS(T4INPPS,1)
// T4INPPS<T4INPPS2>
extern volatile __bit                   T4INPPS2            __at(0x7562);	// @ (0xEAC * 8 + 2)
#define                                 T4INPPS2_bit        _BIT_ACCESS(T4INPPS,2)
// T4INPPS<T4INPPS3>
extern volatile __bit                   T4INPPS3            __at(0x7563);	// @ (0xEAC * 8 + 3)
#define                                 T4INPPS3_bit        _BIT_ACCESS(T4INPPS,3)
// T4INPPS<T4INPPS4>
extern volatile __bit                   T4INPPS4            __at(0x7564);	// @ (0xEAC * 8 + 4)
#define                                 T4INPPS4_bit        _BIT_ACCESS(T4INPPS,4)
// T4HLT<T4MODE0>
extern volatile __bit                   T4MODE0             __at(0x7DC0);	// @ (0xFB8 * 8 + 0)
#define                                 T4MODE0_bit         _BIT_ACCESS(T4HLT,0)
// T4HLT<T4MODE1>
extern volatile __bit                   T4MODE1             __at(0x7DC1);	// @ (0xFB8 * 8 + 1)
#define                                 T4MODE1_bit         _BIT_ACCESS(T4HLT,1)
// T4HLT<T4MODE2>
extern volatile __bit                   T4MODE2             __at(0x7DC2);	// @ (0xFB8 * 8 + 2)
#define                                 T4MODE2_bit         _BIT_ACCESS(T4HLT,2)
// T4HLT<T4MODE3>
extern volatile __bit                   T4MODE3             __at(0x7DC3);	// @ (0xFB8 * 8 + 3)
#define                                 T4MODE3_bit         _BIT_ACCESS(T4HLT,3)
// T4HLT<T4MODE4>
extern volatile __bit                   T4MODE4             __at(0x7DC4);	// @ (0xFB8 * 8 + 4)
#define                                 T4MODE4_bit         _BIT_ACCESS(T4HLT,4)
// T4CON<T4ON>
extern volatile __bit                   T4ON                __at(0x7DBF);	// @ (0xFB7 * 8 + 7)
#define                                 T4ON_bit            _BIT_ACCESS(T4CON,7)
// T4CON<T4OUTPS0>
extern volatile __bit                   T4OUTPS0            __at(0x7DB8);	// @ (0xFB7 * 8 + 0)
#define                                 T4OUTPS0_bit        _BIT_ACCESS(T4CON,0)
// T4CON<T4OUTPS1>
extern volatile __bit                   T4OUTPS1            __at(0x7DB9);	// @ (0xFB7 * 8 + 1)
#define                                 T4OUTPS1_bit        _BIT_ACCESS(T4CON,1)
// T4CON<T4OUTPS2>
extern volatile __bit                   T4OUTPS2            __at(0x7DBA);	// @ (0xFB7 * 8 + 2)
#define                                 T4OUTPS2_bit        _BIT_ACCESS(T4CON,2)
// T4CON<T4OUTPS3>
extern volatile __bit                   T4OUTPS3            __at(0x7DBB);	// @ (0xFB7 * 8 + 3)
#define                                 T4OUTPS3_bit        _BIT_ACCESS(T4CON,3)
// T4HLT<T4PSYNC>
extern volatile __bit                   T4PSYNC             __at(0x7DC7);	// @ (0xFB8 * 8 + 7)
#define                                 T4PSYNC_bit         _BIT_ACCESS(T4HLT,7)
// T4RST<T4RSEL0>
extern volatile __bit                   T4RSEL0             __at(0x7DD0);	// @ (0xFBA * 8 + 0)
#define                                 T4RSEL0_bit         _BIT_ACCESS(T4RST,0)
// T4RST<T4RSEL1>
extern volatile __bit                   T4RSEL1             __at(0x7DD1);	// @ (0xFBA * 8 + 1)
#define                                 T4RSEL1_bit         _BIT_ACCESS(T4RST,1)
// T4RST<T4RSEL2>
extern volatile __bit                   T4RSEL2             __at(0x7DD2);	// @ (0xFBA * 8 + 2)
#define                                 T4RSEL2_bit         _BIT_ACCESS(T4RST,2)
// T4RST<T4RSEL3>
extern volatile __bit                   T4RSEL3             __at(0x7DD3);	// @ (0xFBA * 8 + 3)
#define                                 T4RSEL3_bit         _BIT_ACCESS(T4RST,3)
// T5CKIPPS<T5CKIPPS0>
extern volatile __bit                   T5CKIPPS0           __at(0x7548);	// @ (0xEA9 * 8 + 0)
#define                                 T5CKIPPS0_bit       _BIT_ACCESS(T5CKIPPS,0)
// T5CKIPPS<T5CKIPPS1>
extern volatile __bit                   T5CKIPPS1           __at(0x7549);	// @ (0xEA9 * 8 + 1)
#define                                 T5CKIPPS1_bit       _BIT_ACCESS(T5CKIPPS,1)
// T5CKIPPS<T5CKIPPS2>
extern volatile __bit                   T5CKIPPS2           __at(0x754A);	// @ (0xEA9 * 8 + 2)
#define                                 T5CKIPPS2_bit       _BIT_ACCESS(T5CKIPPS,2)
// T5CKIPPS<T5CKIPPS3>
extern volatile __bit                   T5CKIPPS3           __at(0x754B);	// @ (0xEA9 * 8 + 3)
#define                                 T5CKIPPS3_bit       _BIT_ACCESS(T5CKIPPS,3)
// T5CKIPPS<T5CKIPPS4>
extern volatile __bit                   T5CKIPPS4           __at(0x754C);	// @ (0xEA9 * 8 + 4)
#define                                 T5CKIPPS4_bit       _BIT_ACCESS(T5CKIPPS,4)
// T5CON<T5CKPS0>
extern volatile __bit                   T5CKPS0             __at(0x7E1C);	// @ (0xFC3 * 8 + 4)
#define                                 T5CKPS0_bit         _BIT_ACCESS(T5CON,4)
// T5CON<T5CKPS1>
extern volatile __bit                   T5CKPS1             __at(0x7E1D);	// @ (0xFC3 * 8 + 5)
#define                                 T5CKPS1_bit         _BIT_ACCESS(T5CON,5)
// T5CLK<T5CS0>
extern volatile __bit                   T5CS0               __at(0x7E30);	// @ (0xFC6 * 8 + 0)
#define                                 T5CS0_bit           _BIT_ACCESS(T5CLK,0)
// T5CLK<T5CS1>
extern volatile __bit                   T5CS1               __at(0x7E31);	// @ (0xFC6 * 8 + 1)
#define                                 T5CS1_bit           _BIT_ACCESS(T5CLK,1)
// T5CLK<T5CS2>
extern volatile __bit                   T5CS2               __at(0x7E32);	// @ (0xFC6 * 8 + 2)
#define                                 T5CS2_bit           _BIT_ACCESS(T5CLK,2)
// T5CLK<T5CS3>
extern volatile __bit                   T5CS3               __at(0x7E33);	// @ (0xFC6 * 8 + 3)
#define                                 T5CS3_bit           _BIT_ACCESS(T5CLK,3)
// T5GCON<T5GE>
extern volatile __bit                   T5GE                __at(0x7E27);	// @ (0xFC4 * 8 + 7)
#define                                 T5GE_bit            _BIT_ACCESS(T5GCON,7)
// T5GCON<T5GGO>
extern volatile __bit                   T5GGO               __at(0x7E23);	// @ (0xFC4 * 8 + 3)
#define                                 T5GGO_bit           _BIT_ACCESS(T5GCON,3)
// T5GCON<T5GGO_NOT_DONE>
extern volatile __bit                   T5GGO_NOT_DONE      __at(0x7E23);	// @ (0xFC4 * 8 + 3)
#define                                 T5GGO_NOT_DONE_bit  _BIT_ACCESS(T5GCON,3)
// T5GCON<T5GGO_nDONE>
extern volatile __bit                   T5GGO_nDONE         __at(0x7E23);	// @ (0xFC4 * 8 + 3)
#define                                 T5GGO_nDONE_bit     _BIT_ACCESS(T5GCON,3)
// T5GCON<T5GPOL>
extern volatile __bit                   T5GPOL              __at(0x7E26);	// @ (0xFC4 * 8 + 6)
#define                                 T5GPOL_bit          _BIT_ACCESS(T5GCON,6)
// T5GPPS<T5GPPS0>
extern volatile __bit                   T5GPPS0             __at(0x7550);	// @ (0xEAA * 8 + 0)
#define                                 T5GPPS0_bit         _BIT_ACCESS(T5GPPS,0)
// T5GPPS<T5GPPS1>
extern volatile __bit                   T5GPPS1             __at(0x7551);	// @ (0xEAA * 8 + 1)
#define                                 T5GPPS1_bit         _BIT_ACCESS(T5GPPS,1)
// T5GPPS<T5GPPS2>
extern volatile __bit                   T5GPPS2             __at(0x7552);	// @ (0xEAA * 8 + 2)
#define                                 T5GPPS2_bit         _BIT_ACCESS(T5GPPS,2)
// T5GPPS<T5GPPS3>
extern volatile __bit                   T5GPPS3             __at(0x7553);	// @ (0xEAA * 8 + 3)
#define                                 T5GPPS3_bit         _BIT_ACCESS(T5GPPS,3)
// T5GPPS<T5GPPS4>
extern volatile __bit                   T5GPPS4             __at(0x7554);	// @ (0xEAA * 8 + 4)
#define                                 T5GPPS4_bit         _BIT_ACCESS(T5GPPS,4)
// T5GCON<T5GSPM>
extern volatile __bit                   T5GSPM              __at(0x7E24);	// @ (0xFC4 * 8 + 4)
#define                                 T5GSPM_bit          _BIT_ACCESS(T5GCON,4)
// T5GATE<T5GSS0>
extern volatile __bit                   T5GSS0              __at(0x7E28);	// @ (0xFC5 * 8 + 0)
#define                                 T5GSS0_bit          _BIT_ACCESS(T5GATE,0)
// T5GATE<T5GSS1>
extern volatile __bit                   T5GSS1              __at(0x7E29);	// @ (0xFC5 * 8 + 1)
#define                                 T5GSS1_bit          _BIT_ACCESS(T5GATE,1)
// T5GATE<T5GSS2>
extern volatile __bit                   T5GSS2              __at(0x7E2A);	// @ (0xFC5 * 8 + 2)
#define                                 T5GSS2_bit          _BIT_ACCESS(T5GATE,2)
// T5GATE<T5GSS3>
extern volatile __bit                   T5GSS3              __at(0x7E2B);	// @ (0xFC5 * 8 + 3)
#define                                 T5GSS3_bit          _BIT_ACCESS(T5GATE,3)
// T5GCON<T5GTM>
extern volatile __bit                   T5GTM               __at(0x7E25);	// @ (0xFC4 * 8 + 5)
#define                                 T5GTM_bit           _BIT_ACCESS(T5GCON,5)
// T5GCON<T5GVAL>
extern volatile __bit                   T5GVAL              __at(0x7E22);	// @ (0xFC4 * 8 + 2)
#define                                 T5GVAL_bit          _BIT_ACCESS(T5GCON,2)
// T5CON<T5RD16>
extern volatile __bit                   T5RD16              __at(0x7E19);	// @ (0xFC3 * 8 + 1)
#define                                 T5RD16_bit          _BIT_ACCESS(T5CON,1)
// T6HLT<T6CKPOL>
extern volatile __bit                   T6CKPOL             __at(0x7D96);	// @ (0xFB2 * 8 + 6)
#define                                 T6CKPOL_bit         _BIT_ACCESS(T6HLT,6)
// T6CON<T6CKPS0>
extern volatile __bit                   T6CKPS0             __at(0x7D8C);	// @ (0xFB1 * 8 + 4)
#define                                 T6CKPS0_bit         _BIT_ACCESS(T6CON,4)
// T6CON<T6CKPS1>
extern volatile __bit                   T6CKPS1             __at(0x7D8D);	// @ (0xFB1 * 8 + 5)
#define                                 T6CKPS1_bit         _BIT_ACCESS(T6CON,5)
// T6CON<T6CKPS2>
extern volatile __bit                   T6CKPS2             __at(0x7D8E);	// @ (0xFB1 * 8 + 6)
#define                                 T6CKPS2_bit         _BIT_ACCESS(T6CON,6)
// T6HLT<T6CKSYNC>
extern volatile __bit                   T6CKSYNC            __at(0x7D95);	// @ (0xFB2 * 8 + 5)
#define                                 T6CKSYNC_bit        _BIT_ACCESS(T6HLT,5)
// T6CLKCON<T6CS0>
extern volatile __bit                   T6CS0               __at(0x7D98);	// @ (0xFB3 * 8 + 0)
#define                                 T6CS0_bit           _BIT_ACCESS(T6CLKCON,0)
// T6CLKCON<T6CS1>
extern volatile __bit                   T6CS1               __at(0x7D99);	// @ (0xFB3 * 8 + 1)
#define                                 T6CS1_bit           _BIT_ACCESS(T6CLKCON,1)
// T6CLKCON<T6CS2>
extern volatile __bit                   T6CS2               __at(0x7D9A);	// @ (0xFB3 * 8 + 2)
#define                                 T6CS2_bit           _BIT_ACCESS(T6CLKCON,2)
// T6CLKCON<T6CS3>
extern volatile __bit                   T6CS3               __at(0x7D9B);	// @ (0xFB3 * 8 + 3)
#define                                 T6CS3_bit           _BIT_ACCESS(T6CLKCON,3)
// T6INPPS<T6INPPS0>
extern volatile __bit                   T6INPPS0            __at(0x7568);	// @ (0xEAD * 8 + 0)
#define                                 T6INPPS0_bit        _BIT_ACCESS(T6INPPS,0)
// T6INPPS<T6INPPS1>
extern volatile __bit                   T6INPPS1            __at(0x7569);	// @ (0xEAD * 8 + 1)
#define                                 T6INPPS1_bit        _BIT_ACCESS(T6INPPS,1)
// T6INPPS<T6INPPS2>
extern volatile __bit                   T6INPPS2            __at(0x756A);	// @ (0xEAD * 8 + 2)
#define                                 T6INPPS2_bit        _BIT_ACCESS(T6INPPS,2)
// T6INPPS<T6INPPS3>
extern volatile __bit                   T6INPPS3            __at(0x756B);	// @ (0xEAD * 8 + 3)
#define                                 T6INPPS3_bit        _BIT_ACCESS(T6INPPS,3)
// T6INPPS<T6INPPS4>
extern volatile __bit                   T6INPPS4            __at(0x756C);	// @ (0xEAD * 8 + 4)
#define                                 T6INPPS4_bit        _BIT_ACCESS(T6INPPS,4)
// T6HLT<T6MODE0>
extern volatile __bit                   T6MODE0             __at(0x7D90);	// @ (0xFB2 * 8 + 0)
#define                                 T6MODE0_bit         _BIT_ACCESS(T6HLT,0)
// T6HLT<T6MODE1>
extern volatile __bit                   T6MODE1             __at(0x7D91);	// @ (0xFB2 * 8 + 1)
#define                                 T6MODE1_bit         _BIT_ACCESS(T6HLT,1)
// T6HLT<T6MODE2>
extern volatile __bit                   T6MODE2             __at(0x7D92);	// @ (0xFB2 * 8 + 2)
#define                                 T6MODE2_bit         _BIT_ACCESS(T6HLT,2)
// T6HLT<T6MODE3>
extern volatile __bit                   T6MODE3             __at(0x7D93);	// @ (0xFB2 * 8 + 3)
#define                                 T6MODE3_bit         _BIT_ACCESS(T6HLT,3)
// T6HLT<T6MODE4>
extern volatile __bit                   T6MODE4             __at(0x7D94);	// @ (0xFB2 * 8 + 4)
#define                                 T6MODE4_bit         _BIT_ACCESS(T6HLT,4)
// T6CON<T6ON>
extern volatile __bit                   T6ON                __at(0x7D8F);	// @ (0xFB1 * 8 + 7)
#define                                 T6ON_bit            _BIT_ACCESS(T6CON,7)
// T6CON<T6OUTPS0>
extern volatile __bit                   T6OUTPS0            __at(0x7D88);	// @ (0xFB1 * 8 + 0)
#define                                 T6OUTPS0_bit        _BIT_ACCESS(T6CON,0)
// T6CON<T6OUTPS1>
extern volatile __bit                   T6OUTPS1            __at(0x7D89);	// @ (0xFB1 * 8 + 1)
#define                                 T6OUTPS1_bit        _BIT_ACCESS(T6CON,1)
// T6CON<T6OUTPS2>
extern volatile __bit                   T6OUTPS2            __at(0x7D8A);	// @ (0xFB1 * 8 + 2)
#define                                 T6OUTPS2_bit        _BIT_ACCESS(T6CON,2)
// T6CON<T6OUTPS3>
extern volatile __bit                   T6OUTPS3            __at(0x7D8B);	// @ (0xFB1 * 8 + 3)
#define                                 T6OUTPS3_bit        _BIT_ACCESS(T6CON,3)
// T6HLT<T6PSYNC>
extern volatile __bit                   T6PSYNC             __at(0x7D97);	// @ (0xFB2 * 8 + 7)
#define                                 T6PSYNC_bit         _BIT_ACCESS(T6HLT,7)
// T6RST<T6RSEL0>
extern volatile __bit                   T6RSEL0             __at(0x7DA0);	// @ (0xFB4 * 8 + 0)
#define                                 T6RSEL0_bit         _BIT_ACCESS(T6RST,0)
// T6RST<T6RSEL1>
extern volatile __bit                   T6RSEL1             __at(0x7DA1);	// @ (0xFB4 * 8 + 1)
#define                                 T6RSEL1_bit         _BIT_ACCESS(T6RST,1)
// T6RST<T6RSEL2>
extern volatile __bit                   T6RSEL2             __at(0x7DA2);	// @ (0xFB4 * 8 + 2)
#define                                 T6RSEL2_bit         _BIT_ACCESS(T6RST,2)
// T6RST<T6RSEL3>
extern volatile __bit                   T6RSEL3             __at(0x7DA3);	// @ (0xFB4 * 8 + 3)
#define                                 T6RSEL3_bit         _BIT_ACCESS(T6RST,3)
// TMR0H<TMR0H0>
extern volatile __bit                   TMR0H0              __at(0x7EA0);	// @ (0xFD4 * 8 + 0)
#define                                 TMR0H0_bit          _BIT_ACCESS(TMR0H,0)
// TMR0H<TMR0H1>
extern volatile __bit                   TMR0H1              __at(0x7EA1);	// @ (0xFD4 * 8 + 1)
#define                                 TMR0H1_bit          _BIT_ACCESS(TMR0H,1)
// TMR0H<TMR0H2>
extern volatile __bit                   TMR0H2              __at(0x7EA2);	// @ (0xFD4 * 8 + 2)
#define                                 TMR0H2_bit          _BIT_ACCESS(TMR0H,2)
// TMR0H<TMR0H3>
extern volatile __bit                   TMR0H3              __at(0x7EA3);	// @ (0xFD4 * 8 + 3)
#define                                 TMR0H3_bit          _BIT_ACCESS(TMR0H,3)
// TMR0H<TMR0H4>
extern volatile __bit                   TMR0H4              __at(0x7EA4);	// @ (0xFD4 * 8 + 4)
#define                                 TMR0H4_bit          _BIT_ACCESS(TMR0H,4)
// TMR0H<TMR0H5>
extern volatile __bit                   TMR0H5              __at(0x7EA5);	// @ (0xFD4 * 8 + 5)
#define                                 TMR0H5_bit          _BIT_ACCESS(TMR0H,5)
// TMR0H<TMR0H6>
extern volatile __bit                   TMR0H6              __at(0x7EA6);	// @ (0xFD4 * 8 + 6)
#define                                 TMR0H6_bit          _BIT_ACCESS(TMR0H,6)
// TMR0H<TMR0H7>
extern volatile __bit                   TMR0H7              __at(0x7EA7);	// @ (0xFD4 * 8 + 7)
#define                                 TMR0H7_bit          _BIT_ACCESS(TMR0H,7)
// PIE0<TMR0IE>
extern volatile __bit                   TMR0IE              __at(0x7615);	// @ (0xEC2 * 8 + 5)
#define                                 TMR0IE_bit          _BIT_ACCESS(PIE0,5)
// PIR0<TMR0IF>
extern volatile __bit                   TMR0IF              __at(0x7655);	// @ (0xECA * 8 + 5)
#define                                 TMR0IF_bit          _BIT_ACCESS(PIR0,5)
// IPR0<TMR0IP>
extern volatile __bit                   TMR0IP              __at(0x75D5);	// @ (0xEBA * 8 + 5)
#define                                 TMR0IP_bit          _BIT_ACCESS(IPR0,5)
// TMR0L<TMR0L0>
extern volatile __bit                   TMR0L0              __at(0x7E98);	// @ (0xFD3 * 8 + 0)
#define                                 TMR0L0_bit          _BIT_ACCESS(TMR0L,0)
// TMR0L<TMR0L1>
extern volatile __bit                   TMR0L1              __at(0x7E99);	// @ (0xFD3 * 8 + 1)
#define                                 TMR0L1_bit          _BIT_ACCESS(TMR0L,1)
// TMR0L<TMR0L2>
extern volatile __bit                   TMR0L2              __at(0x7E9A);	// @ (0xFD3 * 8 + 2)
#define                                 TMR0L2_bit          _BIT_ACCESS(TMR0L,2)
// TMR0L<TMR0L3>
extern volatile __bit                   TMR0L3              __at(0x7E9B);	// @ (0xFD3 * 8 + 3)
#define                                 TMR0L3_bit          _BIT_ACCESS(TMR0L,3)
// TMR0L<TMR0L4>
extern volatile __bit                   TMR0L4              __at(0x7E9C);	// @ (0xFD3 * 8 + 4)
#define                                 TMR0L4_bit          _BIT_ACCESS(TMR0L,4)
// TMR0L<TMR0L5>
extern volatile __bit                   TMR0L5              __at(0x7E9D);	// @ (0xFD3 * 8 + 5)
#define                                 TMR0L5_bit          _BIT_ACCESS(TMR0L,5)
// TMR0L<TMR0L6>
extern volatile __bit                   TMR0L6              __at(0x7E9E);	// @ (0xFD3 * 8 + 6)
#define                                 TMR0L6_bit          _BIT_ACCESS(TMR0L,6)
// TMR0L<TMR0L7>
extern volatile __bit                   TMR0L7              __at(0x7E9F);	// @ (0xFD3 * 8 + 7)
#define                                 TMR0L7_bit          _BIT_ACCESS(TMR0L,7)
// PMD1<TMR0MD>
extern volatile __bit                   TMR0MD              __at(0x7710);	// @ (0xEE2 * 8 + 0)
#define                                 TMR0MD_bit          _BIT_ACCESS(PMD1,0)
// TMR1L<TMR10>
extern volatile __bit                   TMR10               __at(0x7E68);	// @ (0xFCD * 8 + 0)
#define                                 TMR10_bit           _BIT_ACCESS(TMR1L,0)
// TMR1L<TMR11>
extern volatile __bit                   TMR11               __at(0x7E69);	// @ (0xFCD * 8 + 1)
#define                                 TMR11_bit           _BIT_ACCESS(TMR1L,1)
// TMR1H<TMR110>
extern volatile __bit                   TMR110              __at(0x7E72);	// @ (0xFCE * 8 + 2)
#define                                 TMR110_bit          _BIT_ACCESS(TMR1H,2)
// TMR1H<TMR111>
extern volatile __bit                   TMR111              __at(0x7E73);	// @ (0xFCE * 8 + 3)
#define                                 TMR111_bit          _BIT_ACCESS(TMR1H,3)
// TMR1H<TMR112>
extern volatile __bit                   TMR112              __at(0x7E74);	// @ (0xFCE * 8 + 4)
#define                                 TMR112_bit          _BIT_ACCESS(TMR1H,4)
// TMR1H<TMR113>
extern volatile __bit                   TMR113              __at(0x7E75);	// @ (0xFCE * 8 + 5)
#define                                 TMR113_bit          _BIT_ACCESS(TMR1H,5)
// TMR1H<TMR114>
extern volatile __bit                   TMR114              __at(0x7E76);	// @ (0xFCE * 8 + 6)
#define                                 TMR114_bit          _BIT_ACCESS(TMR1H,6)
// TMR1H<TMR115>
extern volatile __bit                   TMR115              __at(0x7E77);	// @ (0xFCE * 8 + 7)
#define                                 TMR115_bit          _BIT_ACCESS(TMR1H,7)
// TMR1L<TMR12>
extern volatile __bit                   TMR12               __at(0x7E6A);	// @ (0xFCD * 8 + 2)
#define                                 TMR12_bit           _BIT_ACCESS(TMR1L,2)
// TMR1L<TMR13>
extern volatile __bit                   TMR13               __at(0x7E6B);	// @ (0xFCD * 8 + 3)
#define                                 TMR13_bit           _BIT_ACCESS(TMR1L,3)
// TMR1L<TMR14>
extern volatile __bit                   TMR14               __at(0x7E6C);	// @ (0xFCD * 8 + 4)
#define                                 TMR14_bit           _BIT_ACCESS(TMR1L,4)
// TMR1L<TMR15>
extern volatile __bit                   TMR15               __at(0x7E6D);	// @ (0xFCD * 8 + 5)
#define                                 TMR15_bit           _BIT_ACCESS(TMR1L,5)
// TMR1L<TMR16>
extern volatile __bit                   TMR16               __at(0x7E6E);	// @ (0xFCD * 8 + 6)
#define                                 TMR16_bit           _BIT_ACCESS(TMR1L,6)
// TMR1L<TMR17>
extern volatile __bit                   TMR17               __at(0x7E6F);	// @ (0xFCD * 8 + 7)
#define                                 TMR17_bit           _BIT_ACCESS(TMR1L,7)
// TMR1H<TMR18>
extern volatile __bit                   TMR18               __at(0x7E70);	// @ (0xFCE * 8 + 0)
#define                                 TMR18_bit           _BIT_ACCESS(TMR1H,0)
// TMR1H<TMR19>
extern volatile __bit                   TMR19               __at(0x7E71);	// @ (0xFCE * 8 + 1)
#define                                 TMR19_bit           _BIT_ACCESS(TMR1H,1)
// PIE5<TMR1GIE>
extern volatile __bit                   TMR1GIE             __at(0x7638);	// @ (0xEC7 * 8 + 0)
#define                                 TMR1GIE_bit         _BIT_ACCESS(PIE5,0)
// PIR5<TMR1GIF>
extern volatile __bit                   TMR1GIF             __at(0x7678);	// @ (0xECF * 8 + 0)
#define                                 TMR1GIF_bit         _BIT_ACCESS(PIR5,0)
// IPR5<TMR1GIP>
extern volatile __bit                   TMR1GIP             __at(0x75F8);	// @ (0xEBF * 8 + 0)
#define                                 TMR1GIP_bit         _BIT_ACCESS(IPR5,0)
// TMR1H<TMR1H0>
extern volatile __bit                   TMR1H0              __at(0x7E70);	// @ (0xFCE * 8 + 0)
#define                                 TMR1H0_bit          _BIT_ACCESS(TMR1H,0)
// TMR1H<TMR1H1>
extern volatile __bit                   TMR1H1              __at(0x7E71);	// @ (0xFCE * 8 + 1)
#define                                 TMR1H1_bit          _BIT_ACCESS(TMR1H,1)
// TMR1H<TMR1H2>
extern volatile __bit                   TMR1H2              __at(0x7E72);	// @ (0xFCE * 8 + 2)
#define                                 TMR1H2_bit          _BIT_ACCESS(TMR1H,2)
// TMR1H<TMR1H3>
extern volatile __bit                   TMR1H3              __at(0x7E73);	// @ (0xFCE * 8 + 3)
#define                                 TMR1H3_bit          _BIT_ACCESS(TMR1H,3)
// TMR1H<TMR1H4>
extern volatile __bit                   TMR1H4              __at(0x7E74);	// @ (0xFCE * 8 + 4)
#define                                 TMR1H4_bit          _BIT_ACCESS(TMR1H,4)
// TMR1H<TMR1H5>
extern volatile __bit                   TMR1H5              __at(0x7E75);	// @ (0xFCE * 8 + 5)
#define                                 TMR1H5_bit          _BIT_ACCESS(TMR1H,5)
// TMR1H<TMR1H6>
extern volatile __bit                   TMR1H6              __at(0x7E76);	// @ (0xFCE * 8 + 6)
#define                                 TMR1H6_bit          _BIT_ACCESS(TMR1H,6)
// TMR1H<TMR1H7>
extern volatile __bit                   TMR1H7              __at(0x7E77);	// @ (0xFCE * 8 + 7)
#define                                 TMR1H7_bit          _BIT_ACCESS(TMR1H,7)
// PIE4<TMR1IE>
extern volatile __bit                   TMR1IE              __at(0x7630);	// @ (0xEC6 * 8 + 0)
#define                                 TMR1IE_bit          _BIT_ACCESS(PIE4,0)
// PIR4<TMR1IF>
extern volatile __bit                   TMR1IF              __at(0x7670);	// @ (0xECE * 8 + 0)
#define                                 TMR1IF_bit          _BIT_ACCESS(PIR4,0)
// IPR4<TMR1IP>
extern volatile __bit                   TMR1IP              __at(0x75F0);	// @ (0xEBE * 8 + 0)
#define                                 TMR1IP_bit          _BIT_ACCESS(IPR4,0)
// TMR1L<TMR1L0>
extern volatile __bit                   TMR1L0              __at(0x7E68);	// @ (0xFCD * 8 + 0)
#define                                 TMR1L0_bit          _BIT_ACCESS(TMR1L,0)
// TMR1L<TMR1L1>
extern volatile __bit                   TMR1L1              __at(0x7E69);	// @ (0xFCD * 8 + 1)
#define                                 TMR1L1_bit          _BIT_ACCESS(TMR1L,1)
// TMR1L<TMR1L2>
extern volatile __bit                   TMR1L2              __at(0x7E6A);	// @ (0xFCD * 8 + 2)
#define                                 TMR1L2_bit          _BIT_ACCESS(TMR1L,2)
// TMR1L<TMR1L3>
extern volatile __bit                   TMR1L3              __at(0x7E6B);	// @ (0xFCD * 8 + 3)
#define                                 TMR1L3_bit          _BIT_ACCESS(TMR1L,3)
// TMR1L<TMR1L4>
extern volatile __bit                   TMR1L4              __at(0x7E6C);	// @ (0xFCD * 8 + 4)
#define                                 TMR1L4_bit          _BIT_ACCESS(TMR1L,4)
// TMR1L<TMR1L5>
extern volatile __bit                   TMR1L5              __at(0x7E6D);	// @ (0xFCD * 8 + 5)
#define                                 TMR1L5_bit          _BIT_ACCESS(TMR1L,5)
// TMR1L<TMR1L6>
extern volatile __bit                   TMR1L6              __at(0x7E6E);	// @ (0xFCD * 8 + 6)
#define                                 TMR1L6_bit          _BIT_ACCESS(TMR1L,6)
// TMR1L<TMR1L7>
extern volatile __bit                   TMR1L7              __at(0x7E6F);	// @ (0xFCD * 8 + 7)
#define                                 TMR1L7_bit          _BIT_ACCESS(TMR1L,7)
// PMD1<TMR1MD>
extern volatile __bit                   TMR1MD              __at(0x7711);	// @ (0xEE2 * 8 + 1)
#define                                 TMR1MD_bit          _BIT_ACCESS(PMD1,1)
// T1CON<TMR1ON>
extern volatile __bit                   TMR1ON              __at(0x7E78);	// @ (0xFCF * 8 + 0)
#define                                 TMR1ON_bit          _BIT_ACCESS(T1CON,0)
// PIE4<TMR2IE>
extern volatile __bit                   TMR2IE              __at(0x7631);	// @ (0xEC6 * 8 + 1)
#define                                 TMR2IE_bit          _BIT_ACCESS(PIE4,1)
// PIR4<TMR2IF>
extern volatile __bit                   TMR2IF              __at(0x7671);	// @ (0xECE * 8 + 1)
#define                                 TMR2IF_bit          _BIT_ACCESS(PIR4,1)
// IPR4<TMR2IP>
extern volatile __bit                   TMR2IP              __at(0x75F1);	// @ (0xEBE * 8 + 1)
#define                                 TMR2IP_bit          _BIT_ACCESS(IPR4,1)
// PMD1<TMR2MD>
extern volatile __bit                   TMR2MD              __at(0x7712);	// @ (0xEE2 * 8 + 2)
#define                                 TMR2MD_bit          _BIT_ACCESS(PMD1,2)
// T2CON<TMR2ON>
extern volatile __bit                   TMR2ON              __at(0x7DEF);	// @ (0xFBD * 8 + 7)
#define                                 TMR2ON_bit          _BIT_ACCESS(T2CON,7)
// TMR3L<TMR30>
extern volatile __bit                   TMR30               __at(0x7E38);	// @ (0xFC7 * 8 + 0)
#define                                 TMR30_bit           _BIT_ACCESS(TMR3L,0)
// TMR3L<TMR31>
extern volatile __bit                   TMR31               __at(0x7E39);	// @ (0xFC7 * 8 + 1)
#define                                 TMR31_bit           _BIT_ACCESS(TMR3L,1)
// TMR3H<TMR310>
extern volatile __bit                   TMR310              __at(0x7E42);	// @ (0xFC8 * 8 + 2)
#define                                 TMR310_bit          _BIT_ACCESS(TMR3H,2)
// TMR3H<TMR311>
extern volatile __bit                   TMR311              __at(0x7E43);	// @ (0xFC8 * 8 + 3)
#define                                 TMR311_bit          _BIT_ACCESS(TMR3H,3)
// TMR3H<TMR312>
extern volatile __bit                   TMR312              __at(0x7E44);	// @ (0xFC8 * 8 + 4)
#define                                 TMR312_bit          _BIT_ACCESS(TMR3H,4)
// TMR3H<TMR313>
extern volatile __bit                   TMR313              __at(0x7E45);	// @ (0xFC8 * 8 + 5)
#define                                 TMR313_bit          _BIT_ACCESS(TMR3H,5)
// TMR3H<TMR314>
extern volatile __bit                   TMR314              __at(0x7E46);	// @ (0xFC8 * 8 + 6)
#define                                 TMR314_bit          _BIT_ACCESS(TMR3H,6)
// TMR3H<TMR315>
extern volatile __bit                   TMR315              __at(0x7E47);	// @ (0xFC8 * 8 + 7)
#define                                 TMR315_bit          _BIT_ACCESS(TMR3H,7)
// TMR3L<TMR32>
extern volatile __bit                   TMR32               __at(0x7E3A);	// @ (0xFC7 * 8 + 2)
#define                                 TMR32_bit           _BIT_ACCESS(TMR3L,2)
// TMR3L<TMR33>
extern volatile __bit                   TMR33               __at(0x7E3B);	// @ (0xFC7 * 8 + 3)
#define                                 TMR33_bit           _BIT_ACCESS(TMR3L,3)
// TMR3L<TMR34>
extern volatile __bit                   TMR34               __at(0x7E3C);	// @ (0xFC7 * 8 + 4)
#define                                 TMR34_bit           _BIT_ACCESS(TMR3L,4)
// TMR3L<TMR35>
extern volatile __bit                   TMR35               __at(0x7E3D);	// @ (0xFC7 * 8 + 5)
#define                                 TMR35_bit           _BIT_ACCESS(TMR3L,5)
// TMR3L<TMR36>
extern volatile __bit                   TMR36               __at(0x7E3E);	// @ (0xFC7 * 8 + 6)
#define                                 TMR36_bit           _BIT_ACCESS(TMR3L,6)
// TMR3L<TMR37>
extern volatile __bit                   TMR37               __at(0x7E3F);	// @ (0xFC7 * 8 + 7)
#define                                 TMR37_bit           _BIT_ACCESS(TMR3L,7)
// TMR3H<TMR38>
extern volatile __bit                   TMR38               __at(0x7E40);	// @ (0xFC8 * 8 + 0)
#define                                 TMR38_bit           _BIT_ACCESS(TMR3H,0)
// TMR3H<TMR39>
extern volatile __bit                   TMR39               __at(0x7E41);	// @ (0xFC8 * 8 + 1)
#define                                 TMR39_bit           _BIT_ACCESS(TMR3H,1)
// PIE5<TMR3GIE>
extern volatile __bit                   TMR3GIE             __at(0x7639);	// @ (0xEC7 * 8 + 1)
#define                                 TMR3GIE_bit         _BIT_ACCESS(PIE5,1)
// PIR5<TMR3GIF>
extern volatile __bit                   TMR3GIF             __at(0x7679);	// @ (0xECF * 8 + 1)
#define                                 TMR3GIF_bit         _BIT_ACCESS(PIR5,1)
// IPR5<TMR3GIP>
extern volatile __bit                   TMR3GIP             __at(0x75F9);	// @ (0xEBF * 8 + 1)
#define                                 TMR3GIP_bit         _BIT_ACCESS(IPR5,1)
// TMR3H<TMR3H0>
extern volatile __bit                   TMR3H0              __at(0x7E40);	// @ (0xFC8 * 8 + 0)
#define                                 TMR3H0_bit          _BIT_ACCESS(TMR3H,0)
// TMR3H<TMR3H1>
extern volatile __bit                   TMR3H1              __at(0x7E41);	// @ (0xFC8 * 8 + 1)
#define                                 TMR3H1_bit          _BIT_ACCESS(TMR3H,1)
// TMR3H<TMR3H2>
extern volatile __bit                   TMR3H2              __at(0x7E42);	// @ (0xFC8 * 8 + 2)
#define                                 TMR3H2_bit          _BIT_ACCESS(TMR3H,2)
// TMR3H<TMR3H3>
extern volatile __bit                   TMR3H3              __at(0x7E43);	// @ (0xFC8 * 8 + 3)
#define                                 TMR3H3_bit          _BIT_ACCESS(TMR3H,3)
// TMR3H<TMR3H4>
extern volatile __bit                   TMR3H4              __at(0x7E44);	// @ (0xFC8 * 8 + 4)
#define                                 TMR3H4_bit          _BIT_ACCESS(TMR3H,4)
// TMR3H<TMR3H5>
extern volatile __bit                   TMR3H5              __at(0x7E45);	// @ (0xFC8 * 8 + 5)
#define                                 TMR3H5_bit          _BIT_ACCESS(TMR3H,5)
// TMR3H<TMR3H6>
extern volatile __bit                   TMR3H6              __at(0x7E46);	// @ (0xFC8 * 8 + 6)
#define                                 TMR3H6_bit          _BIT_ACCESS(TMR3H,6)
// TMR3H<TMR3H7>
extern volatile __bit                   TMR3H7              __at(0x7E47);	// @ (0xFC8 * 8 + 7)
#define                                 TMR3H7_bit          _BIT_ACCESS(TMR3H,7)
// PIE4<TMR3IE>
extern volatile __bit                   TMR3IE              __at(0x7632);	// @ (0xEC6 * 8 + 2)
#define                                 TMR3IE_bit          _BIT_ACCESS(PIE4,2)
// PIR4<TMR3IF>
extern volatile __bit                   TMR3IF              __at(0x7672);	// @ (0xECE * 8 + 2)
#define                                 TMR3IF_bit          _BIT_ACCESS(PIR4,2)
// IPR4<TMR3IP>
extern volatile __bit                   TMR3IP              __at(0x75F2);	// @ (0xEBE * 8 + 2)
#define                                 TMR3IP_bit          _BIT_ACCESS(IPR4,2)
// TMR3L<TMR3L0>
extern volatile __bit                   TMR3L0              __at(0x7E38);	// @ (0xFC7 * 8 + 0)
#define                                 TMR3L0_bit          _BIT_ACCESS(TMR3L,0)
// TMR3L<TMR3L1>
extern volatile __bit                   TMR3L1              __at(0x7E39);	// @ (0xFC7 * 8 + 1)
#define                                 TMR3L1_bit          _BIT_ACCESS(TMR3L,1)
// TMR3L<TMR3L2>
extern volatile __bit                   TMR3L2              __at(0x7E3A);	// @ (0xFC7 * 8 + 2)
#define                                 TMR3L2_bit          _BIT_ACCESS(TMR3L,2)
// TMR3L<TMR3L3>
extern volatile __bit                   TMR3L3              __at(0x7E3B);	// @ (0xFC7 * 8 + 3)
#define                                 TMR3L3_bit          _BIT_ACCESS(TMR3L,3)
// TMR3L<TMR3L4>
extern volatile __bit                   TMR3L4              __at(0x7E3C);	// @ (0xFC7 * 8 + 4)
#define                                 TMR3L4_bit          _BIT_ACCESS(TMR3L,4)
// TMR3L<TMR3L5>
extern volatile __bit                   TMR3L5              __at(0x7E3D);	// @ (0xFC7 * 8 + 5)
#define                                 TMR3L5_bit          _BIT_ACCESS(TMR3L,5)
// TMR3L<TMR3L6>
extern volatile __bit                   TMR3L6              __at(0x7E3E);	// @ (0xFC7 * 8 + 6)
#define                                 TMR3L6_bit          _BIT_ACCESS(TMR3L,6)
// TMR3L<TMR3L7>
extern volatile __bit                   TMR3L7              __at(0x7E3F);	// @ (0xFC7 * 8 + 7)
#define                                 TMR3L7_bit          _BIT_ACCESS(TMR3L,7)
// PMD1<TMR3MD>
extern volatile __bit                   TMR3MD              __at(0x7713);	// @ (0xEE2 * 8 + 3)
#define                                 TMR3MD_bit          _BIT_ACCESS(PMD1,3)
// T3CON<TMR3ON>
extern volatile __bit                   TMR3ON              __at(0x7E48);	// @ (0xFC9 * 8 + 0)
#define                                 TMR3ON_bit          _BIT_ACCESS(T3CON,0)
// PIE4<TMR4IE>
extern volatile __bit                   TMR4IE              __at(0x7633);	// @ (0xEC6 * 8 + 3)
#define                                 TMR4IE_bit          _BIT_ACCESS(PIE4,3)
// PIR4<TMR4IF>
extern volatile __bit                   TMR4IF              __at(0x7673);	// @ (0xECE * 8 + 3)
#define                                 TMR4IF_bit          _BIT_ACCESS(PIR4,3)
// IPR4<TMR4IP>
extern volatile __bit                   TMR4IP              __at(0x75F3);	// @ (0xEBE * 8 + 3)
#define                                 TMR4IP_bit          _BIT_ACCESS(IPR4,3)
// PMD1<TMR4MD>
extern volatile __bit                   TMR4MD              __at(0x7714);	// @ (0xEE2 * 8 + 4)
#define                                 TMR4MD_bit          _BIT_ACCESS(PMD1,4)
// T4CON<TMR4ON>
extern volatile __bit                   TMR4ON              __at(0x7DBF);	// @ (0xFB7 * 8 + 7)
#define                                 TMR4ON_bit          _BIT_ACCESS(T4CON,7)
// TMR5L<TMR50>
extern volatile __bit                   TMR50               __at(0x7E08);	// @ (0xFC1 * 8 + 0)
#define                                 TMR50_bit           _BIT_ACCESS(TMR5L,0)
// TMR5L<TMR51>
extern volatile __bit                   TMR51               __at(0x7E09);	// @ (0xFC1 * 8 + 1)
#define                                 TMR51_bit           _BIT_ACCESS(TMR5L,1)
// TMR5H<TMR510>
extern volatile __bit                   TMR510              __at(0x7E12);	// @ (0xFC2 * 8 + 2)
#define                                 TMR510_bit          _BIT_ACCESS(TMR5H,2)
// TMR5H<TMR511>
extern volatile __bit                   TMR511              __at(0x7E13);	// @ (0xFC2 * 8 + 3)
#define                                 TMR511_bit          _BIT_ACCESS(TMR5H,3)
// TMR5H<TMR512>
extern volatile __bit                   TMR512              __at(0x7E14);	// @ (0xFC2 * 8 + 4)
#define                                 TMR512_bit          _BIT_ACCESS(TMR5H,4)
// TMR5H<TMR513>
extern volatile __bit                   TMR513              __at(0x7E15);	// @ (0xFC2 * 8 + 5)
#define                                 TMR513_bit          _BIT_ACCESS(TMR5H,5)
// TMR5H<TMR514>
extern volatile __bit                   TMR514              __at(0x7E16);	// @ (0xFC2 * 8 + 6)
#define                                 TMR514_bit          _BIT_ACCESS(TMR5H,6)
// TMR5H<TMR515>
extern volatile __bit                   TMR515              __at(0x7E17);	// @ (0xFC2 * 8 + 7)
#define                                 TMR515_bit          _BIT_ACCESS(TMR5H,7)
// TMR5L<TMR52>
extern volatile __bit                   TMR52               __at(0x7E0A);	// @ (0xFC1 * 8 + 2)
#define                                 TMR52_bit           _BIT_ACCESS(TMR5L,2)
// TMR5L<TMR53>
extern volatile __bit                   TMR53               __at(0x7E0B);	// @ (0xFC1 * 8 + 3)
#define                                 TMR53_bit           _BIT_ACCESS(TMR5L,3)
// TMR5L<TMR54>
extern volatile __bit                   TMR54               __at(0x7E0C);	// @ (0xFC1 * 8 + 4)
#define                                 TMR54_bit           _BIT_ACCESS(TMR5L,4)
// TMR5L<TMR55>
extern volatile __bit                   TMR55               __at(0x7E0D);	// @ (0xFC1 * 8 + 5)
#define                                 TMR55_bit           _BIT_ACCESS(TMR5L,5)
// TMR5L<TMR56>
extern volatile __bit                   TMR56               __at(0x7E0E);	// @ (0xFC1 * 8 + 6)
#define                                 TMR56_bit           _BIT_ACCESS(TMR5L,6)
// TMR5L<TMR57>
extern volatile __bit                   TMR57               __at(0x7E0F);	// @ (0xFC1 * 8 + 7)
#define                                 TMR57_bit           _BIT_ACCESS(TMR5L,7)
// TMR5H<TMR58>
extern volatile __bit                   TMR58               __at(0x7E10);	// @ (0xFC2 * 8 + 0)
#define                                 TMR58_bit           _BIT_ACCESS(TMR5H,0)
// TMR5H<TMR59>
extern volatile __bit                   TMR59               __at(0x7E11);	// @ (0xFC2 * 8 + 1)
#define                                 TMR59_bit           _BIT_ACCESS(TMR5H,1)
// PIE5<TMR5GIE>
extern volatile __bit                   TMR5GIE             __at(0x763A);	// @ (0xEC7 * 8 + 2)
#define                                 TMR5GIE_bit         _BIT_ACCESS(PIE5,2)
// PIR5<TMR5GIF>
extern volatile __bit                   TMR5GIF             __at(0x767A);	// @ (0xECF * 8 + 2)
#define                                 TMR5GIF_bit         _BIT_ACCESS(PIR5,2)
// IPR5<TMR5GIP>
extern volatile __bit                   TMR5GIP             __at(0x75FA);	// @ (0xEBF * 8 + 2)
#define                                 TMR5GIP_bit         _BIT_ACCESS(IPR5,2)
// TMR5H<TMR5H0>
extern volatile __bit                   TMR5H0              __at(0x7E10);	// @ (0xFC2 * 8 + 0)
#define                                 TMR5H0_bit          _BIT_ACCESS(TMR5H,0)
// TMR5H<TMR5H1>
extern volatile __bit                   TMR5H1              __at(0x7E11);	// @ (0xFC2 * 8 + 1)
#define                                 TMR5H1_bit          _BIT_ACCESS(TMR5H,1)
// TMR5H<TMR5H2>
extern volatile __bit                   TMR5H2              __at(0x7E12);	// @ (0xFC2 * 8 + 2)
#define                                 TMR5H2_bit          _BIT_ACCESS(TMR5H,2)
// TMR5H<TMR5H3>
extern volatile __bit                   TMR5H3              __at(0x7E13);	// @ (0xFC2 * 8 + 3)
#define                                 TMR5H3_bit          _BIT_ACCESS(TMR5H,3)
// TMR5H<TMR5H4>
extern volatile __bit                   TMR5H4              __at(0x7E14);	// @ (0xFC2 * 8 + 4)
#define                                 TMR5H4_bit          _BIT_ACCESS(TMR5H,4)
// TMR5H<TMR5H5>
extern volatile __bit                   TMR5H5              __at(0x7E15);	// @ (0xFC2 * 8 + 5)
#define                                 TMR5H5_bit          _BIT_ACCESS(TMR5H,5)
// TMR5H<TMR5H6>
extern volatile __bit                   TMR5H6              __at(0x7E16);	// @ (0xFC2 * 8 + 6)
#define                                 TMR5H6_bit          _BIT_ACCESS(TMR5H,6)
// TMR5H<TMR5H7>
extern volatile __bit                   TMR5H7              __at(0x7E17);	// @ (0xFC2 * 8 + 7)
#define                                 TMR5H7_bit          _BIT_ACCESS(TMR5H,7)
// PIE4<TMR5IE>
extern volatile __bit                   TMR5IE              __at(0x7634);	// @ (0xEC6 * 8 + 4)
#define                                 TMR5IE_bit          _BIT_ACCESS(PIE4,4)
// PIR4<TMR5IF>
extern volatile __bit                   TMR5IF              __at(0x7674);	// @ (0xECE * 8 + 4)
#define                                 TMR5IF_bit          _BIT_ACCESS(PIR4,4)
// IPR4<TMR5IP>
extern volatile __bit                   TMR5IP              __at(0x75F4);	// @ (0xEBE * 8 + 4)
#define                                 TMR5IP_bit          _BIT_ACCESS(IPR4,4)
// TMR5L<TMR5L0>
extern volatile __bit                   TMR5L0              __at(0x7E08);	// @ (0xFC1 * 8 + 0)
#define                                 TMR5L0_bit          _BIT_ACCESS(TMR5L,0)
// TMR5L<TMR5L1>
extern volatile __bit                   TMR5L1              __at(0x7E09);	// @ (0xFC1 * 8 + 1)
#define                                 TMR5L1_bit          _BIT_ACCESS(TMR5L,1)
// TMR5L<TMR5L2>
extern volatile __bit                   TMR5L2              __at(0x7E0A);	// @ (0xFC1 * 8 + 2)
#define                                 TMR5L2_bit          _BIT_ACCESS(TMR5L,2)
// TMR5L<TMR5L3>
extern volatile __bit                   TMR5L3              __at(0x7E0B);	// @ (0xFC1 * 8 + 3)
#define                                 TMR5L3_bit          _BIT_ACCESS(TMR5L,3)
// TMR5L<TMR5L4>
extern volatile __bit                   TMR5L4              __at(0x7E0C);	// @ (0xFC1 * 8 + 4)
#define                                 TMR5L4_bit          _BIT_ACCESS(TMR5L,4)
// TMR5L<TMR5L5>
extern volatile __bit                   TMR5L5              __at(0x7E0D);	// @ (0xFC1 * 8 + 5)
#define                                 TMR5L5_bit          _BIT_ACCESS(TMR5L,5)
// TMR5L<TMR5L6>
extern volatile __bit                   TMR5L6              __at(0x7E0E);	// @ (0xFC1 * 8 + 6)
#define                                 TMR5L6_bit          _BIT_ACCESS(TMR5L,6)
// TMR5L<TMR5L7>
extern volatile __bit                   TMR5L7              __at(0x7E0F);	// @ (0xFC1 * 8 + 7)
#define                                 TMR5L7_bit          _BIT_ACCESS(TMR5L,7)
// PMD1<TMR5MD>
extern volatile __bit                   TMR5MD              __at(0x7715);	// @ (0xEE2 * 8 + 5)
#define                                 TMR5MD_bit          _BIT_ACCESS(PMD1,5)
// T5CON<TMR5ON>
extern volatile __bit                   TMR5ON              __at(0x7E18);	// @ (0xFC3 * 8 + 0)
#define                                 TMR5ON_bit          _BIT_ACCESS(T5CON,0)
// PIE4<TMR6IE>
extern volatile __bit                   TMR6IE              __at(0x7635);	// @ (0xEC6 * 8 + 5)
#define                                 TMR6IE_bit          _BIT_ACCESS(PIE4,5)
// PIR4<TMR6IF>
extern volatile __bit                   TMR6IF              __at(0x7675);	// @ (0xECE * 8 + 5)
#define                                 TMR6IF_bit          _BIT_ACCESS(PIR4,5)
// IPR4<TMR6IP>
extern volatile __bit                   TMR6IP              __at(0x75F5);	// @ (0xEBE * 8 + 5)
#define                                 TMR6IP_bit          _BIT_ACCESS(IPR4,5)
// PMD1<TMR6MD>
extern volatile __bit                   TMR6MD              __at(0x7716);	// @ (0xEE2 * 8 + 6)
#define                                 TMR6MD_bit          _BIT_ACCESS(PMD1,6)
// T6CON<TMR6ON>
extern volatile __bit                   TMR6ON              __at(0x7D8F);	// @ (0xFB1 * 8 + 7)
#define                                 TMR6ON_bit          _BIT_ACCESS(T6CON,7)
// STATUS<TO>
extern volatile __bit                   TO                  __at(0x7EC6);	// @ (0xFD8 * 8 + 6)
#define                                 TO_bit              _BIT_ACCESS(STATUS,6)
// TRISA<TRISA0>
extern volatile __bit                   TRISA0              __at(0x7C40);	// @ (0xF88 * 8 + 0)
#define                                 TRISA0_bit          _BIT_ACCESS(TRISA,0)
// TRISA<TRISA1>
extern volatile __bit                   TRISA1              __at(0x7C41);	// @ (0xF88 * 8 + 1)
#define                                 TRISA1_bit          _BIT_ACCESS(TRISA,1)
// TRISA<TRISA2>
extern volatile __bit                   TRISA2              __at(0x7C42);	// @ (0xF88 * 8 + 2)
#define                                 TRISA2_bit          _BIT_ACCESS(TRISA,2)
// TRISA<TRISA3>
extern volatile __bit                   TRISA3              __at(0x7C43);	// @ (0xF88 * 8 + 3)
#define                                 TRISA3_bit          _BIT_ACCESS(TRISA,3)
// TRISA<TRISA4>
extern volatile __bit                   TRISA4              __at(0x7C44);	// @ (0xF88 * 8 + 4)
#define                                 TRISA4_bit          _BIT_ACCESS(TRISA,4)
// TRISA<TRISA5>
extern volatile __bit                   TRISA5              __at(0x7C45);	// @ (0xF88 * 8 + 5)
#define                                 TRISA5_bit          _BIT_ACCESS(TRISA,5)
// TRISA<TRISA6>
extern volatile __bit                   TRISA6              __at(0x7C46);	// @ (0xF88 * 8 + 6)
#define                                 TRISA6_bit          _BIT_ACCESS(TRISA,6)
// TRISA<TRISA7>
extern volatile __bit                   TRISA7              __at(0x7C47);	// @ (0xF88 * 8 + 7)
#define                                 TRISA7_bit          _BIT_ACCESS(TRISA,7)
// TRISB<TRISB0>
extern volatile __bit                   TRISB0              __at(0x7C48);	// @ (0xF89 * 8 + 0)
#define                                 TRISB0_bit          _BIT_ACCESS(TRISB,0)
// TRISB<TRISB1>
extern volatile __bit                   TRISB1              __at(0x7C49);	// @ (0xF89 * 8 + 1)
#define                                 TRISB1_bit          _BIT_ACCESS(TRISB,1)
// TRISB<TRISB2>
extern volatile __bit                   TRISB2              __at(0x7C4A);	// @ (0xF89 * 8 + 2)
#define                                 TRISB2_bit          _BIT_ACCESS(TRISB,2)
// TRISB<TRISB3>
extern volatile __bit                   TRISB3              __at(0x7C4B);	// @ (0xF89 * 8 + 3)
#define                                 TRISB3_bit          _BIT_ACCESS(TRISB,3)
// TRISB<TRISB4>
extern volatile __bit                   TRISB4              __at(0x7C4C);	// @ (0xF89 * 8 + 4)
#define                                 TRISB4_bit          _BIT_ACCESS(TRISB,4)
// TRISB<TRISB5>
extern volatile __bit                   TRISB5              __at(0x7C4D);	// @ (0xF89 * 8 + 5)
#define                                 TRISB5_bit          _BIT_ACCESS(TRISB,5)
// TRISB<TRISB6>
extern volatile __bit                   TRISB6              __at(0x7C4E);	// @ (0xF89 * 8 + 6)
#define                                 TRISB6_bit          _BIT_ACCESS(TRISB,6)
// TRISB<TRISB7>
extern volatile __bit                   TRISB7              __at(0x7C4F);	// @ (0xF89 * 8 + 7)
#define                                 TRISB7_bit          _BIT_ACCESS(TRISB,7)
// TRISC<TRISC0>
extern volatile __bit                   TRISC0              __at(0x7C50);	// @ (0xF8A * 8 + 0)
#define                                 TRISC0_bit          _BIT_ACCESS(TRISC,0)
// TRISC<TRISC1>
extern volatile __bit                   TRISC1              __at(0x7C51);	// @ (0xF8A * 8 + 1)
#define                                 TRISC1_bit          _BIT_ACCESS(TRISC,1)
// TRISC<TRISC2>
extern volatile __bit                   TRISC2              __at(0x7C52);	// @ (0xF8A * 8 + 2)
#define                                 TRISC2_bit          _BIT_ACCESS(TRISC,2)
// TRISC<TRISC3>
extern volatile __bit                   TRISC3              __at(0x7C53);	// @ (0xF8A * 8 + 3)
#define                                 TRISC3_bit          _BIT_ACCESS(TRISC,3)
// TRISC<TRISC4>
extern volatile __bit                   TRISC4              __at(0x7C54);	// @ (0xF8A * 8 + 4)
#define                                 TRISC4_bit          _BIT_ACCESS(TRISC,4)
// TRISC<TRISC5>
extern volatile __bit                   TRISC5              __at(0x7C55);	// @ (0xF8A * 8 + 5)
#define                                 TRISC5_bit          _BIT_ACCESS(TRISC,5)
// TRISC<TRISC6>
extern volatile __bit                   TRISC6              __at(0x7C56);	// @ (0xF8A * 8 + 6)
#define                                 TRISC6_bit          _BIT_ACCESS(TRISC,6)
// TRISC<TRISC7>
extern volatile __bit                   TRISC7              __at(0x7C57);	// @ (0xF8A * 8 + 7)
#define                                 TRISC7_bit          _BIT_ACCESS(TRISC,7)
// TX1STA<TRMT>
extern volatile __bit                   TRMT                __at(0x7CF1);	// @ (0xF9E * 8 + 1)
#define                                 TRMT_bit            _BIT_ACCESS(TX1STA,1)
// TX1STA<TRMT1>
extern volatile __bit                   TRMT1               __at(0x7CF1);	// @ (0xF9E * 8 + 1)
#define                                 TRMT1_bit           _BIT_ACCESS(TX1STA,1)
// SCANTRIG<TSEL0>
extern volatile __bit                   TSEL0               __at(0x7A80);	// @ (0xF50 * 8 + 0)
#define                                 TSEL0_bit           _BIT_ACCESS(SCANTRIG,0)
// SCANTRIG<TSEL1>
extern volatile __bit                   TSEL1               __at(0x7A81);	// @ (0xF50 * 8 + 1)
#define                                 TSEL1_bit           _BIT_ACCESS(SCANTRIG,1)
// SCANTRIG<TSEL2>
extern volatile __bit                   TSEL2               __at(0x7A82);	// @ (0xF50 * 8 + 2)
#define                                 TSEL2_bit           _BIT_ACCESS(SCANTRIG,2)
// SCANTRIG<TSEL3>
extern volatile __bit                   TSEL3               __at(0x7A83);	// @ (0xF50 * 8 + 3)
#define                                 TSEL3_bit           _BIT_ACCESS(SCANTRIG,3)
// FVRCON<TSEN>
extern volatile __bit                   TSEN                __at(0x798D);	// @ (0xF31 * 8 + 5)
#define                                 TSEN_bit            _BIT_ACCESS(FVRCON,5)
// FVRCON<TSRNG>
extern volatile __bit                   TSRNG               __at(0x798C);	// @ (0xF31 * 8 + 4)
#define                                 TSRNG_bit           _BIT_ACCESS(FVRCON,4)
// OSCTUNE<TUN0>
extern volatile __bit                   TUN0                __at(0x76E8);	// @ (0xEDD * 8 + 0)
#define                                 TUN0_bit            _BIT_ACCESS(OSCTUNE,0)
// OSCTUNE<TUN1>
extern volatile __bit                   TUN1                __at(0x76E9);	// @ (0xEDD * 8 + 1)
#define                                 TUN1_bit            _BIT_ACCESS(OSCTUNE,1)
// OSCTUNE<TUN2>
extern volatile __bit                   TUN2                __at(0x76EA);	// @ (0xEDD * 8 + 2)
#define                                 TUN2_bit            _BIT_ACCESS(OSCTUNE,2)
// OSCTUNE<TUN3>
extern volatile __bit                   TUN3                __at(0x76EB);	// @ (0xEDD * 8 + 3)
#define                                 TUN3_bit            _BIT_ACCESS(OSCTUNE,3)
// OSCTUNE<TUN4>
extern volatile __bit                   TUN4                __at(0x76EC);	// @ (0xEDD * 8 + 4)
#define                                 TUN4_bit            _BIT_ACCESS(OSCTUNE,4)
// OSCTUNE<TUN5>
extern volatile __bit                   TUN5                __at(0x76ED);	// @ (0xEDD * 8 + 5)
#define                                 TUN5_bit            _BIT_ACCESS(OSCTUNE,5)
// PIE3<TX1IE>
extern volatile __bit                   TX1IE               __at(0x762C);	// @ (0xEC5 * 8 + 4)
#define                                 TX1IE_bit           _BIT_ACCESS(PIE3,4)
// PIR3<TX1IF>
extern volatile __bit                   TX1IF               __at(0x766C);	// @ (0xECD * 8 + 4)
#define                                 TX1IF_bit           _BIT_ACCESS(PIR3,4)
// CK1PPS<TX1PPS0>
extern volatile __bit                   TX1PPS0             __at(0x75B0);	// @ (0xEB6 * 8 + 0)
#define                                 TX1PPS0_bit         _BIT_ACCESS(CK1PPS,0)
// CK1PPS<TX1PPS1>
extern volatile __bit                   TX1PPS1             __at(0x75B1);	// @ (0xEB6 * 8 + 1)
#define                                 TX1PPS1_bit         _BIT_ACCESS(CK1PPS,1)
// CK1PPS<TX1PPS2>
extern volatile __bit                   TX1PPS2             __at(0x75B2);	// @ (0xEB6 * 8 + 2)
#define                                 TX1PPS2_bit         _BIT_ACCESS(CK1PPS,2)
// CK1PPS<TX1PPS3>
extern volatile __bit                   TX1PPS3             __at(0x75B3);	// @ (0xEB6 * 8 + 3)
#define                                 TX1PPS3_bit         _BIT_ACCESS(CK1PPS,3)
// CK1PPS<TX1PPS4>
extern volatile __bit                   TX1PPS4             __at(0x75B4);	// @ (0xEB6 * 8 + 4)
#define                                 TX1PPS4_bit         _BIT_ACCESS(CK1PPS,4)
// TX1STA<TX8_9>
extern volatile __bit                   TX8_9               __at(0x7CF6);	// @ (0xF9E * 8 + 6)
#define                                 TX8_9_bit           _BIT_ACCESS(TX1STA,6)
// TX1STA<TX9>
extern volatile __bit                   TX9                 __at(0x7CF6);	// @ (0xF9E * 8 + 6)
#define                                 TX9_bit             _BIT_ACCESS(TX1STA,6)
// TX1STA<TX91>
extern volatile __bit                   TX91                __at(0x7CF6);	// @ (0xF9E * 8 + 6)
#define                                 TX91_bit            _BIT_ACCESS(TX1STA,6)
// TX1STA<TX9D>
extern volatile __bit                   TX9D                __at(0x7CF0);	// @ (0xF9E * 8 + 0)
#define                                 TX9D_bit            _BIT_ACCESS(TX1STA,0)
// TX1STA<TX9D1>
extern volatile __bit                   TX9D1               __at(0x7CF0);	// @ (0xF9E * 8 + 0)
#define                                 TX9D1_bit           _BIT_ACCESS(TX1STA,0)
// PIE3<TXB2IE>
extern volatile __bit                   TXB2IE              __at(0x762C);	// @ (0xEC5 * 8 + 4)
#define                                 TXB2IE_bit          _BIT_ACCESS(PIE3,4)
// PIE3<TXBNIE>
extern volatile __bit                   TXBNIE              __at(0x762C);	// @ (0xEC5 * 8 + 4)
#define                                 TXBNIE_bit          _BIT_ACCESS(PIE3,4)
// PIR3<TXBNIF>
extern volatile __bit                   TXBNIF              __at(0x766C);	// @ (0xECD * 8 + 4)
#define                                 TXBNIF_bit          _BIT_ACCESS(PIR3,4)
// IPR3<TXBNIP>
extern volatile __bit                   TXBNIP              __at(0x75EC);	// @ (0xEBD * 8 + 4)
#define                                 TXBNIP_bit          _BIT_ACCESS(IPR3,4)
// BAUD1CON<TXCKP>
extern volatile __bit                   TXCKP               __at(0x7CFC);	// @ (0xF9F * 8 + 4)
#define                                 TXCKP_bit           _BIT_ACCESS(BAUD1CON,4)
// BAUD1CON<TXCKP1>
extern volatile __bit                   TXCKP1              __at(0x7CFC);	// @ (0xF9F * 8 + 4)
#define                                 TXCKP1_bit          _BIT_ACCESS(BAUD1CON,4)
// TX1STA<TXD8>
extern volatile __bit                   TXD8                __at(0x7CF0);	// @ (0xF9E * 8 + 0)
#define                                 TXD8_bit            _BIT_ACCESS(TX1STA,0)
// TX1STA<TXEN>
extern volatile __bit                   TXEN                __at(0x7CF5);	// @ (0xF9E * 8 + 5)
#define                                 TXEN_bit            _BIT_ACCESS(TX1STA,5)
// TX1STA<TXEN1>
extern volatile __bit                   TXEN1               __at(0x7CF5);	// @ (0xF9E * 8 + 5)
#define                                 TXEN1_bit           _BIT_ACCESS(TX1STA,5)
// PIE3<TXIE>
extern volatile __bit                   TXIE                __at(0x762C);	// @ (0xEC5 * 8 + 4)
#define                                 TXIE_bit            _BIT_ACCESS(PIE3,4)
// PIR3<TXIF>
extern volatile __bit                   TXIF                __at(0x766C);	// @ (0xECD * 8 + 4)
#define                                 TXIF_bit            _BIT_ACCESS(PIR3,4)
// IPR3<TXIP>
extern volatile __bit                   TXIP                __at(0x75EC);	// @ (0xEBD * 8 + 4)
#define                                 TXIP_bit            _BIT_ACCESS(IPR3,4)
// CK1PPS<TXPPS0>
extern volatile __bit                   TXPPS0              __at(0x75B0);	// @ (0xEB6 * 8 + 0)
#define                                 TXPPS0_bit          _BIT_ACCESS(CK1PPS,0)
// CK1PPS<TXPPS1>
extern volatile __bit                   TXPPS1              __at(0x75B1);	// @ (0xEB6 * 8 + 1)
#define                                 TXPPS1_bit          _BIT_ACCESS(CK1PPS,1)
// CK1PPS<TXPPS2>
extern volatile __bit                   TXPPS2              __at(0x75B2);	// @ (0xEB6 * 8 + 2)
#define                                 TXPPS2_bit          _BIT_ACCESS(CK1PPS,2)
// CK1PPS<TXPPS3>
extern volatile __bit                   TXPPS3              __at(0x75B3);	// @ (0xEB6 * 8 + 3)
#define                                 TXPPS3_bit          _BIT_ACCESS(CK1PPS,3)
// CK1PPS<TXPPS4>
extern volatile __bit                   TXPPS4              __at(0x75B4);	// @ (0xEB6 * 8 + 4)
#define                                 TXPPS4_bit          _BIT_ACCESS(CK1PPS,4)
// SSP1STAT<UA>
extern volatile __bit                   UA                  __at(0x7CA9);	// @ (0xF95 * 8 + 1)
#define                                 UA_bit              _BIT_ACCESS(SSP1STAT,1)
// SSP1STAT<UA1>
extern volatile __bit                   UA1                 __at(0x7CA9);	// @ (0xF95 * 8 + 1)
#define                                 UA1_bit             _BIT_ACCESS(SSP1STAT,1)
// PMD4<UART1MD>
extern volatile __bit                   UART1MD             __at(0x772E);	// @ (0xEE5 * 8 + 6)
#define                                 UART1MD_bit         _BIT_ACCESS(PMD4,6)
// PORTA<ULPWUIN>
extern volatile __bit                   ULPWUIN             __at(0x7C68);	// @ (0xF8D * 8 + 0)
#define                                 ULPWUIN_bit         _BIT_ACCESS(PORTA,0)
// VREGCON<VREGPM0>
extern volatile __bit                   VREGPM0             __at(0x76F8);	// @ (0xEDF * 8 + 0)
#define                                 VREGPM0_bit         _BIT_ACCESS(VREGCON,0)
// VREGCON<VREGPM1>
extern volatile __bit                   VREGPM1             __at(0x76F9);	// @ (0xEDF * 8 + 1)
#define                                 VREGPM1_bit         _BIT_ACCESS(VREGCON,1)
// BAUD1CON<W4E>
extern volatile __bit                   W4E                 __at(0x7CF9);	// @ (0xF9F * 8 + 1)
#define                                 W4E_bit             _BIT_ACCESS(BAUD1CON,1)
// SSP1CON1<WCOL>
extern volatile __bit                   WCOL                __at(0x7CB7);	// @ (0xF96 * 8 + 7)
#define                                 WCOL_bit            _BIT_ACCESS(SSP1CON1,7)
// SSP1CON1<WCOL1>
extern volatile __bit                   WCOL1               __at(0x7CB7);	// @ (0xF96 * 8 + 7)
#define                                 WCOL1_bit           _BIT_ACCESS(SSP1CON1,7)
// WDTCON1<WDTCS0>
extern volatile __bit                   WDTCS0              __at(0x769C);	// @ (0xED3 * 8 + 4)
#define                                 WDTCS0_bit          _BIT_ACCESS(WDTCON1,4)
// WDTCON1<WDTCS1>
extern volatile __bit                   WDTCS1              __at(0x769D);	// @ (0xED3 * 8 + 5)
#define                                 WDTCS1_bit          _BIT_ACCESS(WDTCON1,5)
// WDTCON1<WDTCS2>
extern volatile __bit                   WDTCS2              __at(0x769E);	// @ (0xED3 * 8 + 6)
#define                                 WDTCS2_bit          _BIT_ACCESS(WDTCON1,6)
// WDTCON0<WDTPS0>
extern volatile __bit                   WDTPS0              __at(0x7691);	// @ (0xED2 * 8 + 1)
#define                                 WDTPS0_bit          _BIT_ACCESS(WDTCON0,1)
// WDTCON0<WDTPS1>
extern volatile __bit                   WDTPS1              __at(0x7692);	// @ (0xED2 * 8 + 2)
#define                                 WDTPS1_bit          _BIT_ACCESS(WDTCON0,2)
// WDTCON0<WDTPS2>
extern volatile __bit                   WDTPS2              __at(0x7693);	// @ (0xED2 * 8 + 3)
#define                                 WDTPS2_bit          _BIT_ACCESS(WDTCON0,3)
// WDTCON0<WDTPS3>
extern volatile __bit                   WDTPS3              __at(0x7694);	// @ (0xED2 * 8 + 4)
#define                                 WDTPS3_bit          _BIT_ACCESS(WDTCON0,4)
// WDTCON0<WDTPS4>
extern volatile __bit                   WDTPS4              __at(0x7695);	// @ (0xED2 * 8 + 5)
#define                                 WDTPS4_bit          _BIT_ACCESS(WDTCON0,5)
// WDTPSL<WDTPSCNT0>
extern volatile __bit                   WDTPSCNT0           __at(0x76A0);	// @ (0xED4 * 8 + 0)
#define                                 WDTPSCNT0_bit       _BIT_ACCESS(WDTPSL,0)
// WDTPSL<WDTPSCNT1>
extern volatile __bit                   WDTPSCNT1           __at(0x76A1);	// @ (0xED4 * 8 + 1)
#define                                 WDTPSCNT1_bit       _BIT_ACCESS(WDTPSL,1)
// WDTPSH<WDTPSCNT10>
extern volatile __bit                   WDTPSCNT10          __at(0x76AA);	// @ (0xED5 * 8 + 2)
#define                                 WDTPSCNT10_bit      _BIT_ACCESS(WDTPSH,2)
// WDTPSH<WDTPSCNT11>
extern volatile __bit                   WDTPSCNT11          __at(0x76AB);	// @ (0xED5 * 8 + 3)
#define                                 WDTPSCNT11_bit      _BIT_ACCESS(WDTPSH,3)
// WDTPSH<WDTPSCNT12>
extern volatile __bit                   WDTPSCNT12          __at(0x76AC);	// @ (0xED5 * 8 + 4)
#define                                 WDTPSCNT12_bit      _BIT_ACCESS(WDTPSH,4)
// WDTPSH<WDTPSCNT13>
extern volatile __bit                   WDTPSCNT13          __at(0x76AD);	// @ (0xED5 * 8 + 5)
#define                                 WDTPSCNT13_bit      _BIT_ACCESS(WDTPSH,5)
// WDTPSH<WDTPSCNT14>
extern volatile __bit                   WDTPSCNT14          __at(0x76AE);	// @ (0xED5 * 8 + 6)
#define                                 WDTPSCNT14_bit      _BIT_ACCESS(WDTPSH,6)
// WDTPSH<WDTPSCNT15>
extern volatile __bit                   WDTPSCNT15          __at(0x76AF);	// @ (0xED5 * 8 + 7)
#define                                 WDTPSCNT15_bit      _BIT_ACCESS(WDTPSH,7)
// WDTTMR<WDTPSCNT16>
extern volatile __bit                   WDTPSCNT16          __at(0x76B0);	// @ (0xED6 * 8 + 0)
#define                                 WDTPSCNT16_bit      _BIT_ACCESS(WDTTMR,0)
// WDTTMR<WDTPSCNT17>
extern volatile __bit                   WDTPSCNT17          __at(0x76B1);	// @ (0xED6 * 8 + 1)
#define                                 WDTPSCNT17_bit      _BIT_ACCESS(WDTTMR,1)
// WDTPSL<WDTPSCNT2>
extern volatile __bit                   WDTPSCNT2           __at(0x76A2);	// @ (0xED4 * 8 + 2)
#define                                 WDTPSCNT2_bit       _BIT_ACCESS(WDTPSL,2)
// WDTPSL<WDTPSCNT3>
extern volatile __bit                   WDTPSCNT3           __at(0x76A3);	// @ (0xED4 * 8 + 3)
#define                                 WDTPSCNT3_bit       _BIT_ACCESS(WDTPSL,3)
// WDTPSL<WDTPSCNT4>
extern volatile __bit                   WDTPSCNT4           __at(0x76A4);	// @ (0xED4 * 8 + 4)
#define                                 WDTPSCNT4_bit       _BIT_ACCESS(WDTPSL,4)
// WDTPSL<WDTPSCNT5>
extern volatile __bit                   WDTPSCNT5           __at(0x76A5);	// @ (0xED4 * 8 + 5)
#define                                 WDTPSCNT5_bit       _BIT_ACCESS(WDTPSL,5)
// WDTPSL<WDTPSCNT6>
extern volatile __bit                   WDTPSCNT6           __at(0x76A6);	// @ (0xED4 * 8 + 6)
#define                                 WDTPSCNT6_bit       _BIT_ACCESS(WDTPSL,6)
// WDTPSL<WDTPSCNT7>
extern volatile __bit                   WDTPSCNT7           __at(0x76A7);	// @ (0xED4 * 8 + 7)
#define                                 WDTPSCNT7_bit       _BIT_ACCESS(WDTPSL,7)
// WDTPSH<WDTPSCNT8>
extern volatile __bit                   WDTPSCNT8           __at(0x76A8);	// @ (0xED5 * 8 + 0)
#define                                 WDTPSCNT8_bit       _BIT_ACCESS(WDTPSH,0)
// WDTPSH<WDTPSCNT9>
extern volatile __bit                   WDTPSCNT9           __at(0x76A9);	// @ (0xED5 * 8 + 1)
#define                                 WDTPSCNT9_bit       _BIT_ACCESS(WDTPSH,1)
// WDTCON0<WDTSEN>
extern volatile __bit                   WDTSEN              __at(0x7690);	// @ (0xED2 * 8 + 0)
#define                                 WDTSEN_bit          _BIT_ACCESS(WDTCON0,0)
// WDTTMR<WDTSTATE>
extern volatile __bit                   WDTSTATE            __at(0x76B2);	// @ (0xED6 * 8 + 2)
#define                                 WDTSTATE_bit        _BIT_ACCESS(WDTTMR,2)
// WDTTMR<WDTTMR0>
extern volatile __bit                   WDTTMR0             __at(0x76B3);	// @ (0xED6 * 8 + 3)
#define                                 WDTTMR0_bit         _BIT_ACCESS(WDTTMR,3)
// WDTTMR<WDTTMR1>
extern volatile __bit                   WDTTMR1             __at(0x76B4);	// @ (0xED6 * 8 + 4)
#define                                 WDTTMR1_bit         _BIT_ACCESS(WDTTMR,4)
// WDTTMR<WDTTMR2>
extern volatile __bit                   WDTTMR2             __at(0x76B5);	// @ (0xED6 * 8 + 5)
#define                                 WDTTMR2_bit         _BIT_ACCESS(WDTTMR,5)
// WDTTMR<WDTTMR3>
extern volatile __bit                   WDTTMR3             __at(0x76B6);	// @ (0xED6 * 8 + 6)
#define                                 WDTTMR3_bit         _BIT_ACCESS(WDTTMR,6)
// WDTTMR<WDTTMR4>
extern volatile __bit                   WDTTMR4             __at(0x76B7);	// @ (0xED6 * 8 + 7)
#define                                 WDTTMR4_bit         _BIT_ACCESS(WDTTMR,7)
// WDTCON1<WDTWINDOW0>
extern volatile __bit                   WDTWINDOW0          __at(0x7698);	// @ (0xED3 * 8 + 0)
#define                                 WDTWINDOW0_bit      _BIT_ACCESS(WDTCON1,0)
// WDTCON1<WDTWINDOW1>
extern volatile __bit                   WDTWINDOW1          __at(0x7699);	// @ (0xED3 * 8 + 1)
#define                                 WDTWINDOW1_bit      _BIT_ACCESS(WDTCON1,1)
// WDTCON1<WDTWINDOW2>
extern volatile __bit                   WDTWINDOW2          __at(0x769A);	// @ (0xED3 * 8 + 2)
#define                                 WDTWINDOW2_bit      _BIT_ACCESS(WDTCON1,2)
// PCON0<WDTWV>
extern volatile __bit                   WDTWV               __at(0x7EBD);	// @ (0xFD7 * 8 + 5)
#define                                 WDTWV_bit           _BIT_ACCESS(PCON0,5)
// WDTCON1<WINDOW0>
extern volatile __bit                   WINDOW0             __at(0x7698);	// @ (0xED3 * 8 + 0)
#define                                 WINDOW0_bit         _BIT_ACCESS(WDTCON1,0)
// WDTCON1<WINDOW1>
extern volatile __bit                   WINDOW1             __at(0x7699);	// @ (0xED3 * 8 + 1)
#define                                 WINDOW1_bit         _BIT_ACCESS(WDTCON1,1)
// WDTCON1<WINDOW2>
extern volatile __bit                   WINDOW2             __at(0x769A);	// @ (0xED3 * 8 + 2)
#define                                 WINDOW2_bit         _BIT_ACCESS(WDTCON1,2)
// WPUA<WPUA0>
extern volatile __bit                   WPUA0               __at(0x7880);	// @ (0xF10 * 8 + 0)
#define                                 WPUA0_bit           _BIT_ACCESS(WPUA,0)
// WPUA<WPUA1>
extern volatile __bit                   WPUA1               __at(0x7881);	// @ (0xF10 * 8 + 1)
#define                                 WPUA1_bit           _BIT_ACCESS(WPUA,1)
// WPUA<WPUA2>
extern volatile __bit                   WPUA2               __at(0x7882);	// @ (0xF10 * 8 + 2)
#define                                 WPUA2_bit           _BIT_ACCESS(WPUA,2)
// WPUA<WPUA3>
extern volatile __bit                   WPUA3               __at(0x7883);	// @ (0xF10 * 8 + 3)
#define                                 WPUA3_bit           _BIT_ACCESS(WPUA,3)
// WPUA<WPUA4>
extern volatile __bit                   WPUA4               __at(0x7884);	// @ (0xF10 * 8 + 4)
#define                                 WPUA4_bit           _BIT_ACCESS(WPUA,4)
// WPUA<WPUA5>
extern volatile __bit                   WPUA5               __at(0x7885);	// @ (0xF10 * 8 + 5)
#define                                 WPUA5_bit           _BIT_ACCESS(WPUA,5)
// WPUA<WPUA6>
extern volatile __bit                   WPUA6               __at(0x7886);	// @ (0xF10 * 8 + 6)
#define                                 WPUA6_bit           _BIT_ACCESS(WPUA,6)
// WPUA<WPUA7>
extern volatile __bit                   WPUA7               __at(0x7887);	// @ (0xF10 * 8 + 7)
#define                                 WPUA7_bit           _BIT_ACCESS(WPUA,7)
// WPUB<WPUB0>
extern volatile __bit                   WPUB0               __at(0x78C0);	// @ (0xF18 * 8 + 0)
#define                                 WPUB0_bit           _BIT_ACCESS(WPUB,0)
// WPUB<WPUB1>
extern volatile __bit                   WPUB1               __at(0x78C1);	// @ (0xF18 * 8 + 1)
#define                                 WPUB1_bit           _BIT_ACCESS(WPUB,1)
// WPUB<WPUB2>
extern volatile __bit                   WPUB2               __at(0x78C2);	// @ (0xF18 * 8 + 2)
#define                                 WPUB2_bit           _BIT_ACCESS(WPUB,2)
// WPUB<WPUB3>
extern volatile __bit                   WPUB3               __at(0x78C3);	// @ (0xF18 * 8 + 3)
#define                                 WPUB3_bit           _BIT_ACCESS(WPUB,3)
// WPUB<WPUB4>
extern volatile __bit                   WPUB4               __at(0x78C4);	// @ (0xF18 * 8 + 4)
#define                                 WPUB4_bit           _BIT_ACCESS(WPUB,4)
// WPUB<WPUB5>
extern volatile __bit                   WPUB5               __at(0x78C5);	// @ (0xF18 * 8 + 5)
#define                                 WPUB5_bit           _BIT_ACCESS(WPUB,5)
// WPUB<WPUB6>
extern volatile __bit                   WPUB6               __at(0x78C6);	// @ (0xF18 * 8 + 6)
#define                                 WPUB6_bit           _BIT_ACCESS(WPUB,6)
// WPUB<WPUB7>
extern volatile __bit                   WPUB7               __at(0x78C7);	// @ (0xF18 * 8 + 7)
#define                                 WPUB7_bit           _BIT_ACCESS(WPUB,7)
// WPUC<WPUC0>
extern volatile __bit                   WPUC0               __at(0x7900);	// @ (0xF20 * 8 + 0)
#define                                 WPUC0_bit           _BIT_ACCESS(WPUC,0)
// WPUC<WPUC1>
extern volatile __bit                   WPUC1               __at(0x7901);	// @ (0xF20 * 8 + 1)
#define                                 WPUC1_bit           _BIT_ACCESS(WPUC,1)
// WPUC<WPUC2>
extern volatile __bit                   WPUC2               __at(0x7902);	// @ (0xF20 * 8 + 2)
#define                                 WPUC2_bit           _BIT_ACCESS(WPUC,2)
// WPUC<WPUC3>
extern volatile __bit                   WPUC3               __at(0x7903);	// @ (0xF20 * 8 + 3)
#define                                 WPUC3_bit           _BIT_ACCESS(WPUC,3)
// WPUC<WPUC4>
extern volatile __bit                   WPUC4               __at(0x7904);	// @ (0xF20 * 8 + 4)
#define                                 WPUC4_bit           _BIT_ACCESS(WPUC,4)
// WPUC<WPUC5>
extern volatile __bit                   WPUC5               __at(0x7905);	// @ (0xF20 * 8 + 5)
#define                                 WPUC5_bit           _BIT_ACCESS(WPUC,5)
// WPUC<WPUC6>
extern volatile __bit                   WPUC6               __at(0x7906);	// @ (0xF20 * 8 + 6)
#define                                 WPUC6_bit           _BIT_ACCESS(WPUC,6)
// WPUC<WPUC7>
extern volatile __bit                   WPUC7               __at(0x7907);	// @ (0xF20 * 8 + 7)
#define                                 WPUC7_bit           _BIT_ACCESS(WPUC,7)
// WPUE<WPUE3>
extern volatile __bit                   WPUE3               __at(0x796B);	// @ (0xF2D * 8 + 3)
#define                                 WPUE3_bit           _BIT_ACCESS(WPUE,3)
// NVMCON1<WR>
extern volatile __bit                   WR                  __at(0x7C09);	// @ (0xF81 * 8 + 1)
#define                                 WR_bit              _BIT_ACCESS(NVMCON1,1)
// NVMCON1<WREN>
extern volatile __bit                   WREN                __at(0x7C0A);	// @ (0xF81 * 8 + 2)
#define                                 WREN_bit            _BIT_ACCESS(NVMCON1,2)
// NVMCON1<WRERR>
extern volatile __bit                   WRERR               __at(0x7C0B);	// @ (0xF81 * 8 + 3)
#define                                 WRERR_bit           _BIT_ACCESS(NVMCON1,3)
// BAUD1CON<WUE>
extern volatile __bit                   WUE                 __at(0x7CF9);	// @ (0xF9F * 8 + 1)
#define                                 WUE_bit             _BIT_ACCESS(BAUD1CON,1)
// BAUD1CON<WUE1>
extern volatile __bit                   WUE1                __at(0x7CF9);	// @ (0xF9F * 8 + 1)
#define                                 WUE1_bit            _BIT_ACCESS(BAUD1CON,1)
// CRCXORL<X1>
extern volatile __bit                   X1                  __at(0x7BD1);	// @ (0xF7A * 8 + 1)
#define                                 X1_bit              _BIT_ACCESS(CRCXORL,1)
// CRCXORH<X10>
extern volatile __bit                   X10                 __at(0x7BDA);	// @ (0xF7B * 8 + 2)
#define                                 X10_bit             _BIT_ACCESS(CRCXORH,2)
// CRCXORH<X11>
extern volatile __bit                   X11                 __at(0x7BDB);	// @ (0xF7B * 8 + 3)
#define                                 X11_bit             _BIT_ACCESS(CRCXORH,3)
// CRCXORH<X12>
extern volatile __bit                   X12                 __at(0x7BDC);	// @ (0xF7B * 8 + 4)
#define                                 X12_bit             _BIT_ACCESS(CRCXORH,4)
// CRCXORH<X13>
extern volatile __bit                   X13                 __at(0x7BDD);	// @ (0xF7B * 8 + 5)
#define                                 X13_bit             _BIT_ACCESS(CRCXORH,5)
// CRCXORH<X14>
extern volatile __bit                   X14                 __at(0x7BDE);	// @ (0xF7B * 8 + 6)
#define                                 X14_bit             _BIT_ACCESS(CRCXORH,6)
// CRCXORH<X15>
extern volatile __bit                   X15                 __at(0x7BDF);	// @ (0xF7B * 8 + 7)
#define                                 X15_bit             _BIT_ACCESS(CRCXORH,7)
// CRCXORL<X2>
extern volatile __bit                   X2                  __at(0x7BD2);	// @ (0xF7A * 8 + 2)
#define                                 X2_bit              _BIT_ACCESS(CRCXORL,2)
// CRCXORL<X3>
extern volatile __bit                   X3                  __at(0x7BD3);	// @ (0xF7A * 8 + 3)
#define                                 X3_bit              _BIT_ACCESS(CRCXORL,3)
// CRCXORL<X4>
extern volatile __bit                   X4                  __at(0x7BD4);	// @ (0xF7A * 8 + 4)
#define                                 X4_bit              _BIT_ACCESS(CRCXORL,4)
// CRCXORL<X5>
extern volatile __bit                   X5                  __at(0x7BD5);	// @ (0xF7A * 8 + 5)
#define                                 X5_bit              _BIT_ACCESS(CRCXORL,5)
// CRCXORL<X6>
extern volatile __bit                   X6                  __at(0x7BD6);	// @ (0xF7A * 8 + 6)
#define                                 X6_bit              _BIT_ACCESS(CRCXORL,6)
// CRCXORL<X7>
extern volatile __bit                   X7                  __at(0x7BD7);	// @ (0xF7A * 8 + 7)
#define                                 X7_bit              _BIT_ACCESS(CRCXORL,7)
// CRCXORH<X8>
extern volatile __bit                   X8                  __at(0x7BD8);	// @ (0xF7B * 8 + 0)
#define                                 X8_bit              _BIT_ACCESS(CRCXORH,0)
// CRCXORH<X9>
extern volatile __bit                   X9                  __at(0x7BD9);	// @ (0xF7B * 8 + 1)
#define                                 X9_bit              _BIT_ACCESS(CRCXORH,1)
// PIE2<ZCDIE>
extern volatile __bit                   ZCDIE               __at(0x7626);	// @ (0xEC4 * 8 + 6)
#define                                 ZCDIE_bit           _BIT_ACCESS(PIE2,6)
// PIR2<ZCDIF>
extern volatile __bit                   ZCDIF               __at(0x7666);	// @ (0xECC * 8 + 6)
#define                                 ZCDIF_bit           _BIT_ACCESS(PIR2,6)
// ZCDCON<ZCDINTN>
extern volatile __bit                   ZCDINTN             __at(0x7990);	// @ (0xF32 * 8 + 0)
#define                                 ZCDINTN_bit         _BIT_ACCESS(ZCDCON,0)
// ZCDCON<ZCDINTP>
extern volatile __bit                   ZCDINTP             __at(0x7991);	// @ (0xF32 * 8 + 1)
#define                                 ZCDINTP_bit         _BIT_ACCESS(ZCDCON,1)
// IPR2<ZCDIP>
extern volatile __bit                   ZCDIP               __at(0x75E6);	// @ (0xEBC * 8 + 6)
#define                                 ZCDIP_bit           _BIT_ACCESS(IPR2,6)
// PMD2<ZCDMD>
extern volatile __bit                   ZCDMD               __at(0x7718);	// @ (0xEE3 * 8 + 0)
#define                                 ZCDMD_bit           _BIT_ACCESS(PMD2,0)
// ZCDCON<ZCDOUT>
extern volatile __bit                   ZCDOUT              __at(0x7995);	// @ (0xF32 * 8 + 5)
#define                                 ZCDOUT_bit          _BIT_ACCESS(ZCDCON,5)
// ZCDCON<ZCDPOL>
extern volatile __bit                   ZCDPOL              __at(0x7994);	// @ (0xF32 * 8 + 4)
#define                                 ZCDPOL_bit          _BIT_ACCESS(ZCDCON,4)
// ZCDCON<ZCDSEN>
extern volatile __bit                   ZCDSEN              __at(0x7997);	// @ (0xF32 * 8 + 7)
#define                                 ZCDSEN_bit          _BIT_ACCESS(ZCDCON,7)
// STATUS<ZERO>
extern volatile __bit                   ZERO                __at(0x7EC2);	// @ (0xFD8 * 8 + 2)
#define                                 ZERO_bit            _BIT_ACCESS(STATUS,2)
// SSP1STAT<nA>
extern volatile __bit                   nA                  __at(0x7CAD);	// @ (0xF95 * 8 + 5)
#define                                 nA_bit              _BIT_ACCESS(SSP1STAT,5)
// SSP1STAT<nA2>
extern volatile __bit                   nA2                 __at(0x7CAD);	// @ (0xF95 * 8 + 5)
#define                                 nA2_bit             _BIT_ACCESS(SSP1STAT,5)
// SSP1STAT<nADDRESS>
extern volatile __bit                   nADDRESS            __at(0x7CAD);	// @ (0xF95 * 8 + 5)
#define                                 nADDRESS_bit        _BIT_ACCESS(SSP1STAT,5)
// SSP1STAT<nADDRESS1>
extern volatile __bit                   nADDRESS1           __at(0x7CAD);	// @ (0xF95 * 8 + 5)
#define                                 nADDRESS1_bit       _BIT_ACCESS(SSP1STAT,5)
// PCON0<nBOR>
extern volatile __bit                   nBOR                __at(0x7EB8);	// @ (0xFD7 * 8 + 0)
#define                                 nBOR_bit            _BIT_ACCESS(PCON0,0)
// STATUS<nPD>
extern volatile __bit                   nPD                 __at(0x7EC5);	// @ (0xFD8 * 8 + 5)
#define                                 nPD_bit             _BIT_ACCESS(STATUS,5)
// PCON0<nPOR>
extern volatile __bit                   nPOR                __at(0x7EB9);	// @ (0xFD7 * 8 + 1)
#define                                 nPOR_bit            _BIT_ACCESS(PCON0,1)
// PCON0<nRI>
extern volatile __bit                   nRI                 __at(0x7EBA);	// @ (0xFD7 * 8 + 2)
#define                                 nRI_bit             _BIT_ACCESS(PCON0,2)
// PCON0<nRMCLR>
extern volatile __bit                   nRMCLR              __at(0x7EBB);	// @ (0xFD7 * 8 + 3)
#define                                 nRMCLR_bit          _BIT_ACCESS(PCON0,3)
// PCON0<nRWDT>
extern volatile __bit                   nRWDT               __at(0x7EBC);	// @ (0xFD7 * 8 + 4)
#define                                 nRWDT_bit           _BIT_ACCESS(PCON0,4)
// T1CON<nT1SYNC>
extern volatile __bit                   nT1SYNC             __at(0x7E7A);	// @ (0xFCF * 8 + 2)
#define                                 nT1SYNC_bit         _BIT_ACCESS(T1CON,2)
// T3CON<nT3SYNC>
extern volatile __bit                   nT3SYNC             __at(0x7E4A);	// @ (0xFC9 * 8 + 2)
#define                                 nT3SYNC_bit         _BIT_ACCESS(T3CON,2)
// T5CON<nT5SYNC>
extern volatile __bit                   nT5SYNC             __at(0x7E1A);	// @ (0xFC3 * 8 + 2)
#define                                 nT5SYNC_bit         _BIT_ACCESS(T5CON,2)
// STATUS<nTO>
extern volatile __bit                   nTO                 __at(0x7EC6);	// @ (0xFD8 * 8 + 6)
#define                                 nTO_bit             _BIT_ACCESS(STATUS,6)
// SSP1STAT<nW>
extern volatile __bit                   nW                  __at(0x7CAA);	// @ (0xF95 * 8 + 2)
#define                                 nW_bit              _BIT_ACCESS(SSP1STAT,2)
// SSP1STAT<nW2>
extern volatile __bit                   nW2                 __at(0x7CAA);	// @ (0xF95 * 8 + 2)
#define                                 nW2_bit             _BIT_ACCESS(SSP1STAT,2)
// PCON0<nWDTWV>
extern volatile __bit                   nWDTWV              __at(0x7EBD);	// @ (0xFD7 * 8 + 5)
#define                                 nWDTWV_bit          _BIT_ACCESS(PCON0,5)
// SSP1STAT<nWRITE>
extern volatile __bit                   nWRITE              __at(0x7CAA);	// @ (0xF95 * 8 + 2)
#define                                 nWRITE_bit          _BIT_ACCESS(SSP1STAT,2)
// SSP1STAT<nWRITE1>
extern volatile __bit                   nWRITE1             __at(0x7CAA);	// @ (0xF95 * 8 + 2)
#define                                 nWRITE1_bit         _BIT_ACCESS(SSP1STAT,2)

#endif // _PIC18F25K40_H_
